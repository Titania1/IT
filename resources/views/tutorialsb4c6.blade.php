<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Python&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:45 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">18</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; Python</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials1600.html?tag=Python" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials72f5.html?product=Beams&amp;tag=Python" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; Python"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/web-traffic-monitor-python.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a web traffic monitor with Python</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Build a dashboard to monitor web traffic, along with a demo site to track. Use Flask for the backend, and vanilla JavaSc...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-poll-python.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live polling web app with Python</h3><p class="css-k12xad e5jrto45">Build a live voting application using Flask. Users will be able to vote for their favorite programming language. Results...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/bitcoin-live-graph-python.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flask</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Track Bitcoin prices on a live graph with Python</h3><p class="css-k12xad e5jrto45">Build a live graph to track Bitcoin prices using Flask. You will create a simple Python application that pulls in Bitcoi...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-terminal-python.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Python<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app in the terminal using Python</h3><p class="css-k12xad e5jrto45">Build a chat app with Python that allows users to log in and chat from within a terminal. Use Pysher to subscribe to Pus...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/activity-feed-flask.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an activity feed with Flask</h3><p class="css-k12xad e5jrto45">In this tutorial, we will cover how to build a live blog feed using Flask and HTML.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/todo-app-flask.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Python<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a to-do app with Flask</h3><p class="css-k12xad e5jrto45">Build a CRUD checklist app with Flask from scratch and add realtime functionality to it.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-feed-django.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Django</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a photo feed using Django</h3><p class="css-k12xad e5jrto45">Learn how to build a photo feed using Django and create your own Instagram feed</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/read-receipts-django.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Django<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build read receipts using Django</h3><p class="css-k12xad e5jrto45">Create read receipts for your chat application with Django and Vue.js</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-feed-swift-raspberrypi.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a photo feed with Swift and Raspberry Pi</h3><p class="css-k12xad e5jrto45">Build an iOS photo feed using Swift and Raspberry Pi and enable realtime updates.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials6454.html?product=Channels&amp;tag=Python&amp;page=1" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials6454.html?product=Channels&amp;tag=Python&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsb4c6.html?product=Channels&amp;tag=Python&amp;page=2" class="css-2wakph edg0byb1">2</a><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":18,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2LyBHEC0bSwMwyySAUq2cC","type":"Entry","createdAt":"2018-06-27T11:33:04.164Z","updatedAt":"2018-06-27T11:33:04.164Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a web traffic monitor with Python","url":"web-traffic-monitor-python","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/python-pusher-traffic-monitor","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}}],"reviewDate":"2018-06-26","description":"Build a dashboard to monitor web traffic, along with a demo site to track. Use Flask for the backend, and vanilla JavaScript for the frontend. View details about website visitors in realtime.","prerequisite":"You will need Python 3+ installed on your machine. A basic knowledge of Flask, Python and JavaScript will be helpful.","content":"In today’s tech world, it is important to know where the traffic on your website comes from because it helps content creators and website owners understand their visitors better. Website owners can further use this information to improve their website, render better advertisements or generally improve their content based on this data.\n\nIn this tutorial, we will build a simple website and a traffic monitor, the traffic monitor will display details about visitors on the website. For every visitor, there will multiple columns such as time of visit, continent, country, city, operating system, browser, and pages visited.\nHere is a display of what the final application will look like:\n\n![python-web-traffic-demo](//images.ctfassets.net/1es3ne0caaid/173irZ04McmEIE0K8cQoew/5fb82398a74f83f8353e95c7fc5a935a/python-web-traffic-demo.gif)\n\nFrom the image above, we can see an incognito window to the left and the traffic monitor dashboard window to the right. In the incognito window, we visit our website on the local address [127.0.0.1:5000](http://127.0.0.1:5000) and it updates in realtime on the traffic monitor dashboard. It registers that a new user has visited the website and displays the associated data. The user data is also saved to the database so that whenever we open the traffic monitor dashboard, the data persists.\n\nWe will build the backend server for this application using the Python framework called [Flask.](http://flask.pocoo.org/) The source code for this tutorial is available here on [GitHub](https://github.com/neoighodaro/python-pusher-traffic-monitor).\n\n## Prerequisites\n\nTo follow along with this tutorial, a basic knowledge of Python, Flask, and JavaScript (ES6 syntax) is required. You will also need the following installed:\n\n\n1. [Python (\u003e= v3.x)](https://www.python.org/)\n2. [virtualenv](https://virtualenv.pypa.io/en/stable/)\n3. [Flask](http://flask.pocoo.org/)\n\nVirtualenv is great for creating isolated Python environments, so we can install dependencies in an isolated environment, and not pollute our global packages directory.\n\nLet’s install `virtualenv` with this command:\n\n```\n    $ pip install virtualenv\n```\n\n## Setting up the app environment\n\nLet’s create our project folder, and activate a virtual environment in it. Run the commands below:\n\n```\n    $ mkdir python-pusher-traffic-monitor\n    $ cd python-pusher-traffic-monitor\n    $ virtualenv .venv\n    $ source .venv/bin/activate # Linux based systems\n    $ \\path\\to\\env\\Scripts\\activate # Windows users\n```\n\nNow that we have the virtual environment setup, we can install Flask within it with this command:\n\n```\n    $ pip install flask\n```\n\nLet’s also install `httpagentparser`:\n\n```\n    $ pip install httpagentparser\n```\n\nBefore we do anything else, we need to install the Pusher library as we will need that for realtime updates.\n\n\n## Setting up Pusher\n\nThe first step will be to get a Pusher Channels application. We will need the application credentials for our realtime features to work.\n\nGo to the [Pusher website](https://pusher.com) and create an account. After creating an account, you should create a new application. Follow the application creation wizard and then you should be given your application credentials, we will use this later in the article.\n\n![python-realtime-poll-keys](//images.ctfassets.net/1es3ne0caaid/752Tb8m156CeqWw2q6eKyS/2a61be62a4ff148b8fe9e7c60a94a5db/python-realtime-poll-keys.png)\n\nWe also need to install the Pusher Python Library to send events to Pusher. Install this using the command below:\n\n```\n    $ pip install pusher\n```\n\n## File and Folder Structure\n\nWe don’t need to create so many files and folders for this application since it’s a simple one. Here’s the file/folder structure:\n\n```\n    ├── python-pusher-traffic-monitor\n           ├── app.py\n           ├── dbsetup.py\n           ├── static\n           └── templates\n```\n\nThe `static` folder will contain the static files to be used as is defined by [Flask standards](http://flask.pocoo.org/docs/0.12/tutorial/folders/). The `templates` folder will contain the HTML templates. In our application, `app.py` is the main entry point and will contain our server-side code. To keep things modular, we will write all the code that we need to interact with the database in `dbsetup.py`.\n\nCreate the `app.py` and `dbsetup.py` files, and then the `static` and `templates` folders.\n\n## Building the backend\n\nLet’s start by working on the file that will handle the database operations. In the `dbsetup.py` file, we will write all the code that is needed for creating a database and interacting with it. Open the `dbsetup.py` file and paste the following:\n\n``` python\n    import sqlite3\n    from sqlite3 import Error\n    \n    def create_connection(database):\n        try:\n            conn = sqlite3.connect(database, isolation_level=None, check_same_thread = False)\n            conn.row_factory = lambda c, r: dict(zip([col[0] for col in c.description], r))\n    \n            return conn\n        except Error as e:\n            print(e)\n    \n    def create_table(c,sql):\n        c.execute(sql)\n    \n    def update_or_create_page(c,data):\n        sql = \"SELECT * FROM pages where name=? and session=?\"\n        c.execute(sql,data[:-1])\n        result = c.fetchone()\n        if result == None:\n            create_pages(c,data)\n        else:\n            print(result)\n            update_pages(c, result['id'])\n    \n    def create_pages(c, data):\n        print(data)\n        sql = ''' INSERT INTO pages(name,session,first_visited)\n                  VALUES (?,?,?) '''\n        c.execute(sql, data)\n    \n    def update_pages(c, pageId):\n        print(pageId)\n        sql = ''' UPDATE pages\n                  SET visits = visits+1 \n                  WHERE id = ?'''\n        c.execute(sql, [pageId])\n    \n    def create_session(c, data):\n        sql = ''' INSERT INTO sessions(ip, continent, country, city, os, browser, session, created_at)\n                  VALUES (?,?,?,?,?,?,?,?) '''\n        c.execute(sql, data)\n    \n    def select_all_sessions(c):\n        sql = \"SELECT * FROM sessions\"\n        c.execute(sql)\n        rows = c.fetchall()\n        return rows\n    \n    def select_all_pages(c):\n        sql = \"SELECT * FROM pages\"\n        c.execute(sql)\n        rows = c.fetchall()\n        return rows\n    \n    def select_all_user_visits(c, session_id):\n        sql = \"SELECT * FROM pages where session =?\"\n        c.execute(sql,[session_id])\n        rows = c.fetchall()\n        return rows\n    \n    def main():\n        database = \"./pythonsqlite.db\"\n        sql_create_pages = \"\"\" \n            CREATE TABLE IF NOT EXISTS pages (\n                id integer PRIMARY KEY,\n                name varchar(225) NOT NULL,\n                session varchar(255) NOT NULL,\n                first_visited datetime NOT NULL,\n                visits integer NOT NULL Default 1\n            ); \n        \"\"\"\n        sql_create_session = \"\"\" \n            CREATE TABLE IF NOT EXISTS sessions (\n                id integer PRIMARY KEY,\n                ip varchar(225) NOT NULL,\n                continent varchar(225) NOT NULL, \n                country varchar(225) NOT NULL,\n                city varchar(225) NOT NULL, \n                os varchar(225) NOT NULL, \n                browser varchar(225) NOT NULL, \n                session varchar(225) NOT NULL,\n                created_at datetime NOT NULL\n            ); \n        \"\"\"\n    \n        # create a database connection\n        conn = create_connection(database)\n        if conn is not None:\n            # create tables\n            create_table(conn, sql_create_pages)\n            create_table(conn, sql_create_session)\n            print(\"Connection established!\")\n        else:\n            print(\"Could not establish connection\")\n    \n    if __name__ == '__main__':\n        main()\n```\n\nNext, run the `dbsetup.py` file so that it creates a new SQLite database for us. We can run it with this command:\n\n```\n    $ python dbsetup.py\n```\n\nWe should see this text logged to the terminal — ‘Connection established!’ — and there should be a new file — `pythonsqlite.db` — added to the project’s root directory.\n\nNext, let’s open the `app.py` file and start writing the backend code that will handle incoming requests. We are going to register multiple routes here. Four of these routes will load a webpage each while the other routes will process submitted data and return a JSON response.\n\nWe will also create a Pusher instance and use it to broadcast data through two channels that we will shortly define — pageview and numbers — in the application. After that, we will import the database handler methods we defined in `dbsetup.py` so that we can use them in the `app.py` file. Open the `app.py` file and paste the following:\n\n``` python\n    from flask import Flask, render_template, request, session, jsonify\n    import urllib.request\n    from pusher import Pusher\n    from datetime import datetime\n    import httpagentparser\n    import json\n    import os\n    import hashlib\n    from dbsetup import create_connection, create_session, update_or_create_page, select_all_sessions, select_all_user_visits, select_all_pages\n    \n    app = Flask(__name__)\n    app.secret_key = os.urandom(24)\n    \n    # configure pusher object\n    pusher = Pusher(\n    app_id='PUSHER_APP_ID',\n    key='PUSHER_APP_KEY',\n    secret='PUSHER_APP_SECRET',\n    cluster='PUSHER_APP_CLUSTER',\n    ssl=True)\n    \n    database = \"./pythonsqlite.db\"\n    conn = create_connection(database)\n    c = conn.cursor()\n    \n    userOS = None\n    userIP = None\n    userCity = None\n    userBrowser = None\n    userCountry = None\n    userContinent = None\n    sessionID = None\n    \n    def main():\n        global conn, c\n    \n    def parseVisitor(data):\n        update_or_create_page(c,data)\n        pusher.trigger(u'pageview', u'new', {\n            u'page': data[0],\n            u'session': sessionID,\n            u'ip': userIP\n        })\n        pusher.trigger(u'numbers', u'update', {\n            u'page': data[0],\n            u'session': sessionID,\n            u'ip': userIP\n        })\n    \n    @app.before_request\n    def getAnalyticsData():\n        global userOS, userBrowser, userIP, userContinent, userCity, userCountry,sessionID \n        userInfo = httpagentparser.detect(request.headers.get('User-Agent'))\n        userOS = userInfo['platform']['name']\n        userBrowser = userInfo['browser']['name']\n        userIP = \"72.229.28.185\" if request.remote_addr == '127.0.0.1' else request.remote_addr\n        api = \"https://www.iplocate.io/api/lookup/\" + userIP\n        try:\n            resp = urllib.request.urlopen(api)\n            result = resp.read()\n            result = json.loads(result.decode(\"utf-8\"))                                                                                                     \n            userCountry = result[\"country\"]\n            userContinent = result[\"continent\"]\n            userCity = result[\"city\"]\n        except:\n            print(\"Could not find: \", userIP)\n        getSession()\n    \n    def getSession():\n        global sessionID\n        time = datetime.now().replace(microsecond=0)\n        if 'user' not in session:\n            lines = (str(time)+userIP).encode('utf-8')\n            session['user'] = hashlib.md5(lines).hexdigest()\n            sessionID = session['user']\n            pusher.trigger(u'session', u'new', {\n                u'ip': userIP,\n                u'continent': userContinent,\n                u'country': userCountry,\n                u'city': userCity,\n                u'os': userOS,\n                u'browser': userBrowser,\n                u'session': sessionID,\n                u'time': str(time),\n            })\n            data = [userIP, userContinent, userCountry, userCity, userOS, userBrowser, sessionID, time]\n            create_session(c,data)\n        else:\n            sessionID = session['user']\n    \n    @app.route('/')\n    def index():\n        data = ['home', sessionID, str(datetime.now().replace(microsecond=0))]\n        parseVisitor(data)\n        return render_template('index.html')\n    \n    @app.route('/about')\n    def about():\n        data = ['about',sessionID, str(datetime.now().replace(microsecond=0))]\n        parseVisitor(data)\n        return render_template('about.html')\n    \n    @app.route('/dashboard')\n    def dashboard():\n        return render_template('dashboard.html')\n    \n    @app.route('/dashboard/\u003csession_id\u003e', methods=['GET'])\n    def sessionPages(session_id):\n        result = select_all_user_visits(c,session_id)\n        return render_template(\"dashboard-single.html\",data=result)\n    \n    @app.route('/get-all-sessions')\n    def get_all_sessions():\n        data = []\n        dbRows = select_all_sessions(c)\n        for row in dbRows:\n            data.append({\n                'ip' : row['ip'],\n                'continent' : row['continent'],\n                'country' : row['country'], \n                'city' : row['city'], \n                'os' : row['os'], \n                'browser' : row['browser'], \n                'session' : row['session'],\n                'time' : row['created_at']\n            })\n        return jsonify(data)\n    \n    if __name__ == '__main__':\n        main()\n        app.run(debug=True)\n```\n\nIn the code above, we imported the required modules and objects, then we initialized a new Flask application. We also initialized and configured Pusher before defining all the routes and their handler functions.\n\n\n\u003e Replace the PUSHER_APP_* keys with the values on your Pusher dashboard.\n  \n\nWith the `Pusher` object instantiated, we can trigger events on whatever channels we define.\nThe trigger method has the following syntax:\n\n```\n    pusher.trigger(\"a_channel\", \"an_event\", {key: \"data to pass with event\"})\n```\n\nYou can find the docs for the Pusher Python library [here](https://github.com/pusher/pusher-http-python), to get more information on configuring and using Pusher in Python.\n\nThe `getAnalyticsData` function gets the visitor’s IP address and retrieves data using the [urllib module](https://docs.python.org/3/howto/urllib2.html) to read information from the [Iplocate](https://www.iplocate.io/) API.\n\nIn the code above, we have defined four routes that will render web pages when visited, let’s create these web pages in the next section and use the frontend to communicate with our Python backend.\n\n## Setting up the app view\n\nTo begin, we need to create four files in the `templates` directory. These files will be named:\n\n\n- `index.html` — this is the home page for the website\n- `about.html` — this is the about page for the website\n- `dashboard.html` — this is the traffic monitor dashboard\n- `dashboard-single.html` — this is the dashboard page that displays more info (i.e. the types of pages a user has visited) on a single visitor.\n\nOpen the `./templates/index.html` file and paste the following:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003ePusher Python Realtime Traffic Monitoring\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003ch1\u003eThis is the homepage\u003c/h1\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nOpen the `./templates/about.html` file and paste the following:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003ePusher Python Realtime Traffic Monitoring\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003ch1\u003eThis is the about page\u003c/h1\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nBefore we write the code for `dashboard-single.html` and `dashboard` files, we will pull in some CSS and JS from [https://startbootstrap.com](https://startbootstrap.com/template-overviews/sb-admin/). Go to the URL and click **Download.** Unzip the file and copy the `css` and `js` directories into the `static` directory of our project.\n\nNow, let’s continue building the frontend of our application, so open the `./templates/dashboard.html` file and paste the following:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"utf-8\"\u003e\n      \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n      \u003cmeta name=\"description\" content=\"\"\u003e\n      \u003cmeta name=\"author\" content=\"\"\u003e\n      \u003ctitle\u003eSB Admin - Start Bootstrap Template\u003c/title\u003e\n    \n      \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\"\u003e\n      \u003clink href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\" type=\"text/css\"\u003e\n      \u003clink href=\"https://cdn.datatables.net/1.10.16/css/dataTables.bootstrap4.min.css\" rel=\"stylesheet\"\u003e\n      \u003clink href=\"{{ url_for('static', filename='css/sb-admin.css') }}\" rel=\"stylesheet\"\u003e\n    \u003c/head\u003e\n    \u003cbody class=\"fixed-nav sticky-footer bg-dark\" id=\"page-top\"\u003e\n    \n      \u003c!-- Navigation--\u003e\n      \u003cnav class=\"navbar navbar-expand-lg navbar-dark bg-dark fixed-top\" id=\"mainNav\"\u003e\n        \u003ca class=\"navbar-brand\" href=\"index.html\"\u003eStart Bootstrap\u003c/a\u003e\n        \u003cbutton class=\"navbar-toggler navbar-toggler-right\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"\u003e\n          \u003cspan class=\"navbar-toggler-icon\"\u003e\u003c/span\u003e\n        \u003c/button\u003e\n        \u003cdiv class=\"collapse navbar-collapse\" id=\"navbarResponsive\"\u003e\n          \u003cul class=\"navbar-nav navbar-sidenav\" id=\"exampleAccordion\"\u003e\n            \u003cli class=\"nav-item\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Dashboard\"\u003e\n              \u003ca class=\"nav-link\" href=\"/dashboard\"\u003e\n                \u003ci class=\"fa fa-fw fa-dashboard\"\u003e\u003c/i\u003e\n                \u003cspan class=\"nav-link-text\"\u003eDashboard\u003c/span\u003e\n              \u003c/a\u003e\n            \u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/div\u003e\n      \u003c/nav\u003e\n      \u003cdiv class=\"content-wrapper\"\u003e\n        \u003cdiv class=\"container-fluid\"\u003e\n    \n          \u003c!-- Breadcrumbs--\u003e\n          \u003col class=\"breadcrumb\"\u003e\n            \u003cli class=\"breadcrumb-item\"\u003e\n              \u003ca href=\"#\"\u003eDashboard\u003c/a\u003e\n            \u003c/li\u003e\n            \u003cli class=\"breadcrumb-item active\"\u003eMy Dashboard\u003c/li\u003e\n          \u003c/ol\u003e\n    \n          \u003c!-- Icon Cards--\u003e\n          \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-xl-3 col-sm-6 mb-3\"\u003e\n              \u003cdiv class=\"card text-white bg-primary o-hidden h-100\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                  \u003cdiv class=\"mr-5\"\u003eTotal session \u003cspan id=\"total-sessions\"\u003e26\u003c/span\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \u003ca class=\"card-footer text-white clearfix small z-1\" href=\"#\"\u003e\n                  \u003cspan class=\"float-left\"\u003eView Details\u003c/span\u003e\n                  \u003cspan class=\"float-right\"\u003e\n                    \u003ci class=\"fa fa-angle-right\"\u003e\u003c/i\u003e\n                  \u003c/span\u003e\n                \u003c/a\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-xl-3 col-sm-6 mb-3\"\u003e\n              \u003cdiv class=\"card text-white bg-warning o-hidden h-100\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                  \u003cdiv class=\"mr-5\"\u003eTotal visitors \u003cspan id=\"total-visitors\"\u003e26\u003c/span\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \u003ca class=\"card-footer text-white clearfix small z-1\" href=\"#\"\u003e\n                  \u003cspan class=\"float-left\"\u003eView Details\u003c/span\u003e\n                  \u003cspan class=\"float-right\"\u003e\n                    \u003ci class=\"fa fa-angle-right\"\u003e\u003c/i\u003e\n                  \u003c/span\u003e\n                \u003c/a\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-xl-3 col-sm-6 mb-3\"\u003e\n              \u003cdiv class=\"card text-white bg-success o-hidden h-100\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                  \u003cdiv class=\"mr-5\"\u003eTotal Page Views \u003cspan id=\"total-pageviews\"\u003e123\u003c/span\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \u003ca class=\"card-footer text-white clearfix small z-1\" href=\"#\"\u003e\n                  \u003cspan class=\"float-left\"\u003eView Details\u003c/span\u003e\n                  \u003cspan class=\"float-right\"\u003e\n                    \u003ci class=\"fa fa-angle-right\"\u003e\u003c/i\u003e\n                  \u003c/span\u003e\n                \u003c/a\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-xl-3 col-sm-6 mb-3\"\u003e\n              \u003cdiv class=\"card text-white bg-danger o-hidden h-100\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                  \u003cdiv class=\"mr-5\"\u003eUnique Page Views \u003cspan id=\"unique-pageviews\"\u003e123\u003c/span\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \u003ca class=\"card-footer text-white clearfix small z-1\" href=\"#\"\u003e\n                  \u003cspan class=\"float-left\"\u003eView Details\u003c/span\u003e\n                  \u003cspan class=\"float-right\"\u003e\n                    \u003ci class=\"fa fa-angle-right\"\u003e\u003c/i\u003e\n                  \u003c/span\u003e\n                \u003c/a\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n    \n          \u003c!-- Example DataTables Card--\u003e\n          \u003cdiv class=\"card mb-3\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n              \u003ci class=\"fa fa-table\"\u003e\u003c/i\u003e User Sessions\u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n              \u003cdiv class=\"table-responsive\"\u003e\n                \u003ctable class=\"table table-bordered\" id=\"dataTable\" width=\"100%\" cellspacing=\"0\"\u003e\n                  \u003cthead\u003e\n                    \u003ctr\u003e\n                      \u003cth\u003eTime\u003c/th\u003e\n                      \u003cth\u003eIP Address\u003c/th\u003e\n                      \u003cth\u003eContinent\u003c/th\u003e\n                      \u003cth\u003eCountry\u003c/th\u003e\n                      \u003cth\u003eCity\u003c/th\u003e\n                      \u003cth\u003eOpertating System\u003c/th\u003e\n                      \u003cth\u003eBrowser\u003c/th\u003e\n                      \u003cth\u003e\u003c/th\u003e\n                    \u003c/tr\u003e\n                  \u003c/thead\u003e\n                  \u003ctfoot\u003e\n                    \u003ctr\u003e\n                      \u003cth\u003eTime\u003c/th\u003e\n                      \u003cth\u003eIP Address\u003c/th\u003e\n                      \u003cth\u003eContinent\u003c/th\u003e\n                      \u003cth\u003eCountry\u003c/th\u003e\n                      \u003cth\u003eCity\u003c/th\u003e\n                      \u003cth\u003eOpertating System\u003c/th\u003e\n                      \u003cth\u003eBrowser\u003c/th\u003e\n                      \u003cth\u003e\u003c/th\u003e\n                    \u003c/tr\u003e\n                  \u003c/tfoot\u003e\n                  \u003ctbody id=\"customer-table\"\u003e\n                  \u003c/tbody\u003e\n                \u003c/table\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-footer small text-muted\"\u003eUpdated at \u003cspan id=\"session-update-time\"\u003e\u003c/span\u003e\u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003c!-- /.container-fluid--\u003e\n        \u003c!-- /.content-wrapper--\u003e\n    \n        \u003cfooter class=\"sticky-footer\"\u003e\n          \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"text-center\"\u003e\n              \u003csmall\u003eCopyright © Your Website 2018\u003c/small\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/footer\u003e\n    \n        \u003c!-- Bootstrap core JavaScript--\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.datatables.net/1.10.16/js/dataTables.bootstrap4.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n    \n        \u003c!-- Custom scripts for this page--\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/app.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/sb-admin.js') }}\"\u003e\u003c/script\u003e\n      \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nFinally, open the `./templates/dashboard-single.html` file and paste the following:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"utf-8\"\u003e\n      \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n      \u003cmeta name=\"description\" content=\"\"\u003e\n      \u003cmeta name=\"author\" content=\"\"\u003e\n      \u003ctitle\u003eSB Admin - Start Bootstrap Template\u003c/title\u003e\n    \n      \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\"\u003e\n      \u003clink href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\" type=\"text/css\"\u003e\n      \u003clink href=\"https://cdn.datatables.net/1.10.16/css/dataTables.bootstrap4.min.css\" rel=\"stylesheet\"\u003e\n      \u003clink href=\"{{ url_for('static', filename='css/sb-admin.css') }}\" rel=\"stylesheet\"\u003e\n    \u003c/head\u003e\n    \u003cbody class=\"fixed-nav sticky-footer bg-dark\" id=\"page-top\"\u003e\n    \n      \u003c!-- Navigation--\u003e\n      \u003cnav class=\"navbar navbar-expand-lg navbar-dark bg-dark fixed-top\" id=\"mainNav\"\u003e\n        \u003ca class=\"navbar-brand\" href=\"index.html\"\u003eStart Bootstrap\u003c/a\u003e\n        \u003cbutton class=\"navbar-toggler navbar-toggler-right\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"\u003e\n          \u003cspan class=\"navbar-toggler-icon\"\u003e\u003c/span\u003e\n        \u003c/button\u003e\n        \u003cdiv class=\"collapse navbar-collapse\" id=\"navbarResponsive\"\u003e\n          \u003cul class=\"navbar-nav navbar-sidenav\" id=\"exampleAccordion\"\u003e\n            \u003cli class=\"nav-item\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Dashboard\"\u003e\n              \u003ca class=\"nav-link\" href=\"/dashboard\"\u003e\n                \u003ci class=\"fa fa-fw fa-dashboard\"\u003e\u003c/i\u003e\n                \u003cspan class=\"nav-link-text\"\u003eDashboard\u003c/span\u003e\n              \u003c/a\u003e\n            \u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/div\u003e\n      \u003c/nav\u003e\n      \u003cdiv class=\"content-wrapper\"\u003e\n        \u003cdiv class=\"container-fluid\"\u003e\n          \u003c!-- Breadcrumbs--\u003e\n          \u003col class=\"breadcrumb\"\u003e\n            \u003cli class=\"breadcrumb-item\"\u003e\n              \u003ca href=\"#\"\u003eDashboard\u003c/a\u003e\n            \u003c/li\u003e\n            \u003cli class=\"breadcrumb-item active\"\u003eMy Session\u003c/li\u003e\n          \u003c/ol\u003e\n          \u003c!-- Example DataTables Card--\u003e\n          \u003cdiv class=\"card mb-3\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n              \u003ci class=\"fa fa-table\"\u003e\u003c/i\u003e User Sessions\u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n              \u003cdiv class=\"table-responsive\"\u003e\n                \u003ctable class=\"table table-bordered\" id=\"userSessions\" width=\"100%\" cellspacing=\"0\"\u003e\n                  \u003cthead\u003e\n                    \u003ctr\u003e\n                      \u003cth\u003eTime\u003c/th\u003e\n                      \u003cth\u003ePage\u003c/th\u003e\n                      \u003cth\u003eSession_id\u003c/th\u003e\n                      \u003cth\u003eNo of Visits\u003c/th\u003e\n                      \u003cth\u003e\u003c/th\u003e\n                    \u003c/tr\u003e\n                  \u003c/thead\u003e\n                  \u003ctfoot\u003e\n                    \u003ctr\u003e\n                      \u003cth\u003eTime\u003c/th\u003e\n                      \u003cth\u003ePage\u003c/th\u003e\n                      \u003cth\u003eSession_id\u003c/th\u003e\n                      \u003cth\u003eNo of Visits\u003c/th\u003e\n                      \u003cth\u003e\u003c/th\u003e\n                    \u003c/tr\u003e\n                  \u003c/tfoot\u003e\n                  \u003ctbody id=\"customer-table\"\u003e\n                    {% for row in data %}\n                      \u003ctr\u003e\n                        \u003ctd\u003e{{ row.first_visited }}\u003c/td\u003e\n                        \u003ctd\u003e{{ row.name }}\u003c/td\u003e\n                        \u003ctd\u003e{{ row.session }}\u003c/td\u003e\n                        \u003ctd\u003e{{ row.visits }}\u003c/td\u003e\n                      \u003c/tr\u003e\n                    {% endfor %}\n                  \u003c/tbody\u003e\n                \u003c/table\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-footer small text-muted\"\u003eUpdated at \u003cspan id=\"session-update-time\"\u003e\u003c/span\u003e\u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003c!-- /.container-fluid--\u003e\n        \u003c!-- /.content-wrapper--\u003e\n        \u003cfooter class=\"sticky-footer\"\u003e\n          \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"text-center\"\u003e\n              \u003csmall\u003eCopyright © Your Website 2018\u003c/small\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/footer\u003e\n        \u003c!-- Scroll to Top Button--\u003e\n        \u003ca class=\"scroll-to-top rounded\" href=\"#page-top\"\u003e\n          \u003ci class=\"fa fa-angle-up\"\u003e\u003c/i\u003e\n        \u003c/a\u003e\n        \u003c!-- Logout Modal--\u003e\n        \u003cdiv class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\"\u003e\n          \u003cdiv class=\"modal-dialog\" role=\"document\"\u003e\n            \u003cdiv class=\"modal-content\"\u003e\n              \u003cdiv class=\"modal-header\"\u003e\n                \u003ch5 class=\"modal-title\" id=\"exampleModalLabel\"\u003eReady to Leave?\u003c/h5\u003e\n                \u003cbutton class=\"close\" type=\"button\" data-dismiss=\"modal\" aria-label=\"Close\"\u003e\n                  \u003cspan aria-hidden=\"true\"\u003e×\u003c/span\u003e\n                \u003c/button\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"modal-body\"\u003eSelect \"Logout\" below if you are ready to end your current session.\u003c/div\u003e\n              \u003cdiv class=\"modal-footer\"\u003e\n                \u003cbutton class=\"btn btn-secondary\" type=\"button\" data-dismiss=\"modal\"\u003eCancel\u003c/button\u003e\n                \u003ca class=\"btn btn-primary\" href=\"login.html\"\u003eLogout\u003c/a\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003c!-- Bootstrap core JavaScript--\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n        \u003cscript type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.datatables.net/1.10.16/js/dataTables.bootstrap4.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n    \n        \u003cscript src=\"{{ url_for('static', filename='js/app.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/sb-admin.js') }}\"\u003e\u003c/script\u003e\n      \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe markup we have written in all four files define the structure of the elements on the DOM when each page is rendered. We have also loaded the JavaScript Pusher package in the `dashboard.html` and `dashboard-single.html` files.\n\nNext, we will listen for Pusher updates on the frontend of our application using the Pusher magic.\n\n## Listening for realtime updates\n\nIn this step, we will listen for Pusher events from the Backend API and use the data to update the traffic monitor dashboard pages in realtime. First, let’s create a new file — `app.js`— in the `js` folder that is located in the `static` directory.\n\nNext, open the `./static/js/app.js` file and paste the following:\n\n``` javascript\n    // Configure Pusher instance\n    const pusher = new Pusher('PUSHER_APP_KEY', {\n      cluster: 'PUSHER_APP_CLUSTER',\n      encrypted: true\n    });\n    \n    var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    \n    $(document).ready(function(){\n        var dataTable = $(\"#dataTable\").DataTable()\n        // var userSessions = $(\"#userSessions\").DataTable()\n        var pages = $(\"#pages\").DataTable()\n    \n        axios.get('/get-all-sessions')\n        .then(response =\u003e {\n              response.data.forEach((data) =\u003e {\n                  insertDatatable(data)\n              })\n          var d = new Date();\n          var updatedAt = `${d.getFullYear()}/${months[d.getMonth()]}/${d.getDay()} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\n          document.getElementById('session-update-time').innerText = updatedAt\n        })\n    \n        var sessionChannel = pusher.subscribe('session');\n        sessionChannel.bind('new', function(data) {\n            insertDatatable(data)\n        });\n    \n        var d = new Date();\n        var updatedAt = `${d.getFullYear()}/${months[d.getMonth()]}/${d.getDay()} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\n        document.getElementById('session-update-time').innerText = updatedAt\n    });\n    \n    function insertDatatable(data){\n        var dataTable = $(\"#dataTable\").DataTable()\n        dataTable.row.add([\n            data.time,\n            data.ip,\n            data.continent,\n            data.country,\n            data.city,\n            data.os,\n            data.browser,\n            `\u003ca href=${\"/dashboard/\"+data.session}\u003eView pages visited\u003c/a\u003e`\n          ]);\n          dataTable.order([0, 'desc']).draw();\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the keys on your Pusher dashboard.\n\nIn the code above, first, we register a new instance of Pusher then we use [Axios](https://www.npmjs.com/package/axios) to get all the sessions that have been saved to the database when the document is ready. We also created a new Pusher channel called `sessionChannel` and subscribed to a session event.\n\nWe defined a function `insertDatatable` and it inserts a new user record whenever Pusher sends an update.\n\nThat is everything! We can run the application now using this command:\n\n```\n    $ flask run\n```\n\nNow we can visit [127.0.0.1:5000](http://127.0.0.1:5000) to see the website and [127.0.0.1:5000/dashboard](http://127.0.0.1:5000/dashboard) to see the traffic monitor dashboard, here’s a display of what both screens look like when viewed side by side.\n\n![python-web-traffic-demo](//images.ctfassets.net/1es3ne0caaid/173irZ04McmEIE0K8cQoew/5fb82398a74f83f8353e95c7fc5a935a/python-web-traffic-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have learned how to integrate a realtime traffic monitor with our website using Python’s Flask, Pusher and JavaScript. \n\nThe source code for this tutorial is available on [GitHub.](https://github.com/neoighodaro/python-pusher-traffic-monitor)","metaTitle":"Build a web traffic monitor with Python","metaDescription":"Use Flask and JavaScript to create a web traffic monitoring dashboard. See realtime updates as visitors view the demo website."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6BwM9O7lhCQWKSg4eCw6ym","type":"Entry","createdAt":"2018-06-27T11:31:30.790Z","updatedAt":"2020-06-19T12:41:52.435Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live polling web app with Python","url":"live-poll-python","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/python-realtime-poll-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N8l3o0yD6QK2ooI2ME8wW","type":"Entry","createdAt":"2018-02-12T15:09:06.190Z","updatedAt":"2018-02-26T12:31:10.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Polls","url":"live-polls","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}}],"reviewDate":"2018-06-26","description":"Build a live voting application using Flask. Users will be able to vote for their favorite programming language. Results will appear in an admin dashboard and be displayed on a live graph.","prerequisite":"You will need Python 3+ installed on your machine. A basic knowledge of Python and JavaScript will be helpful.","content":"In this article, we will build a voting poll application that keeps track of each vote in a poll and broadcasts recent updates to all subscribed clients. We will be broadcasting the updates in realtime using Pusher and this will ensure that every connected user knows when a new vote has been made. There will also be an admin section that displays a [chart](https://canvasjs.com/). This chart will update in realtime and show voting statistics.\n\nHere is what the final application will look like:\n\n![python-realtime-poll-demo](//images.ctfassets.net/1es3ne0caaid/1hgCPLcEbyUOUcuYOiI4Q8/745fb422b6dfa795a19a1158cf6c4162/python-realtime-poll-demo.gif)\n\nThe top-left screen shows a browser window that loads the voting application and sends realtime updates. To show that these updates are propagated across every other connected client, we can see that the bottom-left screen also updates as a vote is cast on the former screen. Finally, the admin screen by the right displays the chart and delivers realtime voting statistics. There is also a database that stores the status of votes of each poll member.\n\nWe will build the backend server for this application using a Python framework called [Flask.](http://flask.pocoo.org/) We will use this framework to develop a simple backend API that can respond to the requests we will be sending from our JavaScript frontend.\n\n## Prerequisites\n\nTo follow along with this tutorial, a basic knowledge of Python, Flask, and JavaScript (ES6 syntax) is required. You will also need the following installed:\n\n\n1. [Python (\u003e= v3.x)](https://www.python.org/)\n2. [virtualenv](https://virtualenv.pypa.io/en/stable/)\n3. [Flask](http://flask.pocoo.org/)\n\nVirtualenv is great for creating isolated Python environments, so we can install dependencies in an isolated environment, and not pollute our global packages directory.\n\nLet’s install `virtualenv` with this command:\n\n```\n    $ pip install virtualenv\n```\n\n## Setting up the app environment\n\nLet’s create our project folder, and activate a virtual environment in it. Run the commands below:\n\n```\n    $ mkdir python-poll-pusher\n    $ cd python-poll-pusher\n    $ virtualenv .venv\n    $ source .venv/bin/activate # Linux based systems\n    $ \\path\\to\\env\\Scripts\\activate # Windows users\n```\n\nNow that we have the virtual environment setup, we can install Flask within it with this command:\n\n```\n    $ pip install flask\n```\n\nLet’s install two more packages that will ensure that the application works correctly:\n\n```\n    $ pip install -U flask-cors\n    $ pip install simplejson\n```\n\nBefore we do anything else, we need to install the Pusher library as we will need that for realtime updates.\n\n\n## Setting up Pusher\n\nThe first step will be to get a Pusher Channels application. We will need the application credentials for our realtime features to work.\n\nGo to the [Pusher website](https://pusher.com) and create an account. After creating an account, you should create a new application. Follow the application creation wizard and then you should be given your application credentials, we will use this later in the article.\n\n![python-realtime-poll-keys](//images.ctfassets.net/1es3ne0caaid/752Tb8m156CeqWw2q6eKyS/2a61be62a4ff148b8fe9e7c60a94a5db/python-realtime-poll-keys.png)\n\nWe also need to install the Pusher Python Library to send events to Pusher. Install this using the command below:\n\n```\n    $ pip install pusher\n```\n\n## File and folder structure\n\nWe don’t need to create so many files and folders for this application since it’s a simple one. Here’s the file/folder structure:\n\n```\n    ├── python-poll-pusher\n           ├── app.py\n           ├── dbsetup.py\n           ├── static\n           └── templates\n```\n\nThe `static` folder will contain the static files to be used as is defined by [Flask standards](http://flask.pocoo.org/docs/0.12/tutorial/folders/). The `templates` folder will contain the HTML templates. In our application, `app.py` is the main entry point and will contain our server-side code. To keep things modular, we will write all the code that we need to interact with the database in `dbsetup.py`.\n\nCreate the `app.py` and `dbsetup.py` files, and then the `static` and `templates` folders.\n\n\n## Building the backend\n\nIn the `dbsetup.py` file, we will write all the code that is needed for creating a database and interacting with it. Open the `dbsetup.py` file and paste the following:\n\n``` python\n    import sqlite3, json\n    from sqlite3 import Error\n    \n    def create_connection(database):\n        try:\n            conn = sqlite3.connect(database, isolation_level=None, check_same_thread = False)\n            conn.row_factory = lambda c, r: dict(zip([col[0] for col in c.description], r))\n    \n            return conn\n        except Error as e:\n            print(e)\n    \n    def create_table(c):\n        sql = \"\"\" \n            CREATE TABLE IF NOT EXISTS items (\n                id integer PRIMARY KEY,\n                name varchar(225) NOT NULL,\n                votes integer NOT NULL Default 0\n            ); \n        \"\"\"\n        c.execute(sql)\n    \n    def create_item(c, item):\n        sql = ''' INSERT INTO items(name)\n                  VALUES (?) '''\n        c.execute(sql, item)\n    \n    def update_item(c, item):\n        sql = ''' UPDATE items\n                  SET votes = votes+1 \n                  WHERE name = ? '''\n        c.execute(sql, item)\n    \n    def select_all_items(c, name):\n        sql = ''' SELECT * FROM items '''\n        c.execute(sql)\n    \n        rows = c.fetchall()\n        rows.append({'name' : name})\n        return json.dumps(rows)\n    \n    def main():\n        database = \"./pythonsqlite.db\"\n        conn = create_connection(database)\n        create_table(conn)\n        create_item(conn, [\"Go\"])\n        create_item(conn, [\"Python\"])\n        create_item(conn, [\"PHP\"])\n        create_item(conn, [\"Ruby\"])\n        print(\"Connection established!\")\n    \n    if __name__ == '__main__':\n        main()\n```\n\nNext, run the `dbsetup.py` file so that it creates a new SQLite database for us. We can run it with this command:\n\n```\n    $ python dbsetup.py\n```\n\nWe should see this text logged to the terminal — ‘Connection established!’ — and there should be a new file — `pythonsqlite.db` — added to the project’s root directory.\n\nNext, let’s open up the `app.py` file and start writing the backend code that will handle incoming requests. Here, we are going to register three routes: the first two will handle the `GET` requests that return the home and admin pages respectively. The last route will handle the `POST` requests that attempt to update the status of a particular vote member, both on the user’s page and on the admin’s page. \n\nIn this file, we will instantiate a fresh instance of Pusher and use it to broadcast data through a channel that we will shortly define within the application. We will also import some of the database handling methods we defined in `dbsetup.py` so that we can use them here.\n\nOpen the `app.py`  file and paste the following code:\n\n``` python\n    from flask import Flask, render_template, request, jsonify, make_response\n    from dbsetup import create_connection, select_all_items, update_item\n    from flask_cors import CORS, cross_origin\n    from pusher import Pusher\n    import simplejson\n    \n    app = Flask(__name__)\n    cors = CORS(app)\n    app.config['CORS_HEADERS'] = 'Content-Type'\n    \n    # configure pusher object\n    pusher = Pusher(\n    app_id='PUSHER_APP_ID',\n    key='PUSHER_APP_KEY',\n    secret='PUSHER_APP_SECRET',\n    cluster='PUSHER_APP_CLUSTER',\n    ssl=True)\n    \n    database = \"./pythonsqlite.db\"\n    conn = create_connection(database)\n    c = conn.cursor()\n    \n    def main():\n        global conn, c\n    \n    @app.route('/')\n    def index():\n        return render_template('index.html')\n    \n    @app.route('/admin')\n    def admin():\n        return render_template('admin.html')\n    \n    @app.route('/vote', methods=['POST'])\n    def vote():\n        data = simplejson.loads(request.data)\n        update_item(c, [data['member']])\n        output = select_all_items(c, [data['member']])\n        pusher.trigger(u'poll', u'vote', output)\n        return request.data\n    \n    if __name__ == '__main__':\n        main()\n        app.run(debug=True)\n```\n\nFirst, we imported the required modules and objects, then we initialized a Flask app. Next, we ensured that the backend server can receive requests from a client on another computer, then we initialized and configured Pusher. We also registered some routes and defined the functions that will handle them.\n\n\n\u003e Replace the `PUSHER_APP_*`  keys with the values on your Pusher dashboard.\n\nWith the `pusher` object instantiated, we can trigger events on whatever channels we define.\nIn the `/vote` route, we trigger a ‘vote’ event on the ‘poll’ channel. The trigger method has the following syntax:\n\n```\n    pusher.trigger(\"a_channel\", \"an_event\", {key: \"data to pass with event\"})\n```\n\nYou can find the docs for the Pusher Python library [here](https://github.com/pusher/pusher-http-python), to get more information on configuring and using Pusher in Python.\n\nThe first two routes we defined will return our application’s view by rendering the `index.html` and `admin.html` templates. However, we are yet to create these files so there is nothing to render, let’s create the app view in the next step and start using the frontend to communicate with our Python backend API.\n\n\n## Setting up the app view\n\nWe need to create two files in the `templates` directory. These files will be named `index.html` and `admin.html`, this is where the view for our code will live. The `index` page will render the view that displays the voting page for users to interact with while the `admin` page will display the chart that will update in realtime when a new vote is cast.\n\nIn the `./templates/index.html` file, you can paste this code:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"utf-8\"\u003e\n      \u003ctitle\u003ePython Poll\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\"\u003e\n      \u003cstyle type=\"text/css\"\u003e\n        .poll-member h1 {\n          cursor: pointer\n        }\n        .percentageBarParent{\n          height: 22px;\n          width: 100%;\n          border: 1px solid black;\n        }\n        .percentageBar {\n          height: 20px;\n          width: 0%;\n        }\n      \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003cdiv class=\"main\"\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003ch1\u003eWhat's your preferred language?\u003c/h1\u003e\n          \u003cdiv class=\"col-md-12\"\u003e\n            \u003cdiv class=\"row\"\u003e\n              \u003cdiv class=\"col-md-6\"\u003e\n                \u003cdiv class=\"poll-member Go\"\u003e\n                  \u003ch1\u003eGo\u0026nbsp;\u0026nbsp;\u003c/h1\u003e\n                  \u003cdiv class=\"percentageBarParent\"\u003e\n                  \u003cdiv class=\"percentageBar\" id=\"Go\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"col-md-6\"\u003e\n                \u003cdiv class=\"poll-member \"\u003e\n                  \u003ch1\u003ePython\u0026nbsp;\u0026nbsp;\u003c/h1\u003e \n                  \u003cdiv class=\"percentageBarParent\"\u003e\n                  \u003cdiv class=\"percentageBar\" id=\"Python\"\u003e\u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"row\"\u003e\n              \u003cdiv class=\"col-md-6\"\u003e\n                \u003cdiv class=\"poll-member PHP\"\u003e\n                  \u003ch1\u003ePHP\u0026nbsp;\u0026nbsp;\u003c/h1\u003e \n                  \u003cdiv class=\"percentageBarParent\"\u003e\n                  \u003cdiv class=\"percentageBar\" id=\"PHP\"\u003e\u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"col-md-6\"\u003e\n                \u003cdiv class=\"poll-member Ruby\"\u003e\n                  \u003ch1\u003eRuby\u0026nbsp;\u0026nbsp;\u003c/h1\u003e \n                  \u003cdiv class=\"percentageBarParent\"\u003e\n                  \u003cdiv class=\"percentageBar\" id=\"Ruby\"\u003e\u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \n      \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.2/axios.js\"\u003e\u003c/script\u003e\n      \u003cscript type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\"\u003e\u003c/script\u003e\n        \u003cscript type=\"text/javascript\" src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript type=\"text/javascript\" src=\"{{ url_for('static', filename='app.js') }}\" defer\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNext, let’s copy and paste in this code into the `./templates/admin.html` file:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"utf-8\"\u003e\n      \u003ctitle\u003ePython Poll Admin\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \n      \u003cdiv class=\"main\"\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003ch1\u003eChart\u003c/h1\u003e\n          \u003cdiv id=\"chartContainer\" style=\"height: 300px; width: 100%;\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \n      \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/canvasjs/1.7.0/canvasjs.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"{{ url_for('static', filename='admin.js') }}\" defer\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThat’s all for the `index.html` and `admin.html` files, we have described how they should be rendered on the DOM but our application lacks all forms of interactivity. \n\nIn the next section, we will write the scripts that will send the `POST` requests to our Python backend server.\n\n## Communicating with the backend\n\nCreate two more files in the `static` folder, one for the `index` page and the other for the `admin` page. These files are the scripts that will define how our application interacts with click events, communicates with the backend server for realtime updates and display a progress bar.\n\nLet’s create the following files in the `static` folder:\n\n\n- app.js\n- admin.js\n\nIn the `./static/app.js` file, we can paste the following:\n\n``` javascript\n    var pollMembers = document.querySelectorAll('.poll-member')\n    \n    var members = ['Go', 'Python', 'PHP', 'Ruby']\n    \n    // Sets up click events for all the cards on the DOM\n    pollMembers.forEach((pollMember, index) =\u003e {\n      pollMember.addEventListener('click', (event) =\u003e {\n        handlePoll(members[index])\n      }, true)\n    })\n    \n    // Sends a POST request to the server using axios\n    var handlePoll = function(member) {\n      axios.post('http://localhost:5000/vote', {member}).then((r) =\u003e console.log(r))\n    }\n    \n    // Configure Pusher instance\n    const pusher = new Pusher('PUSHER_APP_KEY', {\n      cluster: 'PUSHER_APP_CLUSTER',\n      encrypted: true\n    });\n    \n    // Subscribe to poll trigger\n    var channel = pusher.subscribe('poll');\n    \n    // Listen to vote event\n    channel.bind('vote', function(data) {\n      for (i = 0; i \u003c (data.length - 1); i++) { \n        var total = data[0].votes + data[1].votes + data[2].votes + data[3].votes\n        document.getElementById(data[i].name).style.width = calculatePercentage(total, data[i].votes)\n        document.getElementById(data[i].name).style.background = \"#388e3c\" \n      }\n    });\n    \n    let calculatePercentage = function(total, amount) {\n      return (amount / total) * 100 + \"%\"\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*`  keys with the keys on your Pusher dashboard.\n\nFirst, we registered click events on all the members of the poll, then we configure [Axios](https://www.npmjs.com/package/axios) to send a POST request whenever a user votes for a member of the poll. Next, we configured a Pusher instance to communicate with the Pusher service. Next, we register a listener for the events Pusher sends. Finally, we bind the events we are listening to on the channel we created. \n\nNext, open the `admin.js` file and paste in this code:\n\n``` javascript\n    var dataPoints = [\n      { label: \"Go\", y: 0 },\n      { label: \"Python\", y: 0 },\n      { label: \"PHP\", y: 0 },\n      { label: \"Ruby\", y: 0 },\n    ]\n    \n    var chartContainer = document.querySelector('#chartContainer');\n    \n    if (chartContainer) {\n      var chart = new CanvasJS.Chart(\"chartContainer\", {\n        animationEnabled: true,\n        theme: \"theme2\",\n        data: [\n          {\n            type: \"column\",\n            dataPoints: dataPoints\n          }\n        ]\n      });\n      \n      chart.render();\n    }\n    \n    Pusher.logToConsole = true;\n    \n    // Configure Pusher instance\n    const pusher = new Pusher('PUSHER_APP_KEY', {\n      cluster: 'PUSHER_APP_CLUSTER',\n      encrypted: true\n    });\n    \n    // Subscribe to poll trigger\n    var channel = pusher.subscribe('poll');\n    \n    // Listen to vote event\n    channel.bind('vote', function(data) {\n      dataPoints = dataPoints.map(dataPoint =\u003e {\n        if(dataPoint.label == data[4].name[0]) {\n          dataPoint.y += 10;\n        }\n    \n        return dataPoint\n      });\n    \n      // Re-render chart\n      chart.render()\n    });\n```\n\n\u003e Replace the `PUSHER_APP_*`  keys with the keys on your Pusher dashboard.\n\nJust as we did in the previous code, here we also receive Pusher events and use the received data to update the [chart](https://canvasjs.com/) on the admin’s page.\n\nOur application is good to go! Now we can run the app using this command:\n\n```\n    $ flask run\n```\n\nNow if we visit [127.0.0.1:5000](http://127.0.0.1:5000) and [127.0.0.1:5000/admin](http://127.0.0.1:5000/admin) we should see our app:\n\n![python-realtime-poll-demo](//images.ctfassets.net/1es3ne0caaid/1hgCPLcEbyUOUcuYOiI4Q8/745fb422b6dfa795a19a1158cf6c4162/python-realtime-poll-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have learned how to build a Python Flask project from scratch and add realtime functionality to it using Pusher and vanilla JavaScript. The entire code for this tutorial is [available on GitHub](https://github.com/neoighodaro/python-realtime-poll-pusher).","metaTitle":"Build a live polling web app with Python","metaDescription":"Use Flask and JavaScript to create a live voting application. Users will vote for their favorite programming language, and admins can view a results graph that automatically updates as results come in."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1WVQikDlFKOeyyySeEqO2","type":"Entry","createdAt":"2018-06-27T11:23:38.638Z","updatedAt":"2020-06-15T16:05:07.719Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Track Bitcoin prices on a live graph with Python","url":"bitcoin-live-graph-python","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3sixk7zsAoQqqSsUWM8I8y","type":"Entry","createdAt":"2018-02-13T18:06:00.483Z","updatedAt":"2018-02-14T10:08:13.372Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Olayinka Omole","url":"olayinka-omole","email":"olayinka.omole@gmail.com","twitter":"https://twitter.com/olayinkaos","github":"https://github.com/olayinkaos","guestWriter":true}}],"projectRepo":"https://github.com/olayinkaos/realtime-graph","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kOTcNAC12gwWEyE6MimMY","type":"Entry","createdAt":"2018-02-12T15:08:28.581Z","updatedAt":"2018-02-26T12:31:12.766Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Trading","url":"trading","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2018-06-24","description":"Build a live graph to track Bitcoin prices using Flask. You will create a simple Python application that pulls in Bitcoin sample data and displays it on a live graph using Plotly.","prerequisite":"You will need Python 3+ installed on your machine. Basic knowledge of Python, Flask and JavaScript will be helpful.","content":"Graphs and charts are great for representing information in a clear and concise way. They can be used in various apps to show data to users when needed. Quickly changing data can be better represented using realtime graphs and charts as users can quickly see both current and historical data easily.\n\nIn this tutorial, we will be making use of [Pusher Channels](https://pusher.com/channels), [Plotly](https://plot.ly/) and [Flask](http://flask.pocoo.org/) to build a simple app for displaying the price of a Bitcoin in a realtime graph and bar chart.\n\nHere is what the final app will look like:\n\n![python-live-graph-bitcoin-demo](//images.ctfassets.net/1es3ne0caaid/5CwIjRrU3eWiCsG4iOqG0K/2824d59426e378ca7cb0e69280a6a92b/python-live-graph-bitcoin-demo.gif)\n\n## Prerequisites\n\nTo follow along properly, basic knowledge of Python, Flask and JavaScript (ES6 syntax) is needed. You will also need to install [Python](https://www.python.org/) and [virtualenv](https://virtualenv.pypa.io/en/stable/) locally.\n\n\n\u003e Virtualenv is a tool that helps us create isolated Python environments. This makes it possible for us to install dependencies (like Flask) in an isolated environment, and not pollute our global packages directory. To install virtualenv:\n\n```\n    pip install virtualenv\n```\n\n## Setup and configuration\n\n### Installing Flask\n\nAs stated earlier, we will be developing using Flask, a web framework for Python. In this step, we will activate a virtual Python environment and install Flask for use in our project.\n\nTo activate a virtual environment:\n\n```\n    mkdir realtime-graph\n    cd realtime-graph\n    virtualenv .venv\n    source .venv/bin/activate\n```\n\n\u003e Note: To activate the virtual environment on a Windows machine, you would need to enter the path to the activate file (in `.venv/Scripts`) in Powershell / command prompt. \n\nTo install Flask:\n\n```\n    pip install flask\n```\n\nWe will also need the [Requests](http://docs.python-requests.org/en/master/) library. Let us install it now:\n\n```\n    pip install requests\n```\n\n### Setting up Pusher\n\nPusher is a service that makes it easy for us to supercharge our web and mobile applications with realtime updates. We will be using it primarily for powering the realtime updates to our graphs. Head over to Pusher.com and [register for a free account](https://pusher.com/signup?plan=sandbox), if you don’t already have one.\n\nNext, create an app on the [dashboard](https://dashboard.pusher.com/) and copy out the app credentials (App ID, Key, Secret and Cluster), as we would be needing these in our app.\n\nNow we can install the Pusher Python library to help our backend communicate with the Pusher service:\n\n```\n    pip install pusher\n```\n\n### Installing Plotly\n\nPlotly is a tool that helps to easily display visual data on the web. According to [their website](https://plot.ly/):\n\n\n\u003e Plotly creates **leading open source tools** for composing, editing, and sharing interactive **data visualization** via the Web.\n\nWe will be making use of Plotly to create our graph and chart. To install Plotly to our app:\n\n```\n    pip install plotly\n```\n\n### File and folder structure\n\nHere is the folder structure for the app. We will only limit it to things necessary so as to avoid bloat. Let us go ahead and create the following files and folders:\n\n```\n        ├── realtime-graph\n            ├── app.py\n            └── templates\n                └── index.html\n```\n\nThe templates folder contains our `index.html` template file, while `app.py` will house all our server-side code.\n\n\n## Building the backend\n\nNow, we can start writing server-side code to perform our various app functions. Our app will get the prices for Bitcoin every 10 seconds. We will use Pusher to broadcast an event, along with the new prices every time data is retrieved.\n\nWe will start by importing the needed modules, configuring the Pusher object, and initialising some needed variables:\n\n``` python\n    # ./app.py\n    from flask import Flask, render_template\n    from apscheduler.schedulers.background import BackgroundScheduler\n    from apscheduler.triggers.interval import IntervalTrigger\n    from pusher import Pusher\n    import requests, json, atexit, time, plotly, plotly.graph_objs as go\n    \n    # create flask app\n    app = Flask(__name__)\n    \n    # configure pusher object\n    pusher = Pusher(\n        app_id='YOUR_APP_ID',\n        key='YOUR_APP_KEY',\n        secret='YOUR_APP_SECRET',\n        cluster='YOUR_APP_CLUSTER',\n        ssl=True\n    )\n    \n    # define variables for data retrieval\n    times = []\n    currencies = [\"BTC\"]\n    prices = {\"BTC\": []}\n```\n\nIn the code block above, first we import the needed modules and libraries, including the Pusher and Plotly libraries. We also configure the Pusher object with the credentials gotten from the Pusher dashboard. Remember to replace `YOUR_APP_ID` and similar values with the actual values for your own app.\n\nSome variables are also defined to hold values we will need later in our app. `times` stores the values of the time when we retrieve price data in a list. `currencies` holds the list of currencies we will be fetching data for. In our case, this is just `BTC` but you can add any number of currencies you want. `prices` is a dictionary that holds the list of prices for currency defined.\n\nNext, let us define a simple route to serve our app’s view:\n\n``` python\n    # ./app.py\n    # ...\n    \n    @app.route(\"/\")\n    def index():\n        return render_template(\"index.html\")\n```\n\nIn the code block above, we use Flask’s `render_template()` function to serve `index.html` from the `./templates` folder on the index route.\n\nNow we can get to the core of our app, which is creating a function that will retrieve Bitcoin prices and then broadcast that data in graph and chart form. Let us update `app.py` with the function:\n\n``` python\n    # ./app.py\n    # ...\n    \n    def retrieve_data():\n        # create dictionary for saving current prices\n        current_prices = {}\n        for currency in currencies:\n            current_prices[currency] = []\n        # append new time to list of times\n        times.append(time.strftime('%H:%M:%S'))\n    \n        # make request to API and get response as object\n        api_url = \"https://min-api.cryptocompare.com/data/pricemulti?fsyms={}\u0026tsyms=USD\".format(\",\".join(currencies))\n        response = json.loads(requests.get(api_url).content)\n    \n        # append new price to list of prices for graph\n        # and set current price for bar chart\n        for currency in currencies:\n            price = response[currency]['USD']\n            current_prices[currency] = price\n            prices[currency].append(price)\n    \n        # create an array of traces for graph data\n        graph_data = [go.Scatter(\n            x=times,\n            y=prices.get(currency),\n            name=\"{} Prices\".format(currency)\n        ) for currency in currencies]\n    \n        # create an array of traces for bar chart data\n        bar_chart_data = [go.Bar(\n            x=currencies,\n            y=list(current_prices.values())\n        )]\n    \n        data = {\n            'graph': json.dumps(list(graph_data), cls=plotly.utils.PlotlyJSONEncoder),\n            'bar_chart': json.dumps(list(bar_chart_data), cls=plotly.utils.PlotlyJSONEncoder)\n        }\n    \n        # trigger event\n        pusher.trigger(\"crypto\", \"data-updated\", data)\n```\n\nIn the code block above, we define a function `retrieve_data()` that does the following:\n\n1. Makes a request to a remote API to retrieve current Bitcoin prices. We make use of the [CryptoCompare API](https://min-api.cryptocompare.com/) and the [Requests library](http://docs.python-requests.org/en/master/).\n2. Generates traces for the graph and bar chart using the Plotly [plotly.graph_objs.Scatter](https://plot.ly/python/line-charts/) and [plotly.graph_objs.Bar](https://plot.ly/python/bar-charts/).\n3. Encode the graph and bar chart data as JSON using the [Plotly Json Encoder](https://github.com/plotly/plotly.py/blob/master/plotly/utils.py#L130).\n4. Trigger a `data-updated` event using the configured `pusher` object, broadcasting the needed data on the `crypto` channel.\n\nWe use the configured `pusher` object for broadcasting events on specific channels. To broadcast an event, we use the `trigger()` method with the following syntax:\n\n```\n    pusher.trigger('a_channel', 'an_event', {'some': 'data'})\n```\n\n\u003e Note: You can find the docs for the Pusher Python library [here](https://github.com/pusher/pusher-http-python).\n\nPusher also grants us the ability to trigger events on various types of channels including Public, Private and Presence channels. Read about them [here](https://pusher.com/docs/client_api_guide/client_channels#channel_types).\n\n### Scheduling the data retrieval function\n\nA major part of our app is making sure our data retrieval functions runs at a 10 second interval, so as to keep users updated of the most current prices. To create this schedule, we make use of AppScheduler. To install AppScheduler:\n\n```\n    pip install apscheduler\n```\n\nThe following piece of code will register the job and run our `retrieve_data()` function every 10 seconds:\n\n``` python\n    # ./app.py\n    # ...\n    \n    # create schedule for retrieving prices\n    scheduler = BackgroundScheduler()\n    scheduler.start()\n    scheduler.add_job(\n        func=retrieve_data,\n        trigger=IntervalTrigger(seconds=10),\n        id='prices_retrieval_job',\n        name='Retrieve prices every 10 seconds',\n        replace_existing=True)\n    # Shut down the scheduler when exiting the app\n    atexit.register(lambda: scheduler.shutdown())\n```\n\n### Running the Flask app\n\nFinally, to start the app in debug mode, while disabling the auto reloader:\n\n``` python\n    # ./app.py\n    # ...\n    \n    # run Flask app\n    app.run(debug=True, use_reloader=False)\n```\n\n\u003e **Note:** We disable the auto reloader so as to prevent our scheduled function from running twice at every interval. You can read more on this [here](https://stackoverflow.com/a/15491587).\n\n\n## Creating our app view\n\nWe will now write some markup and JavaScript code to display the graph and chart to our users. Editing the `index.html` file:\n\n``` html\n    \u003c!-- ./templates/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003eCryptoLiveChart!\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css\"\u003e\n        \u003cstyle\u003e\n            .chart {\n                height: 800px;\n            }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \u003csection class=\"section\"\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003ch1 class=\"title\"\u003eWelcome to \u003cstrong\u003eCrypto\u003c/strong\u003eLiveChart!\u003c/h1\u003e\n            \u003cp class=\"subtitle\"\u003eView live prices for \u003cstrong\u003eBitcoin\u003c/strong\u003e and \u003cstrong\u003eEthereum\u003c/strong\u003e in real time!\u003c/p\u003e\n            \u003chr\u003e\n            \u003cdiv class=\"columns\"\u003e\n                \u003cdiv class=\"column\"\u003e\n                    \u003ch5 class=\"title is-6\"\u003ePrices (in USD)\u003c/h5\u003e\n                    \u003cdiv id=\"price_chart\" class=\"chart\"\u003e\n                        Graph\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"column\"\u003e\n                    \u003ch5 class=\"title is-6\"\u003eMarket Cap\u003c/h5\u003e\n                    \u003cdiv id=\"market_cap_chart\" class=\"chart\"\u003e\n                        Bar Chart\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/section\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe above code contains the basic markup for the homepage. We imported [Bulma](https://bulma.io/) (a cool CSS framework) to take advantage of some pre-made styles.\n\nNext, we will write some JavaScript code to display our charts:\n\n``` html\n    \u003c!-- ./templates/index.html --\u003e\n    \u003c!-- ... --\u003e\n      \n      \u003c!-- D3.js --\u003e\n      \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js\"\u003e\u003c/script\u003e\n      \u003c!-- jQuery --\u003e\n      \u003cscript src=\"https://code.jquery.com/jquery-2.1.4.min.js\"\u003e\u003c/script\u003e\n      \u003c!-- Plotly.js --\u003e\n      \u003cscript src=\"https://d14fo0winaifog.cloudfront.net/plotly-basic.js\"\u003e\u003c/script\u003e\n      \u003c!-- import Pusher-js library --\u003e\n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript type=\"text/javascript\"\u003e\n          // connect to Pusher\n          const pusher = new Pusher('YOUR_APP_KEY', {\n            cluster: 'YOUR_APP_CLUSTER', // gotten from Pusher app dashboard\n            encrypted: true // optional\n          });\n          // subscribe to crypto channel\n          const channel = pusher.subscribe('crypto')\n          // listen for relevant events\n          channel.bind('data-updated', data =\u003e {\n              const graph = JSON.parse(data.graph);\n              Plotly.newPlot('price_chart', graph);\n              const bar_chart = JSON.parse(data.bar_chart);\n              Plotly.newPlot('market_cap_chart', bar_chart);\n          });\n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the code above, first we import the needed libraries - D3.js, Plotly and Pusher. Then we do the following:\n\n1. Connect to our Pusher app by creating an instance with `new Pusher()`. Remember to replace `YOUR_APP_KEY` and `YOUR_APP_CLUSTER` with the actual values gotten from your dashboard.\n2. Subscribe to the `crypto` channel on which we will be broadcasting events with `pusher.subscribe()`\n3. We bind the `data-updated` event on the channel and define a callback function to plot our graph and chart anytime data is received.\n\nAnd that’s it! To run our app:\n\n```\n    python app.py\n```\n\n## Conclusion\n\nIn this tutorial we have learned how to create beautiful realtime charts and graphs in our Flask Apps using Plotly and Pusher. You can check out the [Plotly Python documentation](https://plot.ly/python/) to see how to create other graphs quickly in Python!\n\nYou can find the entire code for this tutorial on [GitHub](https://github.com/olayinkaos/realtime-graph).","metaTitle":"Track Bitcoin prices on a live graph with Python","metaDescription":"Use Python to c Flask reate a Bitcoin tracking interface. On the frontend, use Plotly to display the data on a live graph."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3VEglrEeqASMosuQEcaEQo","type":"Entry","createdAt":"2018-06-15T10:48:02.874Z","updatedAt":"2019-01-02T15:34:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app in the terminal using Python","url":"chat-terminal-python","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5KlhqILjZSg4wUSqY4Goqg","type":"Entry","createdAt":"2018-02-20T14:39:32.323Z","updatedAt":"2018-10-02T14:31:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Samuel Ogundipe","url":"samuel-ogundipe","email":"ayoogundipe2005@gmail.com","twitter":"https://twitter.com/fucked_down","github":"https://github.com/samuelayo","guestWriter":true}}],"projectRepo":"https://github.com/samuelayo/terminal-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-06-12","description":"Build a chat app with Python that allows users to log in and chat from within a terminal. Use Pysher to subscribe to Pusher events on the backend.","prerequisite":"You will need Python 3 and pip installed on your machine. Some knowledge of Python is useful.","content":"Realtime chat is virtually any online communication that provides a realtime or live transmission of text messages from sender to receiver. This tutorial will show you how to build a realtime terminal chat using Python and Pusher Channels.\n\nIt’s lightweight to use the terminal for our chat, as there is no opening of the browser, loading of JS libraries or any frontend code. Also, it allows us to quickly test our ideas without worrying about what the user interface would look like.\n\n\u003e Python in this tutorial refers to Python 3.x\n\n![terminal-chat-python-demo](//images.ctfassets.net/1es3ne0caaid/SSI8gfhYe2WqGqC8826CM/16df9691cc56bea6c6bb8442c6da884b/terminal-chat-python-demo.gif)\n\n## Prerequisites\n\nA basic understanding of Python is needed to follow this tutorial.\nYou also need to have Python 3 and pip installed and configured on your machine.\n\n## Set up an app on Pusher\n\n[Pusher](https://pusher.com/) is a hosted service that makes it super-easy to add realtime data and functionality to web and mobile applications.\n\nPusher acts as a realtime layer between your servers and clients. Pusher maintains persistent connections to the clients - over Web-socket if possible and falling back to HTTP-based connectivity - so that as soon as your servers have new data they want to push to the clients they can do, via Pusher.\n\nIf you do not already have one, head over to Pusher and create a free account. We will register a new app on the dashboard. The only compulsory options are the app name and cluster. A cluster represents the physical location of the Pusher server that will handle your app’s requests. Also, copy out your App ID, Key, and Secret from the App Keys section, as we will need them later on.\n\n\n## Creating our application\n\n### Initial steps\n\nFirst, we need to install a package called `virtualenv`. Virtualenv helps to manage environments in Python. This is so we do not end up with conflicting libraries due to install operations from project to project. To install Virtualenv, we run:\n\n```\n    sudo pip install virtualenv\n```\n\nFor Windows users,  open Powershell as admin, and run:\n\n```\n    pip install virtualenv\n```\n\nOnce the install is completed, we can verify by running:\n\n```\n    virtualenv --version\n```\n\nNext, let us create a new environment with Virtualenv:\n\n```\n    virtualenv terminal-chat\n```\n\nOnce the environment is done creating, we move into the new directory created and we activate the environment:\n\n```\n    # change directory\n    cd terminal-chat\n    # activate environment\n    source bin/activate\n```\n\nFor Windows users, you can activate by running:\n\n```\n    # change directory\n    cd terminal-chat\n    # activate environment\n    Scripts\\activate\n```\n\nWe need to install libraries, which we will use during this project. To install them, run:\n\n```\n    pip install termcolor pusher git+https://github.com/nlsdfnbch/Pysher.git python-dotenv\n```\n\nWhat are these packages we have installed? And what do they do? I’ll explain.\n\n\n- `termcolor`: ANSII Color formatting for output in the terminal. This package will format the color of the output to the terminal. Note that the colors won't display in Powershell or Windows Command Prompt.\n- `pusher`: the official Python library for interacting with the Pusher HTTP API.\n- `pysher`: Python module for handling pusher WebSockets. This will handle event subscriptions using Pusher\n- `python-dotenv`: Python module that reads the key, value pair from `.env` file and adds them to the environment variable. \n\n### Creating the entry point\nLet us create a new `.env` file which will hold our environment variables, which will be used in connecting to Pusher. Create a new file called `.env` and add your pusher app id, key, secret and cluster respectively:\n\n```\n    PUSHER_APP_ID=YOUR_APP_ID\n    PUSHER_APP_KEY=YOUR_APP_KEY\n    PUSHER_APP_SECRET=YOUR_APP_SECRET\n    PUSHER_APP_CLUSTER=YOUR_APP_CLUSTER\n```\n\nNext, create a file called `terminalChat.py` and add:\n\n``` python\n    import getpass\n    from termcolor import colored\n    from dotenv import load_dotenv\n    load_dotenv(dotenv_path='.env')\n    class terminalChat():\n        pusher = None\n        channel = None\n        chatroom = None\n        clientPusher = None\n        user = None\n        users = {\n            \"samuel\": \"samuel'spassword\",\n            \"daniel\": \"daniel'spassword\",\n            \"tobi\": \"tobi'spassword\",\n            \"sarah\": \"sarah'spassword\"\n        }\n        chatrooms = [\"sports\", \"general\", \"education\", \"health\", \"technology\"]\n    \n        ''' The entry point of the application'''\n        def main(self):\n            self.login()\n            self.selectChatroom()\n            while True:\n                self.getInput()\n    \n        ''' This function handles login to the system. In a real-world app, \n        you might need to connect to API's or a database to verify users '''\n    \n        def login(self):\n            username = input(\"Please enter your username: \")\n            password = getpass.getpass(\"Please enter %s's Password:\" % username)\n            if username in self.users:\n                if self.users[username] == password:\n                    self.user = username\n                else:\n                    print(colored(\"Your password is incorrect\", \"red\"))\n                    self.login()\n            else:\n                print(colored(\"Your username is incorrect\", \"red\"))\n                self.login()\n    \n        ''' This function is used to select which chatroom you would like to connect to '''\n        def selectChatroom(self):\n            print(colored(\"Info! Available chatrooms are %s\" % str(self.chatrooms), \"blue\"))\n            chatroom = input(colored(\"Please select a chatroom: \", \"green\"))\n            if chatroom in self.chatrooms:\n                self.chatroom = chatroom\n                self.initPusher()\n            else:\n                print(colored(\"No such chatroom in our list\", \"red\"))\n                self.selectChatroom()\n                \n        ''' This function is used to get the user's current message '''\n        def getInput(self):\n            message = input(colored(\"{}: \".format(self.user), \"green\"))\n    \n    if __name__ == \"__main__\":\n        terminalChat().main()\n```\n\nWhat is going on in the code above?\n\nWe import the colored module which will give colors to our console output and the `load_env` module to load environment variables from our `.env` file. We then called the `load_env`\nfunction.\n\nThe `terminalChat` class is then defined, with some properties:\n\n\n- `pusher` : this property will hold the Pusher server instance once it is available.\n- `channel`: this property will hold the Pusher instance of the channel subscribed to.\n- `chatroom`: this property will hold the name of the channel the user wants to chat in.\n- `clientPusher`: this property will hold the Pusher client instance once it is available.\n- `user`: this property will hold the details of the currently logged in user.\n- `users`: this property holds a static list of users who can log in, with their values as the password. In a real-world application, this would usually be gotten from some database\n- `chatrooms`: this property holds a list of all available chat-rooms one can join.\n\n### Understanding the defined functions\nWe have four functions defined, which I will explain how they work respectively:\n\n`main`: this is the entry point into our application. Here, we call the function to log in, and the function to select a chat room. After this, we have a while loop that calls the `getInput`  function. This while loop means the `getInput` function will always be running. This is to enable us always have an input to type in new messages to the terminal.\n\n`login`: the login function is as simple as the name implies. It is used to manage login into the app. In the function, we ask for both the username and password of the user. Next, we check if the username exists in our user’s dictionary. Also, we check if the password correlates with the user’s password. If all is well, we assign the user variable to the value of the user input.\n\n\n\u003e Note: for the sake of this tutorial, we have a pre-defined dictionary of users. In your application, you may need to verify that the user exists in your database. \n\n`selectChatroom`: as the name implies, this function enables the user to select a chat-room. First, it informs the user of the available chat-rooms, before proceeding to ask us to select a chat-room. Once a valid chat-room has been selected, we assign the chat-room variable to the selected room, and we call a method called `initPusher` (which we will create soon), which initializes and sets up Pusher to send and receive messages.\n\n`getInput`:  this function is simple. It shows an input with the logged in user’s name in front, waiting for the user to enter a message and send. For now, it does nothing to the message, we will revisit this function once Pusher has been set up correctly.\n\n### Connecting the Pusher server and client to our app\nIf we remember, in the previous section above, we discussed the `initPusher` method which initializes and sets up Pusher to send and receive messages. Here is where we implement that function. \nFirst, we need to add the following imports to the top of our file:\n\n``` python\n    #terminalChat.py\n    from pusher import Pusher\n    import pysher\n    import os\n    import json \n```\n\nNext, let’s go ahead and defined `initPusher` and some other functions within our terminalChat class:\n\n``` python\n    ''' This function initializes both the Http server Pusher as well as the clientPusher'''\n    def initPusher(self):\n        self.pusher = Pusher(app_id=os.getenv('PUSHER_APP_ID', None), key=os.getenv('PUSHER_APP_KEY', None), secret=os.getenv('PUSHER_APP_SECRET', None), cluster=os.getenv('PUSHER_APP_CLUSTER', None))\n        self.clientPusher = pysher.Pusher(os.getenv('PUSHER_APP_KEY', None), os.getenv('PUSHER_APP_CLUSTER', None))\n        self.clientPusher.connection.bind('pusher:connection_established', self.connectHandler)\n        self.clientPusher.connect()\n        \n    ''' This function is called once pusher has successfully established a connection'''\n    def connectHandler(self, data):\n        self.channel = self.clientPusher.subscribe(self.chatroom)\n        self.channel.bind('newmessage', self.pusherCallback)\n    \n    ''' This function is called once pusher receives a new event '''\n    def pusherCallback(self, message):\n        message = json.loads(message)\n        if message['user'] != self.user:\n            print(colored(\"{}: {}\".format(message['user'], message['message']), \"blue\"))\n            print(colored(\"{}: \".format(self.user), \"green\"))\n```\n\nIn the init function, we initialize a new Pusher instance to the `pusher` variable, passing in our `APP_ID`, `APP_KEY`, `APP_SECRET` and `APP_CLUSTER` respectively. Next, we initialize a new `Pysher`  client for Pusher, passing in our `APP_KEY`. We then bind to the connection, the `pusher:connection_established` event, and pass the `connectHandler` function as it’s callback. The reason we do this is to ensure that the client has been connected before we try to subscribe to a channel. After this is done, we call `connect` on the `clientPusher`.\n\n\n\u003e You might have been wondering why we are using [Pysher](https://github.com/nlsdfnbch/Pysher) as the client library for Pusher here. It is because the default Pusher library only allows for triggering of events and not subscribing to them. [Pysher](https://github.com/nlsdfnbch/Pysher) is a community library which allows us to subscribe for events using Python on the server. \n\nIn the `connectHandler` function, we receive an argument called `data`. This comprises connection data that comes from the established connection between the Pusher WebSockets. \nWe subscribe to the channel, which has been chosen with Pusher, then bind to an event called `newmessage`, passing in the `pusherCallback` function as it’s callback.\n\nIn the `pusherCallback` method, we receive an argument called `message`, which returns the object of the new message received from Pusher. Here, we convert the message to a readable JSON format for Python, then check if the message isn't for the currently logged in user before printing the message to the screen alongside the sender’s name. We also print the logged in user’s name to the screen, with a colon in its front, so the user knows he can still type.\n\n### Updating the getInput function\nLet’s update our `getInput` function, so we can trigger the message to Pusher once it is received:\n\n``` python\n    ''' This function is used to get the user's current message '''\n    def getInput(self):\n        message = input(colored(\"{}: \".format(self.user), \"green\"))\n        self.pusher.trigger(self.chatroom, u'newmessage', {\"user\": self.user, \"message\": message})\n```\n\nHere, after receiving the message, we trigger a `newmesage`  event to the current chat-room, passing the current user and the message sent.\n\n### Bringing it all together as one piece\nHere is what our `terminalChat.py` looks like:\n\n``` python\n    import getpass\n    from termcolor import colored\n    from pusher import Pusher\n    import pysher\n    from dotenv import load_dotenv\n    import os\n    import json\n    \n    load_dotenv(dotenv_path='.env')\n    \n    class terminalChat():\n        pusher = None\n        channel = None\n        chatroom = None\n        clientPusher = None\n        user = None\n        users = {\n            \"samuel\": \"samuel'spassword\",\n            \"daniel\": \"daniel'spassword\",\n            \"tobi\": \"tobi'spassword\",\n            \"sarah\": \"sarah'spassword\"\n        }\n        chatrooms = [\"sports\", \"general\", \"education\", \"health\", \"technology\"]\n    \n        ''' The entry point of the application'''\n        def main(self):\n            self.login()\n            self.selectChatroom()\n            while True:\n                self.getInput()\n    \n        ''' This function handles logon to the system. In a real world app, \n        you might need to connect to API's or a database to verify users '''\n    \n        def login(self):\n            username = input(\"Please enter your username: \")\n            password = getpass.getpass(\"Please enter %s's Password:\" % username)\n            if username in self.users:\n                if self.users[username] == password:\n                    self.user = username\n                else:\n                    print(colored(\"Your password is incorrect\", \"red\"))\n                    self.login()\n            else:\n                print(colored(\"Your username is incorrect\", \"red\"))\n                self.login()\n    \n        ''' This function is used to select which chatroom you would like to connect to '''\n        def selectChatroom(self):\n            print(colored(\"Info! Available chatrooms are %s\" % str(self.chatrooms), \"blue\"))\n            chatroom = input(colored(\"Please select a chatroom: \", \"green\"))\n            if chatroom in self.chatrooms:\n                self.chatroom = chatroom\n                self.initPusher()\n            else:\n                print(colored(\"No such chatroom in our list\", \"red\"))\n                self.selectChatroom()\n    \n        ''' This function initializes both the Http server Pusher as well as the clientPusher'''\n        def initPusher(self):\n            self.pusher = Pusher(app_id=os.getenv('PUSHER_APP_ID', None), key=os.getenv('PUSHER_APP_KEY', None), secret=os.getenv('PUSHER_APP_SECRET', None), cluster=os.getenv('PUSHER_APP_CLUSTER', None))\n            self.clientPusher = pysher.Pusher(os.getenv('PUSHER_APP_KEY', None), os.getenv('PUSHER_APP_CLUSTER', None))\n            self.clientPusher.connection.bind('pusher:connection_established', self.connectHandler)\n            self.clientPusher.connect()\n            \n        ''' This function is called once pusher has successfully established a connection'''\n        def connectHandler(self, data):\n            self.channel = self.clientPusher.subscribe(self.chatroom)\n            self.channel.bind('newmessage', self.pusherCallback)\n        \n        ''' This function is called once pusher receives a new event '''\n        def pusherCallback(self, message):\n            message = json.loads(message)\n            if message['user'] != self.user:\n                print(colored(\"{}: {}\".format(message['user'], message['message']), \"blue\"))\n                print(colored(\"{}: \".format(self.user), \"green\"))\n        \n        ''' This function is used to get the user's current message '''\n        def getInput(self):\n            message = input(colored(\"{}: \".format(self.user), \"green\"))\n            self.pusher.trigger(self.chatroom, u'newmessage', {\"user\": self.user, \"message\": message})\n    \n    \n    if __name__ == \"__main__\":\n        terminalChat().main()\n```\n\nHere is what our chat looks like if we run `python terminalChat.py`:\n\n![terminal-chat-python-demo](//images.ctfassets.net/1es3ne0caaid/SSI8gfhYe2WqGqC8826CM/16df9691cc56bea6c6bb8442c6da884b/terminal-chat-python-demo.gif)\n\n## Conclusion\n\nWe’ve seen how straightforward it is to add realtime chats to our terminal, thanks to Pusher Channels. Our demo app is a simple example. The same functionality could be used in many real world scenarios. You can check out the source code of the completed application on [GitHub](https://github.com/samuelayo/terminal-chat), and dive deeper into Pusher services [here](https://pusher.com/docs).","metaTitle":"Build a chat app in the terminal using Python","metaDescription":"In this short tutorial you will create a simple chat app using Python and Pysher. Users will be able to log in, join channels and chat from within their terminal."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1WEqqnxzxGQq4W6ueiayCg","type":"Entry","createdAt":"2018-02-28T11:46:32.914Z","updatedAt":"2018-02-28T11:46:32.914Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an activity feed with Flask","url":"activity-feed-flask","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3sixk7zsAoQqqSsUWM8I8y","type":"Entry","createdAt":"2018-02-13T18:06:00.483Z","updatedAt":"2018-02-14T10:08:13.372Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Olayinka Omole","url":"olayinka-omole","email":"olayinka.omole@gmail.com","twitter":"https://twitter.com/olayinkaos","github":"https://github.com/olayinkaos","guestWriter":true}}],"projectRepo":"https://github.com/olayinkaos/flask-realtime-activity-feed","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}}],"reviewDate":"2018-01-24","description":"In this tutorial, we will cover how to build a live blog feed using Flask and HTML.","prerequisite":"A basic understanding of Flask and HTML is needed to follow this tutorial.","content":"A great way to track what users are doing in your application is to visualise their activities in a feed. This would be especially useful when creating a dashboard for your application. \n\nIn this tutorial, I will show you how to build a quick and easy realtime activity feed using Python ([Flask](http://flask.pocoo.org/)), JavaScript and Pusher. We will build a realtime blog, and a feed page which will show user activity from the blog.\n\nHere is what the final app will look like:\n\n![activity-feed-flask-demo](//images.contentful.com/1es3ne0caaid/6DYvqpgeMo8gquI4mYueoA/c929a74adc4ec50b8aacd71c412d334a/activity-feed-flask-demo.gif)\n\n## Prerequisites\n\nTo follow along properly, basic knowledge of Python, Flask and JavaScript (ES6 syntax) is needed. You will also need to install [Python](https://www.python.org/) and [virtualenv](https://virtualenv.pypa.io/en/stable/) locally.\n\n\n\u003e Virtualenv is a tool that helps us create isolated Python environments. This makes it possible for us to install dependencies (like Flask) in an isolated environment, and not pollute our global packages directory. To install virtualenv:\n\n```\n    pip install virtualenv\n```\n\n## Setup and Configuration\n\n### Installing Flask\nAs stated earlier, we will be developing using Flask, a web framework for Python. In this step, we will activate a virtual Python environment and install Flask for use in our project.\n\nTo activate a virtual environment:\n\n```\n    mkdir realtime-feed\n    cd realtime-feed\n    virtualenv .venv\n    source .venv/bin/activate\n```\n\nTo install Flask:\n\n```\n    pip install flask\n```\n\n### Setting up Pusher\nPusher is a service that makes it easy for us to supercharge our web and mobile applications with realtime updates. We will be using it primarily for powering our realtime blog and activity feed. Head over to Pusher.com and [register for a free account](https://pusher.com/signup?plan=sandbox), if you don’t already have one.\n\nNext, create an app on the [dashboard](https://dashboard.pusher.com/) and copy out the app credentials (App ID, Key, Secret and Cluster), as we would be needing these in our app.\n\nNow we can install the Pusher Python library to help our backend communicate with the Pusher service:\n\n```\n    pip install pusher\n```\n\n### File and Folder Structure\nHere is the folder structure for the app. We will only limit it to things necessary so as to avoid bloat:\n\n```\n    ├── realtime-feed\n        ├── app.py\n        └── templates\n            ├── index.html\n            └── feed.html\n```\n\nThe templates folder contains our HTML files, while `app.py` will house all our server-side code. One of the great things about Flask is how it allows you to set up small web projects with minimal code and very few files.\n\n## Building the backend\n\nNext, we will write some code to display our pages and handle requests from our app. We will use Pusher to handle the management of data sent to our backend. We will broadcast events, with corresponding data on a channel, and listen for these events in our app.\n\nLet us start by importing the needed modules and configuring the Pusher object:\n\n```\n    # ./app.py\n    from flask import Flask, render_template, request, jsonify\n    from pusher import Pusher\n    import uuid\n    \n    # create flask app\n    app = Flask(__name__)\n    \n    # configure pusher object\n    pusher = Pusher(\n      app_id='YOUR_APP_ID',\n      key='YOUR_APP_KEY',\n      secret='YOUR_APP_SECRET',\n      cluster='YOUR_APP_CLUSTER',\n      ssl=True\n    )\n```\n\nIn the code above, we initialise the Pusher object with the credentials gotten from the Pusher dashboard. Remember to replace `YOUR_APP_ID` and similar values with the actual values for your own app.\n\nNext we define the different routes in our app for handling requests. Updating `app.py`:\n\n```\n    # ./app.py\n    \n    # index route, shows index.html view\n    @app.route('/')\n    def index():\n      return render_template('index.html')\n    \n    # feed route, shows feed.html view\n    @app.route('/feed')\n    def feed():\n      return render_template('feed.html')\n```\n\nThe first 2 routes defined serve our two app views. The `index` (or home) page which shows the blog, and the `feed` page which shows the activity feed.\n\n\u003e Note: The `render_template()` function renders a template from the template folder.\n\nNow we can define API endpoints for interacting with the blog posts:\n\n```\n    # ./app.py\n    \n    # store post\n    @app.route('/post', methods=['POST'])\n    def addPost():\n      data = {\n        'id': \"post-{}\".format(uuid.uuid4().hex),\n        'title': request.form.get('title'),\n        'content': request.form.get('content'),\n        'status': 'active',\n        'event_name': 'created'\n      }\n      pusher.trigger(\"blog\", \"post-added\", data)\n      return jsonify(data)\n    \n    # deactivate or delete post\n    @app.route('/post/\u003cid\u003e', methods=['PUT','DELETE'])\n    def updatePost(id):\n      data = { 'id': id }\n      if request.method == 'DELETE':\n        data['event_name'] = 'deleted'\n        pusher.trigger(\"blog\", \"post-deleted\", data)\n      else:\n        data['event_name'] = 'deactivated'\n        pusher.trigger(\"blog\", \"post-deactivated\", data)\n      return jsonify(data)\n```\n\nThe endpoints defined above broadcast events for various actions (storing posts, deactivating posts, deleting posts) via Pusher.\n\nWe use the configured `pusher` object for broadcasting events on specific channels. To broadcast an event, we use the `trigger()` method with the following syntax:\n\n```\n    pusher.trigger('a_channel', 'an_event', {'some': 'data'})\n```\n\n\u003e Note: You can find the docs for the Pusher Python library [here](https://github.com/pusher/pusher-http-python).\n\nPusher also grants us the ability to trigger events on various types of channels including Public, Private and Presence channels. Read about them [here](https://pusher.com/docs/client_api_guide/client_channels#channel_types).\n\nFinally, to start the app in debug mode:\n\n```\n    # ./app.py\n    \n    # run Flask app in debug mode\n    app.run(debug=True)\n```\n\nYou can find the full `app.py` file [here](https://github.com/olayinkaos/flask-realtime-activity-feed/blob/master/app.py). In the next step, we will build the views for our app.\n\n## Creating Our App Views\n\n### The blog page\nThis will serve as the homepage, and is where our users will interact with blog posts (creating, deactivating and deleting them). In the `index.html` file:\n\n```\n    \u003c!-- ./templates/index.html --\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n      \u003ctitle\u003eHome!\u003c/title\u003e\n      \u003c!-- import Bulma CSS --\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.6.0/css/bulma.min.css\"\u003e\n      \u003c!-- custom styles --\u003e\n      \u003cstyle\u003e\n        #post-list .card {\n          margin-bottom: 10px;\n        }\n        #post-list .card.deactivated {\n          opacity: 0.5;\n          cursor: not-allowed;\n        }\n      \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003csection class=\"section\"\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003ch1 class=\"title\"\u003eRealtime Blog\u003c/h1\u003e\n          \u003cp class=\"subtitle\"\u003eRealtime blog built with \u003cstrong\u003e\u003ca href=\"https://pusher.com\" target=\"_blank\"\u003ePusher\u003c/a\u003e\u003c/strong\u003e!\u003c/p\u003e\n    \n          \u003cdiv class=\"columns\"\u003e\n            \u003cdiv class=\"column\"\u003e\n              \u003cform id=\"post-form\"\u003e\n                \u003cdiv class=\"field\"\u003e\n                  \u003clabel class=\"label\"\u003eTitle\u003c/label\u003e\n                  \u003cdiv class=\"control\"\u003e\n                    \u003cinput name=\"title\" class=\"input\" type=\"text\" placeholder=\"Hello world\"\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv class=\"field\"\u003e\n                  \u003clabel class=\"label\"\u003eContent\u003c/label\u003e\n                  \u003cdiv class=\"control\"\u003e\n                    \u003ctextarea class=\"textarea\" name=\"content\" rows=\"10\" cols=\"10\"\u003e\u003c/textarea\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv class=\"field\"\u003e\n                  \u003cbutton class=\"button is-primary\"\u003eSubmit\u003c/button\u003e\n                \u003c/div\u003e\n              \u003c/form\u003e\n            \u003c/div\u003e\n    \n            \u003cdiv class=\"column\"\u003e\n              \u003cdiv id=\"post-list\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n    \n          \u003c/div\u003e\n    \n        \u003c/div\u003e\n      \u003c/section\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe above code contains the basic markup for the homepage. We imported [Bulma](https://bulma.io/) (a cool CSS framework) to take advantage of some pre-made styles.\n\nNext, we will define some JavaScript functions to handle our app functions and communicate with our backend:\n\n```\n    \u003c!-- ./templates/index.html --\u003e\n      \u003c!-- // ... --\u003e\n      \u003cscript\u003e\n        const form = document.querySelector('#post-form');\n        \n        // makes POST request to store blog post on form submit\n        form.onsubmit = e =\u003e {\n          e.preventDefault();\n          fetch(\"/post\", {\n            method: 'POST',\n            body: new FormData(form)\n          })\n          .then(r =\u003e {\n            form.reset();\n          });\n        }\n    \n        // makes DELETE request to delete a post\n        function deletePost(id) {\n          fetch(`/post/${id}`, { \n            method: 'DELETE'\n          });\n        }\n    \n        // makes PUT request to deactivate a post\n        function deactivatePost(id) {\n          fetch(`/post/${id}`, { \n            method: 'PUT'\n          });\n        }\n    \n        // appends new posts to the list of blog posts on the page\n        function appendToList(data) {\n          const html = `\n            \u003cdiv class=\"card\" id=\"${data.id}\"\u003e\n              \u003cheader class=\"card-header\"\u003e\n                \u003cp class=\"card-header-title\"\u003e${data.title}\u003c/p\u003e\n              \u003c/header\u003e\n              \u003cdiv class=\"card-content\"\u003e\n                \u003cdiv class=\"content\"\u003e\n                  \u003cp\u003e${data.content}\u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \u003cfooter class=\"card-footer\"\u003e\n                \u003ca href=\"#\" onclick=\"deactivatePost('${data.id}')\" class=\"card-footer-item\"\u003eDeactivate\u003c/a\u003e\n                \u003ca href=\"#\" onclick=\"deletePost('${data.id}')\" class=\"card-footer-item\"\u003eDelete\u003c/a\u003e\n              \u003c/footer\u003e\n            \u003c/div\u003e`;\n          let list = document.querySelector(\"#post-list\")\n          list.innerHTML += html;\n        };\n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe make use of the JavaScript [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) to make AJAX requests to our backend. While this is great because the API is simple to use, note that it requires a polyfill for older browsers. A great alternative is [axios](https://github.com/axios/axios).\n\nNow that we have established communication with our backend, we can listen for events from Pusher, using the Pusher [JavaScript client library](https://github.com/pusher/pusher-js):\n\n```\n      \u003c!-- ./templates/index.html --\u003e\n      \u003c!-- // ... --\u003e\n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript\u003e\n        // configure pusher\n        const pusher = new Pusher('YOUR_APP_KEY', {\n          cluster: 'YOUR_APP_CLUSTER', // gotten from Pusher app dashboard\n          encrypted: true // optional\n        });\n        // subscribe to `blog` public channel\n        const channel = pusher.subscribe('blog');\n    \n        channel.bind('post-added', data =\u003e {\n          appendToList(data);\n        });\n    \n        channel.bind('post-deleted', data =\u003e {\n          const post = document.querySelector(`#${data.id}`);\n          post.parentNode.removeChild(post);\n        });\n    \n        channel.bind('post-deactivated', data =\u003e {\n          const post = document.querySelector(`#${data.id}`);\n          post.classList.add('deactivated');\n        });\n        \n        // ...\n        \n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the code block above, we import the Pusher JavaScript client library, subscribe to the channel (`blog`) on which we’re publishing events from our backend, and listen for those events.\n\nWe `bind` the various events we’re listening for on the channel. The `bind()` method has the following syntax – `channel.bind(event_name, callback_function)`. We’re listening for 3 events on the blog view - `post-added`, `post-deleted` and `post``-deactivated`.\n\nNow that we have finished building the blog page, we can proceed to create the feed page and listen for the same set of events.\n\n### The feed page\n\nFinally we will build a simple page to display the events being triggered from our blog.\nIn the `feed.html` file:\n\n```\n    \u003c!-- ./templates/feed.html --\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n      \u003ctitle\u003eActivity Feed\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.6.0/css/bulma.min.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003csection class=\"section\"\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003ch1 class=\"title\"\u003eBlog Realtime Activity Feed!\u003c/h1\u003e\n          \u003cdiv id=\"events\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/section\u003e\n    \n      \u003c!-- import Pusher-js library --\u003e\n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n    \n      \u003cscript\u003e\n        // connect to Pusher\n        const pusher = new Pusher('YOUR_APP_KEY', {\n          cluster: 'YOUR_APP_CLUSTER', // gotten from Pusher app dashboard\n          encrypted: true // optional\n        });\n        // subscribe to blog channel\n        const channel = pusher.subscribe('blog');\n    \n        // listen for relevant events\n        channel.bind('post-added', eventHandler);\n        channel.bind('post-deleted', eventHandler);\n        channel.bind('post-deactivated', eventHandler);\n    \n        // handler function to show feed of events\n        function eventHandler (data) {\n          const html = `\n              \u003cdiv class=\"box\"\u003e\n                \u003carticle class=\"media\"\u003e\n                  \u003cdiv class=\"media-content\"\u003e\n                    \u003cdiv class=\"content\"\u003e\n                      \u003cp\u003e\n                        \u003cstrong\u003ePost ${data.event_name}\u003c/strong\u003e\n                        \u003csmall\u003e\n                          \u003ci class=\"fa fa-${ data.event_name == 'created' \n                            ? `plus` \n                            : data.event_name == 'deactivated' ? `ban` : `trash`\n                          }\"\u003e\u003c/i\u003e\n                        \u003c/small\u003e\n                        \u003cbr\u003e\n                        Post with ID [\u003cstrong\u003e${data.id}\u003c/strong\u003e] has been ${data.event_name}\n                      \u003c/p\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/article\u003e\n              \u003c/div\u003e`;\n          let list = document.querySelector(\"#events\")\n          list.innerHTML += html;\n        }\n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the code above, we define an `eventHandler()` function which acts as callback for all the events we’re listening for. The function simply gets the event which was triggered and lists it as seen in the image below:\n\n![activity-feed-flask-post-created](//images.contentful.com/1es3ne0caaid/4Jxua3RcMgiI4GESKGKw2I/aaeef4fd30c18dd8615e36ebc6a34adb/activity-feed-flask-post-created.png)\n\nAnd that’s it! To run our app:\n\n```\n    python app.py\n```\n\n## Conclusion\n\nIn a few easy steps, we have been able to build both a realtime blog page, and an activity feed to show events happening on the blog — this shows how well Pusher works with Flask for creating quick realtime applications.\n\nThere are many other use cases for adding realtime functionality to Python applications. Do you have any more improvements, suggestions or use cases? Let us know in the comments!","metaTitle":"Build an activity feed with Flask","metaDescription":"Discover how to build amazing social features like a realtime activity feed for a blog using Flask and HTML."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2lZ8m2NV0ccQMgQ20eoMCU","type":"Entry","createdAt":"2018-02-14T11:49:43.237Z","updatedAt":"2018-03-01T16:19:18.132Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":9,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a to-do app with Flask","url":"todo-app-flask","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3sixk7zsAoQqqSsUWM8I8y","type":"Entry","createdAt":"2018-02-13T18:06:00.483Z","updatedAt":"2018-02-14T10:08:13.372Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Olayinka Omole","url":"olayinka-omole","email":"olayinka.omole@gmail.com","twitter":"https://twitter.com/olayinkaos","github":"https://github.com/olayinkaos","guestWriter":true}}],"projectRepo":"https://github.com/olayinkaos/flask-realtime-todo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}}],"reviewDate":"2017-10-13","description":"Build a CRUD checklist app with Flask from scratch and add realtime functionality to it.","prerequisite":"A basic understanding of Python and JavaScript are needed to follow this tutorial.","content":"[Flask](http://flask.pocoo.org/) is a really cool Python framework for building web applications. One of its major selling points is how simple it is to get started on building apps with it. In this tutorial, we will build a simple Flask [CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) application, and add realtime functionality to it using the superpowers Pusher grants us.\n\nOur CRUD app is a simple realtime to-do list app that can find use in distributed teams, for example to manage their deliverables.\n\nHere is what the final app will look like:\n\n![todo-app-flask-pusher-demo](//images.contentful.com/1es3ne0caaid/4y0xYUc9a8S4weouc2yoSS/7d722ecbf572aa73aa94a16f8ad3a4ef/todo-app-flask-pusher-demo.gif)\n\n## Prerequisites \n\nTo follow along properly, basic knowledge of Python, Flask and JavaScript (ES6 syntax) is needed. You will also need the following installed:\n\n1. [Python](https://www.python.org/)\n2. [virtualenv](https://virtualenv.pypa.io/en/stable/)\n3. [Flask](http://flask.pocoo.org/)\n\nVirtualenv is great for creating isolated Python environments, so we can install dependencies (like Flask) in an isolated environment, and not pollute our global packages directory. To install virtualenv:\n\n```\n    pip install virtualenv\n```\n\n## Setup and Configuration\n\n### Installing Flask\nNow, we can create our project folder, activate a virtual environment in it, and install Flask.\nTo activate a virtual environment:\n\n```\n    mkdir realtime-todo\n    cd realtime-todo\n    virtualenv .venv\n    source .venv/bin/activate\n```\n\nTo install Flask:\n\n```\n    pip install flask\n```\n\n### Setting up Pusher\nWe will be using Pusher to power our realtime updates. Head over to Pusher.com and [register for a free account](https://pusher.com/signup?plan=sandbox), if you don’t already have one. Then create an app on the [dashboard](https://dashboard.pusher.com/), and copy out the app credentials (App ID, Key, Secret and Cluster). It is super straight-forward.\n\nWe also need to install the Pusher Python Library to communicate with Pusher on the backend:\n\n```\n    pip install pusher\n```\n\n### File and Folder Structure\nWe will keep things super simple and will only create a couple of files. Here’s the file/folder structure used:\n\n    ├── realtime-todo\n           ├── app.py\n           ├── static\n           └── templates\n\nThe `static` folder will contain the static files to be used [as per Flask standards](http://flask.pocoo.org/docs/0.12/tutorial/folders/), and the `templates` folder will contain the HTML templates for the app. `App.py` is the main entrypoint for our app and will contain all our server-side code.\n\n\n## Building Our App Backend\n\nNext, we will write code to show a simple view and create endpoints for adding, updating and deleting our to-do's. We will not be persisting the data to a database, but will instead use Pusher events to broadcast data to all users subscribed to our channel.\n\nUpdating `app.py`:\n\n```\n    # ./app.py\n    \n    from flask import Flask, render_template, request, jsonify\n    from pusher import Pusher\n    import json\n    \n    # create flask app\n    app = Flask(__name__)\n    \n    # configure pusher object\n    pusher = Pusher(\n      app_id='YOUR_APP_ID',\n      key='YOUR_APP_KEY',\n      secret='YOUR_APP_SECRET',\n      cluster='YOUR_APP_CLUSTER',\n      ssl=True\n    )\n    \n    # index route, shows index.html view\n    @app.route('/')\n    def index():\n      return render_template('index.html')\n    \n    # endpoint for storing todo item\n    @app.route('/add-todo', methods = ['POST'])\n    def addTodo():\n      data = json.loads(request.data) # load JSON data from request\n      pusher.trigger('todo', 'item-added', data) # trigger `item-added` event on `todo` channel\n      return jsonify(data)\n    \n    # endpoint for deleting todo item\n    @app.route('/remove-todo/\u003citem_id\u003e')\n    def removeTodo(item_id):\n      data = {'id': item_id }\n      pusher.trigger('todo', 'item-removed', data)\n      return jsonify(data)\n    \n    # endpoint for updating todo item\n    @app.route('/update-todo/\u003citem_id\u003e', methods = ['POST'])\n    def updateTodo(item_id):\n      data = {\n        'id': item_id,\n        'completed': json.loads(request.data).get('completed', 0)\n      }\n      pusher.trigger('todo', 'item-updated', data)\n      return jsonify(data)\n    \n    # run Flask app in debug mode\n    app.run(debug=True)\n```\n\nIn the code block above, after importing the needed modules and objects and initialising a Flask app, we initialise and configure Pusher. Remember to replace `YOUR_APP_ID` and similar values with the actual values gotten from the Pusher dashboard for your app. With this `pusher` object, we can then trigger events on whatever channels we define.\n\nA clear example of this is seen in the `addTodo()` procedure, where we trigger an `item-added` event on the `todo` channel with the `trigger` method. The trigger method has the following syntax:\n\n```\n    pusher.trigger('a_channel', 'an_event', {'some': 'data'})\n```\n\nYou can find the docs for the Pusher Python library [here](https://github.com/pusher/pusher-http-python), to get more information on configuring and using Pusher in Python.\n\nIn the code above, we also created an index route which is supposed to show our app view by rendering the `index.html` template. In the next step, we will create this view and start communicating with our Python backend.\n\n\n## Creating Our App View\n\nNow, we  create our main app view in `./templates/index.html`. This is where the interface for our app will live.\n\nFirst we will pull [CSS for TodoMVC apps](https://raw.githubusercontent.com/tastejs/todomvc-app-css/master/index.css) to take advantage of some pre-made to-do list app styles, and store the folder in the `./static` folder.\n\nNext, we can write the basic markup for the view:\n\n``` html\n    \u003c!-- ./templates/index.html --\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n      \u003c!-- link to the Todo MVC index.css file --\u003e\n      \u003clink rel=\"stylesheet\" href=\"/static/todomvc-app-css/index.css\"\u003e\n      \u003ctitle\u003eRealtime Todo List\u003c/title\u003e\n    \u003c/head\u003e\n    \n    \u003cbody\u003e\n      \u003csection class=\"todoapp\"\u003e\n        \u003cheader class=\"header\"\u003e\n          \u003ch1\u003eTodos\u003c/h1\u003e\n          \u003cinput class=\"new-todo\" placeholder=\"What needs to be done?\" \n            autofocus=\"\" onkeypress=\"addItem(event)\"\u003e\n        \u003c/header\u003e\n        \n        \u003csection class=\"main\"\u003e\n          \u003cul class=\"todo-list\"\u003e\u003c/ul\u003e\n        \u003c/section\u003e\n        \n        \u003cfooter class=\"footer\"\u003e\u003c/footer\u003e  \n      \u003c/section\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the above markup, notice we added an `addItem()` function to be called `onkeypress` for the `.new-todo` input. In the following steps we will define this function, as well as other JavaScript functions to handle the basic app functions and interact with our Python backend.\n\n\n### Creating, Removing and Updating To-do Items\nNow, we can add the JavaScript code to interact with the to-do items. Whenever an item is to be added, removed or updated, we will make API calls to our backend to affect those changes. We will do this with the simple and intuitive [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API):\n\n``` html\n    \u003c!-- ./templates/index.html --\u003e\n    \u003chtml\u003e\n      \u003c!-- // ... --\u003e\n      \u003cscript\u003e\n        // function that makes API call to add an item\n        function addItem(e) {\n          // if enter key is pressed on the form input, add new item\n          if (e.which == 13 || e.keyCode == 13) {\n            let item = document.querySelector('.new-todo');\n            fetch('/add-todo', {\n              method: 'post',\n              body: JSON.stringify({ \n                id: `item-${Date.now()}`,\n                value: item.value,\n                completed: 0\n              })\n            })\n            .then(resp =\u003e {\n              // empty form input once a response is received\n              item.value = \"\"\n            });\n          }\n        }\n    \n        // function that makes API call to remove an item\n        function removeItem(id) {\n          fetch(`/remove-todo/${id}`);\n        }\n    \n        // function that makes API call to update an item \n        // toggles the state of the item between complete and\n        // incomplete states\n        function toggleComplete(elem) {\n          let id = elem.dataset.id,\n              completed = (elem.dataset.completed == \"1\" ? \"0\" : \"1\");\n          fetch(`/update-todo/${id}`, {\n            method: 'post',\n            body: JSON.stringify({ completed })\n          });\n        }\n        \n        // helper function to append new ToDo item to current ToDo list\n        function appendToList(data) {\n          let html = `\n            \u003cli id=\"${data.id}\"\u003e\n              \u003cdiv class=\"view\"\u003e\n                \u003cinput class=\"toggle\" type=\"checkbox\" onclick=\"toggleComplete(this)\" \n                  data-completed=\"${data.completed}\" data-id=\"${data.id}\"\u003e\n                \u003clabel\u003e${data.value}\u003c/label\u003e\n                \u003cbutton class=\"destroy\" onclick=\"removeItem('${data.id}')\"\u003e\u003c/button\u003e\n              \u003c/div\u003e\n            \u003c/li\u003e`;\n          let list = document.querySelector(\".todo-list\")\n          list.innerHTML += html;\n       };\n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\n\u003e **Note:** The JavaScript Fetch API is great for making AJAX requests, although it requires a polyfill for older browsers. A great alternative is [axios](https://github.com/mzabriskie/axios).\n\nIn the above block of code, we define 4 functions to help us interact with the items on our to-do list. The `addItem()` function makes a [POST](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) API call to add a new item to the to-do list, with the value from our input field, we also try to mock a unique ID for each item by assigning them a value of `item-${Date.now()}` (ideally this would be implemented by our data store, but it is beyond the scope of this tutorial). Lastly, we assign an initial state of `0` to the `completed` property for each item, this is to show that the item is just added, and has not yet been completed.\n\nThe `removeItem()` function makes a request to delete an item, while the `toggleComplete()` function makes a request to update the `completed` property of an item. An `appendToList()` helper function is also defined to update our to-do list with new items, this helper function will be used in the next step when we start listening for events.\n\n### Listening For Events\nIn this step we will listen for events from Pusher, and update our app view based on the data received. Updating `index.html`:\n\n``` language-html\n    \u003c!-- ./templates/index.html --\u003e\n    \u003chtml\u003e\n      \u003c!-- .// --\u003e\n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \n      \u003cscript\u003e\n        // Enable pusher logging for debugging - don't include this in production\n        Pusher.logToConsole = true;\n    \n        // configure pusher\n        const pusher = new Pusher('YOUR_APP_KEY', {\n          cluster: 'eu', // gotten from Pusher app dashboard\n          encrypted: true // optional\n        });\n    \n        // subscribe to `todo` public channel, on which we'd be broadcasting events\n        const channel = pusher.subscribe('todo');\n    \n        // listen for item-added events, and update todo list once event triggered\n        channel.bind('item-added', data =\u003e {\n          appendToList(data);\n        });\n    \n        // listen for item-removed events\n        channel.bind('item-removed', data =\u003e {\n          let item = document.querySelector(`#${data.id}`);\n          item.parentNode.removeChild(item);\n        });\n    \n        // listen for item-updated events\n        channel.bind('item-updated', data =\u003e {\n          let elem = document.querySelector(`#${data.id} .toggle`);\n          let item = document.querySelector(`#${data.id}`);\n          item.classList.toggle(\"completed\");\n          elem.dataset.completed = data.completed;\n          elem.checked = data.completed == 1;\n        });\n        \n        // ...\n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe first thing we have to do here is to include the [pusher-js](https://github.com/pusher/pusher-js) library to help us communicate with the Pusher service. Next, we initialise the Pusher service by passing in our App Key, and some other options — for a full list of configuration options, you can check the docs [here](https://github.com/pusher/pusher-js#configuration).\n\nAfter successfully initialising Pusher and assigning it to the `pusher` object we can then subscribe to the channel from which we want to receive events, in our case that’s the public `todo` channel:\n\n```\n    const channel = pusher.subscribe('todo');\n```\n\n\u003e Note: Pusher provides various types on channels, including Public, Private and Presence channels. Read about them [here](https://pusher.com/docs/client_api_guide/client_channels#channel_types).\n\nFinally, we `bind` the various events we’re listening for on the channel. The `bind()` method has the following syntax - `channel.bind(event_name, callback_function)`\n\nOptionally, we can add a loader to the page, which would show whenever a request is made.\nThe final `index.html` file would look like [this](https://github.com/olayinkaos/flask-realtime-todo/blob/master/templates/index.html), and our app should be ready now!\n\nTo run our app:\n\n```\n    python app.py\n```\n\nAnd here is what the demo looks like:\n\n![todo-app-flask-pusher-demo](//images.contentful.com/1es3ne0caaid/4y0xYUc9a8S4weouc2yoSS/7d722ecbf572aa73aa94a16f8ad3a4ef/todo-app-flask-pusher-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have learned how to build a Python Flask project from scratch and add realtime functionality to it using Pusher and Vanilla JavaScript. The entire code for this tutorial is [hosted on GitHub](https://github.com/olayinkaos/flask-realtime-todo).\n\nThere are many other use cases for adding realtime functionality to Python applications. Do you have any more improvements, suggestions or use cases? Let us know in the comments!","metaTitle":"Build a to-do app with Flask","metaDescription":"Build a CRUD checklist app with Python, add realtime functionality and improve your productivity."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"237QVdC5tG4CaicAkK6MIE","type":"Entry","createdAt":"2018-02-22T15:02:43.991Z","updatedAt":"2018-03-07T16:22:57.265Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a photo feed using Django","url":"photo-feed-django","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5KlhqILjZSg4wUSqY4Goqg","type":"Entry","createdAt":"2018-02-20T14:39:32.323Z","updatedAt":"2018-10-02T14:31:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Samuel Ogundipe","url":"samuel-ogundipe","email":"ayoogundipe2005@gmail.com","twitter":"https://twitter.com/fucked_down","github":"https://github.com/samuelayo","guestWriter":true}}],"projectRepo":"https://github.com/samuelayo/pusher_django_photo_feed","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"48AytLnko0OKAqMQU2Si8W","type":"Entry","createdAt":"2018-02-12T14:45:47.821Z","updatedAt":"2018-02-12T14:45:47.821Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Django","url":"django","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}}],"reviewDate":"2017-06-21","description":"Learn how to build a photo feed using Django and create your own Instagram feed","prerequisite":"A basic understanding of Python and JavaScript is needed to follow this tutorial.","content":"Today, we will make a photo feed using Django and Pusher. This is like a mini Instagram, but without the comments and filter functionality.\n\n## Setting up Django\n\nFirst, we need to install the Django library if we don't already have it.\nTo install Django, we run:\n\n```\n    pip install django\n```\n\nAfter installing Django, it’s time to create our project. \nOpen up a terminal and create a new project using the following command:\n\n```\n    django-admin startproject photofeed\n```\n\nIn the above command, we created a new project called `photofeed`. The next step will be to create an app inside our new project. To do that, let’s run the following commands:\n\n```\n    //change directory into the pusher_message directory\n    cd photofeed\n    //create a new app where all our logic would live\n    django-admin startapp feed\n```\n\nOnce we’re done setting up the new app, Django needs to know about our new application.\nTo do this, we will go into our `feed\\settings.py` and add the message app to our installed apps as seen below:\n\n```\n    INSTALLED_APPS = [\n        'django.contrib.admin',\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.messages',\n        'django.contrib.staticfiles',\n        'feed'\n    ]\n```\n\nAfter doing the above, it’s time to run the application and see if all went well.\nIn our terminal shell, we run:\n\n```\n    python manage.py runserver\n```\n\nIf we navigate our browser to `http://localhost:8000`, we should see the following:\n\n![photo-feed-django-django-confirmation](//images.contentful.com/1es3ne0caaid/3j2jyrFvfq2CEkaqikKEmO/1e08235e41543d4a50e484d6dcf9845f/photo-feed-django-django-confirmation.png)\n\n## Set up an app on Pusher\n\nAt this point, Django is ready and set up. We need to set up Pusher next, as well as grab our app credentials.\nIf you haven’t already, sign up to a free [Pusher](https://pusher.com/signup) account and create a new app, then copy your secret, application key and application id.\n\n![photo-feed-django-create-app](//images.contentful.com/1es3ne0caaid/5JNrQoamWI8u4m6AyMQCOU/92a7613c8f34936f5e2a356f03700a5e/photo-feed-django-create-app.png)\n\nThe next step is to install the required libraries:\n\n```\n    pip install pusher\n```\n\nIn the above bash command, we installed one package, Pusher.\n- Pusher: This is the official Pusher library for Python. We will be using this library to trigger and send our messages to the Pusher HTTP API\n\n## Creating our application\n\nFirst, let us create a model class, which will generate our database structure.\nLet's open up `feed\\models.py` and replace with the following:\n\n```\n    from django.db import models\n    \n    # Create your models here.\n    class Feed(models.Model):\n        description = models.CharField(max_length=255, blank=True)\n        document = models.FileField(upload_to='static/documents/')\n```\n\nIn the above block of code, we defined a model called `Feed`. The Feed table will consist of the following fields:\n\n- A field to store the description of the photo\n- A field to store the photo\n\nIn the above code, while declaring our document field, we have included an `upload_to` attribute, which we set to `static/documents`. Please note that this path is relative to the path of the `DJANGO MEDIA ROOT`, which we will set now.\nWhile in this article, we will be setting the `MEDIA_ROOT` to the static folder in our `feed` app, so it can get served as a static file. To do that, let us move to our `photofeed/settings.py` and add the code below to our file, immediately after the `STATIC_URL` declaration.\n\n```\n    MEDIA_ROOT = os.path.join(BASE_DIR, 'feed/')\n```\n\n### Running migrations\nWe need to make migrations and run them, so our database table can get created. To do that, let us run the following in our terminal:\n\n```\n    python manage.py makemigrations\n    \n    python manage.py migrate\n```\n\n### Creating our views\nOur views refer to the file/files that hold up the logic behind the application, often referred to as the `Controller`.\nLet us open up our `views.py` in our `feed` folder and replace with the following:\n\n```\n    from django.shortcuts import render, HttpResponse\n    from django.http import JsonResponse\n    from .forms import *\n    from pusher import Pusher\n    import json\n    \n    #instantiate pusher\n    pusher = Pusher(app_id=u'XXX_APP_ID', key=u'XXX_APP_KEY', secret=u'XXX_APP_SECRET', cluster=u'XXX_APP_CLUSTER')\n    # Create your views here.\n    # function that serves the welcome page\n    def index(request):\n        # get all current photos ordered by the latest\n        all_documents = Feed.objects.all().order_by('-id')\n        # return the index.html template, passing in all the feeds\n        return render(request, 'index.html', {'all_documents': all_documents})\n    \n    #function that authenticates the private channel \n    def pusher_authentication(request):\n        channel = request.GET.get('channel_name', None)\n        socket_id = request.GET.get('socket_id', None)\n        auth = pusher.authenticate(\n          channel = channel,\n          socket_id = socket_id\n        )\n     \n        return JsonResponse(json.dumps(auth), safe=False)\n    #function that triggers the pusher request\n    def push_feed(request):\n        # check if the method is post\n        if request.method == 'POST':\n            # try form validation\n            form = DocumentForm(request.POST, request.FILES)\n            if form.is_valid():\n                f = form.save()\n                # trigger a pusher request after saving the new feed element \n                pusher.trigger(u'a_channel', u'an_event', {u'description': f.description, u'document': f.document.url})\n                return HttpResponse('ok')\n            else:\n                # return a form not valid error\n                return HttpResponse('form not valid')\n        else:\n           # return error, type isnt post\n           return HttpResponse('error, please try again')\n```\n\nIn the code above, we have defined two main functions which are:\n\n- index\n- pusher_authentication_\n- push_feed\n\nIn the `index` function, we fetch all the available photos in the database. The photos are then rendered in the view. This enables a new user to see all previous feeds that are available. \nIn the `pusher_authentication` function, we verify that the current user can access our private channel.\nIn the `push_feed` function, we check if it is a POST request, then we try validating our form before saving it into the database. (The form used in this method named `DocumentForm` is not available yet. We will be creating it soon.) After the form validation, we then place our call to the Pusher library for realtime interaction.\n\n### Creating the form class\nA Django Form handles taking user input, validating it, and turning it into Python objects. They also have some handy rendering methods.\nLet us create a file called `forms.py` in our `feed` folder and add the following content to it:\n\n```\n    from django import forms\n    from .models import Feed\n    \n    class DocumentForm(forms.ModelForm):\n        class Meta:\n            model = Feed\n            fields = ('description', 'document', )\n```\n\nIn the above code block, we have imported our Feed model and used it to create a form. This form will now handle the validation and upload of images to the right folder.\n\n### Populating the urls.py\nLet us open up our `photofeed\\urls.py` file and replace with the following:\n\n```\n    \"\"\"photofeed URL Configuration\n    \n    The `urlpatterns` list routes URLs to views. For more information please see:\n        https://docs.djangoproject.com/en/1.11/topics/http/urls/\n    Examples:\n    Function views\n        1. Add an import:  from my_app import views\n        2. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')\n    Class-based views\n        1. Add an import:  from other_app.views import Home\n        2. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')\n    Including another URLconf\n        1. Import the include() function: from django.conf.urls import url, include\n        2. Add a URL to urlpatterns:  url(r'^blog/', include('blog.urls'))\n    \"\"\"\n    from django.conf.urls import url\n    from django.contrib import admin\n    from feed.views import * \n    \n    urlpatterns = [\n        url(r'^$', index),\n        url(r'^push_feed$', push_feed),\n        url(r'^pusher_authentication', pusher_authentication),\n        url(r'^admin/', admin.site.urls),\n    ]\n```\n\nWhat has changed in this file? We have added 2 new routes to the file. \nWe have defined the entry point, and have assigned it to our `index` function. We also defined the push_feed URL and assigned it to our `push_feed` function. This will be responsible for pushing updates to Pusher in realtime. Finally, the `pusher_authentication` endpoint, which handles the authentication of our private channel.\n\n### Creating the HTML files\nNow we need to create the index.html file which we have referenced as the template for our index function.\n\n- index.html\n\nLet us create a new folder in our `feed` folder called `templates`.\nNext, we create a file called `index.html` in our `templates` folder and replace it with the code below:\n\n```\n    \u003chtml\u003e\n        \u003chead\u003e\n            \u003ctitle\u003eDjango Photo feed\u003c/title\u003e\n            \u003clink href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n            \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js\"\u003e\u003c/script\u003e\n            \u003cscript src=\"//js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003c/head\u003e\n        \u003cbody\u003e\n    \n            \u003cdiv class=\"container\"\u003e\n                \u003cform  method=\"post\" enctype=\"multipart/form-data\" action=\"/push_feed\" onsubmit=\"return feed_it()\"\u003e\n                \u003cinput type=\"hidden\" id=\"csrf\" name=\"csrf\" value=\"{{ csrf_token }}\"/\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"usr\"\u003eImage:\u003c/label\u003e\n                        \u003cinput type=\"file\" id=\"document\" name=\"document\" class=\"form-control\"  required\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"pwd\"\u003ecomment:\u003c/label\u003e\n                        \u003cinput type=\"text\" id=\"description\" name=\"description\"  class=\"form-control\"  required\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003cbutton type=\"submit\" class=\"btn btn-success\"\u003eFeed it\u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/form\u003e\n                \u003cdiv class=\"row\" id=\"feeds\"\u003e\n                    {% for doc in all_documents  %}\n                    \u003cspan\u003e\n                        \u003ch2\u003e{{doc.description}}\u003c/h2\u003e\n                        \u003cimg  src=\"{{doc.document}}\"\u003e\n                    \u003c/span\u003e\n                    {% endfor %}\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn this HTML snippet, note that we have included some required libraries such as:\n\n- Bootstrap CSS\n- jQuery JavaScript library\n- Pusher JavaScript library\n\n### Pusher bindings and jQuery snippet\nThat’s it! Now, once a photo gets uploaded, it also gets broadcast and we can listen using our channel to update the feed in realtime.\nBelow is our example jQuery snippet used to handle the file upload as well as Pusher's realtime updates.\n\n```\n    \u003cscript\u003e\n     var files;\n    \n        // Add events\n        $(document).ready(function() {\n            $('input[type=file]').on('change', prepareUpload);\n        })\n    \n    \n        // Grab the files and set them to our variable\n        function prepareUpload(event) {\n            files = event.target.files;\n        }\n    \n        function feed_it() {\n            var data = new FormData();\n            $.each(files, function(key, value) {\n                data.append('document', value);\n            });\n            data.append('description', document.getElementById('description').value);\n    \n            data.append('csrfmiddlewaretoken', document.getElementById('csrf').value);\n            $.post({\n                url: '/push_feed',\n                data: data,\n                processData: false, // Don't process the files\n                contentType: false, // Set content type to false as jQuery will tell the server it's a query string request\n                success: function(data) {\n                    if (data == \"ok\") {\n                        alert('done');\n                        document.getElementById('description').value = '';\n                    }\n                },\n                error: function(error) {\n                    alert('an error occured, please try again later')\n                }\n            });\n            return false;\n        }\n        var pusher = new Pusher('XXX_APP_KEY', {\n            encrypted: true,\n            cluster: 'XXX_APP_CLUSTER',\n            authTransport: 'jsonp',\n            authEndpoint: '/pusher_authentication'\n        });\n        var my_channel = pusher.subscribe('private-a_channel');\n        my_channel.bind(\"an_event\", function(doc) {\n            alert(\"message\");\n            var new_message = `\u003cspan\u003e\n                        \u003ch2\u003e` + doc.description + `\u003c/h2\u003e\n                        \u003cimg  src=\"` + doc.document + `\"\u003e\n                    \u003c/span\u003e`;\n            $('#feeds').prepend(new_message);\n        });\n    \u003c/script\u003e\n```\n\nBelow is an image of what we have built:\n\n![photo-feed-django-demo](//images.contentful.com/1es3ne0caaid/6QkrHv8cakWO0i8QEqkGMQ/d07c08b836918e7bdb4713f5d0384c26/photo-feed-django-demo.gif)\n\n## Conclusion\n\nIn this article, we have covered how to create a realtime photo feed using Django and Pusher as well as passing CSRF tokens in AJAX request using Django.","metaTitle":"Build a photo feed using Django","metaDescription":"Build your own realtime photo feed similar to an Instagram feed using Django, jQuery, and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4CAYv9SfgA4Cy4MMeU8s2m","type":"Entry","createdAt":"2018-02-22T15:03:21.898Z","updatedAt":"2018-02-28T14:41:02.345Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build read receipts using Django","url":"read-receipts-django","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5KlhqILjZSg4wUSqY4Goqg","type":"Entry","createdAt":"2018-02-20T14:39:32.323Z","updatedAt":"2018-10-02T14:31:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Samuel Ogundipe","url":"samuel-ogundipe","email":"ayoogundipe2005@gmail.com","twitter":"https://twitter.com/fucked_down","github":"https://github.com/samuelayo","guestWriter":true}}],"projectRepo":"https://github.com/samuelayo/pusher_django_message_delivery","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"48AytLnko0OKAqMQU2Si8W","type":"Entry","createdAt":"2018-02-12T14:45:47.821Z","updatedAt":"2018-02-12T14:45:47.821Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Django","url":"django","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}}],"reviewDate":"2017-05-30","description":"Create read receipts for your chat application with Django and Vue.js","prerequisite":"A basic understanding of Django and Vue.js is needed to follow this tutorial.","content":"Today, we will make a read receipt framework for your chat app with Django and Pusher.\n\n## Setting up Django\n\nFirst, we need to install the Python Django library if we don't already have it.\nTo install Django, we run:\n\n```\n    pip install django\n```\n\nAfter installing Django, it’s time to create our project. Open up a terminal, and create a new project using the following command:\n\n```\n    django-admin startproject pusher_message\n```\n\nIn the above command, we created a new project called `pusher_message`. The next step will be to create an app inside our new project. To do that, let’s run the following commands:\n\n```\n    //change directory into the pusher_message directory\n    cd pusher_message\n    //create a new app where all our logic would live\n    django-admin startapp message\n```\n\nOnce we are done setting up the new app, we need to tell Django about our new application, so we will go into our `pusher_message\\settings.py` and add the message app to our installed apps as seen below:\n\n```\n    INSTALLED_APPS = [\n        'django.contrib.admin',\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.messages',\n        'django.contrib.staticfiles',\n        'message'\n    ]\n```\n\nAfter doing the above, it’s time for us to run the application and see if all went well.\nIn our terminal shell, we run:\n\n```\n    python manage.py runserver\n```\n\nIf we navigate our browser to `http://localhost:8000`, we should see the following:\n\n![read-receipts-django-first-page](//images.contentful.com/1es3ne0caaid/5NCxXTaq9qG4y2cGmUQKEQ/a320a2c97bef4c948cbf4e76be51b751/read-receipts-django-first-page.png)\n\n## Set up an app on Pusher\n\nAt this point, Django is ready and set up. We now need to set up Pusher, as well as grab our app credentials.\nWe need to sign up on [Pusher](https://pusher.com/signup) and create a new app, and also copy our secret, application key and application id.\n\n![read-receipts-django-create-app](//images.contentful.com/1es3ne0caaid/5DChe3XUIgmIYCSA2Qwym2/cfe9e029cad08826ebca29e432976443/read-receipts-django-create-app.png)\n\nThe next step is to install the required libraries:\n\n```\n    pip install pusher\n```\n\nIn the above bash command, we installed one package, `pusher`. This is the official Pusher library for Python, which we will be using to trigger and send our messages to Pusher.\n\n## Creating our application\n\nFirst, let us create a model class, which will generate our database structure.\nLet's open up `message\\models.py` and replace the content with the following:\n\n```\n    from django.db import models\n    \n    from django.contrib.auth.models import User\n    # Create your models here.\n    class Conversation(models.Model):\n        user = models.ForeignKey(User, on_delete=models.CASCADE)\n        message = models.CharField(blank=True, null=True, max_length=225)\n        status = models.CharField(blank=True, null=True, max_length=225)\n        created_at = models.DateTimeField(auto_now=True)\n```\n\nIn the above block of code, we defined a model called `Conversation`. The conversation table consists of the following fields:\n\n- A field to link the message to the user that created it\n- A field to store the message\n- A field to store the status of the message\n- A filed to store the date and time the message was created\n\n### Running migrations\nWe need to make migrations and also run them, so our database table can be created. To do that, let us run the following in our terminal:\n\n```\n    python manage.py makemigrations\n    \n    python manage.py migrate\n```\n\n### Creating our views\nIn Django, the views do not necessarily refer to the HTML structure of our application. In fact, we can see it as our `Controller` as referred to in some other frameworks.\nLet us open up our `views.py` in our `message` folder and replace the content with the following:\n\n```\n    from django.shortcuts import render\n    from django.contrib.auth.decorators import login_required\n    from django.views.decorators.csrf import csrf_exempt\n    from pusher import Pusher\n    from .models import *\n    from django.http import JsonResponse, HttpResponse\n    \n    # instantiate pusher\n    pusher = Pusher(app_id=u'XXX_APP_ID', key=u'XXX_APP_KEY', secret=u'XXX_APP_SECRET', cluster=u'XXX_APP_CLUSTER')\n    # Create your views here.\n    #add the login required decorator, so the method cannot be accessed withour login\n    @login_required(login_url='login/')\n    def index(request):\n        return render(request,\"chat.html\");\n    \n    #use the csrf_exempt decorator to exempt this function from csrf checks\n    @csrf_exempt\n    def broadcast(request):\n        # collect the message from the post parameters, and save to the database\n        message = Conversation(message=request.POST.get('message', ''), status='', user=request.user);\n        message.save();\n        # create an dictionary from the message instance so we can send only required details to pusher\n        message = {'name': message.user.username, 'status': message.status, 'message': message.message, 'id': message.id}\n        #trigger the message, channel and event to pusher\n        pusher.trigger(u'a_channel', u'an_event', message)\n        # return a json response of the broadcasted message\n        return JsonResponse(message, safe=False)\n    \n    #return all conversations in the database\n    def conversations(request):\n        data = Conversation.objects.all()\n        # loop through the data and create a new list from them. Alternatively, we can serialize the whole object and send the serialized response \n        data = [{'name': person.user.username, 'status': person.status, 'message': person.message, 'id': person.id} for person in data]\n        # return a json response of the broadcasted messgae\n        return JsonResponse(data, safe=False)\n    \n    #use the csrf_exempt decorator to exempt this function from csrf checks\n    @csrf_exempt\n    def delivered(request, id):\n    \n        message = Conversation.objects.get(pk=id);\n        # verify it is not the same user who sent the message that wants to trigger a delivered event\n        if request.user.id != message.user.id:\n            socket_id = request.POST.get('socket_id', '')\n            message.status = 'Delivered';\n            message.save();\n            message = {'name': message.user.username, 'status': message.status, 'message': message.message, 'id': message.id}\n            pusher.trigger(u'a_channel', u'delivered_message', message, socket_id)\n            return HttpResponse('ok');\n        else:\n            return HttpResponse('Awaiting Delivery');\n```\n\nIn the code above, we have defined four main functions which are:\n\n- `index`\n- `broadcast`\n- `conversation`\n- `delivered`\n\nIn the `index` function, we added the login required decorator, and we also passed the login URL argument which does not exist yet, as we will need to create it in the `urls.py` file. Also, we rendered a default template called `chat.html` which we will also create soon.\nIn the `broadcast` function, we retrieved the content of the message being sent, saved it into our database, we finally trigger a Pusher request passing in our message dictionary, as well as a channel and event name.\nIn the `conversations` function, we simply grab all conversations and return them as a JSON response\nFinally, we have the `delivered` function, which is the function which takes care of our read receipt feature.\nIn this function, we get the conversation by the ID supplied to us, we then verify that the user who wants to trigger the delivered event isn’t the user who sent the message in the first place. Also, we pass in the `socket_id` so that Pusher does not broadcast the event back to the person who triggered it. \nThe `socket_id` stands as an identifier for the socket connection that triggered the event.\n\n### Populating the urls.py\nLet us open up our `pusher_message\\urls.py` file and replace with the following:\n\n```\n    \"\"\"pusher_message URL Configuration\n    \n    The `urlpatterns` list routes URLs to views. For more information please see:\n        https://docs.djangoproject.com/en/1.11/topics/http/urls/\n    Examples:\n    Function views\n        1. Add an import:  from my_app import views\n        2. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')\n    Class-based views\n        1. Add an import:  from other_app.views import Home\n        2. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')\n    Including another URLconf\n        1. Import the include() function: from django.conf.urls import url, include\n        2. Add a URL to urlpatterns:  url(r'^blog/', include('blog.urls'))\n    \"\"\"\n    from django.conf.urls import url\n    from django.contrib import admin\n    from django.contrib.auth import views\n    from message.views import *\n    \n    urlpatterns = [\n        url(r'^$', index),\n        url(r'^admin/', admin.site.urls),\n        url(r'^login/$', views.login, {'template_name': 'login.html'}), \n        url(r'^logout/$', views.logout, {'next_page': '/login'}),\n        url(r'^conversation$', broadcast),\n        url(r'^conversations/$', conversations),\n        url(r'^conversations/(?P\u003cid\u003e[-\\w]+)/delivered$',delivered)\n    ]\n```\n\nWhat has changed in this file? We have added 6 new routes to the file. \nWe have defined the entry point, and have assigned it to our `index` function. Next, we defined the login URL, which the `login_required` decorator would try to access to authenticate users. We have used the default `auth` function to handle it but passed in our own custom template for login, which we will create soon.\nNext, we defined the routes for the `conversation` message trigger, all `conversations`, and finally the `delivered` conversation.\n\n### Creating the HTML files\nNow we will need to create two HTML pages, so our application can run smoothly. We have referenced two HTML pages in the course of building the application which are:\n\n- login.html\n- chat.html\n\nLet us create a new folder in our `messages` folder called `templates`.\nNext, we create a file called `login.html` in our `templates` folder and replace it with the following:\n\n```\n    \u003clink href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n      {% if form.errors %}\n    \n    \u003ccenter\u003e\u003cp\u003eYour username and password didn't match. Please try again.\u003c/p\u003e\u003c/center\u003e\n    {% endif %}\n    \n    {% if next %}\n        {% if user.is_authenticated %}\n    \n    \u003ccenter\u003e\u003cp\u003eYour account doesn't have access to this page. To proceed,\n        please login with an account that has access.\u003c/p\u003e\u003c/center\u003e\n        {% else %}\n    \n    \u003ccenter\u003e\u003cp\u003ePlease login to see this page.\u003c/p\u003e\u003c/center\u003e\n        {% endif %}\n    {% endif %}\n    \n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-4 col-md-offset-4\"\u003e\n                \u003cdiv class=\"login-panel panel panel-default\"\u003e\n                    \u003cdiv class=\"panel-heading\"\u003e\n                        \u003ch3 class=\"panel-title\"\u003ePlease Sign In\u003c/h3\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"panel-body\"\u003e\n                        \u003cform method=\"post\" action=\"\"\u003e\n    {% csrf_token %}\n    \n                            \u003cp class=\"bs-component\"\u003e\n                                \u003ctable\u003e\n                                    \u003ctr\u003e\n                                        \u003ctd\u003e{{ form.username.label_tag }}\u003c/td\u003e\n                                        \u003ctd\u003e{{ form.username }}\u003c/td\u003e\n                                    \u003c/tr\u003e\n                                    \u003ctr\u003e\n                                        \u003ctd\u003e{{ form.password.label_tag }}\u003c/td\u003e\n                                        \u003ctd\u003e{{ form.password }}\u003c/td\u003e\n                                    \u003c/tr\u003e\n                                \u003c/table\u003e\n                            \u003c/p\u003e\n                            \u003cp class=\"bs-component\"\u003e\n                                \u003ccenter\u003e\n                                    \u003cinput class=\"btn btn-success btn-sm\" type=\"submit\" value=\"login\" /\u003e\n                                \u003c/center\u003e\n                            \u003c/p\u003e\n                            \u003cinput type=\"hidden\" name=\"next\" value=\"{{ next }}\" /\u003e\n                        \u003c/form\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\nNext, let us create the `chat.html` file and replace it with the following:\n\n     \u003chtml\u003e\n        \u003chead\u003e\n            \u003ctitle\u003e\n            \u003c/title\u003e\n        \u003c/head\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"/\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.3.2/vue.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.1/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"//js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cstyle\u003e\n            .chat\n    {\n        list-style: none;\n        margin: 0;\n        padding: 0;\n    }\n    \n    .chat li\n    {\n        margin-bottom: 10px;\n        padding-bottom: 5px;\n        border-bottom: 1px dotted #B3A9A9;\n    }\n    \n    .chat li.left .chat-body\n    {\n        margin-left: 60px;\n    }\n    \n    .chat li.right .chat-body\n    {\n        margin-right: 60px;\n    }\n    \n    \n    .chat li .chat-body p\n    {\n        margin: 0;\n        color: #777777;\n    }\n    \n    .panel .slidedown .glyphicon, .chat .glyphicon\n    {\n        margin-right: 5px;\n    }\n    \n    .panel-body\n    {\n        overflow-y: scroll;\n        height: 250px;\n    }\n    \n    ::-webkit-scrollbar-track\n    {\n        -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\n        background-color: #F5F5F5;\n    }\n    \n    ::-webkit-scrollbar\n    {\n        width: 12px;\n        background-color: #F5F5F5;\n    }\n    \n    ::-webkit-scrollbar-thumb\n    {\n        -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);\n        background-color: #555;\n    }\n    \n        \u003c/style\u003e\n        \u003cbody\u003e\n            \u003cdiv class=\"container\" id=\"app\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-12\"\u003e\n                \u003cdiv class=\"panel panel-primary\"\u003e\n                    \u003cdiv class=\"panel-heading\"\u003e\n                        \u003cspan class=\"glyphicon glyphicon-comment\"\u003e\u003c/span\u003e Chat\n    \n                    \u003c/div\u003e\n                    \u003cdiv class=\"panel-body\"\u003e\n                        \u003cul class=\"chat\" id=\"chat\" \u003e\n                           \u003cli class=\"left clearfix\" v-for=\"data in conversations\"\u003e\n                            \u003cspan class=\"chat-img pull-left\" \u003e\n                               \u003cimg :src=\"'http://placehold.it/50/55C1E7/fff\u0026amp;text='+data.name\" alt=\"User Avatar\" class=\"img-circle\"/\u003e \n                            \u003c/span\u003e\n                                \u003cdiv class=\"chat-body clearfix\"\u003e\n                                    \u003cdiv class=\"header\"\u003e\n                                        \u003cstrong class=\"primary-font\" v-html=\"data.name\"\u003e  \u003c/strong\u003e \u003csmall class=\"pull-right text-muted\" v-html=\"data.status\"\u003e\u003c/small\u003e\n                                    \u003c/div\u003e\n                                    \u003cp v-html=\"data.message\"\u003e\n    \n                                    \u003c/p\u003e\n                                \u003c/div\u003e\n                            \u003c/li\u003e\n                        \u003c/ul\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"panel-footer\"\u003e\n                        \u003cdiv class=\"input-group\"\u003e\n                            \u003cinput id=\"btn-input\" v-model=\"message\" class=\"form-control input-sm\" placeholder=\"Type your message here...\" type=\"text\"\u003e\n                            \u003cspan class=\"input-group-btn\"\u003e\n                                \u003cbutton class=\"btn btn-warning btn-sm\" id=\"btn-chat\" @click=\"sendMessage()\"\u003e\n                                    Send\u003c/button\u003e\n                            \u003c/span\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\n### Vue component and Pusher bindings\nThat’s it! Now, whenever a new message is delivered, it will be broadcast and we can listen using our channel to update the status in realtime.\nBelow is our Example component written using Vue.js\nPlease note: In the Vue component below, a new function called `**queryParams**` was defined to serialize our POST body so it can be sent as `x-www-form-urlencoded` to the server in place of as a `payload`. We did this because Django cannot handle requests coming in as** `payload`. \n\n```\n    \u003cscript\u003e\n        var pusher = new Pusher('XXX_APP_KEY',{\n          cluster: 'XXX_APP_CLUSTER'\n        });\n        var socketId = null;\n        pusher.connection.bind('connected', function() {\n            socketId = pusher.connection.socket_id;\n    \n        });\n    \n        var my_channel = pusher.subscribe('a_channel');\n        var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } };\n        new Vue({\n            el: \"#app\",\n            data: {\n                    'message': '',\n                    'conversations': []\n            },\n            mounted() {\n                this.getConversations();\n                this.listen();\n    \n            },\n            methods: {\n                sendMessage() {\n                    axios.post('/conversation', this.queryParams({message: this.message}), config)\n                        .then(response =\u003e {\n                            this.message = '';\n                        });\n                },\n                getConversations() {\n                    axios.get('/conversations').then((response) =\u003e {\n                        this.conversations = response.data;\n                        this.readall();\n                    });  \n                },\n                listen() {\n                    my_channel.bind(\"an_event\", (data)=\u003e {\n                        this.conversations.push(data);\n                        axios.post('/conversations/'+ data.id +'/delivered', this.queryParams({socket_id: socketId}));\n                    })\n    \n                     my_channel.bind(\"delivered_message\", (data)=\u003e {\n                        for(var i=0; i \u003c this.conversations.length; i++){\n                            if (this.conversations[i].id == data.id){\n                                this.conversations[i].status = data.status;\n                            }\n                        }\n    \n                    })\n                },\n                readall(){\n    \n                      for(var i=0; i \u003c this.conversations.length; i++){\n                            if(this.conversations[i].status=='Sent'){\n                                axios.post('/conversations/'+ this.conversations[i].id +'/delivered');\n                            }\n                        }\n    \n                },\n                queryParams(source) {\n                    var array = [];\n    \n                    for(var key in source) {\n                        array.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(source[key]));\n                    }\n    \n                    return array.join(\"\u0026\");\n                    }\n            }\n        });\n    \u003c/script\u003e\n```\n\nBelow is the image demonstrating what we have built:\n\n![read-receipts-django-demo](//images.contentful.com/1es3ne0caaid/5auL05NhAkEOWgKUQwgYe0/1f24f2b4fd2df127505cdc1556d2327b/read-receipts-django-demo.gif)\n\n## Conclusion\n\nIn this article, we have covered how to create a read receipt framework using Django and Pusher. We have gone through exempting certain functions from CSRF checks, as well as exempting the broadcaster from receiving an event they triggered.","metaTitle":"Build read receipts using Django","metaDescription":"Create read receipts for your chat application with Django, Vue.js, HTML and integrate realtime features."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3lT5PpBykMQQ2ywok4Wimo","type":"Entry","createdAt":"2018-02-28T12:39:54.078Z","updatedAt":"2018-02-28T12:39:54.078Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a photo feed with Swift and Raspberry Pi","url":"photo-feed-swift-raspberrypi","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/photo-feed-ios-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2017-04-25","description":"Build an iOS photo feed using Swift and Raspberry Pi and enable realtime updates.","prerequisite":"A basic understanding of Swift and Python is needed to follow this tutorial.","content":"The Camera Module is a great accessory for the Raspberry Pi, which itself is a great small device that can be easily hidden, making both ideal for a security camera.\n\nIn this tutorial, we're going to build the iOS photo feed with a Python script to take pictures at a certain interval with the Raspberry Pi camera, then save them to a web server and publish the URL to a Pusher channel so an iOS app can show them in a realtime photo feed.\n\nYou'll need:\n\n- A [Raspberry Pi 3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b/) with the latest [Raspbian](https://www.raspberrypi.org/downloads/raspbian/)\n- A [Raspberry Pi Camera Module](https://www.raspberrypi.org/products/camera-module-v2/)\n- [ngrok](https://ngrok.com/)\n- [Xcode 8](https://developer.apple.com/xcode/)\n \nThe complete source code of the [Python script](https://github.com/eh3rrera/picamera-pusher) and the [iOS app](https://github.com/eh3rrera/photo-feed-ios-pusher) is on Github for reference. This is how the final app will look:\n\n![photo-feed-swift-raspberrypi-demo](//images.contentful.com/1es3ne0caaid/5Vq1JUl1yEYMGaOaOcgY0c/8139e0a4397dbace3e63241d60e8a453/photo-feed-swift-raspberrypi-demo.gif)\n\n![photo-feed-swift-raspberrypi-demo2](//images.contentful.com/1es3ne0caaid/4w8LcsHtMccU6KugyooKKi/eedfb35d4af1b7b237c1dfd87b916134/photo-feed-swift-raspberrypi-demo2.gif)\n\nLet's get started!\n\n## Configuring Raspberry Pi\n\nFirst, with the Pi switched off, you need to connect the Camera Module to the Raspberry Pi's camera port, then start up the Pi and ensure the software is enabled. Here's a great [getting started guide](https://www.raspberrypi.org/learning/getting-started-with-picamera/worksheet/) that shows you how.\n\nNext, make sure your OS is updated by executing the following commands:\n\n``` \nsudo apt-get update\nsudo apt-get upgrade\n```\n\nNext, you need to make sure all the development dependencies we're going to need are installed, by executing:\n\n``` \nsudo apt-get install build-essential libssl-dev python-dev libffi-dev python3-dev python3-pip\n```\n\nIt's a good practice to use [virtualenv](https://virtualenv.pypa.io/en/stable/) so multiple Python projects that have different (and conflicting) requirements can coexist on the same computer. If you don't have already, install it with:\n\n``` \nsudo pip install virtualenv\n```\n\nNow [install a web server](https://www.raspberrypi.org/documentation/remote-access/web-server/). [NGINX](https://www.nginx.com/) is a good option:\n\n``` \nsudo apt-get install nginx\nsudo /etc/init.d/nginx start\n```\n\nWe'll need a directory on the web server to store the pictures. Let's create the directory `photos` under `/var/www/html/` and give it permissions (by changing the owner to the user `pi` (or the user you'll use to run the Python script):\n\n``` \nsudo mkdir /var/www/html/photos\nsudo chown -R pi:pi /var/www/html/photos\n```\n\nFinally, we're going to use [ngrok](https://ngrok.com/) to make our web server publicly available. Download the Linux ARM version:\n\n![photo-feed-swift-raspberrypi-download-ngrok](//images.contentful.com/1es3ne0caaid/4ZdzBGe8py2io04AcWas4Q/46474c8f795d39522803ae65a0482e23/photo-feed-swift-raspberrypi-download-ngrok.png)\n\nIn another terminal window, unzip the file and run it with:\n\n``` \n./ngrok http 80\n```\n\nThis will create a secure tunnel to your Raspberry Pi's port `80` and a screen like the following will be shown:\n\n![photo-feed-swift-raspberrypi-ngrok-console](//images.contentful.com/1es3ne0caaid/5VbCNLnlsc4AisUsSygsAs/0951a25b60f0445b811872e8f4ddf6be/photo-feed-swift-raspberrypi-ngrok-console.png)\n\nCopy the URL with the HTTPS protocol (in this case `https://5e34f8a7.ngrok.io`). This is your public URL and we're going to use it later (we'll use HTTPS because iOS cannot load HTTP resources by default, only HTTPS resources, which is a good practice anyway).\n\n## Setting up Pusher\n\nCreate a free account at [https://pusher.com/signup](https://pusher.com/signup).\n\nWhen you first log in, you'll be asked to enter some configuration options to create your app:\n\n![photo-feed-swift-raspberrypi-create-app](//images.contentful.com/1es3ne0caaid/jEDaODzDGwgS8ay4u4yiu/c12ecba0431d2bb43c610dd7ce0fdbf7/photo-feed-swift-raspberrypi-create-app.png)\n\nEnter a name, choose *iOS* as your frontend tech, and *Python* as your backend tech. This will give you some sample code to get you started:\n\n![photo-feed-swift-raspberrypi-pusher-dashboard](//images.contentful.com/1es3ne0caaid/2MT9uqQ6GQSS0y8os0kmIC/010da43b6f9ad3c2e98d3d04ab6b0b3b/photo-feed-swift-raspberrypi-pusher-dashboard.png)\n\nBut don't worry, this won't lock you into this specific set of technologies as you can always change them. With Pusher, you can use any combination of libraries.\n\nThen go to the *App Keys* tab to copy your App ID, Key, and Secret credentials, we'll need them later.\n\n## The Python script\n\nCreate a new directory, `cd` into it, and create a virtual environment for the project with Python 3:\n\n``` \nvirtualenv -p python3 env\n```\n\nAnd activate it with:\n\n``` \nsource env/bin/activate\n```\n\nWith this, you'll get the Python binary inside `virtualenv` instead of the global one. This way, install the dependencies of the script, [Pusher](https://github.com/pusher/pusher-http-python) and [PiCamera](https://picamera.readthedocs.io):\n\n``` \npip install pusher\npip install picamera\n```\n\nNow, for the script, let's start with this version:\n\n```\nfrom picamera import PiCamera\nfrom time import sleep\n\ncamera = PiCamera()\n\n# If you need to rotate the camera\n# camera.rotation = 180\ncamera.start_preview()\nsleep(30)\ncamera.stop_preview()\n```\n\nSave the file as `camera.py` And run it with:\n\n``` \npython camera.py\n```\n\nThis will show the camera in preview mode (only when a monitor is connected to the Pi) for `30` seconds so you can position the camera the way you want it.\n\nNow for the real script, let's import the dependencies:\n\n```\nfrom picamera import PiCamera\nfrom time import sleep\nfrom datetime import datetime\nfrom pusher import Pusher\n\n...\n```\n\nEnter the time between photos in seconds (in this case `15`), and your Pusher app information:\n\n```\n...\nseconds_between_photos = 15\npusher_app_id = '\u003cINSERT_YOUR_PUSHER_APP_ID_HERE\u003e'\npusher_key = '\u003cINSERT_YOUR_PUSHER_APP_KEY_HERE\u003e'\npusher_secret = '\u003cINSERT_YOUR_PUSHER_APP_SECRET_HERE\u003e'\nhostname =  '\u003cINSERT_YOUR_NGROK_HTTPS_URL_HERE\u003e'\n\ncamera = PiCamera()\n\npusher = Pusher(pusher_app_id, pusher_key, pusher_secret)\n```\n\nSet the resolution of the camera (in this case `640x480` will do):\n\n```\n...\n# If you need to rotate the camera\n# camera.rotation = 180\ncamera.resolution = (640, 480)\n```\n\nAnd in an infinite loop, format the actual time as a string (like `03-23-2017-11:18:55`) to annotate the picture and use it as the name of the image file so we can publish the URL to Pusher:\n\n```\n...\n\nwhile True:\n    try:\n        sleep(seconds_between_photos)\n        date = datetime.now().strftime('%m-%d-%Y-%H:%M:%S')\n        camera.annotate_text = date\n        filename = '/photos/' + date + '.jpg'\n        camera.capture('/var/www/html' + filename)\n        url = hostname + filename\n        pusher.trigger('photos', 'new_photo', {'url': url})\n    except Exception as e:\n        print ('Error:', e)\n```\nIn this simple implementation, we'll catch any error (like timeouts if the Pi lost the network connectivity) so the script couldn't be stopped when one is thrown.\n\nAnd that's it. If you run it, you should see images files being saved in the `/var/www/html/photos` directory.\n\n## Setting up the Xcode project\n\nOpen Xcode and create a *Single View Application*:\n\n![photo-feed-swift-raspberrypi-new-project](//images.contentful.com/1es3ne0caaid/3U67MAZI2Am6wM8mO2QEQQ/213dea75b23f44069747d6b919d4af6e/photo-feed-swift-raspberrypi-new-project.png)\n\nGive it a name, choose *Swift* as the language and *Universal* in the *Devices* option:\n\n![photo-feed-swift-raspberrypi-app-options](//images.contentful.com/1es3ne0caaid/3lQZ2A1Z3q0aegSSoYKOOK/7d7b1a6386b96c79b87674cd7d923113/photo-feed-swift-raspberrypi-app-options.png)\n\nNow, we're going to install the project dependencies with [CocoaPods](https://cocoapods.org/). Close your Xcode project, and in a terminal window go to the top-level directory of your project and execute this command:\n\n``` \npod init\n```\nThis will create a text file named `Podfile` with some defaults, open it and add as dependencies `PusherSwift` and `Kingfisher` (a library for downloading and caching images from the web). It should look like this:\n\n```\n# Uncomment the next line to define a global platform for your project\n# platform :ios, '9.0'\n\ntarget 'photo-feed-ios' do\n  # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\n  use_frameworks!\n\n  # Pods for twitter_feed_pusher\n  pod 'PusherSwift'\n  pod 'Kingfisher'\n\nend\n```\nNow you can install the dependencies in your project with:\n\n``` \npod install\n```\nAnd from now on, make sure to open the generated Xcode workspace instead of the project file:\n\n``` \nopen photo-feed-ios.xcworkspace\n```\nFor apps like this, creating everything programmatically is easier, so we won't use the *Interface Builder* or the storyboard file that Xcode creates (`Main.storyboard`).\n\n## The iOS app\n\nLet's start by opening the file `ViewController.swift` that Xcode created for us and change it so it extends from a `UITableViewController`:\n\n```\nimport UIKit\n\nclass ViewController: UITableViewController {\n    ...\n}\n```\nNow open `AppDelegate.swift` to manually create the window in which our app is going to live and set an instance of the `ViewController` as the `rootViewController` of the window:\n\n```\nimport UIKit\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n\n    func application(_ application: UIApplication, \n        didFinishLaunchingWithOptions launchOptions: \n        [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n\n        // Override point for customization after application launch.\n        window = UIWindow(frame: UIScreen.main.bounds)\n        window?.makeKeyAndVisible()\n\n        window?.rootViewController = \n            UINavigationController(rootViewController: ViewController())\n\n        return true\n    }\n\n    ...\n}\n```\nIf you run the app at this point, you should see something like the following:\n\n![photo-feed-swift-raspberrypi-first-run](//images.contentful.com/1es3ne0caaid/1ahpPGhZh4sEyYAosECSay/f9326d0c53bcb42bcead99a195281fe2/photo-feed-swift-raspberrypi-first-run.png)\n\nAll right, let's create a new Swift file, `Photo.swift`, to create a structure that will hold the photo's information (right now just its URL):\n\n```\nimport Foundation\n\nstruct Photo {\n    let url: String\n}\n```\nWe're going to need a custom cell class for our `UITableView`. Once again, create a new Swift file, this time with the name `PhotoCell.swift` and the following content:\n\n```\nimport UIKit\n\nclass PhotoCell : UITableViewCell {\n\n    override init(style: UITableViewCellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n}\n```\nThe layout for the cell is going to have only a `UIImageView` for the photo, which will be scaled to fill the entire cell:\n\n```\nclass PhotoCell : UITableViewCell {\n\n    let photoImage: UIImageView = {\n        let imageView = UIImageView()\n        imageView.clipsToBounds = true\n        imageView.contentMode = UIViewContentMode.scaleToFill\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n\n        return imageView\n    }()\n\n    ...\n}\n```\n\nIt's important to set `translatesAutoresizingMaskIntoConstraints` to `false` because we're going to use the [NSLayoutAnchor API](https://developer.apple.com/reference/uikit/nslayoutanchor) to position the view:\n\n```\nclass PhotoCell : UITableViewCell {\n\n    ...\n\n    override init(style: UITableViewCellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n\n        addSubview(photoImage)\n\n        photoImage.topAnchor.constraint(equalTo: self.topAnchor).isActive = true\n        photoImage.leftAnchor.constraint(equalTo: self.leftAnchor).isActive = true\n        photoImage.bottomAnchor.constraint(equalTo: self.bottomAnchor).isActive = true\n        photoImage.rightAnchor.constraint(equalTo: self.rightAnchor).isActive = true\n\n        selectionStyle = .none\n    }\n\n    ...\n}\n```\nThe above code will add the `UIImageView` to the cell and make it fill the whole cell space and disable the selection of the cell.\n\nNow let's add a property observer so when an object of type `Photo` is set on this cell, we can set the image (don't forget to import `Kingfisher`):\n\n```\nimport UIKit\nimport Kingfisher\n\nclass PhotoCell : UITableViewCell {\n\n    var photo: Any? {\n        didSet {\n            guard let p = photo as? Photo else { return }\n\n            // Create the image URL and set it with Kingfisher\n            let imageUrl = URL(string: p.url)\n            photoImage.kf.indicatorType = .activity\n            photoImage.kf.setImage(\n                with: imageUrl,\n                placeholder: #imageLiteral(resourceName: \"placeholder\"),\n                options: [.transition(.fade(0.5))]\n            )\n        }\n    }\n\n    ...\n}\n```\n\nWith the above code, Kingfisher will show an activity indicator while downloading the image, showing a placeholder image in the meantime, and adding a fade transition when it's time to show the image. In the [GitHub app](https://github.com/eh3rrera/photo-feed-ios-pusher), you can find in `Assets.xcassets` the logo of Pusher as the placeholder image, but you can add your own image.\n\nNow, in the `ViewController` class, let's create a cell identifier, an array to hold our photos and the Pusher object:\n\n```\nimport UIKit\nimport PusherSwift\n\nclass ViewController: UITableViewController {\n\n    let cellId = \"cellId\"\n    var photos= [Photo]()\n    var pusher: Pusher! = nil\n\n    ...\n}\n```\n\nInside the `viewDidLoad` method, let's give our app a title and register our custom cell:\n\n```\nclass ViewController: UITableViewController {\n\n    ...\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        navigationItem.title = \"Pusher Photo Feed\"\n        tableView.register(PhotoCell.self,\n            forCellReuseIdentifier: cellId)\n    }\n}\n```\n\nWe will listen to new images by setting up Pusher passing our app key, subscribing to the channel `photos` and binding the event `new_photo` in the following way:\n\n```\nclass ViewController: UITableViewController {\n\n    ...\n\n    override func viewDidLoad() {\n\n        ...\n\n    pusher = Pusher(\n            key: \"\u003cINSERT_YOUR_PUSHER_KEY_HERE\u003e\"\n        )\n\n        let channel = pusher.subscribe(\"photos\")\n\n        let _ = channel.bind(eventName: \"new_photo\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String : AnyObject] {\n                let url = data[\"url\"] as! String\n\n                let photo = Photo(url: url)\n\n                self.photos.insert(photo, at: self.photos.startIndex)\n\n                let indexPath = IndexPath(row: 0, section: 0)\n                self.tableView.insertRows(at: [indexPath], \n                    with: UITableViewRowAnimation.automatic)\n                self.tableView.scrollToRow(at: indexPath, \n                    at: UITableViewScrollPosition.none, animated: true)\n            }\n        })\n\n        pusher.connect()\n    }\n}\n```\n\nThis way, when a new photo comes in, we can extract its URL, create a `Photo` instance and insert it in the array and in the `tableView` to display it.\n\nOf course, for this to happen, we also need to implement the following methods so the `tableView` knows how many items it has to display and in which cell:\n\n```\nclass ViewController: UITableViewController {\n\n    ...\n\n    override func tableView(_ tableView: UITableView,\n            numberOfRowsInSection section: Int) -\u003e Int {\n        return photos.count\n    }\n\n    override func tableView(_ tableView: UITableView,\n            cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n        let cell = tableView.dequeueReusableCell(\n            withIdentifier: cellId, for: indexPath) as! PhotoCell\n\n        // At this point, the didSet block will set up the cell's views\n        cell.photo = photos[indexPath.item]\n\n        return cell;\n    }\n}\n```\n\nFinally, we need to give the cells a height (of `480`) with the following method:\n\n```\nclass ViewController: UITableViewController {\n\n    ...\n\n    override func tableView(_ tableView: UITableView, \n        heightForRowAt indexPath: IndexPath) -\u003e CGFloat {\n        return 480\n    }\n}\n```\n\nAnd we're done! Now you have an iOS photo feed that is connected to a Raspberry Pi camera and updates in realtime.\n\n## Testing the app\n\nOn the Raspberry Pi, with your virtual environment activated, execute the Python process with (don't forget to start ngrok and replace your HTTPS URL in the script):\n\n``` \npython camera.py\n```\n\nIf you only want to test the app, you can use the [Pusher Debug Console on your dashboard](http://dashboard.pusher.com/) (just remember to use URLs with HTTPS, because iOS cannot load HTTP resources by default):\n\n![photo-feed-swift-raspberrypi-debug-console](//images.contentful.com/1es3ne0caaid/bRl9K3y6f6YEciGCa2cCW/927c12b3e6b6b688424220040b04ac29/photo-feed-swift-raspberrypi-debug-console.png)\n\nWhen a `new_photo` event is received in the Pusher channel, the new photo will come up in the iOS app:\n\n![photo-feed-swift-raspberrypi-demo](//images.contentful.com/1es3ne0caaid/5Vq1JUl1yEYMGaOaOcgY0c/8139e0a4397dbace3e63241d60e8a453/photo-feed-swift-raspberrypi-demo.gif)\n\nIn landscape, the photos look better:\n\n![photo-feed-swift-raspberrypi-demo2](//images.contentful.com/1es3ne0caaid/4w8LcsHtMccU6KugyooKKi/eedfb35d4af1b7b237c1dfd87b916134/photo-feed-swift-raspberrypi-demo2.gif)\n\n## Conclusion\n\nYou can find the final version of the backend [here](https://github.com/eh3rrera/picamera-pusher) and the final version of the iOS app [here](https://github.com/eh3rrera/photo-feed-ios-pusher).\n\nHopefully, this tutorial has shown you how to build a realtime iOS app with Pusher in an easy way. You can improve the app by changing the layout, showing more information or saving it to a database. Or, using [OpenCV](http://opencv.org/), take pictures only with motion is detected by the Raspberry Pi camera.\n\nRemember that your forever free Pusher account includes 100 connections, unlimited channels, 200k daily messages, SSL protection, and there are more [features](https://pusher.com/features) than just Pub/Sub Messaging. [Sign up here](https://pusher.com/signup).\n\n## Further reading\n\n- [Pusher Swift client](https://github.com/pusher/pusher-websocket-swift)\n- [Installing Raspbian with NOOBS](https://www.raspberrypi.org/learning/noobs-install/)\n- [Apache vs Nginx: Practical Considerations](https://www.digitalocean.com/community/tutorials/apache-vs-nginx-practical-considerations)\n- [Setting up a web server on a Raspberry Pi](https://www.raspberrypi.org/documentation/remote-access/web-server/)\n- [A non-magical introduction to Pip and Virtualenv for Python beginners](https://www.dabapps.com/blog/introduction-to-pip-and-virtualenv-python/)\n- [Getting started with picamera](https://www.raspberrypi.org/learning/getting-started-with-picamera/)\n- [Kingfisher Cheat Sheet](https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet)\n- [Pain Free Constraints with Layout Anchors](http://useyourloaf.com/blog/pain-free-constraints-with-layout-anchors/)\n- [Property observers: didSet](https://www.hackingwithswift.com/read/8/5/property-observers-didset)","metaTitle":"Build a photo feed with Swift and Raspberry Pi","metaDescription":"Build an iOS photo feed with a Python script to take pictures at a certain interval with the Raspberry Pi camera, then save them to a web server and enable realtime updates in the photo feed."}}],"defaultValue":"Channels \u0026 Python","queryType":"tag","pages":2,"route":"/tutorials","query":{"product":"Channels","tag":"Python","page":"2"}}},"page":"/tutorials","query":{"product":"Channels","tag":"Python","page":"2"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Python&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:45 GMT -->
</html>