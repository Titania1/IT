<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Vue.js&page=5 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:55 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">59</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; Vue.js</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials77d6.html?tag=Vue.js" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsa504.html?product=Beams&amp;tag=Vue.js" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; Vue.js"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/ussd-food-app-vue-africas-talking.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">CSS</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a food ordering app using Vue and Africa’s Talking</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">A tutorial showing how to build a USSD food ordering app using Vue.js and Africa&#x27;s Talking.</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-payment-dashboard-stripe.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime payment dashboard with Stripe</h3><p class="css-k12xad e5jrto45">Build a live admin dashboard with Vue.js and Node.js, accepting payments through Stripe.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/cryptocurrency-tracker-vue.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Trading<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a cryptocurrency tracker using Vue.js</h3><p class="css-k12xad e5jrto45">In this tutorial, learn how to build a live cryptocurrency tracking view with Progressive Web Apps, Vue.js and Node.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/pwa-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime PWA using Vue.js</h3><p class="css-k12xad e5jrto45">Build a food delivery tracking progressive web application (PWA) with Vue.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/design-feedback-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a design feedback app using Vue.js</h3><p class="css-k12xad e5jrto45">In this tutorial, we are going to create a realtime design feedback application with Vue.js and Laravel.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-comments-aspnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build realtime comments using ASP.NET</h3><p class="css-k12xad e5jrto45">Build a mini-blog engine with live commentary features using .NET. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app with Laravel</h3><p class="css-k12xad e5jrto45">Build a Laravel chat application using Vue.js and receive realtime messages with Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/game-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Multiplayer Game<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a multiplayer quiz game with Vue.js</h3><p class="css-k12xad e5jrto45">Build a realtime multiplayer trivia game with Vue.js, Node.js and Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-table-aspnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Live Table<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">C#<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime table using ASP.NET</h3><p class="css-k12xad e5jrto45">Create a realtime table of movie titles, which updates once there is new data with ASP.NET and Pusher.
</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials1122.html?product=Channels&amp;tag=Vue.js&amp;page=4" class="css-5s6711 edg0byb1">Prev</a><a href="tutorialse965.html?product=Channels&amp;tag=Vue.js&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialsb43a.html?product=Channels&amp;tag=Vue.js&amp;page=3" class="css-za1ua3 edg0byb1">3</a><a href="tutorials1122.html?product=Channels&amp;tag=Vue.js&amp;page=4" class="css-za1ua3 edg0byb1">4</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsc497.html?product=Channels&amp;tag=Vue.js&amp;page=5" class="css-2wakph edg0byb1">5</a><a href="tutorialscb88.html?product=Channels&amp;tag=Vue.js&amp;page=6" class="css-5s6711 edg0byb1">6</a><a href="tutorials99ad.html?product=Channels&amp;tag=Vue.js&amp;page=7" class="css-5s6711 edg0byb1">7</a><a href="tutorialscb88.html?product=Channels&amp;tag=Vue.js&amp;page=6" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":59,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"24wosbVzVKuYmKqgQEooGk","type":"Entry","createdAt":"2018-03-08T13:10:20.439Z","updatedAt":"2020-06-19T13:29:57.977Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a food ordering app using Vue and Africa’s Talking","url":"ussd-food-app-vue-africas-talking","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/Foodigo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}}],"reviewDate":"2018-03-08","description":"A tutorial showing how to build a USSD food ordering app using Vue.js and Africa's Talking.","prerequisite":"Some knowledge of HTML, CSS and JavaScript is required. Knowledge of Vue.js would be an advantage, but not essential.","content":"Thoughts on building for the next billion users? Development systems are springing up by the day with progressive web apps taking center stage and optimization being the focal point of quality testing teams. We live in a world where using digital services almost always requires the Internet. Is this scalable to even remote parts of the world where internet connectivity is next to nothing? \n\nUSSD (Unstructured Supplementary Service Data) communication technology used mostly by telecommunication companies offers much more promise than just interaction with your telco providers. In this post, we will be building a basic food-ordering App using Vue and implementing USSD interaction via Africa’s Talking(AT).\n\nThe app consists of two parts: the USSD app for the user and the web dashboard for the App owner. Africa’s Talkin (AT) will be used to build the USSD app and Vue for the app dashboard. Pusher will be used to implement the real-time update of our dashboard. You can use services like Twilio or txtNation as alternative to AT if you can’t access the AT services.\n\nHere is a quick look at what we will be building:\n\n![App preview](//images.contentful.com/1es3ne0caaid/wFKWxF63YG4gissiK28yo/134aea33728d4292581236f8790cfcdb/ussd-food-ordering-preview.gif)\n\n## Prerequisites\n\nBuilding this app is beginner friendly. However, knowledge of HTML, CSS, and JavaScript is required. Using Pusher and Africa’s Talking is pretty much seamless. Vue.js will be used to develop the user interface and its knowledge is not required but is of added advantage. \n\n## Installation\n\nThis is a Node.js app so it requires you have node and its corresponding package manager, NPM. Install them from [here](https://nodejs.org/en/) if you haven’t, otherwise verify installation from your command line with:\n\n```\n    node -v \u0026\u0026 npm -v\n```\n\nCreate a folder anywhere on your machine, this will be the root directory of your app. Start a new project by running this on your command line:\n\n```\n    npm init\n```\n\nRun through the setup instructions filling out key app details like name, author, and license.\n\n\n\u003e Note that the entry point specified during npm init (default:index.js), this is the file in which server configuration will take place.\n\nOnce this is completed, you have a new node project with a package.json file but otherwise pretty much empty. Let’s install the required tools and dependencies via npm. Dependencies required are:\n\n- Express - A node framework for developing servers.\n- Cors - Enables cross-origin requests.\n- Pusher - This is the node package for pusher.\n- Body-parser - Parses the req.body object. \n- Africastalking - The node package for Africa’s talking.\n\nInstall these locally with:\n\n```\n    npm install --save express cors pusher body-parser africastalking\n```\n\nDuring development, Vue will be imported via a CDN so don’t worry if you don’t see it being installed yet. Let’s get to configuring our server since this will serve our files.\n\nWe will proceed to create an account on [Pusher](https://pusher.com/) and [Africa’s Talking](https://account.africastalking.com).  \n\nCreate a new Pusher app with whichever name you choose. Note the AppID, key, and cluster issued. Do the same with Africa’s Talking, create a new USSD application and obtain an API key and the username of the app. For this app, we will be utilizing the AT sandbox to test our app, so there is no need to apply for a service code.\n\nTo keep credentials safe, we will create a new module to house these credentials.\nIn the root directory create a new file called cred.js and setup the module like this:\n\n``` javascript\n    module.exports = {\n     AT:{\n         apiKey: 'xxxxxxxxxxxxxxxxxxxxxxx',\n         username: 'xxxxxxx',\n         format: 'json'\n     },\n     pusher:{\n        appId: 'xxxxxx',\n        key: 'xxxxxxxxxxxxxxxx',\n        secret: \"xxxxxxxxxxxxxx\",\n        cluster: \"xx\",\n        encrypted: true\n     }\n    }\n```\n\nThe credentials are stored in an object and will be used later in our app.\n\n## Build the app server\n\nIn the root directory of the project, create a new file called server.js. In this file we will configure our server. First, import all required dependencies for the app and assign them to variables with:\n\n``` javascript\n    var Pusher = require('pusher')\n    var credentials = require('./cred')\n    var africastalking = require('africastalking')(credentials.AT)\n    var cors = require('cors')\n    var bodyParser = require('body-parser')\n    var express = require('express')\n    var path = require('path')\n```\n\nSince we will be using an express server, configure express by first creating a new instance assigned to a variable:\n\n``` javascript\n    var app = express()\n    var port = 3000\n```\n\nWe simply assigned the port number of the app to 3000. This is the port on the local server which the app will be available.\n\nLet’s use other imported modules like cors and bodyParser:\n\n``` javascript\n    app.use(cors())\n    app.use(bodyParser.urlencoded({extended:false}))\n    app.use(bodyParser.json())\n```\n\nNext, create an endpoint for your homepage using express with:\n\n``` javascript\n    app.get('/', function(req, res){\n        res.sendFile(path.join(__dirname + \"/index.html\"))\n    })\n```\n\nThe index.html file hasn’t been created yet, but it would be served nonetheless when created.\nWe would require other static files such as CSS and JS in our HTML script, use the `express.static()` method to specify the directory of the files. These static files will be in our root directory as well:\n\n``` javascript\n    app.use(express.static(__dirname + '/'))\n```\n\n\u003e It’s not safe to expose static files like this, but we’re just doing this for convenience. If you do this for real, I can make a request to `GET /cred.js` and get your AT and Pusher credentials.\n\nCreate a new Pusher instance and assign it to a variable, just so it is available globally:\n\n``` javascript\n    var pusher = new Pusher(credentials.pusher)\n```\n\nRemember the module we created earlier and imported - cred.js. Pusher requires your app credentials when initializing a pusher instance.\n\nWorking with USSD is pretty simple, we create a POST endpoint and configure responses per users request using IF statements. \n\nAfrica’s talking receives these requests on a USSD code we will set on their service and responds with the messages we will configure. We simply control what is sent to the user and determine what the user receives when they make a new request. AT simply provides the offline channel for the user via USSD.\n\nNext, we will configure AT. First, we create some important global variables with:\n\n``` javascript\n    var webURL = 'http://foodigo.com/menu'\n    var welcomeMsg = `CON Hello and welcome to Foodigo.\n    Have your food delivered to you fast and hot!\n    Please find our menu ${webURL}\n    Enter your name to continue`\n    var orderDetails = {\n        name: \"\",\n        description: \"\",\n        address: \"\",\n        telephone: \"\",\n        open: true\n    }\n    var lastData = \"\";\n```\n\nThe `welcomeMsg` variable is assigned a template literal with the welcome message on our USSD app. The `orderDetails` object is the payload to be sent over to the dashboard via Pusher.\n\nThis is the more interesting part. Create the REST API with a POST request on a `/order` route:\n\n``` javascript\n    app.post('/order', (req,res) =\u003e {\n      console.log(req.body)\n      //configure /order api\n    })\n```\n\nWhen a user makes a request via a certain USSD service code, the body of the request contains useful information about the request which we will process. This information is to be passed to variables as required. The properties in the `req.body` object are: \n\n\n- sessionID - For every time a user dials a USSD code, a session is opened. The sessionId is a unique ID assigned to each session opened by a user.\n- serviceCode - This is the service code dialed by a user, also note that multiple service codes can be assigned to an app.\n- phoneNumber - The telephone number of the user is also sent through the request, You can create a database from this and play around with the data.\n- text - This is the plain text inputted by the user in the text field. Initially, when a user initiates a session, text is empty.\n\nIn the `/order` API, assign the various `req.body` parameters to variables. For beginners understanding, do this:\n\n``` javascript\n    ...\n    var sessionId = req.body.sessionId\n    var serviceCode = req.body.serviceCode\n    var phoneNumber = req.body.phoneNumber\n    var text = req.body.text\n    var textValue = text.split('*').length\n    ...\n```\n\nWhat about the response from our server to the client? Let’s call that `message`, create the variable and assign it an empty value. To understand the current state of response from the server, we use some simple logic to split the response carrying user information. The request (`text`) comes in plain text with user inputs separated by asterisks (*). Subsequent inputs are concatenated to the existing request and each is separated by an asterisk. By splitting `text` with the asterisks, the length of the resulting array would better inform us on how many requests has been made by the user.\n\n``` javascript\n    var message = \"\"\n```\n\nNext, we define the logic with which AT will process user requests and responses using `if` statements. In the `/order` endpoint include this logic:\n\n``` javascript\n    ...\n    if(text === ''){\n        message = welcomeMsg\n    }else if(textValue === 1){\n        message = \"CON What do you want to eat?\"\n        orderDetails.name = text;\n    }else if(textValue === 2){\n        message = \"CON Where do we deliver it?\"\n        orderDetails.description = text.split('*')[1];\n    }else if(textValue === 3){\n        message = \"CON What's your telephone number?\"\n        orderDetails.address = text.split('*')[2];\n    }else if(textValue === 4){\n        message = `CON Would you like to place this order?\n        1. Yes\n        2. No`\n        lastData = text.split('*')[3];\n    }else{\n        message = `END Thanks for your order\n        Enjoy your meal in advance`\n        orderDetails.telephone = lastData   \n    }\n    ...\n```\n\nIf statements simply serve our purpose here. In the block above it simply means once a user makes the initial request by dialling the service code the response should be the `welcomeMsg` variable defined previously. For the sake of simplicity of this demo, we wouldn’t be considering edge cases and responses to match the request. Once a response is received as `text`, it is manipulated and assigned to a parameter in the `orderDetails` object.\n\nMessages begin with `CON`, this shows the beginning of the response and the session as well and to terminate the session the response starts with `END`.\n\nStill in the `/order` endpoint, specify the response with:\n\n``` javascript\n    ...\n    res.contentType('text/plain');\n    res.send(message, 200);\n    ...\n```\n\nNow that we have a payload in `orderDetails`, Pusher is to handle the delivery of this payload to the client dashboard. In the `/order`  endpoint, open a new Pusher channel and event with:\n\n``` javascript\n    ...\n    if(orderDetails.name != \"\" \u0026\u0026 orderDetails.address != ''\u0026\u0026 orderDetails.description != '' \u0026\u0026 orderDetails.telephone != ''){\n      pusher.trigger('orders', 'customerOrder', orderDetails)\n      } \n    ...  \n```\n\nWe created a simple test to ensure that all the data is collected in `orderDetails` before it is sent through Pusher. Use the pusher `trigger()` method to open a new pusher channel, in this case, `orders`. A new event `customerOrder` is created and `orderDetails` is passed as the payload.\n\nLastly, reset `orderDetails` to its default state of empty values:\n\n``` javascript\n    if(orderDetails.telephone != ''){\n      //reset data\n      orderDetails.name= \"\"\n      orderDetails.description= \"\"\n      orderDetails.address= \"\"\n      orderDetails.telephone= \"\"\n    }\n```\n\nNext, set up the listening port of the app with:\n\n``` javascript\n    app.listen(port, (err,res) =\u003e {\n    if(err) throw err;\n    console.log('listening on port ' + port)\n    })\n```\n\nRun the server with:\n\n```\n    node server.js\n```\n\nYou will see `listening on port 3000` in the command line, but on opening `localhost:3000` in your browser an error is thrown. This is fine and it is because we haven’t created the `index.html` file to be served by the server. So far we have created the app’s server but, before we test, let’s build out the app dashboard.\n\n## Build the dashboard\n\nWhile we have our server ready to handle client orders, we need a dashboard to display these orders and we will accomplish this using Vue.js.\n\nVue is a lightweight progressive JavaScript framework for building interactive user interfaces. In the root directory of your project, create the HTML, CSS and JavaScript Files required.\n\nIn index.html, create a HTML5 script with:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"index.css\"\u003e\n        \u003ctitle\u003eReal-time food ordering app dashboard\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv class=\"container-fluid\" id=\"root\"\u003e\n    \u003c!-- Body of document --\u003e\n        \u003c/div\u003e\n    \u003c!-- Scripts --\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.4.4/vue.js\"\u003e\u003c/script\u003e   \n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e \n        \u003cscript src=\"index.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNote the imported scripts via a CDN - Vue, Pusher. We also imported our external JavaScript file. Bootstrap is also used for styling and is imported from a CDN as seen in the head tag of the script.\n\nFor the simplicity of this demo, our orders will be in the form of cards (a presentation UI widget) and have a close button to close any open orders.\n\nLet’s configure Vue in the index.js file created earlier. \n\n``` javascript\n    new Vue({\n        el: \"#root\",\n        data:{\n            title: \"Foodigo Restaurant Dashboard\",\n            orders:[\n                {name:\"Chris Nwamba\", description:\"Rice and Ofe-Akwu\", address:\"Lekki\", telephone:\"08082092001\", open:true},\n                {name:\"William Imoh\", description:\"Rice and Chicken\", address:\"Amuwo\", telephone:\"08082818700\", open:true},\n                {name:\"Mary-Anne Unoka\", description:\"Yam and Egg Sauce\", address:\"Satellite Town\", telephone:\"08083872501\", open:true},\n                {name:\"Ralph Ugwu\", description:\"Rice and Salad\", address:\"Nsukka\", telephone:\"08082983021\", open:true},\n                {name:\"BLAQLSG Imoh\", description:\"Cake and Sprite\", address:\"Ije-Ododo\", telephone:\"08082869830\", open:true}\n            ]\n        },\n        created(){\n            var pusher = new Pusher('PusherKey',{\n                cluster:'PusherCluster',\n                encrypted:true\n            })\n            var channel = pusher.subscribe('orders')\n            channel.bind('customerOrder', (data) =\u003e {\n                console.log(data)\n                this.orders.push(data)\n            })\n        }\n    })\n```\n\nIn the script above we created a new Vue instance and mounted it on the DOM element with an ID of `root`. Basically, state in Vue is managed by the `data` property. We will manage our app state here as well as other data which we would like to pass to the DOM using Vue. For this app, we created placeholder data in the `orders` array consisting of the `name`, `description`, `address`, `telephone` and the order status of either `true` or `false`. \n\nWe used a Vue lifecycle method called the created method to setup pusher. The `created()` method is called once the DOM is fully loaded. In it, we configure a pusher instance with the pusher key obtained during account creation. \n\nNext, using the `subscribe()` method, we subscribed to the channel we created on our server - `orders`. Afterwards, the event created in the server is bound to the channel and it takes a callback function. This function receives a parameter which is the payload sent though pusher, in this case, `orderDetails`.\n\nLastly, we push this data into the orders array. How about if we want to close an order? We will create a method to handle that next.\n\nClosing an order requires the creation of a method to handle the action. So once the method is triggered, the state of the `open` property of the order is changed to `false`. \n\nIn the Vue instance, after the `created()` method, create a `methods` object and update it like this:\n\n``` javascript\n    ...\n    methods:{\n        // close completed order\n        close(orderToClose){\n            if ( confirm('Are you sure you want to close the order?') === true){\n                this.orders = this.orders.map(order =\u003e {\n                    if(order.name !== orderToClose.name \u0026\u0026 order.description !== orderToClose.description){\n                        return order;\n                    }\n                    const change = Object.assign(order, {open: !order.open})\n                    return change;\n                })\n            } \n        }\n    }\n    ...    \n```\n\nA `confirm` action is required to ascertain that the order is to be closed and we simply use a `map()` method to run through the available orders until we find an order that matches the parameter of the particular order to be closed, at which point the state of its `open` property is inverted.\n\nNow we have our data and methods all set up, let’s pass them to the DOM.\n\nIn index.html, include this block in the parent `div` with an ID of `root`:\n\n``` html\n    ...\n    \u003cheader\u003e\n        \u003ch1 class=\"text-center\"\u003e{{title}}\u003c/h1\u003e\n        \u003ch4 class=\"text-center\"\u003eRealtime food ordering app via USSD\u003c/h4\u003e\n    \u003c/header\u003e\n    \u003cmain\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv v-for=\"order in orders\" v-if=\"order.open\" class=\"col-md-4 order-card\"\u003e\n                \u003ch3 title=\"Customer Name\"\u003e{{order.name}}\u003c/h3\u003e\n                \u003cspan class=\"closeicon\" @click=\"close(order)\" title=\"Close Order\"\u003eX\u003c/span\u003e\n                \u003cp title=\"Order Description\"\u003e{{order.description}}\u003c/p\u003e\n                \u003cp title=\"Customer Address\"\u003e{{order.address}}\u003c/p\u003e\n                \u003cp title=\"Customer Telephone\"\u003e{{order.telephone}}\u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/main\u003e\n    ...\n```\n\nThe title of our app is set dynamically using Vue. In the div with the class of `order-card`, we simply used the `v-for` directive to iterate over the `orders` array. This is done conditionally using the conditional `v-if` directive. This means only if `order.open` resolves to true will the order be iterable. Each order property is passed to DOM elements using mustache-like syntax.\n\nStyle the app in index.css with:\n\n``` css\n    body{\n        margin: 0px;\n        padding: 0px;\n    }\n    .container-fluid{\n        margin: 0px;\n        padding: 0px;\n        width: 100%;\n    }\n    header{\n        height: 160px;\n        margin: 0px;\n        background-color: rgb(240, 75, 75);\n        padding: 40px;\n    }\n    header h1{\n        margin: 0px;\n    }\n    header h4{\n        color: rgb(92, 91, 91);\n    }\n    .completeOrder{\n        display: none;\n    }\n    .closeicon{\n        font-weight: bold;\n        position: absolute;\n        top: 15px;\n        right: 20px;\n        cursor: pointer;\n    }\n    .closeicon:hover{\n        opacity: 0.5;\n    }\n    .order-card{\n        background-color: antiquewhite;\n        margin: 50px;\n        border-radius: 10px;\n        width: 20%;\n        margin-right:0px;\n        margin-top: 30px;\n        margin-bottom: 0px;\n    }\n```\n\nEverything is all set, start the app server with:\n\n```\n    node server.js\n```\n\n![Dashboard screenshot](//images.contentful.com/1es3ne0caaid/5wXTyLAedOQQOUQYk0cgqy/4fbf09bb6a3b5337ddc79391e5927fcb/ussd-food-ordering-dashboard.png)\n\n\nAll we see is placeholder data. We will use the Africa’s talking sandbox app to test our app. Before that, we need to expose our local server to the internet so we can access our endpoint on the Internet. Ngrok will be used for this. Navigate to the directory with ngrok in the command line and expose your local server with:\n\n```\n    ./ngrok http 3000\n```\n\nOnce the session status on the ngrok dashboard in the command line interface goes to `online`, a forwarding address is issued. This is the temporary web address for our app e.g. https://1654a6cb.ngrok.io.\n\nSince this address is available on the internet, our POST endpoint is https://1654a6cb.ngrok.io/order. This is the endpoint required by Africa’s Talking.\n\nLog-in to [AT](https://africastalking.com/) and go to the sandbox app [here](https://account.africastalking.com/apps/sandbox). In the sandbox, [create a service code](https://account.africastalking.com/apps/sandbox/ussd/channel/create) and pass in the callback URL of your API endpoint.  Our USSD code is now available for use. In the sandbox app, navigate to the ‘launch simulator’ tab and input a valid telephone number to use the USSD feature. All these should be done while your local server is running and ngrok is online.\n\nOnce you dial the USSD code in the simulator, fill out the text fields with the chosen data and, once the responses are complete, the dashboard automatically updates with the new order.\n\n![Finished app running](//images.contentful.com/1es3ne0caaid/6l5vRP8x0sy8A6SGWuwA02/04056eefa7ff0ec521e350b2cf9b7882/ussd-food-ordering-app-running.gif)\n\n## Conclusion\n\nIt’s been awesome building this out. We have seen how to integrate USSD interaction in a node app, and so far I can’t help but imagine the immense potential this poses. Vue was used to build out the front-end and pass data received to the DOM, with Pusher bringing in realtime activity so it is unnecessary to refresh the page to know if an order has arrived. Meanwhile anyone with the USSD code can place an order without having internet connectivity. Feel free to play around with the app, suggest improvements and submit improvements to the source code [here](https://github.com/christiannwamba/Foodigo).","metaTitle":"Build a food ordering app using Vue and Africa’s Talking","metaDescription":"A short tutorial, guiding the reader through building a food ordering app using Vue.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5PGtao88o0iWAGs6kaocMc","type":"Entry","createdAt":"2018-02-28T12:35:03.059Z","updatedAt":"2018-02-28T12:35:03.059Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime payment dashboard with Stripe","url":"realtime-payment-dashboard-stripe","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/realtime-payment-dashboard","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-02-14","description":"Build a live admin dashboard with Vue.js and Node.js, accepting payments through Stripe.","prerequisite":"A basic understanding of Vue.js and Node.js is needed to follow this tutorial.","content":"In this article, we are going to be looking at how to accept payments from a user using [Stripe](https://stripe.com) and displaying sales on an admin dashboard in realtime using*text in italic* [Pusher](https://pusher.com).\n\n## How it works\n\nStripe is used to handle user payments and Pusher adds realtime functionality to our application.\n\n![realtime-payment-dashboard-stripe-demo](//images.contentful.com/1es3ne0caaid/1LkoYsTPec4goWWyAGYaSu/fe6153d7fc28ccc4a5e74c6ffbc4ba33/realtime-payment-dashboard-stripe-demo.gif)\n\n## Dependencies\n\nBefore you begin, you need [Node](https://nodejs.org/) and Node Package Manager( [npm](https://npmjs.com) ) installed on your machine. To verify your installation, please run the following commands on your terminal\n\n```\n    npm -v\n    node -v\n```\n\nIf you get version numbers as your response, then it means that you already have them installed and you are good to go.\n\n## Setting up a Stripe account\n\n[Stripe](https://stripe.com) is a platform that helps process online payment. We will use this to process payments in our store.\n\nTo set up a Stripe account, head over [here](https://dashboard.stripe.com/register) and then fill out the form.\n\n![realtime-payment-dashboard-stripe-signup](//images.contentful.com/1es3ne0caaid/1fQGvRyQIYEsgY2WOMymy0/025045bdb5c077268f01e9226935c3e0/realtime-payment-dashboard-stripe-signup.png)\n\nOnce this step is completed, you will be redirected to your [dashboard](https://dashboard.stripe.com/test/dashboard):\n\n![realtime-payment-dashboard-stripe-dashboard](//images.contentful.com/1es3ne0caaid/3zxY5XAJJYgIYAksWKOkqA/a846796ec876519937068bd59d0c4dfb/realtime-payment-dashboard-stripe-dashboard.png)\n\n![realtime-payment-dashboard-stripe-api-keys](//images.contentful.com/1es3ne0caaid/2fY7XiOmeQYAAiEIEsmqY8/857b3b2dee3d73a20f9c41935bb00ed4/realtime-payment-dashboard-stripe-api-keys.png)\n\nNote your `STRIPE_PUBLISHABLE_KEY` and `STRIPE_SECRET_KEY`. We are going to use them later on as we build our application\n\n## Setting up a Pusher account\n\n[Pusher](https://pusher.com) allows you to incorporate realtime functionality into your applications. To get started with Pusher, head over [here](https://dashboard.pusher.com/accounts/sign_up).\n\nOnce you're signed in, you will be redirected to your dashboard. You then need to create a new app.\nAfter your new app is created, you need to note your `PUSHER_APP_ID`, `PUSHER_API_KEY`, `PUSHER_API_SECRET`, `PUSHER_API_CLUSTER` .\n\nOnce you have these details, you are ready to begin building your app.\n\n**Note** : All source code is available [here](https://github.com/oreHGA/realtime-payment-dashboard) \n\n## Setting up the backend server\n\nTo handle your API calls to Stripe and Pusher, we will use an Express server.\n\n### Install node modules\n\nWe need some node modules that are essential for our application to work:\n\n- cors - to enable cross origin resource sharing on our app\n- express - this is our web server\n- pusher - this package enables us and makes it easy to make calls to pushers api\n- body-parser - used in parsing the contents of a request in a json format\n- multipart - to enable multipart on our app\n- stripe - to allow us communicate seamlessly with our stripe api\n- ejs - this will be our view engine for the user facing side of the application\n\nMake a new directory and change directory into it:\n\n```\n    mkdir realtime-dashboard \u0026\u0026 cd realtime-dashboard\n```\n\nThen initialize a node project and install the node modules:\n\n```\n    # Initialze\n    npm init -y\n    # Install\n    npm install cors express ejs body-parser connect-multiparty pusher stripe --save\n```\n\nYou have now installed all the modules necessary for you to build the project.\n\n### Create our server.js file\n\nNow we need to create a file that will contain the instructions needed for our server to work\nIn your `realtime-dashboard` directory:\n\n```\n    touch server.js\n```\n\nThis is the start up file that will be referenced when your server is running\nIn your server.js file, you need to:\n\n#### Import the node modules\n\n```\n    const cors  = require('cors')\n    const Pusher = require('pusher')\n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const multipart = require('connect-multiparty')\n    const stripe = require('stripe')('STRIPE_API_KEY')\n        [...]\n```\n\nOnce you have imported your node modules, you can then use them freely all through your script.\n\n#### Create your express app\n\nNow we create our express app by adding the following to the `server.js`:\n\n```\n    [...]\n    const app = express()\n    [...]\n```\n\n#### Load the middleware\n\nWe load the middleware in our `server.js` by adding the following:\n\n```\n    ...\n    app.use(cors());\n    app.set('view engine', 'ejs');\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false}));\n    const multipartMiddleware = multipart();\n    ...\n```\n\nHere, we set our app to use `cors` and set the view engine to `ejs`. We also instructed the app the parse the requests in JSON format.\n\n#### Create the Pusher client\n\nWe need to create our Pusher client to enable us to trigger events from our app to a specific channel. Our admin dashboard will also be listening for events on the same channel (more details on this as we progress). \nWe create the client by adding this to our file:\n\n```\n    [...]\n    const pusher = new Pusher({\n        appId: 'PUSHERE_APP_ID',\n        key: 'PUSHER_API_KEY',\n        secret: 'PUSHER_API_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    [...]\n```\n\nOnce this is done, we have successfully created our Pusher client.\n\n#### Create app routes\n\nWe need to decide what the user sees when visiting different parts of our app. Since this is a simple application, we only need two routes for the user facing side:\n\n- Route that loads the checkout page.\n- Route that handles the payment and communicated with the stripe API.\n\nEarlier on, we set our  `view engine` to `ejs` and we will use this here:\n\n```\n    [...]\n    app.get('/', function(req, res){\n        res.render('index');\n    });\n    \n    app.post('/gen-payment', multipartMiddleware, function(req, res){\n        let amount = 500;\n        stripe.customers.create({\n            email: req.body.stripeEmail,\n            source: req.body.stripeToken\n        })\n        .then(customer =\u003e\n            stripe.charges.create({\n                amount,\n                description: 'One camera bought from shop',\n                currency: \"usd\",\n                customer: customer.id\n            })\n        )\n        .then(charge =\u003e {\n            pusher.trigger('sales', 'payment-completed', {\n                \"time\" : new Date().toDateString(),\n                \"value\" : `\\$${charge.amount/100}`,\n                \"message\" : \"payment complete...duh!\",\n                \"description\" : charge.description\n            });\n            console.log( charge );\n            res.render(\"charge\");\n        });\n    });\n    [...]\n```\n\nLet's shed more light on the `gen-payment` route. We accept the `stripeEmail` and the `stripeToken` which would be passed as part of the body in the post request to the route. We then create a new `customer` using the `stripeEmail` and the `stripeToken`. The `create` function returns a `promise` and so once the customer is created, we initiate a new `charge` for the customer. If this charge is successful, i.e we are able to completely charge the customer, then we trigger a `payment-completed` event to the `sales` channel.\n\n#### Assign a port to your app\n\nYou need to choose a port you want your app to run on. You do this by adding this following to your `server.js` file:\n\n```\n    [...]\n    app.listen('3120')\n    [...]\n```\n\nAt this point the backend server is all set up. Now we need to go to the views to see how data is passed to the server.\n\n## Setting up the frontend\n\nCreate a `views` directory. In the views directory create your `index.ejs` and `charge.ejs`:\n\n```\n    mkdir views \u0026\u0026 cd views\n    touch index.ejs charge.ejs\n```\n\nIn our `index.ejs` we need to accept user payment. To make it more secure when handling card information, Stripe has an embedded payment form called [Checkout](https://stripe.com/docs/checkout/tutorial) which we will use to collect user's card data securely. The following is a truncated version of the form that sends data to our server. You can see the complete [code on github](https://github.com/christiannwamba/realtime-payment-dashboard/blob/master/views/index.ejs).\n\n```\n    \u003cform method=\"POST\" action=\"http://localhost:3120/gen-payment\" enctype=\"multipart/form-data\"/\u003e\n        \u003cscript\n            src=\"https://checkout.stripe.com/checkout.js\" class=\"stripe-button\"\n            data-key=\"PUSBLISHABLE_API_KEY\"\n            data-amount=\"500\"\n            data-name=\"Pay OG\"\n            data-description=\"Send money to OG\"\n            data-image=\"https://stripe.com/img/documentation/checkout/marketplace.png\"\n            data-locale=\"auto\"\u003e\n        \u003c/script\u003e\n    \u003c/form\u003e\n```\n\nWe submit the form to the `/gen-payment` route on our server. We include the `checkout.js` script and the following :\n\n- data-key: your publishable `API_KEY` gotten from your [dashboard](https://dashboard.stripe.com/account/apikeys)\n- data-amount: the amount you plan on charging\n- data-name: name of the store\n- data-description: description of your payment\n- data-image: store image\n\nOnce this is sent to the server and the request is completed successfully, we render the `charge.ejs` view to the user telling the use that their payment is complete:\n\n```\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003ctitle\u003eRealtime Payment Dashboard\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e \n        \u003clink rel=\"stylesheet\" href=\"https://codepen.io/drehimself/pen/VvYLmV.css\"\u003e \n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cnav\u003e\n            \u003cdiv class=\"container\"\u003e\n                \u003cul class=\"navbar-left\"\u003e\n                \u003cli\u003e\u003ca href=\"#\"\u003eHome\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#about\"\u003eAbout\u003c/a\u003e\u003c/li\u003e\n                \u003c/ul\u003e\n            \n                \u003cul class=\"navbar-right\"\u003e\n                \u003cli\u003e\u003ca href=\"#\" id=\"cart\"\u003e\u003ci class=\"fa fa-shopping-cart\"\u003e\u003c/i\u003e Cart \u003cspan class=\"badge\"\u003e0\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e \n        \u003c/nav\u003e\n                \n        \u003cscript\u003e\n            alert(\"Payment Complete\");\n        \u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\" integrity=\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\n## Setting up the admin dashboard\n\nWe want our admin dashboard to show completed payments as they are made without having to refresh the page. To do this, we are going to make use of [Vue.js](https://vuejs.org) and [Pusher](https://pusher.com).\n\nBefore we begin, we need to install the `vue-cli` by running the following command:\n\n```\n    npm install -g vue-cli\n```\n\nThis will install it globally on our local machine. To confirm your installation of the `vue-cli` you can run:\n\n```\n    vue --version\n```\n\nIf you get the version number as a result then you're all set!\n\nTo create the `admin` server, run the following command in the `realtime-dashboard` directory:\n\n```\n    vue init webpack admin\n```\n\nThis will ask you a few questions on project name, description, author, etc. then it will create a new Vue project for us with some boilerplate already set up.\n\n## Installing the pusher-js module\n\nWe need to install `pusher-js` module that allows us to use pusher with our vue frontend. To do this, change directory into the admin directory and run the following command:\n\n```\n    npm install -S pusher-js\n```\n\n### Creating the dashboard component\n\nNow we want to create our `dashboard` component:\n\n```\n    cd admin/src/components\n    touch Dashboard.vue\n```\n\nIn the `Dashboard.vue`, we need to import the `pusher.js` module:\n\n```\n    \u003cscript\u003e\n    import Pusher from 'pusher-js'\n    [...]\n```\n\nWe then create some mock payments to populate the dashboard:\n\n```\n    [...]\n    const MOCK_PAYMENTS = [\n      {time : '12th Dec, 2017', description: \"Shoes\", value : \"$5\"},\n      {time : '12th Dec, 2017', description: \"Maga don pay\", value : \"$12\"}\n    ]\n    [...]\n```\n\nNow we describe our component itself:\n\n```\n    [...]\n    export default {\n      name: 'Dashboard',\n      data () {\n        return {\n          payments : MOCK_PAYMENTS\n        }\n      },\n      created () {\n        this.subscribe();\n      },\n      methods: {\n        subscribe () {\n          let pusher = new Pusher('PUSHER_API_KEY', {\n              cluster: 'PUSHER_CLUSTER',\n              encrypted: true\n          });\n          pusher.subscribe('sales');\n          pusher.bind('payment-completed', data =\u003e {\n            this.payments.unshift(data);\n          });\n        }\n      }\n    }\n    \u003c/script\u003e\n    [...]\n```\n\nIn the `subscribe` method above, we subscribe to the `sales` channel and then listen for the `payment-completed` event. When a new `payment-completed` event is broadcast from the backend server on the `sales`, our frontend server picks it up and the adds it to the `payments` array of the component.\n\nThe `Dashboard.vue` also has a template which looks like this:\n\n```\n    [...]\n    \u003ctemplate\u003e\n      \u003cdiv class=\"container-fluid\"\u003e\n        \u003ctable class=\"table table-striped\"\u003e\n          \u003cthead\u003e\n            \u003ctr\u003e\n              \u003ctd\u003eTime\u003c/td\u003e\n              \u003ctd\u003eValue\u003c/td\u003e\n              \u003ctd\u003eDescription\u003c/td\u003e\n            \u003c/tr\u003e\n          \u003c/thead\u003e\n    \n          \u003ctbody\u003e\n            \u003ctr v-for=\"payment in payments\"\u003e\n              \u003ctd\u003e{{ payment.time }}\u003c/td\u003e \n              \u003ctd\u003e{{ payment.value }}\u003c/td\u003e   \n              \u003ctd\u003e{{ payment.description }}\u003c/td\u003e   \n            \u003c/tr\u003e \n          \u003c/tbody\u003e\n        \u003c/table\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    [...]\n```\n\nAnd some scoped css styling: \n\n```\n    \u003cstyle scoped\u003e\n    h1, h2 {\n      font-weight: normal;\n    }\n    ul {\n      list-style-type: none;\n      padding: 0;\n    }\n    li {\n      display: inline-block;\n      margin: 0 10px;\n    }\n    a {\n      color: #42b983;\n    }\n    .table{\n      background-color : white;\n    }\n    \u003c/style\u003e\n```\n\n### Importing the dashboard component in our App.vue\n\nNow that our dashboard component is ready, we need to import it in our `App.vue` so that I would be picked up when the view is being compiled\n\n```\n    [...]\n    import Dashboard from './components/Dashboard'\n    export default {\n      name: 'app',\n      components: {\n        Dashboard\n      }\n    }\n    [...]\n```\n\nOnce this is done, you should be ready to run your frontend server. You can can do this using the command:\n\n```\n    npm run dev\n```\n\nNow you can run the `Dashboard` side-by-side with the `Store` and then see as purchases are being made in realtime:\n\n![realtime-payment-dashboard-stripe-demo](//images.contentful.com/1es3ne0caaid/1LkoYsTPec4goWWyAGYaSu/fe6153d7fc28ccc4a5e74c6ffbc4ba33/realtime-payment-dashboard-stripe-demo.gif)\n\n## Conclusion\n\nWe have seen how to build a realtime payment dashboard using Pusher, Stripe and some Vue.js. There are many more use cases where realtime functionality will give you an edge. A big advantage is that you get to obtain realtime insights as to how users interact with your application.","metaTitle":"Build a realtime payment dashboard with Stripe","metaDescription":"Learn how to build a live payment dashboard with Stripe, Vue.js and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"BYMUj9H49E08Wi8GKWM0E","type":"Entry","createdAt":"2018-02-28T12:21:17.268Z","updatedAt":"2018-06-21T09:23:00.104Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a cryptocurrency tracker using Vue.js","url":"cryptocurrency-tracker-vue","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/sample-vue-pwa-cryptocurrency-watcher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kOTcNAC12gwWEyE6MimMY","type":"Entry","createdAt":"2018-02-12T15:08:28.581Z","updatedAt":"2018-02-26T12:31:12.766Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Trading","url":"trading","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-02-09","description":"In this tutorial, learn how to build a live cryptocurrency tracking view with Progressive Web Apps, Vue.js and Node.js.","prerequisite":"A basic understanding of Vue.js, Node.js and PWA is needed to follow this tutorial.","content":"PWAs (Progressive Web Applications) has already been identified as the future of web applications and the reason is quite obvious. PWAs let you build web apps that are capable of delivering native app-like experiences to users.\n\nFrom sending push notifications, to caching data for offline retrieval, to background sync, Progressive web apps have got you completely covered. PWAs can also ensure that users are engaged and up to date with dynamic data even with very poor network connections.\n\n\u003e Progressive Web App (PWA) is a term used to denote web applications that use the latest web technologies. Progressive Web Apps, also known as Installable Web Apps or Hybrid Web Apps, are regular web pages or websites but can appear to the user like traditional applications or native mobile applications. The application type attempts to combine features offered by most modern browsers with the benefits of mobile experience. - [Wikipedia](https://en.wikipedia.org/wiki/Progressive_web_app)\n\nThis article demonstrates how to build a simple realtime PWA with Vue.js and Pusher.\nVue.js is a Progressive Web Framework for JavaScript, it’s easy to use, and requires relatively little code to produce awesome results.\n\nFor the realtime part of this application, we will be plugging in Pusher’s JavaScript library. Pusher is a realtime engine that makes it easy to add realtime functionalities to applications.\n\n## What we’ll be building\n\nIn this article, we will be building a cryptocurrency application called “KryptoWatcher”. Its function is to display the price updates of three cryptocurrencies (Bitcoin, Ethereum, and Litecoin) in realtime. The price updates will be obtained from the Cryptocompare API.\n\nKryptoWatcher will also be able to travel five days into the past and retrieve coin data for those days. Here’s a visual display of what the final application will look like:\n\n![cryptocurrency-tracker-vue-demo](//images.contentful.com/1es3ne0caaid/70YNXoNPl6cuAOAmS0SW8a/3b318c61b0a19378604ac5607a3201eb/cryptocurrency-tracker-vue-demo.gif)\n\nThe best part of it all is that, after this app runs once, it can run again and display coin data even without an internet connection. This is possible because we’ll build `KryptoWatcher` to cache the coin data on the first run.\n\nLet’s start putting the pieces together.\n\n## Requirements\n\nTo follow along in this tutorial, you will need to have the following:\n- Knowledge of [Vue.js](https://vuejs.org/).\n- [Vue CLI](https://vuejs.org/v2/guide/installation.html#CLI) installed on your machine.\n- [Node and NPM](https://docs.npmjs.com/getting-started/installing-node) installed on your machine.\n- Knowledge of Node.js and Express framework.\n- Knowledge of JavaScript.\n- A Pusher Application. [Create one here](https://pusher.com).\n\nOnce you have requirements we can move on to setting up our application.\n\n## Setting up your Pusher application\n\nCreate a [Pusher account](https://pusher.com/), if you have not already, and then set up your application as seen in the screenshot below.\n\n![cryptocurrency-tracker-vue-create-app](//images.contentful.com/1es3ne0caaid/4dQB7DXuQEyecCwE06AuSy/3d775f17a03b1895f67c6e8b80e65e2f/cryptocurrency-tracker-vue-create-app.png)\n\nWhen you have completed the set up, take note of your Pusher application keys as we will need them later on.\n\n## Setting up our Vue.js PWA application\n\nYou can think of the Vue CLI tool as a lightweight tool for scaffolding Vue.js projects. To start building our application we will use the Vue CLI tool to pull in the [Vue PWA template](https://github.com/vuejs-templates/pwa) that we will be working with. \n\nTo create our application run the following command on your terminal:\n\n```\n    $ vue init pwa krypto-watcher\n```\n\nYou’ll be presented with prompts and a few ‘Yes’ or ‘No’ questions. You can answer most as you see fit, however, for the “Y” or “N” prompts, since we do not require the additional functionalities and features, let’s respond with “N” to all the queries.\n\n\n![cryptocurrency-tracker-vue-project-details](//images.contentful.com/1es3ne0caaid/64HwW3fkUouk2OuuGMkmeC/d7b56613d14ecc9f66bb25b55b3e248a/cryptocurrency-tracker-vue-project-details.png)\n\n\nThe template gives us awesome PWA features out of the box. One such feature is the service worker. The service worker allows our application to work offline.\n\n\n\u003e 💡  A service worker is a script that your browser runs in the background, separate from a web page, opening the door to features that don't need a web page or user interaction.\n\nTo install the dependencies, go to your terminal window and run the following command:\n \n```\n    $ cd krypto-watcher \u0026\u0026 npm install\n```\n\nIf you take a look at your project directory, you will find that it contains a few subfolders: `build`, `config`, `src`, `static`, `test`. Let’s open the `build/webpack.prod.conf.js` file and take a quick peek at the `SWPrecacheWebpackPlugin` object:\n\n```\n    new SWPrecacheWebpackPlugin({\n        cacheId: 'krypto-watcher',\n        filename: 'service-worker.js',\n        staticFileGlobs: ['dist/**/*.{js,html,css}'],\n        minify: true,\n        stripPrefix: 'dist/'\n    })\n```\n\nWhat this does is generate a new service worker when the application is built (with the `npm run build` command).\n\nThe service worker will cache all the files that match the glob expression, for offline access, in `staticFileGlobs` which currently points to a non-existent `dist` folder. The `dist` directory will be created when we build our application.\n\nLet’s start building out our application component by component.\n\n### Vue.js components\n\nSimilar to other modern JavaScript libraries and frameworks like React, Vue allows us to create components when building applications. Components help us keep our application modular and ensure that apps can be separated into reusable modules.\n\nLet’s build `KryptoWatcher` by creating three reusable components:\n\n1. The `Intro` component which will hold the introductory markup and styles for the application.\n2. The `Current` component which will display coin prices in realtime.\n3. The `Previous` component which will display coins prices from ‘x days ago’.\n\nLet us start creating the components. We will be doing them manually however you can always use an NPM package like [this](https://www.npmjs.com/package/vue-generate-component) to make it easier to create components. Create a `src/components` directory and create the following files in the directory: `Intro.vue`, `Current.vue`, and `Previous.vue`.\n\n### The intro component\nThis component has no special functionalities as it just holds the intro markup and styles that will make the app presentable. The HTML goes between the `template` tags and the styles go in the `styles` tag.\n\nIn the `Intro.vue` file paste the following:\n\n```\n    \u003ctemplate\u003e\n      \u003cheader class=\"hero\"\u003e\n        \u003cdiv class=\"bar logo\"\u003e\n          \u003ch3\u003eKryptoWatcher\u003c/h3\u003e\n          \u003cspan class=\"monitor\"\u003e\u003cspan class=\"monitorText\"\u003ereceive updates\u003c/span\u003e\u003c/span\u003e\n        \u003c/div\u003e\n        \u003ch1\u003eRealtime PWA that displays updates on cryptocurrencies\u003c/h1\u003e\n        \u003ch2\u003eBitcoin, Ethereum, Litecoin?\u003c/h2\u003e\n      \u003c/header\u003e\n    \u003c/template\u003e\n    \u003cscript\u003eexport default { name: 'app' }\u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n    header {\n        background: linear-gradient(to bottom right, rgb(0, 193, 131),rgb(50, 72, 95));\n        padding: 1em;\n        margin-bottom: 1em;\n        text-align: center;\n        height: 300px;\n        color: #fff;\n    }\n    header h3 {\n        color: white;\n        font-weight: bold;\n        text-transform: uppercase;\n        float: left;\n    }\n    bar { padding: 20px; height: 48px; }\n    .monitor{\n        text-transform: uppercase;\n        float:right;\n        background-color: rgba(255, 255, 255, 0.2);\n        line-height: 23px;\n        border-radius: 25px;\n        width: 175px;\n        height: 48px;\n        margin: auto;\n    }\n    .monitor:hover, monitorText:hover { cursor:pointer; }\n    .monitorText{\n        width: 104px;\n        height: 23px;\n        font-weight: bold;\n        line-height: 50px;\n        font-size: 14px;\n    }\n    header h1 { padding-top: 80px; width: 80%; margin: auto; }\n    header h2{ padding-top:20px; }\n    \u003c/style\u003e\n```\n\nThat is all for the intro component.\n\n### The current component\nIn the `Current.vue` component, we’ll write some HTML that displays the prices in realtime as they are updated. Open the file and paste the following inside the file:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n        \u003ch2\u003eCurrent prices of coins\u003c/h2\u003e\n        \u003cdiv id=\"btc\" class=\"currency\"\u003e\n          \u003clabel\u003e1 BTC\u003c/label\u003e\n          \u003cp\u003e${{currentCurrency.BTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"eth\"class=\"currency\"\u003e\n          \u003clabel\u003e1 ETH\u003c/label\u003e\n          \u003cp\u003e${{currentCurrency.ETH}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"ltc\"class=\"currency\"\u003e\n          \u003clabel\u003e1 LTC\u003c/label\u003e\n          \u003cp\u003e${{currentCurrency.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nBelow the `template` tags, we will have the `script` tag. This will be where we will handle the scripting of the component. Below the `template` tag in the same file, paste the following code:\n\n```\n    \u003cscript\u003e\n    export default {\n      name: 'app',\n      props: {\n        currentCurrency: { type: Object }\n      }, \n      data () {\n        return {}\n      }\n    }\n    \u003c/script\u003e\n```\n\nThe script above specifies the `props` the `Current` component should expect. It will be getting it, `currentCurrency`, from the parent component `App.vue`.\n\nLastly, below the `script` tag, let’s include the `style` for the component. Paste the following code after the `script` tag:\n\n```\n    \u003cstyle scoped\u003e\n    .currency {\n      border: 1px solid #F5CE00;\n      border-radius: 15px;\n      padding: 2em 0em;\n      display: inline-block;\n      width: 30%;\n    }\n    div p { font-size: 2rem; }\n    h2 { font-size: 1.5em; }\n    \u003c/style\u003e\n```\n\nThat’s all for the `Current` component.\n\n### The previous component\nThis component should display the prices of coins in the past, five days at most. We’ll also display the dates of each of the days.\n\nInside the `Previous.vue` file paste the following code:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n        \u003ch2\u003ePrevious prices of coins\u003c/h2\u003e\n        \u003cdiv id=\"first\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.yesterday.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.yesterday.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.yesterday.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.yesterday.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"second\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.twoDays.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.twoDays.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.twoDays.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.twoDays.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"third\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.threeDays.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.threeDays.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.threeDays.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.threeDays.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"fourth\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.fourDays.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.fourDays.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.fourDays.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.fourDays.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"fifth\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.fiveDays.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.fiveDays.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.fiveDays.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.fiveDays.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nIn the `script` section, we’ll be receiving the `previousCurrency` object from the parent component, `App.vue`. In the same file paste the following code after the `template` tag:\n\n```\n    \u003cscript\u003e\n    export default {\n      name: 'app',\n      props: {\n        previousCurrency: { type: Object }\n      },\n      data () {\n        return {}\n      }\n    }\n    \u003c/script\u003e\n```\n\nLastly, some styles to help things stay pretty:\n\n```\n    \u003cstyle scoped\u003e\n    #first, #second, #third, #fourth, #fifth {\n      border: 1px solid #F5CE00;\n      padding: 2em 0em;\n      max-width: 90%;\n      margin: 3px auto;\n    }\n    #first p, #second p, #third p, #fourth p, #fifth p {\n      display: inline-block;\n      padding: 0em 1.5em;\n      font-size: 1.5rem;\n    }\n    h2 { font-size: 1.5em; }\n    \u003c/style\u003e\n```\n\nThat’s pretty much all the business we have with the three components, they are pretty straightforward. Most of the complexity and app logic are buried in the root component, `App.vue`. Let’s explore that next.\n\n### Setting up the root component\n\nThe root component is included by default in every fresh Vue installation in the `src/App.vue` file, so we don’t need to create it. Unlike the other components we created earlier, the root component holds the logic and is more complex than them. \n\nWe’ll keep the `template` tag of the root component simple. We include the earlier components, `Intro.vue`, `Current.vue`, and `Previous.vue`, as custom tags and pass in the appropriate `props`.\n\nIn the `App.vue` file, replace the contents with the following:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n        \u003cintro\u003e\u003c/intro\u003e\n        \u003cdiv id=\"body\"\u003e\n          \u003cdiv id=\"current\"\u003e\n            \u003ccurrent v-bind:currentCurrency=\"currentCurrency\"\u003e\u003c/current\u003e\n          \u003c/div\u003e\n          \u003cdiv id=\"previous\"\u003e\n            \u003cprevious v-bind:previousCurrency=\"previousCurrency\"\u003e\u003c/previous\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nNext, let’s add some `script` and start adding logic in the `script` section. Paste the following below the `template` tag:\n\n```\n    \u003cscript\u003e\n    import Intro from './components/Intro.vue';\n    import Current from './components/Current.vue';\n    import Previous from './components/Previous.vue';\n    \n    export default {\n      name: 'app',\n      components: {Intro, Current, Previous},\n      data() {\n        return {\n          currentCurrency: {BTC: '', ETH: '', LTC: ''},\n          previousCurrency: {\n            yesterday: {}, twoDays: {}, threeDays: {}, fourDays: {}, fiveDays: {}\n          }\n        }\n      },\n      methods: {\n        // Stub\n      },\n      created() {\n        // Stub\n      }\n    }\n    \u003c/script\u003e\n```\n\nThe script above does not do much but it sets the stage for our logic. We have set all the defaults for the `data` we will be using in the application and we have defined the `created` method that is called automatically during Vue’s component lifecycle. We also imported the components we will be using in the application.\n\nBefore we start adding script logic, let’s add some style for the root component. Below the `script` tag, paste the following code:\n\n```\n    \u003cstyle\u003e\n    @import url('https://fonts.googleapis.com/css?family=Lato');\n    * {\n      margin : 0px;\n      padding : 0px;\n      font-family: 'Lato', sans-serif;\n    }\n    body { height: 100vh; width: 100%; }\n    .row { display: flex; flex-wrap: wrap; }\n    h1 { font-size: 48px; }\n    a { color: #FFFFFF; text-decoration: none; }\n    a:hover { color: #FFFFFF; }\n    a:visited { color: #000000; }\n    .button {\n      margin: auto;\n      width: 200px;\n      height: 60px;\n      border: 2px solid #E36F55;\n      box-sizing: border-box;\n      border-radius: 30px;\n    }\n    #body {\n      max-width: 90%;\n      margin: 0 auto;\n      padding: 1.5em;\n      text-align: center;\n      color:rgb(0, 193, 131);\n    }\n    #current { padding: 2em 0em; }\n    #previous { padding: 2em 0em; }\n    \u003c/style\u003e\n```\n\n### Adding methods to our root component\n\nWe need to populate the `method` object with actual methods. We’ll start by defining the methods that will retrieve coin prices for previous days.\n\n### Pulling in dependencies\nSince we are getting data from a remote API, we need an HTTP client to pull in the data for us. In this article, we’ll be using the promise based HTTP client [axios](https://github.com/axios/axios) to make our HTTP requests. We also need [moment](https://momentjs.com/) to easily work with dates.\n\nTo add Axios and Moment.js to our project, run the following command in your terminal:\n\n```\n    npm install --save vue-axios axios vue-momentjs moment\n```\n\n\u003e 💡  `vue-axios` and `vue-momentjs` are Vue wrappers around the Axios and Moment.js packages.\n\nWhen the installation is complete, we will globally import the packages to our application. Open the `src/main.js` file and in there replace:\n\n```\n    import App from './App'\n```\n\nwith:\n\n```\n    import App from './App'\n    import moment from 'moment';\n    import VueMomentJS from 'vue-momentjs';\n    import axios from 'axios'\n    import VueAxios from 'vue-axios'\n     \n    Vue.use(VueAxios, axios)\n    Vue.use(VueMomentJS, moment);\n```\n\n### Building the methods logic\nNext, we want to go back to our root component and build out the `methods` object. In the `methods` object, let’s create the first method. Paste the following code inside the `methods` object in the `App.vue` file:\n\n```\n    _fetchDataFor: (key, daysAgo) =\u003e {\n      var date = this.$moment().subtract(daysAgo, 'days').unix()\n      let fetch = (curr, date) =\u003e this.axios.get(`https://min-api.cryptocompare.com/data/pricehistorical?fsym=${curr}\u0026tsyms=USD\u0026ts=${date}`)\n      \n      this.axios\n          .all([fetch('BTC', date), fetch('ETH', date), fetch('LTC', date)])\n          .then(this.axios.spread((BTC, ETH, LTC) =\u003e {\n              this.previousCurrency[key] = {\n                  BTC: BTC.data.BTC.USD,\n                  LTC: LTC.data.LTC.USD,\n                  ETH: ETH.data.ETH.USD,\n                  DATE: this.$moment.unix(date).format(\"MMMM Do YYYY\"),\n              }\n              \n              localStorage.setItem(`${key}Prices`, JSON.stringify(this.previousCurrency[key]));\n          }))\n    },\n```\n\nThe method above is a helper method for fetching the coin exchange rate within a specified period and saving the response in `localStorage` and the `this.previousCurrency` object. We will use this later in the code.\n\nNext, paste the following function inside the `methods`  object alongside the one we added above:\n\n```\n    _fetchDataForToday: () =\u003e {\n      let url = 'https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC\u0026tsyms=USD'\n      \n      this.axios.get(url).then(res =\u003e {\n        localStorage.setItem('BTC', this.currentCurrency.BTC = res.data.BTC.USD),\n        localStorage.setItem('ETH', this.currentCurrency.ETH = res.data.ETH.USD),\n        localStorage.setItem('LTC', this.currentCurrency.LTC = res.data.LTC.USD)\n      })\n    },\n```\n\nThe method above simply fetches the coin data for the current date and saves the response to `localStorage` and the `this.currentCurrency` object.\n\nNext, inside the `created()` method of the root component, paste in the following code:\n\n```\n    if ( ! navigator.onLine) {\n      this.currentCurrency = {\n        BTC: localStorage.getItem('BTC'),\n        ETH: localStorage.getItem('ETH'),\n        LTC: localStorage.getItem('LTC'),\n      }\n      \n      this.previousCurrency = {\n        yesterday: JSON.parse(localStorage.getItem('yesterdayPrices')),\n        twoDays:   JSON.parse(localStorage.getItem('twoDaysPrices')),\n        threeDays: JSON.parse(localStorage.getItem('threeDaysPrices')),\n        fourDays:  JSON.parse(localStorage.getItem('fourDaysPrices')),\n        fiveDays:  JSON.parse(localStorage.getItem('fiveDaysPrices'))\n      }\n    } else {\n      this._fetchDataFor('yesterday', 1)\n      this._fetchDataFor('twoDays', 2)\n      this._fetchDataFor('threeDays', 3)\n      this._fetchDataFor('fourDays', 4)\n      this._fetchDataFor('fiveDays', 5)\n      this._fetchDataForToday()\n    }\n```\n\nIn the code above, we have defined the code to fetch the current currency from `localStorage` if the client is offline. If the client is online though, it fetches the data from the API.\n\nEverything should be working now except the realtime functionality.\n\n![cryptocurrency-tracker-vue-draft](//images.contentful.com/1es3ne0caaid/70EsAUqmNqSogEYYgwg640/c70439aeb26fd7963309b4cfb39dce7f/cryptocurrency-tracker-vue-draft.png)\n\n### Integrating realtime functionality using Pusher\n\nNow that we have a functional application, we would like to add some realtime functionality so we see updates as they happen. \n\nWe will be using Pusher to provide this functionality, if you haven’t, create your Pusher application from the Pusher dashboard as you will need the: `app_id`, `key`, `secret` and `cluster`.\n\n#### Building a Node.js backend for our application\nWe need a backend server to trigger events to Pusher, we will be using Node.js to build the backend for this article.\n\nTo get started, create a new file in the root directory of our application and call it `server.js`.\nIn this `server.js` file, we’ll be using `Express` as the web framework so we need to pull that in. We’ll also pull in `axios`, `Pusher` and `body-parser` since we’d be making references to them in our code.\n\nIn your terminal type in the following command:\n\n```\n    $ npm install --save express axios body-parser pusher\n```\n\nWhen the installation is complete, open the `server.js` file and in the file paste in the following code:\n\n```\n    const express = require('express');\n    const path = require('path');\n    const bodyParser = require('body-parser');\n    const app = express();\n    const Pusher = require('pusher');\n    const axios = require('axios');\n    \n    \n    // Initialise Pusher\n    var pusher = new Pusher({\n      appId: 'PUSHER_APP_ID',\n      key: 'PUSHER_APP_KEY',\n      secret: 'PUSHER_APP_SECRET',\n      cluster: 'PUSHER_APP_CLUSTER',\n      encrypted: true\n    });\n    \n    // Body parser middleware\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // CORS middleware\n    app.use((req, res, next) =\u003e {\n        res.setHeader('Access-Control-Allow-Origin', '*')\n        res.setHeader('Access-Control-Allow-Credentials', true)\n        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')\n        res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type')\n        next()\n    });\n    \n    // Routes\n    app.get('/', _ =\u003e res.send('Welcome'));\n    \n    // Simulated Cron\n    setInterval(_ =\u003e {\n      let url = 'https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC\u0026tsyms=USD';\n      \n      axios.get(url).then(res =\u003e {\n        pusher.trigger('price-updates', 'coin-updates', {coin: res.data})\n      })\n    }, 5000)\n    \n    // Start app\n    app.listen(8000, () =\u003e console.log('App running on port 8000!'));\n```\n\n\u003e 💡  You need to replace `PUSHER_APP_ID`, `PUSHER_APP_KEY`, `PUSHER_APP_SECRET`, and `PUSHER_APP_CLUSTER` with the details from your Pusher application dashboard.\n\nIn the Express app above, we import our dependencies and then instantiate Pusher. We then register some middleware including the [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) middleware so we don’t get cross origin request errors.\n\nNext, we have a “Simulated Cron” that runs after 5 seconds. The job is to fetch the updates from the server and send the updates to Pusher. Our Vue application can then subscribe to the Pusher channel, pull the changes and display them.\n\nFinally, we tell the Node app to listen on port **8000**. To start the Node server, run the command below:\n\n```\n    $ node server.js \n```\n\nThis will start a Node server and the simulated cron will start running and sending events to Pusher.\n\n## Creating an API proxy\n\nTo access our API server from the Vue application, we can create a proxy in `config/index.js` and run the dev server and the API backend side-by-side. All requests to `/api` in our frontend code will be proxied to the backend server.\n\nOpen the `config/index.js` and make the following modifications:\n\n```\n    // config/index.js\n    module.exports = {\n      // ...\n      dev: {\n        // ...\n        proxyTable: {\n            '/api': {\n            target: 'http://localhost:8000',\n            changeOrigin: true,\n            pathRewrite: {\n              '^/api': ''\n            }\n          }\n        },\n        // ...\n      }\n    }\n```\n\nIn the `proxyTable` we attempt to proxy requests from `/api` to `localhost:8000`. \n\n### Using Pusher in our Vue.js application\nTo use `Pusher` on the client side of our application we need to pull in the `pusher-js`. Run the following command in your terminal:\n\n```\n    $ npm install --save pusher-js\n```\n\nWhen the installation is complete, we will import `pusher-js` to the root component. Within the `script` tag add the following at the top:\n\n```\n    import Pusher from 'pusher-js'\n```\n\nNext we will initialize Pusher with the app credentials from the Pusher dashboard and subscribe to a channel in the `created()` life cycle hook. Open the `App.vue` and add this to the bottom of the `created()` method in the `else` block:\n\n```\n    let pusher = new Pusher('PUSHER_APP_KEY', {\n      cluster: 'PUSHER_APP_CLUSTER',\n      encrypted: true\n    });\n    \n    let channel = pusher.subscribe('price-updates');\n    \n    channel.bind('coin-updates', data =\u003e {\n      this.currentCurrency = {\n        BTC: data.coin.BTC.USD, \n        ETH: data.coin.ETH.USD, \n        LTC: data.coin.LTC.USD\n      }\n    });\n```\n\nIn the code above, we subscribe to receive updates on the `price-updates` channel. Then we bind to the `coin-updates` event on the channel. When the event is triggered, we get the data and update the `currentCurrency`.\n\nThat’s all now. You can build the application by running the command below:\n\n```\n    $ npm run dev\n```\n\nThis should start and open the Vue PWA on your browser. To make sure you receive updates, make sure your Node server is running. \n\n![cryptocurrency-watcher-vue-demo](//images.contentful.com/1es3ne0caaid/4beBtBCJjqiWK4GKa0Mw0i/13f64db1b24726b8b3e19ccb17aa92a6/cryptocurrency-watcher-vue-demo.gif)\n\n## Using service workers and offline capability\n\nAs it is, the application already functions but is not a PWA in true sense of the term. So let us work on making the application a PWA with offline storage. The build process already automatically generates the service worker when the application is built so let’s build the application. Run the following command to build the application:\n\n```\n    $ npm run build\n```\n\nThis command creates a `dist` folder in our working directory and also registers a new service worker. Let’s serve this `dist` directory and take a peek at the generated service worker in a Chrome web browser.\n\nWe’ll serve this application using an NPM package called [Serve](https://www.npmjs.com/package/serve). Run the following command to install it:\n\n```\n    $ npm i serve -g\n```\n\nWhen the installation is complete, we will use the package to serve the application. Run the following command to serve the application:\n\n```\n    $ serve dist\n```\n\nWe should get an output that looks like this:\n\n\n![cryptocurrency-tracker-vue-output](//images.contentful.com/1es3ne0caaid/5D35dFM7PGssemAeMO0IcS/2563dfc1d3b90732117be8babc5ae2d0/cryptocurrency-tracker-vue-output.png)\n\n\nIf we navigate to this address `http://localhost:5000` on our web browser, we’d see our application as it was the last time, no obvious changes except for the fact that the app is now a PWA.\n\nWe can inspect this feature by opening the browser’s dev tools and clicking on the “Application” tab. Here’s what we should see:\n\n\n![cryptocurrency-tracker-vue-service-workers](//images.contentful.com/1es3ne0caaid/1V3EsE6wwoicCOo6KQgiG0/35da6aa92c35a46419c58dacb08b7a3a/cryptocurrency-tracker-vue-service-workers.png)\n\n\nOur app registered a service worker that caches the app shell on the first run, thanks to the Vue PWA template.\n\n\n\u003e 💡  An application shell (or app shell) refers to the local resources that your web app needs to load the skeleton of your user interface (UI). Think of your app's shell like the bundle of code you would publish to a native app store when building a native app.\n\n\n## Conclusion\n\nIn this tutorial, we have seen how to write a simple realtime PWA with Vue.js, Pusher and Service Workers. We also saw how to cache dynamic values from a remote API using the Web Storage API’s storage object. There is a lot more you can do with PWAs and Vue, but this is a good introduction so far.","metaTitle":"Build a cryptocurrency tracker using Vue.js","metaDescription":"In this tutorial, learn how to build a realtime cryptocurrency tracker using Progressive Web Apps, Vue.js, Node.js and and Service Workers."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4To7f8itpS82YiUckMa0so","type":"Entry","createdAt":"2018-02-28T14:59:41.213Z","updatedAt":"2018-02-28T14:59:41.213Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime PWA using Vue.js","url":"pwa-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/pusher-vue-pwa","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}}],"reviewDate":"2017-12-29","description":"Build a food delivery tracking progressive web application (PWA) with Vue.js.","prerequisite":"Knowledge of HTML, JavaScript and Vue.js is needed to follow this tutorial.","content":"Quite a number of us like to order food. How about we track the delivery of meals right from placing our order to its delivery. In this article, we would be building a food delivery tracking progressive web app (PWA) using Pusher and Vue.js. \n\nHere is what the final demo would look like:\n\n![pwa-vuejs-demo](//images.contentful.com/1es3ne0caaid/77MiMWO1mo0y00MqccIYKg/9411ce437d29803ec7c41c2a24afa21a/pwa-vuejs-demo.gif)\n\n## Background\n\nA progressive web app is simply an app that employs various modern technologies to achieve a unique goal. In this article, we will be building a PWA that can engage the user even when they lose connectivity.\n\nTo achieve this realtime feature, we will be using [Pusher](https://pusher.com/). Pusher is a leader in realtime technologies, and allows us to perform various operations on the web in realtime. Our offline starter project will be an enhanced [Vue](https://vuejs.org) PWA webpack template. Also, we will be making use of [Progressbar.js](https://progressbarjs.readthedocs.io/en/latest/) to implement a smart progress bar functionality on our app and [Bulma](http://bulma.io/) classes to style our app.\n\n## Setup\n### Install Vue\n\nWe will be working with vue-cli, which you can install with:\n\n```\n    npm install vue-cli -g\n```\n\nThis installs the latest version of Vue CLI globally on your machine. Webpack has a PWA template and we will work with this in building our app. Create a Vue project with the **pwa template.** This is the syntax for creating a project with a template in Vue:\n\n```\n    vue init \u003ctemplate\u003e \u003cproject-name\u003e\n```\n\nFor our app, in the command prompt we run:\n\n```\n    vue init pwa pusher-vue-pwa\n```\n\nSeveral popup commands requesting some project details will be displayed on our console. For the purpose of this project, skip all of them and use all default values provided. You can customize these if you choose though.\n\nNow let’s test our app, run:\n\n```\n    cd pusher-vue-pwa // Changes directory to our project folder\n    npm install //Installs all dependencies required\n    npm run dev //Serves our app locally.\n```\n\nYou should get a welcome screen:\n\n![pwa-vuejs-setup](//images.contentful.com/1es3ne0caaid/5Rj8adpcM8MAsciO2emIUg/8656404078b59e9af387d9e02f7202cc/pwa-vuejs-setup.png)\n\n### Install Dependencies\n\nNext, let’s install our dependencies with:\n\n```\n    npm install bulma progressbar.js pusher pusher-js dotenv --save\n```\n\n- [Bulma](http://bulma.io/): CSS framework based on flexbox\n- [Progressbar.js](http://progressbarjs.readthedocs.io/en/latest/): Used to animate SVG paths\n- [Pusher](https://pusher.com/): Provides realtime service (server-side)\n- [Pusher](https://pusher.com/)[-js](https://pusher.com/): Provides realtime service (client-side)\n- [Dotenv](https://www.npmjs.com/package/dotenv): Used to load environment variables\n\n`dotenv` is used to load environmental variables from a `.env` file in our root folder. Our pusher keys will be saved in this file. No pusher keys yet? You’ll get them next.\n\n### Create a Pusher Account\n\nGo on to [Pusher](https://pusher.com/) and create an account. On the left nav bar, create a new app with any name of your choice. You will be issued an app-id, a pusher key, and a pusher-secret. Select a cluster near you and keep these credentials safe; we will require them later in our app. \n\n### Configure a Server\n\nFor our delivery app, we will configure our pusher server with the pusher credentials obtained on Pusher account creation. In our root folder, we create a file `.env` and pass in our credentials:\n\n```\n**/.env**\n\n    PUSHER_APP_ID=XXXXXXXXXX\n    PUSHER_KEY=XXXXXXX\n    PUSHER_SECRET=XXXXXXX\n    TIME=5000\n```\n\nThis file will be utilized by `dotenv`, which we installed earlier.\n\nCreate a file in the root directory named `server.js`, here we shall configure our server. First, we require `dotenv` and apply the `.config()` method to it. This allows us to use the `process.env` object.\n\n```\n    require('dotenv').config();\n    const Pusher = require('pusher');\n    const { PUSHER_APP_ID, PUSHER_KEY, PUSHER_SECRET, TIME } = process.env;\n    \n    const pusher = new Pusher({\n      appId: PUSHER_APP_ID,\n      key: PUSHER_KEY,\n      secret: PUSHER_SECRET,\n      cluster: 'eu',\n      encrypted: true\n    });\n```\n\nAs seen above, the ES6 destructuring technique is used to assign the data in our `.env` object to the listed constants. Next, we create a new pusher instance and assign our pusher credentials to their respective object properties as seen above.\n\nFor our demo we shall use a `setInterval()` function to simulate the timing of the pizza delivery process. Let’s configure this timing function:\n\n```\n    let stage = 1;\n    const interval = setInterval(() =\u003e {\n      const messages = {\n        1: \"Order Received\",\n        2: \"Order Placed\",\n        3: \"In the Oven\",\n        4: \"Out for Delivery\",\n        5: \"Delivered\"\n      }\n      stage = stage + 1;\n      const messageId = stage-1;\n      if (stage \u003e 5) {\n        console.log('clearing');\n        clearInterval(interval);\n      }\n      \n      pusher.trigger('food', 'status', {\n        message: messages[messageId],\n        progress: messageId/5\n      });\n    }, TIME);\n```\n\nWe created a stage variable to keep track of the iteration.  In our `setInterval()` function, we pass it the usual callback using the ES6 arrow function. In this function, we create an object containing the individual processes as values with their properties being numbered keys. The stage value is incremented by one for every iteration. This ensures that at the last stage, the interval is cleared out and exited.\n\nWe created a Message ID to refer to the message used from the array, and then converted that to a fraction to serve as the progress bar as well. This serves as our progress. The if block creates a termination case for our function based on the value of `messageId`. As long as the function is not terminated, we keep calling the `trigger` method on the `pusher` instance, passing it arguments of **channel**, **event,** and a **payload.** This payload is an object containing data we would like to send over our pusher channel.\n\n## Create a Client with Vue\n\nVue is used to create the client interface as stated earlier. In our `src` folder, there is an already configured Vue component — `App.vue`. Delete all the content in it and let’s get to creating our own content. Add the following template to represent the UI:\n\n```\n**/src/App.vue**\n\n     \u003ctemplate\u003e\n      \u003csection class=\"hero is-danger is-fullheight\"\u003e\n        \u003cdiv class=\"notification is-warning\" v-show=\"!connectivityStatus\"\u003e\n          \u003cbutton class=\"delete\"\u003e\u003c/button\u003e\n          {{connectivityText}}\n        \u003c/div\u003e\n        \u003cdiv class=\"hero-body\"\u003e\n          \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"level\"\u003e\n              \u003cdiv class=\"level-item has-text-centered\"\u003e\n                \u003cdiv\u003e\n                  \u003cstatus :progress=\"progress\"\u003e\u003c/status\u003e\n                  \u003ch1 class=\"title\"\u003e{{statusText}}\u003c/h1\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/section\u003e\n    \u003c/template\u003e\n```\n\nNotice the `\u003cstatus\u003e` component and the `:progress` binding?  Their values are received from the component’s object as shown below:\n\n```\n**/src/App.vue**\n\n    \u003cscript\u003e\n    require('../node_modules/bulma/css/bulma.css');\n    import pusher from 'pusher-js';\n    import Status from '@/components/Status';\n    export default {\n      data() {\n        return {\n          statusText: '',\n          progress: 0,\n          connectivityText: '',\n          connectivityStatus: true,\n        }\n      },\n      created() {\n        var pusher = new Pusher('API_KEY', {\n          cluster: 'eu',\n          encrypted: true\n        });\n        var channel = pusher.subscribe('food');\n        channel.bind('status', (data) =\u003e {\n          console.log(data)\n          this.statusText = data.message;\n          this.progress = data.progress;\n        });\n      },\n      components: {\n        'status': Status\n      }\n    }\n    \u003c/script\u003e\n```\n\nFirst, we require bulma, this provides all the bulma classes used to style our app in the template.\n\nNext, we import `pusher-js`  which we installed at the beginning. A  `Status` custom component is also imported which we will create soon. In our Vue data method, we create and return an object whose properties values will be used in the template. The `statusText` property displays the status of our order.\n\nThe value of `connectivityText` is displayed whenever our device is offline and this depends on the value of the `connectivityStatus` property to be visible or not. We will set these values soon.\n\nIn the `created()` lifecycle method, we create a new `pusher` instance on the client side. This instance receives the payload from the server once we subscribe to our channel created on the server.\n\n\u003e Note: Multiple events can be created per channel.\n\nAfter a new pusher instance is created with our pusher-key (obtained on registration) as seen above. With this instance, we can subscribe to the channel we used on the server. Next, bind the `status` event to `channel`, passing it a callback which fetches the payload from the channel. The data fetched is passed as values to the properties we created in our `data()` method.\n\n### Progress Status Component\n\nIn the `components` folder, delete the H`ello.vue` component and create a `Status.vue` file. You also need to replace `Hello.vue` with `Status.vue` in the routes list if you opted for routing when creating with Vue CLI.\n\nAdd a div with a `status` class to the template as shown below:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv class=\"status\"\u003e\u003c/div\u003e\n    \u003c/template\u003e\n```\n\nThe div tag serves as a mount point for the progress status widget. Next, create the component’s logic that imports the `progressbar` plugin:\n\n```\n    \u003cscript\u003e\n    import ProgressBar from 'progressbar.js';\n    export default {\n      data() {\n        return {\n          bar: null\n        }\n      },\n      props: ['progress'],\n      watch: {\n        progress(val) {\n          this.bar.animate(val);\n        }\n      },\n      mounted() {\n        this.bar = new ProgressBar.Circle(this.$el, {\n          color: '#FFEA82',\n          trailColor: '#eee',\n          trailWidth: 1,\n          duration: 1400,\n          easing: 'bounce',\n          strokeWidth: 6,\n          from: { color: '#d6ff82', a: 0 },\n          to: { color: '#5aedb4', a: 1 },\n          // Set default step function for all animate calls\n          step: function(state, circle) {\n            circle.path.setAttribute('stroke', state.color);\n          }\n        });\n        this.bar.animate(this.progress);\n      }\n    }\n    \u003c/script\u003e\n```\n\nThe component has a `bar` property which is used to keep track of the widget configuration instance. It is used to configure the awesome circular status bar.\n\nWe configure the Progress Bar in our `mounted` lifecycle method to ensure that the DOM is ready before manipulating it. This is done by creating an instance of the `Circle` constructor on the `ProgressBar` object. After configuring our circular bar, the `.animate()` object is called on `bar` and passed a parameter which is the value of `progress` property. The property is received from the parent component via `props`. This triggers an animation in the status bar but with a zero initial value so nothing is obvious.\n\nRemember the `:progress` property we bound to the value of `progress` in `App.vue`? It would only be accessible to the Status child component if we specify it in the `props` array.  \n\nNow to a fun part; in the `watch` object, we state a progress function which listens for value changes on the `progress` property. Whenever the value changes, the new value is passed as a parameter to the `animate` method on `this.bar`.  This means that whenever a new progress value is received from the server, it propagates through the App parent component, down to the child’s `watch` object and updates the status of our order. This update is observed from the progress circular bar.\n\nIf you don’t have the app running, run:\n\n```\n    npm run dev\n```\n\nThen start the server:\n\n```\n    node server.js\n```\n\nOnce the server starts running and is emitting events, you should see the client update as shown in the video below:\n\n![pwa-vuejs-demo](//images.contentful.com/1es3ne0caaid/77MiMWO1mo0y00MqccIYKg/9411ce437d29803ec7c41c2a24afa21a/pwa-vuejs-demo.gif)\n\n## Handling Offline\n\nHow do we handle notifications when offline? \nWe listen to the windows object for an `offline` event or an `online` event, in which case `this.conectivityStatus` is `false` or `true` respectively. When `connectivityStatus` is `false`, `connectivityText` resolves to: \n\n```\n    'You seem to be offline. Connect to see latest order status'\n```\n\nIn the `created()` method of `App.vue`, let’s create an *EventListener:*\n\n```\n    created() {\n        ...\n        window.addEventListener('offline', () =\u003e {\n          this.connectivityStatus = false;\n          this.connectivityText = 'You seem to be offline. Connect to see latest order status';\n        })\n        window.addEventListener('online', () =\u003e {\n          console.log('asd')\n          this.connectivityStatus = true;\n        })\n      },\n    ...\n```\n\nWhile the app is running, turn off your network connectivity and you should see a warning message pop-up on the screen as shown in the image below:\n\n![pwa-vuejs-offline](//images.contentful.com/1es3ne0caaid/PYNBANiy2Yw0WayOaiiSC/df5c830eeef146ef2415679c5a39a906/pwa-vuejs-offline.png)\n\n## Conclusion\n\nIn this article, we built a realtime delivery tracking PWA using Pusher and Vue while implementing status bar features with Progressbar.js and styling with Bulma. This app has minimal styling, feel free to add more styles and possibly more cool functionalities.","metaTitle":"Build a realtime PWA using Vue.js","metaDescription":"Build a food delivery tracking progressive web application (PWA) with Vue.js and add realtime interaction to it. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4vrGYiV7WUOEyYI6WEQ8AC","type":"Entry","createdAt":"2018-02-28T13:08:28.413Z","updatedAt":"2018-02-28T23:44:17.266Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a design feedback app using Vue.js","url":"design-feedback-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/Design-Prototype-Feedback-Application","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Od9rZziIoMG4yaQ4EAeok","type":"Entry","createdAt":"2018-02-13T11:31:10.435Z","updatedAt":"2018-02-26T12:31:10.730Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":16,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live UX","url":"live-ux","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}}],"reviewDate":"2017-11-29","description":"In this tutorial, we are going to create a realtime design feedback application with Vue.js and Laravel.","prerequisite":"A basic understanding of Laravel and Vue.js is needed to follow this tutorial.","content":"Companies like Invision have built applications that designers use to get feedback from other people. A designer can just load the Invision application, upload their designs and send the link to the people that will leave feedback, and then they can leave their feedback on different parts of the design. This is good for the designer because they can see this feedback and act on them. \n\nIn this article, we are going to create a design feedback application. This will allow you to upload images, then send the link to someone else to leave feedback on your design that you can see in realtime.\n\nHere is a screen recording of what our application will be able to do once we are done building it:\n\n![design-feedback-vuejs-demo](//images.contentful.com/1es3ne0caaid/4lFe4YII6IyeiC48wyogQK/cd6ac36e8733b291b71a74e9b66f6922/design-feedback-vuejs-demo.gif)\n\n## Requirements we will need to build our application\n\nBefore we get started we need to have a few things in place first. Some of the requirements are as follows:\n- Knowledge of PHP \u0026 the [Laravel](https://laravel.com) framework.\n- Knowledge of JavaScript (ES6).\n- Knowledge of Vue.js.\n- PHP 7.0+ installed locally on your machine.\n- [Laravel CLI](https://laravel.com/docs/5.5/installation#installing-laravel) installed locally.\n- [Composer](https://getcomposer.org/doc/00-intro.md#installation-linux-unix-osx) installed locally.\n- [NPM](https://docs.npmjs.com/cli/install) and Node.js installed locally.\n- A Pusher application. Create one on [pusher.com](https://pusher.com).\n\nOnce you have verified you have the above requirements we can start creating our application.\n\n\n## Setting up our prototype feedback application\n\nLet us get started with setting up our application. Create a new Laravel application using the command below:\n\n```\n    $ laravel new your_application_name\n```\nWhen the installation is complete, `cd` to the application directory. Open the `.env` file and let us make a couple of changes in the file. \n\n### Setting up our database and migrations\nThe first thing to do is set up our database and create its migrations. Let us start by setting up the database. Replace the configuration items below:\n\n```\n    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_DATABASE=homestead\n    DB_USERNAME=homestead\n    DB_PASSWORD=secret\n```\n\nwith:\n\n```\n    DB_CONNECTION=sqlite\n```\n\nThis will now make the application use SQLite as the database choice. In your terminal, run the command below to create a new SQLite database:\n\n```\n    $ touch database/database.sqlite\n```\n\nNow let us create some migrations which will create the required tables to the database. In your terminal, run the following command to create the migrations we will need:\n\n```\n    $ php artisan make:model Photo --migration --controller\n    $ php artisan make:model PhotoComment --migration\n```\n\nThe above command will create a model and then the `--migration` and `--controller` flags will instruct it to create a migration and a controller alongside the model.\n\nFor now, we are interested in the Model and the migration. Open the two migration files created in the `./database/migrations` directory. Let us first edit the `CreatePhotosTable` class. Replace the content of the `up` method with the following below:\n\n```\n    public function up()\n    {\n        Schema::create('photos', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003estring('url')-\u003eunique();\n            $table-\u003estring('image')-\u003eunique();\n            $table-\u003etimestamps();\n        });\n    }\n```\n\nThis will create the `photos` table when the migrations are run using the artisan command. It will also create new columns inside the table as specified above.\n\nOpen the second migration class, `CreatePhotoCommentsTable`, and replace the `up` method with the contents below:\n\n```\n    public function up()\n    {\n        Schema::create('photo_comments', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003eunsignedInteger('photo_id');\n            $table-\u003etext('comment');\n            $table-\u003einteger('top')-\u003edefault(0);\n            $table-\u003einteger('left')-\u003edefault(0);\n            $table-\u003etimestamps();\n            \n            $table-\u003eforeign('photo_id')-\u003ereferences('id')-\u003eon('photos');\n        });\n    }\n```\n\nThis will create the table `photo_comments` when the migration is run and also will create a foreign key to the `photos` table.\n\nNow go to your terminal and run the command below to run the migrations:\n\n```\n    $ php artisan migrate\n```\n\nThis should now create the database tables.\n\n### Setting up the models\nNow that we have run our migrations, we need to make some changes to our model file so that it can work better with the table. \n\nOpen the `Photo` model and replace the contents with the following:\n\n```\n    \u003c?php\n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    \n    class Photo extends Model\n    {\n        protected $with = ['comments'];\n        \n        protected $fillable = ['url', 'image'];\n    \n        public function comments()\n        {\n            return $this-\u003ehasMany(PhotoComment::class);\n        }\n    }\n```\n\nIn the above, we have added the `fillable` property which stops us from having mass assignment exceptions when trying to update those columns using `Photo::create`. We also set the `with` property which just eager loads the `comments` relationship.\n\nWe have defined an Eloquent relationship `comments` that just says the `Photo` has many `PhotoComments`.\n\nOpen the `PhotoComment` model and replace the contents with the following:\n\n```\n    \u003c?php\n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    \n    class PhotoComment extends Model\n    {\n        protected $fillable = ['photo_id', 'comment', 'top', 'left'];\n    \n        protected $appends = ['position'];\n    \n        public function getPositionAttribute()\n        {\n            return [\n                'top' =\u003e $this-\u003eattributes['top'], \n                'left' =\u003e $this-\u003eattributes['left']\n            ];\n        }\n    }\n```\n\nJust like the `Photo` model, we have defined the `fillable`  property. We also use [Eloquent accessors](https://laravel.com/docs/5.5/eloquent-mutators#accessors-and-mutators) to configure a new property called `position` which is then appended because we specified that in the `appends` property.\n\n### Setting up the frontend for our application\nThe next thing we want to do is set up the frontend of our application. Let us start by installing a few NPM packages that we will need in the application. In your Terminal app, run the command below to install the needed packages:\n\n```\n    $ npm install --save laravel-echo pusher-js vue2-dropzone@^2.0.0\n    $ npm install\n```\n\nThis will install [Laravel Echo](https://laravel.com/docs/5.5/broadcasting#installing-laravel-echo), the [Pusher JS SDK](https://github.com/pusher/pusher-js) and [vue-dropzone](https://github.com/rowanwins/vue-dropzone). We will need these packages to handle realtime events later.\n\nWhen the packages have been installed successfully, we can now start adding some HTML and JavaScript.\n\nOpen the `./routes/web.php` file and let’s add some routes. Replace the contents of the file with the contents below:\n\n``` php\n    \u003c?php\n    \n    Route::post('/feedback/{image_url}/comment', 'PhotoController@comment');\n    Route::get('/feedback/{image_url}', 'PhotoController@show');\n    Route::post('/upload', 'PhotoController@upload');\n    Route::view('/', 'welcome');\n```\n\nIn the code above, we have defined a few routes. The first one will be handling `POST`ed feedback. The second route will display the image that is to receive feedback. The third route will handle uploads and the final route will display the homepage.\n\nNow open the `./resources/views/welcome.blade.php` file and in there replace the contents with the following HTML code:\n\n``` html\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"{{ app()-\u003egetLocale() }}\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003cmeta name=\"csrf-token\" content=\"{{csrf_token()}}\"\u003e\n        \u003ctitle\u003eUpload to get Feedback\u003c/title\u003e\n        \u003clink href=\"https://fonts.googleapis.com/css?family=Roboto:400,600\" rel=\"stylesheet\" type=\"text/css\"\u003e\n        \u003clink href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"{{ asset('css/app.css') }}\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n            \u003cdiv class=\"flex-center position-ref full-height\"\u003e\n                \u003cdiv class=\"content\"\u003e\n                    \u003cuploadarea\u003e\u003c/uploadarea\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"js/app.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThis is a simple HTML document, and if you look closely, you will see a reference to an `uploadarea` tag which does not exist in HTML but is a Vue component.\n\nOpen the `./resources/assets/sass/app.scss` file and paste the following code below the import statements:\n\n```\n    html, body {\n        background-color: #fff;\n        color: #636b6f;\n        font-family: 'Roboto', sans-serif;\n        font-weight: 100;\n        height: 100vh;\n        margin: 0;\n    }\n    .full-height {\n        height: 100vh;\n    }\n    .flex-center {\n        align-items: center;\n        display: flex;\n        justify-content: center;\n    }\n    .position-ref {\n        position: relative;\n    }\n    .content {\n        text-align: center;\n    }\n    .m-b-md {\n        margin-bottom: 30px;\n    }\n    .dropzone.dz-clickable {\n        width: 100vw;\n        height: 100vh;\n        .dz-message {\n            span {\n                font-size: 19px;\n                font-weight: 600;\n            }\n        }\n    }\n    #canvas {\n        width: 90%;\n        margin: 0 auto;\n        img {\n            width: 100%;\n        }\n    }\n    .modal {\n      text-align: center;\n      padding: 0!important;\n      z-index: 9999;\n    }\n    .modal-backdrop.in {\n        opacity: 0.8;\n        filter: alpha(opacity=80);\n    }\n    .modal:before {\n      content: '';\n      display: inline-block;\n      height: 100%;\n      vertical-align: middle;\n      margin-right: -4px;\n    }\n    .modal-dialog {\n      display: inline-block;\n      text-align: left;\n      vertical-align: middle;\n    }\n    .image-hotspot {\n        position: relative;\n        \u003e img {\n            display: block;\n            height: auto;\n            transition: all .5s;\n        }\n    }\n    .hotspot-point {\n        z-index: 2;\n        position: absolute;\n        display: block;\n        span {\n            position: relative;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            width: 1.8em;\n            height: 1.8em;\n            background: #cf00f1;\n            border-radius: 50%;\n            animation: pulse 3s ease infinite;\n            transition: background .3s;\n            box-shadow: 0 2px 10px rgba(#000, .2);\n            \u0026:after {\n                content: attr(data-price);\n                position: absolute;\n                bottom: 130%;\n                left: 50%;\n                color: white;\n                text-shadow: 0 1px black;\n                font-weight: 600;\n                font-size: 1.2em;\n                opacity: 0;\n                transform: translate(-50%, 10%) scale(.5);\n                transition: all .25s;\n            }\n        }\n        svg {\n            opacity: 0;\n            color: #cf00f1;\n            font-size: 1.4em;\n            transition: opacity .2s;\n        }\n        \u0026:before,\n        \u0026:after  {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            border-radius: 50%;\n            pointer-events: none;\n        }\n        \u0026:before {\n            z-index: -1;\n            border: .15em solid rgba(#fff, .9);\n            opacity: 0;\n            transform: scale(2);\n            transition: transform .25s, opacity .2s;\n        }\n        \u0026:after {\n            z-index: -2;\n            background:#fff;\n            animation: wave 3s linear infinite;\n        }\n        \u0026:hover{\n            span {\n                animation: none;\n                background: #fff;\n                \u0026:after {\n                    opacity: 1;\n                    transform: translate(-50%, 0) scale(1);\n                }\n            }\n            svg {\n                opacity: 1;\n            }\n            \u0026:before {\n                opacity: 1;\n                transform: scale(1.5);\n                animation: borderColor 2s linear infinite;\n            }\n            \u0026:after {\n                animation: none;\n                opacity: 0;\n            }\n        }\n    }\n    @-webkit-keyframes pulse{\n        0%, 100% { transform: scale(1); }\n        50% { transform: scale(1.1); }\n    }\n    @keyframes pulse{\n        0%, 100% { transform: scale(1); }\n        50% { transform: scale(1.1); }\n    }\n    .popover {\n        min-width: 250px;\n    }\n```\n\nSave the file and exit. Now let’s move on to creating our Vue components.\n\n## Using Vue to create the functionalities of our prototype feedback app\n\nOpen the `./resources/assets/js/app.js` file and in there let us create our Vue component. In this file find the line below:\n\n```\n    Vue.component('example', require('./components/Example.vue'));\n```\n\nand replace it with:\n\n```\n    Vue.component('uploadarea', require('./components/UploadArea.vue'));\n    Vue.component('feedback', require('./components/FeedbackCanvas.vue'));\n```\n\nNow let us create our first Vue component. In the `./resources/assets/js/components` directory create a file called `UploadArea.vue`. In the new file paste in the following:\n\n```\n    \u003ctemplate\u003e\n        \u003cdropzone ref=\"dropzone\" id=\"dropzone\"\n                url=\"/upload\"\n                accepted-file-types=\"image/*\"\n                v-on:vdropzone-success=\"showImagePage\"\n                :headers=\"csrfHeader\"\n                class=\"flex-center position-ref full-height\"\u003e\n            \u003cinput type=\"hidden\" name=\"csrf-token\" :value=\"csrfToken\"\u003e\n        \u003c/dropzone\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    import Dropzone from 'vue2-dropzone';\n    \n    const LARAVEL_TOKEN = document.head.querySelector('meta[name=\"csrf-token\"]').content\n    \n    export default {\n        components: { Dropzone },\n        data() {\n            return {\n                csrfToken: LARAVEL_TOKEN,\n                csrfHeader: { 'X-CSRF-TOKEN': LARAVEL_TOKEN }\n            }\n        },\n        methods: {\n            showImagePage: (file, response) =\u003e {\n                if (response.url) {\n                    return window.location = `/feedback/${response.url}`;\n                }\n            }\n        },\n        mounted () {\n            this.$refs.dropzone.dropzone.on('addedfile', function (file) {\n                if (this.files.length \u003e 1) {\n                    this.removeFile(this.files[0])\n                }\n            })\n        }\n    }\n    \u003c/script\u003e\n```\n\nIn the `template` section, we are simply using the Vue dropzone package to define an area through which files can be uploaded. You can view the documentation [here](https://github.com/rowanwins/vue-dropzone).\n\nIn the `script` section, we get the Laravel CSRF token from the header of the page and import the `Dropzone` component into our current Vue component.\n\nIn the `methods` property, we define a `showImagePage` method that just redirects the user to the image page after the image has been successfully uploaded. In the `mounted` method, we limit the dropzone file to allowing one file upload at a time.\n\nLet us create our next Vue component. In the `./resources/assets/js/components` directory create a new file called `FeedbackCanvas.vue` and paste in the following:\n\n```\n    \u003ctemplate\u003e\n        \u003cdiv class=\"feedback-area\"\u003e\n            \u003cdiv class=\"content\"\u003e\n                \u003cdiv id=\"canvas\"\u003e\n                    \u003cdiv class=\"image-hotspot\" id=\"imghotspot\"\u003e\n                        \u003ctransition-group name=\"hotspots\"\u003e\n                          \u003ca\n                            href=\"#\"\n                            class=\"hotspot-point\"\n                            v-for=\"(comment, index) in image.comments\"\n                            v-bind:style=\"{ left: comment.position.left+'%', top: comment.position.top+'%' }\"\n                            :key=\"index\"\n                            @click.prevent\n                            data-placement=\"top\"\n                            data-toggle=\"popover\"\n                            :data-content=\"comment.comment\"\n                          \u003e\n                                \u003cspan\u003e\n                                    \u003csvg class=\"icon icon-close\" viewBox=\"0 0 24 24\"\u003e\n                                        \u003cpath d=\"M18.984 12.984h-6v6h-1.969v-6h-6v-1.969h6v-6h1.969v6h6v1.969z\"\u003e\u003c/path\u003e\n                                    \u003c/svg\u003e\n                                \u003c/span\u003e\n                          \u003c/a\u003e\n                        \u003c/transition-group\u003e\n                        \u003cimg ref=\"img\" :src=\"'/storage/'+image.image\" id=\"loaded-img\"  @click=\"addCommentPoint\"\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cadd-comment-modal :image=\"image\"\u003e\u003c/add-comment-modal\u003e\n        \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nWe have defined the `template` for our Vue component. This is the area where the image will be displayed and where feedback will be given.\n\nLet us break some parts of it down a little. The `a` tag has a bunch of attributes set to it. The `v-for`  loops through each comment/feedback the image has. \n\nThe `v-bind:style` applies a `style` attribute to the `a` tag using the `left` and `top` properties of the comment/feedback. We also have the `:data-content`, `data-toggle`  and `data-placement` which Bootstrap needs for its [Popovers](https://www.w3schools.com/bootstrap/bootstrap_popover.asp).\n\nThe `img` tag has the `@click` event that fires the function `addCommentPoint` when an area of the image is clicked. And finally, there’s a Vue component `add-comment-modal` that accepts a property `image`. This component will display a form so anyone can leave a comment.\n\nIn this same file, after the closing `template` tag, paste in the following code:\n\n```\n    \u003cscript\u003e\n        let AddCommentModal = require('./AddCommentModal.vue')\n        \n        export default {\n            props: ['photo'],\n            components: { AddCommentModal },\n            data() {\n                return { image: this.photo }\n            },\n            mounted() {\n                let vm = this\n                \n                Echo.channel(`feedback-${this.photo.id}`)\n                    .listen('.added', (e) =\u003e {\n                        // Look through the comments and if no comment matches the \n                        // existing comments, add it\n                        if (vm.image.comments.filter((comment) =\u003e comment.id === e.comment.id).length === 0) {\n                            vm.image.comments.push(e.comment)\n                            $(document).ready(() =\u003e $('[data-toggle=\"popover\"]').popover())\n                        }\n                    })\n            },\n            created() {\n                /** Activate popovers */\n                $(document).ready(() =\u003e $('[data-toggle=\"popover\"]').popover());\n    \n                /** Calculates the coordinates of the click point */\n                this.calculateClickCordinates = function (evt) {\n                    let rect = evt.target.getBoundingClientRect()\n                    return {\n                        left: Math.floor((evt.clientX - rect.left - 7) * 100 / this.$refs.img.width),\n                        top: Math.floor((evt.clientY - rect.top - 7) * 100 / this.$refs.img.height)\n                    }\n                }\n                \n                /** Removes comments that have not been saved */\n                this.removeUnsavedComments = function () {\n                    var i = this.image.comments.length\n                    while (i--) {\n                        if ( ! this.image.comments[i]['id']) {\n                            this.image.comments.splice(i, 1)\n                        }\n                    }\n                }\n            },\n            methods: {\n                addCommentPoint: function(evt) {\n                    let vm       = this\n                    let position = vm.calculateClickCordinates(evt)\n                    let count    = this.image.comments.push({ position })\n                    \n                    // Show the modal and add a callback for when the modal is closed\n                    let modalElem = $(\"#add-modal\")\n                    modalElem.data({\"comment-index\": count-1, \"comment-position\": position})\n                    modalElem.modal(\"show\").on(\"hide.bs.modal\", () =\u003e vm.removeUnsavedComments())\n                }\n            },\n        }\n    \u003c/script\u003e\n```\n\n\u003e 💡  The `created` and `mounted` methods are hooks that are called automatically during the creation of the Vue component. You can [learn about Vue lifecycle here](https://alligator.io/vuejs/component-lifecycle).\n\nIn the `mounted` method, we use Laravel Echo to listen to a Pusher channel. The channel name depends on the ID of the image currently being viewed. Each image will have broadcasts on a different channel based on the ID of the image. \n\nWhen the `added` event is triggered on the `feedback-$id` channel, it looks through the available `image.comments` and, if the comment broadcasted does not exist, it adds it to the comments array.\n\nIn the `create` method, We activate Bootstrap popovers, define a function that calculates the coordinates of the click point, and we define a function that removes comments that have not been saved from the `image.comments` array.\n\nUnder `methods` we define the `addCommentPoint` method which calculates the click coordinates, and then launches a new Bootstrap modal which is going to be created in the `add-comment-modal` Vue component.\n\nFor Laravel Echo to work, we need to open the `./resources/assets/js/bootstrap.js` file and add the code below at the bottom of the file:\n\n```\n    import Echo from 'laravel-echo'\n    \n    window.Pusher = require('pusher-js');\n    \n    window.Echo = new Echo({\n        broadcaster: 'pusher',\n        key: 'PUSHER_KEY',\n        encrypted: true,\n        cluster: 'PUSHER_CLUSTER'\n    });\n```\n\nYou should replace `PUSHER_KEY` and `PUSHER_CLUSTER` with the key and cluster for your Pusher application. \n\nNow lets create our next Vue component, `AddCommentModal.vue`. It is already referenced in our `FeedbackCanvas.vue` Vue component. \n\nCreate an `AddCommentModal.vue`  file in the same directory as our other Vue components. In this file paste in the code below:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv id=\"add-modal\" class=\"modal fade\" role=\"dialog\" data-backdrop=\"static\" data-keyboard=\"false\"\u003e\n          \u003cdiv class=\"modal-dialog\"\u003e\n              \u003cdiv class=\"modal-content\"\u003e\n                  \u003cform method=\"post\" :action=\"'/feedback/'+photo.url+'post'\" @submit.prevent=\"submitFeedback()\"\u003e\n                      \u003cdiv class=\"modal-header\"\u003e\n                          \u003ch4 class=\"modal-title\"\u003eAdd Feedback\u003c/h4\u003e\n                      \u003c/div\u003e\n                      \u003cdiv class=\"modal-body\"\u003e\n                          \u003ctextarea name=\"feedback\" id=\"feedback-provided\" cols=\"10\" rows=\"5\" class=\"form-control\" v-model=\"feedback\" placeholder=\"Enter feedback...\" required minlength=\"2\" maxlength=\"2000\"\u003e\u003c/textarea\u003e\n                      \u003c/div\u003e\n                      \u003cdiv class=\"modal-footer\"\u003e\n                          \u003cbutton type=\"submit\" class=\"btn btn-primary pull-right\"\u003eSubmit\u003c/button\u003e\n                          \u003cbutton type=\"button\" class=\"btn btn-default pull-left\" data-dismiss=\"modal\"\u003eCancel\u003c/button\u003e\n                      \u003c/div\u003e\n                  \u003c/form\u003e\n              \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n        props: ['image'],\n        data() {\n            return { photo: this.image, feedback: null }\n        },\n        methods: {\n            submitFeedback: function () {\n                let vm = this\n                let modal = $('#add-modal')\n                let position = modal.data(\"comment-position\")\n                \n                // Create url and payload\n                let url = `/feedback/${this.photo.url}/comment`;\n                let payload = {comment: this.feedback, left: position.left, top: position.top}\n                axios.post(url, payload).then(response =\u003e {\n                    this.feedback = null\n                    modal.modal('hide')\n                    vm.photo.comments[modal.data('comment-index')] = response.data\n                    $(document).ready(() =\u003e $('[data-toggle=\"popover\"]').popover())\n                })\n            }\n        }\n    }\n    \u003c/script\u003e\n```\nIn the `template` section, we have defined a typical Bootstrap modal. In the modal form, we have attached a call to `submitFeedback()` which is triggered when the form is submitted.\n\nIn the `script` section, we have defined the `submitFeedback()` method in the `methods` property of the Vue component. This function simply sends a comment to the backend for storage. If there is a favorable response from the API, the Bootstrap modal is hidden and the comment is appended to the `image.comments` array. The Bootstrap popover is then reloaded so it picks up the changes.\n\nWith that final change, we have defined all our Vue components. Open your terminal and run the command below to build your JS and CSS assets:\n\n```\n    $ npm run dev\n```\n\nGreat! Now let’s build the backend.\n\n## Creating the Endpoints for our prototype feedback application\n\nIn your terminal, enter the command below:\n\n```\n    php artisan make:event FeedbackAdded\n```\n\nThis will create an event class called `FeedbackAdded`. We will use this file to trigger events to Pusher when we add some feedback.This will make feedback appear in realtime to anyone looking at the image.\n\nOpen the `PhotoController` class and replace the contents with the code below:\n\n```\n    \u003c?php\n    namespace App\\Http\\Controllers;\n    \n    use App\\Events\\FeedbackAdded;\n    use App\\{Photo, PhotoComment};\n    \n    class PhotoController extends Controller\n    {\n        public function show($url)\n        {\n            $photo = Photo::whereUrl($url)-\u003efirstOrFail();\n    \n            return view('image', compact('photo'));\n        }\n        \n        public function comment(string $url)\n        {\n            $photo = Photo::whereUrl($url)-\u003efirstOrFail();\n    \n            $data = request()-\u003evalidate([\n                \"comment\" =\u003e \"required|between:2,2000\",\n                \"left\" =\u003e \"required|numeric|between:0,100\",\n                \"top\"  =\u003e \"required|numeric|between:0,100\",\n            ]);\n    \n            $comment = $photo-\u003ecomments()-\u003esave(new PhotoComment($data));\n    \n            event(new FeedbackAdded($photo-\u003eid, $comment-\u003etoArray()));\n    \n            return response()-\u003ejson($comment);\n        }\n        \n        public function upload()\n        {\n            request()-\u003evalidate(['file' =\u003e 'required|image']);\n            \n            $gibberish = md5(str_random().time());\n    \n            $imgName = \"{$gibberish}.\".request('file')-\u003egetClientOriginalExtension();\n    \n            request('file')-\u003emove(public_path('storage'), $imgName);\n    \n            $photo = Photo::create(['image' =\u003e $imgName, 'url' =\u003e $gibberish]);\n    \n            return response()-\u003ejson($photo-\u003etoArray());\n        }\n    }\n```\n\nIn the above, we have a `show` method which shows an image so people can leave feedback on it. Next, there is the `comment` method that saves a new comment on an image. The final method is the `upload` method that simply uploads an image to the server and saves it to the database.\n\nLet us create the view for the `show` method. Create a new file in the `./resources/views` directory called `image.blade.php`. In this file, paste the code below:\n\n```\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"{{ app()-\u003egetLocale() }}\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003cmeta name=\"csrf-token\" content=\"{{csrf_token()}}\"\u003e\n        \u003ctitle\u003eLaravel\u003c/title\u003e\n        \u003clink href=\"https://fonts.googleapis.com/css?family=Roboto:400,600\" rel=\"stylesheet\" type=\"text/css\"\u003e\n        \u003clink href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"{{ asset('css/app.css') }}\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n            \u003cfeedback :photo='@json($photo)'\u003e\u003c/feedback\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"{{asset('js/app.js')}}\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```    \n\nIn the above, the only thing that stands out is the `feedback` tag and it is basically in reference to the feedback Vue component we built earlier in the article. Every other thing is just basic Blade and HTML.\n\nNow that we have created the view, we need to add the directory for uploads defined in the `upload` method. In your terminal, run the command below:\n\n```\n    $ php artisan storage:link\n```\n\nThis command will create a symlink from the `./storage` directory to the `./public/storage` directory. If you look in the `./public` directory you should see the symlink.\n\nNow that we have created the backend to support our web application, we need to add Pusher to the backend so that the comments made are broadcasted and can be picked up by other people browsing the image.\n\n\n## Adding realtime functionality to the prototype feedback app using Pusher\n\nOpen your terminal and enter the command below to install the [Pusher PHP SDK](https://github.com/pusher/pusher-http-php):\n\n```\n    $ composer require pusher/pusher-php-server \"~3.0\" \n```\n\nOpen the `.env` file and scroll to the bottom and configure the Pusher keys as seen below:\n\n```\n    PUSHER_APP_ID=\"PUSHER_ID\"\n    PUSHER_APP_KEY=\"PUSHER_KEY\"\n    PUSHER_APP_SECRET=\"PUSHER_SECRET\" \n```\n\nAlso in the same file, look for the `BROADCAST_DRIVER` and change it from `log` to `pusher`.\n\nNext, open the `./config/broadcasting.php` and scroll to the `pusher` key. Replace the `options` key of that configuration to the code below:\n\n```\n    // ...\n    'options' =\u003e [\n        'cluster' =\u003e 'PUSHER_CLUSTER',\n        'encrypted' =\u003e true\n    ], \n    // ...\n```\n\n\u003e 💡 Remember to replace the `PUSHER_ID`, `PUSHER_KEY`, `PUSHER_SECRET` and `PUSHER_CLUSTER` with the values from your Pusher application.\n\nNow, open the `FeedbackAdded` class and replace the contents with the code below:\n\n```\n    \u003c?php\n    \n    namespace App\\Events;\n    \n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n    \n    class FeedbackAdded implements ShouldBroadcast\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n        \n        public $comment;\n    \n        public $photo_id;\n    \n        public function __construct(int $photo_id, array $comment)\n        {\n            $this-\u003ecomment = $comment;\n            $this-\u003ephoto_id = $photo_id;\n        }\n    \n        public function broadcastOn()\n        {\n            return new Channel(\"feedback-{$this-\u003ephoto_id}\");\n        }\n    \n        public function broadcastAs()\n        {\n            return 'added';\n        }\n    }\n```\n\nIn the class above, we define the `comment` object and the `photo_id`  which will be used to compose the channel name in the `broadcastOn` method. We also define the `broadcastAs` method which will allow us to customise the name of the event being sent to Pusher.\n\nThat’s all. Now, let’s run our application. In your terminal, run the code below:\n\n```\n    $ php artisan serve\n```\n\n![design-feedback-vuejs-laravel-server](//images.contentful.com/1es3ne0caaid/uDXbpLoXUOG0iosQmUmAg/68a818e05502e8e4f425b6efdff13b2d/design-feedback-vuejs-laravel-server.png)\n\n\nThis should start a new PHP server and you can then use that to test your application. Go to the URL given and you should see your application.\n\n## Conclusion\n\nIn this article, we have successfully created a prototype application’s feedback feature that will allow designers share their designs with others and receive feedback on them.","metaTitle":"Build a design feedback app using Vue.js","metaDescription":"Design apps has become more and more collaborative friendly with apps like InVision. In this tutorial, we are building design feedback application with Vue.js and Laravel."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5jgijmJdMAws2oQKmmEOaQ","type":"Entry","createdAt":"2018-02-28T12:58:23.259Z","updatedAt":"2020-06-19T14:33:04.319Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":11,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build realtime comments using ASP.NET","url":"realtime-comments-aspnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5KlhqILjZSg4wUSqY4Goqg","type":"Entry","createdAt":"2018-02-20T14:39:32.323Z","updatedAt":"2018-10-02T14:31:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Samuel Ogundipe","url":"samuel-ogundipe","email":"ayoogundipe2005@gmail.com","twitter":"https://twitter.com/fucked_down","github":"https://github.com/samuelayo","guestWriter":true}}],"projectRepo":"https://github.com/samuelayo/Net_real_time_commenting_pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2017-11-20","description":"Build a mini-blog engine with live commentary features using .NET. ","prerequisite":"A basic understanding of ASP.NET and Vue.js is needed to follow this tutorial.","content":"Reloading pages to view new comments can bore and is also strenuous, given you don't even know if the reply to your comment has come in yet or not. You keep reloading and keep wasting your data. To cut a long story short, users may abandon sites where they have to reload pages to see a new comment.\n\nToday, we will build a mini-blog engine with live commentary features using .NET and Pusher.\n\nTo follow through with this tutorial, we will use MSSQL as our database engine. Please ensure that it is up and running.\n\n![realtime-comments-aspnet-demo](//images.contentful.com/1es3ne0caaid/46ZgWePRgImgGm2uIQay6m/bf106f3e805723fa7fc033b95778cb35/realtime-comments-aspnet-demo.gif)\n\n## Setting up a Pusher account and app\n\n[Pusher](https://pusher.com) is a hosted service that makes it super-easy to add realtime data and functionality to web and mobile applications.\n\nPusher acts as a realtime layer between your servers and clients. Pusher maintains persistent connections to the clients - over Web-socket if possible and falling back to HTTP-based connectivity - so that as soon as your servers have new data they want to push to the clients they can do, via Pusher.\n\nIf you do not already have one, head over to Pusher and create a free account.\n\nWe will register a new app on the dashboard. The only compulsory options are the app name and cluster. A cluster represents the physical location of the Pusher server that will handle your app’s requests. Also, copy out your App ID, Key, and Secret from the App Keys section, as we will need them later on.\n\n## Setting up the ASP.NET project in Visual Studio\n\nThe next thing we need to do is create a new `Asp.Net MVC application`. \n\nTo do so, let’s:\n\n- Open `Visual Studio` and select `N``ew Project` from the sidebar\n- Under templates, select `Visual C#`\n- Next, select `Web`\n- In the middle section, select `ASP.NET Web Application`.\n- For this tutorial, I named the project: `Real-Time-Commenting`.\n- Now we are almost ready. The next step will be to install the official `Pusher` library for `ASP.NET` using the `NuGet Package`.\n\nTo do this, we go to tools on the top bar, click on `NuGet Package Manager`, on the drop-down we select `Package Manager Console`.\n\nWe will see the `Package Manager Console` at the bottom of our Visual Studio. Next, let’s install the package by running:\n\n```\n    Install-Package PusherServer\n```\n\n## Crafting our application\n\nNow that our environment is set up and ready, let’s dive into writing code.\n\nBy default, Visual Studio creates three controllers for us. However, we will use the HomeController for the application logic.\n\nThe first thing we want to do is to define a model that stores the list of articles we have in the database. Let's call this model `BlogPost`. So, let's create a file called `BlogPost.cs` in our models folder, and add:\n\n```\n    using System;\n    using System.Collections.Generic;\n    using System.ComponentModel.DataAnnotations.Schema;\n    using System.Linq;\n    using System.Web;\n    \n    namespace Real_Time_Commenting.Models\n    {\n        public class BlogPost\n        {\n            public int BlogPostID { get; set; }\n    \n            public string Title { get; set; }\n    \n            [Column(TypeName = \"ntext\")]\n            public string Body { get; set; }\n        }\n    }\n```\n\nIn this code block, we have defined the model that holds our blog posts. The properties which we have defined here include:\n\n- The id of the post, called `BlogPostID` (usually the primary key)\n- The title of our post, called `Title` (Defined as a string)\n- The body of the post which we will be creating. Defined as a string\n\nNext, let us create the model called `Comment`, which we had referenced earlier on. Let's create a file called `Comment.cs` in our models folder and add:\n\n```\n    using System;\n    using System.Collections.Generic;\n    using System.ComponentModel.DataAnnotations.Schema;\n    using System.Linq;\n    using System.Web;\n    \n    namespace Real_Time_Commenting.Models\n    {\n        public class Comment\n        {\n            public int CommentID { get; set; }\n            \n            public string Name { get; set; }\n            \n            [Column(TypeName = \"ntext\")]\n            public string Body { get; set; }\n            \n            public int BlogPostID { get; set; }\n        }\n    }\n```\n\nLooking at the code above, we notice that we have declared the following properties:\n\n- The ID of our comment called `CommentID` (Usually the primary key)\n- The name of the person commenting.\n- The body of the comment.\n- The ID of the post we are commenting on.\n\nNow that we have defined our model, let’s reference it in our default database context called `ApplicationDbContext`. To do this, let’s open `models\\IdentityModels.cs` file, then locate the class called `ApplicationDbContext` and add the following after the create function:\n\n```\n    public DbSet\u003cBlogPost\u003e BlogPost { get; set; }\n    public DbSet\u003cComment\u003e Comment { get; set; }\n```\n\nIn the code block above, the `DbSet` class represents an entity set used for read, update, and delete operations.\nHere, we have defined two entities, our `BlogPost` and `Comment` models. We will now have access to them from an instance of the `ApplicationDbContext` .\n\n## Connecting to our database\n\nAlthough our model is set up, we still need to attach a database to our application. To do so, select the Server Explorer on the left-hand side of our Visual Studio, right click on Data Connections and add a database.\nThere are various databases that are lightweight and can fit into the application we are building, such as:\n\n- Microsoft access database\n- Sqlite Database\n- MSSQL Server\n\nFor this tutorial, I used the MSSQL Server.\n\n## Creating our controller\n\nNow both our model and database are setup, let’s go ahead creating our index route. Open the `HomeController` and replace it with:\n\n```\n    using PusherServer;\n    using Real_Time_Commenting.Models;\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using System.Web;\n    using System.Web.Mvc;\n    \n    namespace Real_Time_Commenting.Controllers\n    {\n        public class HomeController : Controller\n        {\n            ApplicationDbContext db = new ApplicationDbContext();\n            public ActionResult Index()\n            {\n                return View(db.BlogPost.AsQueryable());\n            }\n    \n            public ActionResult Create()\n            {\n                return View();\n            }\n            \n            [HttpPost]\n            public ActionResult Create(BlogPost post)\n            {\n                db.BlogPost.Add(post);\n                db.SaveChanges();\n                return RedirectToAction(\"Index\");\n            }\n    \n            public ActionResult Details(int? id)\n            {\n                return View(db.BlogPost.Find(id));\n            }\n    \n            public ActionResult Comments(int? id)\n            {\n                var comments = db.Comment.Where(x =\u003e x.BlogPostID == id).ToArray();\n                return Json(comments, JsonRequestBehavior.AllowGet);\n            }\n    \n            [HttpPost]\n            public async Task\u003cActionResult\u003e Comment(Comment data)\n            {\n                db.Comment.Add(data);\n                db.SaveChanges();\n                var options = new PusherOptions();\n                options.Cluster = \"XXX_APP_CLUSTER\";\n                var pusher = new Pusher(\"XXX_APP_ID\", \"XXX_APP_KEY\", \"XXX_APP_SECRET\", options);\n                ITriggerResult result = await pusher.TriggerAsync(\"asp_channel\", \"asp_event\", data);\n                return Content(\"ok\");\n            }\n        }\n    }\n```\n\nIn the code block above, we have defined six different functions :\n\n- The `Index` function, which shows a quick list of all our blog posts.\n- The `Create` function, which handles the addition of new BlogPosts for both `GET` and `POST` requests.\n- The `D``etails` function, which returns the full view of our post.\n- The `Comment``s` function, which returns a JSON data of all the comments for a particular post.\n- The `Comment` function, which handles the addition of a new comment and emitting the data to Pusher.\n\nBefore looking at our controller functions, we notice that there is an import of our DB context into our class with the line that says:\n\n```\n    ApplicationDbContext db = new ApplicationDbContext();\n```\n\nThis makes it possible to access the database model which we have defined  in our `ApplicationDbContext` class.\n\nIn the `Index` function we return our View, passing in a list of all the posts we have in our database, which will be looped.\n\nNext, In the `Create` function that handles our `GET` request, we simply return the view for creating a new post.\n\nWe move to the `Create` function that handles our `POST` request, which receives an argument called `post` of type `BlogPost` . In this function we add a new `post` into the database, after which we return a redirect to our `Index` function.\n\nIn our `Details` function, we return an instance of a particular `post` to our view which will be displayed. This view will also display the form which allows us to add comments.\n\nIn our `Comments` function, we return all the `comments` that belong to a particular `post`, the ID of which was supplied as JSON. This method will be called via an AJAX POST.\n\nFinally, our `Comment` function handles adding the comments to the database, and sending the data to Pusher. We notice here that this function is an `async` method. This is because the Pusher library sends the data asynchronously, and we have to await its response. \n\nAlso, we need to replace `XXX_APP_CLUSTER`, `XXX_APP_ID`, `XXX_APP_KEY` and `XXX_APP_SECRET` with our app cluster, ID, key and secret which we got from Pusher earlier on.\n\n## Creating our view files\n\nTo complete our application we will need 3 different view files, which we will discuss below.\n\n### The index view\n\nLet us replace the default content in the `Index.cshtml` file at `Views\\Home\\``Index``.cshtml` with:\n\n```\n    @model IEnumerable\u003cReal_Time_Commenting.Models.BlogPost\u003e\n    \n    @{\n        ViewBag.Title = \"Index\";\n    }\n    \n    \u003ch2\u003eIndex\u003c/h2\u003e\n    \n    \u003cp\u003e\n        @Html.ActionLink(\"Create New\", \"Create\")\n    \u003c/p\u003e\n    \u003ctable class=\"table\"\u003e\n        \u003ctr\u003e\n            \u003cth\u003e\n                @Html.DisplayNameFor(model =\u003e model.Title)\n            \u003c/th\u003e\n            \u003cth\u003e\n                @Html.DisplayNameFor(model =\u003e model.Body)\n            \u003c/th\u003e\n            \u003cth\u003e\u003c/th\u003e\n        \u003c/tr\u003e\n    \n    @foreach (var item in Model) {\n        \u003ctr\u003e\n            \u003ctd\u003e\n                @Html.DisplayFor(modelItem =\u003e item.Title)\n            \u003c/td\u003e\n            \u003ctd\u003e\n                @Html.DisplayFor(modelItem =\u003e item.Body)\n            \u003c/td\u003e\n            \u003ctd\u003e\n                @Html.ActionLink(\"Details\", \"Details\", new { id=item.BlogPostID }) |\n            \u003c/td\u003e\n        \u003c/tr\u003e\n    }\n    \n    \u003c/table\u003e\n```\n\nLooking at the HTML structure above, we notice we have defined a table which lists all our posts and links them to the details page.\n\n### The create view\n\nHere, we need to create a new file called `Create.cshtml` in the `View\\Home` folder and paste the following into it:\n\n```\n    @model Real_Time_Commenting.Models.BlogPost\n    \n    @{\n        ViewBag.Title = \"Create\";\n    }\n    \n    \u003ch2\u003eCreate\u003c/h2\u003e\n    \n    \n    @using (Html.BeginForm()) \n    {\n        @Html.AntiForgeryToken()\n    \n        \u003cdiv class=\"form-horizontal\"\u003e\n            \u003ch4\u003eBlogPost\u003c/h4\u003e\n            \u003chr /\u003e\n            @Html.ValidationSummary(true, \"\", new { @class = \"text-danger\" })\n            \u003cdiv class=\"form-group\"\u003e\n                @Html.LabelFor(model =\u003e model.Title, htmlAttributes: new { @class = \"control-label col-md-2\" })\n                \u003cdiv class=\"col-md-10\"\u003e\n                    @Html.EditorFor(model =\u003e model.Title, new { htmlAttributes = new { @class = \"form-control\" } })\n                    @Html.ValidationMessageFor(model =\u003e model.Title, \"\", new { @class = \"text-danger\" })\n                \u003c/div\u003e\n            \u003c/div\u003e\n    \n            \u003cdiv class=\"form-group\"\u003e\n                @Html.LabelFor(model =\u003e model.Body, htmlAttributes: new { @class = \"control-label col-md-2\" })\n                \u003cdiv class=\"col-md-10\"\u003e\n                    @Html.EditorFor(model =\u003e model.Body, new { htmlAttributes = new { @class = \"form-control\" } })\n                    @Html.ValidationMessageFor(model =\u003e model.Body, \"\", new { @class = \"text-danger\" })\n                \u003c/div\u003e\n            \u003c/div\u003e\n    \n            \u003cdiv class=\"form-group\"\u003e\n                \u003cdiv class=\"col-md-offset-2 col-md-10\"\u003e\n                    \u003cinput type=\"submit\" value=\"Create\" class=\"btn btn-default\" /\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    }\n    \n    \u003cdiv\u003e\n        @Html.ActionLink(\"Back to List\", \"Index\")\n    \u003c/div\u003e\n    \n    @section Scripts {\n        @Scripts.Render(\"~/bundles/jqueryval\")\n    }\n```\n\nIn the HTML structure above we have three main inputs:\n\n- A text input element, which holds the title of the post.\n- A text input element, which holds the content of the post.\n- A button element, which is used to submit the new entry.\n\n### The details view and Vue.js bindings**\n\nThis is the final View file we will be needing. This file also handles binding to Pusher events and updating the comments in realtime using Pusher and Vue.\nLet us create a new file called `Details.cshtml` in our `Views\\Home` folder and add the following content into it:\n\n```\n    @model Real_Time_Commenting.Models.BlogPost\n    \n    @{\n        ViewBag.Title = \"Details\";\n    }\n    \n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.3.4/vue.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.2/axios.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"//js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cstyle\u003e\n        .user_name{\n        font-size:14px;\n        font-weight: bold;\n    }\n    .comments-list .media{\n        border-bottom: 1px dotted #ccc;\n    }\n    \u003c/style\u003e\n    \u003ch2\u003eDetails\u003c/h2\u003e\n    \u003cdiv id=\"app\"\u003e\n        \u003cdiv\u003e\n            \u003ch4\u003eBlogPost\u003c/h4\u003e\n            \u003chr /\u003e\n            \u003cdl class=\"dl-horizontal\"\u003e\n                \u003cdt\u003e\n                    @Html.DisplayNameFor(model =\u003e model.Title)\n                \u003c/dt\u003e\n    \n                \u003cdd\u003e\n                    @Html.DisplayFor(model =\u003e model.Title)\n                \u003c/dd\u003e\n    \n                \u003cdt\u003e\n                    @Html.DisplayNameFor(model =\u003e model.Body)\n                \u003c/dt\u003e\n    \n                \u003cdd\u003e\n                    @Html.DisplayFor(model =\u003e model.Body)\n                \u003c/dd\u003e\n    \n            \u003c/dl\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-8\"\u003e\n                    \u003cdiv class=\"page-header\"\u003e\n                        \u003ch1\u003e\u003csmall class=\"pull-right\"\u003e{{comments.length}} comments\u003c/small\u003e Comments \u003c/h1\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"comments-list\"\u003e\n                        \u003cdiv class=\"media\" v-for=\"com in comments\"\u003e\n                            \u003cdiv class=\"media-body\"\u003e\n                                \u003ch4 class=\"media-heading user_name\"\u003e{{com.Name}}\u003c/h4\u003e\n                                {{com.Body}}\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003cbr /\u003e\n            \u003cp\u003eYour Comment\u003c/p\u003e\n            \u003cform onsubmit=\"return false;\"\u003e\n                \u003cinput type=\"text\" id=\"Name\" placeholder=\"Your Name\" v-model=\"comment.Name\" class=\"form-control\" /\u003e\n                \u003ctextarea rows=\"3\" placeholder=\"Your Comment\" id=\"Body\" v-model=\"comment.Body\" class=\"form-control\"\u003e\u003c/textarea\u003e\n                \u003cbutton class=\"btn btn-success\" v-on:click=\"submit_comment()\"\u003esave\u003c/button\u003e\n            \u003c/form\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cp\u003e\n    \n        @Html.ActionLink(\"Back to List\", \"Index\")\n    \u003c/p\u003e\n```\n\nIn the above block of code, we have displayed the title and content of the current post, and **the number of comments** it has.\n\nWe have also created our comment form which comprises three main elements, which are:\n\n- Text input for the name of the person making the comment.\n- Textarea for the body of the comment.\n- Button to save the new comment into the database.\n\nNotice that we have used Vue’s `v-for` directive to iterate and display the comments which are available.\n\nAlso, note we have included some required libraries such as:\n\n- axios JavaScript library\n- Vue js JavaScript library\n- Pusher JavaScript library\n\n### Pusher bindings and Vue.js snippet\n\nBelow is our example Vue snippet used to handle the comment submission and Pusher’s realtime updates.\n\n```\n    \u003cscript\u003e\n    var pusher = new Pusher('XXX_APP_KEY', {\n        cluster: 'XXX_APP_CLUSTER'\n    });\n    var my_channel = pusher.subscribe('asp_channel');\n    var app = new Vue({\n        el: '#app',\n        data: {\n            comments: [],\n            comment: {\n                Name: '',\n                Body: '',\n                BlogPostID: @Model.BlogPostID\n            }\n        },\n        created: function() {\n            this.get_comments();\n            this.listen();\n        },\n        methods: {\n            get_comments: function() {\n                axios.get('@Url.Action(\"Comments\", \"Home\", new { id = @Model.BlogPostID }, protocol: Request.Url.Scheme)')\n                    .then((response) =\u003e {\n    \n                        this.comments = response.data;\n    \n                    });\n    \n            },\n            listen: function() {\n                my_channel.bind(\"asp_event\", (data) =\u003e {\n                    if (data.BlogPostID == this.comment.BlogPostID) {\n                        this.comments.push(data);\n                    }\n    \n                })\n            },\n            submit_comment: function() {\n                axios.post('@Url.Action(\"Comment\", \"Home\", new {}, protocol: Request.Url.Scheme)', this.comment)\n                    .then((response) =\u003e {\n                        this.comment.Name = '';\n                        this.comment.Body = '';\n                        alert(\"Comment Submitted\");\n    \n                    });\n            }\n        }\n    });\n    \u003c/script\u003e\n```\n\nIn the code block above, we have done two major activities, which are:\n\n### Uploading comment code\n\nTo process new comments from the client side to the server, the following steps were followed:\n\n- We attached a Vue event listener `@click` to our submit button which fires a method called `submit_comment`.\n- We defined a function called `submit_comment` which uses `axios` to make a POST request to our `comment` function.\n\n## Subscribing for feed additions on server from other clients\n\nAfter the comment has been sent to the server, a request is sent to Pusher to return an event with the new data we have broadcasted. To listen for these realtime events, we have:\n\n- Initialized a Pusher object while passing our app key and cluster.\n- Subscribed to our channel called `asp_channel`.\n- In the listen method in our Vue code, we declared a binding to our event called `asp_event`. In the callback function of this binding, we push the new data to our list of comments.\n\nThat’s it! Now, once a new comment is made, it also gets broadcast and we can listen using our channel to update the comments in realtime.\n\n![realtime-comments-aspnet-demo](//images.contentful.com/1es3ne0caaid/46ZgWePRgImgGm2uIQay6m/bf106f3e805723fa7fc033b95778cb35/realtime-comments-aspnet-demo.gif)\n\n## Conclusion\n\nIn this article, we have covered how to create a live commentary feature using .NET and Pusher, and creating a mini blog engine in .NET.\nYou can download it for educational purposes.\nHave any reservations or comments, let us know your feedback in the comments.","metaTitle":"Build realtime comments using ASP.NET","metaDescription":"Build a mini-blog engine with live commentary features using .NET. Create a commentary feature that will keep your blog updated in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4S1sokE7HOOUMMqsMEqUuk","type":"Entry","createdAt":"2018-02-22T15:04:12.084Z","updatedAt":"2019-01-02T15:27:54.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app with Laravel","url":"chat-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5K3KWA2xvqw4SW2sYI8eCG","type":"Entry","createdAt":"2018-02-12T15:34:14.169Z","updatedAt":"2018-02-14T10:09:19.038Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Chimezie Enyinnaya","url":"chimezie-enyinnaya","email":"meziemichael@gmail.com","twitter":"https://twitter.com/ammezie","github":"https://github.com/ammezie","guestWriter":true}}],"projectRepo":"https://github.com/ammezie/laravel-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2017-11-07","description":"Build a Laravel chat application using Vue.js and receive realtime messages with Pusher.","prerequisite":"A basic understanding of Laravel and Vue.js is needed to follow this tutorial. ","content":"Laravel makes it easy to build modern applications with realtime interactions by providing an event broadcasting system which allows developers to share the same event names between the server-side code and the client-side JavaScript application.\n\nPusher, on the other hand, is an easy and reliable platform for building scalable realtime applications. Laravel provides support for Pusher out of the box, which makes building realtime applications with Laravel and Pusher seamless. In fact, Pusher has emerged as one of the Laravel community’s preferred tools to make apps realtime, thanks to the support of Taylor Otwell, Jeffrey Way, Matt Stauffer, and many more.\n\nIn this post, I will be showing you how to build a laravel chat application with Pusher. I will be using Vue.js as my JavaScript framework, although you can use the JavaScript framework of your choice or even jQuery and vanilla JavaScript.\n\nBefore we start, let's take a quick look at what we'll be building.\n\n![laravel-pusher-chat-demo](//images.contentful.com/1es3ne0caaid/498lJqFV8IKEwY8QeoSIay/3dd16f2dec04cecfbe6d7d80fee90196/laravel-pusher-chat-demo.gif)\n\nThe code of the completed demo is available on [GitHub](https://github.com/ammezie/laravel-chat).\n\n## Setting Up Laravel\n\nWe'll start by creating a new Laravel project. While there are different ways of creating a new Laravel project, I prefer using the Laravel installer. Open your terminal and run the code below:\n\n```\nlaravel new laravel-chat\n```\nThis will create a `laravel-chat` project within the directory where you ran the command above.\n\nBefore we start using Laravel event broadcasting, we first need to register the `App\\Providers\\BroadcastServiceProvider`. Open `config/app.php` and uncomment the following line in the `providers` array.\n\n`// App\\Providers\\BroadcastServiceProvider` \n\n\nWe need to tell Laravel that we are using the Pusher driver in the `.env` file:\n\n```\n// .env\n\nBROADCAST_DRIVER=pusher\n```\nThough Laravel supports Pusher out of the box, we still need to install the Pusher PHP SDK. We can do this using composer:\n\n```\ncomposer require pusher/pusher-php-server\n```\nOnce the installation is done, we need to configure our Pusher app credentials in `config/broadcasting.php`. To get our Pusher app credential, we need to have a Pusher account.\n\n## Setting Up Pusher\n\nIf you don't have one already, create a free Pusher account at https://pusher.com/signup then login to your dashboard and create an app.\n\nNow, let's fill in our Pusher app credentials. If you open the `config/broadcasting.php`, you'll notice that Laravel is pulling some of Pusher credential from the `.env` file:\n\n```\n// Don't add your credentials here!\n// config/broadcasting.php\n\n'pusher' =\u003e [\n  'driver' =\u003e 'pusher',\n  'key' =\u003e env('PUSHER_APP_KEY'),\n  'secret' =\u003e env('PUSHER_APP_SECRET'),\n  'app_id' =\u003e env('PUSHER_APP_ID'),\n  'options' =\u003e [],\n],\n```\nWe need to modify the source a little bit here to get this to work. Modify the source so that it looks like this:\n```\n  'pusher' =\u003e [\n      'driver' =\u003e 'pusher',\n      'key' =\u003e env('PUSHER_APP_KEY'),\n      'secret' =\u003e env('PUSHER_APP_SECRET'),\n      'app_id' =\u003e env('PUSHER_APP_ID'),\n      'options' =\u003e [\n          'cluster' =\u003e env('PUSHER_CLUSTER'),\n          'encrypted' =\u003e true,\n      ],\n  ],\n```\n\n\nThen let's update the `.env` file to contain our Pusher app credentials (noting the added cluster credential, this won't be in your `.env` file as Laravel has not added this functionality yet:\n\n```\n// .env\n\nPUSHER_APP_ID=xxxxxx\nPUSHER_APP_KEY=xxxxxxxxxxxxxxxxxxxx\nPUSHER_APP_SECRET=xxxxxxxxxxxxxxxxxxxx\nPUSHER_CLUSTER=xx\n```\nRemember to replace the `x`s with your Pusher app credentials. You can find your app credentials under the **Keys** section on the **Overview** tab.\n\nNow that we've set up the back-end of our project, let's move on to setting up the front-end. Laravel provides some front-end frameworks and libraries, including - `Bootstrap`, `Vuejs` and `Axios` which we'll be using in this tutorial.\n\nWe'll also be making use of Laravel Mix, which is a wrapper around Webpack that will help us compile our CSS and JavaScript.\n\nBut first, we need to install these dependencies through `NPM`:\n\n```\nnpm install\n```\nTo subscribe and listen to events, Laravel provides Laravel Echo, which is a JavaScript library that makes it painless to subscribe to channels and listen for events broadcast by Laravel. We'll need to install it along with the Pusher JavaScript library:\n\n```\nnpm install --save laravel-echo pusher-js\n```\nOnce installed, we need to tell Laravel Echo to use Pusher. At the bottom of the `resources/assets/js/bootstrap.js` file, Laravel have stubbed Echo integration though it is commented out. Simply uncomment the Laravel Echo section and update the details with:\n\n```\n// resources/assets/js/bootstrap.js\n\nimport Echo from \"laravel-echo\"\n\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: 'xxxxxxxxxxxxxxxxxxxx',\n    cluster: 'eu',\n    encrypted: true\n});\n```\nRemember to replace the `x`s with your Pusher app key. Also use the same `cluster` that you specified earlier in `config/broadcasting.php`.\n\nNow that we are done with setting up Laravel and Pusher and other dependencies, it time to start building our chat application.\n\n## Authenticating Users\n\nOur chat app will require users to be logged in before they can begin to chat. So, we need an authentication system, which with Laravel is as simple as running an `artisan` command in the terminal:\n\n```\nphp artisan make:auth\n```\nThis will create the necessary routes, views and controllers needed for an authentication system.\n\nBefore we go on to create users, we need to run the `users` migration that comes with a fresh installation of Laravel. But to do this, we first need to setup our database. Open the `.env` file and enter your database details:\n\n```\n// .env\n\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=laravel-chat\nDB_USERNAME=root\nDB_PASSWORD=root\n```\nUpdate with your own database details. Now, we can run our migration:\n\n```\nphp artisan migrate\n```\nThere's a bug in Laravel 5.4 if you're running a version of MySQL older than 5.7.7 or MariaDB older than 10.2.2. More info [here](https://github.com/laravel/framework/issues/17508). This can be fixed by replacing the `boot()` of `app/Providers/AppServiceProvider.php` with:\n\n```\n// app/Providers/AppServiceProvider.php\n\n// remember to use\nIlluminate\\Support\\Facades\\Schema;\n\n/**\n * Bootstrap any application services.\n *\n * @return void\n */\npublic function boot()\n{\n  Schema::defaultStringLength(191);\n}\n```\n## Message Model and Migration\n\nCreate a `Message` model along with the migration file by running the command:\n\n```\nphp artisan make:model Message -m\n```\nOpen the `Message` model and add the code below to it:\n\n```\n// app/Message.php\n\n/**\n * Fields that are mass assignable\n *\n * @var array\n */\nprotected $fillable = ['message'];\n```\nWithin the `databases/migrations` directory, open the `messages` table migration that was created when we ran the command above and update the `up` method with:\n\n```\nSchema::create('messages', function (Blueprint $table) {\n  $table-\u003eincrements('id');\n  $table-\u003einteger('user_id')-\u003eunsigned();\n  $table-\u003etext('message');\n  $table-\u003etimestamps();\n});\n```\nThe `message` will have five columns: an auto increment `id`, `user_id`, `message`, `created_at` and `updated_at`. The `user_id` column will hold the ID of the user that sent a message and the `message` column will hold the actual message that was sent. Run the migration:\n\n```\nphp artisan migrate\n```\n## User To Message Relationship\n\nWe need to setup the relationship between a user and a message. A user can send many messages while a particular message was sent by a user. So, the relationship between the user and message is a one to many relationship. To define this relationship, add the code below to `User` model:\n\n```\n// app/User.php\n\n/**\n * A user can have many messages\n *\n * @return \\Illuminate\\Database\\Eloquent\\Relations\\HasMany\n */\npublic function messages()\n{\n  return $this-\u003ehasMany(Message::class);\n}\n```\nNext, we need to define the inverse relationship by adding the code below to `Message` model:\n\n```\n// app/Message.php\n\n/**\n * A message belong to a user\n *\n * @return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsTo\n */\npublic function user()\n{\n  return $this-\u003ebelongsTo(User::class);\n}\n```\n## Defining App Routes\n\nLet's create the routes our chat app will need. Open `routes/web.php` and replace the routes with the code below to define three simple routes:\n\n```\n// routes/web.php\n\nAuth::routes();\n\nRoute::get('/', 'ChatsController@index');\nRoute::get('messages', 'ChatsController@fetchMessages');\nRoute::post('messages', 'ChatsController@sendMessage');\n```\nThe homepage will display chat messages and an input field to type new messages. A `GET` `messages` route will fetch all chat messages and a `POST` `messages` route will be used for sending new messages.\n\n**NOTE**: Since we have removed the `/home` route, you might want to update the `redirectTo` property of both `app/Http/Controllers/Auth/LoginController.php` and `app/Http/Controllers/Auth/RegisterController.php` to:\n\n```language-php\nprotected $redirectTo = '/';\n```\n## ChatsController\n\nNow let's create the controller which will handle the logic of our chat app. Create a `ChatsController` with the command below:\n\n```\nphp artisan make:controller ChatsController\n```\nOpen the new create `app/Http/Controllers/ChatsController.php` file and add the following code to it:\n\n```\n// app/Http/Controllers/ChatsController.php\n\nuse App\\Message;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\n\npublic function __construct()\n{\n  $this-\u003emiddleware('auth');\n}\n\n/**\n * Show chats\n *\n * @return \\Illuminate\\Http\\Response\n */\npublic function index()\n{\n  return view('chat');\n}\n\n/**\n * Fetch all messages\n *\n * @return Message\n */\npublic function fetchMessages()\n{\n  return Message::with('user')-\u003eget();\n}\n\n/**\n * Persist message to database\n *\n * @param  Request $request\n * @return Response\n */\npublic function sendMessage(Request $request)\n{\n  $user = Auth::user();\n\n  $message = $user-\u003emessages()-\u003ecreate([\n    'message' =\u003e $request-\u003einput('message')\n  ]);\n\n  return ['status' =\u003e 'Message Sent!'];\n}\n```\nUsing the `auth` middleware in `ChatsController`'s `__contruct()` indicates that all the methods with the controller will only be accessible to authorized users. Then the `index()` will simply return a view file which we will create shortly. The `fetchMessages()` return a `JSON` of all messages along the their users. Lastly, the `sendMessage()` will persist the message into the database and return a status message.\n\n## Creating The Chat App View\n\nFor the chat app view, we'll be making use of [ Bootsnipp chat snippet](http://bootsnipp.com/snippets/featured/collapsible-chat-widget) with some few modifications.\n\nCreate a new `resources/views/chat.blade.php` file and paste into it:\n\n```\n\u003c!-- resources/views/chat.blade.php --\u003e\n\n@extends('layouts.app')\n\n@section('content')\n\n\u003cdiv class=\"container\"\u003e\n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-8 col-md-offset-2\"\u003e\n            \u003cdiv class=\"panel panel-default\"\u003e\n                \u003cdiv class=\"panel-heading\"\u003eChats\u003c/div\u003e\n\n                \u003cdiv class=\"panel-body\"\u003e\n                    \u003cchat-messages :messages=\"messages\"\u003e\u003c/chat-messages\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"panel-footer\"\u003e\n                    \u003cchat-form\n                        v-on:messagesent=\"addMessage\"\n                        :user=\"{{ Auth::user() }}\"\n                    \u003e\u003c/chat-form\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n@endsection\n```\nNotice we have some custom tags with the `chat` view, these are `Vue` components which we'll create soon. The `chat-messages` component will display our chat messages and the `chat-form` will provide an input field and a button to send the messages.\n\nBefore we go to create our `Vue` component, let's add the styles for the `chat` view. Open `resources/views/layouts/app.blade.php` (which was created when we ran `make:auth`) and add the code below just after the styles link:\n\n```\n\u003c!-- resources/views/layouts/app.blade.php --\u003e\n\n\u003cstyle\u003e\n  .chat {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n  }\n\n  .chat li {\n    margin-bottom: 10px;\n    padding-bottom: 5px;\n    border-bottom: 1px dotted #B3A9A9;\n  }\n\n  .chat li .chat-body p {\n    margin: 0;\n    color: #777777;\n  }\n\n  .panel-body {\n    overflow-y: scroll;\n    height: 350px;\n  }\n\n  ::-webkit-scrollbar-track {\n    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\n    background-color: #F5F5F5;\n  }\n\n  ::-webkit-scrollbar {\n    width: 12px;\n    background-color: #F5F5F5;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);\n    background-color: #555;\n  }\n\u003c/style\u003e\n```\nLooking at the `resources/assets/js/bootstrap.js`, you will notice that Laravel has set up some of the front-end dependencies (jQuery, Bootstrap, Lodash, Vue, Axios, Echo) that are included out of the box. We can start using `Vue` without any further setup.\n\nCreate a new `ChatMessages.vue` file within `resources/assets/js/components` and paste the code below into it:\n\n```\n// resources/assets/js/components/ChatMessages.vue\n\n\u003ctemplate\u003e\n    \u003cul class=\"chat\"\u003e\n        \u003cli class=\"left clearfix\" v-for=\"message in messages\"\u003e\n            \u003cdiv class=\"chat-body clearfix\"\u003e\n                \u003cdiv class=\"header\"\u003e\n                    \u003cstrong class=\"primary-font\"\u003e\n                        {{ message.user.name }}\n                    \u003c/strong\u003e\n                \u003c/div\u003e\n                \u003cp\u003e\n                    {{ message.message }}\n                \u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/li\u003e\n    \u003c/ul\u003e\n\u003c/template\u003e\n\n\u003cscript\u003e\n  export default {\n    props: ['messages']\n  };\n\u003c/script\u003e\n```\nThis component accepts an array of messages as `props`, loops through them and displays the name of the user who sent the message and the message body.\n\nNext, create a new `ChatForm.vue` file within `resources/assets/js/components` and paste the code below into it:\n\n```\n// resources/assets/js/components/ChatForm.vue\n\n\u003ctemplate\u003e\n    \u003cdiv class=\"input-group\"\u003e\n        \u003cinput id=\"btn-input\" type=\"text\" name=\"message\" class=\"form-control input-sm\" placeholder=\"Type your message here...\" v-model=\"newMessage\" @keyup.enter=\"sendMessage\"\u003e\n\n        \u003cspan class=\"input-group-btn\"\u003e\n            \u003cbutton class=\"btn btn-primary btn-sm\" id=\"btn-chat\" @click=\"sendMessage\"\u003e\n                Send\n            \u003c/button\u003e\n        \u003c/span\u003e\n    \u003c/div\u003e\n\u003c/template\u003e\n\n\u003cscript\u003e\n    export default {\n        props: ['user'],\n\n        data() {\n            return {\n                newMessage: ''\n            }\n        },\n\n        methods: {\n            sendMessage() {\n                this.$emit('messagesent', {\n                    user: this.user,\n                    message: this.newMessage\n                });\n\n                this.newMessage = ''\n            }\n        }    \n    }\n\u003c/script\u003e\n```\nThe `ChatForm` component displays an input field and a send button. It accepts the authenticated user as `props`. It also contains `newMessage` data which is bound to the input field. When the send button is clicked or the enter key is pressed on the input field, a `sendMessage()` is called. The `sendMessage()` simply triggers a `messagesent` event which passes along the message that was sent by the user to the root `Vue` instance (which will handle the actual sending of the message) and finally clear the input filed.\n\nNext, we need to register our component in the root `Vue` instance. Open the `resources/assets/js/app.js` and update with code below:\n\n```\n// resources/assets/js/app.js\n\nrequire('./bootstrap');\n\nVue.component('chat-messages', require('./components/ChatMessages.vue'));\nVue.component('chat-form', require('./components/ChatForm.vue'));\n\nconst app = new Vue({\n    el: '#app',\n\n    data: {\n        messages: []\n    },\n\n    created() {\n        this.fetchMessages();\n    },\n\n    methods: {\n        fetchMessages() {\n            axios.get('/messages').then(response =\u003e {\n                this.messages = response.data;\n            });\n        },\n\n        addMessage(message) {\n            this.messages.push(message);\n\n            axios.post('/messages', message).then(response =\u003e {\n              console.log(response.data);\n            });\n        }\n    }\n});\n```\nOnce the `Vue` instance is created, using `Axios`, we make a `GET` request to the `messages` route and fetch all the messages then pass it to the messages array that will be displayed on the `chat` view. The `addMessage()` receives the message that was emitted from the `ChatForm` component, pushes it to the messages array and makes a `POST` request to the `messages` route with the message.\n\n## Broadcasting Message Sent Event\n\nTo add the realtime interactions to our chat app, we need to broadcast some kind of events based on some activities. In our case, we'll fire a `MessageSent` when a user sends a message. First, we need to create an event, we'll call it `MessageSent`:\n\n```\nphp artisan make:event MessageSent\n```\nThis will create a new `MessageSent` event class within the `app/Events` directory. This class must implement the `ShouldBroadcast` interface. The class should look like:\n\n```\n// app/Events/MessageSent.php\n\nuse App\\User;\nuse App\\Message;\nuse Illuminate\\Broadcasting\\Channel;\nuse Illuminate\\Queue\\SerializesModels;\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Broadcasting\\PresenceChannel;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n\nclass MessageSent implements ShouldBroadcast\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    /**\n     * User that sent the message\n     *\n     * @var User\n     */\n    public $user;\n\n    /**\n     * Message details\n     *\n     * @var Message\n     */\n    public $message;\n\n    /**\n     * Create a new event instance.\n     *\n     * @return void\n     */\n    public function __construct(User $user, Message $message)\n    {\n        $this-\u003euser = $user;\n        $this-\u003emessage = $message;\n    }\n\n    /**\n     * Get the channels the event should broadcast on.\n     *\n     * @return Channel|array\n     */\n    public function broadcastOn()\n    {\n        return new PrivateChannel('chat');\n    }\n}\n```\nWe defined two public properties that will be the data that will be passed along to the channel we are broadcasting to.\n\n**NOTE:** These properties must be **public** for it to be passed along to the channel.\n\nSince our chat app is an authenticated-only app, we create a private channel called `Chat`, which only authenticated users will be able to connect to. Using the `PrivateChannel` class, Laravel is smart enough to know that we are creating a private channel, so don't prefix the channel name with `private-` (as specified by Pusher), Laravel will add the `private-` prefix under the hood.\n\nNext, we need to update the `sendMessage()` of `ChatsController` to broadcast the `MessageSent` event:\n\n```\n// app/Http/Controllers/ChatsController.php\n\n//remember to use\nuse App\\Events\\MessageSent;\n\n/**\n * Persist message to database\n *\n * @param  Request $request\n * @return Response\n */\npublic function sendMessage(Request $request)\n{\n  $user = Auth::user();\n\n  $message = $user-\u003emessages()-\u003ecreate([\n    'message' =\u003e $request-\u003einput('message')\n  ]);\n\n  broadcast(new MessageSent($user, $message))-\u003etoOthers();\n\n  return ['status' =\u003e 'Message Sent!'];\n}\n```\nSince we created a private channel, only authenticated users will be able to listen on the `chat` channel. So, we need a way to authorize that the currently authenticated user can actually listen on the channel. This can be done by in the `routes/channels.php` file:\n\n```\n// routes/channels.php\n\nBroadcast::channel('chat', function ($user) {\n  return Auth::check();\n});\n```\nWe pass to the `channel(),` the name of our channel and a callback function that will either return `true` or `false` depending on whether the current user is authenticated.\n\nNow when a message is sent, the `MessageSent` event will be broadcast to Pusher. We are using the `toOthers()` which allows us to exclude the current user from the broadcast's recipients.\n\n## Listening For Message Sent Event\n\nOnce the `MessageSent` event is broadcast, we need to listen for this event so we can update the chat messages with the newly sent message. We can do so by adding the code snippet below to `created()` of `resources/assets/js/app.js` just after `this.fetchMessages()`:\n\n```language-javascript\n// resources/assets/js/app.js\n\nEcho.private('chat')\n  .listen('MessageSent', (e) =\u003e {\n    this.messages.push({\n      message: e.message.message,\n      user: e.user\n    });\n  });\n```\nWe subscribe to the `chat` channel using Echo's `private()` since the channel is a private channel. Once subscribed, we listen for the `MessageSent` and based on this, update the chat messages array with the newly sent message.\n\nBefore testing out our chat app, we need to compile the JavaScript files using Laravel Mix using:\n\n```\nnpm run dev\n```\nNow we can start our chat app by running:\n\n```\nphp artisan serve\n```\nOur chat app is done as we can now send and receive messages in realtime.\n\n## Conclusion\n\nYou can see how straightforward it is to build a realtime app with Laravel and Pusher. With Pusher, you are not limited to chat apps, you can build any application that requires realtime interactivity. So, go [create a free Pusher account](https://pusher.com/signup) and start building great applications!","metaTitle":"Build a chat app with Laravel","metaDescription":"Build a Laravel chat application using Vue.js and use Pusher to send and receive realtime messages. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2C5JG7QhtqG04gAWegceOu","type":"Entry","createdAt":"2018-02-22T15:02:45.434Z","updatedAt":"2020-06-19T14:22:41.851Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a multiplayer quiz game with Vue.js","url":"game-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2iE6KIsESkeOEcCmEmCQM8","type":"Entry","createdAt":"2018-02-13T12:06:21.229Z","updatedAt":"2018-02-14T10:08:19.561Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Yomi Eluwande","url":"yomi-eluwande","email":"yomi.eluwande@gmail.com","twitter":"https://twitter.com/yomieluwande","github":"https://github.com/yomete","guestWriter":true}}],"projectRepo":"https://github.com/yomete/hamiltonlyrics","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4IiTE4WzzyQkoeAoaOqgcu","type":"Entry","createdAt":"2018-02-12T15:10:28.101Z","updatedAt":"2018-02-26T12:31:12.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Multiplayer Game","url":"multiplayer-game","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2017-09-04","description":"Build a realtime multiplayer trivia game with Vue.js, Node.js and Pusher.","prerequisite":"A basic understanding of Vue.js and Node.js are needed to follow this tutorial.","content":"As developers, deploying applications and websites can be a pain point at times and we generally tend to prefer solutions that are easy and scalable. \n\nHosting solutions that require SSHing and having to make configurations and a million things to do before deploying can (and will) get tedious after a while. This is where Firebase Hosting comes in.\n\nWe’ll build a static website and deploy it to the web using Firebase Hosting. We are going to build a realtime multiplayer trivia game, the game is going to work like the popular multiplayer game [QuizUp](https://www.quizup.com/en). \n\nHere’s how the game is going to work. The questions are going to be gotten from the lyrics from [Hamilton: An American Musical](http://www.hamiltonthemusical.co.uk/) and users have to answer correctly the name of the character in the musical who sang that line. The game tests the user’s knowledge of Hamilton and users can play for as long as they like. See a demo below.\n\nhttps://player.vimeo.com/video/230121610\n\nOur game will be built with Vue.js and will use Pusher’s [**Client Events**](https://pusher.com/docs/client_api_guide/client_events) and [**Presence Channels**](https://pusher.com/docs/client_api_guide/client_presence_channels) to make sure a user’s move is shown realtime.\n\n## What are Presence Channels?\n\nPusher’s Presence channels expose the additional feature of an awareness of who is subscribed to that channel. This gives developers the ability to build features like chat rooms, collaborators on a document and multiplayer games.\n\nAll Presence Channels must be subscribed with the prefix of `presence-` and as with private channels a HTTP Request is made to a configurable authentication URL to determine if the current user has permissions to access the channel.\n\n## What are Client Events?\n\nClient events are simply a way in which events can be triggered directly from the client-side as opposed to triggering from the backend server. Client Events are used in instances where some actions may not need validation or persistence and can go directly via the socket to all the other clients connected to the channel.\n\nIn our case, we use the Client Events to update a user on the current score of the other user playing the game.\n\nClient Events have a number of enforced restrictions to ensure that the user subscribing to the channel is an authenticated user:\n\n1. Client events must be enabled for the application. You can do this in the *Settings* tab for your app within the Pusher dashboard.\n2. The user must be subscribed to the channel that the event is being triggered on.\n3. Client events can only be triggered on private and presence channels because they require authentication.\n4. Client events must be prefixed by `client-`. Events with any other prefix will be rejected by the Pusher server, as will events sent to channels to which the client is not subscribed.\n\nYou can read more on Client Events by going through the [documentation](https://pusher.com/docs/client_api_guide/client_events#trigger-events).\n\n## Setting up Pusher\n\nLog in to your [dashboard](http://dashboard.pusher.com) (or [create a](https://pusher.com/) [free](https://pusher.com/) [account](https://pusher.com/) if you don’t already have one) and create a new app. Copy your `app_id`, `key`, `secret` and `cluster` and store them somewhere as we’ll be needing them later. \nOne more thing. In your dashboard, navigate to the App Settings tab and make sure the **Enable Client Events** checkbox is checked. This lets clients communicate directly with each other.\n\n## Initializing the Vue.js application\nVue.js is the preferred JavaScript framework to build the game because of its popularity and low barrier to getting started. There are some Vue.js tutorials on Pusher which you can read [here](https://blog.pusher.com/build-simple-real-time-app-with-vue-js-2-0-and-pusher/), [here](https://blog.pusher.com/build-realtime-chart-with-vuejs-pusher/) and [here](https://blog.pusher.com/exploring-real-time-apps-with-vuejs-es2016-and-webpack/).\n\nWe’re going to be using the [vue-cli](https://github.com/vuejs/vue-cli) to scaffold a Vue.js project. The `vue-cli` is a simple CLI for scaffolding Vue.js projects. It ships with many templates like [webpack](https://github.com/vuejs-templates/webpack), [browserify](https://github.com/vuejs-templates/browserify), [pwa](https://github.com/vuejs-templates/pwa) and [simple](https://github.com/vuejs-templates/simple).  We’ll install `vue-cli` and then use it to bootstrap the app using the webpack template, with the following commands:\n\n```\n    npm install -g vue-cli\n    vue init webpack hamiltonlyrics\n```\n\nThis creates a Vue.js app inside the a folder titled `hamiltonlyrics`. Navigate into the folder and run the command `npm run dev` to see the Vue.js application.\n\n## Setting up a Node.js Server\nAs explained above, Client Events require authentication to make sure a user is subscribed to the channel. Therefore, we are going to create a Node.js server so that Client Events can have an authentication route.\n\nLet’s install the modules we’ll need for the Node.js server.\n\n```\n    npm i express body-parser pusher\n```\n\nIn the root of the project directory, create a file named `server.js` and type in the following code:\n\n```\n    // server.js\n    const express = require('express')\n    const path = require('path')\n    const bodyParser = require('body-parser')\n    const app = express()\n    const Pusher = require('pusher')\n    const crypto = require('crypto')\n    \n    //initialize Pusher with your appId, key and secret\n    const pusher = new Pusher({\n      appId: 'APP_ID',\n      key: 'APP_KEY',\n      secret: 'APP_SECRET',\n      cluster: 'YOUR_CLUSTER',\n      encrypted: true\n    })\n    \n    // Body parser middleware\n    app.use(bodyParser.json())\n    app.use(bodyParser.urlencoded({ extended: false }))\n    \n    // The code below helps to fix any potential CORS issue.\n    app.use((req, res, next) =\u003e {\n      // Website you wish to allow to connect\n      res.setHeader('Access-Control-Allow-Origin', '*')\n      // Request methods you wish to allow\n      res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE')\n      // Request headers you wish to allow\n      res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type')\n      // Set to true if you need the website to include cookies in the requests sent\n      // to the API (e.g. in case you use sessions)\n      res.setHeader('Access-Control-Allow-Credentials', true)\n      // Pass to next layer of middleware\n      next()\n    })\n    \n    // Index API route for the Express app\n    app.get('/', (req, res) =\u003e {\n      res.send('Welcome')\n    })\n    \n    // API route used by Pusher as a way of authenticating users\n    app.post('/pusher/auth', (req, res) =\u003e {\n      let socketId = req.body.socket_id\n      let channel = req.body.channel_name\n      // Generate a random string and use as presence channel user_id\n      let presenceData = {\n        user_id: crypto.randomBytes(16).toString('hex')\n      }\n      let auth = pusher.authenticate(socketId, channel, presenceData)\n      res.send(auth)\n    })\n    \n    // Set port to be used by Node.js\n    app.set('port', (5000))\n    \n    app.listen(app.get('port'), () =\u003e {\n      console.log('Node app is running on port', app.get('port'))\n    })\n```  \n\nIn the code block above, Pusher is initialized with the dashboard credentials. The `/pusher/auth` route is also created.\n\nNow we can simply run `node server.js` and the Node.js app should be up and running. Before we go on let’s add the command above to the existing `scripts` object in the `package.json` file so we don’t have to type in the command every time. Open up the `package.json` file and edit the `dev` line inside the `scripts` object with the one below.\n\n```\n    \"dev\": \"nodemon server.js \u0026 node build/dev-server.js\"\n```\n\n## Building the game\n\nLet’s get started on building the game. We’ll be working with two files throughout the course of this tutorial, a `Home.vue` file and a `ChannelDetails.vue` file.\n\nNavigate to the `components` folder inside the `src` folder and create a new file called `ChannelDetails.vue`. This will contain the JavaScript code that establishes a connection to Pusher from the client side. Open the file and type in the following code:\n\n```\n    \u003cscript\u003e\n      import Pusher from 'pusher-js'\n      const pusher = new Pusher('APP_KEY', {\n        cluster: 'YOUR_CLUSTER',\n        encrypted: true,\n        authEndpoint: 'http://localhost:5000/pusher/auth'\n      })\n    \n      export default ({\n        getPresenceID () {\n          // This function checks the address bar of the browser for params\n          let getQueryString = (field, url) =\u003e {\n            let href = url ? url : window.location.href\n            let reg = new RegExp('[?\u0026]' + field + '=([^\u0026#]*)', 'i')\n            let string = reg.exec(href)\n            return string ? string[1] : null\n          }\n          // Appends 'presence' to the result\n          let id = getQueryString('id')\n          id = 'presence-' + id\n          return id\n        },\n        subscribeToPusher () {\n          let presenceid = this.getPresenceID()\n          let channel = pusher.subscribe(presenceid)\n          return channel\n        }\n      })\n    \u003c/script\u003e\n```\n\nIf you use ESLint, you should be getting a warning that the Pusher JS library has not been installed. That can be installed by running this command `npm i pusher-js`. So what’s happening up there?\n\nFirstly, Pusher is imported and a connection is established using credentials like APP_KEY, and CLUSTER. An authEndpoint is added to the Pusher instance. The authEndpoint is the endpoint Pusher uses to authenticate users. \n\nSecondly, there are two functions above which are being exported. The first function `getPresenceID()` checks the address bar of the browser for URL parameters and then appends `presence` to the result. This is done so that the channel name will always have a prefix of `presence-` since we are using [Presence channels](https://pusher.com/docs/client_api_guide/client_presence_channels).\n\nThe second function uses the result of the `getPresenceID()` function and uses it to subscribe to a channel (a Presence Channel to be specific).\n\nThe next thing to do is to start writing code for the game itself. Open up the `App.vue` file inside the `src` folder and make sure its content is similar to the code below: \n\n```\n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003crouter-view\u003e\u003c/router-view\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n      name: 'app'\n    }\n    \u003c/script\u003e\n    \n    \u003cstyle\u003ea\n      html {\n        background: #7fd4d3;\n      }\n      body {\n        background: #7fd4d3;\n        padding: 20px;\n      }\n      #app {\n        height: 100vh;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        text-align: center;\n        color: #fff;\n      }\n      .fade-enter-active, .fade-leave-active {\n        transition: opacity .5s\n      }\n      .fade-enter, .fade-leave-to /* .fade-leave-active in \u003c2.1.8 */ {\n        opacity: 0\n      }\n    \u003c/style\u003e\n```\n\nNavigate to the `src/components` directory and you should see a `Hello.vue` file. You can either delete that file or rename to `Home.vue` as we will be needing a `Home.vue` file inside the components folder.  Open up the file and type in/replace with the code below:\n\n```\n    \u003cscript\u003e\n      // Import ChannelDetails component created above\n      import ChannelDetails from '@/components/ChannelDetails'\n      // An array that holds the lyrics questions and their correct answers. All questions can be seen here https://gist.github.com/yomete/2d851c2adc008a9763a0db9f85879083\n      const lyrics = [\n        {\n          lyric: 'When he was ten his father split, full of it, debt-ridden. Two years later, see Alex and his mother bed-ridden. Half-dead sittin\\' in their own sick, the scent thick',\n          options: [{name: 'Aaron Burr', correct: false}, {name: 'James Madison', correct: false}, {name: 'John Laurens', correct: false}, {name: 'Eliza Hamilton', correct: true}],\n          answer: 'Eliza Hamilton'\n        },\n        {\n          lyric: 'I am sailing off to London. I’m accompanied by someone who always pays. I have found a wealthy husband. Who will keep me in comfort for all my days. He is not a lot of fun, but there’s no one',\n          options: [{name: 'Eliza', correct: false}, {name: 'Peggy', correct: false}, {name: 'Angelica', correct: true}, {name: 'Maria', correct: false}],\n          answer: 'Angelica'\n        }\n      ]\n      export default {\n        name: 'home',\n        data () {\n          return {\n            // This holds the current presence-id\n            presenceid: null,\n            // This checks if a question has been answered, default to false\n            hasAnswered: false,\n            // This holds the current question\n            question: null,\n            // This holds the options for the current question\n            options: null,\n            // This holds the correct answer for the current question\n            correctanswer: null,\n            // This is used for a countdown timer\n            count: null,\n            // Number of players in the game\n            players: 1,\n            // This checks if there's a second player, it becomes true when players = 2\n            secondplayer: false,\n            // This holds the player data for both players\n            playerdata: {\n              one: {\n                id: null,\n                score: 0,\n                userid: null\n              },\n              two: {\n                id: null,\n                score: 0,\n                userid: null\n              }\n            },\n            // This holds the userid for the current player\n            userid: null,\n            // This holds the current URL of the game\n            url: null\n          }\n        },\n        created () {\n          this.fetchData()\n        },\n        methods: {\n          fetchData () {},\n          getUniqueId () {}\n          checkPresenceID () {}\n          checkAnswer (item) {}\n          getRandomQuestions (array, count) {}\n          getNewQuestion () {}\n        } \n      }\n    \u003c/script\u003e\n    \n    \u003c!-- Add \"scoped\" attribute to limit CSS to this component only --\u003e\n    \u003cstyle scoped\u003e\n      .home {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        height: 100vh;\n      }\n      h1 {\n        font-size: 3rem;\n        font-weight: bold;\n      }\n      p {\n        font-size: 1.5rem;\n        margin: 0 0 20px 0;\n      }\n      .play--button {\n        background-color: white;\n        color: #7fd4d3;\n        font-weight: bold;\n        border-radius: 20px;\n        letter-spacing: 1px;\n        padding: 20px;\n        transition: all .3s ease;\n        text-shadow: 0 1px 3px rgba(36,180,126,.4);\n        text-transform: uppercase;\n        box-shadow: 0 4px 6px rgba(50,50,93,.11), 0 1px 3px rgba(0,0,0,.08);\n      }\n      .play--button:hover {\n        background-color: white;\n        color: #7fd4d3;\n        transform: translateY(-1px);\n        box-shadow: 0 7px 14px rgba(50,50,93,.1), 0 3px 6px rgba(0,0,0,.08);\n      }\n      .fade-enter-active, .fade-leave-active {\n        transition: opacity .5s\n      }\n      .fade-enter, .fade-leave-to {\n        opacity: 0\n      }\n      a {\n        color: #fff;\n      }\n      p {\n        color: #fff;\n      }\n      h1 {\n        font-size: 3rem;\n        font-weight: bold;\n        text-align: center;\n      }\n      .fade-enter-active, .fade-leave-active {\n        transition: opacity .5s\n      }\n      .fade-enter, .fade-leave-to /* .fade-leave-active in \u003c2.1.8 */ {\n        opacity: 0\n      }\n      .play--button {\n        background-color: white;\n        color: #7fd4d3;\n        font-weight: bold;\n        border-radius: 20px;\n        letter-spacing: 1px;\n        padding: 20px;\n        transition: all .3s ease;\n        text-shadow: 0 1px 3px rgba(36,180,126,.4);\n        text-transform: uppercase;\n        box-shadow: 0 4px 6px rgba(50,50,93,.11), 0 1px 3px rgba(0,0,0,.08);\n        position: absolute;\n        top: 20px;\n        right: 20px;\n        z-index: 5;\n      }\n      .play--button:hover {\n        background-color: white;\n        color: #7fd4d3;\n        transform: translateY(-1px);\n        box-shadow: 0 7px 14px rgba(50,50,93,.1), 0 3px 6px rgba(0,0,0,.08);\n      }\n      .hamilton--header--text {\n        margin-top: 50px;\n      }\n      .hamilton--inner {\n        margin-top: 20px;\n      }\n      .hamilton--inner .left{\n        text-align: left;\n      }\n      .hamilton--inner .right{\n        text-align: right;\n      }\n      .title {\n        font-weight: bold;\n      }\n      .hamilton--lyrics--text {\n        width: 600px;\n        margin: 0 auto;\n      }\n      .hamilton--lyrics--text p {\n        font-weight: bold;\n      }\n      .hamilton--answers a{\n        display: block;\n        border: 3px solid white;\n        border-radius: 50px;\n        margin: 20px auto;\n        width: 500px;\n        padding: 10px;\n      }\n      .wronganswer {\n        background-color: #ec6969;\n        border: none !important;\n        opacity: 0.4;\n        transition: background-color 0.5s ease;\n      }\n      .correctanswer {\n        background-color: #00c4a7;\n        border: none !important;\n        transition: background-color 0.5s ease;\n      }\n    \u003c/style\u003e\n```\n\nIn the code block above, we set up the foundation for the game and how it’s going to work. Inside the `\u003cstyle\u003e` tag and inside the `\u003cscript\u003e` tag, there are a couple of functions that we will need to create and add logic to.\n\nLet’s take a look at the functions we need to create.\n\n### fetchData ()\nThis function is called inside the `created` hook and that means it will always be called whenever the instance has been created. Let’s write the code for this function.\n\n```\n    // Sets the data instance presenceid variable to the result of the getUniqueId function\n    this.presenceid = this.getUniqueId()\n    // This checks if there's no presence ID in the URL via the checkPresenceID function and appends the presenceid to the current URL so that we can have the URL end with a parameter like this https://hamilton-lyrics.firebaseapp.com/#/?id=agbew0gz\n    if (!this.checkPresenceID()) {\n      var separator = (window.location.href.indexOf('?') === -1) ? '?' : '\u0026'\n      window.location.href = window.location.href + separator + this.presenceid\n    }\n    // Sets the data instance url variable to the current URL.\n    this.url = window.location.href\n    // Gets a new question via the getNewQuestion() function\n    this.getNewQuestion()\n    // The channel variable is set to to the subscribeToPusher function in ChannelDetails.\n    let channel = ChannelDetails.subscribeToPusher()\n    \n    // The pusher:member_added event is triggered when a user joins a channel. We increase the number of players by one and also set the secondplayer boolean to true.\n    channel.bind('pusher:member_added', members =\u003e {\n      this.players += 1\n      this.secondplayer = true\n    })\n    \n    // Once a subscription has been made to a presence channel, an event is triggered with a members iterator. \n    channel.bind('pusher:subscription_succeeded', members =\u003e {\n      // This checks if its just one player online and sets them up as player one and the required info for the game\n      if (members.count === 1 \u0026\u0026 !this.playerdata.one.id) {\n        this.playerdata.one.id = members.myID\n        this.playerdata.one.userid = 1\n        this.userid = 1\n      // This checks if there's a player online already and sets the new player as player two.\n      } else if (members.count === 2) {\n        this.secondplayer = true\n        this.playerdata.two.id = members.myID\n        this.playerdata.two.userid = 2\n        this.userid = 2\n      }\n    })\n    // The pusher:member_removed is triggered when a user leaves a channel. We decrease the number of players by one and also set the secondplayer boolean to false.\n    channel.bind('pusher:member_removed', member =\u003e {\n      this.players -= 1\n      if (member.count === 1) {\n        this.secondplayer = false\n      }\n    })\n    // This function receives new data from Pusher and updates the exisiting scores. This is what updates each player's score in realtime.\n    channel.bind('client-send', (data) =\u003e {\n      if (this.userid === 1) {\n        this.playerdata.two.score = data.data.two.score\n      } else if (this.userid === 2) {\n        this.playerdata.one.score = data.data.one.score\n      }\n    })\n```\n\n### getUniqueId ()\nThis function simply generates random alphanumeric characters and adds a prefix of `id=` to the result.\n\n```\n    getUniqueId () {\n      return 'id=' + Math.random().toString(36).substr(2, 8)\n    }\n```\n\n### checkPresenceID ()\nThis function checks the address bar of the browser for URL parameters, in this case, any parameter that starts with `?id=` prefix and then returns the alphanumeric character at the end of the prefix. For example, this URL `https://hamilton-lyrics.firebaseapp.com/#/?id=agbew0gz` will return `agbew0gz`.\n\n```\n    checkPresenceID () {\n      let getQueryString = (field, url) =\u003e {\n        let href = url ? url : window.location.href\n        let reg = new RegExp('[?\u0026]' + field + '=([^\u0026#]*)', 'i')\n        let string = reg.exec(href)\n        return string ? string[1] : null\n      }\n      let id = getQueryString('id')\n      return id\n    }\n```\n\n### checkAnswer ()\nThis function is used to check if the answer chosen is correct or incorrect. If the chosen answer is correct, 10 points will be added to the current score and if the answer is incorrect, 10 points will be deducted. The score is also sent to other subscribers of the channel via the `channel.trigger()` function. At the end of it all, a new question is gotten via the `getNewQuestion()` function.\n\n```\n    checkAnswer (item) {\n      let channel = ChannelDetails.subscribeToPusher()\n      this.hasAnswered = true\n      if (item.name === this.correctanswer) {\n        if (this.userid === 1) {\n          this.playerdata.one.score += 10\n        } else if (this.userid === 2) {\n          this.playerdata.two.score += 10\n        }\n      } else {\n        if (this.userid === 1) {\n          this.playerdata.one.score = Math.max(0, this.playerdata.one.score -= 10)\n        } else if (this.userid === 2) {\n          this.playerdata.two.score = Math.max(0, this.playerdata.two.score -= 10)\n        }\n      }\n      channel.trigger('client-send', {data: this.playerdata})\n      this.count = 3\n      let countdown = setInterval(() =\u003e {\n        this.count -= 1\n        if (this.count === 0) {\n          clearInterval(countdown)\n          this.getNewQuestion()\n        }\n      }, 1000)\n    }\n```\n\n### getRandomQuestions ()\nThis function is used to select questions randomly from the `lyrics` array that holds the various questions. It takes in two arguments, `array` and `count`. \n`array` would be the array we are trying to pick a random item from (`lyrics`) and `count` is the number of item to be chosen (1 item). This function is called in the `getNewQuestion()` function below.\n\n```\n    getRandomQuestions (array, count) {\n      let length = array.length\n      let randomIndexes = []\n      let randomItems = []\n      let index, item\n    \n      count = count | 1\n    \n      while (count) {\n        index = Math.floor(Math.random() * length)\n        if (randomIndexes.indexOf(index) === -1) {\n          count--\n          randomIndexes.push(index)\n        }\n      }\n    \n      randomIndexes.forEach((index) =\u003e {\n        item = array.slice(index, index + 1).pop()\n        randomItems.push(item)\n      })\n    \n      if (randomItems.length === 1) {\n        return randomItems.pop()\n      } else {\n        return randomItems\n      }\n    }\n```\n\n### getNewQuestion ()\nThis function is used to get a new question for the game. It utilizes the `getRandomQuestions()` to get a new random question and sets it to the `question` variable. It also uses the question’s data in the `question` variable to initialize the various data instances.\n\n```\n    getNewQuestion () {\n      let question = this.getRandomQuestions(lyrics, 1)\n      this.question = question\n      this.options = question.options\n      this.correctanswer = question.answer\n      this.hasAnswered = false\n    }\n```\n\nWe are done with the functions. Let’s create the `template` tag and write the HTML code that will display the view for the game.\n\n```\n    \u003ctemplate\u003e\n      \u003ctransition name=\"fade\"\u003e\n        \u003cdiv class=\"home\" v-if=\"!secondplayer\"\u003e\n          \u003cdiv class=\"inner\"\u003e\n            \u003ch1\u003eDo you know your Hamilton Lyrics?\u003c/h1\u003e\n            \u003cp\u003eTest your knowledge of Hamilton: An American Musical by guessing who sang what lyric.\u003c/p\u003e\n            \u003cp\u003eInvite a second player by sending them this link {{url}}.\u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"play\" v-if=\"secondplayer\"\u003e\n          \u003cdiv\u003e\n            \u003cdiv class=\"container hamilton--header--text\"\u003e\n              \u003ch1\u003eDo you know your Hamilton Lyrics?\u003c/h1\u003e\n    \n              \u003cdiv class=\"columns hamilton--inner\"\u003e\n                \u003cdiv class=\"column is-half left\"\u003e\n                  \u003cp class=\"title\"\u003eUser 1\u003c/p\u003e\n                  \u003cp class=\"subtitle\"\u003eTotal Score: {{playerdata.one.score}}\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv v-if=\"secondplayer\" class=\"column is-half right\"\u003e\n                  \u003cp class=\"title\"\u003eUser 2\u003c/p\u003e\n                  \u003cp class=\"subtitle\"\u003eTotal Score: {{playerdata.two.score}}\u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n    \n              \u003cdiv class=\"hamilton--lyrics--text\"\u003e\n                \u003cp\u003e{{question.lyric}}\n                \u003c/p\u003e\n                \u003cdiv class=\"hamilton--answers\"\u003e\n                  \u003ca v-bind:class=\"{ 'wronganswer': hasAnswered \u0026\u0026 !item.correct, 'correctanswer': hasAnswered \u0026\u0026 item.correct}\" @click=\"checkAnswer(item)\" v-for=\"(item, index) in options\"\u003e{{item.name}}\u003c/a\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/transition\u003e\n    \u003c/template\u003e\n```\n\nIn the code above, we enclose everything in a `transition` tag with an attribute of `fade`. There are two `div` sections that display conditionally. The `div` tag with a class of `home` is shown when there’s just one player online and the `div` tag with a class of `play` is only shown when two players are online.\n\nAt the end of it all, your `Home.vue` file should look like [this](https://github.com/yomete/hamiltonlyrics/blob/master/src/components/Home.vue).\n\n## Setting up Firebase Hosting\n\nNow that our application is ready and working well, let’s deploy the application using Firebase Hosting. \n\nGetting started with Firebase Hosting is straightforward. Go over to [console.firebase.google.com](http://console.firebase.google.com) and create a new account or sign in if you already have an account.\n\n\u003e Since this is a platform hosted by Google, you’ll need a Gmail account to be able to sign up and use the Firebase Console\n\nYour dashboard should look like this (if you’re a new user). Let’s add a new project by clicking on the Add Project button.\n\n![multiplayer-game-vuejs-welcome-firebase](//images.contentful.com/1es3ne0caaid/EWv8NkPDpeIWkKy8kimIc/9a23d1ca68009da6bddcbb24af1b4e14/multiplayer-game-vuejs-welcome-firebase.png)\n\nThat opens up a modal box that asks you to give your project a name and also choose your region. Once that’s done, you should be redirected to the project’s dashboard which looks like this.\n\n![multiplayer-game-vuejs-firebase-overview](//images.contentful.com/1es3ne0caaid/kgAqSYiE1iYsSicGaqygI/244d9ddde4552fd2e403d5a6dad75b90/multiplayer-game-vuejs-firebase-overview.png)\n\nThe dashboard menu on the left shows all the Firebase services you can use in your application. \nBefore we start deploying apps with Firebase Hosting, we need to install the Firebase CLI using npm.\n\n```\n    npm install -g firebase-tools\n```\n\nIf you've previously installed Firebase command line tools, run the install command again to make sure you have the latest version. Once the Firebase CLI has been successfully installed, we can deploy apps to Firebase Hosting with a single command.\n\nNext step is to sign in to Google from the terminal so Firebase knows which account to use. Run the command `firebase login` in your terminal. This process takes you to a login page in a browser where you enter your Google credentials and you are then logged in. Now Firebase is installed on our computer and we can begin deployment.\n\n## Preparing the Vue.js app for deployment\n\nNow that we are done with the development of the app, it’s time to deploy the application to production via Firebase Hosting. How exactly do we do that? First of all, we need to build the Vue.js app for production and then run the Firebase deploy command. Let’s get started on that by running the command below.\n\n```\n    npm run build\n```\n\nThe command above helps to minify JS, HTML, and CSS. All static assets are also compiled with version hashes for efficient long-term caching, and a production `index.html` is auto-generated with proper URLs to these generated assets.\n\nOnce the command is done with its process, the production-ready app can be found in the `dist` folder. That is where the `firebase deploy` command will be used.\n \n## Deploying to Firebase\nWe’ll need to initiate Firebase for this project, specifically inside the `dist` folder. So run the command `firebase init`. That command prompts the following:\n\n\n1. You’ll be prompted to choose which of the Firebase CLI feature you want to use, choose **Hosting.**\n2. You’ll be prompted to associate the current project directory with a Firebase project. Choose a Firebase project or create a new one.\n3. You’ll be prompted to type in the name of the folder you want to use as a public directory. This public directory is the folder (relative to your project directory) that will contain Hosting assets to be uploaded with firebase deploy. In this case, the name of the folder is `dist`.\n4. You’ll be prompted to choose whether to configure the project as a single-page app. Choose **Y.**\n\nThe initialization process should be completed and we can run the `firebase deploy` command now. When the deploy process is done, a live URL will be generated automatically by Firebase, in this case, [hamilton-lyrics.firebaseapp.com](https://hamilton-lyrics.firebaseapp.com/). Firebase allows you to connect a domain to your Hosting instance so you can use a custom domain for your applications.\n\n## Conclusion\n\nIn this tutorial, we learnt how to deploy static pages to Firebase Hosting and making it realtime by using Pusher. We saw how to implement Pusher’s [Presence Channels](https://pusher.com/docs/client_api_guide/client_presence_channels) by using it to identify two different users online and then using it to build a multiplayer game. We also learnt how [Client Events](https://pusher.com/docs/client_api_guide/client_events#trigger-events) work, how to trigger events from the client side as opposed to triggering from a backend server.\n\nFirebase offers a slew of services that can help you to build apps faster and you can read about them on the [Firebase site](https://firebase.google.com/).\n\nIf you want to go through the source code for the game above, you can do that on [Github](https://github.com/yomete/hamiltonlyrics). You can also see the live demo at [hamilton-lyrics.firebaseapp.com](https://hamilton-lyrics.firebaseapp.com/).","metaTitle":"Build a multiplayer quiz game with Vue.js","metaDescription":"Build a realtime multiplayer trivia game with Vue.js, Node.js and Pusher. Learn how to deploy static pages to Firebase Hosting and make them realtime using Pusher. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4JQKine90IoqmC2kWGqK8M","type":"Entry","createdAt":"2018-02-22T15:02:45.333Z","updatedAt":"2018-02-27T14:38:55.957Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime table using ASP.NET","url":"realtime-table-aspnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5KlhqILjZSg4wUSqY4Goqg","type":"Entry","createdAt":"2018-02-20T14:39:32.323Z","updatedAt":"2018-10-02T14:31:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Samuel Ogundipe","url":"samuel-ogundipe","email":"ayoogundipe2005@gmail.com","twitter":"https://twitter.com/fucked_down","github":"https://github.com/samuelayo","guestWriter":true}}],"projectRepo":"https://github.com/samuelayo/asp_net_realtime_table","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6xamBfB840ckYKOkIMm6sM","type":"Entry","createdAt":"2018-02-12T14:51:11.677Z","updatedAt":"2018-02-26T12:31:15.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"C#","url":"c-sharp","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-08-09","description":"Create a realtime table of movie titles, which updates once there is new data with ASP.NET and Pusher.\n","prerequisite":"A basic understanding of ASP.NET and Vue.js is needed to follow this tutorial.","content":"We often need to display data in a table. However, unless it’s a realtime table, we need to reload to view new data each time that it’s added. For example, take a table of movies arranged by the year they were released. Each time a movie is added, we would not know of the changes until we reload our page - which is not the best experience for a user.\n\nToday, we will solve this problem by creating a realtime table of movie titles, which updates once there is new data. \n\nTo follow this tutorial, please ensure that you are familiar with the basics of:\n- ASP.NET using C#\n- Vue.js 2.x\n\n## Setting up a Pusher account and app\n\nPusher is a hosted service that makes it *super-easy* to add realtime data and functionality to web and mobile applications.\n\nPusher sits as a realtime layer between your servers and your clients. Pusher maintains persistent connections to the clients - over Web-socket if possible and falling back to HTTP-based connectivity - so that as soon as your servers have new data that they want to push to the clients they can do, instantly via Pusher.\n\nIf you do not already have one, head over to [Pusher](https://pusher.com/) and create a free account.\n\nWe will register a new app on the dashboard. The only compulsory options are the app name and cluster. A cluster represents the physical location of the Pusher server that will handle your app’s requests.\n\n![realtime-table-aspnet-create-app](//images.contentful.com/1es3ne0caaid/1tl6NO0bIQgYq0Y0A8GYgW/67b1683a9dd744e0529ab7b5297420ab/realtime-table-aspnet-create-app.png)\n\nAlso, copy out your App ID, Key and Secret from the “App Keys” section, as we will need them later on.\n\n## Setting up the Asp.Net project in Visual Studio\n\nThe next thing we need to do is create a new Asp.Net MVC application. \nTo do so, let’s:\n\n- Open Visual Studio and select new project from the sidebar\n- Under templates, select `Visual C#`\n- Next, select web\n- In the middle section, select `ASP.NET Web Application`. \n\nFor this tutorial, I named the project: `pusher_realtime_table`.\n\nNow we are almost ready. The next step will be to install the official `Pusher` library for .Net using the `NuGet Package`.\n\nTo do this, we go to tools on the top bar, click on `NuGet Package Manager`, on the drop-down we select `Package Manager Console`.\n\nWe will see the `Package Manager Console` at the bottom of our Visual Studio. Next, let’s install the package by running:\n\n```\n    Install-Package PusherServer\n```\n\n## Crafting our application\n\nNow that our environment is set up and ready, let’s dive into writing code.\n\nBy default, Visual Studio creates three controllers for us, however we will use the `HomeController` for the application logic.\n\nThe first thing we want to do is to define a model that stores the list of movies we have in the database.\n\nUnder the ‘models’ folder, let’s create a file named `realtimetable.cs` and add the following content:\n\n```\n    using System;\n    using System.Collections.Generic;\n    using System.ComponentModel.DataAnnotations;\n    using System.Linq;\n    using System.Web;\n    \n    namespace pusher_realtime_table.Models\n    {\n        public class RealtimeTable\n        {\n            [Key]\n            public int id { get; set; }\n            [Required]\n            [MaxLength(225)]\n            public string title { get; set; }\n            [Required]\n            public int year { get; set;  } \n    \n        }\n    }\n```\n\nIn the above block of code, we have declared a model called `RealtimeTable` with three main properties:\n\n- **id** : This is the primary key of the model table.\n- **title**: The title of the movie we are saving to the database\n- **year**: The year the movie was released.\n\nNow that we have defined our model, let’s go ahead and reference it in our default database context called `ApplicationDbContext`. To do this, let’s open up `models\\IdentityModels.cs` file, then locate the class called `ApplicationDbContext` and add the following after the create function:\n\n```\n    public DbSet\u003cRealtimeTable\u003e realtime { get; set; }\n```\n\nIn the code block above, `DBSet` class represents an entity set that is used for create, read, update, and delete operations. The entity which we will use to do CRUD operations is the `realtimetable` model we created earlier, and we have given it the name realtime.\n\n## Connecting our database\n\nAlthough our model is setup, we still need to attach a database to our application. To do so, select the Server Explorer by the left hand side of our Visual Studio, right click on Data Connections and add a database.\n\n## Creating our index route\n\nNow both our model and database is set to work, let’s go ahead creating our index route. Open the `HomeController` and replace it with the following code:\n\n```\n    using pusher_realtime_table.Models;\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Web;\n    using System.Web.Mvc;\n    using PusherServer;\n    using System.Net;\n    using System.Threading.Tasks;\n    \n    namespace pusher_realtime_table.Controllers\n    {\n        public class HomeController : Controller\n    \n        {\n            ApplicationDbContext db = new ApplicationDbContext();\n            public ActionResult Index()\n            {\n                return View();\n            }\n    \n            [HttpPost]\n            public async Task\u003cActionResult\u003e Index(RealtimeTable data)\n            {\n                realtimetable setdata = new RealtimeTable();\n                setdata.title = data.title;\n                setdata.year = data.year;\n                db.realtime.Add(setdata);\n                db.SaveChanges();\n                var options = new PusherOptions();\n                options.Cluster = \"XXX_APP_CLUSTER\";\n                var pusher = new Pusher(\"XXX_APP_ID\", \"XXX_APP_KEY\", \"XXX_APP_SECRET\", options);\n                ITriggerResult result = await pusher.TriggerAsync(\"asp_channel\", \"asp_event\", data);\n                return RedirectToAction(\"view\", \"Home\");\n            }       \n        }\n    }\n```\n\nIn the code block above, we have defined our Index function for both `GET` and `POST` requests.\nBefore looking at our `GET` and `POST` controller functions, we notice that there is an import of our db context into our class with the line that says:\n\n```\n    ApplicationDbContext db = new ApplicationDbContext();\n```\n\nThis makes it possible to access our database model which we have defined using the `DbSet` class in our `ApplicationDbContext` class.\n\nIn the `GET` function, we have returned the view which we will be using to add a new movie into our database.\n\nNotice that the `POST` method is set to be asynchronous. This is due to the fact that the Pusher .NET library uses the await operator to wait for the asynchronous response from the data emitted to Pusher.\n\nIn this function, we first add our new movie to the database, then we trigger an event. Once the event has been successfully emitted, we then return a redirect to our view function which we will be creating soon.\n\n## Creating our view route\n\nNow that we have defined our index route, we can add new movies to the database, though we cannot see the details of the movies we have added. To do that, we need to define our view route, which returns a table of all the movies we have in our database.\n\nLet’s open our `HomeController` and add the following functions:\n\n```\n     public ActionResult seen()\n            {\n                return Json(db.realtime.ToArray(), JsonRequestBehavior.AllowGet);\n            }\n    \n    public ActionResult view()\n            {\n                return View();\n            }\n```\n\nIn the seen function, we have exposed a webservice that returns a JSON result of all the movies we have in our database.\n\nIn the view function, we return our view which shows us the list of our movies rendered with Vue.\n\n## Creating our view files\n\nLet’s open up our `Views\\Home\\Index.cshtml` and replace the content with the following:\n\n```\n    @model pusher_realtime_table.Models.RealtimeTable\n    \n    @{\n        ViewBag.Title = \"Index\";\n        Layout = \"~/Views/Shared/_Layout.cshtml\";\n    }\n    \n    \u003ch2\u003eIndex\u003c/h2\u003e\n    \n    @using (Html.BeginForm()) \n    {\n        @Html.AntiForgeryToken()\n    \n        \u003cdiv class=\"form-horizontal\"\u003e\n            \u003ch4\u003erealtimetable\u003c/h4\u003e\n            \u003chr /\u003e\n            @Html.ValidationSummary(true, \"\", new { @class = \"text-danger\" })\n            \u003cdiv class=\"form-group\"\u003e\n                @Html.LabelFor(model =\u003e model.title, htmlAttributes: new { @class = \"control-label col-md-2\" })\n                \u003cdiv class=\"col-md-10\"\u003e\n                    @Html.EditorFor(model =\u003e model.title, new { htmlAttributes = new { @class = \"form-control\" } })\n                    @Html.ValidationMessageFor(model =\u003e model.title, \"\", new { @class = \"text-danger\" })\n                \u003c/div\u003e\n            \u003c/div\u003e\n    \n            \u003cdiv class=\"form-group\"\u003e\n                @Html.LabelFor(model =\u003e model.year, htmlAttributes: new { @class = \"control-label col-md-2\" })\n                \u003cdiv class=\"col-md-10\"\u003e\n                    @Html.EditorFor(model =\u003e model.year, new { htmlAttributes = new { @class = \"form-control\" } })\n                    @Html.ValidationMessageFor(model =\u003e model.year, \"\", new { @class = \"text-danger\" })\n                \u003c/div\u003e\n            \u003c/div\u003e\n    \n            \u003cdiv class=\"form-group\"\u003e\n                \u003cdiv class=\"col-md-offset-2 col-md-10\"\u003e\n                    \u003cinput type=\"submit\" value=\"Create\" class=\"btn btn-default\" /\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    }\n    \n    \u003cdiv\u003e\n        @Html.ActionLink(\"Back to List\", \"Index\")\n    \u003c/div\u003e\n```\n\nIn the above block of code, we have created our form which consists of three main inputs, which are:\n- Text input for the movie title\n- Text input for the movie year\n- Button to save the new entry into the database.\n\nNext, let’s also create the view file to show us all the current movies we have in realtime.\n\nLet's create a new file called `view.cshtml` in our `Views\\Home` folder, and add the following content:\n\n```\n    @{\n        ViewBag.Title = \"view\";\n        Layout = \"~/Views/Shared/_Layout.cshtml\";\n    }\n    \n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.3.4/vue.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.2/axios.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"//js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n    \n    \n    \u003ch2\u003eReal-Time Table\u003c/h2\u003e\n    \n    \n    \u003ctable class=\"table\" id=\"app\"\u003e\n        \u003ctr\u003e\n            \u003cth\u003e\n                Sn\n            \u003c/th\u003e\n            \u003cth\u003e\n               Title\n            \u003c/th\u003e\n            \u003cth\u003e\n                Year\n            \u003c/th\u003e\n    \n        \u003c/tr\u003e\n    \n    \n        \u003ctr v-for=\"(mov, index) in sorted_movies\"\u003e\n            \u003ctd\u003e\n            {{index+1}}\n            \u003c/td\u003e\n            \u003ctd\u003e\n             {{mov.title}}\n            \u003c/td\u003e\n            \u003ctd\u003e\n            {{mov.year}}\n            \u003c/td\u003e\n        \u003c/tr\u003e\n    \n    \n    \u003c/table\u003e\n    \u003cscript\u003e\n        var pusher = new Pusher('XXX_APP_KEY, {\n            cluster: 'XXX_APP_CLUSTER'\n        });\n        var my_channel = pusher.subscribe('asp_channel');\n        var app = new Vue({\n            el: '#app',\n            data: {\n                movies: []\n            },\n            created: function () {\n                this.get_movies();\n                this.listen();\n            },\n            methods: {\n                get_movies: function () {\n                    axios.get('@Url.Action(\"seen\", \"Home\")')\n                      .then((response)=\u003e {\n    \n                          this.movies = response.data;\n    \n                      });\n    \n                },\n                listen: function () {\n                    my_channel.bind(\"asp_event\", (data) =\u003e {\n                        this.movies.push(data);\n                    })\n                }\n            },\n            computed: {\n                sorted_movies: function () {\n                    var movies = this.movies;\n    \n                    movies =  movies.sort(function (a, b) {\n                        return parseInt(a.year) - parseInt(b.year);\n                    });\n    \n                    return movies;\n                }\n            }\n        });\n    \u003c/script\u003e\n```\n\nIn the view file above, notice that we have included three new libraries which are:\n- `vue.min.js`: This is the Vue js library which will be used to render our data.\n- `axios.min.js`: This is the official Axios library, which we will be using to make HTTP requests to our server.\n- `pusher.min.js`: This is the official Pusher JavaScript client, with which we will be receiving our realtime data.\n\nOur markup is pretty simple. It consists of an HTML table which renders all our movies using Vue.\n\nWe need to pay attention to the script section of our View file. This is where all the magic goes on.\nJust before we declare our Vue app, we instantiated Pusher by calling the Pusher object while passing in our app key and cluster.\n\nNext, we subscribe to the `asp_channel` event.\nIn the created function, we fire the `get_movies` function, which uses Axios to fetch the list of all our movies.\n\nNext, we fired the listen function which watches for the arrival of the new data, then pushes them to the array of all our movies.\n\nAlso, notice that we have a computed property called `sorted_movies`, which returns a sorted list of our movies based on the year.\n\nBelow is a picture of what we have built:\n![realtime-table-aspnet-demo](//images.contentful.com/1es3ne0caaid/5OSF9cvJwA8eCmKGAmyOAO/58d852b434dc1e8ac23c141d370093d8/realtime-table-aspnet-demo.gif)\n\n## Conclusion\n\nIn the course of this tutorial, we have covered how to build a realtime table using .NET and Pusher.\nWe have gone through the process of setting up the environment, using the `NuGet Package Manager` to install the required Pusher library. ","metaTitle":"Build a realtime table using ASP.NET","metaDescription":"Create a realtime table of movie titles, which updates once there is new data with ASP.NET, Vue.js and Pusher."}}],"defaultValue":"Channels \u0026 Vue.js","queryType":"tag","pages":7,"route":"/tutorials","query":{"product":"Channels","tag":"Vue.js","page":"5"}}},"page":"/tutorials","query":{"product":"Channels","tag":"Vue.js","page":"5"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Vue.js&page=5 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:55 GMT -->
</html>