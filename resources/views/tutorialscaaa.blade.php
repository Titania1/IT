<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Location&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:42:27 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">20</span> tutorials for “<span class="css-npldjc ehwuahf2">Location</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials20b0.html?product=Channels&amp;tag=Location" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials5588.html?product=Beams&amp;tag=Location" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Location"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/live-map-react.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live map application with React</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">In this tutorial, you will build a web application using React, Node.js and Google Maps. Users will be able to see their...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-map-leaflet-vue-adonis.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Adonis.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live map with Leaflet, Vue.js and Adonis.js </h3><p class="css-k12xad e5jrto45">This tutorial guides you through creating a simple map that displays the user&#x27;s live location when they log on. It makes...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/geofencing-ionic.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Cordova<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Implement geofencing in Ionic</h3><p class="css-k12xad e5jrto45">Build a geofencing app for mobile using Ionic and Google Maps. Ionic is an open source SDK for developing native web app...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/kotlin-ride-sharing-push-notifications.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a Kotlin ride sharing app with push notifications</h3><p class="css-k12xad e5jrto45">Build a full ridesharing platform featuring realtime updates and push notifications. Use Kotlin for both the apps, and t...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/geofencing-ember.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Ember.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a geofencing web app using Ember</h3><p class="css-k12xad e5jrto45">Build a web app using Ember.js and Google Maps, with Node for the backend. Users are able to check in, submitting their ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/carpooling-react-native-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a carpooling app with React Native - Part 2: Creating the frontend</h3><p class="css-k12xad e5jrto45">This two-part series uses React Native, Docker and several Google services (Maps, Places, Directions and Geocoding) to c...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/carpooling-react-native-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a carpooling app with React Native - Part 1: Setting up the server</h3><p class="css-k12xad e5jrto45">This two-part series uses React Native, Docker and several Google services (Maps, Places, Directions and Geocoding) to c...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/location-ruby-rails-googlemaps.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Ruby</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a location sharing app with Ruby on Rails and the Google Maps API </h3><p class="css-k12xad e5jrto45">Build a location sharing web app using Ruby on Rails and the Google Maps API. Get your location, generate a link to shar...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/geofencing-nestjs-googlemaps.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a geofencing web app using Nest.js and the Google Maps API</h3><p class="css-k12xad e5jrto45">Build a web app using Nest.js and the Google Maps API. The app allows you to select a user and center on their location,...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Prev</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialscaaa.html?tag=Location&amp;page=1" class="css-2wakph edg0byb1">1</a><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials4e56.html?tag=Location&amp;page=2" class="css-5s6711 edg0byb1">2</a><a href="tutorialsed57.html?tag=Location&amp;page=3" class="css-5s6711 edg0byb1">3</a><a href="tutorials4e56.html?tag=Location&amp;page=2" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":20,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5tG74hhJvigGccusoAU4iK","type":"Entry","createdAt":"2019-02-11T23:17:22.717Z","updatedAt":"2019-02-11T23:17:22.717Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live map application with React","url":"live-map-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qeLNtkOw0ImAS2QcUcKcG","type":"Entry","createdAt":"2018-06-15T10:54:43.491Z","updatedAt":"2019-05-17T10:50:18.109Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Oreoluwa Ogundipe","url":"oreoluwa-ogundipe","email":"oreogundipe@gmail.com","twitter":"https://twitter.com/ogundipeore","github":"https://github.com/orehga","guestWriter":true}}],"projectRepo":"https://github.com/oreHGA/pusher-react-location","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2019-02-11","description":"In this tutorial, you will build a web application using React, Node.js and Google Maps. Users will be able to see their friends' locations updating in realtime.","prerequisite":"You will need Node 6+ and npx installed on your machine.","content":"Today, almost all of us rely on map applications for directions, distances and local information.. Now, we even have the ability to share our live location with friends, but imagine a scenario where a group of three friends are trying to meet at a particular location, each one of the friends needs to send a link to the others for them to know where they are. \n\nIn this article, we are going to use [Pusher Channels](https://pusher.com/channels) to create a React application that allows you to see the location of your friends in realtime when they are online on the app. By the end of this article, you should have an application that looks like this: \n\n![react-map-online-presence-1](//images.ctfassets.net/1es3ne0caaid/55tpnAYkmkKsqIyuQIE2OM/b76ac13e57c1c7705e49b53ce7846831/react-map-online-presence-1.gif)\n\n## Prerequisites\n\nTo follow through this tutorial, you’ll need the following:\n\n- Node \u003e= 6 installed on your machine\n- npm \u003e= 5.2 installed on your machine\n- npx installed on your machine\n\n\n## Getting started\n\nTo get started, create a new React application by running this command:\n\n```\n    npx create-react-app pusher-react-location\n```\n\nThis creates a starter React project in a folder titled `pusher-react-location`. To see the demo application at work, go to your terminal and run the command:\n\n```\n    cd pusher-react-location\n    npm start\n```\n\nThis serves the React application. Navigate your browser to `http://locahost:3000` and you should get a view that looks like this:\n\n![react-map-online-presence-2](//images.ctfassets.net/1es3ne0caaid/DAmOpFQ1J6OIEIIwkm8yy/01bab1b5fffeeae571915891c6d8a6ba/react-map-online-presence-2.png)\n\n## Building the backend server\n\nThe backend server of our application will have the following functionality:\n\n- Sharing users’ locations\n- Authenticating new users on the presence channel\n\nCreate a `/server` folder in your project:\n\n```\n    mkdir server\n    cd server\n```\n\nInstall the Node modules that we will need to power the backend server:\n\n```\n    npm init -y\n    npm install express body-parser pusher\n```\n\n- `express` will power the web server\n- `body-parser` to handle incoming requests\n- `pusher` to add realtime functionality and online presence\n\nAfterwards, create a `server.js` file in the `server/` directory:\n\n```\n    touch server.js\n```\n\nEdit the `server.js` file to look as follows:\n\n``` javascript\n    // server/server.js\n    \n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const Pusher = require('pusher');\n    \n    // create a express application\n    const app = express();\n    \n    // initialize pusher\n    let pusher = new Pusher({\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    // to Allow CORS\n    app.use((req, res, next) =\u003e {\n        res.header('Access-Control-Allow-Origin', '*');\n        res.header(\n            'Access-Control-Allow-Headers',\n            'Origin, X-Requested-With, Content-Type, Accept'\n        );\n        next();\n    });\n    \n    [...]\n```\n\nWe include the necessary JavaScript libraries and then create a new Pusher object using your \nPusher application credentials.\n\n\u003e To obtain your Pusher credentials, create a new account [here](https://dashboard.pusher.com/accounts/sign_up). Afterwards, you’ll be redirected to your [Pusher dashboard](https://dashboard.pusher.com/). Go ahead and create a new project, obtain your `PUSHER_APP_ID`, `PUSHER_APP_KEY`, `PUSHER_APP_SECRET`, `PUSHER_APP_CLUSTER` and add them to your `server.js` file.\n\nAfterwards, we specify some application middleware to handle incoming requests. The backend server will have two routes:\n\n- `/pusher/auth` - handles requests to authenticate users joining the presence channel\n- `/update-location` - handles requests to trigger an event when a user updates their location.\n\nWith Pusher, when a new client tries to join a presence channel, a `POST` request is first made to authenticate the new client. In this case, we create a random string to identify the client and this makes up the `presenceData`object. The `presenceData` , `channel` and `socketId` are then passed to Pusher to authenticate the client.\n\nThe `/update-location` route accepts the incoming data and then triggers a `location-update` event to the `presence-channel`.\n\n\u003e In later parts of the article, we will see how the channel is created in our React application\n\nAdd the code below to your `server/server.js` file:\n\n``` javascript\n    // server/server.js\n    [...]\n    \n    app.post('/pusher/auth', (req, res) =\u003e {\n        let socketId = req.body.socket_id;\n        let channel = req.body.channel_name;\n        random_string = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n        let presenceData = {\n            user_id: random_string,\n            user_info: {\n                username: '@' + random_string,\n            }\n        };\n        let auth = pusher.authenticate(socketId, channel, presenceData);\n        res.send(auth);\n    });\n    \n    app.post('/update-location', (req, res) =\u003e {\n        // trigger a new post event via pusher\n        pusher.trigger('presence-channel', 'location-update', {\n            'username': req.body.username,\n            'location': req.body.location\n        })\n        res.json({ 'status': 200 });\n    });\n    \n    let port = 3128;\n    app.listen(port);\n    console.log('listening');\n```\n\nNow that the backend server is created, you can run it by entering the command:\n\n```\n    node server.js\n```\n\nNow, let’s look at how to build the rest of the application.\n\n\n## Creating the interface\n\n![react-map-online-presence-3](//images.ctfassets.net/1es3ne0caaid/1WKJXXB9pOkMqe6u6mGQAw/4728cc1883d44043a60cd84ff142ce22/react-map-online-presence-3.png)\n\nFirst of all,  we need to get a simple map interface for the application and to do this, let’s use [Google Maps JavaScript API](https://developers.google.com/maps/documentation/javascript/tutorial). Follow this [guide](https://developers.google.com/maps/documentation/javascript/get-api-key) to obtain your Google Maps API key which we will use later in this application.\n\n### Installing necessary packages\n\nTo add all functionality to our application, we’ll need to install the following packages:\n\n- google-map-react - to use the Google Maps JavaScript API with react\n- pusher-js - to enable realtime functionality with Pusher\n- axios - to make POST requests to our backend server\n- react-toastify - to notify users when new users are online or go offline\n\n To install, go to the root folder of your react application and run the following in your terminal:\n\n```\n    npm install google-map-react pusher-js axios react-toastify\n```\n\n### Displaying the map\n\nTo see it at work in your application, edit your `src/App.js` file to look like this:\n\n``` javascript\n    // src/App.js\n    import React, { Component } from 'react';\n    import GoogleMap from 'google-map-react';\n    \n    const mapStyles = {\n      width: '100%',\n      height: '100%'\n    }\n    \n    const markerStyle = {\n      height: '50px',\n      width: '50px',\n      marginTop: '-50px'\n    }\n    \n    const imgStyle = {\n      height: '100%'\n    }\n    \n    \n    const Marker = ({ title }) =\u003e (\n      \u003cdiv style={markerStyle}\u003e\n        \u003cimg style={imgStyle} src=\"https://res.cloudinary.com/og-tech/image/upload/s--OpSJXuvZ--/v1545236805/map-marker_hfipes.png\" alt={title} /\u003e\n        \u003ch3\u003e{title}\u003c/h3\u003e\n      \u003c/div\u003e\n    );\n    \n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv \u003e\n            \u003cGoogleMap\n              style={mapStyles}\n              bootstrapURLKeys={{ key: 'GOOGLE_MAPS_API_KEY' }}\n              center={{ lat: 5.6219868, lng: -0.1733074 }}\n              zoom={14}\n            \u003e\n              \u003cMarker\n              title={'Current Location'}\n              lat={5.6219868}\n              lng={-0.1733074}\n            \u003e\n              \u003c/Marker\u003e\n            \u003c/GoogleMap\u003e\n          \u003c/div\u003e\n        )\n      }\n    }\n    \n    export default App;\n```\n\nIn the `App.js` file, we defined the `center` of the map and a single marker which will represent the location of the user when they open the application.\n\n\n\u003e **Note**: Remember to add your `GOOGLE_MAPS_API_KEY` which you can obtain [here](https://developers.google.com/maps/documentation/javascript/get-api-key).\n\nNow, when you run the application and navigate to `localhost:3000` in your browser you get the view below:\n\n![react-map-online-presence-4](//images.ctfassets.net/1es3ne0caaid/2n87URwYfGkcIOGOmau0iu/04d5ffd56771d249dc333bca2752da86/react-map-online-presence-4.png)\n\nCurrently, the center of the map and the user’s pin are hard-coded into the application. Let’s look at how to make these dynamic and display the user’s location and the location of other users signed in to the application.\n\n\n## Displaying online friends locations in realtime with Pusher\n\nNow let’s update the `App.js` to include the functionality. First, we need to add states to our component that will track:\n\n- The map center\n- Users online\n- Username of the current user\n- Location for other online users\n\nUpdate the `App.js` file so that your constructor will look like this:\n\n``` javascript\n    // src/App.js\n    [...]\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    import { ToastContainer, toast } from 'react-toastify';\n    import 'react-toastify/dist/ReactToastify.css';\n    \n    class App extends Component {\n    \n      constructor(props) {\n        super(props)\n        this.state = {\n          center: { lat: 5.6219868, lng: -0.23223 },\n          locations: {},\n          users_online: [],\n          current_user: ''\n        }\n      }\n    \n      [...]  \n    }\n```\n\nWe then create a new Pusher object in the `componentDidMount()` lifecycle method by specifying the `PUSHER_APP_KEY`, `PUSHER_APP_CLUSTER` and the `authEndpoint` created on our backend server earlier in the article. Afterwards, we subscribe to the `presence-channel` and then bind the channel to listen for four events:\n\n\n-  `pusher:subscription_succeeded` event that is triggered from the backend server when a user successfully subscribes to a presence channel .\n- `location-update` event which is triggered when another user’s location is updated.\n- `pusher:member_removed` event that is triggered when another user goes offline.\n- `pusher:member_added` event that is triggered when a new user comes online.\n\n\n``` javascript\n    // src/App.js\n    [...]\n    \n    class App extends Component {\n      [...]\n      \n      componentDidMount() {\n          let pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: \"http://localhost:3128/pusher/auth\",\n            cluster: \"mt1\"\n          })\n          this.presenceChannel = pusher.subscribe('presence-channel');\n          \n          this.presenceChannel.bind('pusher:subscription_succeeded', members =\u003e {\n            this.setState({\n              users_online: members.members,\n              current_user: members.myID\n            });\n            this.getLocation();\n            this.notify();\n          })\n          \n          this.presenceChannel.bind('location-update', body =\u003e {\n            this.setState((prevState, props) =\u003e {\n              const newState = { ...prevState }\n              newState.locations[`${body.username}`] = body.location;\n              return newState;\n            });\n          });\n          \n          this.presenceChannel.bind('pusher:member_removed', member =\u003e {\n            this.setState((prevState, props) =\u003e {\n              const newState = { ...prevState };\n              // remove member location once they go offline\n              delete newState.locations[`${member.id}`];\n              // delete member from the list of online users\n              delete newState.users_online[`${member.id}`];\n              return newState;\n            })\n            this.notify()\n          })\n          \n          this.presenceChannel.bind('pusher:member_added', member =\u003e {\n            this.notify();\n          })\n        }\n        \n        [...]\n    }\n```\n\nNotice that we called a `notify()` method on our Pusher events. Add the function to your `App.js` file like below:\n\n``` javascript\n    // src/App.js\n    \n    class App extends Component {\n      [...]\n      \n      \n      notify = () =\u003e toast(`Users online : ${Object.keys(this.state.users_online).length}`, {\n        position: \"top-right\",\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        type: 'info'\n      });\n      \n      [...]\n    \n    }\n```\n\nWe also called a `getLocation()` method in the `componentDidMount()`. This function is responsible for fetching the location of the user from the browser. Let’s take a look at how this works. Add the `getLocation()` function to your `App.js` file:\n\n``` javascript\n    // src/App.js\n    \n    class App extends Component {\n      \n      [...]\n      \n      getLocation = () =\u003e {\n        if (\"geolocation\" in navigator) {\n          navigator.geolocation.watchPosition(position =\u003e {\n            let location = { lat: position.coords.latitude, lng: position.coords.longitude };\n            this.setState((prevState, props) =\u003e {\n              let newState = { ...prevState };\n              newState.center = location;\n              newState.locations[`${prevState.current_user}`] = location;\n              return newState;\n            });\n            axios.post(\"http://localhost:3128/update-location\", {\n              username: this.state.current_user,\n              location: location\n            }).then(res =\u003e {\n              if (res.status === 200) {\n                console.log(\"new location updated successfully\");\n              }\n            });\n          })\n       } else {\n          alert(\"Sorry, geolocation is not available on your device. You need that to use this app\");\n        }\n      }\n      \n      [...]\n    \n    }\n```\n\nThe `getLocation()` method first checks if the application can access the geolocation property of the browser and alerts the user if it can’t. The `navigator.geolocation.watchPosition()` method gets the users’ location as the user moves and then updates the component states with the most up to date location of the user. Afterwards, a request is made to the backend server to trigger a `location-update` event so that other signed in users can be notified with the latest location.\n\nFinally, to show all locations of online users, let’s update the `render()` function of the component to look like this:\n\n``` javascript\n    // src/App.js\n    [...]\n    \n    class App extends Component {\n      [...]\n      \n      render() {\n        let locationMarkers = Object.keys(this.state.locations).map((username, id) =\u003e {\n          return (\n            \u003cMarker\n              key={id}\n              title={`${username === this.state.current_user ? 'My location' : username + \"'s location\"}`}\n              lat={this.state.locations[`${username}`].lat}\n              lng={this.state.locations[`${username}`].lng}\n            \u003e\n            \u003c/Marker\u003e\n          );\n        });\n    \n        return (\n          \u003cdiv \u003e\n            \u003cGoogleMap\n              style={mapStyles}\n              bootstrapURLKeys={{ key: 'GOOGLE_MAPS_API_KEY' }}\n              center={this.state.center}\n              zoom={14}\n            \u003e\n              {locationMarkers}\n            \u003c/GoogleMap\u003e\n          \u003c/div\u003e\n        )\n      }\n      \n      [...]\n      \n    }\n```\n\n`locationMarkers` creates a list of `Marker`'s for each of the online users. This will give the user a perspective of where his other online friends are.\n\nNow, reload the application and navigate to `localhost:3000` . Your application should work like this when multiple users are online:\n\n![react-map-online-presence-5](//images.ctfassets.net/1es3ne0caaid/eEFWTDl5DM6QmAeygW20I/48dd617efdbec4a14fef7e0dee1e4a5f/react-map-online-presence-5.gif)\n\n## Conclusion\n\nIn this tutorial, we saw how to use Pusher Channels, Google Maps and React to build a live map with online presence that lets you know where your friends online are. This tutorial is one of the many ways you can use Pusher Channels in the product you build. Feel free to use the concepts shared here in your own application. Here’s a link to the [GitHub](https://github.com/oreHGA/pusher-react-location) repository.","metaTitle":"Build a live map application with React","metaDescription":"In this tutorial, you will build a web application using React, Node.js and Google Maps. Users will be able to see their friends' locations updating in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4m5cnd3bCEY40sCcMi4agq","type":"Entry","createdAt":"2019-02-04T19:09:19.147Z","updatedAt":"2019-02-04T19:09:19.147Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live map with Leaflet, Vue.js and Adonis.js ","url":"live-map-leaflet-vue-adonis","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/realtime_map","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2AjUjeRuA4oUAcYYI6ck6i","type":"Entry","createdAt":"2018-09-28T17:24:15.392Z","updatedAt":"2018-09-28T17:24:15.392Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Adonis.js","url":"adonis-js","type":"library","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2019-02-04","description":"This tutorial guides you through creating a simple map that displays the user's live location when they log on. It makes use of Leaflet.js to customize Google Maps. Adonis.js is used for the backend, and Vue.js for the frontend.","prerequisite":"You will need Node 8.9+ and MySQL installed on your machine.","content":"## Introduction\n\nIn this tutorial, we will build a realtime map using Leaflet, Vue.js and [Pusher Channels](https://pusher.com/channels).  If you aren’t familiar with Leaflet, it’s a JavaScript library designed to build visually intuitive and interactive maps with just a few lines of code. \n\nTake a look at their [official site](https://leafletjs.com): \n\n\u003e Leaflet is designed with simplicity, performance and usability in mind. It works efficiently across all major desktop and mobile platforms, can be extended with lots of [plugins](https://leafletjs.com/plugins.html), has a beautiful, easy to use and [well-documented API](https://leafletjs.com/reference.html) and a simple, readable [source code](https://github.com/Leaflet/Leaflet) that is a joy to [contribute](https://github.com/Leaflet/Leaflet/blob/master/CONTRIBUTING.md) to.\n\nWe will combine the flexibility of Vue.js with the simplicity of Leaflet.js and then add a taste of realtime with Pusher Channels. The result will be an appealing realtime map.\n\n\n## Demo\n\nAt the end of the tutorial, you will have the following final result:\n\n![adonis-vue-leaflet-demo](//images.ctfassets.net/1es3ne0caaid/YfScwfZ5ssIeUYqYC0KQG/5e89742a943d05195a9fda53cb735543/adonis-vue-leaflet-demo.gif)\n\n\n## Prerequisites\n\nFor you to follow along with the tutorial, knowledge of JavaScript and Node.js is required. You should also have the following tools installed on your machine:\n\n- [Node.js (\u003e=8.9.0)](https://nodejs.org)\n- [Pusher Channels](https://pusher.com/channels)\n- NPM(bundled with Node.js installer) or [Yarn (\u003e=1.12.1)](https://yarnpkg.com/)\n- MySQL database \n\n## Initialize our Adonis.js project\n\nBefore going any further, we should install Adonis.js on our local machine if this is not done yet. Open your terminal and run this command in order to do so: \n\n```\n    # if you don't have Adonis CLI installed on your machine. \n      npm install -g @adonisjs/cli\n      \n    # Create a new adonis app and move into the app directory\n    $ adonis new realtime_map \u0026\u0026 cd realtime_map\n```\n\nNow start the server and test if everything is working fine: \n\n```\n    adonis serve --dev\n    \n    2018-09-23T12:25:30.326Z - info: serving app on http://127.0.0.1:3333\n```\n\nIf the steps above were successful, open your browser and make a request to : http://127.0.0.1:3333. \n\nYou should see the following:\n\n![adonis-vue-leaflet-default](//images.ctfassets.net/1es3ne0caaid/3NVAgagI9GaSw6iqkW4mEi/8a2b83da0051414bfcc849ac0a2e4414/adonis-vue-leaflet-default.png)\n\n\n## Set up Pusher and install other dependencies\n\nHead over to [Pusher](https://www.pusher.com) and create an account or sign in if you already have an account.\n\nIn the Pusher Channels dashboard create a new Pusher app instance, you will be then provided with credentials which can be used to communicate securely with the created Pusher instance. Copy the App ID, Key, Secret, and Cluster from the App Keys section and put them in the `.env`  file located at you project root:\n\n```\n    //.env\n        PUSHER_APP_KEY=\u003cAPP_KEY\u003e\n        PUSHER_APP_SECRET=\u003cAPP_SECRET\u003e\n        PUSHER_APP_ID=\u003cAPP_ID\u003e\n        PUSHER_APP_CLUSTER=\u003cAPP_CLUSTER\u003e\n```\n\nThese keys will be used further in this tutorial to link Pusher with our Adonis project.\n\nNext, we need to install the Pusher SDK as well as other dependencies we’ll need to build our app.\nWe won’t use the Pusher SDK directly but instead use [a Pusher provider for Adonis](https://github.com/Perafan18/adonis-pusher). This provider will help us use easily the Pusher SDK with the Adonis.js ecosystem.\nBut we should first install the Pusher SDK by running this command:  \n\n```\n    #if you want to use npm\n    npm install pusher\n    \n    #or if you prefer Yarn\n    yarn add pusher\n```\n\nNow, you can install the Pusher provider for Adonis with this command:\n\n```\n    #if you want to use npm\n    npm install adonis-pusher\n    \n    #or if you prefer Yarn\n    yarn add adonis-pusher\n```\n\nYou will need to add the provider to AdonisJS at `start/app.js`:\n\n``` javascript\n    const providers = [\n        ...\n        'adonis-pusher/providers/Pusher'\n    ]\n```    \n\nLast, let’s install other dependencies that we’ll use to build our app. \n\nRun this command in your terminal:\n\n```\n    #if you want to use npm\n    npm install vue axios moment laravel-mix pusher-js  mysql cross-env\n    \n    #or if you prefer Yarn\n    yarn add vue axios moment laravel-mix pusher-js mysql cross-env\n```\n\nDependencies we will use:\n\n- `vue` and `vuex` respectively to build the frontend of our app and manage our data store,\n- `axios` to make HTTP requests to our API endpoints\n- [laravel-mix](https://github.com/JeffreyWay/laravel-mix) to provide a clean, fluent API for defining basic [webpack](http://github.com/webpack/webpack) build steps \n- `pusher-js` to listen to events emitted from our server\n- `mysql`, Node.js driver for MySQL to set up our database as this app will use MySQL for storage\n- `cross-env` to run scripts that set and use environment variables across platforms\n\n\n## Set up our build workflow\n\nWe’ll use laravel-mix to build and compile our application assets in a fluent way. But first we must tell our app to use it for that purpose. Open your `package.json` file and paste the following in the scripts section: \n\n\n``` json\n    \"asset-dev\": \"cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"asset-watch\": \"cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --watch --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"asset-watch-poll\": \"npm run watch -- --watch-poll\",\n    \"asset-hot\": \"cross-env NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"asset-prod\": \"cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\"\n```    \n\nAfter that create a `webpack.mix.js` file at the root of your project and paste this code:\n\n\n``` javascript  \n    const mix = require('laravel-mix');\n    \n    mix.setPublicPath('public');\n    /*\n     |--------------------------------------------------------------------------\n     | Mix Asset Management\n     |--------------------------------------------------------------------------\n     |\n     | Mix provides a clean, fluent API for defining some Webpack build steps\n     | for your Laravel application. By default, we are compiling the Sass\n     | file for your application, as well as bundling up your JS files.\n     |\n     */\n     \n    mix.js('resources/assets/js/app.js', 'public/js')\n```    \n\nThe code above builds, compiles and bundles all our JavaScript code into a single JS file created automatically in `public/js` directory.\nCreate the following directory `assets/js` inside your `resources` one. \n\nNow, create this file `bootstrap.js` and paste this code inside: \n\n``` javascript\n    //../resources/assets/js/bootstrap.js\n    window.axios = require('axios');\n    \n    window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n    window.axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n    window.axios.defaults.headers.common.crossDomain = true;\n    window.axios.defaults.baseURL = '/';\n    \n    let token = document.head.querySelector('meta[name=\"csrf-token\"]');\n    \n    if (token) {\n      window.axios.defaults.headers.common['X-CSRF-TOKEN'] = token.content;\n    } else {\n      console.error('CSRF token not found: https://adonisjs.com/docs/4.1/csrf');\n    }\n    \n    window.Pusher = require('pusher-js');\n```    \n\nYou will notice we require dependencies to build our app. We also globally registered some headers to the Axios library in order to handle some security issues and to tackle in a proper way our API endpoints. These headers enable respectively ajax request, define `Content-Type` for our post requests, CORS and register the CSRF token.\n\nNext, create this file:  `assets/js/app.js` and paste the following inside:\n\n\n``` javascript\n    require('./bootstrap')\n```    \n\nWhen we import our `bootstrap.js` file, laravel-mix will compile our `app.js` file.\nOur app is now ready to use laravel-mix for building and compiling our assets. By running this command:  `npm run asset-dev` you should see a `public/js/app.js` file after the build process. Great!\n\n\n## Build our location model and migration\n\nFirst, we need to set up our database, we’ll use a MySQL database for storage in this tutorial. Open your `.env` file and update the database section with your own identifiers: \n\n```\n    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_USER=your_database_user\n    DB_PASSWORD=your_dtabase_password\n    DB_DATABASE=your_database_name\n```\n\nNext, open your terminal and run the command below to generate our `Location` model as well as its corresponding controller and migration file which will be used to build the schema for our locations table: \n\n```\n    adonis make:model Location -mc\n```\n\nHere we are creating our Location model that which represents a user location at the time he is visiting our app.\n\nInside your product migration file, copy and paste this code:\n\n``` javascript\n    //../database/migrations/*_location_schema.js\n    'use strict'\n    \n    const Schema = use('Schema')\n    \n    class LocationSchema extends Schema {\n      up() {\n        this.create('locations', (table) =\u003e {\n          table.increments()\n          table.string('lat')\n          table.string('long')\n          table.timestamps()\n        })\n      }\n    \n      down() {\n        this.drop('locations')\n      }\n    }\n    \n    module.exports = LocationSchema\n```    \n\nOur location schema is really simple to understand\nYou can see we defined our locations table fields as: \n\n- `lat`: to hold the user latitute location\n- `long`: to hold the user’s longitude location\n\nNow if your run this command:  `adonis migration:run` in your terminal it will create a locations table in your database.\n\n\n## Create routes and the controller\n\nIn this section of the tutorial, we’ll create our routes and define controller functions responsible for handling our HTTP requests.\n\nWe’ll create three basic routes for our application, one for rendering our realtime map, one for fetching existing locations from the database and the last one for storing new locations into the database.\n\nGo to the `start/routes.js` file and replace the content with:\n\n``` javascript\n    const Route = use('Route')\n    \n    Route.on('/').render('map')\n    Route.get('/locations', 'LocationController.loadLocations');\n    Route.post('/locations', 'LocationController.postLocation');\n```    \n\nThe first route `/` renders the `map` (which will be created further in the tutorial) view to the user.\n\nNow, let’s create our controller functions. Open your  `LocationController.js`  file and paste the following:\n\n``` javascript\n    //../app/Controllers/Http/LocationController.js\n    'use strict'\n    \n    const Event = use('Event');\n    const Location = use('App/Models/Location');\n    class LocationController {\n    \n        async loadLocations({request,response}) {\n            let locations = await Location.all();\n            return response.json(locations);\n        }\n        \n        async postLocation({request,response}) {\n            let location = await Location.create(request.all());\n            Event.fire('new::location', location);\n            \n            return response.json({\n                msg: 'location set'\n            });\n        }\n    }\n    module.exports = LocationController\n```\n\nFirst lines import  `the Event` service provider and the  `Location` model.\n\nWe have two functions in the code above:\n\n\n- `loadLocations`  fetches locations from our database and returns them to our client, the browser as it happens in our case,\n\n\n- `postLocation`  creates a new `Location` instance with the request queries. We then fire an event named  `new::location`  with the new instance. We can listen to this event and manipulate the data it carries.\n\n\n\n## Emit event with Pusher channels\n\nThis section will focus on how to broadcast from the backend with Pusher Channels.\nIf you want clearer explanations on the process, you can take a look at [this tutorial](https://pusher.com/tutorials/pusher-channels-adonis).\nCreate a filename `event.js` in the `start` directory, then paste the following inside:\n\n``` javascript\n    //events.js\n    \n    const Pusher = use('Pusher')\n    const Event = use('Event');\n    const Env = use('Env');\n    \n    // set up Pusher\n    let pusher = new Pusher({\n        appId: Env.get('PUSHER_APP_ID'),\n        key: Env.get('PUSHER_APP_KEY'),\n        secret: Env.get('PUSHER_APP_SECRET'),\n        cluster: Env.get('PUSHER_APP_CLUSTER'),\n        useTLS: false\n    });\n    //listening to events and send data with Pusher channels\n    Event.when('new::location', async(location) =\u003e {\n        console.log('location from event :', location);\n        pusher.trigger('location-channel', 'new-location', {\n            location\n        })\n    });\n```    \n\nWe need to pull in the `Event`, `Pusher` (using the adonis-pusher package we installed earlier) and `Env` service providers. Then, we configure Pusher with the credentials provided, then we defined a listener for the `new::location`  event which was registered in the `LocationController.postLocation`  function we created above to handle comment creation.\nAt last, we trigger a `new-location` event on the `location-channel` with the `trigger` method.\n\n\n\n## Build the map component\n\nOur map will be a Vue component built with Leaflet library. Every time a user visits the app, we’ll grasp their position coordinates, and then send them to our backend. The backend at its turn will emit an event through the Pusher Channel `location-channel` we defined earlier and at last having subscribed to this channel in our component, we’ll be able to listen to realtime position updates and react properly to them.  \n\nCreate a `components` folder inside your `../assets/js` directory, create your `Map.vue` component inside.\nTake a look at the following code, don’t forget to paste inside your component file\n \n``` javascript\n    //../resources/assets/js/components/Map.vue\n    \u003ctemplate\u003e\n      \u003cdiv id=\"map\"\u003e\u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n      mounted() {\n        let lat = 51.505, long = -0.03;\n        const myMap = L.map(\"map\").setView([lat, long], 13);\n        \n        var marker = L.marker([lat, long])\n          .addTo(myMap)\n          .bindPopup(\n            `\u003ch2\u003e Initial Location \u003c/h2\u003e lat:\u003cb\u003e${lat}\u003c/b\u003e, long:\u003cb\u003e${long}\u003c/b\u003e`\n          );\n        var circle = L.circle([lat, long], {\n          color: \"red\",\n          fillColor: \"#f03\",\n          fillOpacity: 0.5,\n          radius: 500\n        }).addTo(myMap);\n        //set up Leaflet\n       \n        L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n          maxZoom: 16,\n          attribution:\n            '\u0026copy; \u003ca href=\"https://www.openstreetmap.org/copyright\"\u003eOpenStreetMap\u003c/a\u003e contributors'\n        }).addTo(myMap);\n        \n        //set up Pusher\n        var pusher = new Pusher(\"your_pusher_app_key\", {\n          cluster: \"eu\",\n          forceTLS: false\n        });\n        \n        //Subscribe to the channel we specified in our Adonis Application\n        let channel = pusher.subscribe(\"location-channel\");\n        channel.bind(\"new-location\", data =\u003e {\n          let { lat, long } = data.location; //ES6 DESTRUCTURING\n          myMap.setView([lat, long], 13);\n          var marker = L.marker([lat, long])\n            .bindPopup(\n              `\u003ch2\u003e Your Position \u003c/h2\u003e lat:\u003cb\u003e${lat}\u003c/b\u003e, long:\u003cb\u003e${long}\u003c/b\u003e`\n            )\n            .addTo(myMap);\n          var circle = L.circle([lat, long], {\n            color: \"red\",\n            fillColor: \"#f03\",\n            fillOpacity: 0.5,\n            radius: 500\n          }).addTo(myMap);\n        });\n        \n        this.loadLocations(myMap);\n        this.sendLocation();\n        \n      },\n      methods: {\n        loadLocations(map) {\n          axios\n            .get(\"locations\")\n            .then(res =\u003e {\n              // const myMap = L.map(\"map\");\n              console.log(res.data);\n              res.data.forEach(location =\u003e {\n                // alert(\"location\");\n                let { lat, long } = location; //ES6 DESTRUCTURING\n                lat = parseFloat(lat);\n                long = parseFloat(long);\n                var marker = L.marker([lat, long])\n                  .addTo(map)\n                  .bindPopup(\n                    `\u003ch2\u003e Position \u003c/h2\u003e lat:\u003cb\u003e${lat}\u003c/b\u003e, long:\u003cb\u003e${long}\u003c/b\u003e`\n                  );\n                var circle = L.circle([lat, long], {\n                  color: \"red\",\n                  fillColor: \"#f03\",\n                  fillOpacity: 0.5,\n                  radius: 500\n                }).addTo(map);\n              });\n            })\n            .catch(err =\u003e {\n              console.log(err);\n            });\n        },\n        sendLocation() {\n          if (\"geolocation\" in navigator) {\n            navigator.geolocation.getCurrentPosition(function(position) {\n              axios.post(\"locations\", {\n                  lat: position.coords.latitude,\n                  long: position.coords.longitude\n                })\n                .then(res =\u003e {\n                  console.log(res.data.msg);\n                })\n                .catch(err =\u003e console.log(err));\n            });\n          } else {\n            alert(\"Your browser doesn't support HTML5 geolocation API\");\n          }\n        }\n      }\n    };\n    \u003c/script\u003e\n    \u003cstyle scoped\u003e\n    #map {\n      width: 100%;\n      height: 100%;\n    }\n    \u003c/style\u003e\n```    \n\nThe `template` section has a simple `\u003cdiv\u003e` which is given a map id. \n\nIn the `script`  part, we defined a set of coordinates to initialize our map.\n\nThen we’ll initialize the map and set its view to our chosen geographical coordinates and a zoom level:  `const myMap = L.map(\"map\").setView([lat, long], 13);` . We also add a marker, and a circle to our map: \n\n``` javascript\n    var marker = L.marker([lat, long])\n          .addTo(myMap)\n          .bindPopup(\n            `\u003ch2\u003e Initial Location \u003c/h2\u003e lat:\u003cb\u003e${lat}\u003c/b\u003e, long:\u003cb\u003e${long}\u003c/b\u003e`\n          );\n        var circle = L.circle([lat, long], {\n          color: \"red\",\n          fillColor: \"#f03\",\n          fillOpacity: 0.5,\n          radius: 500\n        }).addTo(myMap);\n```        \n\nWe bind a popup to the marker which will be shown when the marker is clicked. The popup contains the location coordinates. The circle can take some options to style its appearance as you can see. But for all these we pass the coordinates as an argument. Next we simply add a tile layer to add to our map.\n\nAfter setting up our map, we initalize Pusher  and subscribe to our `location-channel` thus we can be able to listen to events broadcasted:\n\n``` javascript\nlet channel = pusher.subscribe(\"location-channel\");\n```\n\n\u003e Do not forget to add your Pusher app key when initializing Pusher\n\nThe subscription returns back a `channel` object that we use to listen to the `new-location` event;\nthis enables us to get visitors’ location updates in realtime: we pull in their coordinates, set the map view to this position instantly, then we add a marker and a circle to this particular position.\n\nYou may have also noticed two methods: \n\n- `loadLocations`: it does nothing but gets existing locations from the database, loops through them and for each one, adds it to the map with a proper marker and a circle. This is done with the help of the Axios JS library\n\n\n- `sendLocation`: in this method, we check if the user’s browser supports geolocation, if so we get its location coordinates and send it to our backend through a post request, if not we tell the user that his browser doesn’t support yet this functionality.\n\nIn the `style` section, we just defined a proper style to our map so that it can fit the entire page.\n\nAfter the previous steps, you have to update your `app.js` file like the following:\n\n\n``` javascript\n    import './bootstrap';\n    window.Vue = require('vue');\n    \n    import LocationMap from './components/Map';\n    const app = new Vue({\n        el: '#app',\n        components: {\n            LocationMap\n        }\n    });\n```    \n\nWe import our `Map.vue` component, initialize Vue and bind our component to the Vue instance.\nAlso note that the Vue dependency is registered globally in order to access it everywhere: `window.Vue = require('vue');` \n\n\n## Finalize the app\n\nNow, let’s create our `map.edge` file which contains our three Vue.js components. Run this command: `adonis make:view map`  to create the file. Then paste this code inside: \n\n``` html\n    //../resources/views/map.edge\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"/\u003e\n      \u003ctitle\u003eRealtime map with Vue.js, Leaflet and Pusher Channels\u003c/title\u003e\n      \u003cmeta name=\"csrf-token\" content=\"{{csrfToken}}\"\u003e\n      \u003cmeta name=\"viewport\"\n            content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"\u003e\n            \u003clink rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.3.4/dist/leaflet.css\" /\u003e\n      \u003cscript async src=\"https://unpkg.com/leaflet@1.3.4/dist/leaflet.js\"\u003e\u003c/script\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \n    \u003cdiv id=\"app\"\u003e\n       \u003cdiv class=\"container\"\u003e\n         \u003clocation-map\u003e\u003c/location-map\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    {{ script('js/app.js') }}\n    \u003c/body\u003e\n    \u003c/html\u003e\n```    \n\nWe are almost done! Open your terminal and run `npm run asset-dev` to build your app. This can take a few seconds. After this step, run `adonis serve --dev` and open your browser to `localhost:3333`  to see your nice map. A new visitor’s location will be added instantly as intended 😎.\n\n\n\u003e **Warning:** Please note that the map may not move automatically to your postion, then you’ll have to zoom out in order to see your position.\n\n## Conclusion\n\nThis is the end of the tutorial. I do hope you’ve enjoyed what you learned here: building a live map with Vue.js, Leaflet and Pusher Channels. The knowledge acquired here can help you achieve more astonishing things. You can get the full source code [here](https://github.com/Ethiel97/realtime_map).","metaTitle":"Build a live map with Leaflet, Vue.js and Adonis.js ","metaDescription":"This tutorial guides you through creating a simple map that displays the user's live location when they log on. It makes use of Leaflet.js to customize Google Maps. Adonis.js is used for the backend, and Vue.js for the frontend."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"60CR8KRc2IA8o8IqCWUosQ","type":"Entry","createdAt":"2018-07-02T13:14:33.936Z","updatedAt":"2020-06-19T11:09:48.081Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Implement geofencing in Ionic","url":"geofencing-ionic","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/HackAfro/ionic-geofence-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-06-29","description":"Build a geofencing app for mobile using Ionic and Google Maps. Ionic is an open source SDK for developing native web apps. Admin users will be notified when a user exits a defined area.","prerequisite":"You will need Node and npm installed on your machine. A basic understanding of Angular, TypeScript and Ionic will be helpful.","content":"## Introduction\n\nA **geo-fence** is a virtual perimeter for a real-world geographic area. Geofencing is the use of GPS or RFID technology to create a virtual geographic boundary, enabling software to trigger a response when a mobile device enters or leaves a particular area. \n\nUsing [Ionic](https://ionicframework.com/), you can create a mobile application using web technologies and use a wide array of existing components. Using [Pusher](https://pusher.com), we can enable realtime functionalities in the application using Pusher’s pub/sub pattern. \n\nWe’ll be building a realtime location tracker application using Pusher, Ionic and the Google Maps library. Using the application, admin users will be notified when a user exits a predefined geofence. When this happens, the admin user receives a notification containing the user’s current location\n\nHere’s a demo of the final product:\n\n![ionic-geofence-demo](//images.ctfassets.net/1es3ne0caaid/16YJyTIcJY2U24gQIk6OkM/bfb4d451e5d968578686b7cac3fbc8ba/ionic-geofence-demo.png)\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of [Angular](https://angular.io), Ionic and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nWe’ll be using these tools to build out our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Ionic](https://ionicframework.com/)\n- [Google Maps](https://cloud.google.com/maps-platform/)\n\nWe’ll be sending messages to the server and using [Pusher’s](https://pusher.com) pub/sub pattern, we’ll listen to and receive messages in realtime. To make use of Pusher you’ll have to create an account [here](https://pusher.com). \n\nAfter account creation, visit the dashboard. Click **Create new Channels app**, fill out the details, click **Create my app**, and make a note of the details on the **App Keys** tab.\n\n\nLet’s build!\n\n## Setup and folder structure\n\nWe’ll initialize our project using the Ionic CLI (command line interface). First, install the CLI by running `npm install -g ionic` in your terminal. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/) installed.\n\nTo create a new Ionic project called `geofence``-app` using the CLI, open a terminal and run:   \n\n```\n    ionic start geofence-app tabs\n```\n\nThe command uses the CLI to create a new project using the tabs template. Follow the prompt and integrate your app with Cordova to target IOS and Android.\n\n![ionic-geofence-integrate-cordova](//images.ctfassets.net/1es3ne0caaid/1IUUkS2jWEsGkaoC0ImGA0/a4419e24c715605029dc1edc7a6a60d5/ionic-geofence-integrate-cordova.png)\n\n Type **Y** to integrate Cordova into the application. The next prompt will ask if you want to integrate Ionic pro into the application. If you have an Ionic pro account, type **Y** and **N** if you don’t.\n\nThe Ionic team provides three ready made starter templates. You can check out the rest of the templates [here](https://ionicframework.com/getting-started).\n\nIf you don’t have Cordova installed on your PC, install it by running the following command:\n\n```\n    npm install -g cordova\n```\n\nOpen the newly created folder, your folder structure should look something like this:\n\n```\n    geofence-app/\n      resources/\n      node_modules/\n      src/\n        app/\n          app.component.html\n          app.module.ts\n          app.scss\n          ...\n        assets/\n          ...\n        pages/\n          home/\n          about/\n          ...\n```\n\nOpen a terminal inside the project folder and start the application by running `ionic serve`. A browser window should pop up and you should see screenshot below.\n\n![ionic-geofence-starter](//images.ctfassets.net/1es3ne0caaid/WmvVlyOTE2YeW0IMuSsIe/c4228b1e7aa22077fab6c15abd2513a1/ionic-geofence-starter.png)\n\n## Installing dependencies\n\nNext, run the following commands in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher sentiment uuid \n    \n    // front-end dependencies\n    npm install pusher-js @types/pusher-js @agm/core\n```\n\n## Building our server\n\nNow that we have our application running, let’s build out our server.\n\nTo do this we’ll make user of [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/). We’ll use this to receive requests from our Angular application.\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\nWe referenced three packages in the snippet above, `body-parser`, `pusher` and `dotenv`. Let’s get into what each one does.\n\n\n-  body-parser is a package used to parse incoming request bodies in a middleware before your handlers, available under the `req.body` property.\n- dotenv is a zero-dependency module that loads environment variables from a `.env` file into `[process.env](https://nodejs.org/docs/latest/api/process.html#process_process_env)`. This package is used so sensitive information like the `appId` and `secret` aren’t added to our codebase directly. \n- The dotenv package will load the variables provided in our `.env` file into our environment.\n\nThe `dotenv` package should always be initialized very early in the application at the top of the file. This is because we need the environment variables available throughout the application.\n\nThe calls to our endpoint will be coming in from a different origin, therefore we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nAlso, you’ll notice that we installed [Pusher](https://pusher.com) library as a dependency. Visit the [Pusher](https://pusher.com) website to create a Pusher account if you haven’t done so already.\n\nCreate a `.env` file to load the variables we’ll be needing into the Node environment. The file should be in the root folder of your project. Open the file and update it with the code below.\n\n```\n    // .env\n    \n    PUSHER_APP_ID=\u003cAPP_ID\u003e\n    PUSHER_KEY=\u003cPUSHER_KEY\u003e\n    PUSHER_SECRET=\u003cPUSHER_SECRET\u003e\n    PUSHER_CLUSTER=\u003cPUSHER_CLUSTER\u003e\n```\n\n\u003e **P.S:** Please ensure you replace the placeholder values above with your Pusher `appId`, `key`, `secret` and `cluster`.\n\n\nThis is a standard Node application configuration, nothing specific to our app.\n\n### Realtime location updates\n\nTo enable users send in their current receive messages, we’ll create a route to handle incoming requests. Update your `server.js`  file with the code below.\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: process.env.PUSHER_CLUSTER,\n      encrypted: true,\n    });\n    \n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    \n    app.post('/ping', (req, res) =\u003e {\n      const { lat, lng } = req.body;\n      const data = {\n        lat,\n        lng,\n      };\n      pusher.trigger('location', 'ping', data);\n      res.json(data);\n    });\n     ...\n```\n\n- We created a `POST /ping` route which, when hit, triggers a Pusher event.\n- We used [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to get the body of the request, we also got the `lat` and `lng` in the request body sent by the user.\n- The `data` object will contain the `lat` and `lat` sent by the user. \n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`location`), an event name (`ping`) and a payload(`data`).\n- The payload can be any value, but in this case, we have a JS object.\n- The response will contain the `data` object.\n\n\n### Geofence updates\n\nWe’ll need another route to notify admin users when a user leaves their defined geofence. Let’s create a  `POST /notify` route to handle incoming updates on the user’s geofence status. Update the `server.js` file to include the new route.\n\n``` javascript\n    //server.js\n    \n    ...\n    app.post('/ping', (req, res) =\u003e {\n      ...\n    });\n    \n    app.post('/notify', (req, res) =\u003e {\n      const { lat, lng } = req.body;\n      const data = {\n        lat,\n        lng,\n      };\n      pusher.trigger('geofence', 'exit', data);\n      res.json(data);\n    });\n    \n    ...\n```\n\n\nYou can now start the server by running `node server.js` in a terminal in the root folder of the project.\n\n\n## Home page\n\nLet’s build out the home page for our application. We’ll be creating two pages for this project, the home page and the admin page. Typically, the admin page would have been a separate application but in this context, we’ll limit it to just a page on this project.\n\nSince we’re using a starter template, we already have some pages created in the `pages` directory. \nWe’ll edit and refactor the `home`  page to suit our needs. The `home` page will display the user’s current location on the map using a marker and a string of containing the user’s formatted address. Open the `home.html` file and replace the contents with the snippet below:\n\n``` html\n    \u003c!-- home.html --\u003e\n    \n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003eHome\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \u003cion-content\u003e\n      \u003cmap [center]=\"center\" [zoom]=\"zoom\"\u003e\n      \u003c/map\u003e\n      \u003cdiv class=\"location-address\"\u003e\n        \u003cp\u003e{{address}}\u003c/p\u003e\n        \u003ch4\u003e{{state}}\u003c/h4\u003e\n      \u003c/div\u003e\n    \u003c/ion-content\u003e\n```\n\nWe’ve referenced a `map` component that hasn’t been created, we’ll get to creating it but before then let’s add some styles to the `home.scss` file. Open the file and copy the following content into it:\n\n``` scss\n    // home.scss\n    \n    page-home {\n      ion-content {\n        position: relative;\n        agm-map {\n          height: 100%;\n          width: 100%;\n        }\n        .location-address {\n          width: 100%;\n          border-top-left-radius: 15px;\n          border-top-right-radius: 15px;\n          box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2);\n          background: white;\n          position: absolute;\n          bottom: 0;\n          left: 0;\n          padding: 0 23px 10px;\n          p{\n            font-size: 20px;\n            opacity: .7;\n            font-weight: bold;\n            letter-spacing: .2px;\n            margin-bottom: 4px;\n          }\n          h4{\n            font-size: 14px;\n            opacity: 0.4;\n            font-weight: 500;\n            margin: 0;\n          }\n        }\n      }\n    }\n```\n\n\n\nUpdate the `home.ts` file below to be similar to the snippet below:\n\n``` typescript\n    import { Component, OnInit } from '@angular/core';\n    import { NavController, Platform } from 'ionic-angular';\n    import { MapsAPILoader } from '@agm/core';\n    import { HttpClient } from '@angular/common/http';\n    \n    declare const google;\n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html',\n    })\n    export class HomePage implements OnInit {\n      constructor(\n        public navCtrl: NavController,\n        private loader: MapsAPILoader,\n        private http: HttpClient,\n      ) {\n      \n      }\n      center = {\n        lat: 6.4393477,\n        lng: 3.5244628999999996,\n      };\n      zoom = 15;\n      address = '';\n      state = '';\n      \n      pingLocation(location) {\n        this.http\n          .post('http://localhost:4000/ping', location)\n          .subscribe((res) =\u003e {});\n      }\n      notify(location) {\n        this.http\n          .post('http://localhost:4000/notify', location)\n          .subscribe((res) =\u003e {});\n      }\n      \n      ngOnInit() {\n        this.loader.load().then(() =\u003e {\n          this.pingLocation(this.center);\n        });\n      }\n    }\n```\n\n\n### Realtime location updates\n\nWe’ll be updating the user’s location in realtime and also sending live location data of the user to the server. For this we’ll be using the native Geolocation API by ionic. The API will watch the user’s current position and update the marker on the map. \n\nFirst, we'll install the Geolocation plugin. Run the following commands to add the plugin to your project.\n\n```\n    ionic cordova plugin add cordova-plugin-geolocation --variable GEOLOCATION_USAGE_DESCRIPTION=\"To locate you\"\n    npm install --save @ionic-native/geolocation\n```\n\nUpdate the `home.ts` file with the snippet below:\n\n``` typescript\n    // home.ts\n    ...\n    import { MapsAPILoader } from '@agm/core';\n    import { Geolocation } from '@ionic-native/geolocation';\n    ...\n    export class HomePage implements OnInit{\n      constructor(\n        ...\n        private platform: Platform,\n        private geolocation: Geolocation\n      ){};\n      ...\n      notify(location) {\n        ...\n      }\n      reverseGeocode(latLng) {\n        const geocoder = new google.maps.Geocoder();\n        geocoder.geocode({ location: latLng }, (results, status) =\u003e {\n          if (status === 'OK') {\n            if (results[0]) {\n              const address = results[0].formatted_address;\n              const addressList = address.split(',');\n              this.address = addressList[0];\n              this.state = addressList.slice(2).join(', ');\n            }\n          }\n        });\n      }\n    \n      ngOnInit(){\n        this.loader.load().then(() =\u003e {\n          this.reverseGeocode(this.center);\n          this.pingLocation(this.center);\n        });\n        this.platform.ready().then(() =\u003e {\n          if (this.platform.is('cordova')) {\n            const watch = this.geolocation.watchPosition();\n            watch.subscribe((position) =\u003e {\n              const positionEmpty = Object.keys(position).length \u003c 1;\n              if (!positionEmpty) {\n                this.center = {\n                  lat: position.coords.latitude,\n                  lng: position.coords.longitude,\n                };\n                this.reverseGeocode(this.center);\n                this.pingLocation(this.center);\n              }\n            });\n          }\n        });\n      }\n    }\n```\n\n    \n\nIn the snippet above, we added a new method to the `HomePage` component. The `reverseGeocode` method uses the Google Maps `Geocoder` API to reverse geocode coordinates to addresses. In the function we split the `formatted_address` property getting the `short_name`, `state` and `country`.\n\nThe `ngOnInit` lifecycle got an update. First we reverse geocoded the current address after the Google Maps script has been loaded. We then check if the platform is [Cordova](https://cordova.apache.org/) supported. If it is, we initialize the geolocation API to watch the user's location, subscribing to the `watch` variable initiates the process. When the user's location is returned, we reverse geocode the coordinates to get the address, then we send the coordinates to the server.\n\nAfter this update, you should get an error that the `Geolocation` and `HttpClient` providers haven't been registered. To clear this error, we'll register the these providers in the `app.module.ts` file. Open the file and add them to the list of providers.\n\n``` typescript\n    // app.module.ts\n    \n    ...\n    import { SplashScreen } from '@ionic-native/splash-screen';\n    import { Geolocation } from '@ionic-native/geolocation';\n    import { HttpClientModule, HttpClient } from '@angular/common/http';\n    \n    @NgModule({\n      ...\n      imports: [\n        ...\n        HttpClientModule\n      ],\n      ...\n      providers: [\n        ...\n        Geolocation,\n        HttpClient,\n      ],\n    })\n    export class AppModule {}\n```\n\n\n### Setting up geofences\n\nTo set up geofences for the user, we'll make use of the native Geofence Ionic API. Install this plugin by running the following commands in a terminal in the root folder of your project.\n\n```\n    ionic cordova plugin add cordova-plugin-geofence\n    \n    npm install --save @ionic-native/geofence\n```\n\nThe next step is to use the Geofence provider in the `HomePage` component. Open the `home.ts` file and update it like so:\n\n``` typescript\n    // home.ts\n    ...\n    import { HttpClientModule, HttpClient } from '@angular/common/http';\n    import { Geofence } from '@ionic-native/geofence';\n    import { v4 } from 'uuid';\n    ...\n    export class HomePage implements OnInit {\n      constructor(\n        ...\n        private geofence: Geofence\n      ){\n        if (this.platform.is('cordova')) {\n          this.platform.ready().then((_) =\u003e {\n            geofence.initialize().then((_) =\u003e {\n              console.log('Geofence Plugin Ready');\n            });\n          });\n        }\n      }\n    \n      ...\n      private createGeofence() {\n        let fence = {\n          id: v4(), //any unique ID\n          latitude: this.center.lat, //center of geofence radius\n          longitude: this.center.lng,\n          radius: 1000, //radius to edge of geofence in meters\n          transitionType: 2,\n        };\n        this.geofence\n          .addOrUpdate(fence)\n          .then(\n            () =\u003e console.log('Geofence added'),\n            (err) =\u003e console.log('Geofence failed to add', err)\n          );\n        this.geofence.onTransitionReceived().subscribe((res) =\u003e {\n          this.notify(this.center);\n        });\n      }\n      ngOnInit(){\n        this.loader.load().then(() =\u003e {\n          ...\n        });\n        this.platform.ready().then(() =\u003e {\n          if (this.platform.is('cordova')) {\n            this.createGeofence();\n            const watch = this.geolocation.watchPosition();\n            ...\n          }\n        });\n      }\n    }\n```\n\nFirst we check if the platform is supported by Cordova and if the platform is ready. Then we initialize the `Geofence` provider in the `constructor`. In the `createGeofence` method, we define a `fence` object. The `id`, `latitude`, `longitude` and `radius` properties are kind of self explanatory. The `transitionType` is one of three possible types. A geofence has three transition types:\n\n  \n\n1. Enter\n2. Leave\n3. Both\n\n  \n\nEach type is represented by accordingly by the numbers 1, 2 and 3. Next, we call the `addOrUpdate` method of the geofence provider, the method takes in the `fence` object we created.\nWe'll be listening for the transition type of `leave`, which means we should get notified when the user leaves the set geofence. \n\nUpdating the `ngOnInit` lifecycle to call the `createGeofence` method ensures that the geofence is created once the component is initialized. Include the `Geofence` provider in the module file to prevent the app from throwing errors. Add the `Geofence` to the list of providers in the `app.module.ts` file.\n\n``` typescript\n    // app.module.ts\n    ...\n    import { HttpClientModule, HttpClient } from '@angular/common/http';\n    import { Geofence } from '@ionic-native/geofence';\n    @NgModule({\n      ...\n      providers: [\n        StatusBar,\n        SplashScreen,\n        { provide: ErrorHandler, useClass: IonicErrorHandler },\n        Geolocation,\n        HttpClient,\n        Geofence,\n      ],\n    })\n    export class AppModule {}\n```\n\n\n## Setting up the map component\n\nWe referenced an uncreated `map` component in the `home.html` file. Create a `components` folder in the `src` directory. Within it, create a `map`  folder with three files in it. `map.ts`, `map.html` and `map.scss`.\n\nFor the map component, we'll be using components provided by the [angular-google-maps](https://angular-maps.com/) library. Let's register the angular-google-maps module and the new map component in the `app.module.ts` file. Open the `app.module.ts` file and update the `imports` and `declarations` properties.\n\n``` typescript\n    // app.module.ts\n    ...\n    import { Geofence } from '@ionic-native/geofence';\n    import { AgmCoreModule } from '@agm/core';\n    import { MapComponent } from '../components/map/map';\n    @NgModule({\n      declarations: [\n        ...\n        MapComponent\n      ],\n      imports: [\n        ...\n        AgmCoreModule.forRoot({\n          // please add your own API key here: https://developers.google.com/maps/documentation/javascript/get-api-key?hl=en\n          apiKey: 'GOOGLE_API_KEY',\n          libraries: ['geometry'],\n        }),\n      ],\n     ...\n    })\n    export class AppModule {}\n```\n\nNow, open the `map.html` file and copy the content below into it:\n\n``` html\n    \u003c!-- map.html --\u003e\n    \u003cagm-map [latitude]=\"center.lat\" [longitude]=\"center.lng\" [zoom]=\"zoom\"\u003e\n      \u003cagm-marker [latitude]=\"center.lat\" [longitude]=\"center.lng\" [iconUrl]=\"'assets/imgs/user.svg'\"\u003e\u003c/agm-marker\u003e\n      \u003cagm-circle [latitude]=\"radiusCenter.lat\" [longitude]=\"radiusCenter.lng\" [radius]=\"500\" [fillColor]=\"'#ADC1B9'\"\u003e\u003c/agm-circle\u003e\n    \u003c/agm-map\u003e\n```\n\n\u003e **P.S**: All assets used in the project are available on [GitHub](https://github.com/HackAfro/ionic-geofence-app)\n\nNext, let's update the `map.scss` file to feature styles for the component:\n\n``` scss\n    // map.scss\n    map {\n      agm-map{\n        width: 100%;\n        height: 100%;\n      }\n    }\n```\n\nThat's it. Pretty straightforward. Let's define the missing variables for the map component in the `map.ts` file.\n\n``` typescript\n    // map.ts\n    import { Component, Input } from '@angular/core';\n    /**\n     * Generated class for the MapComponent component.\n     *\n     * See https://angular.io/api/core/Component for more info on Angular\n     * Components.\n     */\n    @Component({\n      selector: 'map',\n      templateUrl: 'map.html',\n    })\n    export class MapComponent {\n      text: string;\n      constructor() {}\n      @Input()\n      center = {\n        lat: 6.435838,\n        lng: 3.451384,\n      };\n      @Input() zoom = 15;\n      radiusCenter = {\n        lat: 6.435838,\n        lng: 3.451384,\n      }\n    }\n```\n\nThe map component will feature two inputs, `center` and `zoom`. The `center` input will set the center of the map and the `zoom` will do the same. Pretty self-explanatory. The `radiusCenter` will be used to define the circle drawn on the map, displaying the geofence set up. Below is a screenshot of the home page after all the changes made.\n\n![ionic-geofence-home-1](//images.ctfassets.net/1es3ne0caaid/5EISWY5Y5yMOQkgQ6k2qKU/e4b4c7c63908ea59c01f0f37887c068d/ionic-geofence-home-1.png)\n\n## Introducing Pusher and updating location in realtime\n\nSo far we have an application that allows users to send location data but the location isn’t updated in realtime. To solve this problem, we’ll include the [Pusher](https://pusher.com) library.\n\nLet’s create a Pusher service to be used application wide. The Angular CLI can aid in the service creation.  Open a terminal in your project’s root folder and run the following command.\n\n```\n    ionic generate provider pusher\n```\n\nThis command simply tells the CLI to generate a provider named `pusher` . Now open the `pusher.ts` file in the `src/providers/pusher`  directory and update it with the code snippet below:\n\n\n``` typescript\n    // src/providers/pusher/pusher.ts\n    \n    import { Injectable } from '@angular/core';\n    import Pusher from 'pusher-js';\n    \n    @Injectable()\n    export class PusherProvider {\n      constructor() {\n        this.pusher = new Pusher('PUSHER_KEY', {\n          cluster: 'PUSHER_CLUSTER',\n          encrypted: true,\n        });\n      }\n      pusher;\n    \n      public init(channelName) {\n        const channel = this.pusher.subscribe(channelName);\n        return channel;\n      }\n    }\n```\n\n\n\n- First, we initialize Pusher in the constructor. \n- The  `init` method returns the Pusher property we created. \n\n\n\u003e **Note:** Ensure you replace the `PUSHER_KEY` and `PUSHER_CLUSTER` string with your actual Pusher credentials.\n  \n\n\n## Admin page\n\nThe admin page will feature two segments, `location` and `notifications`. The location segment will display the user's current location at any particular time. Create the admin page using the CLI by running the following command:\n\n```\n    ionic generate page admin\n```\n\nYou’ll find the `admin` page generated in the `pages` folder. Open the `admin.html` file and copy the code below into it:\n\n``` html\n    \u003c!-- admin.html --\u003e\n    \n    \u003cion-header\u003e\n      \u003cdiv padding\u003e\n        \u003cion-segment [(ngModel)]=\"tab\"\u003e\n          \u003cion-segment-button value=\"location\"\u003e\n            Position\n          \u003c/ion-segment-button\u003e\n          \u003cion-segment-button value=\"notifications\"\u003e\n            Notifications\n          \u003c/ion-segment-button\u003e\n        \u003c/ion-segment\u003e\n      \u003c/div\u003e\n    \u003c/ion-header\u003e\n    \u003cion-content\u003e\n      \u003cdiv [ngSwitch]=\"tab\" style=\"height: 100%\"\u003e\n        \u003cdiv *ngSwitchCase=\"'location'\" style=\"height: 100%\"\u003e\n          \u003cmap [center]=\"center\"\u003e\u003c/map\u003e\n        \u003c/div\u003e\n        \u003cdiv *ngSwitchCase=\"'notifications'\" class=\"notifications-holder\"\u003e\n          \u003ch4 class=\"no-notifications\" *ngIf=\"!notifications.length\"\u003eNo notifications to display\u003c/h4\u003e\n          \u003cion-list *ngIf=\"notifications.length\"\u003e\n            \u003cion-item *ngFor=\"let notification of notifications\"\u003e\n              \u003cion-thumbnail item-start\u003e\n                \u003cion-icon name=\"person\"\u003e\u003c/ion-icon\u003e\n              \u003c/ion-thumbnail\u003e\n              \u003ch2\u003e{{notification.header}}\u003c/h2\u003e\n              \u003cp\u003e{{notification.body}}\u003c/p\u003e\n            \u003c/ion-item\u003e\n          \u003c/ion-list\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/ion-content\u003e\n```\n\nStyle up the page by copying the following styles into the `admin.scss` file.\n\n``` scss\n    agm-map {\n      width: 100%;\n      height: 100%;\n    }\n    ion-thumbnail {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      background: #adc1b9;\n      border-radius: 50%;\n      ion-icon {\n        font-size: 2.2em;\n        color: whitesmoke;\n      }\n    }\n    .no-notifications {\n      font-size: 14px;\n      color: deepskyblue;\n      text-transform: uppercase;\n      text-align: center;\n    }\n```\n\n\nLet’s update the `admin.ts` file to include the variables we used in the HTML file:\n\n``` typescript\n    // admin.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { NavController } from 'ionic-angular';\n    import { PusherProvider } from '../../providers/pusher/pusher';\n    import { Platform } from 'ionic-angular';\n    import { PhonegapLocalNotification } from '@ionic-native/phonegap-local-notification';\n    \n    declare const google;\n    \n    @Component({\n      selector: 'page-admin',\n      templateUrl: 'admin.html',\n    })\n    \n    export class AdminPage implements OnInit {\n      constructor(\n        public navCtrl: NavController,\n        private pusher: PusherProvider,\n        private platform: Platform,\n        private localNotification: PhonegapLocalNotification\n      ) {\n        if (platform.is('cordova')) {\n          platform.ready().then((_) =\u003e {\n            this.localNotification.requestPermission().then((perm) =\u003e {\n              if (perm === 'granted') this.permissionGranted = true;\n            });\n          });\n        }\n      }\n      tab = 'location';\n      notifications = [];\n      center = {\n        lat: 6.435838,\n        lng: 3.451384,\n      };\n      permissionGranted = false;\n      address = '';\n      reverseGeocode(latLng) {\n        const geocoder = new google.maps.Geocoder();\n        geocoder.geocode({ location: latLng }, (results, status) =\u003e {\n          if (status === 'OK') {\n            if (results[0]) {\n              const address = results[0].formatted_address;\n              const addressList = address.split(',');\n              this.address = addressList[0];\n            }\n          }\n        });\n      }\n      ngOnInit() {\n        const locationChannel = this.pusher.init('location');\n        const geofenceChannel = this.pusher.init('location');\n        locationChannel.bind('ping', (data) =\u003e {\n          this.center = {\n            ...data,\n          };\n        });\n        geofenceChannel.bind('exit', (data) =\u003e {\n          this.reverseGeocode(data);\n          if (this.permissionGranted) {\n            this.localNotification.create('Geofence exited', {\n              tag: 'message1',\n              body: 'User has exited the defined geofence',\n              icon: 'assets/imgs/user.svg',\n            });\n          }\n          const notification = {\n            header: 'User has exited the geofence',\n            body: `Current location: ${this.address}`,\n          };\n          this.notifications = this.notifications.concat(notification);\n        });\n      }\n    }\n```\n\n\nThe admin component will be displaying notifications in the notifications bar whenever a user leaves the set geofence. We’ll also have a notifications segment that will show a list of notifications over time.\n\nTo display notifications in the notifications bar, we’ll be using the [PhonegapLocalNotification](https://ionicframework.com/docs/native/phonegap-local-notification/) native API. Install it as a plugin by running the following commands.\n\n```\n    ionic cordova plugin add phonegap-plugin-local-notification\n    \n    npm install --save @ionic-native/phonegap-local-notification\n```\n\nIn the `ngOnInit` lifecycle, we list for two events `ping` and `exit` from Pusher. In the `ping` event callback we use the data returned to update the current position of the marker. When the `exit` event is called we trigger a notification using the `PhonegapLocalNotification`. A notification object is created containing a reverse geocoded address and appended to the notifications array.\n\nAfter creating the `admin` page, the next step is to register it in the `app.module.ts`  file and then add it to the `tabs` page. Update the `app.module.ts`  file and the `tabs` page to include the `admin` page and the `PhonegapLocalNotification` provider.\n\n``` typescript\n    // src/app/app.module.ts\n    \n    ...\n    import { AdminPage } from '../pages/admin/admin';\n    import { PhonegapLocalNotification } from '@ionic-native/phonegap-local-notification';\n    \n    @NgModule({\n      declarations: [\n        ...\n        AdminPage\n      ],\n      ...\n      providers: [\n        ...\n        PhonegapLocalNotification,\n      ],\n    })\n    export class AppModule {}\n```\n\n\nThen update the TabsPage to Include the AdminPage. Open the `tabs.html` file in the `src/pages/tabs` directory and replace the content with the code below:\n\n``` html\n    \u003c!-- tab.html --\u003e\n    \u003cion-tabs\u003e\n      \u003cion-tab [root]=\"tab1Root\" tabTitle=\"Home\" tabIcon=\"home\"\u003e\u003c/ion-tab\u003e\n      \u003cion-tab [root]=\"tab2Root\" tabTitle=\"Admin\" tabIcon=\"people\"\u003e\u003c/ion-tab\u003e\n    \u003c/ion-tabs\u003e\n```\n\n\nNext update the `tabs.ts` file and include the AdminPage:\n\n``` typescript\n    import { Component } from '@angular/core';\n    import { AdminPage } from '../admin/admin';\n    import { HomePage } from '../home/home';\n    @Component({\n      templateUrl: 'tabs.html',\n    })\n    export class TabsPage {\n      tab1Root = HomePage;\n      tab2Root = AdminPage;\n      constructor() {}\n    }\n```\n\n\n\nTo test the application on your mobile device, download the [IonicDevApp](https://ionicframework.com/docs/pro/devapp/) on your mobile device. Make sure your computer and your mobile device are connected to the same network. When you open the IonicDevApp, you should see Ionic apps running on your network listed. \n\n![ionic-geofence-in-app](//images.ctfassets.net/1es3ne0caaid/4Tto6qC43SyoeuuCwWk6kC/10b2fcce68e32c25cb8da5cfe7e635ad/ionic-geofence-in-app.png)\n\nTo view the application, click on it and you should see a similar view with what was on the browser. Sending messages to the server might have worked on the browser but localhost doesn’t exist on your phone, so we’ll need to create a proxy to be able to send messages from mobile. \n\n\n## Using Ngrok as a proxy\n\nTo create a proxy for our server, we’ll download Ngrok. Visit the [download](https://ngrok.com/download) page on the Ngrok website. Download the client for your OS. Unzip it and run the following command in the folder where Ngrok can be found:\n\n```\n    ./ngrok http 4000\n```\n\n![ionic-geofence-ngrok](//images.ctfassets.net/1es3ne0caaid/5xPwNwr4DmMCA6k0MaaIqo/d569c60667d1da3659409f57b9a52da5/ionic-geofence-ngrok.png)\n\nCopy the forwarding url with `https` and place it in the `home.ts` file that previously had `http://localhost:4000/ping` and `http://localhost:4000/notify`. Please do not copy mine from the screenshot above. \n\n``` typescript\n    // src/pages/home/home.ts\n    ...\n    export class HomePage implements OnInit {\n      ...\n      pingLocation() {\n        this.http\n            .post('\u003cNGROK_URL\u003e/ping', data)\n            .subscribe((res: Message) =\u003e {});\n      }\n      \n      notify(location) {\n        this.http\n          .post('\u003cNGROK_URL\u003e/notify', location)\n          .subscribe((res) =\u003e {});\n      }\n      ...\n    }\n    ...\n```\n\n\u003e Ensure to include the forwarding url you copied where the placeholder string is\n\n\n## Running on an emulator\n\nSince our application is making use of some native APIs, we’ll need to test it on an emulator. To run our app on an emulator, run any of the following commands depending on the platform you’re building for.\n\n```\n    // for IOS\n    ionic cordova emulate ios\n    \n    // for android\n    ionic cordova emulate android\n```\n\nTo build your application to deploy on either the AppStore or PlayStore, follow the instructions found [here](https://ionicframework.com/docs/pro/package/).\n\n## Conclusion\n\nUsing Ionic, Google Maps and Pusher, we’ve been able to create an application that offers realtime location tracking. We’ve also learnt how to create geofences using native APIs. You can view the source code for the demo [here](https://github.com/HackAfro/ionic-geofence-app).","metaTitle":"Implement geofencing in Ionic","metaDescription":"Create a geofencing app with Ionic and Google Maps. Ionic uses Angular and TypeScript along with Cordova. Admin users will be notified when a user exits a defined area."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1Uu3pPdHlSYmsksQ6WSowE","type":"Entry","createdAt":"2018-07-02T13:19:07.613Z","updatedAt":"2018-07-02T13:19:07.613Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a Kotlin ride sharing app with push notifications","url":"kotlin-ride-sharing-push-notifications","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/pusher-ridesharing","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2018-06-29","description":"Build a full ridesharing platform featuring realtime updates and push notifications. Use Kotlin for both the apps, and the backed, along with Spring Boot.","prerequisite":"You need suitable IDEs, including Android Studio. The tutorial assumes you have some experience with Android development.","content":"## Introduction\n\nMany user facing applications can be greatly improved by introducing realtime notifications for the user. This is especially important when the user is actively waiting for a service to arrive. \n\nIn this article we are going to build a ride sharing app. There are two parts to this app, both of which will take advantage of the Pusher Beams functionality. \n\nOn the Driver side, we will have an Android application that receives a notification when a new job comes up, when the job is no longer available and when the job has finished with the rating from the rider.\n\nOn the Rider side, we will also have an Android application that allows the user to request a car from their current location to a target location, gives regular notifications when the car is en-route to pick up and gives the ability to rate the driver when the ride is finished.\n\n![kotlin-ridesharing-demo](//images.ctfassets.net/1es3ne0caaid/6RBtbLD3JCimAcaw48UMqq/2da3756854a334305b1c4bc8786e8d03/kotlin-ridesharing-demo.gif)\n\n## Prerequisites\n\nIn order to follow along, you will need some experience with the Kotlin programming language, which we are going to use for both the backend and frontend of our application. \n\nYou will also need appropriate IDEs. We suggest [IntelliJ IDEA](https://www.jetbrains.com/idea/) and [Android Studio](https://developer.android.com/studio/index.html). Finally, you will need a free [Pusher Account](https://dash.pusher.com/authenticate/register?ref=pn-landing-page). Sign up now if you haven’t already done so.\n\nIt is also assumed that you know how to use the IDEs that you are working with, including interacting with either an emulated or physical mobile device for running the applications.\n\n## Setting up your Pusher account\n\nIn order to use the Beams API and SDKs from Pusher, you need to create a new Beams instance in the [Pusher Beta Dashboard](https://dash.pusher.com/authenticate/register?ref=pn-social-network-android).\n\nNext, on your **Overview** for your Beams instance, click **Open Quickstart** to add your Firebase Cloud Messaging (FCM) Server Key to the Beams Instance. \n\nAfter saving your FCM key, you can finish the Quickstart wizard by yourself to send your first push notification, or just continue as we’ll cover this below.\n\nIt’s important to make sure that you download and keep the `google-services.json` file from the Firebase Console as we are going to need this later on. \n\nOnce you have created your Beams instance, you will also need to note down your **Instance Id** and **Secret Key** from the Pusher Dashboard, found under the **CREDENTIALS** section of your Instance settings.\n\n## Overall architecture\n\nOur overall application will have two Android applications, and a backend application that orchestrates between them. The Rider application will send a message to the backend in order to request a ride. This will contain the start location. The backend will then broadcast out to all of the drivers that a new job is available. Once one of the drivers accepts the job, the rider is then notified of this fact and is kept informed of the car’s location until it turns up. At the same time, the other drivers are all notified that the job is no longer available.\n\nAt the other end of the journey, the driver will indicate that the job is finished. At this point, they will be able to collect a new job if they wish.\n\n## Backend application\n\nWe are going to build our backend application using Spring Boot and the Kotlin programming language, since this gives us a very simple way to get going whilst still working in the same language as the Android applications will be built.\n\nHead over to https://start.spring.io/ to create our project structure. We need to specify that we are building a **Gradle** project with **Kotlin** and Spring Boot **2.0.1** (or newer if available at the time of reading), and we need to include the “Web” component:\n\n![kotling-ridesharing-spring-initializer](//images.ctfassets.net/1es3ne0caaid/6AKZhv4Ns482MAi0WwGQa2/8cea4b3bac5645ccf5fde687f215540a/kotling-ridesharing-spring-initializer.png)\n\nThe **Generate Project** button will give you a zip file containing our application structure. Unpack this somewhere. At any time, you can execute `./gradlew bootRun` to build and start your backend server running.\n\nFirstly though, we need to add some dependencies. Open up the `build.gradle` file and add the following to the `dependencies` section:\n\n```\n    compile 'com.pusher:push-notifications-server-java:0.9.0'\n    runtime 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.2'\n```\n\nThe first of these is the Pusher library needed for triggering push notifications. The second is the Jackson module needed for serializing and deserializing Kotlin classes into JSON.\n\nNow, build the project. This will ensure that all of the dependencies are downloaded and made available and that everything compiles and builds correctly:\n\n```\n    $ ./gradlew build\n    Starting a Gradle Daemon (subsequent builds will be faster)\n    \n    \u003e Task :test\n    2018-04-27 07:34:27.548  INFO 43169 --- [       Thread-5] o.s.w.c.s.GenericWebApplicationContext   :   \n    Closing org.springframework.web.context.support.GenericWebApplicationContext@c1cf60f: startup date [Fri \n    Apr   27 07:34:25 BST 2018]; root of context hierarchy\n    \n    \n    BUILD SUCCESSFUL in 17s\n    5 actionable tasks: 5 executed\n```\n\n### Broadcasting events\n\nThe sole point of the backend application is to broadcast push notifications via the Pusher Beams service in response to incoming HTTP calls.\n\nWe have a few different endpoints that we want to handle, each of which will broadcast their own particular events:\n\n\n- POST /request-ride\n- POST /accept-job/{job}\n- POST /update-location/{job}\n- POST /pickup/{job}\n- POST /dropoff/{job}\n\nOut of these, the first one is used by the riders application whilst the others are all used by the drivers application. There is also a strict workflow between these. The very first one will generate a new job, with a unique ID that will be passed between all of the other requests and which will be used as the intent of the push notification to ensure that only the correct rider gets the messages.\n\nThe workflow is going to be:\n\n\n- Rider makes a call to `/request-ride` supplying their current location, and gets a Job ID back.\n- All currently active drivers are sent a push notification informing them of the job.\n- Driver makes a call to `/accept-job/{job}`, supplying their current location. This causes the rider to be notified that a driver has accepted the job, and where the driver is, and also causes all the other drivers to remove the job from their list.\n- Driver makes frequent calls to `/update-location/{job}` with their current location. This causes the rider to be notified of where the driver is now.\n- Driver makes a call to `/pickup/{job}` with their current location. This informs the rider that their ride is waiting for them.\n- Driver makes frequent calls to `/update-location/{job}` with their current location. This causes the rider to be notified of where the driver is now.\n- Driver makes a call to `/dropoff/{job}` with their current location. This informs the rider that their ride is over.\n\nThe first thing we need is some way to represent a location in the world. All of our endpoints will use this as their payload. Create a new class called `Location`:\n\n``` kotlin\n    data class Location(\n            val latitude: Double,\n            val longitude: Double\n    )\n```\n\nWe also need an enumeration of the actions that can be performed. Create a new class called `Actions`:\n\n``` kotlin\n    enum class Actions {\n        NEW_JOB,\n        ACCEPT_JOB,\n        ACCEPTED_JOB,\n        UPDATE_LOCATION,\n        PICKUP,\n        DROPOFF\n    }\n```\n\nNow we can create our mechanism to send out Pusher Beams notifications to the relevant clients. There are two different kinda of notification to send - one with a location and one with a rating. Create a new class called `JobNotifier`:\n\n``` kotlin\n    @Component\n    class JobNotifier(\n            @Value(\"\\${pusher.instanceId}\") private val instanceId: String,\n            @Value(\"\\${pusher.secretKey}\") private val secretKey: String\n    ) {\n        private val pusher = PushNotifications(instanceId, secretKey)\n    \n        fun notify(job: String, action: Actions, location: Location) {\n            val interests = when (action) {\n                Actions.NEW_JOB -\u003e listOf(\"driver_broadcast\")\n                Actions.ACCEPTED_JOB -\u003e listOf(\"driver_broadcast\")\n                else -\u003e listOf(\"rider_$job\")\n            }\n    \n            pusher.publish(\n                    interests,\n                    mapOf(\n                            \"fcm\" to mapOf(\n                                    \"data\" to mapOf(\n                                            \"action\" to action.name,\n                                            \"job\" to job,\n                                            \"latitude\" to location.latitude.toString(),\n                                            \"longitude\" to location.longitude.toString()\n                                    )\n                            )\n                    )\n            )\n        }\n    }\n```\n\n\u003e **Note:** If the data sent in a notification contains anything that is not a string then the Android client will silently fail to receive the notification.\n\nThis will send notifications with one of two interest sets. `driver_broadcast` will be received by all drivers that are not currently on a job, and `driver_$job` will be received by the driver currently on that job.\n\nYou will also need to add to the `application.properties` file the credentials needed to access the Pusher Beams API:\n\n```\n    pusher.instanceId=\u003cPUSHER_INSTANCE_ID\u003e\n    pusher.secretKey=\u003cPUSHER_SECRET_KEY\u003e\n```\n\nFinally we need a controller to actually handle the incoming HTTP Requests and trigger the notifications. Create a new class called `RideController`:\n\n``` kotlin\n    @RestController\n    class RideController(\n            private val jobNotifier: JobNotifier\n    ) {\n        @RequestMapping(value = [\"/request-ride\"], method = [RequestMethod.POST])\n        @ResponseStatus(HttpStatus.CREATED)\n        fun requestRide(@RequestBody location: Location): String {\n            val job = UUID.randomUUID().toString()\n            jobNotifier.notify(job, Actions.NEW_JOB, location)\n            return job\n        }\n    \n        @RequestMapping(value = [\"/accept-job/{job}\"], method = [RequestMethod.POST])\n        @ResponseStatus(HttpStatus.NO_CONTENT)\n        fun acceptJob(@PathVariable(\"job\") job: String, @RequestBody location: Location) {\n            jobNotifier.notify(job, Actions.ACCEPT_JOB, location)\n            jobNotifier.notify(job, Actions.ACCEPTED_JOB, location)\n        }\n    \n        @RequestMapping(value = [\"/update-location/{job}\"], method = [RequestMethod.POST])\n        @ResponseStatus(HttpStatus.NO_CONTENT)\n        fun updateLocation(@PathVariable(\"job\") job: String, @RequestBody location: Location) {\n            jobNotifier.notify(job, Actions.UPDATE_LOCATION, location)\n        }\n    \n        @RequestMapping(value = [\"/pickup/{job}\"], method = [RequestMethod.POST])\n        @ResponseStatus(HttpStatus.NO_CONTENT)\n        fun pickup(@PathVariable(\"job\") job: String, @RequestBody location: Location) {\n            jobNotifier.notify(job, Actions.PICKUP, location)\n        }\n    \n        @RequestMapping(value = [\"/dropoff/{job}\"], method = [RequestMethod.POST])\n        @ResponseStatus(HttpStatus.NO_CONTENT)\n        fun dropoff(@PathVariable(\"job\") job: String, @RequestBody location: Location) {\n            jobNotifier.notify(job, Actions.DROPOFF, location)\n        }\n    }\n```\n\nEvery method simply triggers one notification and returns. The handler for `/request-ride` will generate a new UUID as the job ID and will return it to the rider - the drivers will get the job ID in the appropriate push notification if they receive it.\n\n\n## Building the Riders application\n\nThe Rider Android application will also be built in Kotlin, using Android Studio. To start, open up Android Studio and create a new project, entering some appropriate details and ensuring that you select the **Include Kotlin support** option. Note that the **Package name** must match that specified when you set up the FCM Server Key earlier.\n\n![kotlin-ridesharing-create-android-1](//images.ctfassets.net/1es3ne0caaid/FFEGiryVUISEmkKyOw42m/a6bdd550b0fb08242777615db2fca334/kotlin-ridesharing-create-android-1.png)\n\nThen on the next screen, ensure that you select support for **Phone and Tablet** using at least API 23:\n\n![kotlin-ridesharing-create-android-2](//images.ctfassets.net/1es3ne0caaid/24ia023ilW2Y6mOWWq2UOi/dafa778be6315f117728af82a859773c/kotlin-ridesharing-create-android-2.png)\n\nEnsure that an **Google Maps Activity** is selected:\n\n![kotlin-ridesharing-create-android-3](//images.ctfassets.net/1es3ne0caaid/5SFxdcyCZOQUGQAwqsq2CO/bf06d5cbc06603b59ff1ec90265b893c/kotlin-ridesharing-create-android-3.png)\n\nAnd set the **Activity Name** to “MainActivity” and **Layout Name** to “activity_main”:\n\n![kotlin-ridesharing-create-android-4](//images.ctfassets.net/1es3ne0caaid/75OUKAuKmAWAGA0Os0syKw/ad6ee82a18d0230b55e5b1466c632c6d/kotlin-ridesharing-create-android-4.png)\n\nOnce the project opens, you will be presented with the file `google_maps_api.xml` with instructions on how to get a Google Maps API key. Follow these instructions to get a key to use in the application.\n\nNext we need to add some dependencies to our project to support Pusher. Add the following to the project level `build.gradle`, in the existing `dependencies` section:\n\n``` gradle\n    classpath 'com.google.gms:google-services:3.2.1'\n```\n\nThen add the following to the `dependencies` section of the app level `build.gradle`:\n\n``` gradle\n    implementation 'com.google.firebase:firebase-messaging:15.0.0'\n    implementation 'com.pusher:push-notifications-android:0.10.0'\n    \n    compile 'com.loopj.android:android-async-http:1.4.9'\n    compile 'com.google.code.gson:gson:2.2.4'\n```\n\nAnd this to bottom of the app level `build.gradle`:\n\n``` gradle\n    apply plugin: 'com.google.gms.google-services'\n```\n\nNext, copy the `google-services.json` file we downloaded earlier into the `app` directory under your project. We are now ready to actually develop our specific application using these dependencies.\n\nFinally, we need to add some permissions to our application. Open up the `AndroidManifest.xml` file and add the following immediately before the `\u003capplication\u003e` tag:\n\n``` xml\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\nAt this point we can run the application and it will display a map.\n\n\n\u003e **Note:** If you are running this on an emulator then you need to ensure that the emulator is correctly capable of working with the Google Maps API. The “Nexus 5X” with “API 28” works correctly.\n\n\n\u003e **Note:** if you get a grey screen instead of a map it likely means that the Google Maps API key is not valid or not present. Follow the instructions in `google_maps_api.xml` to set this up.\n\n### Displaying the current location\n\nThe first thing we want to be able to do is display our current location on the map. This involves requesting permission from the user to determine their location - which we need to know where our ride should pick us up - and then updating the map to display this. All of this is added to the existing MainActivity.\n\nFirstly, update the `onMapReady` function as follows:\n\n``` kotlin\n    override fun onMapReady(googleMap: GoogleMap) {\n        mMap = googleMap\n        mMap.isMyLocationEnabled = true\n        mMap.isTrafficEnabled = true\n    }\n```\n\nThis simply updates the map to show the **My Location** and **Traffic** layers. \n\nNext, add a new method called `setupMap` as follows:\n\n``` kotlin\n    private fun setupMap() {\n        val mapFragment = supportFragmentManager\n                .findFragmentById(R.id.map) as SupportMapFragment\n        mapFragment.getMapAsync(this)\n    }\n```\n\nThis is the code that is currently in `onCreate`, but which we will be removing soon.\n\nNext, add a new top-level field to the class called `REQUEST_LOCATION_PERMISSIONS`:\n\n``` kotlin\n    private val REQUEST_LOCATION_PERMISSIONS = 1001\n```\n\nThis is used so that we know in the callback from requesting permissions which call it was - so that an appropriate response can happen.\n\nNext, another new method called `onRequestPermissionsResult`:\n\n``` kotlin\n    override fun onRequestPermissionsResult(requestCode: Int,\n                                            permissions: Array\u003cout String\u003e,\n                                            grantResults: IntArray) {\n        if (requestCode == REQUEST_LOCATION_PERMISSIONS) {\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                setupMap()\n            } else {\n                Toast.makeText(this, \"Location Permission Denied\", Toast.LENGTH_SHORT)\n                        .show();\n            }\n        } else {\n            super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n        }\n    }\n```\n\nThis is a standard method defined in the `FragmentActivity` base class that we are extending for our specific case. If the user grants us permission then we move on to our `setupMap` method we’ve just defined, and if they deny us then we show a message and stop there.\n\nNext, a new method called `checkLocationPermissions` to actually check if we’ve got permission for accessing the users location already, and if not to request them:\n\n``` kotlin\n    private fun checkLocationPermissions() {\n        if (checkSelfPermission(android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\n            requestPermissions(arrayOf(android.Manifest.permission.ACCESS_FINE_LOCATION), REQUEST_LOCATION_PERMISSIONS)\n            return\n        }\n        setupMap()\n    }\n```\n\nFinally we update the `onCreate` method as follows:\n\n``` kotlin\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n    \n        checkLocationPermissions()\n    }\n```\n\nThis starts the whole chain off. When the main activity is first created, we check if we have permission to access the users location. If not we request permission. Then, once permission is granted, we use this fact to allow the user to see where they are on the map.\n\n### Requesting a ride\n\nOnce we know where the user is, we can allow them to request a ride. This will be done by adding a button to the map that they can click on in order to request their ride, which will then send their current location to our backend.\n\nFirstly, lets add our button to the map. Find and update `activity_main.xml` as follows:\n\n``` xml\n    \u003cfragment xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:map=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:id=\"@+id/map\"\n        android:name=\"com.google.android.gms.maps.SupportMapFragment\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\"com.pusher.pushnotify.ride.MainActivity\"\u003e\n    \n        \u003cButton\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"right|bottom\"\n            android:id=\"@+id/request_ride\"\n            android:text=\"Request Ride\"\n            android:padding=\"10dp\"\n            android:layout_marginTop=\"20dp\"\n            android:paddingRight=\"10dp\"\n            android:enabled=\"false\"\n            android:onClick=\"requestRide\" /\u003e\n    \n    \u003c/fragment\u003e\n```\n\n\u003e **Note:** the value for “tools:context” should match the class name of your main activity class.\n\nMost of this was already present. We are adding the `Button` element inside the `fragment` that was already there.\n\nNext we want to only have this button enabled when we have the location of the user. For this we are going to rely on the Map component telling us when it has got the users location. Update the `onMapReady` method of `MainActivity`  and add this in to the bottom:\n\n``` kotlin\n    mMap.setOnMyLocationChangeListener {\n        findViewById\u003cButton\u003e(R.id.request_ride).isEnabled = true\n    }\n```\n\nWe’re also going to create a new helper method to display a Toast message to the user:\n\n``` kotlin\n    private fun displayMessage(message: String) {\n        Toast.makeText(\n                this,\n                message,\n                Toast.LENGTH_SHORT).show();\n    \n    }\n```\n\nFinally, we will add the `requestRide` method that is triggered when the button is clicked. For now this is as follows:\n\n``` kotlin\n    fun requestRide(view: View) {\n        val location = mMap.myLocation\n    \n        val request = JSONObject(mapOf(\n                \"latitude\" to location.latitude,\n                \"longitude\" to location.longitude\n        ))\n        mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(LatLng(location.latitude, location.longitude), 15.0f))\n    \n        val client = AsyncHttpClient()\n        client.post(applicationContext, \"http://10.0.2.2:8080/request-ride\", StringEntity(request.toString()),\n                \"application/json\", object : TextHttpResponseHandler() {\n    \n            override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String) {\n                runOnUiThread {\n                    displayMessage(\"Your ride has been requested\")\n                    findViewById\u003cButton\u003e(R.id.request_ride).visibility = View.INVISIBLE\n                }\n            }\n    \n            override fun onFailure(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String, throwable: Throwable) {\n                runOnUiThread {\n                    displayMessage(\"An error occurred requesting your ride\")\n                }\n            }\n        });\n    }\n```\n\n\u003e **Note:** The import for `Header` may be ambiguous. Ensure that you select `cz.msebera.android.httpclient.Header`\n\n\n\u003e **Note:** The IP Address “10.0.2.2” is what the Android emulator sees the host machine as. You will want to change this to the real address of the server if you are running this for real.\n\nThis builds our JSON message and sends it to the */request-ride* endpoint that we built earlier. That in turn will broadcast out to all potential drivers that there is a new job. We then display a message to the rider that their ride has been requested, or else an error if we failed to request the ride. We also hide the **Request Ride** button when we have successfully requested a ride, so that we can’t request more than one at a time.\n\n### Receiving push notifications\n\nThe other major feature we need in the riders app is to be able to receive updates from the driver. This includes when a driver has accepted the job, where he is, and when he is ready to pick up or drop off the rider.\n\nAll of these notifications work in very similar manner, containing the location of the driver and the action to perform. We want to always update our map to show the position of the driver, and in many cases to display a message to the rider informing them as to what is going on.\n\nFirstly, we need to register with the Pusher Beams service to be able to receive push notifications. Add the following to the `onCreate` method of `MainActivity`:\n\n``` kotlin\n    PushNotifications.start(getApplicationContext(), \"YOUR_INSTANCE_ID\");\n```\n\nWhere “YOUR_INSTANCE_ID” is replaced with the value received from the Pusher Beams registration process, and must match the value used in the backend application.\n\nNext we want to actually register to receive notifications from the backend. This is done by updating the `o``nSuccess` method inside the `requestRide` method of `MainActivity` as follows:\n\n``` kotlin\n    override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String) {\n        PushNotifications.subscribe(\"rider_$responseString\")\n        runOnUiThread {\n            displayMessage(\"Your ride has been requested\")\n            findViewById\u003cButton\u003e(R.id.request_ride).visibility = INVISIBLE\n        }\n    }\n```\n\nThis builds an interest string that contains the job ID that we were provided, meaning that we will now receive all rider-focused notifications for this job.\n\nThe only thing remaining is to actually handle the notifications. This involves displaying where on the map the driver currently is, and potentially displaying an update message to the rider.\n\nFirstly, add a new field to the `MainAction` class to store the marker for the drivers location:\n\n``` kotlin\n    private var driverMarker: Marker? = null\n```\n\nThis defaults to `null` until we actually first get a location.\n\nNext, add a new method called update`DriverLocation`  in the `MainActivity` class to set the location of the driver, creating the marker if needed:\n\n``` kotlin\n    private fun updateDriverLocation(latitude: Double, longitude: Double) {\n        val location = LatLng(latitude, longitude)\n    \n        if (driverMarker == null) {\n            driverMarker = mMap.addMarker(MarkerOptions()\n                    .title(\"Driver Location\")\n                    .position(location)\n            )\n        } else {\n            driverMarker?.position = location\n        }\n    \n        mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(location, 17.0f))\n    }\n```\n\nFinally, add the necessary handler to receive the push notifications and react accordingly. For this, create a new method called `onResume` in the `MainActivity` class as follows:\n\n``` kotlin\n    override fun onResume() {\n        super.onResume()\n    \n        PushNotifications.setOnMessageReceivedListenerForVisibleActivity(this, object : PushNotificationReceivedListener {\n            override fun onMessageReceived(remoteMessage: RemoteMessage) {\n                val action = remoteMessage.data[\"action\"]\n    \n                runOnUiThread {\n                    updateDriverLocation(remoteMessage.data[\"latitude\"]!!.toDouble(), remoteMessage.data[\"longitude\"]!!.toDouble())\n    \n                    if (action == \"ACCEPT_JOB\") {\n                        displayMessage(\"Your ride request has been accepted. Your driver is on their way.\")\n                    } else if (action == \"PICKUP\") {\n                        displayMessage(\"Your driver has arrived and is waiting for you.\")\n                    } else if (action == \"DROPOFF\") {\n                        displayMessage(\"You are at your destination\")\n                        findViewById\u003cButton\u003e(R.id.request_ride).visibility = View.VISIBLE\n                    }\n                }\n            }\n        })\n    }\n```\n\nThis will call our new method to update the location of the driver on the map, and for selected actions will display a message informing the rider of what is happening. We also re-display the **Request Ride** button when the drop-off action occurs, so that the rider can use the app again if needed.\n\nThis completes the riders side of the application, allowing them to do everything they need to for the ride:\n\n![kotlin-ridesharing-rider-app-demo](//images.ctfassets.net/1es3ne0caaid/SOL4YBv2ACiYYsiIcqmmq/18f4c3ab3ed6ba4a38e7fbb2adbce3ce/kotlin-ridesharing-rider-app-demo.gif)\n\n## Building the drivers application\n\nThe driver Android application will also be built in Kotlin, using Android Studio. To start, open up Android Studio and create a new project, entering some appropriate details and ensuring that you select the **Include Kotlin support** option. Note that the **Package name** must match that specified when you set up the FCM Server Key earlier.\n\n\n\u003e **Note:** these instructions are almost exactly the same as for the riders app, but are repeated here for ease of following along.\n\n![kotlin-ridesharing-create-android-5](//images.ctfassets.net/1es3ne0caaid/4ENZLhc0gEEk4o6oMiOAu4/3889f9e1f12b21c658e43ba1c4ca23b9/kotlin-ridesharing-create-android-5.png)\n\nThen on the next screen, ensure that you select support for **Phone and Tablet** using at least API 23:\n\n![kotlin-ridesharing-create-android-6](//images.ctfassets.net/1es3ne0caaid/6qL0f20xtCmmeWgGoWyMuU/e312d878f160a17ebc9a652fd518a23d/kotlin-ridesharing-create-android-6.png)\n\nEnsure that an **Google Maps Activity** is selected:\n\n![kotlin-ridesharing-create-android-7](//images.ctfassets.net/1es3ne0caaid/6f2xDO0sTu6AOoguysgYG6/0df9b3e7bf31f00431f60e70f353db1f/kotlin-ridesharing-create-android-7.png)\n\nAnd set the **Activity Name** to “MainActivity” and **Layout Name** to “activity_main”:\n\n![kotlin-ridesharing-create-android-8](//images.ctfassets.net/1es3ne0caaid/5S47nZ7IB2MgMgKOGISOSG/d161c98f9106daa326bff0d8f56e7815/kotlin-ridesharing-create-android-8.png)\n\nOnce the project opens, you will be presented with the file `google_maps_api.xml` with instructions on how to get a Google Maps API key. Follow these instructions to get a key to use in the application. This can not be the same key as for the rider application since they are tied to the actual Android application that is using it. It should belong to the same Google project however.\n\nNext we need to add some dependencies to our project to support Pusher. Add the following to the project level `build.gradle`, in the existing `dependencies` section:\n\n``` gradle\n    classpath 'com.google.gms:google-services:3.2.1'\n```\n\nThen add the following to the `dependencies` section of the app level `build.gradle`:\n\n``` gradle\n    implementation 'com.google.firebase:firebase-messaging:15.0.0'\n    implementation 'com.pusher:push-notifications-android:0.10.0'\n    \n    compile 'com.loopj.android:android-async-http:1.4.9'\n    compile 'com.google.code.gson:gson:2.2.4'\n```\n\nAnd this to bottom of the app level `build.gradle`:\n\n``` gradle\n    apply plugin: 'com.google.gms.google-services'\n```\n\nNext, copy the `google-services.json` file we downloaded earlier into the `app` directory under your project. We are now ready to actually develop our specific application using these dependencies.\n\nFinally, we need to add some permissions to our application. Open up the `AndroidManifest.xml` file and add the following immediately before the `\u003capplication\u003e` tag:\n\n``` xml\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\nAt this point we can run the application and it will display a map.\n\n\n\u003e **Note:** If you are running this on an emulator then you need to ensure that the emulator is correctly capable of working with the Google Maps API. The “Nexus 5X” with “API 28” works correctly.\n\n\n\u003e **Note:** if you get a grey screen instead of a map it likely means that the Google Maps API key is not valid or not present. Follow the instructions in `google_maps_api.xml` to set this up.\n\n### Displaying the current location\n\nThe first thing we want to be able to do is display our current location on the map. This involves requesting permission from the user to determine their location - which we need to know where our ride should pick us up - and then updating the map to display this. All of this is added to the existing MainActivity.\n\n\n\u003e **Note:** this is all exactly the same as for the riders application, but is repeated here for ease of following along.\n\nFirstly, update the `onMapReady` function as follows:\n\n``` kotlin\n    override fun onMapReady(googleMap: GoogleMap) {\n        mMap = googleMap\n        mMap.isMyLocationEnabled = true\n        mMap.isTrafficEnabled = true\n    }\n```\n\nThis simply updates the map to show the **My Location** and **Traffic** layers. \n\nNext, add a new method called `setupMap` as follows:\n\n``` kotlin\n    private fun setupMap() {\n        val mapFragment = supportFragmentManager\n                .findFragmentById(R.id.map) as SupportMapFragment\n        mapFragment.getMapAsync(this)\n    }\n```\n\nThis is the code that is currently in `onCreate`, but which we will be removing soon.\n\nNext, add a new top-level field to the class called `REQUEST_LOCATION_PERMISSIONS`:\n\n``` kotlin\n    private val REQUEST_LOCATION_PERMISSIONS = 1001\n```\n\nThis is used so that we know in the callback from requesting permissions which call it was - so that an appropriate response can happen.\n\nNext, another new method called `onRequestPermissionsResult`:\n\n``` kotlin\n    override fun onRequestPermissionsResult(requestCode: Int,\n                                            permissions: Array\u003cout String\u003e,\n                                            grantResults: IntArray) {\n        if (requestCode == REQUEST_LOCATION_PERMISSIONS) {\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                setupMap()\n            } else {\n                Toast.makeText(this, \"Location Permission Denied\", Toast.LENGTH_SHORT)\n                        .show();\n            }\n        } else {\n            super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n        }\n    }\n```\n\nThis is a standard method defined in the `FragmentActivity` base class that we are extending for our specific case. If the user grants us permission then we move on to our `setupMap` method we’ve just defined, and if they deny us then we show a message and stop there.\n\nNext, a new method called `checkLocationPermissions` to actually check if we’ve got permission for accessing the users location already, and if not to request them:\n\n``` kotlin\n    private fun checkLocationPermissions() {\n        if (checkSelfPermission(android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\n            requestPermissions(arrayOf(android.Manifest.permission.ACCESS_FINE_LOCATION), REQUEST_LOCATION_PERMISSIONS)\n            return\n        }\n        setupMap()\n    }\n```\n\nFinally we update the `onCreate` method as follows:\n\n``` kotlin\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n    \n        checkLocationPermissions()\n    }\n```\n\nThis starts the whole chain off. When the main activity is first created, we check if we have permission to access the users location. If not we request permission. Then, once permission is granted, we use this fact to allow the user to see where they are on the map.\n\n### Receive notifications of new jobs\n\nNow that we can show the driver where they are on the map, we want to show them where the potential riders are and allow them to accept a job.\n\nFirstly, we need to register with the Pusher Beams service to be able to receive push notifications, and then subscribe to the `driver_broadcast` interest to be told about the jobs. Add the following to the `onCreate` method of `MainActivity`:\n\n``` kotlin\n    PushNotifications.start(getApplicationContext(), \"YOUR_INSTANCE_ID\");\n    PushNotifications.subscribe(\"driver_broadcast\")\n```\n\nWhere “YOUR_INSTANCE_ID” is replaced with the value received from the Pusher Beams registration process, and must match the value used in the backend application.\n\nNext, add a method to display a message to the user when we need to inform them of something. Create the method `displayMessage` in the `MainActivity` class as follows:\n\n``` kotlin\n    private fun displayMessage(message: String) {\n        Toast.makeText(\n                this,\n                message,\n                Toast.LENGTH_SHORT).show();\n    }\n```\n\nNext, add a new top level field into the `MainActivity` class to store the markers that we are placing:\n\n``` kotlin\n    private val markers = mutableMapOf\u003cString, Marker\u003e()\n```\n\nNext, we add a listener so that when we are notified about a job we can place a pin on the map showing where the rider is. For this, add a new `onResume` method to the `MainActivity` class as follows:\n\n``` kotlin\n    override fun onResume() {\n        super.onResume()\n    \n        PushNotifications.setOnMessageReceivedListenerForVisibleActivity(this, object : PushNotificationReceivedListener {\n            override fun onMessageReceived(remoteMessage: RemoteMessage) {\n                val action = remoteMessage.data[\"action\"]\n    \n                runOnUiThread {\n                    if (action == \"NEW_JOB\") {\n                        val jobId = remoteMessage.data[\"job\"]!!\n                        val location = LatLng(remoteMessage.data[\"latitude\"]!!.toDouble(), remoteMessage.data[\"longitude\"]!!.toDouble())\n    \n                        val marker = mMap.addMarker(MarkerOptions()\n                                .position(location)\n                                .title(\"New job\"))\n                        marker.tag = jobId\n                        markers[jobId] = marker\n    \n                        displayMessage(\"A new job is available\")\n                    }\n                }\n            }\n        })\n    }\n```\n\nWe are setting the `tag` on the marker to the ID of the job that has turned up. This will be used next to allow the driver to accept the job. We are also storing the marker in a map so that we can look it up later by ID.\n\n### Accepting a job\n\nAccepting a job is going to be done by clicking on a marker. Once done, the app will send a message to the backend to accept the job, and will start sending regular messages with the drivers location. It will also allow for a **Pickup** and **Dropoff** button to be displayed for the driver to click as appropriate.\n\nFirstly, add a new top-level field to the `MainActivity` class to store the ID of the current job:\n\n``` kotlin\n    private var currentJob: String? = null\n```\n\nNext, update the `onMapReady` method to add a handler for clicking on a marker. This will send the HTTP request to our backend to accept the job, and record the fact in the application that this is now the current job.\n\n``` kotlin\n    mMap.setOnMarkerClickListener { marker -\u003e\n        if (currentJob != null) {\n            runOnUiThread {\n                displayMessage(\"You are already on a job!\")\n            }\n        } else {\n    \n            val jobId = marker.tag\n    \n            val location = mMap.myLocation\n    \n            val request = JSONObject(mapOf(\n                    \"latitude\" to location.latitude,\n                    \"longitude\" to location.longitude\n            ))\n    \n            val client = AsyncHttpClient()\n            client.post(applicationContext, \"http://10.0.2.2:8080/accept-job/$jobId\", StringEntity(request.toString()),\n                    \"application/json\", object : TextHttpResponseHandler() {\n    \n                override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String) {\n                    runOnUiThread {\n                        displayMessage(\"You have accepted this job\")\n                        currentJob = jobId as String\n                    }\n                }\n    \n                override fun onFailure(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String, throwable: Throwable) {\n                    runOnUiThread {\n                        displayMessage(\"An error occurred accepting this job\")\n                    }\n                }\n            });\n        }\n        \n        true\n    }\n```\n\n\u003e **Note:** The import for `Header` may be ambiguous. Ensure that you select `cz.msebera.android.httpclient.Header`\n\n### Removing old jobs from the map\n\nWe also want to tidy up the map when a job is accepted, removing markers from every drivers map - including the driver that accepted the job - but adding a new one in a different colour back to the local drivers map.\n\nFirstly, add another new field to the `MainActivity` class for the marker of the job we are currently on: \n\n``` kotlin\n    private var currentJobMarker: Marker? = null\n```\n\nNext, update the `onMessageReceived` callback inside the `onResume` method of `MainActivity` as follows:\n\n``` kotlin\n    override fun onMessageReceived(remoteMessage: RemoteMessage) {\n        val action = remoteMessage.data[\"action\"]\n    \n        runOnUiThread {\n            if (action == \"NEW_JOB\") {\n                val jobId = remoteMessage.data[\"job\"]!!\n                val location = LatLng(remoteMessage.data[\"latitude\"]!!.toDouble(), remoteMessage.data[\"longitude\"]!!.toDouble())\n    \n                val marker = mMap.addMarker(MarkerOptions()\n                        .position(location)\n                        .title(\"New job\"))\n                marker.tag = jobId\n                markers[jobId] = marker\n    \n                displayMessage(\"A new job is available\")\n            } else if (action == \"ACCEPTED_JOB\") {\n                val jobId = remoteMessage.data[\"job\"]!!\n                val location = LatLng(remoteMessage.data[\"latitude\"]!!.toDouble(), remoteMessage.data[\"longitude\"]!!.toDouble())\n    \n                markers[jobId]?.remove()\n                markers.remove(jobId)\n            }\n        }\n    }\n```\n\nHere we are adding the block to handle the `ACCEPTED_JOB` event alongside the `NEW_JOB` event. This is broadcast out to every driver when any driver accepts a job, and is used to remove the markers indicating a job is waiting for pickup.\n\nFinally, add the following in to the `onSuccess` handler in the `onMapReady` method of `MainActivity`:\n\n``` kotlin\n    val selectedJobMarker = markers[jobId]!!\n    val marker = mMap.addMarker(MarkerOptions()\n            .position(selectedJobMarker.position)\n            .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE))\n            .title(\"Current job\"))\n    marker.tag = jobId\n    \n    currentJobMarker = marker\n```\n\nThis adds a new marker to the map, coloured blue instead of the default red, to indicate the job that we are actively on.\n\n### Picking up and dropping off\n\nIn order to pick up and drop off the rider, we need to add UI controls to support this. We are going to add buttons that appear on the map at appropriate times to allow the driver to indicate that he’s ready for pickup and for dropoff.\n\nFirstly, update `activity_main.xml` as follows to add the buttons:\n\n``` xml\n    \u003cfragment xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:map=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:id=\"@+id/map\"\n        android:name=\"com.google.android.gms.maps.SupportMapFragment\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\"com.pusher.pushnotify.ride.MainActivity\"\u003e\n    \n        \u003cButton\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"right|bottom\"\n            android:id=\"@+id/pickup_ride\"\n            android:text=\"Pickup\"\n            android:padding=\"10dp\"\n            android:layout_marginTop=\"20dp\"\n            android:paddingRight=\"10dp\"\n            android:visibility=\"invisible\"\n            android:onClick=\"pickupRide\" /\u003e\n    \n        \u003cButton\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"right|bottom\"\n            android:id=\"@+id/dropoff_ride\"\n            android:text=\"Dropoff\"\n            android:padding=\"10dp\"\n            android:layout_marginTop=\"20dp\"\n            android:paddingRight=\"10dp\"\n            android:visibility=\"invisible\"\n            android:onClick=\"dropoffRide\" /\u003e\n    \n    \u003c/fragment\u003e\n```\n\nThese buttons are initially invisible, but we will display them as necessary in the application.\n\nNext, update the `onSuccess` method inside of `onMapReady` to ensure the correct buttons are displayed. This should now look like:\n\n``` kotlin\n    override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String) {\n        runOnUiThread {\n            displayMessage(\"You have accepted this job\")\n            currentJob = jobId as String\n            findViewById\u003cButton\u003e(R.id.dropoff_ride).visibility = View.INVISIBLE\n            findViewById\u003cButton\u003e(R.id.pickup_ride).visibility = View.VISIBLE\n        }\n    }\n```\n\nFinally, we add the handlers for these buttons. First the one to pick up the rider. Add a new method called `pickupRide` as follows:\n\n``` kotlin\n    fun pickupRide(view: View) {\n        val location = mMap.myLocation\n    \n        val request = JSONObject(mapOf(\n                \"latitude\" to location.latitude,\n                \"longitude\" to location.longitude\n        ))\n    \n        val client = AsyncHttpClient()\n        client.post(applicationContext, \"http://10.0.2.2:8080/pickup/$currentJob\", StringEntity(request.toString()),\n                \"application/json\", object : TextHttpResponseHandler() {\n    \n            override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String?) {\n                runOnUiThread {\n                    findViewById\u003cButton\u003e(R.id.dropoff_ride).visibility = View.VISIBLE\n                    findViewById\u003cButton\u003e(R.id.pickup_ride).visibility = View.INVISIBLE\n                    currentJobMarker?.remove()\n                    currentJobMarker = null\n                }\n            }\n    \n            override fun onFailure(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String, throwable: Throwable) {\n                runOnUiThread {\n                    displayMessage(\"An error occurred picking up your ride\")\n                }\n            }\n        });\n    }\n```\n\nThis will make the call to the backend, and on success will cause the **Pickup** button to be hidden and the **Dropoff** button to be displayed. It also removes the blue marker for the current job, since we have just picked them up.\n\nNext the handler for dropping off the rider. Add another new method called `dropoffRide` as follows:\n\n``` kotlin\n    fun dropoffRide(view: View) {\n        val location = mMap.myLocation\n    \n        val request = JSONObject(mapOf(\n                \"latitude\" to location.latitude,\n                \"longitude\" to location.longitude\n        ))\n    \n        val client = AsyncHttpClient()\n        client.post(applicationContext, \"http://10.0.2.2:8080/dropoff/$currentJob\", StringEntity(request.toString()),\n                \"application/json\", object : TextHttpResponseHandler() {\n    \n            override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String?) {\n                runOnUiThread {\n                    findViewById\u003cButton\u003e(R.id.dropoff_ride).visibility = View.INVISIBLE\n                    findViewById\u003cButton\u003e(R.id.pickup_ride).visibility = View.INVISIBLE\n                    currentJob = null\n                }\n            }\n    \n            override fun onFailure(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String, throwable: Throwable) {\n                runOnUiThread {\n                    displayMessage(\"An error occurred dropping off your ride\")\n                }\n            }\n        });\n    }\n```\n\n### Sending location updates\n\nThe final thing that we need to do is have the driver application send updates about its location so that the rider can be updated.\n\nThis involves using the phones GPS to get updates every time the phone moves, and sending these updates to the backend - but only if we are currently on a job.\n\nIn order to do this, add the following to the bottom of the `setupMap` method in `MainActivity`. This is used because it’s called already once we know we have permission to get the devices location.\n\n``` kotlin\n    val locationManager = applicationContext.getSystemService(LocationManager::class.java)\n    locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 100, 0.0f, object : LocationListener {\n        override fun onLocationChanged(location: Location) {\n            if (currentJob != null) {\n                val request = JSONObject(mapOf(\n                        \"latitude\" to location.latitude,\n                        \"longitude\" to location.longitude\n                ))\n    \n                val client = AsyncHttpClient()\n                client.post(applicationContext, \"http://10.0.2.2:8080/update-location/$currentJob\", StringEntity(request.toString()),\n                        \"application/json\", object : TextHttpResponseHandler() {\n    \n                    override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String?) {\n                    }\n    \n                    override fun onFailure(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String, throwable: Throwable) {\n                    }\n                });\n    \n            }\n        }\n    \n        override fun onStatusChanged(provider: String?, status: Int, extras: Bundle?) {\n    \n        }\n    \n        override fun onProviderEnabled(provider: String?) {\n    \n        }\n    \n        override fun onProviderDisabled(provider: String?) {\n    \n        }\n    }, null)\n```\n\n\u003e **Note:** it’s likely that Android Studio will complain about having not performed the correct permissions checks. This error is actually wrong, except that Android Studio can’t tell that because of the way the methods are structured.\n\n\n\u003e **Note:** we have a number of empty methods here. They are required to be defined by the calling class, but we don’t actually have any need for them.\n\nAt this point, we have a fully working application suite that allows riders to request rides, and drivers to pick them up and drop them off. Remember to run your backend application before you launch the Android apps, and then we can test them out working together.\n\n![kotlin-ridesharing-demo](//images.ctfassets.net/1es3ne0caaid/6RBtbLD3JCimAcaw48UMqq/2da3756854a334305b1c4bc8786e8d03/kotlin-ridesharing-demo.gif)\n\n## Conclusion\n\nThis article shows how to use Pusher Beams along with the location and maps functionality of your phone to give a truly interactive experience of requesting a ride. We have painlessly implemented the sending of appropriate details from one device to another, keeping both parties updated to the current job.\n\nThe full source code for this application is available on [GitHub](https://github.com/sazzer/pusher-ridesharing). Why not try extending it yourself. There are many additional things that can be added very easily using Pusher technology to improve the application even further.","metaTitle":"Build a Kotlin ride sharing app with push notifications","metaDescription":"Use Kotlin, Gradle and Spring Boot to build a full ridesharing application, featuring apps for both the driver and rider. Use Google Maps to track rides."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1oZYQdJ1kMCWW0e4gmsyC4","type":"Entry","createdAt":"2018-06-27T11:27:57.513Z","updatedAt":"2018-06-27T11:27:57.513Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a geofencing web app using Ember","url":"geofencing-ember","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/9jaswag/pusher-geofencing","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"oh5mPeR5cGqMImEyKoWwQ","type":"Entry","createdAt":"2018-02-12T14:46:47.672Z","updatedAt":"2018-02-12T14:46:47.672Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ember.js","url":"ember-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-06-24","description":"Build a web app using Ember.js and Google Maps, with Node for the backend. Users are able to check in, submitting their location. An admin user is then alerted whether the user is within a given radius.","prerequisite":"You will need Node and npm installed on your machine. Some knowledge of JavaScript will be helpful.","content":"## Introduction\n\nA [geofence](https://en.wikipedia.org/wiki/Geo-fence) is a virtual perimeter for a real-world geographic area. With a geofencing app, we can define a virtual boundary and be notified when users enter and exits the boundary.\n\nIn this tutorial, we’ll be building a simple geofencing web application using Ember.js.\nBelow is a sneak peek of what we’ll be building:\n\n![ember-geofencing-demo](//images.ctfassets.net/1es3ne0caaid/4ihzau8I5iE2Uo8KQeY6Ci/c7725fecc936e5f4d52aa5a04ec6f21f/ember-geofencing-demo.gif)\n\n## Prerequisites\n\nTo follow this tutorial, you need both Node and NPM installed on your machine. A basic JavaScript understanding will help you get the most out of this tutorial.\nIf you don’t have Node.js installed, go to [https://nodejs.org/](https://nodejs.org/) and install the recommended version for your operating system.\n\n\n## Installing Ember.js\n\nEmber, like lots of frameworks out there offers a command line utility used to create, build, serve, and test [Ember.js](https://emberjs.com/) apps and addons. The Ember CLI helps us spin up Ember apps with a single command. Run the following command to install the Ember CLI on your machine:\n\n```\n    $ npm install -g ember-cli\n```\n\nThe command above installs the Ember CLI globally on your machine. Once it is done installing, run the following command to create a new Ember app and then move to this new directory:\n\n```\n    $ ember new pusher-geofencing\n    $ cd pusher-geofencing\n```\n\nOnce in the `pusher-geofencing` directory, you can serve the app running the following command:\n\n```\n    $ ember s\n```\n\nThis command starts up Ember’s built-in “live-reloading” development server on port 4200. You can see the app in your browser by visiting http://localhost:4200.\n\n![ember-start-page](//images.ctfassets.net/1es3ne0caaid/2Z3q7KbdrOEWGs8McO8gyC/86f812aacd929bbcd81e6a45873f91b6/ember-start-page.png)\n\n## Pusher account setup\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up).\n\n![ember-pusher-signup](//images.ctfassets.net/1es3ne0caaid/2NeDEhMbuwYsECuqGyWCUE/646d9e28c3c1ecc1517361035836a8ec/ember-pusher-signup.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![ember-pusher-create-app](//images.ctfassets.net/1es3ne0caaid/5YHrOKL5AIQk6E2OiCIeMW/473f43255c5a820f1523387487884757/ember-pusher-create-app.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher to be provided with some boilerplate code:\n\n![ember-pusher-config-app](//images.ctfassets.net/1es3ne0caaid/38gUNRKzT2UuEcQIq2GgS6/d7ef41d5c3f3afb724373fd976caef4c/ember-pusher-config-app.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![ember-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/1QiXDu6gpy0CKQCosqgcgE/1ffc23a7859704465b1a9357c07151b5/ember-pusher-app-keys.png)\n\n\n## Google Maps setup\n\nTo use the Maps JavaScript API, you must register your app on the Google API Console and get a Google API key, which will be loaded in the app. Follow this [quick guide to register your Maps app](https://developers.google.com/maps/documentation/javascript/get-api-key) and get your API credentials.\n\n\n## Application setup\n\nNow that we have our Pusher and Google Maps app keys, let’s install some dependencies and addons. Run the following commands in your terminal:\n\n```\n    $ ember install ember-bootstrap ember-auto-import\n    $ npm install pusher pusher-js express body-parser dotenv uuid --save\n```\n\nAdd the following styles to your `app.css` file:\n\n``` css\n    // app/styles/app.css\n    \n    #map {\n      height: 42rem;\n    }\n    .jumbotron {\n      height: 100vh;\n    }\n    .available-user {\n      border-radius: 3px;\n      padding: 0 0 0 0.3rem;\n      background-color: #28a745;\n      margin-top: 0.3rem;\n    }\n```\n\nLet’s configure our Bootstrap addon to use Bootstrap 4. Run the following command in your terminal:\n\n```\n    $ ember generate ember-bootstrap --bootstrap-version=4\n```\n\nWith Bootstrap now set up, let’s replace the code in our application template with the following:\n\n``` html\n    {{!-- app/templates/application.hbs --}}\n    \n    \u003cdiv class=\"container-fluid p-0\"\u003e\n      {{outlet}}\n    \u003c/div\u003e\n```\n\nLastly, let’s add our Google Maps script to the `index.html` file. Ensure you replace YOUR_API_KEY with your Google Maps API key:\n\n``` html\n    \u003c!-- app/index.html --\u003e\n    \n    \u003chead\u003e\n      ...\n      \u003cscript src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY\u0026libraries=geometry\"\u003e\u003c/script\u003e\n    \u003c/head\u003e\n```\n\n## Building our server\n\nUsually, your server should live separately from your Ember app, but for convenience sake, we are going to build our server as part of our Ember app. \nIn your root directory, create a `node-server` folder and create a `server.js` and `.env` file in that folder. Add the following code to each file:\n\n``` javascript\n    // node-server/server.js\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    const uuid = require('uuid').v4;\n    require('dotenv').config()\n    \n    const app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // enable cross-origin resource sharing\n    app.use(function (req, res, next) {\n      res.header(\"Access-Control-Allow-Origin\", \"*\");\n      res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n      next();\n    });\n    \n    const pusher = new Pusher({ // connect to Pusher\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n    });\n    \n    app.get('/', function (req, res) { // to test if the server is running\n      res.send({ success: true, message: 'server is online' });\n    });\n    \n    app.post('/check-in', function (req, res) { // route to send user information to Pusher\n      let { lat, lng, name, userId } = req.body;\n      if (lat \u0026\u0026 lng \u0026\u0026 name) {\n        if (userId.length == 0) {\n          userId = uuid();\n        }\n        const location = { lat, lng, name, userId };\n        pusher.trigger('location', 'checkin', { location });\n        res.send({ success: true, userId })\n      } else {\n        res.status(400).send({ success: false, message: 'text not broadcasted' })\n      }\n    });\n    \n    const port = process.env.PORT || 5000;\n    app.listen(port, () =\u003e {\n      console.log(`server running on port ${port}`);\n    });\n```\n```\n    // node-server/.env\n    \n    // add your Pusher credentials here\n    PUSHER_APP_ID=\"YOUR APP ID\"\n    PUSHER_APP_KEY=\"YOUR APP KEY\"\n    PUSHER_APP_SECRET=\"YOUR APP SECRET\"\n    PUSHER_APP_CLUSTER=\"YOUR APP CLUSTER\"\n```\n\nIn the `server.js` file, we created a simple server with a `/check-in` route which sends user location data via a `location`  channel to Pusher.\n\nTo run this server, open the root directory of the project in a new terminal window, and run the following command:\n\n```\n    $ cd node-server\n    $ node server.js\n```\n\nIf you’re using version control, remember to ignore your `.env` file.\n\n\n## Creating the home view\n\nOur geofencing app will have two basic pages: one for users to check in and the other for the admin to view users within range.\n\nIn Ember, when we want to make a new page that can be visited using a URL, we generate a \"route\" using Ember CLI. To generate an index route, run the following command in your terminal:\n\n```\n    $ ember g route index\n```\n\nThe above command generates three files:\n\n- A route handler, located in `app/routes/index.js`, which sets up what should happen when that route is loaded.\n- A route template, located in `app/``templates``/index.hbs`, which is where we display the actual content for the page.\n- Lastly, a route test file located in `tests/unit/routes/about-test.js`, which is used to test the route.\n\nIn the index template, add the following code:\n\n```\n    {{!-- app/templates/index.hbs --}}\n    \n    {{index-view}}\n```\n\nIn the index template, we’re simply rendering the `index-view` component which we’ll create next. The `index-view` component will contain the code for the home view. Go ahead and run the following command in your terminal to create the `index-view` component:\n\n```\n    $ ember g component index-view\n```\n\nAs with generating a route, the command above generates a template file, a JavaScript component source file and a file for testing the component. Note that every Ember controller name must be separated by a hyphen.\n\nAdd the following code the component’s template file:\n\n``` html\n    {{!-- app/templates/components/index-view.hbs --}}\n    \n    \u003cdiv class=\"jumbotron jumbotron-fluid text-center align-middle\"\u003e\n      {{#if isCheckedIn}}{{!-- run this block if the user is checked in --}}\n      \u003ch4\u003eYou're checked in\u003c/h4\u003e\n      {{else}} {{!-- run this block if the user is not checked in --}}\n      \u003ch4\u003eWelcome to Pusher Geofencer\u003c/h4\u003e\n      \u003cdiv class=\"col-4 mt-5 offset-4\"\u003e\n        {{input value=name class=\"form-control\" placeholder=\"Enter your name\" autofocus=true}}\n        \u003cbutton{{action \"checkin\"}} class=\"btn btn-success mt-5\"\u003eCheck in\u003c/button\u003e\n      \u003c/div\u003e\n      {{/if}}\n    \u003c/div\u003e\n```\n\nIn the code we added above, we have a [handlebars](https://handlebarsjs.com/) conditional statement. If the user `isCheckedIn`we display some text. When they’re not checked in, we display an input field and a button that triggers the `checkin` action in the component JavaScript source file when clicked.\n\nLet’s add the functionality in the component’s JavaScript source file:\n\n``` javascript\n    // app/components/index-view.js\n    \n    import Component from '@ember/component';\n    import { run } from '@ember/runloop';\n    import $ from 'jquery';\n    \n    export default Component.extend({\n      name: '', // user's name\n      isCheckedIn: false, // check if the user is checked in\n      userId: '', // user's userId\n      // component actions\n      actions: {\n        // action that is run when the button is clicked\n        checkin() {\n          if (this.name.length \u003e 0) { // if there is a name\n            if ('geolocation' in navigator) {\n              navigator.geolocation.watchPosition((position) =\u003e { // get user location\n                const { latitude, longitude } = position.coords;\n                const userDetail = { lat: latitude, lng: longitude, name: this.name, userId: this.userId };\n                $.ajax({ // send user data via an AJAX call\n                  url: 'http://localhost:5000/check-in',\n                  type: 'post',\n                  data: userDetail\n                }).then(response =\u003e {\n                  run(() =\u003e {\n                    this.set('userId', response.userId);\n                  });\n                })\n              }, null, { enableHighAccuracy: true });\n              this.set('isCheckedIn', true); // set isCheckedIn to true\n            }\n          } else {\n            alert('Enter a name') // if there's no name show this alert\n          }\n        }\n      }\n    });\n```\n\nIn the code above, we have a `checkin` action which is called when the **check in** button is clicked. The action gets the user’s location using the [Geolocation API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation)’s `watchPosition` method and sends it together with the user’s name to the server.\n\nIf you visit the app in the browser, you should be able to enter a name and check in after granting location permission.\n\n\n## Creating the admin view\n\nNow that our users can check in and their location is being broadcast by Pusher on the server, it’s time for us to render our map and display the users that are within our range.\n\nLet’s create our admin route and a `display-maps`  component. Run the following code in your terminal:\n\n```\n    $ ember g route admin\n    $ ember g component display-maps\n```\n\nLet’s render the `display-maps` component in the admin template file:\n\n```\n    {{!-- app/templates/admin.hbs --}}\n    \n    {{display-maps}}\n```\n\nWe’ll also add our admin view markup to the `display-maps` component\n\n``` html\n    {{!-- app/templates/components/display-maps.hbs --}}\n    \n    \u003cdiv class=\"row\"\u003e\n      \u003cdiv class=\"col-10 p-0\"\u003e\n        \u003cdiv id=\"map\"\u003e\u003c/div\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"col-2 bg-dark\"\u003e\n        \u003ch5 class=\"text-center py-3 text-white\"\u003eUsers within range\u003c/h5\u003e\n        \u003cdiv class=\"users\"\u003e\u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nNext, we’ll generate a service for implementing our map. A service is an Ember object that lives for the duration of the application and can be made available in different parts of your application.\nIt helps us abstract the logic for creating and updating our map and is a singleton, which means there is only one instance of the service object in the browser.\nTo create a maps service, run the following command in your terminal:\n\n```\n    $ ember g service maps\n```\n\nAdd the following code to the generated `maps.js` file:\n\n``` javascript\n    // app/services/maps.js\n    \n    import Service from '@ember/service';\n    import $ from 'jquery';\n    \n    const google = window.google;\n    let targetLocation;\n    const rangeRadius = 500;\n    \n    export default Service.extend({\n    \n      // function to create admin's map\n      createAdminMap(adminLocation) {\n        targetLocation = adminLocation;\n        this.createMapElement([]) // call the create map function passing empty user locations\n      },\n    \n      // function to create our map\n      createMapElement(usersLocation) {\n        const element = document.querySelector('#map');\n        let map = new google.maps.Map(element, { zoom: 16, center: targetLocation }); // generate a map\n        // The marker, positioned at center\n        this.addMarker(targetLocation, map) // add marker fot the target location\n        usersLocation.forEach(location =\u003e { // loop through the location of available users\n          // add markers for other available users to the map\n          this.addMarker(location, map, true)\n        })\n        \n        new google.maps.Circle({ // add the circle on the map\n          strokeColor: '#FF0000',\n          strokeOpacity: 0.2,\n          strokeWeight: 1,\n          fillColor: '#FF0000',\n          fillOpacity: 0.1,\n          map: map,\n          center: targetLocation,\n          radius: rangeRadius\n        });\n      },\n    \n      // function to add a marker on the map\n      addMarker(userLocation, map, icon = false) {\n        if (icon) {\n          icon = 'http://maps.google.com/mapfiles/ms/icons/green-dot.png'\n        } else {\n          icon = \"\"\n        }\n        \n        let parsedUserLocation = {\n          lat: parseFloat(userLocation.lat), // parse the location string to a float\n          lng: parseFloat(userLocation.lng),\n          name: userLocation.name,\n          userId: userLocation.userId\n        }\n        \n        new google.maps.Marker({ position: parsedUserLocation, map, icon });\n        this.addUserWithinRange(parsedUserLocation); // add users to the sidebar\n      },\n      \n      // function to add/remove users within range\n      addUserWithinRange(userLocation) {\n        if (userLocation.name) {\n          let userDistance = this.locationDistance(userLocation); // check the distance between the user and the target location\n          let existingUser = $('div').find(`[data-id=\"${userLocation.userId}\"]`); // find the user on the page via the data-id attribute\n          if (userDistance \u003c rangeRadius) { // if the user is within the range\n            if (!existingUser[0]) { // if the user is not already displayed on the page\n              let div = document.createElement('div'); // create a div element\n              div.className = 'available-user';\n              div.dataset.id = userLocation.userId;\n              let span = document.createElement('span'); // create a span element\n              span.className = 'text-white';\n              let username = `@${userLocation.name}`\n              span.append(username);\n              div.append(span);\n              const usersDiv = document.querySelector('.users');\n              usersDiv.append(div); // add the user to the page\n            }\n          } else {\n            existingUser.remove(); // remove the user from the page is they're out of range\n          }\n        }\n      },\n      \n      // function to calculate the distance between our target location and the user's location\n      locationDistance(userLocation) {\n        const point1 = new google.maps.LatLng(targetLocation.lat, targetLocation.lng);\n        const point2 = new google.maps.LatLng(userLocation.lat, userLocation.lng);\n        const distance = google.maps.geometry.spherical.computeDistanceBetween(point1, point2);\n        return distance;\n      }\n    });\n```\n\nIn our maps service, we have four functions:\n\n- The `createAdminMap` function for creating the map showing the target location\n- The `createMapElement` function for creating our map.\n- The `addMarker` function for adding markers to our map.\n- The `addUserWithinRange` function for adding and removing users from the sidebar on the admin page.\n- The `locationDistance` function for calculating if the user is within our target range.\n\nIn the `createAdminMap` function, we accept our admin’s location and call the `createMapElement` function. The `createMapElement` function generates a map using the Google Maps `Map` object and insert it to the div with the ID of `map` on our page. The  function also accepts an array of users location and for each user, we add a marker for their location on the map.\n\nThe `locationDistance` function calculates the difference between the user’s location and the target location and passes the data to the `adUserWithinRange` function which either adds or removes the user’s name from the page based on whether or not they’re within range.\n\nNow that we’ve written the code for building with our map, let’s use it in the `display-maps` component:\n\n``` javascript\n    // app/components/display-maps.js\n    \n    import Component from '@ember/component';\n    import { inject as service } from '@ember/service';\n    import Pusher from 'pusher-js';\n    \n    export default Component.extend({\n      allUsers: [].map(user =\u003e { // all users array\n        return user;\n      }),\n      maps: service('maps'),\n      \n      init() {\n        this._super(...arguments);\n        let pusher = new Pusher('YOUR_APP_KEY', { // instantiate new Pusher client\n          cluster: 'CLUSTER',\n          encrypted: true\n        });\n        let users = this.get('allUsers'); // save the allUsers array to a variable\n        const channel = pusher.subscribe('location'); // subscribe Pusher client to location channel\n        channel.bind('checkin', data =\u003e {\n          if (users.length == 0) { // if the allUsers array is empty\n            users.pushObject(data.location) // add new data to users array\n          } else { // if the allUsers array is not empty\n            // check if user already exists before pushing\n            const userIndex = this.userExists(users, data.location, 0)\n            if (userIndex === false) { // if user was not found, means its a new user\n              users.pushObject(data.location) // push the users info to the allUsers array\n            } else {\n              // replace the users previous object with new one if they exists\n              users[userIndex] = data.location;\n            }\n          }\n          this.get('maps').createMapElement(users); // create the map\n        });\n      },\n      \n      // Ember's didInsertElement life cycle hook\n      didInsertElement() {\n        this._super(...arguments);\n        this.getAdminLocation(); // get the admins location\n      },\n      \n      // recursive function to check if a user already exixts\n      userExists(users, user, index) {\n        if (index == users.length) {\n          return false;\n        }\n        if (users[index].userId === user.userId) {\n          return index;\n        } else {\n          return this.userExists(users, user, index + 1);\n        }\n      },\n      \n      // function to get admin's location\n      getAdminLocation() {\n        if ('geolocation' in navigator) {\n          navigator.geolocation.getCurrentPosition((position) =\u003e { // get admin's location\n            const { latitude, longitude } = position.coords;\n            const adminLocation = { lat: latitude, lng: longitude };\n            this.get('maps').createAdminMap(adminLocation); // call the createAdmin map from our service\n          }, null, { enableHighAccuracy: true });\n        }\n      }\n    });\n```\n\nIn the code snippet above, we have an array of `allUsers` and we inject our maps service into the component by calling `maps: service('maps')`. In the `didInsertElement` lifecycle hook, we call the `getAdminLocation` function which gets the admin’s location and calls the `createAdminMap` from our map service to create the admin’s map showing the target location.\n\nIn the `init` function which is called when the component is initialized, we create our Pusher client and subscribe it to the `location` channel.\n\nWhen there is a new `checkin` event, we call the `userExists` function to see if the user already exists in our `allUsers` array. We then add or update the user’s info based on whether or not they exist in the `allUsers` array. After all this is done, we call the `createMapElement` from our maps service and pass it our array of users to be rendered on the page. Remember to add your Pusher key and cluster.\n\n\n## Bringing it all together\n\nAt this point, restart your development server, ensure your Node server is running and open the admin view(http://localhost:4200/admin) in a second tab.  Enter a name in the home view then check in, you should see your name popup with your location showing on the map.\n\n\n## Conclusion\n\nIn this post, we have successfully created a realtime geofencing application in Ember. I hope you found this tutorial helpful and would love to apply the knowledge gained here to easily set up your own application using Pusher in an Ember application.\nYou can find the source code for the demo app on [GitHub](https://github.com/9jaswag/pusher-geofencing).","metaTitle":"Building a geofencing web app using Ember","metaDescription":"Use Ember.js, Node and Google Maps to create a geofencing application. Admin users are alerted when a user checks in, and the user position is shown in relation to the admin location radius."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"30ZzU6JKpagkAakOoK4igW","type":"Entry","createdAt":"2018-06-07T16:31:42.992Z","updatedAt":"2018-06-19T14:31:18.893Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a carpooling app with React Native - Part 2: Creating the frontend","url":"carpooling-react-native-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/Ridesharer","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-06-07","description":"This two-part series uses React Native, Docker and several Google services (Maps, Places, Directions and Geocoding) to create a carpooling app. In part twoyou will set up the frontend.","prerequisite":"You will need to have completed the first part of the series. For part two you need experience with React Native.","content":"This is the second part of a two-part series on creating a carpooling app with React Native. This is the part where we will be creating the actual app. I’ll be showing you how to set up the app so you can run it on an Android emulator (Genymotion) or an iOS device.\n\n## Prerequisites\n\nYou need to have completed [part one](https://pusher.com/tutorials/carpooling-react-native-part-1) before moving on to this tutorial.\n\nTo effectively follow this tutorial, you should have a good grasp of the following React concepts:\n\n- props \n- refs\n- state\n- component lifecycle\n\nAs for building the app with React Native, knowing how to do the following will be helpful:\n\n- How to use primitive React Native components such as the `View` or `Text`. \n- How to add styles to the components.\n- How to create your own components.\n\n## What we’ll be building\n\nThe complete details on what we’ll be building are available in the first part of the series. As a refresher, we’ll be building a carpooling app. This allows the user to share the vehicle they’re currently riding in so someone else can hop in the same vehicle. The app is responsible for:\n\n- Matching the users so that only the users who are going the same route can share a ride with each other.\n- After two users are matched, the app provides realtime tracking on where each other currently are.\n\nFor the rest of the tutorial, I’ll be referring to the user who is sharing the ride as the “rider”. While the user who is searching for a ride as the “hiker”.\n\n## Installing the dependencies\n\nStart by generating a new React Native project:\n\n```\n    react-native init Ridesharer\n```\n\nThis will create a `Ridesharer` directory. This will serve as the root directory that we’ll be using for the rest of the tutorial.\n\nThe app relies on the following libraries to implement specific features:\n\n- [**axios**](https://github.com/axios/axios) - for making requests to the server. Although React Native already comes with [fetch](https://facebook.github.io/react-native/docs/network.html), axios gives us a simpler API to work with.\n- [**pusher-js**](https://github.com/pusher/pusher-js) - the official Pusher JavaScript library. This allows us connect to a Pusher app and send realtime data.\n- [**react-native-geocoding**](https://github.com/marlove/react-native-geocoding) - for converting latitude and longitude pairs to the actual name of the place.\n- [**react-native-google-places-autocomplete**](https://github.com/FaridSafi/react-native-google-places-autocomplete) - for searching the user’s destination.\n- [**react-native-maps**](https://github.com/react-community/react-native-maps) - for showing a map inside the app. This is also used for showing markers on where the users are and their destinations. \n- [**react-native-maps-directions**](https://github.com/bramus/react-native-maps-directions) - for showing the route from the user’s origin to their destination. \n- [**react-native-vector-icons**](https://github.com/oblador/react-native-vector-icons) - for using icons inside the app.\n- [**react-navigation**](https://github.com/react-navigation/react-navigation) - for easily implementing navigation between screens.\n\nTo ensure that we’re both using the same package versions, open the `package.json` file and update the `dependencies` with the following:\n\n``` json\n    \"dependencies\": {\n      \"axios\": \"0.18.0\",\n      \"prop-types\": \"15.6.1\",\n      \"pusher-js\": \"4.2.2\",\n      \"react\": \"16.3.1\",\n      \"react-native\": \"0.55.4\",\n      \"react-native-geocoding\": \"0.3.0\",\n      \"react-native-google-places-autocomplete\": \"1.3.6\",\n      \"react-native-maps\": \"0.20.1\",\n      \"react-native-maps-directions\": \"1.6.0\",\n      \"react-native-vector-icons\": \"4.6.0\",\n      \"react-navigation\": \"2.0.1\"\n    },\n```\n\nOnce that’s done, save the file and execute `npm install`. \n\n## Setting up the dependencies\n\nNow that you’ve installed all the dependencies, there’s one more thing you have to do before you can start coding the app. Additional setup is required for the following dependencies:\n\n- [react-native-vector-icons](https://github.com/oblador/react-native-vector-icons)\n- [react-native-maps](https://github.com/react-community/react-native-maps)\n\nInstructions on how to set up the dependencies are available on the Github repos for each library. Here are the links to the setup instructions to the specific version we’re using:\n\n- [react-native-vector-icons v4.6.0](https://github.com/oblador/react-native-vector-icons/tree/v4.6.0#installation)\n- [react-native-maps v0.20.1](https://github.com/react-community/react-native-maps/blob/v0.20.1/docs/installation.md)\n\nNote that if you’re reading this sometime in the future, you’ll probably have to install the latest package versions and follow their latest installation instructions.\n\n## Building the app\n\nNow we’re ready to build the app. Navigate inside the `Ridesharer` directory as that’s going to be our working directory.\n\nNote that anytime you feel confused on where to add a specific code, you can always visit the [GitHub](https://github.com/anchetaWern/Ridesharer/tree/master/app) [repo](https://github.com/anchetaWern/Ridesharer/tree/master/app) and view the file.\n\n### Index\nOpen the `index.js` file and make sure you’re registering the same name that you used when you generated the project. In this case, it should be `Ridesharer`:\n\n``` javascript\n    // Ridesharer/index.js\n    import { AppRegistry } from 'react-native';\n    import App from './App';\n    \n    AppRegistry.registerComponent('Ridesharer', () =\u003e App);\n```\n\n### Root component\n\nCreate a `Root.js` file. This will serve as the Root component of the app. This is where we set up the navigation so we include the two pages of the app: Home and Map. We will be creating these pages later:\n\n``` javascript\n    // Ridesharer/Root.js\n    import React from 'react';\n    import { StackNavigator } from 'react-navigation';\n    \n    import HomePage from './app/screens/Home';\n    import MapPage from './app/screens/Map';\n    \n    const RootStack = StackNavigator(\n      {\n        Home: {\n          screen: HomePage\n        },\n        Map: {\n          screen: MapPage\n        }\n      },\n      { \n        initialRouteName: 'Home', // set the home page as the default page \n      }\n    );\n    \n    export default RootStack;\n```\n\nIn the above code, we’re using the `StackNavigator`, one of the navigators that comes with the React Navigation library. This allows us to push and pop pages to and from a stack. Navigating to a page means pushing it in front of the stack, going back means popping the page that’s currently in front of the stack.\n\n### App component\n\nOpen the `App.js` file and render the `App` component:\n\n``` javascript\n    // Ridesharer/App.js\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      View\n    } from 'react-native';\n    \n    import Root from './Root';\n    \n    export default class App extends Component {\n    \n      render() {\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cRoot /\u003e\n          \u003c/View\u003e\n        );\n      }\n    \n    }\n    \n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        backgroundColor: '#fff'\n      }\n    });\n```\n\n### Tapper component\n\nThe `Tapper` component is simply a button created for convenience. We can’t really apply a custom style to the built-in React Native `Button` component so we’re creating this one. This component wraps the `Button`  component in a `View` in which the styles are applied:\n\n``` javascript\n    // Ridesharer/app/components/Tapper/Tapper.js\n    import React from 'react';\n    import { View, Button } from 'react-native';\n    \n    import styles from './styles';\n    \n    const Tapper = (props) =\u003e {\n      return (\n        \u003cView style={styles.button_container}\u003e\n          \u003cButton\n            onPress={props.onPress}\n            title={props.title}\n            color={props.color}\n          /\u003e\n        \u003c/View\u003e\n      );\n    }\n    \n    export default Tapper;\n```\n\nHere’s the style declaration:\n\n``` javascript\n    // Ridesharer/app/components/Tapper/styles.js\n    import { StyleSheet } from 'react-native';\n    \n    export default StyleSheet.create({\n      button_container: {\n        margin: 10\n      },\n    });\n```\n\nLastly, we export it using an `index.js` file so that we can simply refer to the component as `Tapper` without including the `Tapper.js` file in the `import` statement later on:\n\n``` javascript\n    // Ridesharer/app/components/Tapper/index.js\n    import Tapper from './Tapper';\n    \n    export default Tapper;\n```\n\nIf you don’t want to create a separate component, you can always use the `TouchableOpacity` and `TouchableHighlight` components. Those two allow you to add a custom style.\n\n### Home page\n\nThe `Home` page is the default page the user sees when they open the app. \n\nStart by including all the React Native packages that we need:\n\n``` javascript\n    // Ridesharer/app/screens/Home.js\n    import React, { Component } from 'react';\n    import { \n      View, \n      Text, \n      StyleSheet, \n      TextInput, \n      Alert, \n      ActivityIndicator, \n      PermissionsAndroid, \n      KeyboardAvoidingView \n    } from 'react-native';\n```\n\nAmong the packages above, only these three warrants an explanation:\n\n- `PermissionsAndroid` - for asking permissions to use the device’s Geolocation feature on Android. \n- `KeyboardAvoidingView` - for automatically adjusting the View when the on-screen keyboard pops out. This allows the user to see what they’re inputting while the keyboard is open. Most of the time, especially on devices with small screen, the input is hidden when the keyboard is open. \n\nNext, include the third-party packages we installed earlier:\n\n``` javascript\n    import axios from 'axios';\n    import Icon from 'react-native-vector-icons/FontAwesome';\n    import Tapper from '../components/Tapper';\n```\n\nAdd your ngrok URL (this was created in the first part of the series):\n\n``` javascript\n    const base_url = 'YOUR NGROK URL';\n```\n\nDeclare the function that will ask for the [Geolocation](https://facebook.github.io/react-native/docs/geolocation.html) permission and then call it:\n\n``` javascript\n    async function requestGeolocationPermission() {\n      try{\n        const granted = await PermissionsAndroid.request(\n          PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,\n          {\n            'title': 'Ridesharer Geolocation Permission',\n            'message': 'Ridesharer needs access to your current location so you can share or search for a ride'\n          }\n        );\n    \n        if(granted === PermissionsAndroid.RESULTS.GRANTED){\n          console.log(\"You can use the geolocation\")\n        }else{\n          console.log(\"Geolocation permission denied\")\n        }\n      }catch(err){\n        console.warn(err)\n      }\n    }\n    \n    requestGeolocationPermission();\n```\n\nHide the header. The `Home` page doesn’t need it:\n\n``` javascript\n    export default class Home extends Component {\n      static navigationOptions = {\n        header: null,\n      };\n    }\n```\n\nSet the default state for the loader (for controlling the visibility of the `ActivityIndicator`) and username:\n\n``` javascript\n    state = {\n      is_loading: false,\n      username: ''\n    }\n```\n\nRender the `Home` page. In this page we have:\n\n- An input that asks for the user’s name\n- A button for sharing a ride\n- A button for hitching a ride\n\nNote that we’re using the `KeyboardAvoidingView` as a wrapper. This way, everything inside it will adjust accordingly when the on-screen keyboard becomes visible:\n\n``` javascript\n    render() {\n    \n      return (\n        \u003cKeyboardAvoidingView style={styles.container} behavior=\"padding\" enabled\u003e\n          \u003cView style={styles.jumbo_container}\u003e\n            \u003cIcon name=\"question-circle\" size={35} color=\"#464646\" /\u003e\n            \u003cText style={styles.jumbo_text}\u003eWhat do you want to do?\u003c/Text\u003e\n          \u003c/View\u003e\n      \n          \u003cView\u003e\n            \u003cTextInput\n              placeholder=\"Enter your username\"\n              style={styles.text_field}\n              onChangeText={(username) =\u003e this.setState({username})}\n              value={this.state.username}\n              clearButtonMode={\"always\"}\n              returnKeyType={\"done\"}\n            /\u003e\n            \u003cActivityIndicator size=\"small\" color=\"#007ff5\" style={{marginTop: 10}} animating={this.state.is_loading} /\u003e\n          \u003c/View\u003e\n    \n          \u003cView style={styles.close_container}\u003e\n            \u003cTapper\n              title=\"Share a Ride\"\n              color=\"#007ff5\"\n              onPress={() =\u003e {\n                this.enterUser('share');\n              }}\n            /\u003e\n         \n            \u003cTapper \n              title=\"Hitch a Ride\" \n              color=\"#00bcf5\" \n              onPress={() =\u003e {\n                this.enterUser('hike');\n              }} \n            /\u003e\n          \u003c/View\u003e\n        \n        \u003c/KeyboardAvoidingView\u003e\n      );\n    }\n```\n\nWhen either of the buttons is pressed, the function below gets executed. All it does is create the user if they don’t already exist:\n\n``` javascript\n    enterUser = (action) =\u003e {\n      if(this.state.username){ // user should enter a username before they can enter\n    \n        this.setState({\n          is_loading: true\n        });\n        \n        // make a POST request to the server for creating the user\n        axios.post(`${base_url}/save-user.php`, {\n          username: this.state.username // the username entered in the text field\n        })\n        .then((response) =\u003e {\n          \n          if(response.data == 'ok'){\n            // hide the ActivityIndicator\n            this.setState({\n              is_loading: false\n            });\n            \n            // navigate to the Map page, submitting the user's action (ride or hike) and their username as a navigation param (so it becomes available on the Map page)\n            this.props.navigation.navigate('Map', {\n              action: action,\n              username: this.state.username\n            });\n          }\n          \n        });\n    \n      }else{\n        Alert.alert(\n          'Username required',\n          'Please enter a username'\n        );\n      }\n    }\n```\n\nAdd the styles for the Home page:\n\n``` javascript\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'space-around'\n      },\n      jumbo_container: {\n        padding: 50,\n        alignItems: 'center'\n      },\n      jumbo_text: {\n        marginTop: 20,\n        textAlign: 'center',\n        fontSize: 25,\n        fontWeight: 'bold'\n      },\n      text_field: {\n        width: 200,\n        height: 50,\n        padding: 10,\n        backgroundColor: '#FFF', \n        borderColor: 'gray', \n        borderWidth: 1\n      }\n    });\n```\n\n### Map page\n\nThe Map page contains the main meat of the app. This allows the user to share or search for a ride. The tracking of location is implemented via Google Maps, Pusher Channels, and React Native’s Geolocation feature. \n\nStart by including all the React Native packages that we need:\n\n``` javascript\n    // Ridesharer/app/screens/Map.js\n    import React, { Component } from 'react';\n    import { \n      View, \n      Text, \n      StyleSheet, \n      Alert, \n      Dimensions, \n      ActivityIndicator\n    } from 'react-native';\n```\n\nNext, include the packages that we installed earlier:\n\n``` javascript\n    import { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\n    import MapView, { Marker, Callout } from 'react-native-maps';\n    import MapViewDirections from 'react-native-maps-directions';\n    import Icon from 'react-native-vector-icons/FontAwesome';\n    import Pusher from 'pusher-js/react-native'; \n    import Geocoder from 'react-native-geocoding';\n    import axios from 'axios';\n```\n\nInclude the location library. We will be creating this later, but for now, know that these functions are used to center the map correctly (`regionFrom()`) and getting the difference of two coordinates in meters (`getLatLonDiffInMeters()`):\n\n``` javascript\n    import { regionFrom, getLatLonDiffInMeters } from '../lib/location';\n    import Tapper from '../components/Tapper';\n```\n\nInitialize your API keys and ngrok base URL:\n\n``` javascript\n    const google_api_key = 'YOUR GOOGLE PROJECT API KEY';\n    const base_url = 'YOUR NGROK BASE URL';\n    const pusher_app_key = 'YOUR PUSHER APP KEY';\n    const pusher_app_cluster = 'YOUR PUSHER APP CLUSTER';\n    \n    Geocoder.init(google_api_key); // initialize the geocoder\n```\n\nNext, also declare the timeouts for searching and sharing a ride. We will be using these values later to reset the app’s UI if it couldn’t match two users within these timeouts:\n\n``` javascript\n    const search_timeout = 1000 * 60 * 10; // 10 minutes\n    const share_timeout = 1000 * 60 * 5; // 5 minutes\n```\n\nSetup a default region that the map will display:\n\n``` javascript\n    const default_region = {\n      latitude: 37.78825,\n      longitude: -122.4324,\n      latitudeDelta: 0.0922,\n      longitudeDelta: 0.0421,\n    };\n```\n\nGet the device width. We will be using this later to set the width of the auto-complete text field for searching places:\n\n``` javascript\n    var device_width = Dimensions.get('window').width; \n```\n\nNext, create the `Map`  component and set the `navigationOptions`. Unlike the `Home` page earlier, we need to set a few options for the navigation. This includes the header title and the styles applied to it. Putting these navigation options will automatically add a back button to the header to allow the user to go back to the `Home` page:\n\n``` javascript\n    export default class Map extends Component {\n    \n      static navigationOptions = ({navigation}) =\u003e ({\n        headerTitle: 'Map',\n        headerStyle: {\n          backgroundColor: '#007ff5'\n        },\n        headerTitleStyle: {\n          color: '#FFF'\n        }\n      });\n    \n      // next: add the code for initializing the state\n    }\n```\n\nNext, initialize the state:\n\n``` javascript\n    state = {\n      start_location: null, // the coordinates (latitude and longitude values) of the user's origin\n      end_location: null, // the coordinates of the user's destination\n      region: default_region, // the region displayed in the map\n      from: '', // the name of the place where the user is from (origin)\n      to: '', // the name of the place where the user is going (destination)\n      rider_location: null, // the coordinates of the rider's current location\n      hiker_location: null, // the coordinates of the hiker's origin\n      is_loading: false, // for controlling the visibility of the ActivityIndicator\n      has_journey: false // whether the rider has accepted a hiker's request or a hiker's request has been accepted by a rider \n    }\n    \n    // next: add the constructor\n```\n\nNext, add the constructor:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      this.from_region = null;\n      this.watchId = null; // unique ID for the geolocation watcher. Storing it in a variable allows us to stop it at a later time (for example: when the user is done using the app)\n      this.pusher = null; // variable for storing the Pusher instance\n      this.user_channel = null; // the Pusher channel for the current user\n      this.journey_id = null; // the hiker's route ID\n      this.riders_channel = []; // if current user is a hiker, the value of this will be the riders channel\n      this.users_channel = null; // the current user's channel\n      this.hiker = null // for storing the hiker's origin coordinates; primarily used for getting the distance between the rider and the hiker\n    }\n```\n\nOnce the component is mounted, you want to get the `username` that was passed from the Home page earlier. This `username` is used later on as the unique key for identifying each user that connects to Pusher Channels:\n\n``` javascript\n    componentDidMount() {\n      const { navigation } = this.props;\n      const username = navigation.getParam('username');\n    \n      this.pusher = new Pusher(pusher_app_key, {\n        authEndpoint: `${base_url}/pusher-auth.php`,\n        cluster: pusher_app_cluster,\n        encrypted: true\n      });  \n      \n      // next: add the code for subscribing to the current user's own channel\n    }  \n```\n\nNext, add the code for subscribing to the current user's own channel. This allows the user to send and receive data in realtime through this channel. In the hiker’s case, they use it to make a request to the matching rider. In the rider’s case, they use it to receive requests coming from hikers as well as sending an acceptance and their current location to the hiker:\n\n``` javascript\n    this.users_channel = this.pusher.subscribe(`private-user-${username}`); // note that the private-* is required when using private channels \n```\n\nWhen a rider receives a request, the code below is executed. This alerts the rider that someone wants to ride with them. They can either accept or decline it:\n\n``` javascript\n    this.users_channel.bind('client-rider-request', (hiker) =\u003e {\n    \n      Alert.alert(\n        `${hiker.username} wants to ride with you`,\n        `Pickup: ${hiker.origin} \\nDrop off: ${hiker.dest}`,\n        [\n          {\n            text: \"Decline\",\n            onPress: () =\u003e {\n              // do nothing\n            },\n            style: \"cancel\"\n          },\n          {\n            text: \"Accept\", \n            onPress: () =\u003e {\n              this.acceptRide(hiker);\n            }\n          },\n        ],\n        { cancelable: false } // no cancel button\n      );\n    \n    });\n    \n    // next: add code for getting the user's origin\n```\n\nNote that in the code above, we’re not really handling declines. This is to keep the focus on the key feature of the app.\n\nNext, get the user’s current location via the Geolocation API. At this point, we can already use the API without problems (unless the user didn’t approve the permission). We’ll just focus our attention on the “happy path” to keep things simple so we’ll assume that the user approved the permission request:\n\n``` javascript\n    navigator.geolocation.getCurrentPosition(\n      (position) =\u003e {\n        // get the region (this return the latitude and longitude delta values to be used by React Native Maps)\n        var region = regionFrom(\n          position.coords.latitude, \n          position.coords.longitude, \n          position.coords.accuracy\n        );\n        \n        // convert the coordinates to the descriptive name of the place\n        Geocoder.from({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        })\n        .then((response) =\u003e {\n          // the response object is the same as what's returned in the HTTP API: https://developers.google.com/maps/documentation/geocoding/intro\n          \n          this.from_region = region; // for storing the region in case the user presses the \"reset\" button\n          \n          // update the state to indicate the user's origin on the map (using a marker)\n          this.setState({\n            start_location: {\n              latitude: position.coords.latitude,\n              longitude: position.coords.longitude\n            },\n            region: region, // the region displayed on the map\n            from: response.results[0].formatted_address // the descriptive name of the place\n          });\n    \n        });\n    \n      }\n    );\n```\n\nNext, add the `acceptRide()` function. This function is executed when the rider accepts a hiker’s ride request:\n\n``` javascript\n    acceptRide = (hiker) =\u003e {\n      \n      const username = this.props.navigation.getParam('username');\n      \n      let rider_data = {\n        username: username,\n        origin: this.state.from, // descriptive name of the rider's origin\n        dest: this.state.to, // descriptive name of the rider's destination\n        coords: this.state.start_location // the rider's origin coordinates\n      };\n    \n      this.users_channel.trigger('client-rider-accepted', rider_data); // inform hiker that the rider accepted their request; send along the rider's info\n      \n      // make a request to delete the route so other hikers can no longer search for it (remember the 1:1 ratio for a rider to hiker?)\n      axios.post(`${base_url}/delete-route.php`, {\n        username: username\n      })\n      .then((response) =\u003e {\n        console.log(response.data);\n      })\n      .catch((err) =\u003e {\n        console.log('error excluding rider: ', err);\n      });\n    \n      this.hiker = hiker; // store the hiker's info\n      \n      // update the state to stop the loading animation and show the hiker's location\n      this.setState({\n        is_loading: false,\n        has_journey: true,\n        hiker_location: hiker.origin_coords\n      });\n      \n    }\n```\n\nNext, add the function for rendering the UI:\n\n``` javascript\n    render() {\n      const { navigation } = this.props;\n      // get the navigation params passed from the Home page earlier\n      const action = navigation.getParam('action'); // action is either \"ride\" or \"hike\"\n      const username = navigation.getParam('username');\n    \n      let action_button_label = (action == 'share') ? 'Share Ride' : 'Search Ride';\n    \n      // next: add code for rendering the UI\n    }\n```\n\nThe map UI contains the following:\n\n- `MapView` component for rendering the map. Inside it are the following: \n  - `Marker` component for showing the origin and destination of the user, as well as for showing the location of the rider (if the user is a hiker), or the hiker (if the user is a rider).\n  - `MapViewDirections` component for showing the route from the origin to the destination of the current user.\n- `GooglePlacesAutocomplete` component for rendering an auto-complete text field for searching and selecting a destination.\n- `ActivityIndicator` for showing a loading animation while the rider waits for someone to request a ride, or when the hiker waits for the app to find a matching rider.\n- `Tapper` component for sharing a ride or searching a ride.\n- `Tapper` component for resetting the selection (auto-complete text field and marker).\n\n``` javascript\n    return (\n      \u003cView style={styles.container}\u003e\n    \n        \u003cMapView\n          style={styles.map}\n          region={this.state.region}\n          zoomEnabled={true}\n          zoomControlEnabled={true}\n        \u003e\n          {\n            this.state.start_location \u0026\u0026\n            \u003cMarker coordinate={this.state.start_location}\u003e\n              \u003cCallout\u003e\n                \u003cText\u003eYou are here\u003c/Text\u003e\n              \u003c/Callout\u003e\n            \u003c/Marker\u003e\n          }\n    \n          {\n            this.state.end_location \u0026\u0026\n            \u003cMarker\n              pinColor=\"#4196ea\"\n              coordinate={this.state.end_location}\n              draggable={true}\n              onDragEnd={this.tweakDestination}\n            /\u003e\n          }\n    \n          {\n            this.state.rider_location \u0026\u0026\n            \u003cMarker \n              pinColor=\"#25a25a\"\n              coordinate={this.state.rider_location}\n            \u003e\n              \u003cCallout\u003e\n                \u003cText\u003eRider is here\u003c/Text\u003e\n              \u003c/Callout\u003e\n            \u003c/Marker\u003e\n          }\n    \n          {\n            this.state.hiker_location \u0026\u0026\n            \u003cMarker \n              pinColor=\"#25a25a\"\n              coordinate={this.state.hiker_location}\n            \u003e\n              \u003cCallout\u003e\n                \u003cText\u003eHiker is here\u003c/Text\u003e\n              \u003c/Callout\u003e\n            \u003c/Marker\u003e\n          }\n          \n          {\n            this.state.start_location \u0026\u0026 this.state.end_location \u0026\u0026\n            \u003cMapViewDirections\n              origin={{\n                'latitude': this.state.start_location.latitude,\n                'longitude': this.state.start_location.longitude\n              }}\n              destination={{\n                'latitude': this.state.end_location.latitude,\n                'longitude': this.state.end_location.longitude\n              }}\n              strokeWidth={5}\n              strokeColor={\"#2d8cea\"}\n              apikey={google_api_key}\n            /\u003e\n          }\n          \n        \u003c/MapView\u003e\n    \n        \u003cView style={styles.search_field_container}\u003e\n        \n          \u003cGooglePlacesAutocomplete\n            ref=\"endlocation\"\n            placeholder='Where do you want to go?'\n            minLength={5} \n            returnKeyType={'search'} \n            listViewDisplayed='auto' \n            fetchDetails={true}            \n            onPress={this.selectDestination}\n          \n            query={{\n              key: google_api_key,\n              language: 'en', \n            }}\n            \n            styles={{\n              textInputContainer: {\n                width: '100%',\n                backgroundColor: '#FFF'\n              },\n              listView: {\n                backgroundColor: '#FFF'\n              }\n            }}\n            debounce={200} \n          /\u003e\n        \u003c/View\u003e\n    \n        \u003cActivityIndicator size=\"small\" color=\"#007ff5\" style={{marginBottom: 10}} animating={this.state.is_loading} /\u003e\n        \n        {\n          !this.state.is_loading \u0026\u0026 !this.state.has_journey \u0026\u0026\n          \u003cView style={styles.input_container}\u003e\n    \n            \u003cTapper \n              title={action_button_label}\n              color={\"#007ff5\"}\n              onPress={() =\u003e {\n                this.onPressActionButton();\n              }} /\u003e\n           \n            \u003cTapper\n              title={\"Reset\"}\n              color={\"#555\"}\n              onPress={this.resetSelection} \n            /\u003e\n            \n          \u003c/View\u003e\n        }\n    \n      \u003c/View\u003e\n    );\n```\n\nThe code above should be pretty self-explanatory. If you’re unsure what a specific prop does, how the component works, or what children is it expecting, you can always check the Github repo of the package we’re using.\n\nNext, let’s move on to the functions used in the UI. The `resetSelection()` is executed when the reset button is pressed by the user. This empties the auto-complete text field for searching for places, it also updates the state so the UI reverts back to its previous state before the destination was selected. This effectively removes the marker showing the user’s destination, as well as the route going to it:\n\n``` javascript\n    resetSelection = () =\u003e {\n      this.refs.endlocation.setAddressText('');\n      this.setState({\n        end_location: null,\n        region: this.from_region,\n        to: ''\n      });\n    }\n```\n\nThe `tweakDestination()` function is executed when the user drops the destination marker somewhere else:\n\n``` javascript\n    tweakDestination = () =\u003e {\n      // get the name of the place\n      Geocoder.from({\n        latitude: evt.nativeEvent.coordinate.latitude,\n        longitude: evt.nativeEvent.coordinate.longitude\n      })\n      .then((response) =\u003e {\n        this.setState({\n          to: response.results[0].formatted_address\n        });\n      });\n      \n      this.setState({\n        end_location: evt.nativeEvent.coordinate\n      });\n    }\n```\n\nThe `selectDestination()` function is executed when the user selects their destination. This function will update the state so it shows the user’s destination in the map:\n\n``` javascript\n    selectDestination = (data, details = null) =\u003e {\n    \n      const latDelta = Number(details.geometry.viewport.northeast.lat) - Number(details.geometry.viewport.southwest.lat)\n      const lngDelta = Number(details.geometry.viewport.northeast.lng) - Number(details.geometry.viewport.southwest.lng)\n    \n      let region = {\n        latitude: details.geometry.location.lat,\n        longitude: details.geometry.location.lng,\n        latitudeDelta: latDelta,\n        longitudeDelta: lngDelta\n      };\n    \n      this.setState({\n        end_location: {\n          latitude: details.geometry.location.lat,\n          longitude: details.geometry.location.lng,\n        },\n        region: region,\n        to: this.refs.endlocation.getAddressText() // get the full address of the user's destination\n      });\n    \n    }\n```\n\nWhen the user presses the **Share a Ride** or **Search a Ride** button, the `onPressActionButton()` function is executed. This executes either the `shareRide()` function or the `hikeRide()` function depending on the action selected from the Home page earlier:\n\n``` javascript\n    onPressActionButton = () =\u003e {\n    \n      const action = this.props.navigation.getParam('action');\n      const username = this.props.navigation.getParam('username');\n    \n      this.setState({\n        is_loading: true\n      });\n    \n      if(action == 'share'){\n        this.shareRide(username);\n      }else if(action == 'hike'){\n        this.hikeRide(username);      \n      }\n    \n    }\n```\n\nThe `shareRide()` function is executed when a rider shares their ride after selecting a destination. This makes a request to the server to save the route. The response contains the unique ID assigned to the rider’s route. This ID is assigned as the value of `this.journey_id`. This will be used later to:\n\n- Make a request to the server to update the route record stored in the Elasticsearch index. \n- Know when to start doing something with the current location data. This is because the current position begins to be watched right after the user presses on the **Share a Ride** button as you’ll see on the code block after this:\n\n``` javascript\n    shareRide = (username) =\u003e {\n    \n      axios.post(`${base_url}/save-route.php`, {\n        username: username,\n        from: this.state.from, \n        to: this.state.to, \n        start_location: this.state.start_location,\n        end_location: this.state.end_location\n      })\n      .then((response) =\u003e {\n        this.journey_id = response.data.id;\n        Alert.alert(\n          'Ride was shared!',\n          'Wait until someone makes a request.'\n        );\n      })\n      .catch((error) =\u003e {\n        console.log('error occurred while saving route: ', error);\n      });\n      \n      // next: add code for watching the rider's current location\n    \n    }\n```\n\nNext, start watching the user’s current location. Note that we won’t actually do anything with the location data unless the rider has already shared their ride and that they have already approved a hiker to ride with them. Once both conditions are met, we make a request to the server to update the previously saved route with the rider’s current location. This way, when a hiker searches for a ride, the results will be biased based on the rider’s current location and not their origin:\n\n``` javascript\n    this.watchId = navigator.geolocation.watchPosition(\n      (position) =\u003e {\n      \n        let latitude = position.coords.latitude;\n        let longitude = position.coords.longitude;\n        let accuracy = position.coords.accuracy;\n    \n        if(this.journey_id \u0026\u0026 this.hiker){ // needs to have a destination and a hiker\n          // update the route with the rider's current location\n          axios.post(`${base_url}/update-route.php`, {\n            id: this.journey_id,\n            lat: latitude,\n            lon: longitude\n          })\n          .then((response) =\u003e {\n            console.log(response);\n          });\n    \n          // next: add code for sending rider's current location to the hiker\n        \n        }\n    \n      },\n      (error) =\u003e {\n        console.log('error occured while watching position: ', error);\n      },\n      { \n        enableHighAccuracy: true, // get more accurate location\n        timeout: 20000, // timeout after 20 seconds of not being able to get location\n        maximumAge: 2000, // location has to be atleast 2 seconds old for it to be relevant\n        distanceFilter: 10 // allow up to 10-meter difference from the previous location before executing the callback function again\n      }\n    );\n    \n    // last: add code for resetting the UI after 5 minutes of sharing a ride \n```\n\nNext, we send a `client-rider-location` event to the rider’s own channel. Later, we’ll have the hiker subscribe to the rider’s channel (the one they matched with) so that they’ll receive the location updates:\n\n``` javascript\n    let location_data = {\n      username: username,\n      lat: latitude,\n      lon: longitude,\n      accy: accuracy \n    };\n    \n    this.users_channel.trigger('client-rider-locationchange', location_data); // note: client-* is required when sending client events through Pusher\n    \n    // update the state so that the rider’s current location is displayed on the map and indicated with a marker\n    this.setState({\n      region: regionFrom(latitude, longitude, accuracy),\n      start_location: {\n        latitude: latitude,\n        longitude: longitude\n      }\n    });\n    \n    // next: add code for updating the app based on how near the rider and hiker are from each other\n```\n\nNext, we need to get the difference (in meters) between the rider’s coordinates and the hiker’s origin:\n\n``` javascript\n    let diff_in_meters = getLatLonDiffInMeters(latitude, longitude, this.hiker.origin_coords.latitude, this.hiker.origin_coords.longitude);\n    \n    if(diff_in_meters \u003c= 20){\n      this.resetUI();\n    }else if(diff_in_meters \u003c= 50){\n      Alert.alert(\n        'Hiker is near',\n        'Hiker is around 50 meters from your current location'\n      );\n    }\n```\n\nNext, add the code for resetting the UI after five minutes without anyone requesting to share a ride with the rider:\n\n``` javascript\n    setTimeout(() =\u003e {\n      this.resetUI();\n    }, share_timeout);\n```\n\nHere’s the code for resetting the UI:\n\n``` javascript\n    resetUI = () =\u003e {\n    \n      this.from_region = null;\n      this.watchId = null; \n      this.pusher = null; \n      this.user_channel = null; \n      this.journey_id = null;\n      this.riders_channel = []; \n      this.users_channel = null; \n      this.hiker = null;\n    \n      this.setState({\n        start_location: null,\n        end_location: null,\n        region: default_region,\n        from: '',\n        to: '',\n        rider_location: null, \n        hiker_location: null,\n        is_loading: false,\n        has_journey: false\n      });\n      \n      this.props.navigation.goBack(); // go back to the Home page\n    \n      Alert.alert('Awesome!', 'Thanks for using the app!');\n    \n    }\n```\n\nNow let’s move on to the hiker’s side of things. When the hiker presses the **Search a Ride** button, the `hikeRide()` function is executed. This function is executed every five seconds until it finds a rider which matches the hiker’s route. If a rider cannot be found within ten minutes, the function stops. Once the server returns a suitable rider, it responds with the rider’s information (username, origin, destination, coordinates). This is then used to subscribe to the rider’s channel so the hiker can request for a ride and receive location updates. Note that this is done automatically, so the hiker doesn’t have control over who they share a ride with:\n\n``` javascript\n    hikeRide = (username) =\u003e {\n    \n      var interval = setInterval(() =\u003e {\n        // make a request to the server to get riders that matches the hiker's route\n        axios.post(`${base_url}/search-routes.php`, {\n          origin: this.state.start_location,\n          dest: this.state.end_location\n        })\n        .then((response) =\u003e {\n          \n          if(response.data){\n    \n            clearInterval(interval); // assumes the rider will accept the request\n            \n            let rider = response.data; // the rider's info\n            \n            // subscribe to the rider's channel so the hiker can make a request and receive updates from the rider\n            this.riders_channel = this.pusher.subscribe(`private-user-${rider.username}`);\n            \n            this.riders_channel.bind('pusher:subscription_succeeded', () =\u003e {\n              // when subscription succeeds, make a request to the rider to share the ride with them\n              this.riders_channel.trigger('client-rider-request', {\n                username: username, // username of the hiker\n                origin: this.state.from, // descriptive name of the hiker's origin\n                dest: this.state.to, // descriptive name of the hiker's destination\n                origin_coords: this.state.start_location // coordinates of the hiker's origin\n              });\n            });\n    \n            // next: add code for listening for when the rider accepts their request\n          }      \n        })\n        .catch((error) =\u003e {\n          console.log('error occurred while searching routes: ', error);\n        });\n    \n      }, 5000);\n    \n      setTimeout(() =\u003e {\n        clearInterval(interval);\n        this.resetUI();\n      }, ten_minutes);\n    \n    }\n```\n\nOnce the rider accepts the ride request, the function below is executed:\n\n``` javascript\n    this.riders_channel.bind('client-rider-accepted', (rider_data) =\u003e {\n      Alert.alert(\n        `${rider_data.username} accepted your request`,\n        `You will now receive updates of their current location`\n      );\n      \n      // update the map to show the rider's origin\n      this.setState({\n        is_loading: false,\n        has_journey: true,\n        rider_location: rider_data.coords\n      });\n    \n      // next: add code for subscribing to the rider's location change\n    });\n```\n\nAs you’ve seen earlier, when the rider’s location changes, it triggers an event called `client-rider-location-change`. Any user who is subscribed to the rider’s channel and is listening for that event will get the location data in realtime:\n\n``` javascript\n    this.riders_channel.bind('client-rider-locationchange', (data) =\u003e {\n      // update the map with the rider's current location\n      this.setState({\n        region: regionFrom(data.lat, data.lon, data.accy),\n        rider_location: {\n          latitude: data.lat,\n          longitude: data.lon\n        }\n      });\n      \n      let hikers_origin = this.state.start_location;\n      let diff_in_meters = getLatLonDiffInMeters(data.lat, data.lon, hikers_origin.latitude, hikers_origin.longitude);\n        \n      if(diff_in_meters \u003c= 20){\n        this.resetUI();\n      }else if(diff_in_meters \u003c= 50){\n        Alert.alert(\n          'Rider is near',\n          'Rider is around 50 meters from your location'\n        );\n      }\n    });\n```\n\nAdd the styles for the `Map` page:\n\n``` javascript\n    const styles = StyleSheet.create({\n      container: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n      },\n      map: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n      },\n      search_field_container: {\n        height: 150, \n        width: device_width, \n        position: 'absolute', \n        top: 10\n      },\n      input_container: {\n        alignSelf: 'center',\n        backgroundColor: '#FFF',\n        opacity: 0.80,\n        marginBottom: 25\n      }\n    });\n```\n\n### Location library\n\nHere’s the code for getting the latitude and longitude delta values. As you have seen from the code earlier, this function is mainly used to get the region displayed on the map:\n\n``` javascript\n    // Ridesharer/app/lib/location.js\n    export function regionFrom(lat, lon, accuracy) {\n      const oneDegreeOfLongitudeInMeters = 111.32 * 1000;\n      const circumference = (40075 / 360) * 1000;\n    \n      const latDelta = accuracy * (1 / (Math.cos(lat) * circumference));\n      const lonDelta = (accuracy / oneDegreeOfLongitudeInMeters);\n    \n      return {\n        latitude: lat,\n        longitude: lon,\n        latitudeDelta: Math.max(0, latDelta),\n        longitudeDelta: Math.max(0, lonDelta)\n      };\n    }\n```\n\nAnd here’s the function for getting the difference (in meters) between two coordinates. This is mainly used for notifying the users when they’re already near each other, and to reset the app UI when they’re already very near each other:\n\n``` javascript\n    export function getLatLonDiffInMeters(lat1, lon1, lat2, lon2) {\n      var R = 6371; // radius of the earth in km\n      var dLat = deg2rad(lat2-lat1);  // deg2rad below\n      var dLon = deg2rad(lon2-lon1); \n      var a = \n        Math.sin(dLat/2) * Math.sin(dLat/2) +\n        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * \n        Math.sin(dLon/2) * Math.sin(dLon/2)\n        ; \n      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n      var d = R * c; // distance in km\n      return d * 1000;\n    }\n```\n\nThe `deg2rad()` function used above converts the degrees value to radians:\n\n``` javascript\n    function deg2rad(deg) {\n      return deg * (Math.PI/180)\n    }\n```\n\n## Running the app\n\nBefore you can run the app on Android, you need to make sure you have the following Android SDK packages installed, you can find these under SDK Tools on the SDK manager:\n\n- Google Play services\n- Android Support Repository\n- Google Repository\n\nIf you’re going to test the app on Genymotion, you need to install Google Play services first. Since the app is using Google Maps, you need Google Play services for the feature to work. If you have version 2.10 or above, they provide an easy way to install it. Just click on **Open GAPPS** on a running emulator instance and go through the installation wizard. After that, restart the device and you should be good to go:\n\n![carpooling-react-native-install-google-play-on-genymotion](//images.ctfassets.net/1es3ne0caaid/7cjYmvjaRG4UQQImAquy4S/67f48d96692b5bbfbedcda652e964f97/carpooling-react-native-install-google-play-on-genymotion.png)\n\nTo run the app on Android, execute the following command. This will run the app either on an opened emulator instance (for example: Genymotion) or an Android device (if you have connected one):\n\n```\n    react-native run-android\n```\n\nIf you’re having problems with getting the app to run on Android, be sure to check my article on Debugging common React Native issues on Android.\n\nFor iOS, you just have to make sure you have the latest version of Xcode installed. Note that if you want to run the app on a device, you can only do it via Xcode by opening the `.xcworkspace` file. \n\nTo run the app on an iOS device, select your device on Xcode and click the big play button.\n\nTo run the app in the iOS simulator, you can also do it via Xcode using the method above. But if you want to run it from the terminal, you can execute the following command from the root directory of your project:\n\n```\n    react-native run-ios\n```\n\nIf you want to run the app on a specific simulator, you first have to list which devices are available:\n\n```\n    xcrun simctl list devicetypes\n```\n\nThis will return the list of devices:\n\n![carpooling-react-native-device-list](//images.ctfassets.net/1es3ne0caaid/4joEh2Gg80Y2KsQMuCOuWe/114b76551af9ee51f19f96edf39f6e2f/carpooling-react-native-device-list.png)\n\nYou can then copy the device name (for example: iPhone 5s) and specify it as a value for the `--simulator` option:\n\n```\n    react-native run-ios --simulator=\"iPhone 5s\"\n```\n\nIf you’re having problems with running the app on an iOS simulator or device, be sure to check my article on Debugging common React Native issues on iOS.\n\n## Conclusion\n\nThat’s it! In this series, you’ve learned how to create a carpooling app with React Native. Along the way, you also learned the following:\n\n- How to use axios to make requests to the server.\n- How to use React Native’s Geolocation feature.\n- How to add Google Play Services to Genymotion.\n- How to use Genymotion’s GPS emulation tool.\n- How to use Pusher Channels.\n- How to use Google’s Geocoding API.\n\nYou can find all the codes used in this series on this [GitHub repo](https://github.com/anchetaWern/Ridesharer).","metaTitle":"Create a carpooling app with React Native - Part 2","metaDescription":"Build a carpooling app using React Native, Docker and Google SDKs and APIs. In the second part, create the frontend using React Native and demo it with Genymotion."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"FeIJHByAhMWYaGyuIGWKO","type":"Entry","createdAt":"2018-06-07T16:31:28.809Z","updatedAt":"2018-06-11T12:43:52.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a carpooling app with React Native - Part 1: Setting up the server","url":"carpooling-react-native-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/Ridesharer","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-06-07","description":"This two-part series uses React Native, Docker and several Google services (Maps, Places, Directions and Geocoding) to create a carpooling app. In part one you will set up the backend.","prerequisite":"You will need a React Native development environment, Docker and Docker Compose installed on your machine. This tutorial assumes you know how to install and configure these on your own system. You will need experience with React Native and Docker.","content":"In this series, we’re going to create a carpooling app with React Native. This will be a two-part series showing you how to create a full-stack React Native app which uses PHP as the backend. The first part covers setting up the backend, while the [second part](https://pusher.com/tutorials/carpooling-react-native-part-2) will cover building the frontend and running the app.\n\nI’ve previously written a similar tutorial: [Build a ride hailing app with React Native](https://pusher.com/tutorials/ride-hailing-react-native). The main difference between the two is that the first one shows how to build an app similar to the following:\n\n- [Grab](https://www.grab.com)\n- [Uber](https://www.uber.com) \n- [Lyft](https://www.lyft.com/)\n\nThe main idea of the above apps is to provide a ride-hailing service to users. This is traditionally called “Ridesharing”.\n\nWhile this tutorial will show you how to build an app similar to these:\n\n- [Wunder Carpool](https://www.wunder.org/)\n- [Grab Share](https://www.grab.com/ph/share/)\n- [Waze Carpool](https://www.waze.com/carpool)\n\nThe main idea of the above apps is for users to share their ride with people who are going the same route as them. This is traditionally called “Carpooling”.\n\n## Prerequisites\n\nThis tutorial requires the following to be already set up on your machine:\n\n- [**React Native development environment**](https://facebook.github.io/react-native/) - the series assumes that you already have set up all the software needed to create and run React Native apps. The series will show you how to create the app for both Android and iOS devices. We will use the `react-native init`  command to create a React Native project. You can either have both Android Studio and Xcode set up on your machine or just one of them. Additionally, you can set up [Genymotion](https://www.genymotion.com/fun-zone/) so you can easily change your in-app location. Be sure to check out the [setup instructions](https://facebook.github.io/react-native/docs/getting-started.html) if you haven’t setup your machine already. \n- [**Docker**](https://www.docker.com/) and [**Docker Compose**](https://docs.docker.com/compose/) - the series assumes that you already have [Docker](https://docs.docker.com/install/) and [Docker Compose](https://docs.docker.com/compose/install/) running on your machine. We will be using those to easily setup a server with all the software that we need. This also assures that we both have the same environment. \n- [**Git**](https://git-scm.com/) - used for cloning repos.\n\nKnowing the basics of creating a React Native app is required. This means you have to know how to run the app on an emulator or your device. You should also have a good grasp of basic React concepts such as props, refs, state, and the component lifecycle.\n\nKnowledge of [Docker](https://www.docker.com/) is required. You should know how to setup Docker on your operating system and setup a containers from scratch. Note that Docker has poor support for Windows 7 and 8. So if you’re using any of those systems, you might have difficulty in following this tutorial.\n\nKnowledge of the following will be helpful, but not required. I’ll try to cover as much detail as I can, so readers with zero knowledge of the following will still be able to follow along:\n\n\n- [PHP](http://php.net/)\n- [Elasticsearch](https://www.elastic.co/) \n- [Pusher Channels](https://pusher.com/)\n\nLastly, the tutorial assumes that you know your way around the operating system that you’re using. Knowing how to install new software, execute commands in the terminal is required.\n\n\n## What we’ll be building\n\nBefore we proceed, it’s important to know what exactly we’ll be building. The app will have two modes: \n\n\n- **sharing** - this allows the user to share their ride so that others can make a request to ride with them. For the rest of the series, I’ll be referring to the users who uses this feature as the “rider”.\n- **hiking** - this allows the user to make a request to ride with someone. I’ll be referring to these users as “hikers”.\n\nBelow is the entire flow of the app. I’m using Genymotion emulator for the user that plays the rider, and iPhone for the hiker. This is so I can emulate a moving vehicle by using Genymotion’s GPS emulation tool: \n\n![carpooling-react-native-gps-emulation](//images.ctfassets.net/1es3ne0caaid/4H7d0cHWj6qC4qgqQU0moo/04c6b267d3a8582123a7b18e985fc377/carpooling-react-native-gps-emulation.png)\n\nI can simply click around the map so that React Native’s Geolocation is triggered. This then allows me to use Pusher Channels to send a message to the hiker so that they’re informed of the rider’s current location.\n\nNow, let’s proceed with the app flow:\n\n\n1. First, the rider enters their username and clicks **Share a ride**:\n\n![carpooling-react-native-share-a-ride](//images.ctfassets.net/1es3ne0caaid/6I48i2AQrmyiuoICqiyiIY/1bceeb357948e5b31dbc13299eff5ba4/carpooling-react-native-share-a-ride.png)\n\n2. Rider types in where they want to go and selects it from the drop-down. Google Places Autocomplete makes this feature work:\n\n![carpooling-react-native-rider-searches](//images.ctfassets.net/1es3ne0caaid/4iCq1toOb6eoOisOyi24CM/c1c6fa071340a13a7f390b4a5cc55264/carpooling-react-native-rider-searches.png)\n\n3. After selecting a place, the app plots the most desirable route from the origin to the destination. The red marker being the origin, and the blue one being the destination:\n\n![carpooling-react-native-route-finder](//images.ctfassets.net/1es3ne0caaid/4KNVRbBcNicEaasWa0s0yA/7d1c5d286ac1965222b50217c98e22ed/carpooling-react-native-route-finder.png)\n\nIf the rider wants to pick another place, they can click on the **Reset** button. This will empty the text field for entering the place as well as remove the markers and the route from the map.\n\n\n4. At this point, the rider clicks on the **Share Ride** button. This triggers a request to the server which then saves all the relevant data to an Elasticsearch index. This allows hikers to search for them later on. \n\n\n  To keep the route information updated, we use React Native’s Geolocation feature to watch the rider’s current location. Every time their location changes, the Elasticsearch index is also updated:\n\n![carpooling-react-native-driver-route-stored](//images.ctfassets.net/1es3ne0caaid/3nLm7Z3gik8s64IO2YgwEw/d01bb5f743921cff55786e3566d53300/carpooling-react-native-driver-route-stored.png)\n\n5. Now let’s take a look at the hiker’s side of things. First, the hiker enters their username and clicks on **Hitch a ride**:\n\n![carpooling-react-native-hitch-a-ride](//images.ctfassets.net/1es3ne0caaid/5UKI0GRYHKSIGkksQs2Uoa/8c9eb565dec00189cad36681c38a4859/carpooling-react-native-hitch-a-ride.jpeg)\n\n6. Next, the hiker searches for their destination. To keep things simple, let’s pick the same place where the rider is going:\n\n![carpooling-react-native-hitch-destination-search](//images.ctfassets.net/1es3ne0caaid/kLAUXtOhZm0Im4uy8cCUo/805ca4b280e726510d47d4ccf6a70a83/carpooling-react-native-hitch-destination-search.jpeg)\n\n7. Once again, the app plots the most desirable route from the hiker’s origin to their destination:\n\n![carpooling-react-native-hitch-route](//images.ctfassets.net/1es3ne0caaid/4F5S0WK7niumMOsoMuOqWy/4133360090d2e5727b69347511c70ac5/carpooling-react-native-hitch-route.jpeg)\n\n8. The hiker then clicks on the **Search Ride** button. At this point, the app makes a request to the server to look for riders matching the route added by the hiker. The rider should now receive the request. Pusher Channels makes this feature work:\n\n![carpooling-react-native-request-to-driver](//images.ctfassets.net/1es3ne0caaid/3Wbxnk3wLeKE06YG2McKk4/442aaa6ce3125eeb37d039efb9894238/carpooling-react-native-request-to-driver.png)\n\n9. Once the rider accepts the request, the hiker receives an alert that the rider accepted their request:\n\n![carpooling-react-native-ride-accepted](//images.ctfassets.net/1es3ne0caaid/2zBc6OM5juqIKkgS8scKe4/bcc09e370613da0900d736ca6c33d81e/carpooling-react-native-ride-accepted.jpeg)\n\n10. At this point, the hiker’s map will show rider’s current location. React Native’s Geolocation feature and Pusher Channels make this work:\n\n![carpooling-react-native-hitch-location](//images.ctfassets.net/1es3ne0caaid/6mZVzKfJ5Yq0yYOuwmSckW/0249c980ad672477b7039027ce60b4d6/carpooling-react-native-hitch-location.jpeg)\n\nAt the same time, the rider’s map will show their current location on the map. This is where you can use Genymotion’s GPS emulation tool to update the rider’s location:\n\n![carpooling-react-native-current-location](//images.ctfassets.net/1es3ne0caaid/2HtFr7jCfYC4oYcaEiWGc0/df3ec3cf2e0215cf8515b291fb29fcbd/carpooling-react-native-current-location.png)\n\n11. Once the rider is near the hiker, both users will receive a notification informing them that they’re already near each other:\n\n![carpooling-react-native-proximity](//images.ctfassets.net/1es3ne0caaid/66En3l4x3ieKC8SKM2o6Gs/d13457e68814b3820e026c1319824083/carpooling-react-native-proximity.png)\n\n12. Once they are within 20 meters of each other, the app’s UI resets and it goes back to the login screen:\n\n![carpooling-react-native-reset](//images.ctfassets.net/1es3ne0caaid/6xxnIcAg00a4gKuO222q0Q/d35e6865ad8c3078147f2c4d250353b7/carpooling-react-native-reset.png)\n\nWe will use the following technologies to build the app:\n\n- **Elasticsearch** - for saving and searching for routes.\n- **Pusher Channels** - for establishing realtime communication between the rider and the hiker so they are kept updated where each other is.\n- **PHP** - for saving and searching documents from the Elasticsearch index.\n- **Google Maps** - for showing maps inside the app.\n- **Google Places Autocomplete** - for searching for places.\n- **Google Directions API** - for getting the directions between the origin and the destination of the riders and hikers.\n- [**Geometry Library Google Maps API V3**](https://github.com/alexpechkarev/geometry-library) - for determining whether a specific coordinate lies within a set of coordinates. \n\nThe full source code of the app is available on this [Github repo](https://github.com/anchetaWern/Ridesharer). \n\n\n## Setting up a Pusher app\n\nWe’ll need to create a Pusher app to use Pusher Channels. Start by creating a [Pusher account](https://pusher.com/) if you haven’t done so already.\n\nOnce you have an account, go to your [dashboard](https://dashboard.pusher.com/) and click on **Channels apps** on the left side of the screen, then click on **Create Channels apps**. Enter the name of your app and select a desirable cluster, preferably one that’s nearest to your current location:\n\n![carpooling-react-native-create-channels-app](//images.ctfassets.net/1es3ne0caaid/4uecV7cGQokq6MAQEgWeoe/b31b3ade12a22747326d7f963c95bafd/carpooling-react-native-create-channels-app.png)\n\nOnce the app is created, click on the **App Settings** tab and enable client events:\n\n![carpooling-react-native-enable-client-events](//images.ctfassets.net/1es3ne0caaid/4t9p6MLB7aIgOGKs0W8Qys/323dbfc484d5ef2bb93d9e11e4fb31b7/carpooling-react-native-enable-client-events.png)\n\nThis will allow us to trigger events right from the app itself. That way, the only thing that we need to do on the server is to authenticate requests. Don’t forget to click on **Update** once you’re done.\n\nThe API keys which we’ll be using later are on the **App keys** tab.\n\n## Setting up a Google project\n\nWe will be using three of Google’s services to build this app:\n\n\n- Google Maps\n- Google Places\n- Google Directions\n\nThis requires us to create a Google project at [console.developers.google.com](https://console.developers.google.com) so we can use those services. \n\nOn your dashboard, click on the **Select a project** dropdown then click on **Create project**. Enter the name of the project and click **Create**:\n\n![carpooling-react-native-google-console-create-project](//images.ctfassets.net/1es3ne0caaid/5ODzOiU9EWiYy8awiSoigg/9de826dd47fc6d1fc527e2e3167ddf87/carpooling-react-native-google-console-create-project.png)\n\nOnce the project is created, click on **Library** on the left side. Look for the following APIs and enable them:\n\n- Maps SDK for Android\n- Maps SDK for iOS - note that if you don’t enable this, and followed the [installation instructions for iOS](https://github.com/react-community/react-native-maps/blob/master/docs/installation.md#if-you-want-to-use-google-maps), Apple Maps will be used instead.\n- Places SDK for Android\n- Places SDK for iOS\n- Directions API\n- Geocoding API\n\nOnce those are enabled, click on the **Credentials** menu on the left side, then click on the **Create credentials** button and select **API key**:\n\n![carpooling-react-native-google-console-credentials](//images.ctfassets.net/1es3ne0caaid/3D0rkMkRXyYeYCY2Yy6yUo/7e422484fbb0d294bfe47c2c39f810c4/carpooling-react-native-google-console-credentials.png)\n\nThat will generate an API key which allows you to use the services mentioned above. Take note of the key as we will be using it later. \n\nYou can choose to restrict access so not just anybody can use your key once they get access to it. To avoid problems while developing the app, I recommend to just leave it for now.\n\n## Setting up Laradock\n\nLaradock is a full PHP development environment for Docker. It allows us to easily set up the development server. Go through the following steps to setup Laradock.\n\n### Configuring the environment\n\n1. Clone the official repo. This will create a `laradock` directory:\n\n```\n    git clone https://github.com/laradock/laradock.git --branch v7.0.0\n```\n\nNote that in the above command we’re cloning a specific release tag ([v7.0.0](https://github.com/laradock/laradock/tree/v7.0.0)). This is to make sure we’re both using the same version of Laradock. This helps you avoid issues that has to do with different configuration and software versions installed by Laradock. You can choose to clone the most recent version, but you’ll have to handle the compatibility issues on your own.\n\n2. Navigate inside the `laradock` directory and create a copy of the sample `.env` file:\n\n```\n    cd laradock\n    cp env-example .env\n```\n\n3. Open the `.env` file on your text editor and replace the existing config with the following:\n\nThis is the directory where your projects are saved. Go ahead and create a `laradock-projects` folder outside the `laradock` folder. Then inside the `laradock-projects`, create a new folder named `ridesharer`. This is where we will add the server code:\n\n```\n    APP_CODE_PATH_HOST=../laradock-projects\n```\n\nThis is the Elasticsearch port configuration. The one below is actually the default one so in most cases, you don’t really need to change anything. But if you have a different configuration, or if you want to use a different port because an existing application is already using these ports then this is a good place to change them:\n\n```\n    ELASTICSEARCH_HOST_HTTP_PORT=9200\n    ELASTICSEARCH_HOST_TRANSPORT_PORT=9300\n```\n\nThis is the path where the Apache site configuration is located. We will be updating it at a later step. This is just to let you know that this is where it’s located:\n\n```\n    APACHE_SITES_PATH=./apache2/sites\n```\n\n### Adding a virtual host\n\n\n1. Open the `laradock/apache2/sites/default.apache.conf` file and add a new virtual host (you can also replace the existing one if you’re not using it):\n\n```\n    \u003cVirtualHost *:80\u003e\n      ServerName ridesharer.loc\n      DocumentRoot /var/www/ridesharer\n      Options Indexes FollowSymLinks\n    \n      \u003cDirectory \"/var/www/ridesharer\"\u003e\n        AllowOverride All\n        \u003cIfVersion \u003c 2.4\u003e\n          Allow from all\n        \u003c/IfVersion\u003e\n        \u003cIfVersion \u003e= 2.4\u003e\n          Require all granted\n        \u003c/IfVersion\u003e\n      \u003c/Directory\u003e\n    \n    \u003c/VirtualHost\u003e\n```\n\nThe code above tells Apache to serve the files inside the `/var/www/ridesharer` directory when `http://ridesharer.loc` is accessed on the browser. If the directory has `index.php` file in it, then it will get served by default (if the filename is not specified).\n\nThe `/var/www` directory maps to the application directory you’ve specified earlier on the `.env` file:\n\n```\n    APP_CODE_PATH_HOST=../laradock-projects\n```\n\nThis means that `/var/www/ridesharer` is equivalent to `/laradock-projects/ridesharer`.\n\nThis is why we’ve created a `ridesharer` folder inside the `laradock-projects` directory earlier. Which means that any file you create inside the `ridesharer` folder will get served.\n\n\n2. Update the operating system’s `hosts` file to point out `ridesharer.loc` to `localhost`:\n\n```\n    127.0.0.1     ridesharer.loc\n```\n\nThis tells the browser to not go looking anywhere else on the internet when `http://ridesharer.loc` is accessed. Instead, it will just look in the localhost.\n\n\n### Configuring Elasticsearch\n\nOpen the `docker-compose.yml` file and search for `ElasticSearch Container`. This will show you the Elasticsearch configuration:\n\n``` yaml\n    ### ElasticSearch ########################################\n        elasticsearch:\n          build: ./elasticsearch\n          volumes:\n            - elasticsearch:/usr/share/elasticsearch/data\n          environment:\n            - cluster.name=laradock-cluster\n            - bootstrap.memory_lock=true\n            - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n          ulimits:\n            memlock:\n              soft: -1\n              hard: -1\n          ports:\n            - \"${ELASTICSEARCH_HOST_HTTP_PORT}:9200\"\n            - \"${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300\"\n          depends_on:\n            - php-fpm\n          networks:\n            - frontend\n            - backend\n```\n\nUnder the environment, add the following:\n\n``` yaml\n    - xpack.security.enabled=false\n```\n\nSo it should look like this:\n\n``` yaml\n    environment:\n      - cluster.name=laradock-cluster\n      - bootstrap.memory_lock=true\n      - xpack.security.enabled=false\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n```\n\nThis disables the need to authenticate when connecting to Elasticsearch.\n\nYou can choose to enable it later so that not just anyone can have access to the Elasticsearch index. But to avoid problems with authentication while we’re developing, we’ll disable it for now.\n\n\n### Bringing up the container\n\nNavigate inside the `laradock` directory and bring up the container with Docker Compose:\n\n```\n    docker-compose up -d apache2 php-fpm elasticsearch workspace\n```\n\nThis will install and setup Apache, PHP, and Elasticsearch on the container. There’s also a workspace so you can log in to the container. This allows you to install packages using [Composer](https://getcomposer.org/).\n\nThis process should take a while depending on your internet connection.\n\n### Troubleshooting Laradock issues\n\nIf you’re having problems completing this step, it is most likely a port issue. That is, another process is already using the port that the containers wants to use.\n\nThe quickest way to deal with a port issue is to change the default ports that Apache and Elasticsearch are using (or whatever port is already occupied by another process). Open the `.env` file inside the `laradock` folder and make the following changes:\n\nFor Apache, replace the values for either `APACHE_HOST_HTTPS_PORT` or `APACHE_PHP_UPSTREAM_PORT` (or both):\n\n```\n    # APACHE_HOST_HTTPS_PORT=443 \n    APACHE_HOST_HTTPS_PORT=445 \n    \n    # APACHE_PHP_UPSTREAM_PORT=9000\n    APACHE_PHP_UPSTREAM_PORT=9001\n```\n\nFor Elasticsearch:\n\n```\n    # ELASTICSEARCH_HOST_HTTP_PORT=9200\n    ELASTICSEARCH_HOST_HTTP_PORT=9211\n    \n    # ELASTICSEARCH_HOST_TRANSPORT_PORT=9300\n    ELASTICSEARCH_HOST_TRANSPORT_PORT=9311\n```\n\nIt’s a good practice to comment out the default config so you know which one’s you’re replacing.\n\nIf the issue you’re having isn’t a port issue, then you can visit [Laradock’s issues page](https://github.com/laradock/laradock/issues) and search for the issue you’re having.\n\n## Creating the server component\n\n### Installing the Dependencies\n\nOnce all the software is installed in the container, Docker will automatically bring it up. This allows you to login to the container. You can do that by executing the following command while inside the `laradock` directory:\n\n```\n    docker-compose exec --user=laradock workspace bash\n```\n\nOnce you’re inside, navigate inside the `ridesharer` folder and create a `composer.json` file:\n\n``` json\n    {\n      \"require\": {\n        \"alexpechkarev/geometry-library\": \"1.0\",\n        \"elasticsearch/elasticsearch\": \"^6.0\",\n        \"pusher/pusher-php-server\": \"^3.0\",\n        \"vlucas/phpdotenv\": \"^2.4\"\n      }\n    }\n```\n\nSave the file and execute `composer install`. This will install the following packages:\n\n- `geometry-library` - as mentioned earlier, this allows us to determine whether a specific coordinate lies within a set of coordinates. We will be using this library to determine if the directions returned by the Google Directions API covers the hiker’s pick-up location (origin).  \n- `elasticsearch` - this library allows us to query the Elasticsearch index so we can add, search, update, or delete documents.\n- `pusher-php-server` - this is the official Pusher PHP library for communicating with Pusher’s server. We will be using it to authenticate requests coming from the app.\n- `vlucas/phpdotenv` - for loading environment variables from `.env` files. The `.env` file is where we put the Elasticsearch, Google, and Pusher config. \n\n### Adding environment variables\n\nInside the `laradock-projects/ridesharer` directory, create a `.env` file and add the following:\n\n```\n    PUSHER_APP_ID=\"YOUR PUSHER APP ID\"\n    PUSHER_APP_KEY=\"YOUR PUSHER APP KEY\"\n    PUSHER_APP_SECRET=\"YOUR PUSHER APP SECRET\"\n    PUSHER_APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n    \n    GOOGLE_API_KEY=\"YOUR GOOGLE API KEY\"\n    \n    ELASTICSEARCH_HOST=\"elasticsearch\"\n```\n\nThis file is where you will put the keys and configuration options that we will be using for the server.\n\n### Loader file\n\nSince the majority of the files we will be creating will use either the configuration from the `.env` file or connect to the Elasticsearch server, we will be using this file to do those task for us. That way, we simply need to include this file on each of the files instead of repeating the same code.\n\nStart by importing the `Elasticsearch\\ClientBuilder` class to the current scope. This allows us to use the `ClientBuilder` class without having to refer to its namespace `Elasticsearch` everytime we need to use it:\n\n``` php\n    // laradock-projects/ridesharer/loader.php\n    use Elasticsearch\\ClientBuilder;\n```\n\nInclude the vendor autoload file. This allows us to include all the packages that we installed earlier:\n\n``` php\n    require 'vendor/autoload.php';\n```\n\nLoad the `.env` file:\n\n``` php\n    $dotenv = new Dotenv\\Dotenv(__DIR__);\n    $dotenv-\u003eload();\n    \n    $elasticsearch_host = getenv('ELASTICSEARCH_HOST'); // get the elasticsearch config\n```\n\nAfter that, connect to Elasticsearch:\n\n``` php\n    $hosts = [\n      [\n        'host' =\u003e $elasticsearch_host\n      ]\n    ];\n    \n    $client = ClientBuilder::create()-\u003esetHosts($hosts)-\u003ebuild();\n```\n\n### Setting the type mapping\n\nSince we will be working with coordinates in this app, we need to tell Elasticsearch which of the fields we will be using are coordinates. That way, we can query them later using functions which are specifically created to query geo-point data. This is done through a process called [Mapping](https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-point.html). \n\nStart by including the loader file:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/set-map.php\n    require 'loader.php';\n```\n\nNext, we can now proceed with specifying the actual map. Note that an error might occur (for example, the index has already been created, or one of the datatypes we specified isn’t recognized by Elasticsearch) so we’re wrapping everything in a `try..catch`. This allows us to “catch” the error and present it in a friendly manner:\n\n``` php\n    try {\n      $indexParams['index']  = 'places'; // the name of the index\n    \n      $myTypeMapping = [\n        '_source' =\u003e [\n          'enabled' =\u003e true\n        ],\n        'properties' =\u003e [\n          'from_coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'to_coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'current_coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'from_bounds.top_left.coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'from_bounds.bottom_right.coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'to_bounds.top_left.coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'to_bounds.bottom_right.coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ]\n        ]\n      ];\n    \n      // next: add code for adding the map\n      \n    } catch(\\Exception $e) {\n      echo 'err: ' . $e-\u003egetMessage();\n    }\n```\n\nBreaking down the code above, we first specify the name of the index we want to use. This shouldn’t already exist within Elasticsearch. If you’re coming from an RDBMS background, an index is synonymous to a database:\n\n``` php\n    $indexParams['index']  = 'places';\n```\n\nFor the actual type mapping, we only need to specify two properties: `_source` and `properties`. \n\n`_source` allows us to specify whether to enable returning of the [source](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-source-field.html) when getting documents. In Elasticsearch, the `_source` contains the fields (and their values) that we’ve indexed. \n\nIn a real-world app, you don’t really want this option to be enabled as it will affect the search performance. We’re only enabling it so that we don’t have to perform an additional step to fetch the source whenever where querying the index:\n\n``` php\n    '_source' =\u003e [\n      'enabled' =\u003e true\n    ],\n```\n\nThe other property that we need to specify is the `properties`. This accepts the array of field names whose data type we want to specify. Of course, we don’t need to specify the data type of all the fields we plan on using. This is because the data type is already implied in most cases (for example, if it’s wrapped in double or single quotes then it’s a string). But for special data types such as the [geo-point](https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-point.html), that’s the time where we need to explicitly specify it: \n\n``` php\n    'from_coords' =\u003e [\n      'type' =\u003e 'geo_point'\n    ],\n```\n\nIf the field that you want to work with is located deep within other fields, then you use the dot notation to specify the parent:\n\n``` php\n    'from_bounds.top_left.coords' =\u003e [\n      'type' =\u003e 'geo_point'\n    ]\n```\n\nLastly, add the code for creating the index with the map that we specified:\n\n``` php\n    $indexParams['body']['mappings']['location'] = $myTypeMapping; // specify the map\n    $response = $client-\u003eindices()-\u003ecreate($indexParams); // create the index\n    print_r($response); // print the response\n```\n\nAccess `http://ridesharer.loc/set-map.php` on your browser and it should print out a success response. \n\nNote that if you have another local development environment that’s currently running, it might be the one that takes priority instead of Laradock. So be sure to disable them if you can’t access the URL above.\n\n### Creating users\n\nWhen someone uses the app, they need to login first. If the username they used doesn’t already exist then it’s created.\n\nStart by getting the data passed from the app, in PHP this is commonly done by extracting the field name from the `$_POST` global variable. But in this case, we’re using the [PHP input stream](http://php.net/manual/en/wrappers.php.php) to read the raw `POST` data from the request body. This is because this is how Axios (the library that we’ll be using in the app later on) submits the data when sending requests to the server:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/create-user.php\n    require 'loader.php';\n    \n    $data = json_decode(file_get_contents(\"php://input\"), true);\n    $username = $data['username']; // get the value from the username field\n```\n\nConstruct the parameters to be supplied to Elasticsearch. This includes the `index` and the `type`. You can think of the `type` as the table or collection that you want to query. \n\n``` php\n    $params = [\n      'index' =\u003e 'places', // the index \n      'type' =\u003e 'users' // the table or collection\n    ];\n```\n\nSpecify the query. In this case, we’re telling Elasticsearch to look for an exact match for the username supplied:\n\n``` php\n    $params['body']['query']['match']['username'] = $username; // look for the username specified\n```\n\nExecute the search query, if it doesn’t return any “hits” then we create a new user using the username that was supplied:\n\n``` php\n    try {\n      $search_response = $client-\u003esearch($params); // execute the search query\n     \n      if($search_response['hits']['total'] == 0){ // if the username doesn't already exist\n        // create the user\n        $index_response = $client-\u003eindex([\n          'index' =\u003e 'places',\n          'type' =\u003e 'users',\n          'id' =\u003e $username,\n          'body' =\u003e [\n            'username' =\u003e $username\n          ]\n        ]);\n      }\n    \n      echo 'ok';\n      \n    } catch(\\Exception $e) {\n      echo 'err: ' . $e-\u003egetMessage();\n    }\n```\n\n### Saving routes\n\nWhenever a rider shares a ride, the following information needs to be stored in the index:\n\n- username\n- origin\n- destination\n- origin coordinates\n- destination coordinates\n- the steps from the origin to destination\n\nStart by getting the data submitted from the app:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/save-route.php\n    require 'loader.php';\n    \n    $google_api_key = getenv('GOOGLE_API_KEY');\n    \n    $data = json_decode(file_get_contents(\"php://input\"), true);\n    $start_location = $data['start_location']; // an array containing the coordinates (latitude and longitude) of the rider's origin\n    $end_location = $data['end_location']; // the coordinates of the rider's destination\n    \n    $username = $data['username']; // the rider's username\n    $from = $data['from']; // the descriptive name of the rider's origin\n    $to = $data['to']; // the descriptive name of the rider's destination\n    $id = generateRandomString(); // unique ID used for identifying the document\n```\n\nMake a request to the [Google Directions API](https://developers.google.com/maps/documentation/directions/intro) using the `file_get_contents()` function. The `directions` endpoint expects the `origin` and `destination` to be passed as a query parameter. These two contains the latitude and longitude value pairs (separated by a comma). We simply pass the values supplied from the app. \n\nThe `file_get_contents()` function returns a JSON string so we use the `json_decode()` function to convert it to an array. Specifying `true` as the second argument tells PHP to convert it to an array instead of an object (when the second argument is omitted or set to `false`):\n\n``` php\n    $steps_data = [];\n    \n    $contents = file_get_contents(\"https://maps.googleapis.com/maps/api/directions/json?origin={$start_location['latitude']},{$start_location['longitude']}\u0026destination={$end_location['latitude']},{$end_location['longitude']}\u0026key={$google_api_key}\");\n    \n    $directions_data = json_decode($contents, true);\n```\n\nLoop through the array of steps and construct an array (`$steps_data`) that only contains the data that we want to store. In this case, it’s only the latitude and longitude values for each of the steps:\n\n``` php\n    if(!empty($directions_data['routes'])){\n      $steps = $directions_data['routes'][0]['legs'][0]['steps'];\n      foreach($steps as $step){\n        $steps_data[] = [\n          'lat' =\u003e $step['start_location']['lat'],\n          'lng' =\u003e $step['start_location']['lng']\n        ];\n    \n        $steps_data[] = [\n          'lat' =\u003e $step['end_location']['lat'],\n          'lng' =\u003e $step['end_location']['lng']\n        ];\n      }\n    }\n```\n\nNext, construct the data that we’ll save to the Elasticsearch index:\n\n``` php\n    if(!empty($steps_data)){\n    \n      $params = [\n        'index' =\u003e 'places',\n        'type' =\u003e 'location',\n        'id' =\u003e $id,\n        'body' =\u003e [\n          'username' =\u003e $username, \n          'from' =\u003e $from, \n          'to' =\u003e $to,\n          'from_coords' =\u003e [ // geo-point values needs to have lat and lon\n            'lat' =\u003e $start_location['latitude'],\n            'lon' =\u003e $start_location['longitude'],\n          ],\n          'current_coords' =\u003e [\n            'lat' =\u003e $start_location['latitude'],\n            'lon' =\u003e $start_location['longitude'],\n          ],\n          'to_coords' =\u003e [\n            'lat' =\u003e $end_location['latitude'],\n            'lon' =\u003e $end_location['longitude'],\n          ],\n          'steps' =\u003e $steps_data\n        ]\n      ];\n    \n    }\n```\n\nMake the request to index the data:\n\n``` php\n    try{\n      $response = $client-\u003eindex($params);\n      $response_data = json_encode([\n        'id' =\u003e $id\n      ]);\n            \n      echo $response_data;\n    }catch(\\Exception $e){\n      echo 'err: ' . $e-\u003egetMessage();\n    }\n```\n\nHere’s the function for generating a unique ID:\n\n``` php\n    function generateRandomString($length = 10){\n      $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n      $charactersLength = strlen($characters);\n      $randomString = '';\n      for($i = 0; $i \u003c $length; $i++){\n        $randomString .= $characters[rand(0, $charactersLength - 1)];\n      }\n      return $randomString;\n    }\n```\n\n### Searching routes\n\nWhen a hiker searches for a ride, a request is made to this file. This expects the origin and destination of the hiker to be passed in the request body. That way, we can make a request to the Google Directions API with those data:\n\n``` php\n    \u003c?php \n    // /laradock-projects/ridesharer/search-routes.php\n    require 'loader.php';\n    \n    $google_api_key = getenv('GOOGLE_API_KEY');\n    \n    $params['index'] = 'places';\n    $params['type'] = 'location';\n    \n    $data = json_decode(file_get_contents(\"php://input\"), true);\n    \n    // the hiker's origin coordinates\n    $hiker_origin_lat = $data['origin']['latitude'];\n    $hiker_origin_lon = $data['origin']['longitude'];\n    \n    // the hiker's destination coordinates\n    $hiker_dest_lat = $data['dest']['latitude'];\n    $hiker_dest_lon = $data['dest']['longitude'];\n    \n    $hiker_directions_contents = file_get_contents(\"https://maps.googleapis.com/maps/api/directions/json?origin={$hiker_origin_lat},{$hiker_origin_lon}\u0026destination={$hiker_dest_lat},{$hiker_dest_lon}\u0026key={$google_api_key}\");\n    \n    $hiker_directions_data = json_decode($hiker_directions_contents, true);\n```\n\nStore the hiker’s steps into an array. We will be using it later to determine whether the hiker and the rider have the same route. Note that we’re only storing the `start_location` for the first step. This is because the `start_location` of all the succeeding steps overlaps with the `end_location` of the step that follows:\n\n``` php\n    $hikers_steps = [];\n    \n    $steps = $hiker_directions_data['routes'][0]['legs'][0]['steps']; // extract the steps\n    foreach($steps as $index =\u003e $s){\n      if($index == 0){ \n        $hikers_steps[] = [\n          'lat' =\u003e $s['start_location']['lat'],\n          'lng' =\u003e $s['start_location']['lng']\n        ];  \n      }\n    \n      $hikers_steps[] = [\n        'lat' =\u003e $s['end_location']['lat'],\n        'lng' =\u003e $s['end_location']['lng']\n      ];\n    }\n```\n\nNext, we construct the query to be sent to Elasticsearch. Here we use a `d``ecay` function called `gauss` to assign a score to each of the routes that are currently saved in the index. This score is then used to determine the order in which the results are returned, or whether they will be returned at all. \n\nSpecifying the `min_score` means all the documents which don’t meet the supplied score won’t be returned in the response. In the code below, we’re querying for documents which are up to five kilometers away from the origin. But once the documents have a `current_coords` which are not within 100 meters, the score assigned to them is halved:\n\n``` php\n    $params['body'] = [\n      \"min_score\" =\u003e 0.5, // the minimum score for the function to return the record\n      'query' =\u003e [\n        'function_score' =\u003e [\n          'gauss' =\u003e [\n            'current_coords' =\u003e [\n              \"origin\" =\u003e [\"lat\" =\u003e $hiker_origin_lat, \"lon\" =\u003e $hiker_origin_lon], // where to begin the search\n              \"offset\" =\u003e \"100m\", // only select documents that are up to 100 meters away from the origin\n              \"scale\" =\u003e \"5km\" // (offset + scale = 5,100 meters) any document which are not within the 100 meter offset but are still within 5,100 meters gets a score of 0.5\n            ]\n          ]\n        ]\n      ]\n    ];\n```\n\nIf you want to know more about how the function works, check this article out: [The Closer, The Better](https://www.elastic.co/guide/en/elasticsearch/guide/current/decay-functions.html).\n\nNext, construct the coordinates for the hiker’s origin and destination. We will use this to compute the distance between the hiker’s origin and destination, as well as the hiker’s origin and the rider’s destination. We will need these values later on to determine whether the routes returned from the query matches the hiker’s route:\n\n``` php\n    $hikers_origin = ['lat' =\u003e $hiker_origin_lat, 'lng' =\u003e $hiker_origin_lon];\n    $hikers_dest = ['lat' =\u003e $hiker_dest_lat, 'lng' =\u003e $hiker_dest_lon];\n```\n\nSend the request and loop through all the results:\n\n``` php\n    try {\n      $response = $client-\u003esearch($params);\n      \n      if(!empty($response['hits']) \u0026\u0026 $response['hits']['total'] \u003e 0){\n        foreach($response['hits']['hits'] as $hit){\n          \n          $source = $hit['_source'];\n          $riders_steps = $source['steps'];\n    \n          $current_coords = $source['current_coords'];\n          $to_coords = $source['to_coords'];\n    \n          $riders_origin = [\n            'lat' =\u003e $current_coords['lat'],\n            'lng' =\u003e $current_coords['lon']\n          ];\n    \n          $riders_dest = [\n            'lat' =\u003e $to_coords['lat'],\n            'lng' =\u003e $to_coords['lon']\n          ];\n          \n          // check whether the rider's route matches the hiker's route\n          if(isCoordsOnPath($hiker_origin_lat, $hiker_origin_lon, $riders_steps) \u0026\u0026 canDropoff($hikers_origin, $hikers_dest, $riders_origin, $riders_dest, $hikers_steps, $riders_steps)){\n            // the rider's username, origin and destination\n            $rider_details = [\n              'username' =\u003e $source['username'],\n              'from' =\u003e $source['from'],\n              'to' =\u003e $source['to']\n            ];\n    \n            echo json_encode($rider_details); // respond with the first match       \n            break; // break out from the loop\n          }\n        }\n      }\n    \n    } catch(\\Exception $e) {\n      echo 'err: ' . $e-\u003egetMessage();\n    }\n```\n\nThe `isCoordsOnPath()` function uses the `isLocationOnPath()` function from the `php-geometry` library. This accepts the following arguments:\n\n\n- An array containing the latitude and longitude of the coordinate we want to check.\n- An array of arrays containing the latitude and longitude of each of the steps.\n- The tolerance value in degrees. This is useful if the place specified isn’t near a road. Here, I’ve used a high value to cover for most cases. As long as the hiker’s origin is somewhat near to a road, then it should be fine.\n\n``` php\n    function isCoordsOnPath($lat, $lon, $path) {\n      $response = \\GeometryLibrary\\PolyUtil::isLocationOnPath(['lat' =\u003e $lat, 'lng' =\u003e $lon], $path, 350); \n      return $response;\n    }\n```\n\nThe `canDropoff()` function determines whether the rider and the hiker are both treading the same route. This accepts the following arguments:\n\n\n- `$hikers_origin` - the coordinates of the hiker’s origin.\n- `$hikers_dest` - the coordinates of the hiker’s destination.\n- `$riders_origin` - the coordinates of the rider’s origin.\n- `$riders_destination` - the coordinates of the rider’s destination.\n- `$hikers_steps` - an array containing the hiker’s steps.\n- `$riders_steps` - an array containing the rider’s steps.\n\nThe way this function works is that it first determines who leaves the vehicle last: the rider or the hiker. The app works with the assumption that the rider has to ride the vehicle first, and that they should pick up the hiker before they get to leave the vehicle. Otherwise, the hiker won’t be able to track where the vehicle is. This means that there are only two possible scenarios when it comes to the order of leaving the vehicle:\n\n- rider rides vehicle → rider picks up hiker → rider leaves the vehicle → hiker leaves the vehicle\n- rider rides vehicle → rider picks up hiker → hiker leaves the vehicle → rider leaves the vehicle\n\nThe tracking starts once the rider picks up the hiker. So we measure the distance between the hiker’s origin and their destination, as well as the hiker’s origin and the rider’s destination. This then allows us to determine who will leave the vehicle last by comparing the distance between the two.\n\nOnce we know the order in which the two users leaves the vehicle, we can now use the `isCoordsOnPath()` function to determine if the destination of the person who will leave the vehicle first is within the route of the person who will leave the vehicle last:\n\n``` php\n    function canDropoff($hikers_origin, $hikers_dest, $riders_origin, $riders_dest, $hikers_steps, $riders_steps) {\n      // get the distance from the hiker's origin to the hiker's destination\n      $hiker_origin_to_hiker_dest = \\GeometryLibrary\\SphericalUtil::computeDistanceBetween($hikers_origin, $hikers_dest);\n      \n      // get the distance from the hiker's origin to the rider's destination\n      $hiker_origin_to_rider_dest = \\GeometryLibrary\\SphericalUtil::computeDistanceBetween($hikers_origin, $riders_dest);\n    \n      $is_on_path = false; // whether the rider and hiker is on the same path or not\n    \n      if($hiker_origin_to_hiker_dest \u003e $hiker_origin_to_rider_dest){ // hiker leaves the vehicle last\n        // if the rider's destination is within the routes covered by the hiker\n        $is_on_path = isCoordsOnPath($riders_dest['lat'], $riders_dest['lng'], $hikers_steps); \n    \n      }else if($hiker_origin_to_rider_dest \u003e $hiker_origin_to_hiker_dest){ // rider leaves the vehicle last\n        // if hiker's destination is within the routes covered by the rider\n        $is_on_path = isCoordsOnPath($hikers_dest['lat'], $hikers_dest['lng'], $riders_steps);\n    \n      }else{ // if the rider and hiker are both going the same place\n        // check whether either of the conditions above returns true\n        $is_on_path = isCoordsOnPath($hikers_dest['lat'], $hikers_dest['lng'], $riders_steps) || isCoordsOnPath($riders_dest['lat'], $riders_dest['lng'], $hikers_steps);\n      }\n    \n      return $is_on_path;\n    \n    }\n```\n\n### Update route\n\nEvery time the location changes, the app makes a request to this file. The app sends the unique ID that the server responded with when the route was created. This allows us to fetch the existing document from the index. We then update the source with the new coordinates:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/update-route.php\n    require 'loader.php';\n    \n    $data = json_decode(file_get_contents(\"php://input\"), true); // get the request body and convert it to an array\n    \n    $params['index'] = 'places';\n    $params['type'] = 'location';\n    $params['id'] = $data['id']; // the id submitted from the app\n    \n    // the latitude and longitude values submitted from the app\n    $lat = $data['lat']; \n    $lon = $data['lon']; \n    \n    $result = $client-\u003eget($params); // get the document based on the id used as the parameter\n    $result['_source']['current_coords'] = [ // update the current coordinates with the latitude and longitude values submitted from the app\n      'lat' =\u003e $lat,\n      'lon' =\u003e $lon\n    ];\n    \n    $params['body']['doc'] = $result['_source']; // replace the source with the updated data\n    $result = $client-\u003eupdate($params); // update the document\n    \n    echo json_encode($result);\n```\n\n### Delete route\n\nOnce the rider accepts a request from the hiker, the app makes a request to this file so that the existing route will be deleted. We need to do this because we don’t want other hikers to make another request to the same rider (remember the 1:1 ratio of the rider to hiker?). Also, note that we’re using the rider’s `username` to query the index. We haven’t really put any security measures to only allow a username to be used on a single app instance, but this tells us that a user can only save one route at a time:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/delete-route.php\n    require 'loader.php';\n    \n    $data = json_decode(file_get_contents(\"php://input\"), true);\n    \n    $params['index'] = 'places';\n    $params['type'] = 'location';\n    $params['body']['query']['match']['username'] = $data['username']; // find the rider's username\n     \n    $result = $client-\u003esearch($params); // search the index\n    $id = $result['hits']['hits'][0]['_id']; // only get the first result\n    \n    unset($params['body']);\n    $params['id'] = $id;\n    $result = $client-\u003edelete($params);\n    \n    echo json_encode($result);\n```\n\n### Delete index\n\nDeleting the index (`delete-index.php` ) isn’t really required for the app to work. Though it will be useful when testing the app. This allows you to reset the Elasticsearch index so you can control the results that are returned when you search for riders:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/delete-index.php\n    require 'loader.php';\n    \n    try {\n      $params = ['index' =\u003e 'places'];\n      $response = $client-\u003eindices()-\u003edelete($params);\n      print_r($response);\n    } catch(\\Exception $e) {\n      echo 'err: ' . $e-\u003egetMessage();\n    }\n```\n\n### Authenticating requests\n\nBelow is the code for authenticating requests so that Pusher will allow the user to use the Channels service. This requires the keys from the **App keys** tab earlier. Be sure to replace the placeholders with your keys:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/pusher-auth.php\n    require 'vendor/autoload.php';\n    \n    // load the .env file located on the same directory as this file\n    $dotenv = new Dotenv\\Dotenv(__DIR__); \n    $dotenv-\u003eload();\n    \n    // get the individual config from the .env file. This should be the same as the one's you have on the .env file\n    $app_id = getenv('PUSHER_APP_ID');\n    $app_key = getenv('PUSHER_APP_KEY');\n    $app_secret = getenv('PUSHER_APP_SECRET');\n    $app_cluster = getenv('PUSHER_APP_CLUSTER');\n```\n\nSet the content type to `application/json` as this is what the Pusher client expects in the client side:\n\n``` php\n    header('Content-Type: application/json');\n```\n\nConnect to the Pusher app using the keys and options. The options include the cluster where the app is running from, and whether to encrypt the connection or not:\n\n``` php\n    $options = ['cluster' =\u003e $app_cluster, 'encrypted' =\u003e true]; \n    $pusher = new Pusher\\Pusher($app_key, $app_secret, $app_id, $options);\n```\n\nLastly, get the data sent by the Pusher client and use it as an argument for the `socket_auth()` method. This method returns the success token required by the Pusher client:\n\n``` php\n    $channel = $_POST['channel_name'];\n    $socket_id = $_POST['socket_id'];\n    \n    echo $pusher-\u003esocket_auth($channel, $socket_id);\n```\n\nAs you can see, we didn’t really apply any form of authentication in the code above. In a real-world scenario, you want to have some form of authentication before returning the success token. This can be a unique ID that’s only assigned to the users of your app, it can also be a key which is then decrypted to come up with a token used for authenticating the request. This unique ID or key is sent from the client side so the server can verify it. \n\nYou can test if the server is working by accessing any of the files you created earlier.\n\n## Exposing the server with ngrok\n\nSo that you can access the virtual host `http://ridesharer.loc` from the app, you need to setup ngrok. This allows you to expose your virtual host to the internet.\n\n1. [Sign up for an ngrok account](https://dashboard.ngrok.com/user/signup). \n2. Go to your [dashboard](https://dashboard.ngrok.com/get-started) and download ngrok.\n3. Unzip the archive.\n4. Authenticate ngrok using your auth token:\n\n``` \n    .\\ngrok authtoken YOUR_AUTH_TOKEN\n```\n\n5. Expose the virtual host:\n\n```\n    ngrok http -host-header=ridesharer.loc 80\n```\n\nThis will give you an output similar to the following:\n\n![carpooling-react-native-ngrok-setup](//images.ctfassets.net/1es3ne0caaid/44tTdWBLCMOsOWYYC6qaGa/2c1156e0bb1a4b588a83659e85f2b34b/carpooling-react-native-ngrok-setup.png)\n\nCopy the HTTPS URL as that’s what we’re going to use in the app later on.\n\n## Conclusion\n\nThat’s it! In this tutorial, we’ve set up the server to be used by the app. You can find the code used in this tutorial on this [Github repo](https://github.com/anchetaWern/Ridesharer). In the [second part](https://pusher.com/tutorials/carpooling-react-native-part-2) of this series, we’ll be covering how to create the frontend of the app.","metaTitle":"Create a carpooling app with React Native - Part 1","metaDescription":"Build a carpooling app using React Native, Docker and Google SDKs and APIs. In the first part, create the backend server using Docker and PHP."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6eKYEn6W9qmOqSWS4eQW8W","type":"Entry","createdAt":"2018-05-28T11:22:15.498Z","updatedAt":"2018-05-28T11:22:15.498Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a location sharing app with Ruby on Rails and the Google Maps API ","url":"location-ruby-rails-googlemaps","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/9jaswag/pusher-locations","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6S5luSjtlYk4i8eM8AyO4I","type":"Entry","createdAt":"2018-02-02T13:39:48.331Z","updatedAt":"2018-02-12T14:41:19.307Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby","url":"ruby","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"hPWAADkjVmomS68E6seqQ","type":"Entry","createdAt":"2018-02-12T14:48:52.613Z","updatedAt":"2018-02-12T14:48:52.613Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby on Rails","url":"ruby-on-rails","type":"framework"}}],"reviewDate":"2018-05-27","description":"Build a location sharing web app using Ruby on Rails and the Google Maps API. Get your location, generate a link to share it, and allow people to track your movements with realtime updates.","prerequisite":"To follow this tutorial, you will need Ruby and Rails installed on your machine. A basic understanding of Ruby, PostgreSQL and CoffeeScript will help you get the most out of this tutorial.","content":"## Introduction\n\nRealtime maps have become very popular nowadays. The ability to track something or someone realtime has been incorporated into lots of apps, especially in the transportation and delivery industry.\nIn this post, we’ll be building a realtime location sharing app using Ruby and Pusher.\n\nHere’s a sneak-peak into what we’ll be building:\n\n![location-sharing-ruby-demo](//images.ctfassets.net/1es3ne0caaid/5WvrTBQ16Eq40AoWkgCkkC/9b201ee2550093973ecbd08d77f496a3/location-sharing-ruby-demo.gif)\n\n## Prerequisites\n\nA basic understanding of Ruby, CoffeeScript and PostgreSQL will help you get the best out of this tutorial. You can check the [PostgreSQL](https://www.postgresql.org/download/), [Ruby](https://www.ruby-lang.org/en/downloads/) and [Rails](http://guides.rubyonrails.org/getting_started.html) documentation for installation steps.\n\nBefore we start building our app, let’s ensure we have Ruby and Rails installed. Run the following command in your terminal to confirm you have both Ruby and Rails installed:\n\n```\n    $ ruby -v      // 2.1 or above\n    $ rails -v   // 4.2 or above\n```\n\n\n## Pusher account setup\n\nSince we’ll be relying on Pusher for realtime functionality, let’s head over to Pusher and [create a free account](https://dashboard.pusher.com/accounts/sign_up).\n\n![ruby-create-pusher-account](//images.ctfassets.net/1es3ne0caaid/6uDbn5kOyIOiKyeSeOKqeS/6136b86bc4d9b6ceff7fcf8458375a19/ruby-create-pusher-account.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![ruby-channels-dashboard](//images.ctfassets.net/1es3ne0caaid/5IDtPf0HhC4aKg66gguYq8/183e0b23ec44fdfc23a38921e11fe9e3/ruby-channels-dashboard.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate with Pusher, to be provided with some boilerplate setup code:\n\n![ruby-new-pusher-app](//images.ctfassets.net/1es3ne0caaid/3qnLmThfu8ue2ImYKKSw8a/2e4f39b15b8787e0f6d3b4f2ea022d95/ruby-new-pusher-app.png)\n\nClick the **App Keys** tab to retrieve your keys\n\n![ruby-app-keys](//images.ctfassets.net/1es3ne0caaid/1XHWE3GCeoCeqsMCO8uM2q/52523148497d08f6e9ba4f52fe0750f6/ruby-app-keys.png)\n\nNow that we have our Pusher account, let’s setup our application.\n\n## Setting up the application\n\nOpen your terminal and run the following Rails commands to create our demo application:\n\n```\n    # create a new Rails application\n    $ rails new pusher-locations -T --database=postgresql\n```\n\nGo ahead and change directory into the newly created `pusher-locations` folder:\n\n```\n    # change directory\n    $ cd pusher-locations\n```\n\nIn the root of your `pusher-locations` directory, open your `Gemfile` and add the following gems:\n\n```\n    # Gemfile\n    \n    gem 'bootstrap', '~\u003e 4.1.0'\n    gem 'jquery-rails'\n    gem 'pusher'\n    gem 'figaro'\n```\n\nIn your terminal, ensure you are in the `pusher-locations` project directory and install the gems by running:\n\n```\n    $ bundle install\n```\n\n## Setting up the database\n\nTo get our app up and running, we’ll create a database for it to work with. You can check out this [article](https://www.digitalocean.com/community/tutorials/how-to-setup-ruby-on-rails-with-postgres) on how to create a Postgres database and an associated user and password.\n\nOnce you have your database details, in your `database.yml` file, under the `development` key, add the following code:\n\n``` yaml\n    # config/database.yml\n    \n    ...\n    development:\n      \u003c\u003c: *default\n      database: pusher-locations_development // add this line if it isn't already there\n      username: database_user // add this line\n      password: user_password // add this line\n    ...\n```\n\nEnsure that the username and password entered in the code above has access to the `pusher-locations_development database`. After that, run the following code to setup the database:\n\n```\n    # setup database\n    $ rails db:setup\n```\n\n## Bootstrap the application\n\nWith our database all set up, we’ll go ahead and create our models and controllers. In your terminal, while in the project’s directory, run the following code:\n\n```\n    # generate a trip model\n    $ rails g model trip name:string uuid:string\n    \n    # generate a checkin model\n    $ rails g model checkin trip:references lat:decimal lng:decimal\n    \n    # generate a trips controller with index, create and show views and actions\n    $ rails g controller trips index create show\n    \n    # generate a checkins controller with a create action and view\n    $ rails g controller checkins create\n```\n\nNext, we’ll update our trip model with its association and some methods. In your trip model file, add the following:\n\n``` ruby\n    # app/models/trip.rb\n    \n    class Trip \u003c ApplicationRecord\n      before_create :set_uuid\n      has_many :checkins # trip model's association with the checkins model\n      \n      # a method that creates a random uuid for each trip before its created\n      def set_uuid\n        self.uuid = SecureRandom.uuid\n      end\n      \n      # a method that generates a custom JSON output for our trip objects\n      def as_json(options={})\n        super(\n          only: [:id, :name, :uuid],\n          include: { checkins: { only: [:lat, :lng, :trip_id] } }\n        )\n      end\n    end\n```\n\nWe’re now ready to run our database migrations and see our new app. In your terminal, run the following code:\n\n```\n    # run database migrations\n    $ rails db:migrate\n```\n\nAfter running migrations, start the development server on your terminal by running `rails s`. Visit http://localhost:3000 in your browser to see your brand new application:\n\n![youre-on-rails](//images.ctfassets.net/1es3ne0caaid/3sOsgC4S80gOKM8Waqkgui/87c5c9e64375cbb2f8f2516223f4e515/youre-on-rails.png)\n\n## Setting up a Google Maps project\n\nWe’ll be using Google Maps to render our map. This [documentation](https://developers.google.com/maps/documentation/javascript/get-api-key) will guide you through registering a project in the Google API Console and activating the Google Maps JavaScript API. Remember to grab the API key that will be generated for you after registering.\n\n\n## Building the homepage\n\nNow that we have everything we need to build our app, let’s build out our homepage. We’ll set our root page to the trips controller index page and add some resource routes. In your routes file, add the following code:\n\n``` ruby\n    # config/routes.rb\n    \n    Rails.application.routes.draw do\n      resources :trips do\n        resources :checkins, only: :create\n      end\n      root 'trips#index'\n    end\n```\n\nNext, we’ll require Bootstrap and add some styling. Add the following code to your `application.js` file, all before the last line:\n\n``` javascript\n    # app/assets/javascripts/application.js\n    \n    .....\n    //= require jquery3 # add this line\n    //= require popper # add this line\n    //= require bootstrap # add this line\n    //= require_tree .\n```\n\nRename your `application.css` file to `application.scss` and add the following code:\n\n``` scss\n    # app/assets/stylesheets/application.scss\n    \n     @import \"bootstrap\";\n     @import url('https://fonts.googleapis.com/css?family=Dosis');\n     body {\n      font-family: 'Dosis', sans-serif;\n     }\n     #map {\n      width: 100%;\n      height: 42rem;\n    }\n```\n\nIn our app, we’ll be interacting with our users via a form in the header. Let’s create a partial where our header will live. We’ll render this partial on the homepage.\nIn our layouts folder, create a `_header.html.erb` file and add the following markup:\n\n``` html\n    # app/views/layouts/_header.html.erb\n    \n    \u003cheader class=\"bg-warning\"\u003e\n      \u003cnav class=\"navbar navbar-expand-sm navbar-light sticky-top\"\u003e\n      \u003ca class=\"navbar-brand\" href=\"/\"\u003ePusher Location\u003c/a\u003e\n        \u003cbutton class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mobile-menu\" aria-controls=\"mobile-menu\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"\u003e\n          \u003cspan class=\"navbar-toggler-icon\"\u003e\u003c/span\u003e\n        \u003c/button\u003e\n        \u003cdiv class=\"collapse navbar-collapse\" id=\"mobile-menu\"\u003e\n          \u003cform class=\"form-inline name-form\"\u003e\n            \u003cinput class=\"form-control mr-sm-2\" type=\"name\" name=\"name\" required placeholder=\"Enter your name\" aria-label=\"name\"\u003e\n            \u003cbutton class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\"\u003eShare Location\u003c/button\u003e\n          \u003c/form\u003e\n          \u003cdiv class=\"share-url\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/nav\u003e\n    \u003c/header\u003e\n```\n\nNow, we’ll render our header partial and add the HTML markup for our homepage:\n\n``` html\n    # app/views/trips/index.html.erb\n    \n    \u003c%= render 'layouts/header' %\u003e\n    \u003cdiv id=\"map\"\u003e\u003c/div\u003e\n```\n\nWith this, we should have a homepage that looks like this:\n\n![location-sharing-ruby-homepage](//images.ctfassets.net/1es3ne0caaid/KgbRmHD4GaqAEIAI4mKQ/6aa7dc860863b7c6110bab1c79f5e379/location-sharing-ruby-homepage.png)\n\nIf you encounter any error related to `application.html.erb`, in `config/boot.rb`, change the ExecJS runtime from Duktape to Node.\n\n```\n    # config/boot.rb\n    ENV['EXECJS_RUNTIME'] ='Node'\n```\n\n\n## Displaying users location on a map\n\nOnce our users submit a name, we request their location, save it to the database and then render a map showing that location. We’ll check their current location every five seconds and update the map with it.\nTo make use of the Google Maps API, we need to add the Google Maps script to the head of our `application.html.erb` file. We’ll also add the Pusher library script.\n\n``` html\n    # app/views/layouts/application.html.erb\n    \n    ...\n      \u003chead\u003e\n        \u003ctitle\u003ePusherLocations\u003c/title\u003e\n        \u003c%= csrf_meta_tags %\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"\u003e\n        \u003cscript async defer src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY\"\u003e\u003c/script\u003e # add Google Maps script\n        \u003c%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e # add Pusher script\n        \u003c%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %\u003e\n      \u003c/head\u003e\n      ...\n```\n\nEnsure you add your API key to the Google Maps script.\n\nNow, in your `trips.coffee` file, add the following code:\n\n``` coffeescript\n    # app/assets/javascripts/trips.coffee\n    \n    $(document).ready =\u003e\n      tripId = ''\n      startingPoint = {}\n      # function for converting coordinates from strings to numbers\n      makeNum = (arr) -\u003e\n        arr.forEach (arr) -\u003e\n          arr.lat = Number(arr.lat)\n          arr.lng = Number(arr.lng)\n          return\n        arr\n        \n      # function for creating a new trip\n      saveTrip = (positionData) -\u003e\n        token = $('meta[name=\"csrf-token\"]').attr('content')\n        $.ajax\n          url: '/trips'\n          type: 'post'\n          beforeSend: (xhr) -\u003e\n            xhr.setRequestHeader 'X-CSRF-Token', token\n            return\n          data: positionData\n          success: (response) -\u003e\n            tripId = response.id\n            url = \"\"\"#{window.location.protocol}//#{window.location.host}/trips/#{response.uuid}\"\"\"\n            initMap()\n            $('.name-form').addClass('collapse')\n            $('.share-url').append \"\"\"\n              \u003ch6 class=\"m-0 text-center\"\u003eHello \u003cstrong\u003e#{response.name}\u003c/strong\u003e, here's your location sharing link: \u003ca href=\"#{url}\"\u003e#{url}\u003c/a\u003e\u003c/h6\u003e\n            \"\"\"\n            getCurrentLocation()\n            return\n        return\n        \n      # function for getting the user's location at the begining of the trip\n      getLocation = (name) -\u003e\n        if navigator.geolocation\n          navigator.geolocation.getCurrentPosition (position) -\u003e\n            coord = position.coords\n            timestamp = position.timestamp\n            data =\n              lat: coord.latitude,\n              lng: coord.longitude,\n              name: name\n            startingPoint = data\n            saveTrip data\n        return\n        \n      # function for rendering the map\n      initMap = -\u003e\n        center = \n          lat: startingPoint.lat\n          lng: startingPoint.lng\n        map = new (google.maps.Map)(document.getElementById('map'),\n          zoom: 18\n          center: center)\n        marker = new (google.maps.Marker)(\n          position: center\n          map: map)\n        return\n      \n      # function for updating the map with the user's current location\n      updateMap = (checkin) -\u003e\n        lastCheckin = checkin[checkin.length - 1]\n        center = \n          lat: startingPoint.lat\n          lng: startingPoint.lng\n        map = new (google.maps.Map)(document.getElementById('map'),\n          zoom: 18\n          center: center)\n        marker = new (google.maps.Marker)(\n          position: lastCheckin\n          map: map)\n        flightPath = new (google.maps.Polyline)(\n          path: checkin\n          strokeColor: '#FF0000'\n          strokeOpacity: 1.0\n          strokeWeight: 2)\n        flightPath.setMap map\n        setTimeout(getCurrentLocation, 5000)\n        return\n        \n      # function for updating the database with the user's current location\n      updateCurrentLocation = (tripData, id) -\u003e\n        token = $('meta[name=\"csrf-token\"]').attr('content')\n        $.ajax\n          url: \"/trips/#{id}/checkins\"\n          type: 'post'\n          beforeSend: (xhr) -\u003e\n            xhr.setRequestHeader 'X-CSRF-Token', token\n            return\n          data: tripData\n          success: (response) -\u003e\n            return\n        return\n        \n      # function for finding the user's current location\n      getCurrentLocation = -\u003e\n        navigator.geolocation.getCurrentPosition (position) -\u003e\n          data =\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          updateCurrentLocation(data, tripId)\n        return\n        \n      # run this block of code if we're on the homepage\n      unless location.pathname.startsWith('/trips')\n        # when a user submits their name, get their name and call the function to get their location\n        $('.name-form').on 'submit', (event) -\u003e\n          event.preventDefault()\n          formData = $(this).serialize()\n          name = formData.split('=')[1]\n          data = getLocation(name)\n          return\n```\n\nIn the code above, we get our user’s name and call the `getLocation` function. The `getLocation` function gets the user’s location and saves it to the database.\n\nIf the user’s location is saved successfully, we render the link for sharing their location on the header, render the map on the page by calling the `initMap` function and then call the `getCurrentLocation` function to monitor their current location and update the map.\n\nAlso, add the following code to your trips and checkins controllers respectively:\n\n``` ruby\n    # app/controllers/trips_controller.rb\n    \n    class TripsController \u003c ApplicationController\n      def index\n      end\n    \n      # function for creating a new trip\n      def create\n        @trip = Trip.new(trip_params)\n        @trip.checkins.build(lat: params[:lat], lng: params[:lng])\n        render json: @trip.as_json if @trip.save\n      end\n      \n      # function for showing a trip\n      def show\n        @trip = Trip.find_by(uuid: params[:id])\n      end\n    \n      private\n        def trip_params\n          params.permit(:name)\n        end\n    end\n```\n\n``` ruby\n    # app/controllers/checkins_controller.rb\n    \n    class CheckinsController \u003c ApplicationController\n      def create\n        @checkin = Checkin.new(checkin_params)\n        render json: @checkin.as_json(only: [:lat, :lng, :trip_id]) if @checkin.save\n      end\n      \n      private\n        def checkin_params\n          params.permit(:trip_id, :lat, :lng)\n        end\n    end\n```\n\nIf you have followed the tutorial up to this point, if you refresh the homepage, you should be able to enter your name and see your location in a map on the page. Remember to allow the page to access your location.\n\n\n## Displaying the map via the share link\n\nWhen we share the link with other users, we want them to see the user’s current location on a map. The share link contains the UUID for that current trip. When the page loads, we attach the longitude and latitude data to a hidden field and use it to render the user’s location on a page.\nAdd the following code to the `show.html.erb` file:\n\n``` html\n    # app/views/trips/show.html.erb\n    \n    \u003cdiv id=\"map\"\u003e\u003c/div\u003e\n    \u003c%= hidden_field_tag 'lat', @trip.checkins[0][:lat]  %\u003e # hidden field holding the latitude information\n    \u003c%= hidden_field_tag 'lng', @trip.checkins[0][:lng]  %\u003e# hidden field holding the longitude information\n```\n\nAdd the following code to the `trips.coffee` file:\n\n``` coffeescript\n    # app/assets/javascripts/trips.coffee\n    \n      ......\n      # run this code if we're on the trips page\n      if location.pathname.startsWith('/trips')\n        showLat = $('#lat').val() # get the user's latitude from the hidden field\n        showLng = $('#lng').val() # get the user's longitude from the hidden field\n        data =\n          lat: Number(showLat),\n          lng: Number(showLng)\n        startingPoint = data\n        initMap()\n```\n\nIn the code above, when we’re on the trips page, we get the longitude and latitude from the hidden input field. We then call the `initMap` function to render the map on the page.\n\nWith this, we should be able to view the user’s location via the share link.\n\n\n## Realtime location sharing with Pusher\n\nNow that other users can view user’s location on the map, it’s time for us to update the user’s location in realtime. To achieve this, every time a user’s current location is updated, we publish it and on the frontend of our app, we update the map with the new coordinates.\n\nFirst, let’s initialize our Pusher client. In the `config/initializers` folder, create a `pusher.rb` file and add the following code:\n\n``` ruby\n    # config/initializers/pusher.rb\n    \n    require 'pusher'\n    Pusher.app_id = ENV[\"PUSHER_APP_ID\"]\n    Pusher.key = ENV[\"PUSHER_KEY\"]\n    Pusher.secret = ENV[\"PUSHER_SECRET\"]\n    Pusher.cluster = ENV[\"PUSHER_CLUSTER\"]\n    Pusher.logger = Rails.logger\n    Pusher.encrypted = true\n```\n\nNext, run `figaro install` in your terminal. It will generate an `application.yml` file. In the `application.yml` file add your Pusher keys:\n\n``` yaml\n    # config/application.yml\n    \n    PUSHER_APP_ID: 'xxxxxx'\n    PUSHER_KEY: 'xxxxxxxxxxxxxxxxx'\n    PUSHER_SECRET: 'xxxxxxxxxxxxxx'\n    PUSHER_CLUSTER: 'xx'\n```\n\nWith our Pusher client set up, in our checkin model, we’ll add an after create callback to publish a user’s coordinates after they’re saved.\nAdd the following code in the checkin model:\n\n``` ruby\n    # app/models/checkin.rb\n    \n    class Checkin \u003c ApplicationRecord\n      belongs_to :trip\n      after_create :notify_pusher\n      \n      # method to publish a user's current location\n      def notify_pusher\n        Pusher.trigger('location', 'new', self.trip.as_json)\n      end\n    end\n```\n\n## Updating the UI\n\nNow that our server is publishing coordinate updates, we’ll grab them on the client side and update the map with it.\nLets rename our `trips.coffee` file to `trips.coffee.erb` and replace the code there with the following:\n\n``` coffeescript\n    # app/assets/javascripts/trips.coffee.erb\n    \n    $(document).ready =\u003e\n      tripId = ''\n      startingPoint = {}\n      isOwner = false\n      map = null\n    \n      \u003c%# function for converting coordinates to numbers %\u003e\n      makeNum = (arr) -\u003e\n        arr.forEach (arr) -\u003e\n          arr.lat = Number(arr.lat)\n          arr.lng = Number(arr.lng)\n          return\n        arr\n      \n      \u003c%# function for creating a new trip %\u003e\n      saveTrip = (positionData) -\u003e\n        isOwner = true\n        token = $('meta[name=\"csrf-token\"]').attr('content')\n        $.ajax\n          url: '/trips'\n          type: 'post'\n          beforeSend: (xhr) -\u003e\n            xhr.setRequestHeader 'X-CSRF-Token', token\n            return\n          data: positionData\n          success: (response) -\u003e\n            tripId = response.id\n            url = \"\"\"#{window.location.protocol}//#{window.location.host}/trips/#{response.uuid}\"\"\"\n            initMap()\n            $('.name-form').addClass('collapse')\n            $('.share-url').append \"\"\"\n              \u003ch6 class=\"m-0 text-center\"\u003eHello \u003cstrong\u003e#{response.name}\u003c/strong\u003e, here's your location sharing link: \u003ca href=\"#{url}\"\u003e#{url}\u003c/a\u003e\u003c/h6\u003e\n            \"\"\"\n            getCurrentLocation()\n            return\n        return\n      \n      \u003c%# function for getting the user's location at the begining of the trip %\u003e\n      getLocation = (name) -\u003e\n        if navigator.geolocation\n          navigator.geolocation.getCurrentPosition (position) -\u003e\n            coord = position.coords\n            timestamp = position.timestamp\n            data =\n              lat: coord.latitude,\n              lng: coord.longitude,\n              name: name\n            startingPoint = data\n            saveTrip data\n        return\n      \n      \u003c%# function for rendering the map %\u003e\n      initMap = -\u003e\n        center = \n          lat: startingPoint.lat\n          lng: startingPoint.lng\n        map = new (google.maps.Map)(document.getElementById('map'),\n          zoom: 18\n          center: center)\n        marker = new (google.maps.Marker)(\n          position: center\n          map: map)\n        return\n      \n      \u003c%# function for updating the map with the user's current location %\u003e\n      updateMap = (checkin) -\u003e\n        console.log checkin\n        lastCheckin = checkin[checkin.length - 1]\n        center = \n          lat: startingPoint.lat\n          lng: startingPoint.lng\n        map = new (google.maps.Map)(document.getElementById('map'),\n          zoom: 18\n          center: center)\n        marker = new (google.maps.Marker)(\n          position: lastCheckin\n          map: map)\n        flightPath = new (google.maps.Polyline)(\n          path: checkin\n          strokeColor: '#FF0000'\n          strokeOpacity: 1.0\n          strokeWeight: 2)\n        flightPath.setMap map\n        if isOwner\n          setTimeout(getCurrentLocation, 5000)\n        return\n      \n      \u003c%# function for updating the database with the user's current location %\u003e\n      updateCurrentLocation = (tripData, id) -\u003e\n        token = $('meta[name=\"csrf-token\"]').attr('content')\n        $.ajax\n          url: \"/trips/#{id}/checkins\"\n          type: 'post'\n          beforeSend: (xhr) -\u003e\n            xhr.setRequestHeader 'X-CSRF-Token', token\n            return\n          data: tripData\n          success: (response) -\u003e\n            return\n        return\n      \n      \u003c%# function for finding the user's current location %\u003e\n      getCurrentLocation = -\u003e\n        navigator.geolocation.getCurrentPosition (position) -\u003e\n          data =\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          updateCurrentLocation(data, tripId)\n        return\n    \n      \u003c%# run this block of code if we're on the homepage %\u003e\n      unless location.pathname.startsWith('/trips')\n        \u003c%# when a user submits their name, get their name and call the function to get their location %\u003e\n        $('.name-form').on 'submit', (event) -\u003e\n          event.preventDefault()\n          formData = $(this).serialize()\n          name = formData.split('=')[1]\n          data = getLocation(name)\n          return\n      \n      \u003c%# run this code if we're on the trips page %\u003e\n      if location.pathname.startsWith('/trips')\n        showLat = $('#lat').val()\n        showLng = $('#lng').val()\n        data =\n          lat: Number(showLat),\n          lng: Number(showLng)\n        startingPoint = data\n        initMap()\n        \n      \u003c%# subscribe Pusher client %\u003e\n      pusher = new Pusher('\u003c%= ENV[\"PUSHER_KEY\"] %\u003e',\n        cluster: '\u003c%= ENV[\"PUSHER_CLUSTER\"] %\u003e'\n        encrypted: true)\n      channel = pusher.subscribe('location')\n      channel.bind 'new', (data) -\u003e\n        updateMap makeNum(data.checkins)\n        return\n      return\n```\n\nIn the code above, we subscribed our Pusher client to the `location` channel and listened for the `new` event. Once those events are emitted, we get the coordinates and update the map with it.\n\n## Bringing it all together\n\nRestart the development server if it is currently running. Visit http://localhost:3000 in two separate browser tabs to test the realtime location sharing app.\n\nIn order to see the marker move realtime(without going for a walk), you’ll have to send events to the `location` channel. The easiest way to do this is by using the event creator on the [Pusher Debug Console](https://dashboard.pusher.com/apps/524733/console/realtime_messages). Here is a sample data format that can be used to trigger an update:\n\n``` json\n    {\n      \"id\": \"1\",\n        \"name\": \"John\",\n          \"checkins\": [\n            { \"lat\": \"6.5542937\", \"lng\": \"3.3665464999999997\" },\n            { \"lat\": \"6.5545393\", \"lng\": \"3.3667686\" },\n            { \"lat\": \"6.5550349\", \"lng\": \"3.3667605\" },\n            { \"lat\": \"6.5554759\", \"lng\": \"3.3667485\" }\n          ]\n    }\n```\n\nHere is an image of how the event would look like on the Pusher event creator:\n\n![location-sharing-ruby-pusher-events-dashboard](//images.ctfassets.net/1es3ne0caaid/4fAMhKbPuoo6KEOGYISY66/1154a9e7a0a4f7f77727311e8bd1bf42/location-sharing-ruby-pusher-events-dashboard.png)\n\n## Conclusion\n\nIn this post, we have successfully created a realtime location sharing app. I hope you found this tutorial helpful and would love to apply the knowledge gained here to easily set up your own application using Pusher.\n\nYou can find the source code for the demo app on [GitHub](https://github.com/9jaswag/pusher-locations).","metaTitle":"Build a location sharing app with Ruby and Google Maps","metaDescription":"This tutorial uses Ruby on Rails and the Google Maps API to create a location sharing app. Users are able to pinpoint their location and generate a link that allows others to track their movement."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3mklkPP5gcQgqo8YOcu4ow","type":"Entry","createdAt":"2018-05-24T08:07:42.630Z","updatedAt":"2018-05-24T08:07:42.630Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a geofencing web app using Nest.js and the Google Maps API","url":"geofencing-nestjs-googlemaps","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/yemiwebby/nest-pusher-geofencing","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SgQuYVb0kSMIgEmwqImOA","type":"Entry","createdAt":"2018-02-12T14:49:17.136Z","updatedAt":"2018-04-19T08:52:46.508Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Nest.js","url":"nest-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-05-23","description":"Build a web app using Nest.js and the Google Maps API. The app allows you to select a user and center on their location, showing the positioning of other users around them.","prerequisite":"You will need Node and npm installed on your machine. A basic knowledge of Node.js and TypeScript will be helpful.","content":"## Introduction\n\nThis tutorial will walk you through the process of implementing a basic realtime location-aware application with geofencing updates. Once we are done, you will have gathered enough knowledge to try out more creative ways on how to make use of virtual boundaries.\n\n Geofencing as a technique, is a virtual perimeter (also referred to as geofences) around a physical location. This can allow you to provide useful experiences or carry out specific actions when users are within or outside the specified vicinity.\n \n To keep our application simple, we will have a list of users with random locations. In a real-world application, you would need to get the current location of a user. Fortunately a tool like [Geolocation API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation) is available for use on most browsers. \n \n A quick look at what we will be building in the tutorial: \n\n![nest-geofencing-preview](//images.ctfassets.net/1es3ne0caaid/3lcPbXJNdCG2OKaQQO8ygi/bca17aefb2d1b9f83fd66a6d5a6ce6f5/nest-geofencing-preview.png)\n\n In this application, we will randomly display a few people from our users list. Once a user is selected, we will set the location of the user as the center of the map and then show the locations of other users with markers. \n\n## Prerequisites\n\nA basic understanding of TypeScript and Node.js will help you get the best out of this tutorial. I assume that you already have Node and npm installed, if otherwise quickly check [Node.js](https://nodejs.org/en/) and [npm](https://www.npmjs.com/) for further instructions and installation steps. \n\nHere is a quick overview of the core technologies that we will be using in this post. \n\n- [Nest.js](https://nestjs.com/): a progressive framework for building efficient and scalable server-side applications; built to take the advantage of modern JavaScript but still preserves compatibility with pure JavaScript. \n\n- [Pusher](https://pusher.com/): a Node.js client to interact with the Pusher REST API\n\n- [GoogleMaps API](https://developers.google.com/maps/documentation/): GoogleMaps JavaScript API provides utilities that make it possible to add interactive and customizable maps to web apps.\n\n- [Axios](https://www.npmjs.com/package/axios): a promise-based HTTP client that works both in the browser and Node.js environment.\n\n- [Vue.js](https://vuejs.org/): Vue is a progressive JavaScript frontend framework for building web applications.\n\n\n## Setting up the application\n\nThe simplest way to set up a Nest.js application is to install the starter project on [GitHub](https://github.com/nestjs/typescript-starter) using Git. To do this, let’s run a command that will clone the starter repository into a new project folder named `nest-geofencing` on your machine. Open up your terminal or command prompt and run the command below:\n\n```\n    $ git clone https://github.com/nestjs/typescript-starter.git nest-geofencing\n```\nGo ahead and change directory into the newly created folder and install all the dependencies for the project.\n\n```\n    // change directory\n    cd nest-geofencing\n    \n    // install dependencies\n    npm install\n```\n\n## Running application\n\nStart the application with:\n\n```\n    npm start\n```\n\nThe command above will start the application on the default port used by Nest.js. Open your browser and navigate to http://localhost:3000. You should see a page with a welcome message.\n\n![nest-hello-world](//images.ctfassets.net/1es3ne0caaid/45ET2cOwzYa8MUO6mIwq2Q/c9511e3c4c76117982d0bfadfd43c652/nest-hello-world.png)\n\n## Installing server dependencies\n\nRun the command below to install the server dependencies required for this project.\n\n```\n    npm install ejs body-parser pusher\n```\n\n- **ejs**: this is a simple templating language for generating HTML markup with plain JavaScript.\n\n\n- **Body-parser**: a middleware used for extracting the entire body portion of an incoming request stream and exposing it on `req.body`.\n\n\n- **Pusher**: a Node.js client to interact with the Pusher REST API\n\n\n## Google Maps application \n\nTo use the Maps JavaScript API, you must register your app project on the Google API Console and get a Google API key which you can add to your app. Follow this [quick guide to register your Maps app](https://developers.google.com/maps/documentation/javascript/get-api-key) and get your API credentials.\n\n## Setting up a Pusher application\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). \n\n![nest-pusher-signup](//images.ctfassets.net/1es3ne0caaid/43DKutJFOw86I2cCeMEGMG/246afa094f08c930af91a38c7b1a65fb/nest-phone-pusher-1.png)   \n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![nest-pusher-new-app](//images.ctfassets.net/1es3ne0caaid/6m8JvB3xxC444SmaIQ824i/5e5ea5d799a6717ca6c74324ac5a6576/nest-phone-pusher-2.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with, for a better setup experience:\n\n![nest-pusher-app-config](//images.ctfassets.net/1es3ne0caaid/4UPXLqxBWMc0mqUuMo462A/1f9779e509f53259bbd32cf0d244ef52/nest-phone-pusher-3.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![nest-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/1TPXcBKK9ua4Q2OuqSI0IS/5dd742674348e92defd7ecc4aa320755/nest-phone-pusher-4.png)\n\n## Configure the entry point of the application\n\nNest.js uses the Express library and therefore, favors the popular MVC pattern.\n\nTo set this up, open up the `main.ts` file and update it with the content below:\n\n``` typescript\n    // ./src/main.ts\n    \n    import { NestFactory } from '@nestjs/core';\n    import { AppModule } from './app.module';\n    \n    import * as bodyParser from 'body-parser';\n    import * as express from 'express';\n    import * as path from 'path';\n    \n    async function bootstrap() {\n      const app = await NestFactory.create(AppModule);\n      app.use(express.static(path.join(__dirname, 'public')));\n       app.set('views', __dirname + '/views');\n       // set ejs as the view engine\n       app.set('view engine', 'ejs');\n      await app.listen(3000);\n    }\n    bootstrap();\n```\n\nThis is the entry point of the application and necessary for bootstrapping Nest.js apps. I have included the Express module, path and set up ejs as the view engine for the application.\n\n## Building the homepage\n\nAs configured within `main.ts` file, the `views` folder will hold all the templates for this application. Now let’s go ahead and create it within the `src` folder. Once you are done, create a new file named `index.ejs` right inside the newly created `views` folder and update the content with:\n\n``` html\n    // ./src/views/index.ejs\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"/style.css\"\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.13/vue.js\"\u003e\u003c/script\u003e\n        \u003ctitle\u003eGeofencing Nest.js Demo\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \n        \u003cdiv id=\"app\"\u003e\n            \n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-3\"\u003e\n                    \u003cdiv class=\"user-wrapper\"\u003e\n                        \u003ch3\u003e \u003cb\u003eSelect a user\u003c/b\u003e \u003c/h3\u003e\n                        \u003cp\u003eGet the current location of a user and others (2km away)\u003c/p\u003e\n                        \u003cdiv v-for=\"user in users\" style=\"margin: 10px;\"\u003e\n                            \u003cbutton class=\"btn btn-default\" v-on:click=\"getUserLocation(user.position)\"\u003e{{ user.name}}\u003c/button\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"load-more\"\u003e\n                        \u003cbutton class=\"btn btn-success\" v-on:click=\"loadMoreUsers\"\u003e Load more users \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n                \u003cdiv class=\"col-md-9\" style=\"background: grey\"\u003e\n                    \u003cdiv id=\"map\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n            \n        \u003c/div\u003e\n        \n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.2/axios.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_GOOGLE_MAP_KEY\u0026libraries=geometry\"\u003e\n        \u003c/script\u003e\n        \u003cscript src=\"/main.js\"\u003e\u003c/script\u003e\n        \n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nHere, we are simply building a layout for the geofencing application. \n\nFirst, we included a link to the Bootstrap CDN file to add some default styling and layout to our application. We also added a custom stylesheet for further styling. We will create this stylesheet later in this tutorial. Also included in a `\u003cscript\u003e` tag just before the page title is a CDN file for [Vue.js](https://vuejs.org/). This is to ensure that Vue.js is loaded immediately the `index.ejs` file is rendered.\n\nFurthermore, we included a button with the caption **Load more users.** Once this button is clicked we will call a method named `loadMoreUsers()` to fetch more random users. This method will be created later in the tutorial.\n\nWe included a CDN file each for `Axios` and `Pusher`. To load the Maps JavaScript API, we included a `script` tag and added a URL which links to the location of a JavaScript file that loads all of the symbols and definitions required as the `src`. \n\n\n\u003e 💡 Note: ensure you replace the `YOUR_GOOGLE_MAP_KEY` string with your actual GoogleMaps API key\n\nFinally, we then proceeded to add a custom script file named `main.js`. To set up this file, go ahead and create a `public`  folder within the `src` folder in the application and create the `main.js` file within it.\n\n\n## Styling\n\nTo set up this stylesheet, locate the `public` folder and create a new file named `style.css` within it. Next, open the file and paste the code below:\n\n``` css\n    // ./src/public/style.css\n    \n    html, body {\n        background-color: #f0f2fa;\n        font-family: \"PT Sans\", \"Helvetica Neue\", \"Helvetica\", \"Roboto\", \"Arial\", sans-serif;\n        color: #555f77;\n        -webkit-font-smoothing: antialiased;\n      }\n      #map {\n        height: 600px;\n        width: 100%\n      }\n      .user-wrapper {\n        padding: 20px;\n        margin: 20px;\n      }\n      .load-more {\n        padding: 20px;\n        margin: 20px;\n      }\n```\n\n## Building the home route\n\nNest uses a controller metadata `@Controller` to map routes to a specific controller. The starter project already contains a controller by default. We will make use of this in order to render the homepage for this app. Open `./src/app.controller.ts` and edit as shown below:\n\n``` typescript\n    // ./src/app.controller.ts\n    \n    import { Get, Controller, Res } from '@nestjs/common';\n    @Controller()\n    export class AppController {\n      @Get()\n      root(@Res() res) {\n        res.render('index');\n      }\n    }\n```\n\nThis controller will ensure that Nest.js maps every `/` route to the `index.ejs` file.\n\n## Creating a Vue instance\n\nEarlier, we created `main.js` file within the `public` folder and included it on our homepage. We will create Vue instance within this file and bind it to a `div` element with an id of `#app`. We will also declare an initial value for `users` as an empty array inside the `data` options:\n\n``` javascript\n    // ./src/public/main.js\n    \n    new Vue({\n        el: '#app',\n        data: {\n            users: []\n        },\n        ...\n    }) \n```\n\nThis will get Vue registered to manipulate the DOM in our application.\n\n## Create the users controller\n\nTo further organize items, we will create a new folder named `users` in the `src` folder and create a new file called `users.controller.ts` within it. Paste following code in the newly created file: \n\n``` typescript\n    // ./src/users/users.controller.ts\n    \n    import { Get, Controller, Res, HttpStatus, Body, Post } from '@nestjs/common';\n    import { UsersService } from 'users/users.service';\n    \n    @Controller('users')\n    export class UsersController {\n        constructor( private userService: UsersService) {}\n        \n        @Get()\n        getUser(@Res() res) {\n          let users =  this.userService.getAllUsers();\n          res.send(users);\n        }\n        @Post()\n        getUsersLocation(@Res() res, @Body() user) {\n          this.userService.postLocation(user);\n          res.status(HttpStatus.OK).send(\"User's location fetched successfully\");\n        }\n    } \n```\n\nThis controller contains two methods:\n\n- `getUser()`: this method will fetch the list of users and send it to the view.\n\n- `getUsersLocation()`: this method receives the user object as a form parameter and returns a successful HttpStatus with a success message.\n\nAs shown above, we imported `UsersService` and injected it into the controller through the constructor. As recommended by Nest, a controller should handle only HTTP requests and abstract any complex logic to a service. We’ll create this service in the next section.\n\n## Set up the users service\n\nWithin the `UsersController`, we imported the `UsersService` and used it to fetch all users and also post the location of the selected user. Let’s create this service. Go to the `users` folder and create a new file named `users.service.ts` within it and then paste the code below into the newly created file:\n\n``` typescript\n    // ./src/users/users.service.ts\n    \n    import { Component } from '@nestjs/common';\n    const people = require('./users');\n    \n    @Component()\n    export class UsersService {    \n        \n        getAllUsers(){        \n            return people.map( (person, index) =\u003e ({\n                name: person.name,\n                position: person.position,\n            }));\n        }\n       \n        intializePusher() {\n            const Pusher = require('pusher');\n            const pusher = new Pusher({\n                appId: 'YOUR_APP_ID',\n                key: 'YOUR_API_KEY',\n                secret: 'YOUR_SECRET_KEY',\n                cluster: 'CLUSTER',\n                encrypted: true\n            });\n            \n            return pusher;\n        }\n        \n        postLocation(user) {\n            const Pusher = require('pusher');\n            const {lat, lng} = user.position\n            \n            people.forEach( (person, index) =\u003e {\n                if (person.position.lat === user.position.lat) {\n                    people[index] = { ...person, position: { lat, lng } };\n                    return this.intializePusher().trigger('map-geofencing', 'location', {person: people[index], people})\n                }\n            })\n        }\n    }\n```\n\nLet’s understand what is happening in this file:\n\nFirst, we imported the list of users as `people` from a file named `users.js`. This file holds the list of fake users with a specified location for our application. You can download this list [here](https://github.com/yemiwebby/nest-geofencing/blob/master/src/users/users.js) on GitHub. Once you are done, locate the `users` folder and save this file within it as `users.js`.\n\nNext, we created a `getAllUsers()` method that returns the name and specified positions of users by using the JavaScript `map()` method. \n\nWe also proceeded to initialize Pusher with the credentials from the dashboard. Don’t forget to replace `YOUR_APP_ID`, `YOUR_API_KEY`, `YOUR_SECRET_KEY` and `CLUSTER` with the right credentials obtained from your dashboard.\n\nThe `postLocation()` method accepts the user object posted from the frontend of the application as a parameter. In addition, it was also used to trigger an event named `location` with the selected user and people as a payload on a `map-geofencing` channel.\n\n## Register the component and the controller\n\nAt the moment, our application doesn’t recognize the newly created controller and service. Let’s change this by editing our module file `app.module.ts`; putting the controller into the `controller` array and service into `components` array of the `@Module()` decorator respectively.\n\n``` typescript\n    // ./src/app.module.ts\n    \n    import { Module } from '@nestjs/common';\n    import { AppController } from './app.controller';\n    import { UsersService } from 'users/users.service';\n    import { UsersController } from 'users/users.controller';\n    @Module({\n      imports: [],\n      controllers: [AppController, UsersController],\n      providers: [UsersService],\n    })\n    export class AppModule {}\n```\n\n## Displaying random users\n\nAs mentioned earlier, we will be displaying users from the mock data in our application. Open `./src/public/main.js` file and update it with the code below:\n\n``` javascript\n    // ./src/public/main.js\n    \n    new Vue({\n        el: '#app',\n        data: {\n            users: [],\n        },\n        mounted() {\n            this.getUser();\n        },\n        methods: {\n            getUser() {\n                axios.get('/users').then(response =\u003e {\n                    this.users = this.getRandomUsers(response.data, 6)\n                });\n                \n            },\n            getRandomUsers(people, number) {\n                const selected = [];\n                for ( var i = 0; i \u003c number; i++) {\n                    const index = Math.floor(Math.random() * people.length);\n                    if (selected.includes(index))  continue; \n                    selected.push(index);\n                }\n                const selectedUsers = selected.map(index =\u003e {\n                    const users = { name, position } = people[index];\n                    return users;                \n                });\n                return selectedUsers;\n            }\n        }\n    })\n```\n\nHere, we created a method named `getUser()` with the purpose of fetching all users from the backend of our application. Immediately after this, we then proceeded to create a new method called `getRandomUsers()`, for getting random users from the response. This method takes in two arguments which are the total number of users returned and the maximum random number of users we wish to display on the homepage of our application.\n\nRestart the development server if it is currently running. Check your page on [http://localhost:3000.](http://localhost:3000.) You should see:\n\n![nest-geofencing-stage-1](//images.ctfassets.net/1es3ne0caaid/4S8WOClduUauu4uEGuu88A/89575617fcbe16c1d72ce2ec2509c05f/nest-geofencing-stage-1.png)\n\nThis is what the page will look like at the moment. On page mount, we displayed the list of random users and an empty map. Let’s add functionality to display map.\n\n## Getting the location of a user and initializing map\n\nNext, we will display the location of a selected user on the GoogleMap using the coordinate specified for each of the users in `./src/users/users.js` file. Go ahead and open `main.js` file and update it with:\n\n``` javascript\n    // ./src/public/main.js\n    \n    const USER_MARKER = 'http://res.cloudinary.com/yemiwebby-com-ng/image/upload/v1526555652/user_my7yzc.png';\n    const OFFLINE_MARKER = 'http://res.cloudinary.com/yemiwebby-com-ng/image/upload/v1526555651/offline_elrlvi.png';\n    const ONLINE_MARKER = 'http://res.cloudinary.com/yemiwebby-com-ng/image/upload/v1526555651/online_bpf5ch.png'\n    const RADIUS = 2000;\n    new Vue({\n        el: '#app',\n        data: {\n            users: [],\n        },\n        created() {\n            let pusher = new Pusher('YOUR_API_KEY', {\n                cluster: 'CLUSTER',\n                encrypted: true\n            });\n            \n            const channel = pusher.subscribe('map-geofencing');\n            channel.bind('location', data =\u003e {\n                this.initializeMap(data.person.position, data.people);\n            });\n        },\n        mounted() {\n            this.getUser();\n        },\n        methods: {\n            getUser() {\n                ...\n            },\n            getRandomUsers(people, number) {\n               ...\n            },\n            getUserLocation(position) {\n                const user = { position }\n                axios.post('/users', user).then(response =\u003e {\n                    console.log(response);\n                }) \n            },\n            initializeMap(position, people) {\n                const referencePoint = {lat:position.lat, lng:position.lng};\n                this.map = new google.maps.Map(document.getElementById('map'), {\n                    center: referencePoint,\n                    zoom: 13\n                }) \n                for ( var i = 0; i \u003c people.length; i++) {\n                    if (this.withinRegion(referencePoint, people[i], RADIUS)){\n                       \n                        this.addMarker(people[i], ONLINE_MARKER);\n                    } else {\n                       this.addMarker(people[i], OFFLINE_MARKER);\n                    }\n                }\n                this.addCircle(position);\n            },\n            addMarker(props, marker) {\n                this.marker = new google.maps.Marker({\n                    position: props.position,\n                    map: this.map,\n                    animation: google.maps.Animation.DROP,\n                    icon: marker\n                })\n            },\n            addCircle(position) {\n                this.circle = new google.maps.Circle({\n                    map: this.map,\n                    center: new google.maps.LatLng(position.lat, position.lng),\n                    radius: 2000,\n                    strokeColor: '#00ff00',\n                    fillColor: \"#484040bf\",\n                });\n            },\n            withinRegion(position, user, radius) {\n                const to = new google.maps.LatLng(user.position.lat, user.position.lng);\n                const from = new google.maps.LatLng(position.lat, position.lng);\n                const distance = google.maps.geometry.spherical.computeDistanceBetween(from, to);\n                return distance \u003c= radius;\n            }\n        }\n    })\n```\n\nWe added constants for `USER_MARKER`, `OFFLINE_MARKER`, `ONLINE_MARKER`, these markers will be used to indicate the location of a user on the map. The position of a user within a 2km radius from the center of the map will be indicated with `ONLINE_MARKER`  while others will be indicated with `OFFLINE_MARKER`. Also included is a constant for `RADIUS`, which represents the distance from the center of the map. \n\nNext, we established a connection to Pusher Channels using the `Key` and `cluster` obtained from our dashboard. We then proceeded to subscribe to the `map-geofencing` channel we created earlier and listened for an event `location`.  We then passed the payload from the `map-geofencing` channel to `initializeMap()` method. This is the method responsible for initializing the map. It accepts the `position`  of the selected user and the list of other users named  `people` as an argument.\n\nOnce any of the random users is selected, we used the method `getUserLocation()` to make an HTTP POST request to the `/users` endpoint, passing in a `user` object which contains the location of the user. \n\nIn the `initializeMap()` method, we created a variable `referencePoint`, which represents the location of the selected user and set it as the center of the map. We then went ahead to instantiate GoogleMaps and attach it to a `\u003cdiv\u003e` HTML element with an id of `map`. This is where our map indicating the locations of users will be mounted. Next, we looped through the list of other users and added markers based on the condition used to check if they are within the region 2km away from the location of the selected user at the center of the map. \n\nFinally, we also created three different methods, which are:\n\n1.  `addMarker()`: this method was used to add markers to the map based on the location of a user.\n\n2. `addCirlce()`: used to add a circle indicating a 2km radius from the center of the map.\n\n3. `withinRegion()`: created to check if a user is within the region from the center of the map.\n\n## Load more users\n\nLastly, to load more random users, we will create the `loadMoreUsers()` method: \n\n``` javascript\n    // ./src/public/main.js\n    \n    ...\n    new Vue({\n        el: '#app',\n        data: {\n            users: [],\n        },\n        created() {\n           ...\n        },\n        mounted() {\n            this.getUser();\n        },\n        methods: {\n            // other methods\n            ...\n            // load more users\n            loadMoreUsers() {\n                this.getUser();\n            }\n        }\n    })\n```\n\nThis method will call on the `getUser()` method and fetch random users.\n\n## Final result\n\nRestart the development server if it is currently running. Go ahead and navigate to  `[http://localhost:3000](http://localhost:3000.)` in your browser to test the application.\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/zUFYnKL8r7w?rel=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen\u003e\u003c/iframe\u003e\n\n## Conclusion\n\nWe have successfully built a basic realtime application with geofencing updates. We used [GoogleMaps API](https://developers.google.com/maps/documentation/) for geolocation and [Pusher](https://pusher.com/) for the realtime functionality.\n\nWith access to the right technology such as the ones used in this tutorial, there is no limit to what you can build. I hope you found this tutorial helpful. Feel free to download the source code [here](https://github.com/yemiwebby/nest-pusher-geofencing) on GitHub. \n\n","metaTitle":"Build a geofencing web app using Nest.js and GoogleMaps","metaDescription":"This tutorial shows you how to create a web app featuring Google Maps and geofencing. Use Nest.js and the Google Maps API to allow app users to select a user and center on their location, showing the positioning of other users around them."}}],"defaultValue":"Location","queryType":"tag","pages":3,"route":"/tutorials","query":{"tag":"Location","page":"1"}}},"page":"/tutorials","query":{"tag":"Location","page":"1"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Location&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:42:27 GMT -->
</html>