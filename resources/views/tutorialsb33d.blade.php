<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Live%20Table by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:45:52 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">15</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; Live Table</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorialsca24.html?tag=Live%20Table" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsf50a.html?product=Beams&amp;tag=Live%20Table" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; Live Table"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/spotify-history-react-node.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">View your live Spotify history with React and Node</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Build a web app using Node and React to view your Spotify history. The app allows users to link up to their Spotify acco...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/web-traffic-monitor-python.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a web traffic monitor with Python</h3><p class="css-k12xad e5jrto45">Build a dashboard to monitor web traffic, along with a demo site to track. Use Flask for the backend, and vanilla JavaSc...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-table-ruby-rails.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Ruby</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime table with Ruby on Rails and PostgreSQL</h3><p class="css-k12xad e5jrto45">Build a Ruby on Rails application that monitors a PostegreSQL database and automatically updates in response to changes....</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-data-table-react-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a realtime data table with React and Go</h3><p class="css-k12xad e5jrto45">Build a simple app with Go and React. The app displays live race results.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-table-angular.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime table with Angular</h3><p class="css-k12xad e5jrto45">Create an Angular web app featuring a table interface that updates in realtime to reflect changes in the database.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-mysql-java.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Java<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting data in realtime from MySQL with Java</h3><p class="css-k12xad e5jrto45">Use MySQL replication logging to publish database changes to a React-based web dashboard.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-table-datatables-nestjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Collaboration<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime table with DataTables and Nest.js</h3><p class="css-k12xad e5jrto45">Use Nest.js and DataTables to create a searchable employee list interface.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-tables-nextjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime table with Next.js</h3><p class="css-k12xad e5jrto45">Use Next.js, React Table and Pusher to create a movie review site, updated in realtime as users post reviews.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-analytics-dashboard-express.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Building a realtime analytics dashboard for an Express application</h3><p class="css-k12xad e5jrto45">This tutorial shows you how to build a dashboard that monitors connections to an Express application. The dashboard will...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Prev</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials4e8d.html?product=Channels&amp;tag=Live%20Table&amp;page=1" class="css-2wakph edg0byb1">1</a><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials1271.html?product=Channels&amp;tag=Live%20Table&amp;page=2" class="css-5s6711 edg0byb1">2</a><a href="tutorials1271.html?product=Channels&amp;tag=Live%20Table&amp;page=2" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":15,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3m0gfzuNEsui62aYUI8QgI","type":"Entry","createdAt":"2018-11-14T19:23:28.246Z","updatedAt":"2018-11-14T19:23:28.246Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"View your live Spotify history with React and Node","url":"spotify-history-react-node","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/music-history","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2018-11-14","description":"Build a web app using Node and React to view your Spotify history. The app allows users to link up to their Spotify account and view a list of tracks played, with new tracks being added as they play.","prerequisite":"You will need Node 6+ installed on your machine. Some knowledge of Node and React will be helpful.","content":"In this tutorial, we’ll be creating an application that displays your Spotify music history in realtime. Once you connect a Spotify account, it’ll display a list of your 10 most recently played tracks. Then it’ll keep updating that list as you play more songs. The final result will look like this:\n\n![spotify-history-demo](//images.ctfassets.net/1es3ne0caaid/37NQjj1rGw0kysyWwqqGk4/c787a45b5fa976e4a273824ff79502d1/spotify-history-demo.gif)\n\n## Prerequisites\n\nExperience with building Node.js and React applications is required to grasp the concepts explored in this tutorial. You also need Node.js (v6 and later) along with npm on your machine to run the commands and code included in this article. You can find installation instructions [here](https://www.npmjs.com/get-npm).\n\n## Getting started\n\nCreate a new folder for this project in your filesystem. You can call it `spotify-history` or just `spotify`. Open up your terminal and `cd` into the newly created directory. Next, run the command below to initialize a new Node.js project:\n\n```\n    npm init -y\n```\n\nThe above command creates a new `package.json` file in the current directory. Now let’s install the dependencies we’ll be needing to build the server component of our application.\n\nRun the following command in the terminal to install the required packages. I’ll explain what each one does as we progress through the tutorial.\n\n```\n    npm install express cors nedb dotenv node-cron node-fetch pusher --save\n```\n\nOnce the server dependencies have been installed, run the command below to install [create-react-app](https://github.com/facebook/create-react-app) globally on your machine. This tool helps us bootstrap React apps quickly with no build configuration.\n\n```\n    npm install -g create-react-app\n```\n\nOnce the installation completes, you'll have access to the `create-react-app` command that will be used to set up the React project. Next, run the following command from within the root of your project directory to create the frontend component of the app.\n\n```\n    create-react-app client\n```\n\nThis command creates a new `client` directory and installs all the packages that are needed to build and run a React application within it.\n\nNext, change into the newly created `client` directory and run the command below install some additional dependencies that we’ll be needing in our application frontend:\n\n```\n    npm install pusher-js date-fns --save\n```\n\nFinally, run `npm start` within the `client` directory to start the development server. It should be available at http://localhost:3000 or some other port if 3000 is not available on your machine.\n\n\n## Create the application frontend\n\nLet’s begin by changing up the code in  `client/src/App.js` to look like this:\n\n``` javascript\n    // client/src/App.js\n    \n    import React, { Component } from 'react';\n    import Pusher from 'pusher-js';\n    import format from 'date-fns/format';\n    import './App.css';\n    \n    class App extends Component {\n      constructor() {\n        super();\n        const urlParams = new URLSearchParams(window.location.search);\n        const isUserAuthorized = urlParams.has('authorized') ? true : false;\n    \n        this.state = {\n          isUserAuthorized,\n          musicHistory: [],\n        };\n      }\n      \n      render() {\n        const { isUserAuthorized, musicHistory } = this.state;\n        const connectSpotify = isUserAuthorized ? (\n          ''\n        ) : (\n          \u003ca href=\"http://localhost:5000/login\"\u003eConnect your Spotify account\u003c/a\u003e\n        );\n    \n        const TableItem = (item, index) =\u003e (\n          \u003ctr key={item.played_at}\u003e\n            \u003ctd\u003e{index + 1}\u003c/td\u003e\n            \u003ctd\u003e{item.track_name}\u003c/td\u003e\n            \u003ctd\u003e{format(item.played_at, 'D MMM YYYY, hh:mma')}\u003c/td\u003e\n          \u003c/tr\u003e\n        );\n    \n        const RecentlyPlayed = () =\u003e (\n          \u003cdiv className=\"recently-played\"\u003e\n            \u003ch2\u003eRecent Tracks\u003c/h2\u003e\n            \u003ctable className=\"table\"\u003e\n              \u003cthead\u003e\n                \u003ctr\u003e\n                  \u003cth\u003e#\u003c/th\u003e\n                  \u003cth\u003eSong title\u003c/th\u003e\n                  \u003cth\u003eTime\u003c/th\u003e\n                \u003c/tr\u003e\n              \u003c/thead\u003e\n              \u003ctbody\u003e{musicHistory.map((e, index) =\u003e TableItem(e, index))}\u003c/tbody\u003e\n            \u003c/table\u003e\n          \u003c/div\u003e\n        );\n    \n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cheader className=\"header\"\u003e\n              \u003ch1\u003eSpotify Listening History\u003c/h1\u003e\n              \u003cp\u003eView your music history in realtime with Spotify and Pusher\u003c/p\u003e\n    \n              {connectSpotify}\n              {musicHistory.length !== 0 ? \u003cRecentlyPlayed /\u003e : null}\n            \u003c/header\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nWe’ve initialized the state of the application with two values: `isUserAuthorized` which keeps track of whether the user has authenticated with Spotify or not via a URL parameter, and `musicHistory` which is where all the recently played tracks will be stored. If `isUserAuthorized` is set to false (which it is by default), a link that prompts the user to connect a Spotify account to the app will be displayed on the screen.\n\nLet’s change up the styles for the app in `client/src/App.css`:\n\n``` css\n    // client/src/App.css\n    \n    .App {\n      width: 100%;\n      max-width: 750px;\n      margin: 0 auto;\n      padding: 30px;\n      text-align: center;\n    }\n    \n    table {\n      width: 100%;\n      text-align: center;\n    }\n    \n    th,\n    td {\n      padding: 12px 15px;\n      border-bottom: 1px solid #E1E1E1; }\n    th:first-child,\n    td:first-child {\n      padding-left: 0; }\n    th:last-child,\n    td:last-child {\n    padding-right: 0; }\n```\n\n## Set up the server\n\nIn the root of your project directory, create a new `server.js` file and change its contents to look like this:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    const Datastore = require('nedb');\n    const cron = require('node-cron');\n    const Pusher = require('pusher');\n    \n    const clientUrl = process.env.CLIENT_URL;\n    \n    const app = express();\n    \n    const db = new Datastore();\n    \n    app.use(cors());\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nNext, create a file called `variables.env` also in the root of your project folder. This is where all the environmental variables will be stored so that they can be made available on `process.env`. The `dotenv` package is what allows us to achieve this.\n\n```\n    // variables.env\n    \n    PORT=5000\n    CLIENT_URL=https://localhost:3000\n```\n\nThe `CLIENT_URL` variable is the URL where the React development server is available on. You can change the value if your app is running on another port.\n\n## Sign up for Spotify\n\nBefore you can access and use Spotify’s API, you need to [create a free account](https://www.spotify.com/signup/). You don’t need to be on the premium plan to follow through with this tutorial. Once you have done so, go to the [developer dashboard](https://developer.spotify.com/dashboard/) and log in to with your Spotify account. Accept the terms of service and create your first app by selecting any one of the three options presented.\n\n![spotify-history-signup](//images.ctfassets.net/1es3ne0caaid/3hE8aVYYzuK4MmOSYEAke2/4eafa968232a3138d01a4c6576e9f095/spotify-history-signup.png)\n\nFill the popup form as shown above and hit **Next** to move along. Hit **No** on the **Are you developing a commercial integration?** screen and tick all the checkboxes on the final screen before hitting the green **SUBMIT** button to create the app.\n\n![spotify-history-keys](//images.ctfassets.net/1es3ne0caaid/2IUr6YjSGcGGuSoA6EWUWw/ee5f5cc81c7f2800533cfa125dadb534/spotify-history-keys.png)\n\nOnce your app has been created, you will be redirected to the app page where you can access your Client ID and Client Secret tokens. You will find this at the top left of your screen. Also hit the **EDIT SETTINGS** button at the top right and add the redirect URI (http://localhost:5000/callback) in the popup form that appears, then hit the **ADD** button. Finally hit **SAVE** at the bottom of the form to save your settings.\n\n![spotify-history-settings](//images.ctfassets.net/1es3ne0caaid/7ykPNnlWrmukW4sO4KIQkC/f5c8528fdb9feb0c77d81f97269aa5ca/spotify-history-settings.png)\n\nAdd the following variables to your `variable.env` file:\n\n```\n    // variables.env\n    \n    SPOTIFY_CLIENT_ID=\u003cyour spotify client id\u003e\n    SPOTIFY_CLIENT_SECRET=\u003cyour spotify client secret\u003e\n    SPOTIFY_REDIRECT_URI=http://localhost:5000/callback\n```\n\nNext, create new `credentials.js` file in your project directory and change its contents to look like this:\n\n``` javascript\n    // credentials.js\n    \n    const spotify = {\n      client_id: process.env.SPOTIFY_CLIENT_ID,\n      client_secret: process.env.SPOTIFY_CLIENT_SECRET,\n      redirect_uri: process.env.SPOTIFY_REDIRECT_URI,\n    };\n    \n    module.exports = spotify;\n```\n\n## Create the authentication flow\n\nWe need to create a flow for authorizing users’ Spotify accounts to work with our app. We can do this by creating the login route in the server, which is where the user hits the **Connect your Spotify account** link is clicked on the app frontend.\n\nCreate a new file called `authorizeSpotify.js` and paste in the following code within it:\n\n``` javascript\n    // authorizeSpotify.js\n    \n    const spotify = require('./credentials');\n    \n    const authorizeSpotify = (req, res) =\u003e {\n      const scopes = 'user-read-recently-played';\n    \n      const url = `https://accounts.spotify.com/authorize?\u0026client_id=${\n        spotify.client_id\n      }\u0026redirect_uri=${encodeURI(\n        spotify.redirect_uri\n      )}\u0026response_type=code\u0026scope=${scopes}`;\n    \n      res.redirect(url);\n    };\n    \n    module.exports = authorizeSpotify;\n```\n\nNext  import this module into `server.js` and use it in the a new `/login` route as shown below:\n\n``` javascript\n    // server.js\n    \n    ...\n    const Pusher = require('pusher');\n    const authorizeSpotify = require('./authorizeSpotify');\n    \n    ...\n    app.use(bodyParser.urlencoded({ extended: true }));\n    app.get('/login', authorizeSpotify);\n    ...\n```\n\nWhenever, the user hits the `/login` route (by trying to connect a Spotify account), the app generates a request where the user is prompted to grant the  `user-read-recently-played` permission.\n\nWhen the user grants the permission, it will redirect back to the redirect URL you specified while creating the app (http://localhost:5000/callback). We need to grab the code that is included in the URL parameters and exchange it for an access token which will be used when interacting with the Spotify API. Let’s write the code that’ll do just that in the next step.\n\nCreate a new file called `getAccessToken.js` and paste the following code inside it:\n\n``` javascript\n    // getAccessToken.js\n    \n    const fetch = require('node-fetch');\n    const spotify = require('./credentials');\n    \n    const getAccessToken = (req, res, next) =\u003e {\n      const { code } = req.query;\n    \n      if (code) {\n        const url = 'https://accounts.spotify.com/api/token';\n    \n        const data = {\n          grant_type: 'authorization_code',\n          code,\n          redirect_uri: spotify.redirect_uri,\n          client_id: spotify.client_id,\n          client_secret: spotify.client_secret,\n        };\n    \n        const headers = {\n          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n        };\n    \n        const searchParams = new URLSearchParams();\n    \n        Object.keys(data).forEach(prop =\u003e {\n          searchParams.set(prop, data[prop]);\n        });\n    \n        fetch(url, {\n          method: 'POST',\n          headers,\n          body: searchParams,\n        })\n          .then(res =\u003e res.json())\n          .then(credentials =\u003e {\n            req.credentials = credentials;\n            next();\n          })\n          .catch(next);\n      }\n    };\n    \n    module.exports = getAccessToken;\n```\n\nNext, require `getAccessToken` in `server.js` and use it in the `/callback` route as shown below:\n\n``` javascript\n    // server.js\n    \n    ...\n    const authorizeSpotify = require('./authorizeSpotify');\n    const getAccessToken = require('./getAccessToken');\n    \n    ...\n    app.get('/login', authorizeSpotify);\n    app.get('/callback', getAccessToken);\n    ...\n```\n\nIn  `getAccessToken`, we grab the code off the URL parameters and exchange it for an access token by making a POST request to the Spotify Accounts service. When the requested credentials are received, they’re saved on the `req` object and  `next()` is invoked which executes the next middleware.\n\nLet’s go ahead and create the succeeding middleware in the next step. This middleware is tasked with saving the credentials received from Spotify to a temporary database. Here’s the code that helps us achieve that:\n\n``` javascript\n    // server.js\n    ...\n    app.get('/login', authorizeSpotify);\n    app.get('/callback', getAccessToken, (req, res, next) =\u003e {\n      db.insert(req.credentials, err =\u003e {\n        if (err) {\n          next(err);\n        } else {\n          res.redirect(`${clientUrl}/?authorized=true`);\n        }\n      });\n    });\n```\n\nThis code allows us to redirect the user back to the app frontend once the credentials have been saved to the database. Notice the `?authorized=true` parameter? That presence of that in the URL lets us detect that authorization was successful and `isUserAuthorized` will now be set to `true` in the app frontend.\n\n## Fetch the user’s recently played tracks\n\nNow that we know that authorization with the Spotify API was successful, we need to fetch the 10 most recently played tracks of the user and display it on the page. At this point, you should start listening to some music on Spotify if your account is new so that some songs will show up when this request is performed.\n\nUnder the `constructor()` function, add the `componentDidMount()` lifecycle hook to your React app and paste the following code within it:\n\n``` javascript\n    // client/src/App.js\n    \n    componentDidMount() {\n      const { isUserAuthorized } = this.state;\n    \n      if (isUserAuthorized) {\n        fetch('http://localhost:5000/history')\n          .then(res =\u003e res.json())\n          .then(data =\u003e {\n            this.setState({\n              musicHistory: data,\n            });\n          })\n          .catch(error =\u003e console.log(error));\n      }\n    }\n```\n\nWe’re making a request to the `/history` route and we expect the 10 most recently played songs on the users’ account to be sent back. Let’s create this route on the server in the next step.\n\nCreate a file called `getRecentlyPlayed` and paste the code below within it. This is where the actual request to Spotify is performed.\n\n``` javascript\n    // getRecentlyPlayed.js\n    \n    const fetch = require('node-fetch');\n    \n    const getRecentlyPlayed = accessToken =\u003e {\n      const url = 'https://api.spotify.com/v1/me/player/recently-played?limit=10';\n    \n      return fetch(url, {\n        method: 'GET',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${accessToken}`,\n        },\n      })\n        .then(res =\u003e res.json())\n        .then(data =\u003e data.items)\n        .catch(error =\u003e console.log(error));\n    };\n    \n    module.exports = getRecentlyPlayed;\n```\n\nNext, import it in `server.js` and add the `/history` route below the other two:\n\n``` javascript\n    // server.js\n    \n    ...\n    const getAccessToken = require('./getAccessToken');\n    const getRecentlyPlayed = require('./getRecentlyPlayed');\n    \n    ...\n    app.get('/history', (req, res) =\u003e {\n      db.find({}, (err, docs) =\u003e {\n        if (err) {\n          throw Error('Failed to retrieve documents');\n        }\n    \n        const accessToken = docs[0].access_token;\n        getRecentlyPlayed(accessToken)\n          .then(data =\u003e {\n            const arr = data.map(e =\u003e ({\n              played_at: e.played_at,\n              track_name: e.track.name,\n            }));\n    \n            res.json(arr);\n          })\n          .catch(err =\u003e console.log(err));\n      });\n    });\n```\n\nAt this point, if the user is authenticated and this route is hit, the most recently played songs will be sent to the frontend and displayed on the page.\n\n![spotify-history-partial](//images.ctfassets.net/1es3ne0caaid/1qqnFvWVQgku0iKmEaW4O4/a2d0141ad82128558ce664c7b8be3b87/spotify-history-partial.png)\n\n## Set up realtime updates with Pusher\n\nThe next task is to make the list of songs update on the page as you continue to listen. Head over to the Pusher website and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). Select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app. Once your app is created, retrieve your credentials from the **API Keys** tab, then add the following to your `variables.env` file.\n\n```\n    // variables.env\n    \n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\nWe’re going to set up a cron job to run every five minutes, retrieve the most recently played songs and merge it with the existing list of recent tracks so that new songs are displayed on top. Change up `server.js` to look like this:\n\n``` javascript\n    // server.js\n    \n    ....\n    const db = new Datastore();\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    ...\n    app.get('/history', (req, res) =\u003e {\n      db.find({}, (err, docs) =\u003e {\n        if (err) {\n          throw Error('Failed to retrieve documents');\n        }\n    \n        const accessToken = docs[0].access_token;\n        getRecentlyPlayed(accessToken)\n          .then(data =\u003e {\n            const arr = data.map(e =\u003e ({\n              played_at: e.played_at,\n              track_name: e.track.name,\n            }));\n    \n            res.json(arr);\n          })\n          .then(() =\u003e {\n            cron.schedule('*/5 * * * *', () =\u003e {\n              getRecentlyPlayed(accessToken).then(data =\u003e {\n                const arr = data.map(e =\u003e ({\n                  played_at: e.played_at,\n                  track_name: e.track.name,\n                }));\n    \n                pusher.trigger('spotify', 'update-history', {\n                  musicHistory: arr,\n                });\n              });\n            });\n          })\n          .catch(err =\u003e console.log(err));\n      });\n    });\n```\n\nOnce the initial listing is made, a cron job is triggered that runs every five minutes. That’s what the `*/5 * * * *` string signifies. The user’s most recently played tracks are fetched and pushed to the `spotify` channel via the `update-history` event. Any client that is subscribed to this channel can receive the latest data and update the list of tracks on the page.\n\nLet’s go ahead and do just that in the frontend of our app. Update the `componentDidMount()` lifecycle hook in `client/src/App.js` to look like this:\n\n``` javascript\n    // client/src/App.js\n    \n    componentDidMount() {\n      const { isUserAuthorized } = this.state;\n    \n      if (isUserAuthorized) {\n        fetch('http://localhost:5000/history')\n          .then(res =\u003e res.json())\n          .then(data =\u003e {\n            this.setState({\n              musicHistory: data,\n            });\n          })\n          .catch(error =\u003e console.log(error));\n    \n        const pusher = new Pusher('\u003cyour app key\u003e', {\n          cluster: '\u003cyour app cluster\u003e',\n          encrypted: true,\n        });\n    \n        const channel = pusher.subscribe('spotify');\n        channel.bind('update-history', data =\u003e {\n          this.setState(prevState =\u003e {\n            const arr = data.musicHistory\n              .map(item =\u003e {\n                const isPresent = prevState.musicHistory.find(\n                  e =\u003e e.played_at === item.played_at\n                );\n                if (isPresent === undefined) {\n                  return item;\n                } else {\n                  return null;\n                }\n              })\n              .filter(Boolean);\n            return {\n              musicHistory: arr.concat(prevState.musicHistory),\n            };\n          });\n        });\n      }\n    }\n```\n\nHere, we opened a connection to Channels and used the `subscribe()` method  to subscribe to the `spotify` channel. Updates to the user’s music history are listened for via the `bind` method. Once an update is received, the data is merged with the existing one so that the list is updated with the latest tracks.\n\nDon’t forget to replace the `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e` placeholders with the appropriate details from your Pusher account dashboard.\n\nStart your server by running `node server.js` and link your Spotify account on the frontend. As long as you continue to play music, you should see the page update with your most recent tracks updates.\n\n## Conclusion\n\nThat’s it! In this tutorial, you learned how to view your Spotify music history in realtime with React and Pusher. Along the way, you learned how to use Spotify’s API, and Pusher Channels to send and receive data in realtime.\n\nYou can find the app’s source code in this [GitHub repo](https://github.com/ayoisaiah/music-history).","metaTitle":"View your live Spotify history with React and Node","metaDescription":"Build a web app using Node and React to view your Spotify history. The app allows users to link up to their Spotify account and view a list of tracks played, with new tracks being added as they play."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2LyBHEC0bSwMwyySAUq2cC","type":"Entry","createdAt":"2018-06-27T11:33:04.164Z","updatedAt":"2018-06-27T11:33:04.164Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a web traffic monitor with Python","url":"web-traffic-monitor-python","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/python-pusher-traffic-monitor","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}}],"reviewDate":"2018-06-26","description":"Build a dashboard to monitor web traffic, along with a demo site to track. Use Flask for the backend, and vanilla JavaScript for the frontend. View details about website visitors in realtime.","prerequisite":"You will need Python 3+ installed on your machine. A basic knowledge of Flask, Python and JavaScript will be helpful.","content":"In today’s tech world, it is important to know where the traffic on your website comes from because it helps content creators and website owners understand their visitors better. Website owners can further use this information to improve their website, render better advertisements or generally improve their content based on this data.\n\nIn this tutorial, we will build a simple website and a traffic monitor, the traffic monitor will display details about visitors on the website. For every visitor, there will multiple columns such as time of visit, continent, country, city, operating system, browser, and pages visited.\nHere is a display of what the final application will look like:\n\n![python-web-traffic-demo](//images.ctfassets.net/1es3ne0caaid/173irZ04McmEIE0K8cQoew/5fb82398a74f83f8353e95c7fc5a935a/python-web-traffic-demo.gif)\n\nFrom the image above, we can see an incognito window to the left and the traffic monitor dashboard window to the right. In the incognito window, we visit our website on the local address [127.0.0.1:5000](http://127.0.0.1:5000) and it updates in realtime on the traffic monitor dashboard. It registers that a new user has visited the website and displays the associated data. The user data is also saved to the database so that whenever we open the traffic monitor dashboard, the data persists.\n\nWe will build the backend server for this application using the Python framework called [Flask.](http://flask.pocoo.org/) The source code for this tutorial is available here on [GitHub](https://github.com/neoighodaro/python-pusher-traffic-monitor).\n\n## Prerequisites\n\nTo follow along with this tutorial, a basic knowledge of Python, Flask, and JavaScript (ES6 syntax) is required. You will also need the following installed:\n\n\n1. [Python (\u003e= v3.x)](https://www.python.org/)\n2. [virtualenv](https://virtualenv.pypa.io/en/stable/)\n3. [Flask](http://flask.pocoo.org/)\n\nVirtualenv is great for creating isolated Python environments, so we can install dependencies in an isolated environment, and not pollute our global packages directory.\n\nLet’s install `virtualenv` with this command:\n\n```\n    $ pip install virtualenv\n```\n\n## Setting up the app environment\n\nLet’s create our project folder, and activate a virtual environment in it. Run the commands below:\n\n```\n    $ mkdir python-pusher-traffic-monitor\n    $ cd python-pusher-traffic-monitor\n    $ virtualenv .venv\n    $ source .venv/bin/activate # Linux based systems\n    $ \\path\\to\\env\\Scripts\\activate # Windows users\n```\n\nNow that we have the virtual environment setup, we can install Flask within it with this command:\n\n```\n    $ pip install flask\n```\n\nLet’s also install `httpagentparser`:\n\n```\n    $ pip install httpagentparser\n```\n\nBefore we do anything else, we need to install the Pusher library as we will need that for realtime updates.\n\n\n## Setting up Pusher\n\nThe first step will be to get a Pusher Channels application. We will need the application credentials for our realtime features to work.\n\nGo to the [Pusher website](https://pusher.com) and create an account. After creating an account, you should create a new application. Follow the application creation wizard and then you should be given your application credentials, we will use this later in the article.\n\n![python-realtime-poll-keys](//images.ctfassets.net/1es3ne0caaid/752Tb8m156CeqWw2q6eKyS/2a61be62a4ff148b8fe9e7c60a94a5db/python-realtime-poll-keys.png)\n\nWe also need to install the Pusher Python Library to send events to Pusher. Install this using the command below:\n\n```\n    $ pip install pusher\n```\n\n## File and Folder Structure\n\nWe don’t need to create so many files and folders for this application since it’s a simple one. Here’s the file/folder structure:\n\n```\n    ├── python-pusher-traffic-monitor\n           ├── app.py\n           ├── dbsetup.py\n           ├── static\n           └── templates\n```\n\nThe `static` folder will contain the static files to be used as is defined by [Flask standards](http://flask.pocoo.org/docs/0.12/tutorial/folders/). The `templates` folder will contain the HTML templates. In our application, `app.py` is the main entry point and will contain our server-side code. To keep things modular, we will write all the code that we need to interact with the database in `dbsetup.py`.\n\nCreate the `app.py` and `dbsetup.py` files, and then the `static` and `templates` folders.\n\n## Building the backend\n\nLet’s start by working on the file that will handle the database operations. In the `dbsetup.py` file, we will write all the code that is needed for creating a database and interacting with it. Open the `dbsetup.py` file and paste the following:\n\n``` python\n    import sqlite3\n    from sqlite3 import Error\n    \n    def create_connection(database):\n        try:\n            conn = sqlite3.connect(database, isolation_level=None, check_same_thread = False)\n            conn.row_factory = lambda c, r: dict(zip([col[0] for col in c.description], r))\n    \n            return conn\n        except Error as e:\n            print(e)\n    \n    def create_table(c,sql):\n        c.execute(sql)\n    \n    def update_or_create_page(c,data):\n        sql = \"SELECT * FROM pages where name=? and session=?\"\n        c.execute(sql,data[:-1])\n        result = c.fetchone()\n        if result == None:\n            create_pages(c,data)\n        else:\n            print(result)\n            update_pages(c, result['id'])\n    \n    def create_pages(c, data):\n        print(data)\n        sql = ''' INSERT INTO pages(name,session,first_visited)\n                  VALUES (?,?,?) '''\n        c.execute(sql, data)\n    \n    def update_pages(c, pageId):\n        print(pageId)\n        sql = ''' UPDATE pages\n                  SET visits = visits+1 \n                  WHERE id = ?'''\n        c.execute(sql, [pageId])\n    \n    def create_session(c, data):\n        sql = ''' INSERT INTO sessions(ip, continent, country, city, os, browser, session, created_at)\n                  VALUES (?,?,?,?,?,?,?,?) '''\n        c.execute(sql, data)\n    \n    def select_all_sessions(c):\n        sql = \"SELECT * FROM sessions\"\n        c.execute(sql)\n        rows = c.fetchall()\n        return rows\n    \n    def select_all_pages(c):\n        sql = \"SELECT * FROM pages\"\n        c.execute(sql)\n        rows = c.fetchall()\n        return rows\n    \n    def select_all_user_visits(c, session_id):\n        sql = \"SELECT * FROM pages where session =?\"\n        c.execute(sql,[session_id])\n        rows = c.fetchall()\n        return rows\n    \n    def main():\n        database = \"./pythonsqlite.db\"\n        sql_create_pages = \"\"\" \n            CREATE TABLE IF NOT EXISTS pages (\n                id integer PRIMARY KEY,\n                name varchar(225) NOT NULL,\n                session varchar(255) NOT NULL,\n                first_visited datetime NOT NULL,\n                visits integer NOT NULL Default 1\n            ); \n        \"\"\"\n        sql_create_session = \"\"\" \n            CREATE TABLE IF NOT EXISTS sessions (\n                id integer PRIMARY KEY,\n                ip varchar(225) NOT NULL,\n                continent varchar(225) NOT NULL, \n                country varchar(225) NOT NULL,\n                city varchar(225) NOT NULL, \n                os varchar(225) NOT NULL, \n                browser varchar(225) NOT NULL, \n                session varchar(225) NOT NULL,\n                created_at datetime NOT NULL\n            ); \n        \"\"\"\n    \n        # create a database connection\n        conn = create_connection(database)\n        if conn is not None:\n            # create tables\n            create_table(conn, sql_create_pages)\n            create_table(conn, sql_create_session)\n            print(\"Connection established!\")\n        else:\n            print(\"Could not establish connection\")\n    \n    if __name__ == '__main__':\n        main()\n```\n\nNext, run the `dbsetup.py` file so that it creates a new SQLite database for us. We can run it with this command:\n\n```\n    $ python dbsetup.py\n```\n\nWe should see this text logged to the terminal — ‘Connection established!’ — and there should be a new file — `pythonsqlite.db` — added to the project’s root directory.\n\nNext, let’s open the `app.py` file and start writing the backend code that will handle incoming requests. We are going to register multiple routes here. Four of these routes will load a webpage each while the other routes will process submitted data and return a JSON response.\n\nWe will also create a Pusher instance and use it to broadcast data through two channels that we will shortly define — pageview and numbers — in the application. After that, we will import the database handler methods we defined in `dbsetup.py` so that we can use them in the `app.py` file. Open the `app.py` file and paste the following:\n\n``` python\n    from flask import Flask, render_template, request, session, jsonify\n    import urllib.request\n    from pusher import Pusher\n    from datetime import datetime\n    import httpagentparser\n    import json\n    import os\n    import hashlib\n    from dbsetup import create_connection, create_session, update_or_create_page, select_all_sessions, select_all_user_visits, select_all_pages\n    \n    app = Flask(__name__)\n    app.secret_key = os.urandom(24)\n    \n    # configure pusher object\n    pusher = Pusher(\n    app_id='PUSHER_APP_ID',\n    key='PUSHER_APP_KEY',\n    secret='PUSHER_APP_SECRET',\n    cluster='PUSHER_APP_CLUSTER',\n    ssl=True)\n    \n    database = \"./pythonsqlite.db\"\n    conn = create_connection(database)\n    c = conn.cursor()\n    \n    userOS = None\n    userIP = None\n    userCity = None\n    userBrowser = None\n    userCountry = None\n    userContinent = None\n    sessionID = None\n    \n    def main():\n        global conn, c\n    \n    def parseVisitor(data):\n        update_or_create_page(c,data)\n        pusher.trigger(u'pageview', u'new', {\n            u'page': data[0],\n            u'session': sessionID,\n            u'ip': userIP\n        })\n        pusher.trigger(u'numbers', u'update', {\n            u'page': data[0],\n            u'session': sessionID,\n            u'ip': userIP\n        })\n    \n    @app.before_request\n    def getAnalyticsData():\n        global userOS, userBrowser, userIP, userContinent, userCity, userCountry,sessionID \n        userInfo = httpagentparser.detect(request.headers.get('User-Agent'))\n        userOS = userInfo['platform']['name']\n        userBrowser = userInfo['browser']['name']\n        userIP = \"72.229.28.185\" if request.remote_addr == '127.0.0.1' else request.remote_addr\n        api = \"https://www.iplocate.io/api/lookup/\" + userIP\n        try:\n            resp = urllib.request.urlopen(api)\n            result = resp.read()\n            result = json.loads(result.decode(\"utf-8\"))                                                                                                     \n            userCountry = result[\"country\"]\n            userContinent = result[\"continent\"]\n            userCity = result[\"city\"]\n        except:\n            print(\"Could not find: \", userIP)\n        getSession()\n    \n    def getSession():\n        global sessionID\n        time = datetime.now().replace(microsecond=0)\n        if 'user' not in session:\n            lines = (str(time)+userIP).encode('utf-8')\n            session['user'] = hashlib.md5(lines).hexdigest()\n            sessionID = session['user']\n            pusher.trigger(u'session', u'new', {\n                u'ip': userIP,\n                u'continent': userContinent,\n                u'country': userCountry,\n                u'city': userCity,\n                u'os': userOS,\n                u'browser': userBrowser,\n                u'session': sessionID,\n                u'time': str(time),\n            })\n            data = [userIP, userContinent, userCountry, userCity, userOS, userBrowser, sessionID, time]\n            create_session(c,data)\n        else:\n            sessionID = session['user']\n    \n    @app.route('/')\n    def index():\n        data = ['home', sessionID, str(datetime.now().replace(microsecond=0))]\n        parseVisitor(data)\n        return render_template('index.html')\n    \n    @app.route('/about')\n    def about():\n        data = ['about',sessionID, str(datetime.now().replace(microsecond=0))]\n        parseVisitor(data)\n        return render_template('about.html')\n    \n    @app.route('/dashboard')\n    def dashboard():\n        return render_template('dashboard.html')\n    \n    @app.route('/dashboard/\u003csession_id\u003e', methods=['GET'])\n    def sessionPages(session_id):\n        result = select_all_user_visits(c,session_id)\n        return render_template(\"dashboard-single.html\",data=result)\n    \n    @app.route('/get-all-sessions')\n    def get_all_sessions():\n        data = []\n        dbRows = select_all_sessions(c)\n        for row in dbRows:\n            data.append({\n                'ip' : row['ip'],\n                'continent' : row['continent'],\n                'country' : row['country'], \n                'city' : row['city'], \n                'os' : row['os'], \n                'browser' : row['browser'], \n                'session' : row['session'],\n                'time' : row['created_at']\n            })\n        return jsonify(data)\n    \n    if __name__ == '__main__':\n        main()\n        app.run(debug=True)\n```\n\nIn the code above, we imported the required modules and objects, then we initialized a new Flask application. We also initialized and configured Pusher before defining all the routes and their handler functions.\n\n\n\u003e Replace the PUSHER_APP_* keys with the values on your Pusher dashboard.\n  \n\nWith the `Pusher` object instantiated, we can trigger events on whatever channels we define.\nThe trigger method has the following syntax:\n\n```\n    pusher.trigger(\"a_channel\", \"an_event\", {key: \"data to pass with event\"})\n```\n\nYou can find the docs for the Pusher Python library [here](https://github.com/pusher/pusher-http-python), to get more information on configuring and using Pusher in Python.\n\nThe `getAnalyticsData` function gets the visitor’s IP address and retrieves data using the [urllib module](https://docs.python.org/3/howto/urllib2.html) to read information from the [Iplocate](https://www.iplocate.io/) API.\n\nIn the code above, we have defined four routes that will render web pages when visited, let’s create these web pages in the next section and use the frontend to communicate with our Python backend.\n\n## Setting up the app view\n\nTo begin, we need to create four files in the `templates` directory. These files will be named:\n\n\n- `index.html` — this is the home page for the website\n- `about.html` — this is the about page for the website\n- `dashboard.html` — this is the traffic monitor dashboard\n- `dashboard-single.html` — this is the dashboard page that displays more info (i.e. the types of pages a user has visited) on a single visitor.\n\nOpen the `./templates/index.html` file and paste the following:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003ePusher Python Realtime Traffic Monitoring\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003ch1\u003eThis is the homepage\u003c/h1\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nOpen the `./templates/about.html` file and paste the following:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003ePusher Python Realtime Traffic Monitoring\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003ch1\u003eThis is the about page\u003c/h1\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nBefore we write the code for `dashboard-single.html` and `dashboard` files, we will pull in some CSS and JS from [https://startbootstrap.com](https://startbootstrap.com/template-overviews/sb-admin/). Go to the URL and click **Download.** Unzip the file and copy the `css` and `js` directories into the `static` directory of our project.\n\nNow, let’s continue building the frontend of our application, so open the `./templates/dashboard.html` file and paste the following:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"utf-8\"\u003e\n      \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n      \u003cmeta name=\"description\" content=\"\"\u003e\n      \u003cmeta name=\"author\" content=\"\"\u003e\n      \u003ctitle\u003eSB Admin - Start Bootstrap Template\u003c/title\u003e\n    \n      \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\"\u003e\n      \u003clink href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\" type=\"text/css\"\u003e\n      \u003clink href=\"https://cdn.datatables.net/1.10.16/css/dataTables.bootstrap4.min.css\" rel=\"stylesheet\"\u003e\n      \u003clink href=\"{{ url_for('static', filename='css/sb-admin.css') }}\" rel=\"stylesheet\"\u003e\n    \u003c/head\u003e\n    \u003cbody class=\"fixed-nav sticky-footer bg-dark\" id=\"page-top\"\u003e\n    \n      \u003c!-- Navigation--\u003e\n      \u003cnav class=\"navbar navbar-expand-lg navbar-dark bg-dark fixed-top\" id=\"mainNav\"\u003e\n        \u003ca class=\"navbar-brand\" href=\"index.html\"\u003eStart Bootstrap\u003c/a\u003e\n        \u003cbutton class=\"navbar-toggler navbar-toggler-right\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"\u003e\n          \u003cspan class=\"navbar-toggler-icon\"\u003e\u003c/span\u003e\n        \u003c/button\u003e\n        \u003cdiv class=\"collapse navbar-collapse\" id=\"navbarResponsive\"\u003e\n          \u003cul class=\"navbar-nav navbar-sidenav\" id=\"exampleAccordion\"\u003e\n            \u003cli class=\"nav-item\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Dashboard\"\u003e\n              \u003ca class=\"nav-link\" href=\"/dashboard\"\u003e\n                \u003ci class=\"fa fa-fw fa-dashboard\"\u003e\u003c/i\u003e\n                \u003cspan class=\"nav-link-text\"\u003eDashboard\u003c/span\u003e\n              \u003c/a\u003e\n            \u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/div\u003e\n      \u003c/nav\u003e\n      \u003cdiv class=\"content-wrapper\"\u003e\n        \u003cdiv class=\"container-fluid\"\u003e\n    \n          \u003c!-- Breadcrumbs--\u003e\n          \u003col class=\"breadcrumb\"\u003e\n            \u003cli class=\"breadcrumb-item\"\u003e\n              \u003ca href=\"#\"\u003eDashboard\u003c/a\u003e\n            \u003c/li\u003e\n            \u003cli class=\"breadcrumb-item active\"\u003eMy Dashboard\u003c/li\u003e\n          \u003c/ol\u003e\n    \n          \u003c!-- Icon Cards--\u003e\n          \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-xl-3 col-sm-6 mb-3\"\u003e\n              \u003cdiv class=\"card text-white bg-primary o-hidden h-100\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                  \u003cdiv class=\"mr-5\"\u003eTotal session \u003cspan id=\"total-sessions\"\u003e26\u003c/span\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \u003ca class=\"card-footer text-white clearfix small z-1\" href=\"#\"\u003e\n                  \u003cspan class=\"float-left\"\u003eView Details\u003c/span\u003e\n                  \u003cspan class=\"float-right\"\u003e\n                    \u003ci class=\"fa fa-angle-right\"\u003e\u003c/i\u003e\n                  \u003c/span\u003e\n                \u003c/a\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-xl-3 col-sm-6 mb-3\"\u003e\n              \u003cdiv class=\"card text-white bg-warning o-hidden h-100\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                  \u003cdiv class=\"mr-5\"\u003eTotal visitors \u003cspan id=\"total-visitors\"\u003e26\u003c/span\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \u003ca class=\"card-footer text-white clearfix small z-1\" href=\"#\"\u003e\n                  \u003cspan class=\"float-left\"\u003eView Details\u003c/span\u003e\n                  \u003cspan class=\"float-right\"\u003e\n                    \u003ci class=\"fa fa-angle-right\"\u003e\u003c/i\u003e\n                  \u003c/span\u003e\n                \u003c/a\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-xl-3 col-sm-6 mb-3\"\u003e\n              \u003cdiv class=\"card text-white bg-success o-hidden h-100\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                  \u003cdiv class=\"mr-5\"\u003eTotal Page Views \u003cspan id=\"total-pageviews\"\u003e123\u003c/span\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \u003ca class=\"card-footer text-white clearfix small z-1\" href=\"#\"\u003e\n                  \u003cspan class=\"float-left\"\u003eView Details\u003c/span\u003e\n                  \u003cspan class=\"float-right\"\u003e\n                    \u003ci class=\"fa fa-angle-right\"\u003e\u003c/i\u003e\n                  \u003c/span\u003e\n                \u003c/a\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-xl-3 col-sm-6 mb-3\"\u003e\n              \u003cdiv class=\"card text-white bg-danger o-hidden h-100\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                  \u003cdiv class=\"mr-5\"\u003eUnique Page Views \u003cspan id=\"unique-pageviews\"\u003e123\u003c/span\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \u003ca class=\"card-footer text-white clearfix small z-1\" href=\"#\"\u003e\n                  \u003cspan class=\"float-left\"\u003eView Details\u003c/span\u003e\n                  \u003cspan class=\"float-right\"\u003e\n                    \u003ci class=\"fa fa-angle-right\"\u003e\u003c/i\u003e\n                  \u003c/span\u003e\n                \u003c/a\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n    \n          \u003c!-- Example DataTables Card--\u003e\n          \u003cdiv class=\"card mb-3\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n              \u003ci class=\"fa fa-table\"\u003e\u003c/i\u003e User Sessions\u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n              \u003cdiv class=\"table-responsive\"\u003e\n                \u003ctable class=\"table table-bordered\" id=\"dataTable\" width=\"100%\" cellspacing=\"0\"\u003e\n                  \u003cthead\u003e\n                    \u003ctr\u003e\n                      \u003cth\u003eTime\u003c/th\u003e\n                      \u003cth\u003eIP Address\u003c/th\u003e\n                      \u003cth\u003eContinent\u003c/th\u003e\n                      \u003cth\u003eCountry\u003c/th\u003e\n                      \u003cth\u003eCity\u003c/th\u003e\n                      \u003cth\u003eOpertating System\u003c/th\u003e\n                      \u003cth\u003eBrowser\u003c/th\u003e\n                      \u003cth\u003e\u003c/th\u003e\n                    \u003c/tr\u003e\n                  \u003c/thead\u003e\n                  \u003ctfoot\u003e\n                    \u003ctr\u003e\n                      \u003cth\u003eTime\u003c/th\u003e\n                      \u003cth\u003eIP Address\u003c/th\u003e\n                      \u003cth\u003eContinent\u003c/th\u003e\n                      \u003cth\u003eCountry\u003c/th\u003e\n                      \u003cth\u003eCity\u003c/th\u003e\n                      \u003cth\u003eOpertating System\u003c/th\u003e\n                      \u003cth\u003eBrowser\u003c/th\u003e\n                      \u003cth\u003e\u003c/th\u003e\n                    \u003c/tr\u003e\n                  \u003c/tfoot\u003e\n                  \u003ctbody id=\"customer-table\"\u003e\n                  \u003c/tbody\u003e\n                \u003c/table\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-footer small text-muted\"\u003eUpdated at \u003cspan id=\"session-update-time\"\u003e\u003c/span\u003e\u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003c!-- /.container-fluid--\u003e\n        \u003c!-- /.content-wrapper--\u003e\n    \n        \u003cfooter class=\"sticky-footer\"\u003e\n          \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"text-center\"\u003e\n              \u003csmall\u003eCopyright © Your Website 2018\u003c/small\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/footer\u003e\n    \n        \u003c!-- Bootstrap core JavaScript--\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.datatables.net/1.10.16/js/dataTables.bootstrap4.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n    \n        \u003c!-- Custom scripts for this page--\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/app.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/sb-admin.js') }}\"\u003e\u003c/script\u003e\n      \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nFinally, open the `./templates/dashboard-single.html` file and paste the following:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"utf-8\"\u003e\n      \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n      \u003cmeta name=\"description\" content=\"\"\u003e\n      \u003cmeta name=\"author\" content=\"\"\u003e\n      \u003ctitle\u003eSB Admin - Start Bootstrap Template\u003c/title\u003e\n    \n      \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\"\u003e\n      \u003clink href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\" type=\"text/css\"\u003e\n      \u003clink href=\"https://cdn.datatables.net/1.10.16/css/dataTables.bootstrap4.min.css\" rel=\"stylesheet\"\u003e\n      \u003clink href=\"{{ url_for('static', filename='css/sb-admin.css') }}\" rel=\"stylesheet\"\u003e\n    \u003c/head\u003e\n    \u003cbody class=\"fixed-nav sticky-footer bg-dark\" id=\"page-top\"\u003e\n    \n      \u003c!-- Navigation--\u003e\n      \u003cnav class=\"navbar navbar-expand-lg navbar-dark bg-dark fixed-top\" id=\"mainNav\"\u003e\n        \u003ca class=\"navbar-brand\" href=\"index.html\"\u003eStart Bootstrap\u003c/a\u003e\n        \u003cbutton class=\"navbar-toggler navbar-toggler-right\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"\u003e\n          \u003cspan class=\"navbar-toggler-icon\"\u003e\u003c/span\u003e\n        \u003c/button\u003e\n        \u003cdiv class=\"collapse navbar-collapse\" id=\"navbarResponsive\"\u003e\n          \u003cul class=\"navbar-nav navbar-sidenav\" id=\"exampleAccordion\"\u003e\n            \u003cli class=\"nav-item\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Dashboard\"\u003e\n              \u003ca class=\"nav-link\" href=\"/dashboard\"\u003e\n                \u003ci class=\"fa fa-fw fa-dashboard\"\u003e\u003c/i\u003e\n                \u003cspan class=\"nav-link-text\"\u003eDashboard\u003c/span\u003e\n              \u003c/a\u003e\n            \u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/div\u003e\n      \u003c/nav\u003e\n      \u003cdiv class=\"content-wrapper\"\u003e\n        \u003cdiv class=\"container-fluid\"\u003e\n          \u003c!-- Breadcrumbs--\u003e\n          \u003col class=\"breadcrumb\"\u003e\n            \u003cli class=\"breadcrumb-item\"\u003e\n              \u003ca href=\"#\"\u003eDashboard\u003c/a\u003e\n            \u003c/li\u003e\n            \u003cli class=\"breadcrumb-item active\"\u003eMy Session\u003c/li\u003e\n          \u003c/ol\u003e\n          \u003c!-- Example DataTables Card--\u003e\n          \u003cdiv class=\"card mb-3\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n              \u003ci class=\"fa fa-table\"\u003e\u003c/i\u003e User Sessions\u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n              \u003cdiv class=\"table-responsive\"\u003e\n                \u003ctable class=\"table table-bordered\" id=\"userSessions\" width=\"100%\" cellspacing=\"0\"\u003e\n                  \u003cthead\u003e\n                    \u003ctr\u003e\n                      \u003cth\u003eTime\u003c/th\u003e\n                      \u003cth\u003ePage\u003c/th\u003e\n                      \u003cth\u003eSession_id\u003c/th\u003e\n                      \u003cth\u003eNo of Visits\u003c/th\u003e\n                      \u003cth\u003e\u003c/th\u003e\n                    \u003c/tr\u003e\n                  \u003c/thead\u003e\n                  \u003ctfoot\u003e\n                    \u003ctr\u003e\n                      \u003cth\u003eTime\u003c/th\u003e\n                      \u003cth\u003ePage\u003c/th\u003e\n                      \u003cth\u003eSession_id\u003c/th\u003e\n                      \u003cth\u003eNo of Visits\u003c/th\u003e\n                      \u003cth\u003e\u003c/th\u003e\n                    \u003c/tr\u003e\n                  \u003c/tfoot\u003e\n                  \u003ctbody id=\"customer-table\"\u003e\n                    {% for row in data %}\n                      \u003ctr\u003e\n                        \u003ctd\u003e{{ row.first_visited }}\u003c/td\u003e\n                        \u003ctd\u003e{{ row.name }}\u003c/td\u003e\n                        \u003ctd\u003e{{ row.session }}\u003c/td\u003e\n                        \u003ctd\u003e{{ row.visits }}\u003c/td\u003e\n                      \u003c/tr\u003e\n                    {% endfor %}\n                  \u003c/tbody\u003e\n                \u003c/table\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-footer small text-muted\"\u003eUpdated at \u003cspan id=\"session-update-time\"\u003e\u003c/span\u003e\u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003c!-- /.container-fluid--\u003e\n        \u003c!-- /.content-wrapper--\u003e\n        \u003cfooter class=\"sticky-footer\"\u003e\n          \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"text-center\"\u003e\n              \u003csmall\u003eCopyright © Your Website 2018\u003c/small\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/footer\u003e\n        \u003c!-- Scroll to Top Button--\u003e\n        \u003ca class=\"scroll-to-top rounded\" href=\"#page-top\"\u003e\n          \u003ci class=\"fa fa-angle-up\"\u003e\u003c/i\u003e\n        \u003c/a\u003e\n        \u003c!-- Logout Modal--\u003e\n        \u003cdiv class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\"\u003e\n          \u003cdiv class=\"modal-dialog\" role=\"document\"\u003e\n            \u003cdiv class=\"modal-content\"\u003e\n              \u003cdiv class=\"modal-header\"\u003e\n                \u003ch5 class=\"modal-title\" id=\"exampleModalLabel\"\u003eReady to Leave?\u003c/h5\u003e\n                \u003cbutton class=\"close\" type=\"button\" data-dismiss=\"modal\" aria-label=\"Close\"\u003e\n                  \u003cspan aria-hidden=\"true\"\u003e×\u003c/span\u003e\n                \u003c/button\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"modal-body\"\u003eSelect \"Logout\" below if you are ready to end your current session.\u003c/div\u003e\n              \u003cdiv class=\"modal-footer\"\u003e\n                \u003cbutton class=\"btn btn-secondary\" type=\"button\" data-dismiss=\"modal\"\u003eCancel\u003c/button\u003e\n                \u003ca class=\"btn btn-primary\" href=\"login.html\"\u003eLogout\u003c/a\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003c!-- Bootstrap core JavaScript--\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n        \u003cscript type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.datatables.net/1.10.16/js/dataTables.bootstrap4.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n    \n        \u003cscript src=\"{{ url_for('static', filename='js/app.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/sb-admin.js') }}\"\u003e\u003c/script\u003e\n      \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe markup we have written in all four files define the structure of the elements on the DOM when each page is rendered. We have also loaded the JavaScript Pusher package in the `dashboard.html` and `dashboard-single.html` files.\n\nNext, we will listen for Pusher updates on the frontend of our application using the Pusher magic.\n\n## Listening for realtime updates\n\nIn this step, we will listen for Pusher events from the Backend API and use the data to update the traffic monitor dashboard pages in realtime. First, let’s create a new file — `app.js`— in the `js` folder that is located in the `static` directory.\n\nNext, open the `./static/js/app.js` file and paste the following:\n\n``` javascript\n    // Configure Pusher instance\n    const pusher = new Pusher('PUSHER_APP_KEY', {\n      cluster: 'PUSHER_APP_CLUSTER',\n      encrypted: true\n    });\n    \n    var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    \n    $(document).ready(function(){\n        var dataTable = $(\"#dataTable\").DataTable()\n        // var userSessions = $(\"#userSessions\").DataTable()\n        var pages = $(\"#pages\").DataTable()\n    \n        axios.get('/get-all-sessions')\n        .then(response =\u003e {\n              response.data.forEach((data) =\u003e {\n                  insertDatatable(data)\n              })\n          var d = new Date();\n          var updatedAt = `${d.getFullYear()}/${months[d.getMonth()]}/${d.getDay()} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\n          document.getElementById('session-update-time').innerText = updatedAt\n        })\n    \n        var sessionChannel = pusher.subscribe('session');\n        sessionChannel.bind('new', function(data) {\n            insertDatatable(data)\n        });\n    \n        var d = new Date();\n        var updatedAt = `${d.getFullYear()}/${months[d.getMonth()]}/${d.getDay()} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\n        document.getElementById('session-update-time').innerText = updatedAt\n    });\n    \n    function insertDatatable(data){\n        var dataTable = $(\"#dataTable\").DataTable()\n        dataTable.row.add([\n            data.time,\n            data.ip,\n            data.continent,\n            data.country,\n            data.city,\n            data.os,\n            data.browser,\n            `\u003ca href=${\"/dashboard/\"+data.session}\u003eView pages visited\u003c/a\u003e`\n          ]);\n          dataTable.order([0, 'desc']).draw();\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the keys on your Pusher dashboard.\n\nIn the code above, first, we register a new instance of Pusher then we use [Axios](https://www.npmjs.com/package/axios) to get all the sessions that have been saved to the database when the document is ready. We also created a new Pusher channel called `sessionChannel` and subscribed to a session event.\n\nWe defined a function `insertDatatable` and it inserts a new user record whenever Pusher sends an update.\n\nThat is everything! We can run the application now using this command:\n\n```\n    $ flask run\n```\n\nNow we can visit [127.0.0.1:5000](http://127.0.0.1:5000) to see the website and [127.0.0.1:5000/dashboard](http://127.0.0.1:5000/dashboard) to see the traffic monitor dashboard, here’s a display of what both screens look like when viewed side by side.\n\n![python-web-traffic-demo](//images.ctfassets.net/1es3ne0caaid/173irZ04McmEIE0K8cQoew/5fb82398a74f83f8353e95c7fc5a935a/python-web-traffic-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have learned how to integrate a realtime traffic monitor with our website using Python’s Flask, Pusher and JavaScript. \n\nThe source code for this tutorial is available on [GitHub.](https://github.com/neoighodaro/python-pusher-traffic-monitor)","metaTitle":"Build a web traffic monitor with Python","metaDescription":"Use Flask and JavaScript to create a web traffic monitoring dashboard. See realtime updates as visitors view the demo website."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3wnObjygveo6kAMEaw6KC6","type":"Entry","createdAt":"2018-05-20T15:07:53.709Z","updatedAt":"2018-05-20T15:12:58.214Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime table with Ruby on Rails and PostgreSQL","url":"realtime-table-ruby-rails","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/9jaswag/pusher-tables/","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6S5luSjtlYk4i8eM8AyO4I","type":"Entry","createdAt":"2018-02-02T13:39:48.331Z","updatedAt":"2018-02-12T14:41:19.307Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby","url":"ruby","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"hPWAADkjVmomS68E6seqQ","type":"Entry","createdAt":"2018-02-12T14:48:52.613Z","updatedAt":"2018-02-12T14:48:52.613Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby on Rails","url":"ruby-on-rails","type":"framework"}}],"reviewDate":"2018-05-19","description":"Build a Ruby on Rails application that monitors a PostegreSQL database and automatically updates in response to changes. Users will be able to enter data into a PostgreSQL database, and see their dashboard update instantly.","prerequisite":"A basic understanding of Ruby and CoffeeScript will help you with this tutorial. You need to already have Ruby and Rails installed on your machine, as well as PostgreSQL.","content":"The ability to update data in realtime is one of the top requirements for web applications in today’s world. Users prefer realtime update as opposed to constantly refreshing a page to see new information.\n\nWith that being said, implementing realtime update of information in any web application can be challenging and has to be done right. This post aims to show you how to achieve that with the help of Pusher in a Ruby application.\n\nA quick look at what we’ll be building:\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/SiO9sQmQbn0?rel=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen\u003e\u003c/iframe\u003e\n\n## Prerequisites\n\nA basic understanding of PostgreSQL, Ruby and CoffeeScript will help you with this tutorial. You should also have PostgreSQL installed. Kindly check the [PostgreSQL](https://www.postgresql.org/download/), [Ruby](https://www.ruby-lang.org/en/downloads/) and [Rails](http://guides.rubyonrails.org/getting_started.html) documentation for further installation steps.\n\n\n## Setting up the application\n\nBefore starting off, ensure you have both Ruby and Rails installed. Run the following code in your terminal:\n\n```\n    $ ruby -v      // 2.1 or above\n    $ rails -v   // 4.2 or above\n```\nNow lets run the command to setup the app:\n\n```  \n    $ rails new pusher-tables -T --database=postgresql\n```\nThe command above creates a new Rails application. The `-T` flag excludes generation of test files as we won’t be writing any tests.\n\nGo ahead and change directory into the newly created folder:\n\n```\n    $ cd pusher-tables\n```\nIn the root of your `pusher-tables` directory, open your `Gemfile` and add the following gems:\n\n```\n    # Gemfile\n    \n    gem 'bootstrap', '~\u003e 4.1.0'\n    gem 'jquery-rails'\n    gem 'pusher'\n    gem 'figaro'\n```\nIn your terminal, ensure you’re in the project directory and install the gems by running:\n\n```\n    $ bundle install\n```\n\n## Database setup\n\nNext, we have to create a database called `pusher-tables_development` for our app. Check out this [article](https://www.digitalocean.com/community/tutorials/how-to-setup-ruby-on-rails-with-postgres) on how to create a Postgres database and an associated user and password.\n\nIn your `database.yml` file, under the `development` key, add the following code:\n``` yaml\n    # config/database.yml\n    \n    ...\n    development:\n      \u003c\u003c: *default\n      database: pusher-tables_development // add this line if it isn't already there\n      username: database_user // add this line\n      password: user_password // add this line\n    ...\n```\nThe username and password in the code above should have access to the `pusher-tables_development` database. After that, run the following code to setup the database:\n\n```\n    # setup database\n    $ rails db:setup\n```\n\n## See it working\n\nAfter installing the gems, start the development server by running `rails s` and visit [http://localhost:300](http://localhost:3000/employees)0 in your browser. You should see the following:\n\n![youre-on-rails](//images.ctfassets.net/1es3ne0caaid/3sOsgC4S80gOKM8Waqkgui/87c5c9e64375cbb2f8f2516223f4e515/youre-on-rails.png)\n\n## Pusher account setup\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). A Pusher account is required for the realtime functionality in our app.\n\n![ruby-create-pusher-account](//images.ctfassets.net/1es3ne0caaid/6uDbn5kOyIOiKyeSeOKqeS/6136b86bc4d9b6ceff7fcf8458375a19/ruby-create-pusher-account.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar, then clicking the **Create Channels app** button on the bottom of the sidebar:\n\n![ruby-channels-dashboard](//images.ctfassets.net/1es3ne0caaid/5IDtPf0HhC4aKg66gguYq8/183e0b23ec44fdfc23a38921e11fe9e3/ruby-channels-dashboard.png)\n\nConfigure an app by providing basic information requested in the form presented. You can choose the environment you intend to integrate Pusher with to be provided with boilerplate code for that framework:\n\n![ruby-new-pusher-app](//images.ctfassets.net/1es3ne0caaid/3qnLmThfu8ue2ImYKKSw8a/2e4f39b15b8787e0f6d3b4f2ea022d95/ruby-new-pusher-app.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![ruby-app-keys](//images.ctfassets.net/1es3ne0caaid/1XHWE3GCeoCeqsMCO8uM2q/52523148497d08f6e9ba4f52fe0750f6/ruby-app-keys.png)\n\nNow that you have your Pusher API keys, head over to `config/initializers` directory. Create a `pusher.rb` file and add the following code:\n\n``` ruby\n    # config/initializers/pusher.rb\n    \n    require 'pusher'\n    \n    Pusher.app_id = ENV[\"PUSHER_APP_ID\"]\n    Pusher.key = ENV[\"PUSHER_KEY\"]\n    Pusher.secret = ENV[\"PUSHER_SECRET\"]\n    Pusher.cluster = ENV[\"PUSHER_CLUSTER\"]\n    Pusher.logger = Rails.logger\n    Pusher.encrypted = true\n```\nIn your terminal, run `figaro install`. It’ll generate an `application.yml` file. In the `application.yml` file add your Pusher keys:\n\n``` yaml\n    # config/application.yml\n    \n    PUSHER_APP_ID: 'xxxxxx'\n    PUSHER_KEY: 'xxxxxxxxxxxxxxxxx'\n    PUSHER_SECRET: 'xxxxxxxxxxxxxx'\n    PUSHER_CLUSTER: 'xx'\n```\n\n## Setting up the model and controller\n\nWith our app up and running, we’ll use Rails’ scaffolding feature to quickly setup our employees model and controller:\n\n```\n    // generate employee model and controllers\n    $ rails g scaffold employee name:string position:string office:string extension:string start_date:date\n    \n    // run database migration\n    $ rails db:migrate\n```\n\n## Setting up the landing page\n\nAfter running those commands, restart your server and reload your browser page. You should still see the welcome page. We’re about to change all that.\n\nAdd the following code to your route file:\n\n``` ruby\n    # config/routes.rb\n    \n    ...\n    root 'employees#index'\n    ...\n```\nWith that, your landing page should now contain a table with headings. Let’s style it up with Bootstrap.\n\nIn your `application.js` file, add the following code just before the last line:\n\n``` javascript\n    // app/assets/javascripts/application.js\n    \n    .....\n    //= require jquery3 # add this line\n    //= require popper # add this line\n    //= require bootstrap # add this line\n    //= require_tree .\n    ....\n```\nRename your `application.css` file to `application.scss`, import Bootstrap and add some custom syles:\n\n``` scss\n    // app/assets/stylesheets/application.scss\n    \n     @import \"bootstrap\";\n     @import url('https://fonts.googleapis.com/css?family=Josefin+Sans');\n    \n     body {\n      font-family: 'Josefin Sans', sans-serif;\n     }\n    \n     .navbar-brand {\n       color: #FFF !important;\n    \n       \u0026:hover {\n         background-color: unset;\n       }\n     }\n    \n     .form-control {\n       outline: none !important;\n       \n       \u0026:focus {\n        border-color: transparent !important;\n        border: 1px !important;\n       }\n     }\n```\nIf we restart our server and reload the app, we should see that the fonts have changed courtesy of Bootstrap.\n\nIf you encounter a RegExp error while trying to set up Bootstrap, In `config/boot.rb`, change the ExecJS runtime from Duktape to Node.\n\n``` ruby\n    # config/boot.rb\n    ENV['EXECJS_RUNTIME'] ='Node'\n```\n\n## Setting up the table\n\nTo setup our table, we’ll be using Bootstrap’s table . Replace the code in your `index.html.erb` file with the following:\n\n``` html\n    \u003c%# app/views/employees/index.html.erb %\u003e\n    \n    \u003cdiv class='container-fluid'\u003e\n      \u003cp id=\"notice\"\u003e\u003c%= notice %\u003e\u003c/p\u003e\n      \u003cdiv class='row py-3 px-3'\u003e\n        \u003cdiv class='col-12 col-sm-8'\u003e\n          \u003ch3 class=''\u003eEmployees\u003c/h3\u003e\n          \u003ctable id='employee-table' class=\"table table-hover\"\u003e\n            \u003cthead  class=\"thead-light\"\u003e\n              \u003ctr\u003e\n                \u003cth\u003eName\u003c/th\u003e\n                \u003cth\u003ePosition\u003c/th\u003e\n                \u003cth\u003eOffice\u003c/th\u003e\n                \u003cth\u003eExtension\u003c/th\u003e\n                \u003cth\u003eStart date\u003c/th\u003e\n                \u003cth colspan=\"3\"\u003e\u003c/th\u003e\n              \u003c/tr\u003e\n            \u003c/thead\u003e\n    \n            \u003ctbody\u003e\n              \u003c% @employees.each do |employee| %\u003e\n                \u003ctr\u003e\n                  \u003ctd\u003e\u003c%= employee.name %\u003e\u003c/td\u003e\n                  \u003ctd\u003e\u003c%= employee.position %\u003e\u003c/td\u003e\n                  \u003ctd\u003e\u003c%= employee.office %\u003e\u003c/td\u003e\n                  \u003ctd\u003e\u003c%= employee.extension %\u003e\u003c/td\u003e\n                  \u003ctd\u003e\u003c%= employee.start_date %\u003e\u003c/td\u003e\n                  \u003ctd\u003e\u003c%= link_to 'Show', employee %\u003e\u003c/td\u003e\n                  \u003ctd\u003e\u003c%= link_to 'Edit', edit_employee_path(employee) %\u003e\u003c/td\u003e\n                  \u003ctd\u003e\u003c%= link_to 'Delete', employee, method: :delete, data: { confirm: 'Are you sure?' } %\u003e\u003c/td\u003e\n                \u003c/tr\u003e\n              \u003c% end %\u003e\n            \u003c/tbody\u003e\n          \u003c/table\u003e\n          \u003cbr\u003e\n        \u003c/div\u003e\n    \n        \u003cdiv class='col-12 col-sm-4'\u003e\n          \u003ch3\u003eNew Employee\u003c/h3\u003e\n          \u003c%= render 'form', employee: @employee %\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\nUpdate the index method of the employees controller, to include the following:\n\n``` ruby\n    # app/controllers/employees_controller.rb\n    \n    class EmployeesController \u003c ApplicationController\n      ...\n      def index\n        @employees = Employee.all\n        @employee = Employee.new # add this line\n      end\n      ...\n    end\n```\nThe code above adds Bootstrap styling to the table on our landing page. It also instantiates a new employee record in the `index` method of the employees controller. If you reload the landing page, you should see the table and form in all its glory.\n\n\n## Adding new records to the table\n\nCurrently adding a new employee record redirects us a different page. We’d like to handle that with AJAX. To do that, we add `remote: true` and `format: :json` to our form. Replace the code in`_form.html.erb` with the following:\n\n``` html\n    // app/views/employees/_form.html.erb\n    \n    \u003c%= form_with(model: employee, remote: true, format: :json, id: 'add_employee') do |form| %\u003e\n      \u003c% if employee.errors.any? %\u003e\n        \u003cdiv id=\"error_explanation\"\u003e\n          \u003ch2\u003e\u003c%= pluralize(employee.errors.count, \"error\") %\u003e prohibited this employee from being saved:\u003c/h2\u003e\n    \n          \u003cul\u003e\n          \u003c% employee.errors.full_messages.each do |message| %\u003e\n            \u003cli\u003e\u003c%= message %\u003e\u003c/li\u003e\n          \u003c% end %\u003e\n          \u003c/ul\u003e\n        \u003c/div\u003e\n      \u003c% end %\u003e\n    \n      \u003cdiv class=\"field\"\u003e\n        \u003c%= form.label :name %\u003e\n        \u003c%= form.text_field :name, id: :employee_name, class: \"form-control\" %\u003e\n      \u003c/div\u003e\n    \n      \u003cdiv class=\"field\"\u003e\n        \u003c%= form.label :position %\u003e\n        \u003c%= form.text_field :position, id: :employee_position, class: \"form-control\" %\u003e\n      \u003c/div\u003e\n    \n      \u003cdiv class=\"field\"\u003e\n        \u003c%= form.label :office %\u003e\n        \u003c%= form.select :office, [['Lagos', 'Lagos'], ['New York', 'New York',], ['Lisbon', 'Lisbon']], {}, { class: \"form-control\", id: \"employee_office\" } %\u003e\n      \u003c/div\u003e\n    \n      \u003cdiv class=\"field\"\u003e\n        \u003c%= form.label :extension %\u003e\n        \u003c%= form.text_field :extension, id: :employee_extension, class: \"form-control\" %\u003e\n      \u003c/div\u003e\n    \n      \u003cdiv class=\"field\"\u003e\n        \u003c%= form.label :start_date %\u003e\n        \u003c%= form.date_field :start_date, id: :employee_start_date, class: \"form-control\" %\u003e\n      \u003c/div\u003e\n    \n      \u003cdiv class=\"actions\"\u003e\n        \u003c%= form.submit 'Create Employee', class: \"btn btn-success\" %\u003e\n      \u003c/div\u003e\n    \u003c% end %\u003e\n```\nNow that our form uses AJAX, we’ll handle updating the table with CoffeeScript.\n\n``` coffeescript\n    # app/assets/javascripts/employees.coffee\n    \n    updateTable = (data) -\u003e\n      $('#employee-table tbody').append \"\"\"\n        \u003ctr\u003e\n          \u003ctd\u003e#{data.name}\u003c/td\u003e\n          \u003ctd\u003e#{data.position}\u003c/td\u003e\n          \u003ctd\u003e#{data.office}\u003c/td\u003e\n          \u003ctd\u003e#{data.extension}\u003c/td\u003e\n          \u003ctd\u003e#{data.start_date}\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"/employees/#{data.id}\"\u003eShow\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"/employees/#{data.id}/edit\"\u003eEdit\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca data-confirm=\"Are you sure?\" rel=\"nofollow\" data-method=\"delete\" href=\"/employees/#{data.id}\"\u003eDelete\u003c/a\u003e\u003c/td\u003e\n        \u003c/tr\u003e\n      \"\"\"\n      return\n    \n    $ -\u003e\n      $('#add_employee').on 'ajax:success', (data) -\u003e\n        $('#add_employee')[0].reset()\n        updateTable data.detail[0]\n        return\n      return\n```\nIn the above code, we add an `ajax:success` event listener to our form courtesy of [jQuery-ujs.](https://github.com/rails/jquery-ujs/wiki/ajax) Whenever we add new employee records, we get our newly added employee as a response and update our table with it.\n\nLets reload our page and add a few employees, they should pop up on the page as soon as we hit submit.\n\n\n## Realtime service with Pusher\n\nTo update our table realtime, we publish the new employee record to a channel and subscribe to it on the frontend of our app. In the employee model, we add an `after_commit` callback which calls a method that publishes the new record. We use `after_commit` so data is published whenever we add or update a record.\n\nAdd the following code to the employee model:\n\n``` ruby\n    # app/models/employee.rb\n    \n    class Employee \u003c ApplicationRecord\n      after_commit :notify_pusher, on: [:create, :update]\n    \n      def notify_pusher\n        Pusher.trigger('employee', 'new', self.as_json)\n      end\n    end\n```\nHere, our initialized Pusher client triggers an event called `new` through a channel named `employee.`\n\n\n## Updating the UI\n\nSo the server is pushing data out on each change, now it’s up to the client to listen for those changes and do something with that data. To do this, we rename our `employees.coffee` file to `employees.coffee.erb` so we can sprinkle some Ruby code in it. \n\nUpdate the file with the following code:\n\n``` coffeescript\n    # app/assets/javascripts/employees.coffee.erb\n    \n    updateTable = (data) -\u003e\n      $('#employee-table tbody').append \"\"\"\n        \u003ctr\u003e\n          \u003ctd\u003e#{data.name}\u003c/td\u003e\n          \u003ctd\u003e#{data.position}\u003c/td\u003e\n          \u003ctd\u003e#{data.office}\u003c/td\u003e\n          \u003ctd\u003e#{data.extension}\u003c/td\u003e\n          \u003ctd\u003e#{data.start_date}\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"/employees/#{data.id}\"\u003eShow\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"/employees/#{data.id}/edit\"\u003eEdit\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca data-confirm=\"Are you sure?\" rel=\"nofollow\" data-method=\"delete\" href=\"/employees/#{data.id}\"\u003eDelete\u003c/a\u003e\u003c/td\u003e\n        \u003c/tr\u003e\n      \"\"\"\n      return\n    \n    $ -\u003e\n      $('#add_employee').on 'ajax:success', (data) -\u003e\n        $('#add_employee')[0].reset()\n        return\n      pusher = new Pusher('\u003c%= ENV[\"PUSHER_KEY\"] %\u003e',\n        cluster: '\u003c%= ENV[\"PUSHER_CLUSTER\"] %\u003e'\n        encrypted: true)\n      channel = pusher.subscribe('employee')\n      channel.bind 'new', (data) -\u003e\n        updateTable data\n        return\n      return\n```\nLastly, add the Pusher library inside the head tag in the `application.html.erb` file just before the `javascript_include_tag`:\n\n``` html\n    \u003c%# app/views/layouts/application.html.erb %\u003e\n    \n    \u003chead\u003e\n        \u003ctitle\u003eRealtimeTable\u003c/title\u003e\n        \u003c%= csrf_meta_tags %\u003e\n    \n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"\u003e\n        \u003c%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e # add this line\n        \u003c%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %\u003e\n      \u003c/head\u003e\n```\n\n## Bringing it all together\n\nRestart the development server if it is currently running. Check your page on [http://localhost:3000](http://localhost:3000/employees)\n\n\n## Conclusion\n\nSo far, we have learnt how to leverage the realtime functionality provided by Pusher to display updates in realtime. Feel free to explore more by visiting Pusher’s documentation. Lastly, the complete source code of this demo application is on [Github](https://github.com/9jaswag/pusher-tables/).\n\n","metaTitle":"Build a realtime table with Ruby on Rails","metaDescription":"This tutorial guides you through building a Ruby on Rails application that monitors a PostegreSQL database. The app allows users to enter data. It includes a dashboard that automatically updates in response to changes in the database."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2HydF0xvQQ64E2kcqeoWsk","type":"Entry","createdAt":"2018-05-16T07:58:39.162Z","updatedAt":"2020-06-19T13:00:48.116Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a realtime data table with React and Go","url":"realtime-data-table-react-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/pusher-go-running-results-table","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-05-15","description":"Build a simple app with Go and React. The app displays live race results.","prerequisite":"You need to have Go installed and configured on your system. Some knowledge of Go is required.","content":"## Introduction\n\nIn this article we are going to build a simple web application for storing and displaying live race results - for example from the Olympics 100m. We are going to use the Go language for our backend and the React framework to build our web frontend. We are then going to use Pusher Channels to give live updates to all the users currently viewing the table, allowing them to see finishers in real time.\n\n![data-table-react-go-demo](//images.ctfassets.net/1es3ne0caaid/5NUFqJcGcw2wAmk8AM2GGe/fc658f6056560583cc0cac1f9013ab71/data-table-react-go-demo.gif)\n\n## Prerequisites\n\nThis article focuses on using Go and React. As such, it is important that you have Go already installed and configured on your system - including having the `GOPATH` set up correctly. If you do not know how to do this then the [Go documentation](https://golang.org/doc/install) can explain this all. A certain level of understanding of Go is assumed to follow along with this article. The “[A Tour of Go](https://tour.golang.org/welcome/1)” tutorial is a fantastic introduction if you are new to the language.\n\nWe are also going to use the [dep](https://golang.github.io/dep/) tool to manage the dependencies of our backend application, so make sure that this is correctly installed as well.\n\nFinally, in order to develop and run our web UI you will need to have a recent version of [Node.js](https://nodejs.org/en/) installed and correctly set up. A certain level of understanding of JavaScript is also assumed to follow along with this article.\n\n## Create a Pusher account\n\nIn order to follow along, you will need to create a free Pusher account. This is done by visiting the [Pusher dashboard](https://dashboard.pusher.com/) and logging in, creating a new account if needed. Next click on **Channels apps** on the sidebar, followed by **Create Channels app.** \n\n![data-table-react-go-create-pusher-app](//images.ctfassets.net/1es3ne0caaid/MTDjouVm8u6YCgA4QqMyE/53f7a264aabf6f38c2b3e5d772723404/data-table-react-go-create-pusher-app.png)\n\nFill out this dialog as needed and then click the **Create my app** button. Then click on **App Keys** and note down the credentials for later.\n\n![data-table-react-go-app-keys](//images.ctfassets.net/1es3ne0caaid/34AiASpSEMAWKE8a6SUyWC/03000beb9ff05dcca5b8d781c9e564d4/data-table-react-go-app-keys.png)\n\n## Building the backend service\n\nWe are going to write our backend service using the Go language, using the library to power our HTTP service.\n\nOur service is going to offer two endpoints:\n\n- GET /results - this returns the current list of results.\n- POST /results - this creates a new result to add to the list.\n\nTo start with, we need to create an area to work with. Create a new directory under your `GOPATH` in which to work:\n\n```\n    # Mac and Linux\n    $ mkdir -p $GOPATH/src/pusher/running-results-table\n    $ cd $GOPATH/src/pusher/running-results-table\n    \n    # Windows Powershell\n    mkdir -path $env:GOPATH/src/pusher/running-results-table\n    cd $env:GOPATH/src/pusher/running-results-table\n```\n\nWe can then initialise our work area for this project. This is done using the `dep` tool:\n\n```\n    $ dep init\n```\nDoing this will create the **`Gopkg.toml` and `Gopkg.lock` files used to track our dependencies, and the `vendor` **directory which is used to store vendored dependencies.\n\nThe next thing to do is to create our data store. We are going to do this entirely in memory for this article, but in reality you would use a real database, for example PostgreSQL or MongoDB.\n\nCreate a new directory called `internal/db` under our work area, and create a `db.go` file in here as follows:\n\n\u003e **Note:** the use of `internal` here is a convention that indicates that this is internal to our project and not to be imported by any other projects.\n\n``` go\n    package db\n    type Record struct {\n        Name string  `json:\"name\"`\n        Time float32 `json:\"time\"`\n    }\n    func NewRecord(name string, time float32) Record {\n        return Record{name, time}\n    }\n    type Database struct {\n        contents []Record\n    }\n    func New() Database {\n        contents := make([]Record, 0)\n        return Database{contents}\n    }\n    func (database *Database) AddRecord(r Record) {\n        database.contents = append(database.contents, r)\n    }\n    func (database *Database) GetRecords() []Record {\n        return database.contents\n    }\n```\nHere we are creating a new type called `Record` that represents the data that we store, and a new struct called `Database` that represents the actual database we are using. We then create some methods on the `Database` type to add a record and to get the list of all records.\n\nNext we can create our web server. For this we are going to create a new directory called `internal/webapp` under our work area, and a new file called `webapp.go` in this directory as follows:\n\n``` go\n    package webapp\n    import (\n        \"net/http\"\n        \"pusher/running-results-table/internal/db\"\n        \"github.com/gin-contrib/cors\"\n        \"github.com/gin-gonic/gin\"\n    )\n    func StartServer(database *db.Database) {\n        r := gin.Default()\n        r.Use(cors.Default())\n        r.GET(\"/results\", func(c *gin.Context) {\n            results := database.GetRecords()\n            c.JSON(http.StatusOK, gin.H{\n                \"results\": results,\n            })\n        })\n        r.POST(\"/results\", func(c *gin.Context) {\n            var json db.Record\n            if err := c.BindJSON(\u0026json); err == nil {\n                database.AddRecord(json)\n                c.JSON(http.StatusCreated, json)\n            } else {\n                c.JSON(http.StatusBadRequest, gin.H{})\n            }\n        })\n        r.Run()\n    }\n```\nThis creates a function called `StartServer` that will create and run our web server, defining two routes on it to do the processing that we need.\n\nWe are also importing some packages that aren’t currently available - `github.com/gin-gonic/gin` and `github.com/gin-contrib/cors`. The first of these is the Gin web server itself, and the second is the contrib library to enable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS), so that our webapp can access the backend server. \n\nWe can now use `dep` to ensure that this is available for us, by executing `dep ensure` from our top level. This will download the necessary packages and put them into our `vendor` directory ready to be used:\n\n```\n    $ dep ensure\n```\nFinally, we create a main program that actually makes use of this all. For this, in the top of the work area we create a file called `running-results-table.go` as follows:\n\n``` go\n    package main\n    \n    import (\n            \"pusher/running-results-table/internal/db\"\n            \"pusher/running-results-table/internal/webapp\"\n    )\n    \n    func main() {\n            database := db.New()\n    \n            webapp.StartServer(\u0026database)\n    }\n```\nThis makes use of our `db` and `webapp` modules that we’ve just written, and starts everything up correctly.\n\nWe can now run our application by executing `go run running-results-table.go`:\n\n```\n    $ go run running-results-table.go\n    [GIN-debug] [WARNING] Running in \"debug\" mode. Switch to \"release\" mode in production.\n     - using env:        export GIN_MODE=release\n     - using code:        gin.SetMode(gin.ReleaseMode)\n    \n    [GIN-debug] GET    /results                  --\u003e pusher/running-results-table/internal/webapp.StartServer.func1 (3 handlers)\n    [GIN-debug] POST   /results                  --\u003e pusher/running-results-table/internal/webapp.StartServer.func2 (3 handlers)\n    [GIN-debug] Environment variable PORT is undefined. Using port :8080 by default\n    [GIN-debug] Listening and serving HTTP on :8080\n```\nAlternatively, we can build an executable using `go build running-results-table.go`. This executable can then be distributed however we need to do so - for example, copying it into a Docker container or directly onto our production VMs.\n\n## Sending live updates when data changes\n\nAt this point, we can correctly create new records and retrieve all of the records that have been created. However, there is no support for live updates at this point - the client would need to keep re-requesting the data to see if anything changes. \n\nAs a better solution to this, we are going to use Pusher Channels to automatically emit events whenever a new record is created, so that all listening clients can automatically update themselves without needing to poll the server. Additionally, we are going to use Go channels to isolate the sending of Pusher events from the actual HTTP request - allowing our server to respond to the client faster, whilst still sending the event a fraction of a second later.\n\nCreate a new directory called `internal/notifier` under our work area, and in this create a file called `notifier.go` as follows:\n\n``` go\n    package notifier\n    import (\n        \"pusher/running-results-table/internal/db\"\n        \"github.com/pusher/pusher-http-go\"\n    )\n    type Notifier struct {\n        notifyChannel chan\u003c- bool\n    }\n    func notifier(database *db.Database, notifyChannel \u003c-chan bool) {\n        client := pusher.Client{\n            AppId:   \"PUSHER_APP_ID\",\n            Key:     \"PUSHER_KEY\",\n            Secret:  \"PUSHER_SECRET\",\n            Cluster: \"PUSHER_CLUSTER\",\n            Secure:  true,\n        }\n        for {\n            \u003c-notifyChannel\n            data := map[string][]db.Record{\"results\": database.GetRecords()}\n            client.Trigger(\"results\", \"results\", data)\n        }\n    }\n    func New(database *db.Database) Notifier {\n        notifyChannel := make(chan bool)\n        go notifier(database, notifyChannel)\n        return Notifier{\n            notifyChannel,\n        }\n    }\n    func (notifier *Notifier) Notify() {\n        notifier.notifyChannel \u003c- true\n    }\n```\n\n\u003e **Note:** remember to update the values PUSHER_APP_ID, PUSHER_KEY, PUSHER_SECRET and PUSHER_CLUSTER to the real values you got when registering your Pusher Channels application.\n\nThere is quite a lot going on here, so lets work through it.\n\nThe first thing we do is define a new type called `Notifier`. This is our interface that we expose to the rest of the code through which we can notify clients of new results.\n\nNext, we define a non-exported function called `notifier` that is given a reference to the database and a Go channel. This function will create our Pusher client, and then start an infinite loop of reading from the channel (which blocks until a new message comes in), retrieving the latest list of results from the database and sending them off to Pusher. We deliberately get the latest list ourselves here in case there was some delay in processing the message - this way we’re guaranteed not to miss anything.\n\nWe then create a new method called `New` that will return a new `Notifier`. Importantly in here we also start a new go-routine that runs our `notifier` function, which essentially means that there is a new thread of execution running that function. \n\nFinally we have a `Notify` method on our `Notifier` that does nothing more than push a new value down our Go channel.\n\nThe end result of this is that, whenever someone calls `Notifier.Notify()`, we will trigger our go-routine - on a separate thread - to retrieve the current results from the database and send them to Pusher.\n\nWe now need to use `dep` to again ensure that this is available for us, by executing `dep ensure` from our top level.\n\n```\n    $ dep ensure\n```\nNow we want to actually make use of it. To do this, we want to update our `StartServer` method in `internal/webapp/webapp.go` to also take a new parameter `notifierClient *notifier.Notifier`. The new signature should be:\n\n``` go\n    func StartServer(database *db.Database, notifierClient *notifier.Notifier) {\n```\nWe’ll also need to update the imports at the top to include the `notifier` package, as follows:\n\n``` go\n    import (\n            \"net/http\"\n            \"pusher/running-results-table/internal/db\"\n            \"pusher/running-results-table/internal/notifier\"\n    \n            \"github.com/gin-contrib/cors\"\n            \"github.com/gin-gonic/gin\"\n    )\n```\n\nThen, we want to update the handling in our POST route to call `notifierClient.Notify()` immediately after (or before, it makes little difference) the call to return the HTTP Status to the caller. This means that the whole route looks like:\n\n``` go\n        r.POST(\"/results\", func(c *gin.Context) {\n            var json db.Record\n            if err := c.BindJSON(\u0026json); err == nil {\n                database.AddRecord(json)\n                c.JSON(http.StatusCreated, json)\n                notifierClient.Notify()\n            } else {\n                c.JSON(http.StatusBadRequest, gin.H{})\n            }\n        })\n```\nWe now need to provide the `Notifier` to the `StartServer` function for it to use. Update `running-results-table.go` to read as follows:\n\n``` go\n    package main\n    import (\n            \"pusher/running-results-table/internal/db\"\n            \"pusher/running-results-table/internal/notifier\"\n            \"pusher/running-results-table/internal/webapp\"\n    )\n    func main() {\n            database := db.New()\n            notifierClient := notifier.New(\u0026database)\n            webapp.StartServer(\u0026database, \u0026notifierClient)\n    }\n```\nAt this point, you can start up the server, call the endpoint by hand (using something like cURL or Postman), and then watch the messages appear in your Pusher Channels dashboard.\n\n\n## Building the web application\n\nNow that we have our backend service, we want a UI to make use of it. This will be built using the [Create React App](https://github.com/facebook/create-react-app) tool and styled using Semantic UI.\n\nTo start with, we’ll create our new UI project. If `create-react-app` isn’t installed already then do so:\n\n```\n    $ npm install -g create-react-app\n```\nThen we can use it to set up the UI project:\n\n```\n    $ create-react-app ui\n    $ cd ui\n```\nNext we want to remove some details that we just don’t care about. These are the default UI components that come with the created application. For this, delete the files `src/App.css`, `src/App.test.js`, `src/index.css` and `src/logo.svg`*.*\n\nNow replace `src/App.js` with the following:\n\n``` javascript\n    import React, { Component } from 'react';\n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default App;\n```\nAnd remove the following line from `src/index.js`:\n\n``` javascript\n    import './index.css';\n```\nNow we want to add in Semantic UI to our build. This is simply done by adding the packages and including the CSS into our main file. Add the packages as follows:\n\n```\n    $ npm install --save semantic-ui-react semantic-ui-css\n    npm WARN ajv-keywords@3.2.0 requires a peer of ajv@^6.0.0 but none is installed. You must install peer dependencies yourself.\n    \n    + semantic-ui-react@0.80.0\n    + semantic-ui-css@2.3.1added 7 packages in 9.377s\n```\nThen add the following line back in to `src/index.js`:\n\n``` javascript\n    import 'semantic-ui-css/semantic.min.css';\n```\n\n### Creating our data table\n\nNext we want to create the data table to render. For this, we want to create a new file called `src/ResultsTable.js` as follows:\n\n``` javascript\n    import React from 'react';\n    import { Table, Header, Segment, Label } from 'semantic-ui-react'\n    export default function ResultsTable({results}) {\n        const rows = results.map(((result, index) =\u003e {\n            let color;\n            if (index === 0) {\n                color='yellow';\n            } else if (index === 1) {\n                color='grey';\n            } else if (index === 2) {\n                color='orange';\n            }\n            return (\n                \u003cTable.Row key={ index }\u003e\n                    \u003cTable.Cell\u003e\n                        \u003cLabel ribbon color={color}\u003e{ index + 1 }\u003c/Label\u003e\n                    \u003c/Table.Cell\u003e\n                    \u003cTable.Cell\u003e{ result.name }\u003c/Table.Cell\u003e\n                    \u003cTable.Cell\u003e{ result.time }\u003c/Table.Cell\u003e\n                \u003c/Table.Row\u003e\n            );\n        }));\n        return (\n            \u003cdiv className=\"ui container\"\u003e\n                \u003cSegment\u003e\n                    \u003cHeader\u003eResults \u003c/Header\u003e\n                    \u003cTable striped\u003e\n                        \u003cTable.Header\u003e\n                            \u003cTable.Row\u003e\n                                \u003cTable.HeaderCell\u003ePosition\u003c/Table.HeaderCell\u003e\n                                \u003cTable.HeaderCell\u003eName\u003c/Table.HeaderCell\u003e\n                                \u003cTable.HeaderCell\u003eTime\u003c/Table.HeaderCell\u003e\n                            \u003c/Table.Row\u003e\n                        \u003c/Table.Header\u003e\n                        \u003cTable.Body\u003e\n                            { rows }\n                        \u003c/Table.Body\u003e\n                    \u003c/Table\u003e\n                \u003c/Segment\u003e\n            \u003c/div\u003e\n        );\n    }\n```\nNow we need to be able to get the actual data to render. For this we will create a new `src/ConnectedResultsTable.js` file that manages the state of our component, does all of the API interactions, and then renders our table with the results. This looks as follows:\n\n``` javascript\n    import React from 'react';\n    import ResultsTable from './ResultsTable';\n    export default class ConnectedResultsTable extends React.Component {\n        state = {\n            results: []\n        };\n        componentDidMount() {\n            fetch('http://localhost:8080/results')\n                .then((response) =\u003e response.json())\n                .then((response) =\u003e this.setState(response));\n        }\n        render() {\n            return \u003cResultsTable results={this.state.results} /\u003e;\n        }\n    }\n```\nThis simply uses the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) to retrieve the results when the component is first mounted, and then renders whatever results are currently stored in the state. This means that we will only see new results by re-rendering the page, but we’ll fix that later.\n\n\u003e **Note:** the component uses a hard-coded URL of “http://localhost:8080”. This is where our local development server is running, but you’ll need to change this for production.\n\nFinally, we want to actually render the table. This is done by updating the `src/App.js` file to look as follows:\n\n``` javascript\n    import React, { Component } from 'react';\n    import ConnectedResultsTable from './ConnectedResultsTable';\n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cConnectedResultsTable /\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default App;\n```\n\n### Adding new data\n\nIn order to add new data to the table, we’re going to add a simple form below our table that submits a new record to our backend. For this, we will create a new file called `src/NewResultsForm.js` as follows:\n\n``` javascript\n    import React from 'react';\n    import { Form, Header, Segment, Button } from 'semantic-ui-react'\n    export default class NewResultsForm extends React.Component {\n        state = {\n            name: '',\n            time: ''\n        };\n        onChangeName = this._onChangeName.bind(this);\n        onChangeTime = this._onChangeTime.bind(this);\n        onSubmit = this._onSubmit.bind(this);\n        render() {\n            return (\n                \u003cdiv className=\"ui container\"\u003e\n                    \u003cSegment vertical\u003e\n                        \u003cHeader\u003eNew Result\u003c/Header\u003e\n                        \u003cForm onSubmit={this.onSubmit}\u003e\n                            \u003cForm.Field\u003e\n                                \u003clabel\u003eName\u003c/label\u003e\n                                \u003cinput placeholder='Name' value={this.state.name} onChange={this.onChangeName} /\u003e\n                            \u003c/Form.Field\u003e\n                            \u003cForm.Field\u003e\n                                \u003clabel\u003eTime\u003c/label\u003e\n                                \u003cinput placeholder='Time' value={this.state.time} onChange={this.onChangeTime} /\u003e\n                            \u003c/Form.Field\u003e\n                            \u003cButton type='submit'\u003eSubmit\u003c/Button\u003e\n                        \u003c/Form\u003e\n                    \u003c/Segment\u003e\n                \u003c/div\u003e\n            );\n        }\n        _onChangeName(e) {\n            this.setState({\n                name: e.target.value\n            });\n        }\n        _onChangeTime(e) {\n            this.setState({\n                time: e.target.value\n            });\n        }\n        _onSubmit() {\n            const payload = {\n                name: this.state.name,\n                time: parseFloat(this.state.time)\n            };\n            fetch('http://localhost:8080/results', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(payload)\n            });\n            this.setState({\n                name: '',\n                time: ''\n            });\n        }\n    }\n```\n\n\u003e **Note:** this assumes that the values entered are legal. It does not do any validation. If you enter a time that is not a number then you will not get the results you expected.\n\nNext add this in to the `src/App.js` file as well. Update the file to look as follows:\n\n``` javascript\n    import React, { Component } from 'react';\n    import ConnectedResultsTable from './ConnectedResultsTable';\n    import NewResultsForm from './NewResultsForm';\n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cConnectedResultsTable /\u003e\n            \u003cNewResultsForm /\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default App;\n```\n### Receiving live updates from Pusher\n\nNow that we’ve got our data table, we want to make it update in real time. We will make use of the official `pusher-js` module for this interaction. Install this as follows:\n\n```\n    $ npm install --save pusher-js\n```\nWe then add in the Pusher client to our `src/ConnectedResultsTable.js` file. Firstly add the following to the top of the file:\n\n``` javascript\n    import Pusher from 'pusher-js';\n    const socket = new Pusher('PUSHER_KEY', {\n        cluster: 'PUSHER_CLUSTER',\n        encrypted: true\n    });\n```\n\n\u003e **Note:** remember to update the values PUSHER_KEY and PUSHER_CLUSTER to the real values you got when registering your Pusher Channels application.\n\nThen add the following in to the `componentDidMount` method:\n\n``` javascript\n            const channel = socket.subscribe('results');\n            channel.bind('results', (data) =\u003e {\n                this.setState(data);\n            });\n```\n\nThis will automatically update our state based on receiving the data from Pusher, which in turn will automatically cause our table to re-render with the new data.\n\nEnsure that the backend is running, by executing `go run running-results-table.go` as before, then start the front end by:\n\n```\n    $ npm start\n```\nAnd our application is ready to go.\n\n![data-table-react-go-demo](//images.ctfassets.net/1es3ne0caaid/5NUFqJcGcw2wAmk8AM2GGe/fc658f6056560583cc0cac1f9013ab71/data-table-react-go-demo.gif)\n\n## Conclusion\n\nThis article shows how we can easily incorporate Pusher Channels into a Go web application to give realtime updates to our clients.\n\nAll of the source code from this article is available on [GitHub](https://github.com/sazzer/pusher-go-running-results-table). Why not try extending it to support more results tables, or more types of event?","metaTitle":"Creating a realtime data table with React and Go","metaDescription":"In this tutorial you will create a simple web app using Go and React. The app records and displays live race results."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"73w2yjT0nmQgUQISKoSuuA","type":"Entry","createdAt":"2018-05-08T07:23:31.792Z","updatedAt":"2020-06-19T13:20:48.240Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime table with Angular","url":"realtime-table-angular","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/realtime-ng-table","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-05-07","description":"Create an Angular web app featuring a table interface that updates in realtime to reflect changes in the database.","prerequisite":"You will need Node and npm installed on your machine. A basic understanding of JavaScript will be helpful.","content":"## Introduction\n\nIn a traditional web app, the clients (browser) has no idea when the state of the server may have changed. It either polls for changes at a particular interval or waits for the user to initiate the change. With realtime features, information is transmitted (almost) instantaneously between the users and the server. Pusher helps to bring realtime apps to the masses with their simple APIs from the client end down to the server.\n\nIn this tutorial, we’ll demonstrate how to integrate [Pusher](https://pusher.com/) with an [Angular](http://angular.io/) application. We will  create a realtime table, where we don’t need to refresh our page or component anytime there’s a change to our table’s data, our table should immediately update based on the current state of the data.\n\n![tables-angular-demo](//images.ctfassets.net/1es3ne0caaid/1qlaJYq8G0U26I464gIeCM/705d08d6b78ac01afec901b3e34a7ac8/tables-angular-demo.gif)\n\n## Prerequisites\n\nWe are going to make use of the following dependencies: \n\n- [Angular 4+](http://angular.io/): a platform that makes it easy to build applications with the web. Angular combines declarative templates, dependency injection, end to end tooling, and integrated best practices to solve development challenges. \n\n\n- [Pusher](https://github.com/pusher/pusher-js): a hosted service that makes it super-easy to add realtime data and functionality to web and mobile applications. It has different products based on the need of your application. \n\n\n- [Bootstrap 4](http://getbootstrap.com/): an open source toolkit for developing with HTML and CSS. It includes HTML and CSS based design templates for typography, forms, buttons, tables, navigation, modals, image carousels and many other, as well as optional JavaScript plugins.\n\n\n- [open-iconic](https://useiconic.com/open): an open source icon set with 223 marks in SVG, webfont and raster formats\n\n\u003e Please ensure you have Node and npm installed before starting the tutorial.\n\u003e No knowledge of Angular is required, but a basic understanding of Javascript (not necessarily Typescript) may be helpful.\n\n## Let’s build our realtime application\n\nBootstrapping with [A](https://github.com/angular/angular-cli)[ngular-cli](https://github.com/angular/angular-cli): \n```\n    npm install -g @angular/cli\n    ng new realtimeNgTable\n    cd realtimeNgTable\n```\nWe installed a command line interface to scaffold and build Angular apps globally. It exposes `ng` in our terminal for us to make use of the [commands](https://github.com/angular/angular-cli#generating-and-serving-an-angular-project-via-a-development-server) available. To confirm everything went well, run the below command on your terminal within the newly created app folder `/realtimeNgTable`.\n\n```\n    ng serve\n```\nYou should see this:\n\n![tables-angular-welcome-screen](//images.ctfassets.net/1es3ne0caaid/7Cw6E4WHFmaOogyKkK0MA/a660fc968171c614fd566c33c5e00d7d/tables-angular-welcome-screen.png)\n\nInstalling dependencies:\n```\n    npm install bootstrap open-iconic @theo4u/ng-alert pusher-js\n```\nOpen `.angular-cli.json` within our application root folder and update the `styles` field to look like so:\n```\n    \"styles\": [\n      \"../node_modules/bootstrap/dist/css/bootstrap.css\",\n      \"../node_modules/open-iconic/font/css/open-iconic-bootstrap.css\",\n      \"../node_modules/@theo4u/ng-alert/style.css\",\n      \"styles.css\"\n    ]\n```\nOpen `src/styles.css` and add the below CSS to it:\n\n``` css\n    /* You can add global styles to this file, and also import other style files */\n    .box-shadow { box-shadow: 0 .25rem .75rem rgba(0, 0, 0, .05); }\n    \n    /* ngAlert customization */\n    .app-level-alert {\n      padding-top: 10px;\n    }\n```\nWe added a utility style for adding shadows to our div and also for making our alert align later on.\n\nFinally, open `src/app/app.module.ts` to add `NgAlertModule` to the `imports` array: \n\n``` typescript\n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule } from '@angular/core';\n    import { NgAlertModule } from '@theo4u/ng-alert';\n    import { AppComponent } from './app.component'; \n    \n    @NgModule({\n      declarations: [\n        AppComponent\n      ],\n      imports: [\n        BrowserModule,\n        NgAlertModule\n      ],\n      providers: [],\n      bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n```\nAt this point, we have successfully fixed our app dependencies and styling.\n\nNext, we need to create two services to manage our Pusher instance (we don’t have to always create a new instance of Pusher anytime we want to use it, we can use just one instance of it throughout the entire app) and our employees (interaction with the remote server and vice versa for employee’s data):\n\n```\n    ng g s services/pusher --spec false\n    ng g s services/employee --spec false\n    ng g i interfaces/iemployee\n```\nWe used another command of Angular CLI, which in full is `ng generate service path/name`. This creates a folder if not existing called `services/` and place our service files there. We also used `--spec false`  to let the Angular CLI know we don’t need to generate test file for the service file. The last comand generates an employee interface to help give an idea of what an employee object should have.\n\nOpen `src/app/services/pusher.service.ts` and update it to look like the one below:\n\n``` typescript\n    import { Injectable } from '@angular/core';\n    import * as Pusher from 'pusher-js';\n    \n    // this is here to discourage the instantianting of pusher any where its\n    // needed, better to reference it from one place\n    @Injectable()\n    export class PusherService {\n    private _pusher: any;\n    \n    constructor() {\n      this._pusher = new Pusher(API_KEY, {\n        cluster: CLUSTER,\n        encrypted: true\n      });\n    }\n    // any time it is needed we simply call this method\n    getPusher() {\n      return this._pusher;\n    }\n    \n    }\n```\nWe insert the free `API_KEY` and `CLUSTER` we get after [signing up](https://dashboard.pusher.com/accounts/sign_up) and creating a channel app with Pusher.\n\n\n\u003e After creating an app from Pusher’s dashboard, navigate to `App Keys` tab to see your app credentials \n\nTo ensure that connection traffic is encrypted, we set `encrypted` to the Boolean `true` in our app. Read more about client configuration [here](https://pusher.com/docs/client_api_guide).\n\nOpen `src/app/interfaces/iemployee.ts` and update it to look like so:\n``` typescript\n    export interface IEmployee {\n      id?: number;\n      name: string;\n      position: string;\n      salary: string;\n      createdAt?: string;\n    }\n```\nLet’s now move over to our `src/app/services/employee.service.ts`. This file will manage everything relating to employee and our server: \n``` typescript\n    // src/app/services/employee.service.ts\n    import { Injectable } from '@angular/core';\n    import { Observable } from 'rxjs/Observable';\n    import { HttpClient } from '@angular/common/http';\n    import { IEmployee } from '../interfaces/iemployee';\n    import 'rxjs/add/operator/map'; \n    import 'rxjs/add/operator/mapTo'; \n    import { PusherService } from './pusher.service';\n    \n    @Injectable()\n    export class EmployeeService {\n    private _endPoint = 'http://localhost:2000/employee'\n    private _channel: any;\n    \n    constructor(private _http: HttpClient, private _pusherService: PusherService) {\n      this._channel = this._pusherService.getPusher().subscribe('employee');\n    }\n    \n    /**\n     * @return employee's channel for the different event available under employee\n     */\n    getChannel () {\n      return this._channel;\n    }\n    \n    list (): Observable\u003cIEmployee[]\u003e {\n      return this._http.get(this._endPoint)\n      .map(res =\u003e \u003cIEmployee[]\u003e res);\n    }\n    \n    /**\n     * Create new employee\n     * @param param\n     * @return Observable\u003cIEmployee\u003e with the id\n     */\n    create(param: IEmployee): Observable\u003cIEmployee\u003e {\n      return this._http.post(this._endPoint, param)\n      .map(res =\u003e \u003cIEmployee\u003e res);\n    }\n    \n    /**\n     * Remove an employee\n     * @param employee to remove\n     * @return Observable\u003cIEmployee\u003e the employee just removed\n     */\n    delete(employee: IEmployee): Observable\u003cIEmployee\u003e {\n      return this._http.delete(`${this._endPoint}/${employee.id}`)\n      .mapTo(employee);\n    }\n    \n    }\n```\nObserve that we attached this service to the employee’s channel, which means anything that has to do with an employee and Pusher is within our employee’s service file.\n\nLet’s make our services available to be used by others from our `app.module.ts` by providing them also adding [HTTPClientModule](https://angular.io/guide/http) since it was used within `employee.service.ts` for http requests:\n``` typescript\n    // src/app/app.module.ts\n    import { EmployeeService } from './services/employee.service';\n    import { PusherService } from './services/pusher.service';\n    import { HttpClientModule } from '@angular/common/http'; \n    ...\n    imports: [\n      ...,\n      HttpClientModule\n      ],\n    providers:[EmployeeService, PusherService]\n```\n\n## Angular components to manage employees\n\nWe’ll now create two more components to list employees and create employees:\n\n```\n    ng g c listEmployee -is --spec false\n    ng g c createEmployee -is --spec false\n```\nUsing the Angular CLI, we generated a component with no test attached as explained earlier. It will create a folder for each containing a `.ts` and a `.html`. The `-is` command means don’t create a `.css` file instead use inline styling within our `.ts`. Since, we are not going to do alot or no styling within each component.\n\nLet’s start with the list employee component, it should look like our gif above. \nOpen `list-employee.component.html` and update it to look like so:\n\n``` html\n    \u003c!-- src/app/list-employee/list-employee.component.html --\u003e\n    \n    \u003ch6 class=\"pb-2 mb-0\"\u003eEmployees\u003c/h6\u003e\n    \u003ctable class=\"table\"\u003e\n      \u003cthead\u003e\n        \u003ctr\u003e\n          \u003cth scope=\"col\"\u003eName\u003c/th\u003e\n          \u003cth scope=\"col\"\u003ePosition\u003c/th\u003e\n          \u003cth scope=\"col\"\u003eSalary\u003c/th\u003e\n          \u003cth scope=\"col\"\u003eCreated At\u003c/th\u003e\n          \u003cth scope=\"col\"\u003eActions\u003c/th\u003e\n        \u003c/tr\u003e\n      \u003c/thead\u003e\n      \u003ctbody\u003e\n        \u003ctr *ngFor=\"let employee of employees\"\u003e\n          \u003ctd\u003e\n           \u003cspan *ngIf=\"employee.new\" class=\"badge badge-primary\"\u003enew\u003c/span\u003e\n           {{employee.name}}\n          \u003c/td\u003e\n          \u003ctd\u003e{{employee.position}}\u003c/td\u003e\n          \u003ctd\u003e{{employee.salary}}\u003c/td\u003e\n          \u003ctd\u003e{{employee.createdAt | date:'yyyy/MM/dd'}}\u003c/td\u003e\n          \u003ctd\u003e\n            \u003cbutton (click)=\"delete(employee)\" class=\"btn btn-danger btn-sm\"\u003e\n              \u003cspan class=\"oi oi-trash\"\u003e\u003c/span\u003e\n            \u003c/button\u003e\n          \u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr *ngIf=\"loading\"\u003e\n         \u003ctd colspan=\"5\" align=\"center\"\u003eFetching Employees\u003c/td\u003e\n        \u003c/tr\u003e\n      \u003c/tbody\u003e\n    \u003c/table\u003e\n```\nNext open `list-employee.component.ts` and update it with the code below:\n\n``` typescript\n    // src/app/list-employee/list-employee.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { EmployeeService } from '../services/employee.service';\n    import { IEmployee } from '../interfaces/iemployee';\n    import { NgAlertService, MessageType } from '@theo4u/ng-alert';\n    \n    @Component({\n      selector: 'app-list-employee',\n      templateUrl: './list-employee.component.html',\n      styles: []\n    })\n    export class ListEmployeeComponent implements OnInit {\n      employees: IEmployee[] = [];\n      loading = true;\n    \n      constructor(private _employeeService: EmployeeService, private _ngAlert: NgAlertService) { }\n    \n      ngOnInit() {\n        this.loading = true;\n        this._employeeService.list()\n          .subscribe(employees =\u003e {\n            this.loading = false;\n            this.employees = employees;\n          });\n      }\n    \n      delete(employee: IEmployee) {\n       // show delete confirmation with ngAlert\n        this._ngAlert.push({\n          message: `\u003cstrong\u003eAre you sure!\u003c/strong\u003e you want to delele this employee with name \u003cstrong\u003e${employee.name}\u003c/strong\u003e`,\n          type: MessageType.warning,\n          buttons: [\n            {\n              label: 'Continue',\n              action: () =\u003e {\n                this._actualDelete(employee);\n              },\n              css: 'btn btn-danger'\n            }\n          ]\n        });\n      }\n    \n      private _actualDelete (employee: IEmployee) {\n        this._employeeService.delete(employee)\n          .subscribe(() =\u003e {\n            // remove the employee if removed successfully\n            this.employees = this.employees.filter(item =\u003e item !== employee);\n            this._ngAlert.push({\n              message: `${employee.name} removed`,\n              type: MessageType.success\n            });\n          });\n      }\n    \n    }\n```\nHere, we are simply performing a normal loading and deleting of employees from our remote server via `EmployeeService`. \n\nLet’s go into our `create-employee.component.html`. Here, we’ll make use of [A](https://angular.io/api/forms/ReactiveFormsModule)[ngular’s reactive](https://angular.io/api/forms/ReactiveFormsModule) [form](https://angular.io/api/forms/ReactiveFormsModule): \n``` html\n    \u003c!-- src/app/create-employee/create-employee.component.html  --\u003e\n    \n    \u003ch6 class=\"pb-2 mb-0\"\u003eCreate Employees\u003c/h6\u003e\n    \n    \u003cform [formGroup]=\"employeeForm\" (ngSubmit)=\"onSubmit()\" novalidate\u003e\n      \u003cdiv class=\"form-group\"\u003e\n        \u003clabel for=\"name\"\u003eName\u003c/label\u003e\n        \u003cinput formControlName=\"name\" type=\"text\" class=\"form-control\" id=\"name\" placeholder=\"Christian Nwamba\"\u003e\n         \u003csmall *ngIf=\"employeeForm.get('name').hasError('required')\" class=\"form-text text-danger\"\u003eName is required.\u003c/small\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"form-group\"\u003e\n        \u003clabel for=\"position\"\u003ePosition\u003c/label\u003e\n        \u003cselect formControlName=\"position\" class=\"form-control\" id=\"position\"\u003e\n          \u003coption\u003eManager\u003c/option\u003e\n          \u003coption\u003eHr\u003c/option\u003e\n          \u003coption\u003eDeveloper\u003c/option\u003e\n        \u003c/select\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"form-group\"\u003e\n        \u003clabel for=\"salary\"\u003eSalary\u003c/label\u003e\n        \u003cinput formControlName=\"salary\" type=\"text\" class=\"form-control\" id=\"salary\" placeholder=\"$12,000\"\u003e\n        \u003csmall *ngIf=\"employeeForm.get('salary').hasError('required')\" class=\"form-text text-danger\"\u003eSalary is required.\u003c/small\u003e\n      \u003c/div\u003e\n      \u003cbutton type=\"submit\" [disabled]=\"loader || employeeForm.invalid\" class=\"btn btn-primary\"\u003e{{loader?'Adding':'Add'}}\u003c/button\u003e\n    \u003c/form\u003e \n```\nOpen  `create-employee.component.ts` to manage our HTML template above. We are making use of the `.create` method in our employee’s service with reactive forms to validate entries easily under the `_createForm` method.\n\n``` typescript\n    // src/app/create-employee/create-employee.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { FormGroup, FormBuilder, Validators } from '@angular/forms';\n    import { EmployeeService } from '../services/employee.service';\n    import { IEmployee } from '../interfaces/iemployee';\n    \n    @Component({\n      selector: 'app-create-employee',\n      templateUrl: './create-employee.component.html',\n      styles: []\n    })\n    export class CreateEmployeeComponent implements OnInit {\n       employeeForm: FormGroup;\n       loader: boolean;\n    \n      constructor(private _fb: FormBuilder, private _employeeService: EmployeeService) { }\n    \n      ngOnInit() {\n        this._createForm();\n      }\n    \n      /**\n       * create our reactive form here\n       */\n      private _createForm() {\n        this.employeeForm = this._fb.group({\n          name: ['', Validators.required],\n          position: ['Manager', Validators.required],\n          salary: ['', Validators.required]\n        });\n      }\n    \n      /**\n       * submit new employee to server\n       */\n      onSubmit() {\n        const param = this.employeeForm.value;\n        this._employeeService.create(param)\n          .subscribe((employee: IEmployee) =\u003e {\n             this.loader = false;\n             this.employeeForm.reset({position: 'Manager'});\n          },\n            (error) =\u003e {\n              console.error(error);\n              this.loader = false;\n            });\n      }\n    \n    }\n```\n\n## Making use of our components\n\nLet’s call our component so we can test easily with our browser, open up `app.component.ts` and update it to look like so:\n``` typescript\n    // src/app/app.component.ts\n    \n    import { Component, OnInit, OnDestroy } from '@angular/core';\n    import { IMessage, MessageType, CloseType, NgAlertService } from '@theo4u/ng-alert';\n    import { Subscription } from 'rxjs/Subscription';\n    \n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    export class AppComponent implements OnInit, OnDestroy {\n      message: IMessage;\n      closeTypes = CloseType;\n      private _alertSub: Subscription;\n    \n      constructor(private _ngAlert: NgAlertService) {\n      }\n    \n      ngOnInit () {\n         this._alertSub = this._ngAlert.getSource().subscribe(message =\u003e {\n          this.message = message;\n        });\n      }\n    \n      ngOnDestroy () {\n        this._alertSub.unsubscribe();\n      }\n    \n    }\n```\nMost of what is going on here is about managing our app level alerts. Anytime an alert is triggered from any component, we can easily get it here and we can also unsubscribe from it once we are done with the component.  Check the `delete` method in `list-employee.component.ts` to see where we push a confirmation message before deleting any employee.\n\nOpen `app.components.html` and let’s call our components side by side:\n\n``` html\n    \u003cdiv class=\"container\"\u003e\n      \u003c!-- Alert here --\u003e\n     \u003cdiv class=\"app-level-alert\"\u003e\n        \u003cng-alert [(message)]=\"message\" [dismissable]=\"true\" [closeType]=\"closeTypes.TIMES\"\u003e\u003c/ng-alert\u003e\n     \u003c/div\u003e\n      \u003c!-- /Alert here --\u003e\n      \n      \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-8\"\u003e\n          \u003cdiv class=\"my-3 p-3 bg-white rounded box-shadow\"\u003e\n            \u003capp-list-employee\u003e\u003c/app-list-employee\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"col-md-4\"\u003e\n          \u003cdiv class=\"my-3 p-3 bg-white rounded box-shadow\"\u003e\n            \u003capp-create-employee\u003e\u003c/app-create-employee\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \n    \u003c/div\u003e\n```\nOur final `app.module.ts` should now be like this:\n``` typescript\n    // src/app/app.module.ts\n    \n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule } from '@angular/core';\n    import { NgAlertModule } from '@theo4u/ng-alert';\n    import { AppComponent } from './app.component';\n    import { CreateEmployeeComponent } from './create-employee/create-employee.component';\n    import { ListEmployeeComponent } from './list-employee/list-employee.component';\n    import { EmployeeService } from './services/employee.service';\n    import { ReactiveFormsModule } from '@angular/forms';\n    import { HttpClientModule } from '@angular/common/http';\n    import { PusherService } from './services/pusher.service';\n    \n    @NgModule({\n      declarations: [\n        AppComponent,\n        CreateEmployeeComponent,\n        ListEmployeeComponent\n      ],\n      imports: [\n        BrowserModule,\n        ReactiveFormsModule,\n        NgAlertModule,\n        HttpClientModule\n      ],\n      providers: [EmployeeService, PusherService],\n      bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n```\nOur app behaviour should now look like this:\n\n![tables-angular-stage-1](//images.ctfassets.net/1es3ne0caaid/4J8haYXbrWI0y6M4KqW0GI/fa2c60b9866a4d83afceeeef3b5ef16f/tables-angular-stage-1.gif)\n\n\nWe have to always refresh our page to get newly added employees or deleted employees, next section will handle this.\n\n\n## Integrating Pusher for realtime table updates\n\nPusher is a hosted service that makes it super-easy to add realtime data and functionality to web and mobile applications. Pusher sits as a realtime layer between your servers and your clients. Pusher also maintains persistent connections to the clients over WebSocket if possible and falling back to HTTP-based connectivity so that as soon as your servers have new data that they want to push to the clients they can do, instantly via Pusher.\n\nWe’ll use Pusher’s event based API know as [**Pusher Channels**](https://pusher.com/channels). All we need to do is to subscribe to a particular channel like `employee` ( `employee.service.ts` `getChannel()` method) and watch for any event type (new, deleted) emitted and know how to handle the data coming along with the event. \n\nOpen `list-employee.component.ts` to spice it up with Pusher. We are watching for *new* and *deleted* employees, add the following to `ngOnInit` method:\n``` typescript\n      // subscribe to pusher's event\n        this._employeeService.getChannel().bind('new', data =\u003e {\n          data.new = true;\n          this.employees.push(data);\n        });\n    \n        this._employeeService.getChannel().bind('deleted', data =\u003e {\n          this.employees = this.employees.filter(emp =\u003e emp.id !== data.id);\n        });\n```\nAnytime a new/deleted record is received we get the data as well and then manipulate our array of employees. When a record is added we need to let the user know that this record just came in using `data.new=true` , which was used in our `list-employee.component.html` to show a new label.\nNow, try deleting or adding a record from another browser window, the current one should be updated. \n\n## Integrating Pusher to our Node server\n\nOur server is simply going to simulate an actual DB and routes to create, delete and get employees from a mock array object as our DB. Also, obeying the [twelve-factor](https://12factor.net/) approach to handling configurations for our server. Open your terminal within our application folder `/realtimeNgTable` and run the following commands:\n\n```\n    npm install express body-parser cors pusher dotenv shortid\n    touch server.js\n    touch mocks.js\n    touch .env\n```\nMock is simply going to export our initial list of employees, like so:\n``` javascript\n    // src/mocks.js\n    module.exports = [\n      {\n        id: 'S1234X',\n        name: 'Christian Nwamba',\n        position: 'Manager',\n        salary: '$13,000',\n        createdAt: new Date().toISOString()\n      },\n      {\n        id: 'S1234Y',\n        name: 'Prosper Otemuyiwa',\n        position: 'Hr',\n        salary: '$12,500',\n        createdAt: new Date().toISOString()\n      },\n      {\n        id: 'S1234Z',\n        name: 'Theophilus Omoregbee',\n        position: 'Developer',\n        salary: '$10,500',\n        createdAt: new Date().toISOString()\n      }\n    ]\n```\nLet’s setup our server in `server.js`: \n``` javascript\n    //server.js\n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const Pusher = require('pusher')\n    const cors = require('cors')\n    const dotenv = require('dotenv').config()\n    const shortId = require('shortid')\n    let mocks = require('./mocks')\n    \n    const app = express()\n    app.use(cors())\n    app.use(bodyParser.urlencoded({ extended: false }))\n    app.use(bodyParser.json())\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APPID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: process.env.PUSHER_CLUSTER,\n      encrypted: true\n    })\n    \n    app.post('/employee', (req, res) =\u003e {\n      // simulate actual db save with id (using shortId) and createdAt added\n      const employee = {\n        id: shortId.generate(),\n        createdAt: new Date().toISOString(),\n        ...req.body\n      }\n      mocks.push(employee) // like our db\n      // trigger this update to our pushers listeners\n      pusher.trigger('employee', 'new', employee)\n      res.send(employee)\n    })\n    \n    app.delete('/employee/:id', (req, res) =\u003e {\n      const employee = mocks.find(emp =\u003e emp.id === req.params.id)\n      mocks = mocks.filter(emp =\u003e emp.id !== employee.id)\n      pusher.trigger('employee', 'deleted', employee)\n      res.send(employee)\n    })\n    \n    app.get('/employee', (req, res) =\u003e {\n      res.send(mocks)\n    })\n    \n    app.listen(2000, () =\u003e console.log('Listening at 2000'))\n```\nWe instantiated Pusher with environment parameters, as said earlier on we are sticking with the twelve-factor approach, where we use `.env` file to pass environment variables to our `server.js`.\n\nLet’s populate our `.env`  file with our Pusher credentials\n```\n    PUSHER_APPID=YOUR_APP_ID\n    PUSHER_KEY=YOUR_APP_KEY\n    PUSHER_SECRET=YOUR_APP_SECRET\n    PUSHER_CLUSTER=YOUR_APP_CLUSTER\n```\nFinally, running the below command in our terminal should start the node server\n```\n    node server.js\n```\nAny time a new record is created we trigger the event to everyone who subscribed to the channel with the event type and additional data to pass across.\n\n\n## Conclusion\n\nWith this sample realtime Angular table, we can definitely build more with Pusher’s [channel](https://pusher.com/channels) event-based APIs to handle any form of realtime update needed in our [Angular](https://angular.io/) application. You can extend this sample application to handle edit by triggering another type of event and the data as `{id, data}`. With the `id` of the record that got updated from the server and the `data` as the changes.  Source code for both the frontend and the backend node server is located on [Github](https://github.com/christiannwamba/realtime-ng-table).","metaTitle":"Build a realtime table with Angular","metaDescription":"This tutorial takes you through building an Angular web app. The app displays a table designed to update in realtime to reflect changes in the database."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1Ok9wy2o0cWyQaAW880mmi","type":"Entry","createdAt":"2018-05-06T17:29:22.639Z","updatedAt":"2018-05-06T17:29:22.639Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting data in realtime from MySQL with Java","url":"realtime-mysql-java","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/realtime-mysql-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-05-04","description":"Use MySQL replication logging to publish database changes to a React-based web dashboard.","prerequisite":"To follow this tutorial you will need some knowledge of Java programming and MySQL management tasks. You will need the Java JDK, Maven, MySQL and Node.js installed on your machine. ","content":"Applications are more complex than ever before.\n\nAnd it’s not only about the increasing number of users that must be handled or reducing response times.\n\nIf your application has a database, probably you’ll need its data in other places as soon as it goes in.\n\nIn this context, [change data capture](https://en.wikipedia.org/wiki/Change_data_capture) is the approach you use to capture and deliver the changes in the database to other sources.\n\nIn this tutorial, you’re going to learn how to stream, in realtime, the changes made to a table in a MySQL database to a React app. Something like this:\n\n![java-mysql-react-demo](//images.ctfassets.net/1es3ne0caaid/71VsGknSCI0QOgE4CCkEmy/beea6a69b0be15e1b421f7fda9af66c9/java-mysql-react-demo.gif)\n\n## Prerequisites\n\nHere’s what you need to have installed to follow this tutorial:\n\n- [Java JDK](http://www.oracle.com/technetwork/java/javase/downloads/index.html) (8 or superior)\n- [Maven](https://maven.apache.org/download.cgi)\n- [MySQL Community Server](https://dev.mysql.com/downloads/mysql/) 5.7 (5.6 and 5.5 should also work, but MySQL 8.0 is not yet supported)\n- [Node.js](https://nodejs.org/en/download/) (6 or superior)\n- Optionally, a Java IDE and a JavaScript editor.\n\nYou’ll need to have knowledge of:\n\n- Java programming (intermediate level)\n- Basic MySQL management tasks\n- React (beginner level)\n\nIf you want to track and determine if something in a database has changed, you have three main approaches:\n\n- Poll the database every X seconds and determine if something has changed using a timestamp, version number or status field.\n- Use database or application-level triggers to execute a piece of code when something changes.\n- Use the database transaction/replication log, which records every change to the database.\n\nI’m going to use the third approach because I think is the most robust. It doesn’t waste resources (like polling) or hurt performance (like triggers).\n\nWe’ll read the database changes from the MySQL replication log using the library [mysql-binlog-connector-java](https://github.com/shyiko/mysql-binlog-connector-java). Then, we’ll parse the event to extract the relevant data and publish it to a Pusher channel so it can be consumed by a React application.\n\nHere’s the diagram that describes the above process:\n\n![java-mysql-db-diagram](//images.ctfassets.net/1es3ne0caaid/30HLN6zj28OiSKE0eE6Oag/6c854c17f053b3b39b5e0523d2b50656/java-mysql-db-diagram.png)\n\nFor reference, [here is a GitHub repository](https://github.com/eh3rrera/realtime-mysql-pusher) with all the code shown in this tutorial and instructions to run it.\n\nLet’s start by creating a Pusher application.\n\n## Creating a Pusher application\n\nIf you haven’t already, create a free account at [Pusher](https://pusher.com/). \n\nThen, go to your [dashboard](https://dashboard.pusher.com) and create a Channels app, choosing a name, the cluster closest to your location, and optionally, React as the frontend tech and Java as the backend tech:\n\n![java-mysql-db-pusher-app](//images.ctfassets.net/1es3ne0caaid/6wRuDb2okoweQMmmGGo84C/190e50e138898fcf725c893c0bfc0fcb/java-mysql-db-pusher-app.png)\n\nThis will give you some sample code to get started:\n\n![java-mysql-db-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/30al4XZR7yyee0IMKEqICs/34d06b1c4a5f33e56123021ea9284d74/java-mysql-db-pusher-app-keys.png)\n\nSave your app id, key, secret and cluster values. We’ll need them later. \n\n## Configuring MySQL replication\n\nThe first thing you need to do is enable replication in MySQL.\n\n[Replication](https://dev.mysql.com/doc/refman/5.7/en/replication.html) allows data from one MySQL server (the master) to be copied in an asynchronous way to one or more different MySQL servers (the slaves).\n\nIt works by writing all the changes in the master to a binary log file that then is synchronized between master and slaves, so these can apply all those changes.\n\nFor this tutorial, you don’t have to set up slave servers. We’re only interested in the binary log.\n\nIn the MySQL configuration file (usually at `/etc/my.cnf` or `C:\\ProgramData\\MySQL\\MySQL Server 5.7\\my.ini`), add the following lines:\n\n```\n    [mysqld]\n    server-id = 1 #1\n    log_bin = /var/log/mysql/mysql-bin.log #2\n    expire_logs_days = 10 #3\n    max_binlog_size = 100M #4\n    binlog-format = row #5\n```\n\nLine #1 assigns an identifier to the server.\n\nLine #2 specifies the directory where the logs will be stored. In Windows, it will be something like `c:/logs/mysql-bin.log`. In Linux, make sure this directory has the necessary permissions for MySQL.\n\nLine #3 and #4 are optional, they specify the expiration time and maximum size of the file.\n\nLine #5 is important, it specifies the format in which the log will be written.\n\nThere are two main types of replication formats:\n\n- Statement Based Replication (SBR), which replicates entire SQL statements, and \n- Row Based Replication (RBR), which replicates only the changed rows.\n\nFor our purposes, RBR will be easier to work with. That’s why the file specifies this format.\n\nNow restart the server.\n\nIn a terminal window, connect to the MySQL server using `mysql`:\n\n```\n    mysql -u \u003cYOUR_USER\u003e -p \n```\n\nNow choose or create a database and create the table that is going to be used by the application:\n\n``` sql\n    USE myDatabase\n    CREATE TABLE products(id int(11) not null auto_increment, name varchar(50) default null, price decimal(6,2), primary key (id));\n```\n\nIt’s not recommended to work with a user with administrative privileges like `root` so let’s create another user for the application:\n\n``` sql\n    CREATE USER '\u003cYOUR_USER\u003e'@'\u003cYOUR_HOST\u003e' IDENTIFIED BY '\u003cYOUR_PASSWORD\u003e';\n```\n\nGive it replication and table privileges:\n\n``` sql\n    GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO '\u003cYOUR_USER\u003e'@'\u003cYOUR_HOST\u003e';\n    GRANT ALL PRIVILEGES ON `\u003cINSERT_YOUR_DB_NAME\u003e`.* TO '\u003cYOUR_USER\u003e'@'\u003cYOUR_HOST\u003e';\n    FLUSH PRIVILEGES;\n```\n\nNow execute the following command to check if replication is enabled:\n\n```\n    show master status;\n```\n\nIt should show something like the following:\n\n```\n    +------------------+----------+--------------+------------------+-------------------+\n    | File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n    +------------------+----------+--------------+------------------+-------------------+\n    | mysql-bin.000001 |      001 |              |                  |                   |\n    +------------------+----------+--------------+------------------+-------------------+\n```\n\nIt indicates the current log file and the position of the last statement.\n\nIf you’re getting `\u003cEmpty set\u003e` or something like that, execute:\n\n```\n    show variables like \"%log_bin%\";\n```\n\nIf replication is enabled, you should see something like the this:\n\n```\n    +---------------------------------+--------------------------------+\n    | Variable_name                   | Value                          |\n    +---------------------------------+--------------------------------+\n    | log_bin                         | ON                             |\n    | log_bin_basename                | /var/log/mysql/mysql-bin       |\n    | log_bin_index                   | /var/log/mysql/mysql-bin.index |\n    | log_bin_trust_function_creators | OFF                            |\n    | log_bin_use_v1_row_events       | OFF                            |\n    | sql_log_bin                     | ON                             |\n    +---------------------------------+--------------------------------+\n```\n\nOtherwise double check your configuration. You can learn more about replication [here](https://dev.mysql.com/doc/refman/5.7/en/replication-configuration.html).\n\nNow let’s create the Java program that will read the binary log.\n\n## Reading MySQL’s binary log\n\nIt turns out that reading binary logs for change data capture is more common than you think.\n\nMicrosoft SQL Server has built-in support for [change data capture](https://docs.microsoft.com/en-us/sql/relational-databases/track-changes/about-change-data-capture-sql-server?view=sql-server-2017).\n\nOracle offers [GoldenGate](http://www.oracle.com/technetwork/middleware/goldengate/overview/index.html) for real-time data integration and replication.\n\nMongoDB offers [Change Streams](https://docs.mongodb.com/manual/changeStreams/) to access real-time data changes.\n\nFor MySQL, there a lot of libraries for reading the binary log and stream changes as events to other sources. In this [wiki](https://github.com/wushujames/mysql-cdc-projects/wiki), you can find many of these libraries.\n\nMost of these libraries were made for enterprise system so they work natively with Apache Kafka, a publish and subscribe distributed platform that streams event and records to multiple sources.\n\nBut if you don’t need something like that, you can use [mysql-binlog-connector-java](https://github.com/shyiko/mysql-binlog-connector-java), which allows you to read the binary log file and listen for changes as events from any Java program.\n\nSo open your favorite IDE and create a Maven project.\n\nOr just create a directory structure like the following:\n\n```\n    src\n     |- main\n       |- java\n     |- pom.xml \n```\n\nIn the `pom.xml` file specify the project information, java version, and `mysql-binlog-connector-java`  and `pusher-http-java` as dependencies:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n    \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\"\n             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e\n        \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n    \n        \u003cgroupId\u003ecom.example\u003c/groupId\u003e\n        \u003cartifactId\u003eMySQLRealtime\u003c/artifactId\u003e\n        \u003cversion\u003e1.0-SNAPSHOT\u003c/version\u003e\n    \n        \u003cproperties\u003e\n            \u003cmaven.compiler.source\u003e1.8\u003c/maven.compiler.source\u003e\n            \u003cmaven.compiler.target\u003e1.8\u003c/maven.compiler.target\u003e\n        \u003c/properties\u003e\n    \n        \u003cdependencies\u003e\n            \u003cdependency\u003e\n                \u003cgroupId\u003ecom.github.shyiko\u003c/groupId\u003e\n                \u003cartifactId\u003emysql-binlog-connector-java\u003c/artifactId\u003e\n                \u003cversion\u003e0.16.1\u003c/version\u003e\n            \u003c/dependency\u003e\n    \n            \u003cdependency\u003e\n                \u003cgroupId\u003ecom.pusher\u003c/groupId\u003e\n                \u003cartifactId\u003epusher-http-java\u003c/artifactId\u003e\n                \u003cversion\u003e1.0.0\u003c/version\u003e\n            \u003c/dependency\u003e\n        \u003c/dependencies\u003e\n    \n    \u003c/project\u003e\n```\n\nNow create a class, let’s say `scr/ReadLog.java`, with the code to connect to MySQL and listen for log events:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            BinaryLogClient client =\n              new BinaryLogClient(\"localhost\", 3306, \"\u003cMYSQL_USER\u003e\", \"\u003cMYSQL_PASSWROD\u003e\");\n    \n            client.registerEventListener(event -\u003e {\n                System.out.println(event);\n            });\n            client.connect();\n        }\n    }\n```\n\nIf you execute this class, the program will block until an event is received from the log.\n\nFor example, this is an example of the events you receive when a database is created:\n\n```\n    Event{header=EventHeaderV4{timestamp=1524607461000, eventType=ANONYMOUS_GTID, serverId=1, headerLength=19, dataLength=46, nextPosition=463, flags=0}, data=null}\n    \n    Event{header=EventHeaderV4{timestamp=1524607461000, eventType=QUERY, serverId=1, headerLength=19, dataLength=75, nextPosition=557, flags=8}, data=QueryEventData{threadId=6, executionTime=0, errorCode=0, database='test', sql='CREATE DATABASE test'}}\n```\n\nYou receive an event for the creation of the global transaction identifier (GTID) and the actual query (`CREATE DATABASE test`).\n\nHere’s an example of the events you receive when a table is created:\n\n```\n    Event{header=EventHeaderV4{timestamp=1524609716000, eventType=ANONYMOUS_GTID, serverId=1, headerLength=19, dataLength=46, nextPosition=1696, flags=0}, data=null}\n    \n    Event{header=EventHeaderV4{timestamp=1524609716000, eventType=QUERY, serverId=1, headerLength=19, dataLength=181, nextPosition=1896, flags=0}, data=QueryEventData{threadId=6, executionTime=0, errorCode=0, database='test', sql='create table products(id int(11) not null auto_increment, name varchar(50) default null, price decimal(6,2), primary key (id))'}}\n```\n\nWhen you insert a record:\n\n```\n    Event{header=EventHeaderV4{timestamp=1524609804000, eventType=ANONYMOUS_GTID, serverId=1, headerLength=19, dataLength=46, nextPosition=1961, flags=0}, data=null}\n    \n    Event{header=EventHeaderV4{timestamp=1524609804000, eventType=QUERY, serverId=1, headerLength=19, dataLength=53, nextPosition=2033, flags=8}, data=QueryEventData{threadId=6, executionTime=0, errorCode=0, database='test', sql='BEGIN'}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609804000, eventType=TABLE_MAP, serverId=1, headerLength=19, dataLength=38, nextPosition=2090, flags=0}, data=TableMapEventData{tableId=109, database='test', table='products', columnTypes=3, 15, -10, columnMetadata=0, 50, 518, columnNullability={1, 2}}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609804000, eventType=EXT_WRITE_ROWS, serverId=1, headerLength=19, dataLength=31, nextPosition=2140, flags=0}, data=WriteRowsEventData{tableId=109, includedColumns={0, 1, 2}, rows=[\n        [1, laptop, 999.99]\n    ]}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609804000, eventType=XID, serverId=1, headerLength=19, dataLength=12, nextPosition=2171, flags=0}, data=XidEventData{xid=28}}\n```\n\nWhen you update a record:\n\n```\n    Event{header=EventHeaderV4{timestamp=1524609897000, eventType=ANONYMOUS_GTID, serverId=1, headerLength=19, dataLength=46, nextPosition=2236, flags=0}, data=null}\n    \n    Event{header=EventHeaderV4{timestamp=1524609897000, eventType=QUERY, serverId=1, headerLength=19, dataLength=53, nextPosition=2308, flags=8}, data=QueryEventData{threadId=6, executionTime=0, errorCode=0, database='test', sql='BEGIN'}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609897000, eventType=TABLE_MAP, serverId=1, headerLength=19, dataLength=38, nextPosition=2365, flags=0}, data=TableMapEventData{tableId=109, database='test', table='products', columnTypes=3, 15, -10, columnMetadata=0, 50, 518, columnNullability={1, 2}}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609897000, eventType=EXT_UPDATE_ROWS, serverId=1, headerLength=19, dataLength=47, nextPosition=2431, flags=0}, data=UpdateRowsEventData{tableId=109, includedColumnsBeforeUpdate={0, 1, 2}, includedColumns={0, 1, 2}, rows=[\n        {before=[1, laptop, 999.99], after=[1, laptop, 100.01]}\n    ]}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609897000, eventType=XID, serverId=1, headerLength=19, dataLength=12, nextPosition=2462, flags=0}, data=XidEventData{xid=29}}\n```\n\nWhen you delete two records:\n\n```\n    Event{header=EventHeaderV4{timestamp=1524610005000, eventType=ANONYMOUS_GTID, serverId=1, headerLength=19, dataLength=46, nextPosition=2805, flags=0}, data=null}\n    \n    Event{header=EventHeaderV4{timestamp=1524610005000, eventType=QUERY, serverId=1, headerLength=19, dataLength=53, nextPosition=2877, flags=8}, data=QueryEventData{threadId=6, executionTime=0, errorCode=0, database='test', sql='BEGIN'}}\n    \n    Event{header=EventHeaderV4{timestamp=1524610005000, eventType=TABLE_MAP, serverId=1, headerLength=19, dataLength=38, nextPosition=2934, flags=0}, data=TableMapEventData{tableId=109, database='test', table='products', columnTypes=3, 15, -10, columnMetadata=0, 50, 518, columnNullability={1, 2}}}\n    \n    Event{header=EventHeaderV4{timestamp=1524610005000, eventType=EXT_DELETE_ROWS, serverId=1, headerLength=19, dataLength=49, nextPosition=3002, flags=0}, data=DeleteRowsEventData{tableId=109, includedColumns={0, 1, 2}, rows=[\n        [1, laptop, 100.01],\n        [2, laptop v2, 999.99]\n    ]}}\n    \n    Event{header=EventHeaderV4{timestamp=1524610005000, eventType=XID, serverId=1, headerLength=19, dataLength=12, nextPosition=3033, flags=0}, data=XidEventData{xid=31}}\n```\n\nThis way, you can see that data manipulation (DML) statements are mapped this way:\n\n- Insert statements have the event type `EXT_WRITE_ROWS` and you can find the information of the insertion in a class of type `WriteRowsEventData`.\n- Insert statements have the event type `EXT_UPDATE_ROWS` and you can find the information of the update in a class of type `UpdateRowsEventData`.\n- Insert statements have the event type `EXT_DELETE_ROWS` and you can find the information of the deletion in a class of type `DeleteRowsEventData`.\n\nIn addition, all of these events are preceded by a `TABLE_MAP` event with information about the table and columns that are being modified.\n\nSo we need to listen for these events.\n\nThe only problem is that if you need to keep track of the changes of many tables in a separate way, you cannot rely on the `tableId`  field because this [ID may change between executions](https://github.com/shyiko/mysql-binlog-connector-java/issues/123).\n\nYou can [change the way events are deserialized](https://github.com/shyiko/mysql-binlog-connector-java/issues/67) but maybe a simpler approach would be to keep track of the table names and IDs in a map.\n\nTaking into account this, you can modify the program in this way:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            final Map\u003cString, Long\u003e tableMap = new HashMap\u003cString, Long\u003e();\n            BinaryLogClient client =\n              new BinaryLogClient(\"localhost\", 3306, \"\u003cMYSQL_USER\u003e\", \"\u003cMYSQL_PASSWROD\u003e\");\n    \n            client.registerEventListener(event -\u003e {\n                EventData data = event.getData();\n    \n                if(data instanceof TableMapEventData) {\n                    TableMapEventData tableData = (TableMapEventData)data;\n                    tableMap.put(tableData.getTable(), tableData.getTableId());\n                }\n            });\n            client.connect();\n        }\n    }\n```\n\nNotice how the program checks the subtype of `EventData` to get the information.\n\nNow, let’s add the Pusher object with the information you got when you created the app:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            final Map\u003cString, Long\u003e tableMap = new HashMap\u003cString, Long\u003e();\n            \n            Pusher pusher = \n                new Pusher(\"\u003cPUSHER_APP_ID\u003e\", \"\u003cPUSHER_APP_KEY\u003e\", \"\u003cPUSHER_APP_SECRET\u003e\");\n            pusher.setCluster(\"\u003cPUSHER_APP_CLUSTER\u003e\");\n            pusher.setEncrypted(true);\n            \n            // ...\n        }\n    }\n```\n\nAnd you can check if the event is an insert, update or delete, you can check if it corresponds to the `product` table, extract the product information and publish it as a map to a `product` channel.\n\nHere’s the code for `INSERT` events:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            // ...\n    \n            client.registerEventListener(event -\u003e {\n                EventData data = event.getData();\n    \n                if(data instanceof TableMapEventData) {\n                    // ...\n                } else if(data instanceof WriteRowsEventData) {\n                    WriteRowsEventData eventData = (WriteRowsEventData)data;\n                    if(eventData.getTableId() == tableMap.get(PRODUCT_TABLE_NAME)) {\n                        for(Object[] product: eventData.getRows()) {\n                            pusher.trigger(\n                               PRODUCT_TABLE_NAME, \"insert\", getProductMap(product)\n                            );\n                        }\n                    }\n                }\n            });\n            client.connect();\n        }\n    \n        static Map\u003cString, String\u003e getProductMap(Object[] product) {\n            Map\u003cString, String\u003e map = new HashMap\u003c\u003e();\n            map.put(\"id\", java.lang.String.valueOf(product[0]));\n            map.put(\"name\", java.lang.String.valueOf(product[1]));\n            map.put(\"price\", java.lang.String.valueOf(product[2]));\n    \n            return map;\n        }\n    }\n```\n\nFor the update event, only the `after` data is needed. The `before` and `after` fields are formatted as a map entry, where `after` is the value part of this structure:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            // ...\n    \n            client.registerEventListener(event -\u003e {\n                EventData data = event.getData();\n    \n                if(data instanceof TableMapEventData) {\n                    // ...\n                } else if(data instanceof WriteRowsEventData) {\n                    // ...\n                } else if(data instanceof UpdateRowsEventData) {\n                    UpdateRowsEventData eventData = (UpdateRowsEventData)data;\n                    if(eventData.getTableId() == tableMap.get(PRODUCT_TABLE_NAME)) {\n                        for(Map.Entry\u003cSerializable[], Serializable[]\u003e row : \n                                                          eventData.getRows()) {\n                            pusher.trigger(\n                              PRODUCT_TABLE_NAME, \"update\", getProductMap(row.getValue())\n                            );\n                        }\n                    }\n                }\n            });\n            client.connect();\n        }\n    \n        // ...\n    }\n```\n\nFor the delete event, you’ll only need the ID of the deleted record:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            // ...\n    \n            client.registerEventListener(event -\u003e {\n                EventData data = event.getData();\n    \n                if(data instanceof TableMapEventData) {\n                    // ...\n                } else if(data instanceof WriteRowsEventData) {\n                    // ...\n                } else if(data instanceof UpdateRowsEventData) {\n                    // ...\n                } else if(data instanceof DeleteRowsEventData) {\n                    DeleteRowsEventData eventData = (DeleteRowsEventData)data;\n                    if(eventData.getTableId() == tableMap.get(PRODUCT_TABLE_NAME)) {\n                        for(Object[] product: eventData.getRows()) {\n                            pusher.trigger(PRODUCT_TABLE_NAME, \"delete\", product[0]);\n                        }\n                    }\n                }\n            });\n            client.connect();\n        }\n    \n        // ...\n    }\n```\n\nNow, any application listening for the `product` channel will get the information about the database changes.\n\nLet’s build a React client to show this.\n\n## Building the React application\n\nLet’s use [create-react-app](https://github.com/facebook/create-react-app) to bootstrap a React app.\n\nExecute the following command in a terminal window to create a new app:\n\n```\n    npx create-react-app my-app\n```\n\nNow go into the app directory and install the Pusher dependency with `npm`:\n\n```\n    cd my-app\n    npm install --save pusher-js\n```\n\nOpen the file `src/App.css` and add the following CSS styles:\n\n``` css\n    .table {\n      border: 2px solid #FFFFFF;\n      width: 100%;\n      text-align: center;\n      border-collapse: collapse;\n    }\n    .table td, .table th {\n      border: 1px solid #FFFFFF;\n      padding: 3px 4px;\n    }\n    .table tbody td {\n      font-size: 13px;\n    }\n    .table thead {\n      background: #FFFFFF;\n      border-bottom: 4px solid #333333;\n    }\n    .table thead th {\n      font-size: 15px;\n      font-weight: bold;\n      color: #333333;\n      text-align: center;\n      border-left: 2px solid #333333;\n    }\n    .table thead th:first-child {\n      border-left: none;\n    }\n```\n\nNow let’s create a new component, `src/Table.js`, to show the product information (received as a property) in a table:\n\n``` javascript\n    import React, { Component } from 'react';\n    import './App.css';\n    \n    export default class Table extends Component {\n        render() {\n          const rowsMapped =this.props.rows.map(row =\u003e (\n                \u003ctr key={row.id}\u003e\n                  \u003ctd\u003e{row.id}\u003c/td\u003e\n                  \u003ctd\u003e{row.name}\u003c/td\u003e\n                   \u003ctd\u003e{row.price}\u003c/td\u003e\n                \u003c/tr\u003e\n              ));\n          \n          return (\n            \u003ctable className=\"table\"\u003e\n              \u003cthead\u003e\n                \u003ctr\u003e\n                  \u003cth\u003eID\u003c/th\u003e\n                  \u003cth\u003eName\u003c/th\u003e\n                  \u003cth\u003ePrice\u003c/th\u003e\n                \u003c/tr\u003e\n              \u003c/thead\u003e\n              \u003ctbody\u003e\n                {rowsMapped}\n              \u003c/tbody\u003e\n            \u003c/table\u003e\n          );\n        }\n    }\n```\n\nNow modify the file `src/App.js` to import this component and Pusher:\n\n``` javascript\n    import React, { Component } from 'react';\n    import logo from './logo.svg';\n    import './App.css';\n    \n    import Table from './Table.js';\n    \n    import Pusher from 'pusher-js';\n    \n    class App extends Component {\n      // ...\n    }\n```\n\nLet’s have the array of rows as the state of this component, and while we are at the constructor, let’s bind the functions we are going to use to insert, update and delete items:\n\n``` javascript\n    // ...\n    \n    class App extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {rows: []};\n        \n        this.insert = this.insert.bind(this);\n        this.update = this.update.bind(this);\n        this.delete = this.delete.bind(this);\n      }\n    }\n```\n\nIn the `componentDidMount` method, let’s configure the Pusher object subscribe to the channel to get the events:\n\n``` javascript\n    // ...\n    \n    class App extends Component {\n      constructor(props) {\n        // ...\n      }\n      \n      componentDidMount() {\n        this.pusher = new Pusher('\u003cPUSHER_APP_KEY\u003e', {\n              cluster: '\u003cPUSHER_APP_CLUSTER\u003e',\n          encrypted: true,\n        });\n        this.channel = this.pusher.subscribe('products');\n            \n        this.channel.bind('insert', this.insert);\n        this.channel.bind('update', this.update);\n        this.channel.bind('delete', this.delete);\n      }\n    }\n```\n\nThese are the functions to insert, update and delete items from `this.state.rows`:\n\n``` javascript\n    // ...\n    \n    class App extends Component {\n      // ...\n      insert(data) {\n        this.setState(prevState =\u003e ({\n          rows: [ data, ...prevState.rows ]\n        }));\n      }\n    \n      update(data) {\n        this.setState(prevState =\u003e ({\n          rows: prevState.rows.map(el =\u003e \n                  el.id === data.id ? data : el\n          )\n        }));\n      }\n    \n      delete(id) {\n        this.setState(prevState =\u003e ({\n          rows: prevState.rows.filter(el =\u003e el.id !== String(id))\n        }));\n      }\n    }\n```\n\nFinally, the `render` function will look like this:\n\n``` javascript\n    // ...\n    \n    class App extends Component {\n      // ...\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cheader className=\"App-header\"\u003e\n              \u003cimg src={logo} className=\"App-logo\" alt=\"logo\" /\u003e\n              \u003ch1 className=\"App-title\"\u003eWelcome to React\u003c/h1\u003e\n            \u003c/header\u003e\n            \u003cTable rows={this.state.rows} /\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n```\n\nAnd that’s it.\n\nLet’s test the application.\n\n## Testing the application\n\nMake sure the MySQL server is running with replication enabled.\n\nIf you’re working with an IDE, run the class `ReadLog`.\n\nOtherwise, you can add this property to the `pom.xml`file:\n\n``` xml\n    \u003cproperties\u003e\n      ...\n      \u003cexec.mainClass\u003eReadLog\u003c/exec.mainClass\u003e\n    \u003c/properties\u003e\n```\n\nAnd execute this command to run the app:\n\n```\n    mvn exec:java\n```\n\nFor the React app, inside the app directory, execute:\n\n```\n    npm start\n```\n\nA browser window will open http://localhost:3000/, and from there, you can connect to the database with the `mysql` client and insert, update or delete records in the `product` table:\n\n![java-mysql-react-demo](//images.ctfassets.net/1es3ne0caaid/71VsGknSCI0QOgE4CCkEmy/beea6a69b0be15e1b421f7fda9af66c9/java-mysql-react-demo.gif)\n\n## Conclusion\n\nIn this tutorial, you have learned how to turn MySQL into a realtime database by using the replication log to publish the changes made to a database using Pusher.\n\nYou used [mysql-binlog-connector-java](https://github.com/shyiko/mysql-binlog-connector-java) to get the insert, update and delete events from the log. However, at the time of this writing, the current version of MySQL (MySQL 8.0.11) is not yet supported.\n\nBut there are other options. As mentioned before, in this [wiki](https://github.com/wushujames/mysql-cdc-projects/wiki) you can find more libraries to work with MySQL binary log.\n\nIn this [blog post](http://shzhangji.com/blog/2017/08/12/extract-data-from-mysql-with-binlog-and-canal/), you can find another way to extract data from MySQL using Alibaba’s open sourced [Canal](https://github.com/alibaba/canal) project.\n\nThe applications that this tutorial present are simple but they show how this change data capture using transaction logs work.\n\nThey can be extended in many ways:\n\n- Support for more tables\n- Detect when the Java application goes down and have to be restarted\n- Read from the log to start at a given position\n- Change the React implementation to support a bigger table in an efficient way\n\nRemember that all the source code for this applications is available on [Github](https://github.com/eh3rrera/realtime-mysql-pusher).","metaTitle":"Getting data in realtime from MySQL with Java","metaDescription":"This tutorial will guide you through enabling MySQL replication logging, in order to display database events in the browser, on a React-based dashboard."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"16NFaeWa3WmkAYQ24muIoi","type":"Entry","createdAt":"2018-05-03T10:16:51.643Z","updatedAt":"2018-05-03T10:16:51.643Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime table with DataTables and Nest.js","url":"realtime-table-datatables-nestjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/pusher-nest-datatable","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SgQuYVb0kSMIgEmwqImOA","type":"Entry","createdAt":"2018-02-12T14:49:17.136Z","updatedAt":"2018-04-19T08:52:46.508Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Nest.js","url":"nest-js","type":"framework"}}],"reviewDate":"2018-05-02","description":"Use Nest.js and DataTables to create a searchable employee list interface.","prerequisite":"A basic understanding of TypeScript and Node will help you with this tutorial. You need to already have Node and npm installed on your machine.","content":"If you have been around the web for sometime now, you will agree with me that extensive data from the database can mostly be perfectly rendered to users by using tables. This is where tools like [DataTables](https://datatables.net/) really shines, when initialized, it will immediately add more features like searching, ordering and paging to tables.\n\nIt drives further than just a preview of data by users. It also brings about an excellent user experience when you add a realtime functionality in order to make changes available to consumers in realtime.\n\nThis tutorial will guide you through the process of implementing a realtime feature in tables. The knowledge gained here, will amongst other things help you implement realtime functionality in any web application. Pusher provides awesome tools to make implementing realtime functionality easy on any platform.\n\nThe backend of the application will be powered by Nest.js. A progressive Node.js framework for building efficient and scalable server-side applications, Nest.js leverages TypeScript to create reliable and well structured server-side applications.\n\nA quick look at what we'll be building:\n\n![realtime-table-nest-demo](//images.ctfassets.net/1es3ne0caaid/5aFIqSwEDmcowmwou2sAIW/4312592be74631d2d41fbc6784746c27/realtime-table-nest-demo.gif)\n\n## Prerequisites\n\nA basic understanding of TypeScript and Node.js will help you get the best out of this tutorial. It is assumed that you already have Node and npm installed. Kindly check [N](https://nodejs.org/en/)[ode.js](https://nodejs.org/en/) and [npm](https://www.npmjs.com/) for further instructions and installation steps.\n\n\n## Setting up the application\n\nAs at the time of writing, there was no CLI to setup a Nest.js application. The simplest and most efficient way is to clone the starter repository made available  on their [website](https://nestjs.com/).\n\nNow let’s run a command that will create a new project folder named `realtime-table-nest-pusher` on your machine. Open your terminal or command prompt and run this command :\n\n```\n    $ git clone https://github.com/nestjs/typescript-starter.git realtime-table-nest-pusher\n```\n\nGo ahead and change directory into the newly created folder and install all the dependencies for the project.\n\n```\n    // change directory\n    cd realtime-table-nest-pusher\n    \n    // install dependencies\n    npm install\n```\n\n## See it working\n\nRun the application with :\n\n```\n    npm start\n```\n\nThe command above will start the application on the default port used by Nest.js. Open your browser and navigate to [http://localhost:3000]. You should see a welcome message like what we have below\n\n![realtime-table-nest-hello-world](//images.ctfassets.net/1es3ne0caaid/2lCfpLiSpmSGY8mkKcEW68/403d325e3c68045fbaedce39c76ad5bb/realtime-table-nest-hello-world.png)\n\n## Server dependencies\n\nRun the command below to install the server dependencies required for this project.\n\n```\n    npm install ejs body-parser pusher\n```\n\n- **ejs**: this is a simple templating language for generating HTML markup with plain JavaScript.\n\n\n- **Body-parser**: a middleware used for extracting the entire body portion of an incoming request stream and expose it on `req.body` .\n\n\n- **Pusher**: a Node.js client to interact with the Pusher REST API\n\n\n## Pusher account setup\n\nHead over to Pusher and [s](https://dashboard.pusher.com/accounts/sign_up)[ign up for a free account](https://dashboard.pusher.com/accounts/sign_up). This is important as it is required before you can have access to an API key and easily access all the awesome features offered by Pusher.\n\n![realtime-table-nest-create-account](//images.ctfassets.net/1es3ne0caaid/2Ik3cczYCAy2KWY4yEQ4wW/224b22231e47355d9d1c5c901c01d2a9/realtime-table-nest-create-account.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![realtime-table-nest-dashboard](//images.ctfassets.net/1es3ne0caaid/6JbIR7XIys88skoSaauqa6/23be53f5c6f99fcc3cd158923aa776fb/realtime-table-nest-dashboard.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n\n![realtime-table-nest-create-app](//images.ctfassets.net/1es3ne0caaid/6awZQoWkUM8iMk2G6kUKAE/56c198c40e54a76b431cb76bc3abc79c/realtime-table-nest-create-app.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![realtime-table-nest-keys](//images.ctfassets.net/1es3ne0caaid/3wqfVQva8Ei0eS0AgoKqMq/4b0bb636412c1d4174674c596525dade/realtime-table-nest-keys.png)\n\n\n## Bootstrap application\n\nUnder the hood, Nest uses the Express library and therefore, favors the popular MVC pattern.\n\nTo set this up, open up `main.ts` file and update it with the content below:\n\n``` typescript\n    // ./src/main.ts\n    \n    import { NestFactory } from '@nestjs/core';\n    import { AppModule } from './app.module';\n    \n    import * as bodyParser from 'body-parser';\n    import * as express from 'express';\n    import * as path from 'path';\n    \n    async function bootstrap() {\n      const app = await NestFactory.create(AppModule);\n      app.use(express.static(path.join(__dirname, 'public')));\n       app.set('views', __dirname + '/views');\n       // set ejs as the view engine\n       app.set('view engine', 'ejs');\n      await app.listen(3000);\n    }\n    bootstrap();\n```\n\nThis is the entry point of the application and necessary for bootstrapping Nest.js apps. I have included the Express module, path and set up ejs as the view engine for the application.\n\n\n## Datatables setup\n\nGenerally, getting DataTable running on any website or app require little or less configuration as it is easy to set up and quite straight forward. All that is required is to include the necessary links on our HTML page.\n\nFor this we will create a folder called `views` within the `src` folder. Now go ahead and create a new file named `index.ejs` within it. In the newly created file, paste in the following code: \n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdn.datatables.net/1.10.15/css/jquery.dataTables.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"/style.css\"\u003e\n        \u003ctitle\u003e Datatable Realtime \u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"row\"\u003e\n                \u003ch2 class=\"text-center\"\u003e\n                    Realtime Data Table\n                \u003c/h2\u003e\n                \u003cdiv class=\"col-md-7\"\u003e\n                    \u003ctable id=\"realtime\" class=\"display\" width=\"100%\"\u003e\u003c/table\u003e\n                \u003c/div\u003e\n                \n                \u003cdiv class=\"col-md-4 col-md-offset-1\"\u003e\n                    \u003ch3 class=\"text-center\"\u003eCreate New Employee\u003c/h3\u003e\n                    \n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"name\"\u003eName\u003c/label\u003e\n                        \u003cinput type=\"text\" name=\"name\" id=\"name\" placeholder=\"Name\" class=\"form-control\"\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"position\"\u003ePosition\u003c/label\u003e\n                        \u003cselect name=\"position\" id=\"position\" class=\"form-control\"\u003e\n                            \u003coption value=\"\"\u003e--Select Position--\u003c/option\u003e\n                            \u003coption value=\"Frontend Developer\"\u003eFrontend Developer\u003c/option\u003e\n                            \u003coption value=\"UI/UX Engineer\"\u003eUI/UX Engineer\u003c/option\u003e\n                            \u003coption value=\"iOS Engineer\"\u003eiOS Engineer\u003c/option\u003e\n                            \u003coption value=\"Android Developer\"\u003eAndroid Developer\u003c/option\u003e\n                        \u003c/select\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"office\"\u003eOffice\u003c/label\u003e\n                        \u003cselect name=\"office\" id=\"office\" class=\"form-control\"\u003e\n                            \u003coption value=\"\"\u003e--Select Office--\u003c/option\u003e\n                            \u003coption value=\"Lagos\"\u003eLagos\u003c/option\u003e\n                            \u003coption value=\"London\"\u003eLondon\u003c/option\u003e\n                            \u003coption value=\"New York\"\u003eNew York\u003c/option\u003e\n                            \u003coption value=\"Berlin\"\u003eBerlin\u003c/option\u003e\n                        \u003c/select\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"extn\"\u003eExtn\u003c/label\u003e\n                        \u003cinput type=\"number\" name=\"extn\" id=\"extn\" placeholder=\"Extn\" class=\"form-control\"\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"startDate\"\u003eStart Date\u003c/label\u003e\n                        \u003cinput type=\"date\" name=\"startDate\" id=\"startDate\" placeholder=\"Start Date\" class=\"form-control\"\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003cbutton class=\"btn btn-info\" id=\"add-employee\"\u003eAdd Employee\u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \n        \u003cscript src=\"https://code.jquery.com/jquery-1.12.4.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.2/axios.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.datatables.net/1.10.15/js/jquery.dataTables.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.datatables.net/plug-ins/1.10.15/api/row().show().js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"/data.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"/main.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThis will serve as the homepage for this application. In order to make this page look presentable, we included a CDN CSS file each for Bootstrap and DataTable. Further, we’ve included a custom CSS file named `style.css`. You can download it [here](https://github.com/christiannwamba/pusher-nest-datatable/blob/master/src/public/style.css) from the repository. Once you are done, create a new folder named `public` within the `src` folder and save the stylesheet file in it.\n\nIn addition, we included a table element identified by an id of `#realtime`, this element will hold the DataTable. We have also defined relevant input fields that will be used to add values to a dataset that we’ll revisit later in the tutorial. \n\nAlso included is a CDN file each for `jQuery`, `Axios`, `Pusher`, and `DataTable`. And finally, just before the closing tag of the `\u003cbody\u003e` element on the page, we’ve included two script file named `data.js` and `main.js`. `data.js` will contain sample dataset that will be used to initialize our DataTable, while `main.js` will hold the custom script for the application. Now, go ahead and create this two files and save them in the `public` folder as we’ll need them later in the tutorial.\n\n\n## Initialize DataTable\n\nEarlier, we inserted a table element with an id `#realtime` on our page. In order to initialize the DataTable and create a blueprint for our table, we’ll use jQuery to append the DataTable method to the element and passed an object as argument. The object has a `data` property which takes a `dataset` . You can download the `dataset` [here](https://github.com/christiannwamba/pusher-nest-datatable/blob/master/src/public/data.js) and save the content in the `data.js`  that was created earlier. We also include another property called `columns` and set its value to an array of objects with each object’s value serving as a column header for our table.\n\n``` javascript\n    //   ./src/public/main.js\n      \n    \n    const app = {\n        ...\n        start() {\n          const dataTable = $('#realtime').DataTable({\n            data: dataSet,\n            columns: [\n              { title: 'Name' },\n              { title: 'Position' },\n              { title: 'Office' },\n              { title: 'Extn.' },\n              { title: 'Start date' }\n            ]\n          });\n          ...\n        }\n      };\n      \n      $(document).ready(() =\u003e app.start());\n```\n\n## Handling routes\n\nThe controller layer in Nest.js is responsible for receiving an incoming request and returning the appropriate response to the client. Nest uses a controller metadata `@Controller` to map routes to a specific controller. The starter project already contains a controller by default. We will make use of this in order to render the home for this app. Open `./src/app.controller.ts` and edit as shown below:\n\n``` typescript\n    // ./src/app.controller.ts\n    \n    import { Get, Controller, Res } from '@nestjs/common';\n    \n    @Controller()\n    export class AppController {\n      @Get()\n      root(@Res() res) {\n        res.render('index');\n      }\n    }\n```\n\nThis controller will ensure that Nest maps every `/` route to `index.ejs` file.\n\n## Adding new records to the table\n\nWe’ve already included the relevant input fields required to add more records to the dataset in the DataTable. To make this work, we’ll use a custom function called `buildForm()` to retrieve all the values of the input fields. Open `./src/public/main.js` and add the function\n\n\n``` javascript    \n    const app = {\n        buildForm() {\n          return [\n            $('#name').val(),\n            $('#position').val(),\n            $('#office').val(),\n            $('#extn').val(),\n            $('#startDate').val().replace(new RegExp('-', 'g'), '/')\n          ];\n        },\n        \n        start() {\n        ...\n        }\n      };\n      \n      $(document).ready(() =\u003e app.start());\n```\n\n\n\nIn addition we created two more methods `processForm()` and `addRow()` . While the former is responsible for processing and passing the `formData` returned by `buildForm()` to the server, the latter takes in two arguments and handles the addition of realtime data to DataTable.\n\n``` javascript\n    // ./src/public/main.js\n    \n    const app = {\n        buildForm() {\n          ...\n        },\n        \n        processForm() {\n          const formData = this.buildForm();\n          const baseURL = 'http://localhost:3000';\n          axios.post(`${baseURL}/record`, formData)\n            .then(response =\u003e console.log(response));\n        },\n        \n        start() {\n          ...\n        }\n      };\n      \n      $(document).ready(() =\u003e app.start());\n```\n\n\nPassed the formData to the server, we will set this up in a bit:\n\n``` javascript\n    // ./src/public/main.js\n    \n    \n    const app = {\n        buildForm() {\n         ...\n        },\n        \n        processForm() {\n          ...\n        },\n    \n        addRow(dataTable, data) {\n          const addedRow = dataTable.row.add(data).draw();\n          addedRow.show().draw(false);\n      \n          const addedRowNode = addedRow.node();\n          $(addedRowNode).addClass('highlight');\n        },\n    \n        start() {\n        ...      \n        }\n      };\n      \n      $(document).ready(() =\u003e app.start());\n```\n\n\nAs stated earlier, this method takes in dataTable instance and the newly added `data` as arguments. \n\nThe methods `row.add()` and `.draw()` are inbuilt DataTables API methods, other DataTables methods implemented in `addRow()` are `.show()`, `.draw(false)` and `.node()`:\n\n\n- `row.add()` adds a new row to the table using the given data.\n- `.draw()` redraws and updates the table in the current context.\n- `.show()` displays a field in our table. This is useful for cases when you want to have extra form fields available, but only show them under certain conditions.\n- `.draw(false)` adds a new row without resetting or distorting the current page.\n- `.node()` serves as an event listener, it returns the DOM element for the requested field thus enabling DOM manipulation of the field.\n\nWe then take our `processForm()` method which we built and bind it to a button using jQuery’s `.click()` method. When the button is clicked, `addRow()` automatically executes its functions on our table.\n\n\n``` javascript    \n    const app = {\n        buildForm() {\n          ...\n        },\n        \n        processForm() {\n          ...\n        },\n    \n        addRow(dataTable, data) {\n         ...\n        },\n    \n        start() {\n          ...\n          });\n          \n          // bind the processForm() method to a button\n          $('#add-employee').on('click', this.processForm.bind(this));\n        }\n      };\n      \n      $(document).ready(() =\u003e app.start());\n```\n\n\nFind the complete custom script [here](https://github.com/christiannwamba/pusher-nest-datatable/blob/master/src/public/main.js).\n\n\n## Create a controller\n\nEarlier, we already configure the `app.controller.ts` to render the homepage and display the form for consumers. The next thing we need to do is build the controller that will handle the data posted to the server. Create a new folder named `table` in the `src` folder and create a new file called `table.controller.ts` within it.\n\n``` typescript\n    import { Controller, Post, Res, Body, HttpStatus } from '@nestjs/common';\n    import { TableService } from './table.service';\n    \n    \n    @Controller('record')\n    export class TableController {\n        constructor(private tableService:TableService){}\n    \n        @Post()\n        addNewRecord(@Res() res, @Body() data: String) {\n            this.tableService.add(data);\n            res.status(HttpStatus.OK).send('Pushed');\n        }\n    \n    }\n```\n\nOne of the most important modules imported here is the `TableService` . It was injected into the controller through the constructor. As recommended by Nest a controller should handle only HTTP requests and abstract any complex logic to a service. \n\n\n## Realtime service with Pusher\n\nAs required within the `TableController` above, lets create a component as a service. This will basically receive the `formData` and publish it to a designated channel for the client side to listen and subscribe to. So create a new file within `table` folder named `table.service.ts` \n\n``` typescript\n    // ./src/table/table.service.ts\n    \n    import { Component } from '@nestjs/common';\n    \n    @Component()\n    export class TableService {\n        add(newEmployee) {\n            const Pusher = require('pusher');\n    \n            var pusher = new Pusher({\n                appId: 'YOUR_APP_ID',\n                key: 'YOUR_API_KEY',\n                secret: 'YOUR_SECRET_KEY',\n                cluster: 'YOUR_CLUSTER',\n                encrypted: true\n              });\n    \n              pusher.trigger('employees', 'new-employee', newEmployee);\n        }\n    }\n```\n\nHere we have initialized Pusher with the required credentials in order to be able to trigger an event named `new-employee` through a channel named `employees.`\n\n\n## Connecting the dots\n\nTo make this work, both the `TableController` and `TableService` needs to be registered within the `app.module.ts` file.\n\n``` typescript\n    // ./src/app.module.ts\n    \n    import { TableService } from './table/table.service';\n    import { TableController } from './table/table.controller';\n    import { Module } from '@nestjs/common';\n    import { AppController } from './app.controller';\n    \n    @Module({\n      imports: [],\n      controllers: [AppController, TableController], // add controller\n      components: [TableService], // add service\n    })\n    export class AppModule {}\n```\n\n## Updating the UI\n\nTo update the table once a form is submitted, in our `main.js` file (client) we used the `subscribe()` method from Pusher to subscribe to the created `employees` channel.\n\n\n``` javascript\n    const app = {\n        buildForm() {\n          ...\n        },\n        \n        processForm() {\n         ...\n        },\n    \n        addRow(dataTable, data) {\n          ...\n        },\n    \n        start() {\n          ...\n          // subscribe to a channel\n          var pusher = new Pusher('YOUR_API_KEY', {\n            cluster: 'CLUSTER',\n            encrypted: true\n          });\n      \n          var channel = pusher.subscribe('employees');\n          channel.bind('new-employee', (data) =\u003e {\n            this.addRow(dataTable, data);\n          });\n        }\n      };\n      \n      $(document).ready(() =\u003e app.start());\n```\n\n\n\n## Bringing it all together\n\nRestart the development server if it is currently running. Check your page on `[http://localhost:3000.](http://localhost:3000.)`\n\n![realtime-table-nest-demo](//images.ctfassets.net/1es3ne0caaid/5aFIqSwEDmcowmwou2sAIW/4312592be74631d2d41fbc6784746c27/realtime-table-nest-demo.gif)\n\n## Conclusion\n\nSo far, we have learnt how to leverage on the realtime functionality provided by Pusher to add more records to existing data. Feel free to explore more by visiting Pusher’s documentation. \nAnd lastly, the complete source code of this demo application can be found here on [github](https://github.com/christiannwamba/pusher-nest-datatable).","metaTitle":"Build a realtime table with DataTables and Nest.js","metaDescription":"This brief tutorial guides you through setting up a searchable employee database with realtime interface, using Nest.js and DataTables."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2H6cJ034piSuSEQIOCiOyY","type":"Entry","createdAt":"2018-05-03T10:21:31.497Z","updatedAt":"2018-05-03T10:21:31.497Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime table with Next.js","url":"realtime-tables-nextjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/movie-listing-next","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-05-02","description":"Use Next.js, React Table and Pusher to create a movie review site, updated in realtime as users post reviews.","prerequisite":"You need Node and npm installed on your machine. A basic knowledge of JavaScript will be helpful.","content":"Realtime applications are generally applications that produce time sensitive data or updates that requires immediate attention or consumption. From flight management software to following up with the score line and commentary when your favorite football team is playing.\n\nWe’ll be building a realtime application that will show live updates on reviews about the next movie users want to watch at the cinema. All that juicy reviews from fans, viewers and critics around the world, and I’ll want them in real time. Let’s call it **Rotten pepper**.\n\n![realtime-tables-next-demo](//images.ctfassets.net/1es3ne0caaid/4JcC8viOac2cma80iwCCGG/cfd47bab350bb80c6932e4e618c90158/realtime-tables-next-demo.gif)\n\nThe application will contain a form that allows users to fill in their review easily and will also display a table showing reviews left by users world wide in realtime. This part of the application will be built with Next.js\n\nThe other important part of this application is the API, where reviews posted by the user will go to. We’ll build this using Express and Node. Pusher would be the glue that sticks both ends together.\n\n\n## Prerequisites\n\nWe’ll be using the following tools to help build this quickly.\n\n1. [Next.js](https://github.com/zeit/next.js): this is a framework for producing server rendered applications. Just as you would with PHP, but this time with React.\n2. [Pusher](https://pusher.com/): this is a framework that allows you to build realtime applications with its easy to use pub/sub messaging API.\n3. [React Table](https://react-table.js.org/): this is a lightweight table built for React for showing extensive data.\n\n\n\u003e Please ensure you have Node and npm installed before starting the tutorial.\n\u003e No knowledge of React is required, but a basic understanding of JavaScript may be helpful.\n\n\nLet’s get building.\n\n\n## App structure\n\nIf you have no idea about Next.js, I recommend you take a look [here](https://learnnextjs.com/). It’s pretty easy and in less than an hour, you’ll be able to build real applications using it.\n\nLet’s create the directory where our app will sit:\n\n```\n    # make directory and cd into it\n    mkdir movie-listing-next \u0026\u0026 cd movie-listing-next\n    \n    # make pages, components and css directory\n    mkdir pages\n    mkdir components\n    mkdir css\n```\n\nNow we can go ahead to install dependencies needed by our application. I’ll be using Yarn for my dependency management, but feel free to use npm also.\n\nInstall dependencies using Yarn:\n\n```\n    # initilize project with yarn\n    yarn init -y\n    \n    # add dependencies with yarn\n    yarn add @zeit/next-css axios next pusher-js react react-dom react-table\n```\n\nLet’s add the following to the `script` field in our `package.json`  and save. This makes running commands for our app more easier.\n\n``` json\n    // package.json\n    {\n      \"scripts\": {\n        \"dev\": \"next\",\n        \"server\": \"node server.js\"\n       }\n    }\n```\n\nFor users to submit their reviews, they’ll need a form where they can input their name, review and rating. This is a snippet from `[components/form.js](https://github.com/Robophil/movie-listing-next/blob/master/components/form.js)` , which is a simple React form that takes the `name`, `review` and `rating`. You’ll need to create yours in the `components` directory.\n\nSnippets from `[components/form.js](https://github.com/Robophil/movie-listing-next/blob/master/components/form.js)`:\n\n``` javascript\n    export default class Form extends React.Component {\n    ....\n      render () {\n        return (\n          \u003cform onSubmit={this.handleSubmit}\u003e\n            \u003cdiv\u003e\n              \u003clabel\u003e\n              Name:\n              \u003cbr /\u003e\n                \u003cinput type='text' value={this.state.name} onChange={this.handleChange.bind(this, 'name')} /\u003e\n              \u003c/label\u003e\n            \u003c/div\u003e\n    \n            \u003cdiv\u003e\n              \u003clabel\u003e\n              Review:\n              \u003cbr /\u003e\n                \u003ctextarea rows='4' cols='50' type='text' value={this.state.review} onChange={this.handleChange.bind(this, 'review')} /\u003e\n              \u003c/label\u003e\n            \u003c/div\u003e\n    \n            \u003cdiv\u003e\n              \u003clabel\u003e\n              Rating:\n              \u003cbr /\u003e\n                \u003cinput type='text' value={this.state.rating} onChange={this.handleChange.bind(this, 'rating')} /\u003e\n              \u003c/label\u003e\n            \u003c/div\u003e\n            \u003cinput type='submit' value='Submit' /\u003e\n          \u003c/form\u003e\n        )\n      }\n    }\n``` \n\nIf you’re a React developer, you should feel right at home here. On form submission, the data is being passed down to `this.props.handleFormSubmit(this.state)`. This `props` is passed down from a different component as we’ll soon see.\n\nNow we have our form, but we still need a page to list all the reviews submitted by users. The size of our reviews could grow rapidly and we still want this in realtime, so it’s best to consider pagination from the outset. That’s why we’ll be using `react-table`, as highlighted above this is lightweight and will give us pagination out of the box.\n\nThe snippet below is from our index page, which you’ll need to create here `[pages/index.js](https://github.com/Robophil/movie-listing-next/blob/master/pages/index.js)` .\n\n``` javascript\n    // pages/index.js\n    import React from 'react'\n    import axios from 'axios'\n    import ReactTable from 'react-table'\n    import 'react-table/react-table.css'\n    import '../css/table.css'\n    import Form from '../components/form'\n    import Pusher from 'pusher-js'\n```\n\nHere we import our dependencies which include `axios` for making http calls, our styles from `table.css` and the form component we created earlier on.\n\n``` javascript\n    // pages/index.js\n    const columns = [\n      {\n        Header: 'Name',\n        accessor: 'name'\n      },\n      {\n        Header: 'Review',\n        accessor: 'review'\n      },\n      {\n        Header: 'Rating',\n        accessor: 'rating'\n      }\n    ]\n    const data = [\n      {\n        name: 'Stan Lee',\n        review: 'This movie was awesome',\n        rating: '9.5'\n      }\n    ]\n```\n\nReact-table, which is pretty easy to set up needs a `data` and `columns` props to work. There’s a pretty easy example [here](https://react-table.js.org/#/story/readme) if you want to learn more. We’re adding a sample review to `data` to have at least one review when we start our app.\n\n``` javascript\n    // pages/index.js\n    const pusher = new Pusher('app-key', {\n      cluster: 'cluster-location',\n      encrypted: true\n    })\n    \n    const channel = pusher.subscribe('rotten-pepper')\n    \n    export default class Index extends React.Component {\n      constructor (props) {\n        super(props)\n        this.state = {\n          data: data\n        }\n      }\n    \n      render () {\n        return (\n          \u003cdiv\u003e\n            \u003ch1\u003eRotten \u003cstrike\u003etomatoes\u003c/strike\u003e pepper\u003c/h1\u003e\n            \u003cstrong\u003eMovie: Infinity wars \u003c/strong\u003e\n            \u003cForm handleFormSubmit={this.handleFormSubmit.bind(this)} /\u003e\n            \u003cReactTable\n              data={this.state.data}\n              columns={columns}\n              defaultPageSize={10}\n        /\u003e\n          \u003c/div\u003e\n        )\n      }\n    }\n```\n\nHere, we created our React component and initialize Pusher and subscribe to the `rotten-pepper` channel. Kindly get your `app-id`  from your Pusher dashboard and if you don’t have an account, kindly create one [here](https://dashboard.pusher.com/accounts/sign_in). The state value `this.data` is initialized with the sample data created above and our `render` method renders both or form and our table.\n\nAt this point, we’re still missing a few vital parts. Pusher has been initialized, but it’s currently not pulling any new reviews and updating our table.\n\nTo fix that, add the following to your react component in `pages/index.js`\n``` javascript\n    // pages/index.js\n    componentDidMount () {\n        this.receiveUpdateFromPusher()\n      }\n    \n      receiveUpdateFromPusher () {\n        channel.bind('new-movie-review', data =\u003e {\n          this.setState({\n            data: [...this.state.data, data]\n          })\n        })\n      }\n    \n      handleFormSubmit (data) {\n        axios.post('http://localhost:8080/add-review', data)\n        .then(res =\u003e {\n          console.log('received by server')\n        })\n        .catch(error =\u003e {\n          throw error\n        })\n      }\n```\n\nIn `componentDidMount`, we’re calling the method `receiveUpdateFromPusher` which would receive new reviews submitted by users and update our table. We’re calling `receiveUpdateFromPusher` in `componentDidMount` so this only get called once.\nThe `handleFormSubmit` method is responsible for sending the review submitted by users down to your endpoint. This is passed as a props to the the form component as mentioned before.\n\n``` javascript\n    // next.config.js\n    const withCSS = require('@zeit/next-css')\n    module.exports = withCSS()\n```\n\nThis should be placed in a file called `next.config.js` in your root directory `movie-listing-next`. It’s responsible for loading all `.css` files which contains our styles on app startup.\n\nNow that our app can load `.css` properly, create the file `css/form.css` which is needed by `components/form.js` to style our app’s form:\n``` css\n    form {\n      margin: 30px 0;\n    }\n    \n    form div {\n      margin: 10px 0;\n    }\n```\n\nTo keep the content of our review table center aligned, create the file `css/table.css` and add the following style snippet.\n``` css\n    .rt-td {\n      text-align: center;\n    }\n```\n\nTo set the root structure of our app, we create `pages/_document.js`. This is where the rest of our app will sit.\n\n``` javascript\n    // pages/_document.js\n    import Document, { Head, Main, NextScript } from 'next/document'\n    \n    export default class MyDocument extends Document {\n      render () {\n        return (\n          \u003chtml\u003e\n            \u003cHead\u003e\n              \u003ctitle\u003eMovie listing\u003c/title\u003e\n              \u003clink rel='stylesheet' href='/_next/static/style.css' /\u003e\n            \u003c/Head\u003e\n            \u003cbody\u003e\n              \u003cMain /\u003e\n              \u003cNextScript /\u003e\n            \u003c/body\u003e\n          \u003c/html\u003e\n        )\n      }\n    }\n```\n\nNow, let’s setup the endpoint where all reviews submitted will be received.\n\n## Rotten pepper endpoint\n\nThis is where all the magic happens. When a review gets submitted, we’ll want other users to be aware of the new data and this is where Pusher shines. Create a file `server.js` at the root of your application and add the following snippet as it’s content. Remember to visit your Pusher dashboard to get your `appId`, `appKey`, `appSecret`.\n\n``` javascript\n    // server.js\n    const pusher = new Pusher({\n      appId: 'appId',\n      key: 'appKey',\n      secret: 'appSecret',\n      cluster: 'cluster',\n      encrypted: true\n    })\n    \n    app.post('/add-review', function (req, res) {\n      pusher.trigger('rotten-pepper', 'new-movie-review', req.body)\n      res.sendStatus(200)\n    })\n```\n\nFrom above, once the user hits `/add-review` we trigger an event `new-movie-review` with pusher which clients are currently listening on. We pass it the new review that was submitted and the connected clients update themselves.\n\nThe values for `appId`, `appSecret` and `appKey` should be replaced with actual credentials. This can be gotten from your app dashboard on Pusher, and if you don’t have an account simply head down to [https://pusher.com/](https://pusher.com/) and create an account.\n\n![realtime-table-nest-keys](//images.ctfassets.net/1es3ne0caaid/3wqfVQva8Ei0eS0AgoKqMq/4b0bb636412c1d4174674c596525dade/realtime-table-nest-keys.png)\n\n\nLet’s add dependencies need by our app:\n```\n    # add dependencies needed by server.js\n    yarn add body-parser cors express pusher\n```\n\nAt this point, the `dependencies` field in our `package.json` should contain the following below:\n``` json\n    \"dependencies\": {\n        \"@zeit/next-css\": \"^0.1.5\",\n        \"axios\": \"^0.18.0\",\n        \"body-parser\": \"^1.18.2\",\n        \"cors\": \"^2.8.4\",\n        \"express\": \"^4.16.3\",\n        \"next\": \"^5.1.0\",\n        \"pusher\": \"^1.5.1\",\n        \"pusher-js\": \"^4.2.2\",\n        \"react\": \"^16.3.2\",\n        \"react-dom\": \"^16.3.2\",\n        \"react-table\": \"^6.8.2\"\n      }\n```\n\nif not, simply replace the contents of the `dependencies` field in your `package.json` and run\n\n```\n    # install dependencies from package.json\n    yarn\n```\n\nThe entire content of `server.js` is right below. The line `const port = process.env.PORT || 8080` simply picks up the preferred `port` to run our app and `app.listen(port, function () {}` starts our app on that `port`.\n\n``` javascript\n    // server.js\n    const express = require('express')\n    const app = express()\n    const bodyParser = require('body-parser')\n    const cors = require('cors')\n    const Pusher = require('pusher')\n    \n    app.use(cors())\n    app.use(bodyParser.urlencoded({ extended: true }))\n    app.use(bodyParser.json())\n    \n    const port = process.env.PORT || 8080\n    \n    const pusher = new Pusher({\n      appId: 'appId',\n      key: 'appKey',\n      secret: 'appSecret',\n      cluster: 'cluster',\n      encrypted: true\n    })\n    app.post('/add-review', function (req, res) {\n      pusher.trigger('rotten-pepper', 'new-movie-review', req.body)\n      res.sendStatus(200)\n    })\n    \n    app.listen(port, function () {\n      console.log('Node app is running at localhost:' + port)\n    })\n```\n\nNow let’s see if what we’ve done so far works.\n\nIn one bash window:\n```\n    # start next app\n    yarn run dev\n```\nand for our endpoint simply run in a new bash window:\n```\n    # start api server\n    yarn run server\n```\nYou can open `[http://localhost:3000](http://localhost:3000)` in as many tabs as possible and see if a review posted in one tab gets to the others.\n\n\n## Conclusion\n\nBuilding a realtime application can be super easy with the right tools. Pusher takes all that socket and connection work out of the way and allow us focus on the app we’re building.\nNow I can sit back and watch reviews come :-)\n\nThe repo where this was done can be found [here](https://github.com/christiannwamba/movie-listing-next). Feel free to fork and improve.\nObviously this needs some more styling. How do you think we could improve this more?\n\nHappy hacking!!","metaTitle":"Build a realtime table with Next.js","metaDescription":"This tutorial shows how to make a movie review website using Next.js, React Table and Pusher. New reviews appear in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4DgAarQE1ysQCamYmWYi4e","type":"Entry","createdAt":"2018-05-01T11:42:54.355Z","updatedAt":"2018-05-01T11:42:54.355Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Building a realtime analytics dashboard for an Express application","url":"realtime-analytics-dashboard-express","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/express-realtime-analytics-dashboard","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}}],"reviewDate":"2018-04-30","description":"This tutorial shows you how to build a dashboard that monitors connections to an Express application. The dashboard will update in realtime.","prerequisite":"You will need Node.js 8.10 or higher, MongoDB 3.4 or higher, and a Pusher account.","content":"It’s important for website administrators and developers to have useful statistics regarding their web applications, to help them monitor, for instance, their app’s performance. This helps them to be proactive in bringing improvements and fixes to their sites. In this tutorial, we’ll build an Express application that uses a middleware to log all requests made to our application and pushes updated analytics on our requests in realtime to a dashboard. Here’s a preview of our app in action:\n\n![realtime-express-analytics-demo](//images.ctfassets.net/1es3ne0caaid/5l5JLcSswgyu6C2cigA0Im/bc1c5582ef4d5d5ce25c7624ae23e32d/realtime-express-analytics-demo.gif)\n\n## Prerequisites\n1. [Node.js](http://nodejs.org) 8.10.0 or higher\n2. [MongoDB](https://docs.mongodb.com/manual/installation/) 3.4 or higher.\n3. A [Pusher account](http://pusher.com/signup).\n\n## Setting up\n\nWe’ll start by using the [express application generator](https://expressjs.com/en/starter/generator.html):\n\n```\n    # if you don't already have it installed\n    npm install express-generator -g\n    \n    # create a new express app with view engine set to Handlebars (hbs)\n    express --view=hbs express-realtime-analytics-dashboard\n    cd express-realtime-analytics-dashboard \u0026\u0026 npm install\n```\n\n\nThen we’ll add our dependencies:\n\n```\n    npm install --save dotenv mongoose moment pusher\n```\n\nHere’s a breakdown of what each module is for:\n\n- **Dotenv** is a small package for loading sensitive data (namely our Pusher app credentials) from a `.env` file.\n- **Mongoose** helps us map our models to MongoDB documents.\n- **Moment** helps for easy manipulation of dates and times.\n- **Pusher** provides the realtime APIs.\n\n\n## Logging all requests\n\nWe’ll create a middleware that logs every request to our database. Our middleware will be an \"after” middleware, which means it will run after the request has been processed but just before sending the response. We’ll store the following details:\n\n- The relative URL (for instance, `/users`)\n- The HTTP method (for instance, “GET”)\n- The time it took to respond to the request\n- The day of the week\n- The hour of day,\n\nLet’s create our `RequestLog` model. Create the file `models/request_log.js` with the following content:\n\n``` javascript\n    let mongoose = require('mongoose');\n    \n    let RequestLog = mongoose.model('RequestLog', {\n        url: String,\n        method: String,\n        responseTime: Number,\n        day: String,\n        hour: Number\n    });\n    \n    module.exports = RequestLog;\n```\n\nReplace the code in your `app.js` with the following:\n\n``` javascript    \n    const express = require('express');\n    const path = require('path');\n    const moment = require('moment');\n    const RequestLog = require('./models/request_log');\n    \n    const app = express();\n    require('mongoose').connect('mongodb://localhost/express-realtime-analytics');\n    \n    app.use((req, res, next) =\u003e {\n        let requestTime = Date.now();\n        res.on('finish', () =\u003e {\n            if (req.path === '/analytics') {\n                return;\n            }\n    \n            RequestLog.create({\n                url: req.path,\n                method: req.method,\n                responseTime: (Date.now() - requestTime) / 1000, // convert to seconds\n                day: moment(requestTime).format(\"dddd\"),\n                hour: moment(requestTime).hour()\n            });\n        });\n        next();\n    });\n    \n    // view engine setup\n    app.set('views', path.join(__dirname, 'views'));\n    require('hbs').registerHelper('toJson', data =\u003e JSON.stringify(data));\n    app.set('view engine', 'hbs');\n    \n    module.exports = app;\n```\n\nHere, we attach a middleware that attaches a listener to the [finish](https://nodejs.org/api/http.html#http_event_finish) event of the response. This event is triggered when the response has finished sending. This means we can use this to calculate the response time. In our listener, we create a new request log in MongoDB.\n\n\n## Displaying our analytics on a dashboard\n\nFirst, we’ll create an analytics service object that computes the latest stats for us. Put the following code in the file `analytics_service.js` in the root of your project:\n\n``` javascript\n    const RequestLog = require('./models/request_log');\n    \n    module.exports = {\n        getAnalytics() {\n            let getTotalRequests = RequestLog.count();\n            let getStatsPerRoute = RequestLog.aggregate([\n                {\n                    $group: {\n                        _id: {url: '$url', method: '$method'},\n                        responseTime: {$avg: '$response_time'},\n                        numberOfRequests: {$sum: 1},\n                    }\n                }\n            ]);\n    \n            let getRequestsPerDay = RequestLog.aggregate([\n                {\n                    $group: {\n                        _id: '$day',\n                        numberOfRequests: {$sum: 1}\n                    }\n                },\n                { $sort: {numberOfRequests: 1} }\n            ]);\n    \n            let getRequestsPerHour = RequestLog.aggregate([\n                {\n                    $group: {\n                        _id: '$hour',\n                        numberOfRequests: {$sum: 1}\n                    }\n                },\n                {$sort: {numberOfRequests: 1}}\n            ]);\n    \n            let getAverageResponseTime = RequestLog.aggregate([\n                {\n                    $group: {\n                        _id: null,\n                        averageResponseTime: {$avg: '$responseTime'}\n                    }\n                }\n            ]);\n    \n            return Promise.all([\n                getAverageResponseTime,\n                getStatsPerRoute,\n                getRequestsPerDay,\n                getRequestsPerHour,\n                getTotalRequests\n            ]).then(results  =\u003e {\n                return {\n                    averageResponseTime: results[0][0].averageResponseTime,\n                    statsPerRoute: results [1],\n                    requestsPerDay: results[2],\n                    requestsPerHour: results[3],\n                    totalRequests: results[4],\n                };\n            })\n        }\n    };\n```\n\n\nOur service makes use of [MongoDB aggregations](https://docs.mongodb.com/manual/aggregation/) to retrieve the following statistics:\n\n- `averageResponseTime` is the average time taken by our routes to return a response.\n- `statsPerRoute` contains information specific to each route, such as the average response time and number of requests.\n- `requestsPerDays` contains a list of all the days, ordered by the number of requests per day.\n- `requestsPerHour` contains a list of all the hours, ordered by the number of requests per hour.\n- `totalRequests` is the total number of requests we’ve gotten.\n\n\nNext, we define a route for the dashboard Add the following code just before the `module.exports` line in your `app.js`:\n\n\n``` javascript    \n    app.get('/analytics', (req, res, next) =\u003e {\n        require('./analytics_service').getAnalytics()\n            .then(analytics =\u003e res.render('analytics', { analytics }));\n    });\n```\n\nFinally, we create the view. We’ll use Bootstrap for quick styling and Vue.js for easy data binding. Create the file `views/analytics.hbs` with the following content:\n\n``` html\n    \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\n          integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n    \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n    \n    \u003cdiv class=\"container\" id=\"app\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-5\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003ch5 class=\"card-title\"\u003eTotal requests\u003c/h5\u003e\n                        \u003cdiv class=\"card-text\"\u003e\n                            \u003ch3\u003e\\{{ totalRequests }}\u003c/h3\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-md-5\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003ch5 class=\"card-title\"\u003eAverage response time\u003c/h5\u003e\n                        \u003cdiv class=\"card-text\"\u003e\n                            \u003ch3\u003e\\{{ averageResponseTime }} seconds\u003c/h3\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-5\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003ch5 class=\"card-title\"\u003eBusiest days of the week\u003c/h5\u003e\n                        \u003cdiv class=\"card-text\" style=\"width: 18rem;\" v-for=\"day in requestsPerDay\"\u003e\n                            \u003cul class=\"list-group list-group-flush\"\u003e\n                                \u003cli class=\"list-group-item\"\u003e\n                                    \\{{ day._id }} (\\{{ day.numberOfRequests }} requests)\n                                \u003c/li\u003e\n                            \u003c/ul\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-md-5\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003ch5 class=\"card-title\"\u003eBusiest hours of day\u003c/h5\u003e\n                        \u003cdiv class=\"card-text\" style=\"width: 18rem;\" v-for=\"hour in requestsPerHour\"\u003e\n                            \u003cul class=\"list-group list-group-flush\"\u003e\n                                \u003cli class=\"list-group-item\"\u003e\n                                    \\{{ hour._id }} (\\{{ hour.numberOfRequests }} requests)\n                                \u003c/li\u003e\n                            \u003c/ul\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-5\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003ch5 class=\"card-title\"\u003eMost visited routes\u003c/h5\u003e\n                        \u003cdiv class=\"card-text\" style=\"width: 18rem;\" v-for=\"route in statsPerRoute\"\u003e\n                            \u003cul class=\"list-group list-group-flush\"\u003e\n                                \u003cli class=\"list-group-item\"\u003e\n                                    \\{{ route._id.method }} \\{{ route._id.url }} (\\{{ route.numberOfRequests }} requests)\n                                \u003c/li\u003e\n                            \u003c/ul\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-md-5\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003ch5 class=\"card-title\"\u003eSlowest routes\u003c/h5\u003e\n                        \u003cdiv class=\"card-text\" style=\"width: 18rem;\" v-for=\"route in statsPerRoute\"\u003e\n                            \u003cul class=\"list-group list-group-flush\"\u003e\n                                \\{{ route._id.method }} \\{{ route._id.url }} (\\{{ route.responseTime }} s)\n                            \u003c/ul\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cscript\u003e\n        window.analytics = JSON.parse('{{{ toJson analytics }}}');\n    \n        const app = new Vue({\n            el: '#app',\n    \n            data: window.analytics\n        });\n    \u003c/script\u003e\n```\n\n## Making the dashboard realtime\n\nTo make our dashboard realtime, we need to re-calculate the analytics as new requests come in. This means we’ll:\n\n- Notify all clients of the updated analytics when there’s a new request\n- Listen for the new analytics on our frontend and update the view accordingly\n\nPusher will power our app’s realtime functionality. Sign in to [your Pusher dashboard](http://app.pusher.com) and create a new app. Copy your app credentials from the **App Keys** section. Create a `.env` file and add your credentials in it:\n\n```\n    PUSHER_APP_ID=your-app-id\n    PUSHER_APP_KEY=your-app-key\n    PUSHER_APP_SECRET=your-app-secret\n    PUSHER_APP_CLUSTER=your-app-cluster\n```\n\nNow modify the code in your `app.js` so it looks like this:\n\n``` javascript\n    const express = require('express');\n    const path = require('path');\n    const moment = require('moment');\n    const RequestLog = require('./models/request_log');\n    \n    const app = express();\n    require('mongoose').connect('mongodb://localhost/poster');\n    \n    require('dotenv').config();\n    const Pusher = require('pusher');\n    const pusher = new Pusher({\n        appId: process.env.PUSHER_APP_ID,\n        key: process.env.PUSHER_APP_KEY,\n        secret: process.env.PUSHER_APP_SECRET,\n        cluster: process.env.PUSHER_APP_CLUSTER\n    });\n    \n    app.use((req, res, next) =\u003e {\n        let requestTime = Date.now();\n        res.on('finish', () =\u003e {\n            if (req.path === '/analytics') {\n                return;\n            }\n    \n            RequestLog.create({\n                url: req.path,\n                method: req.method,\n                responseTime: (Date.now() - requestTime) / 1000, // convert to seconds\n                day: moment(requestTime).format(\"dddd\"),\n                hour: moment(requestTime).hour()\n            });\n    \n            // trigger a message with the updated analytics\n            require('./analytics_service').getAnalytics()\n                .then(analytics =\u003e pusher.trigger('analytics', 'updated', {analytics}));\n        });\n        next();\n    });\n    \n    // view engine setup\n    app.set('views', path.join(__dirname, 'views'));\n    require('hbs').registerHelper('toJson', data =\u003e JSON.stringify(data));\n    app.set('view engine', 'hbs');\n    \n    app.get('/analytics', (req, res, next) =\u003e {\n        require('./analytics_service').getAnalytics()\n            .then(analytics =\u003e res.render('analytics', { analytics }));\n    });\n    \n    module.exports = app;\n```\n\nOn the frontend, we’ll pull in Pusher and listen for the `update` message on the `analytics` channel. We’l then update the `window.analytics` values, and allow Vue to update the UI for us. Add the following code to the end of your `views/analytics.hbs`:\n\n``` javascript    \n    \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        const pusher = new Pusher('your-app-key', { cluster: 'your-app-cluster'});\n        pusher.subscribe('analytics')\n                .bind('updated', (data) =\u003e {\n                    Object.keys(data.analytics).forEach(stat =\u003e {\n                        window.analytics[stat] = data.analytics[stat];\n                    })\n                })\n    \u003c/script\u003e\n```\n\n\nReplace `your-app-key` and `your-app-id` with your Pusher app credentials.\n\nTime for us to test our app. Let’s create some dummy routes—one, actually. This route will take different amounts of time to load, depending on the URL, so we can see the effect on our statistics. Visiting `/wait/3` will wait for three seconds, `/wait/1` for one second and so on. Add this to your `app.js`, just before the `module.exports` line:\n\n``` javascript\n    app.get('/wait/:seconds', async (req, res, next) =\u003e {\n        await ((seconds) =\u003e {\n            return new Promise(resolve =\u003e {\n                setTimeout(\n                    () =\u003e resolve(res.send(`Waited for ${seconds} seconds`)),\n                    seconds * 1000\n                )\n            });\n        })(req.params.seconds);\n    });\n```\n\nNow to see the app in action. Start your MongoDB server by running `mongod`. (On Linux/macOS, you might need to run it as `sudo`).\n\nThen start your app by running:\n\n```\n    npm start\n```\n\nVisit your analytics dashboard at http://localhost:3000/analytics. Then play around with the app by visiting a few pages (the `wait` URL with different values for the number of seconds) and watch the stats displayed on the dashboard change in realtime.\n\n\n\u003e Note: you might see that the number of requests increases by more than one when you visit a page. That’s because it’s also counting the requests for the CSS files (included with Express).\n\n\n## Conclusion\n\nIn this article, we’ve built a middleware that tracks every request, a service that computes analytics for us based on these tracks, and a dashboard that displays them. Thanks to Pusher, we’ve been able to make the dashboard update in realtime as requests come in. The full source code is available [on GitHub](https://github.com/shalvah/express-realtime-analytics-dashboard).\n\n","metaTitle":"Building a realtime analytics dashboard for an Express app","metaDescription":"Learn to build an application analytics dashboard. Create an Express app, and implement middleware to track user requests."}}],"defaultValue":"Channels \u0026 Live Table","queryType":"tag","pages":2,"route":"/tutorials","query":{"product":"Channels","tag":"Live Table"}}},"page":"/tutorials","query":{"product":"Channels","tag":"Live Table"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Live%20Table by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:45:54 GMT -->
</html>