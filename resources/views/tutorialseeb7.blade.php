<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Feeds&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:42:38 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">31</span> tutorials for “<span class="css-npldjc ehwuahf2">Feeds</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsfa1c.html?product=Channels&amp;tag=Feeds" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials6264.html?product=Beams&amp;tag=Feeds" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Feeds"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/photo-feed-go-vuejs.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a photo feed with Go and Vue.js</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Build a photo feed application using Go, Vue.js and SQLite. Users can post pictures, and see each others&#x27; images appear ...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/social-feed-ruby-rails.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Ruby</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a social feed with Ruby on Rails and PostgreSQL</h3><p class="css-k12xad e5jrto45">This tutorial will show you how to create a simple social media feed using Ruby on Rails. Users will be able to make pos...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/activity-feed-dotnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an activity feed using .NET</h3><p class="css-k12xad e5jrto45">Build an activity feed and dashboard using .NET. Create two interfaces: one for entering and modifying data, and another...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/location-feed-android-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a location feed app for Android with Kotlin</h3><p class="css-k12xad e5jrto45">This tutorial shows you how to build a location-sharing app for Android using Kotlin. The app has a Node.js backend. Use...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/android-notifications-guardian-api.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Publish Android notifications from the Guardian’s API</h3><p class="css-k12xad e5jrto45">Learn how to build a news notification service that hooks into the Guardian&#x27;s public APIs. Create an Android app using K...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/instagram-clone-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime Instagram clone — Part 3: Realtime feed updates with Pusher and desktop notifications</h3><p class="css-k12xad e5jrto45">This four-part series takes you through building an Instagram clone using Node and React. In part three, implement realt...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/instagram-clone-part-4.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime Instagram clone — Part 4: Going offline with service workers</h3><p class="css-k12xad e5jrto45">This four-part series takes you through building an Instagram clone using Node and React. In part four, implement offlin...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/instagram-clone-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime Instagram clone — Part 1: Setting up the project and creating the UI</h3><p class="css-k12xad e5jrto45">This four-part series takes you through building an Instagram clone using Node and React. In part one, set up your proje...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/instagram-clone-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime Instagram clone — Part 2: Connecting the UI with GraphQL data</h3><p class="css-k12xad e5jrto45">This four-part series takes you through building an Instagram clone using Node and React. In part two, connect your UI a...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsce66.html?tag=Feeds&amp;page=1" class="css-5s6711 edg0byb1">Prev</a><a href="tutorialsce66.html?tag=Feeds&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialseeb7.html?tag=Feeds&amp;page=2" class="css-2wakph edg0byb1">2</a><a href="tutorials99c0.html?tag=Feeds&amp;page=3" class="css-5s6711 edg0byb1">3</a><a href="tutorials9585.html?tag=Feeds&amp;page=4" class="css-5s6711 edg0byb1">4</a><a href="tutorials99c0.html?tag=Feeds&amp;page=3" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":31,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"34QrjBOqpOcEcGQCssMcsS","type":"Entry","createdAt":"2018-06-06T10:51:18.709Z","updatedAt":"2020-06-19T12:51:14.059Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a photo feed with Go and Vue.js","url":"photo-feed-go-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-photofeed-pusher-go","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-06-04","description":"Build a photo feed application using Go, Vue.js and SQLite. Users can post pictures, and see each others' images appear in realtime.","prerequisite":"You will need Go and SQLite installed on your machine, as well as basic knowledge of Go and JavaScript.","content":"Many social media based applications allow users to upload photos and these photos are usually displayed in a timeline for their followers and others to see. In the past, you would have had to refresh your feed manually to see new photos uploaded to the timeline. However, with modern web technologies, you can see the updates in realtime without having to refresh the page manually.\n\nIn this article, we will consider how you can build a realtime photo feed using Pusher Channels, GO and a little Vue.js. [Pusher Channels](https://pusher.com) helps you “easily build scalable in-app notifications, chat, realtime graphs, geotracking and more in your web \u0026 mobile apps with our hosted pub/sub messaging API.”\n\nThis is a preview of what we will be building:\n\n![go-photo-feed-demo](//images.ctfassets.net/1es3ne0caaid/5vVy2T7aY8qoOiCuA8oGQK/abdfe10038a2935fa4a894296db6630d/go-photo-feed-demo.gif)\n\n## Prerequisites\n\nBefore we start building our application, make sure you have:\n\n- Basic knowledge of the [Go](https://golang.org/) programming language.\n- Basic JavaScript (Vue.js) knowledge.\n- Go (version \u003e= 0.10.x) installed on your machine. Check out the [installation guide](https://golang.org/doc/install).\n- SQLite (version \u003e= 3.x) installed on your machine.\n\nLet’s get started.\n\n\n## Getting a Pusher Channels application\n\nThe first step will be to get a Pusher Channels application. We will need the application credentials for our realtime features to work.\n\nGo to the Pusher website and create an account. After creating an account, you should create a new application. Follow the application creation wizard and then you should be given your application credentials, we will use this later in the article.\n\n![go-photo-feed-app-keys](//images.ctfassets.net/1es3ne0caaid/5mwD9r7FFmWugK6AyY08Ga/fdff5e30849724654dd10c6a5f3de29a/go-photo-feed-app-keys.png)\n\nNow that we have our application, let’s move on to the next step\n\n## Creating our Go application\n\nThe next thing we want to do is create the Go application. In your terminal, `cd` to your `$GOPATH` and create a new directory there.\n\n```\n    $ cd $GOPATH/src\n    $ mkdir gofoto\n    $ cd gofoto\n```\n\n\u003e 💡  It is recommended that you place the source code for your project in the `src` subdirectory (e.g., `$GOPATH/src/your_project` or `$GOPATH/src/github.com/your_github_username/your_project`.\n\nNext, we will create some directories to organize our application a little:\n\n```\n    $ mkdir database\n    $ mkdir public\n    $ mkdir public/uploads\n```\n\nThis will create a `database` and `public` directory, and also an `uploads` directory inside the public directory. We will store our database file inside the `database` directory, we will keep our public files: HTML and images, inside the `public` and `uploads` directory. Create a new `index.html` file in the `public` directory that was created.\n\nNow let’s create our first (and only) Go file for this article. We will try to keep everything simple by placing all our source code in a single file. Create a `main.go` file in the project root.\n\nIn the file paste the following:\n\n``` go\n    package main\n    \n    import (\n        \"database/sql\"\n        \"io\"\n        \"net/http\"\n        \"os\"\n        \n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/middleware\"\n        _ \"github.com/mattn/go-sqlite3\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n```\n\nAbove we have imported some packages we will be needing to work on our photo feed. We need the `database/sql` to run SQL queries, the `io` and `os` package for our file uploading process, and the `net/http` for our HTTP status codes.\n\nWe have some other external packages we imported. The `labstack/echo` package is the [Echo framework](https://github.com/labstack/echo) that we will be using. We also have the `mattn/go-sqlite3` package which is for SQLite. Finally, we imported the `pusher/pusher-http-go` package which we will use to trigger events to Pusher Channels.\n\n### Importing external Go packages\nBefore we continue, let’s pull in these packages using our terminal. Run the following commands below to pull the packages in:\n\n```\n    $ go get github.com/labstack/echo\n    $ go get github.com/labstack/echo/middleware\n    $ go get github.com/mattn/go-sqlite3\n    $ go get github.com/pusher/pusher-http-go\n```\n\n\u003e Note that the commands above will not return any confirmation output when it finishes installing the packages. If you want to confirm the packages were indeed installed you can just check the `$GOPATH/src/github.com` directory.\n\nNow that we have pulled in our packages, let’s create the `main` function. This is the function that will be the entry point of our application. In this function, we will set up our applications database, middleware, and routes.\n\nOpen the `main,go` file and paste the following code:\n\n``` go\n    func main() {\n        db := initialiseDatabase(\"database/database.sqlite\")\n        migrateDatabase(db)\n        \n        e := echo.New()\n    \n        e.Use(middleware.Logger())\n        e.Use(middleware.Recover())\n    \n        e.File(\"/\", \"public/index.html\")\n        e.GET(\"/photos\", getPhotos(db))\n        e.POST(\"/photos\", uploadPhoto(db))\n        e.Static(\"/uploads\", \"public/uploads\")\n    \n        e.Logger.Fatal(e.Start(\":9000\"))\n    }\n```\n\nIn the code above, we instantiated our database using the file path to the database file. This will create the SQLite file if it did not already exist. We then run the `migrateDatabase` function which migrates the database.\n\nNext, we instantiate Echo and then register some middlewares. The [logger middleware](https://echo.labstack.com/middleware/logger) is helpful for logging information about the HTTP request while the [recover middleware](https://echo.labstack.com/middleware/recover) “recovers from panics anywhere in the chain, prints stack trace and handles the control to the centralized [HTTPErrorHandler](https://echo.labstack.com/guide/customization#http-error-handler).”\n\nWe then set up some routes to handle our requests. The first handler is the `File` handler. We use this to serve the `index.html` file. This will be the entry point to the application from the frontend. We also have the `/photos` route which accepts a `POST` and `GET` request. We need these routes to act like API endpoints that are used for uploading and displaying the photos. The final handler is `Static`. We use this to return static files that are stored in the `/uploads` directory.\n\nWe finally use `e.Start` to start our Go web server running on port 9000. The port is not set in stone and you can choose any available and unused port you feel like.\n\nAt this point, we have not created most of the functions we referenced in the `main` function so let’s do so now.\n\n### Creating our database management functions\n\nIn the `main` function we referenced an `initialiseDatabase` and `migrateDatabase` function. Let’s create them now. In the `main.go` file, paste the following functions above the `main` function:\n\n``` go\n    func initialiseDatabase(filepath string) *sql.DB {\n        db, err := sql.Open(\"sqlite3\", filepath)\n        if err != nil || db == nil {\n            panic(\"Error connecting to database\")\n        }\n     \n        return db\n    }\n    \n    func migrateDatabase(db *sql.DB) {\n        sql := `\n            CREATE TABLE IF NOT EXISTS photos(\n                    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n                    src VARCHAR NOT NULL\n            );\n       `\n       \n        _, err := db.Exec(sql)\n        if err != nil {\n            panic(err)\n        }\n    }\n```\n\nIn the `initialiseDatabase` function, we create an instance of the SQLite database using the database file and return that instance. In the `migrateDatabase` function, we use the instance of the database returned in the previous function to execute the migration SQL.\n\nLet’s create the data structure for our photo and photo collection.\n\n### Creating our data structures\n\nThe next thing we will do is create the data structure for our object types. We will create a `Photo` structure and a `PhotoCollection` structure. The `Photo` struct will define how a typical photo will be represented while the `PhotoCollection` will define how a collection of photos will be represented.\n\nOpen the `main.go` file and paste the following code above the `initialiseDatabase` function:\n\n``` go\n    type Photo struct {\n        ID  int64  `json:\"id\"`\n        Src string `json:\"src\"`\n    }\n    \n    type PhotoCollection struct {\n        Photos []Photo `json:\"items\"`\n    }\n```\n\n### Creating our route handler functions\n\nNext let’s create the functions for our routes. Open the `main.go` file and paste the following file inside it:\n\n```go\n    func getPhotos(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            rows, err := db.Query(\"SELECT * FROM photos\")\n            if err != nil {\n                panic(err)\n            }\n            \n            defer rows.Close()\n    \n            result := PhotoCollection{}\n    \n            for rows.Next() {\n                photo := Photo{}\n                \n                err2 := rows.Scan(\u0026photo.ID, \u0026photo.Src)\n                if err2 != nil {\n                    panic(err2)\n                }\n    \n                result.Photos = append(result.Photos, photo)\n            }\n    \n            return c.JSON(http.StatusOK, result)\n        }\n    }\n    \n    func uploadPhoto(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            file, err := c.FormFile(\"file\")\n            if err != nil {\n                return err\n            }\n            \n            src, err := file.Open()\n            if err != nil {\n                return err\n            }\n    \n            defer src.Close()\n    \n            filePath := \"./public/uploads/\" + file.Filename\n            fileSrc := \"http://127.0.0.1:9000/uploads/\" + file.Filename\n    \n            dst, err := os.Create(filePath)\n            if err != nil {\n                panic(err)\n            }\n    \n            defer dst.Close()\n    \n            if _, err = io.Copy(dst, src); err != nil {\n                panic(err)\n            }\n    \n            stmt, err := db.Prepare(\"INSERT INTO photos (src) VALUES(?)\")\n            if err != nil {\n                panic(err)\n            }\n    \n            defer stmt.Close()\n    \n            result, err := stmt.Exec(fileSrc)\n            if err != nil {\n                panic(err)\n            }\n    \n            insertedId, err := result.LastInsertId()\n            if err != nil {\n                panic(err)\n            }\n    \n            photo := Photo{\n                Src: fileSrc,\n                ID:  insertedId,\n            }\n    \n            return c.JSON(http.StatusOK, photo)\n        }\n    }\n```\n\nIn the `getPhotos` method, we are simply running the query to fetch all the photos from the database and returning them as a JSON response to the client. In the `uploadPhoto` method we first get the file to be uploaded then upload them to the server and then we run the query to insert a new record in the `photos` table with the newly uploaded photo. We also return a JSON response from that function.\n\n### Adding realtime support to our Go application\n\nThe next thing we want to do is trigger an event when a new photo is uploaded to the server. For this, we will be using the [Pusher Go HTTP library](https://github.com/pusher/pusher-http-go). \n\nIn the `main.go` file paste the following above the type definitions for the `Photo` and `PhotoCollection`:\n\n``` go\n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n```\n\nThis will create a new Pusher client instance. We can then use this instance to trigger notifications to different channels we want. Remember to replace the `PUSHER_APP_*` keys with the keys provided when you created your Pusher application earlier.\n\nNext, go to the `uploadPhoto` function in the `main.go` file and right before the `return` statement at the bottom of the function, paste the following code:\n\n``` go\n    client.Trigger(\"photo-stream\", \"new-photo\", photo)\n```\n\nThis is the code that triggers a new event when a new photo is uploaded to our application.\n\nThat will be all for our Go application. At this point, you can build your application and compile it into a binary using the `go build` command. However, for this tutorial we will just run the binary temporarily:\n\n``` \n    $ go run main.go\n```\n\n![go-photo-feed-go-run](//images.ctfassets.net/1es3ne0caaid/3DPeaIV05GMOGMSUouAaO/ce811f6f30da4b86c8c659f8637fdc3e/go-photo-feed-go-run.png)\n\n## Building our frontend\n\nThe next thing we want to do is build out our frontend. We will be using the [Vue.js framework](https://vuejs.org/) and the [Axios library](https://github.com/axios/axios) to send requests.\n\nOpen the `index.html` file and in there paste the following code:\n\n``` html\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\"\u003e\n        \u003ctitle\u003ePhoto Feed\u003c/title\u003e\n        \u003cstyle type=\"text/css\"\u003e\n            #photoFile { display: none; }\n            #app img { max-width: 100%; }\n            .image-row { margin: 20px 0; }\n            .image-row .thumbnail { padding: 2px; border: 1px solid #d9d9d9; }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n        \n            \u003cnav class=\"navbar navbar-expand-lg navbar-light bg-light\"\u003e\n                \u003ca class=\"navbar-brand\" href=\"#\"\u003eGoFoto\u003c/a\u003e\n                \u003cdiv\u003e\n                    \u003cul class=\"navbar-nav mr-auto\"\u003e\n                        \u003cli class=\"nav-item active\"\u003e\n                            \u003ca class=\"nav-link\" v-on:click=\"filePicker\" href=\"#\"\u003eUpload\u003c/a\u003e\n                            \u003cinput type=\"file\" id=\"photoFile\" ref=\"myFiles\" @change=\"upload\" name=\"file\" /\u003e\n                        \u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n            \u003c/nav\u003e\n            \n            \u003cdiv class=\"container\"\u003e\n                \u003cdiv class=\"row justify-content-md-center\" id=\"loading\" v-if=\"loading\"\u003e\n                    \u003cdiv class=\"col-xs-12\"\u003e\n                        Loading photos...\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"row justify-content-md-center image-row\" v-for=\"photo in photos\"\u003e\n                    \u003cdiv class=\"col col-lg-4 col-md-6 col-xs-12\"\u003e\n                        \u003cimg class=\"thumbnail\" :src=\"photo.src\" alt=\"\" /\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \n        \u003c/div\u003e\n        \u003cscript src=\"//js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the HTML file above we have defined the design for our photostream. We are using Bootstrap 4 and we included the CSS in the HTML above. We are also using the Axios library, Pusher library, and Vue framework. We included the links to the scripts at the bottom of the HTML document.\n\nNext let’s add the Vue.js code. In the HTML file, add the following code right before the closing `body` tag:\n\n``` javascript\n    \u003cscript type=\"text/javascript\"\u003e\n        new Vue({\n            el: '#app',\n            data: {\n                photos: [],\n                loading: true,\n            },\n            mounted() {\n                const pusher = new Pusher('PUSHER_APP_KEY', {\n                    cluster: 'PUSHER_APP_CLUSTER',\n                    encrypted: true\n                });\n                \n                let channel = pusher.subscribe('photo-stream')\n                \n                channel.bind('new-photo', data =\u003e this.photos.unshift(data));\n                \n                axios.get('/photos').then(res =\u003e {\n                    this.loading = false\n                    this.photos = res.data.items ? res.data.items : []\n                })\n            },\n            methods: {\n                filePicker: function () {\n                    let elem = document.getElementById('photoFile');\n                    \n                    if (elem \u0026\u0026 document.createEvent) {\n                        let evt = document.createEvent(\"MouseEvents\");\n                        evt.initEvent(\"click\", true, false);\n                        elem.dispatchEvent(evt);\n                    }\n                },\n                upload: function () {\n                    let data = new FormData();\n                    data.append('file', this.$refs.myFiles.files[0]);\n    \n                    axios.post('/photos', data).then(res =\u003e console.log(res))\n                }\n            }\n        });\n    \u003c/script\u003e\n```\n\nAbove we created a Vue instance and stored the properties `photos` and `loading`. The `photos` property stores the photo list and the `loading` just holds a boolean that indicates if the photos are loading or not.\n\nIn the `mounted` method we create an instance of our Pusher library. We then listen on the `photo-stream` channel for the `new-photo` event. When the event is triggered we append the new photo from the event to the `photos` list. We also send a GET request to `/photos` to fetch all the photos from the API. Replace the `PUSHER_APP_*` keys with the one from your Pusher dashboard.\n\nIn the `methods` property, we added a few methods. The `filePicker` is triggered when the ‘Upload’ button is pressed on the UI. It triggers a file picker that allows the user to upload photos. The `upload` method takes the uploaded file and sends a POST request with the file to the API for processing. \n\nThat’s all for the frontend, you can save the file and head over to your web browser. Visit http://127.0.0.1:9000 to see your application in action.\n\nHere’s how it will look again:\n\n![go-photo-feed-demo](//images.ctfassets.net/1es3ne0caaid/5vVy2T7aY8qoOiCuA8oGQK/abdfe10038a2935fa4a894296db6630d/go-photo-feed-demo.gif)\n\n## Conclusion\n\nIn this article, we have been able to demonstrate how you can use Pusher Channels in your Go application to provide realtime features for your application. As seen from the code samples above, it is very easy to get started with Pusher Channels. Check the [documentation](https://pusher.com/docs) to see other ways you can use Pusher Channels to provide realtime features to your users.\n\nThe source code for this application is available on [GitHub](https://github.com/neoighodaro/realtime-photofeed-pusher-go).","metaTitle":"Build a photo feed with Go and Vue.js","metaDescription":"This short tutorial shows how to add realtime functionality to a Go web app. Use Go, Vue.js and SQLite to create a simple photo feed."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"121B5pZDQcg0umAwY4cOWs","type":"Entry","createdAt":"2018-05-24T08:08:32.375Z","updatedAt":"2018-05-24T08:08:32.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a social feed with Ruby on Rails and PostgreSQL","url":"social-feed-ruby-rails","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/9jaswag/pusher-live-feeds","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6S5luSjtlYk4i8eM8AyO4I","type":"Entry","createdAt":"2018-02-02T13:39:48.331Z","updatedAt":"2018-02-12T14:41:19.307Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby","url":"ruby","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"hPWAADkjVmomS68E6seqQ","type":"Entry","createdAt":"2018-02-12T14:48:52.613Z","updatedAt":"2018-02-12T14:48:52.613Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby on Rails","url":"ruby-on-rails","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-05-23","description":"This tutorial will show you how to create a simple social media feed using Ruby on Rails. Users will be able to make posts, and like other people's posts. The feed will update instantly as new posts are made.","prerequisite":"To follow this tutorial, you will need Ruby and Rails installed on your machine. A basic understanding of Ruby, PostgreSQL and CoffeeScript will help you get the most out of this tutorial.","content":"## Introduction\n\nThe common feature at the heart of every social media platform is posts. In one way or another, every social media platform out there provides a summary of these posts in feeds.\nThe best social media platforms offer realtime updates of posts in user feeds. This way, no social content is delayed and everyone gets access to the latest information as soon as it drops.\n\nIn this post, we’ll build a simple app with realtime feed and likes. Posts will appear in our feed as soon as they are posted as well as their like counts increase in realtime once they’re liked.\n\nA sneak-peek into what we will build in this post:\n\n![ruby-social-feed-demo](//images.ctfassets.net/1es3ne0caaid/4pbg6jUfZK6QG24o48kso0/be6f2e60308c6e363439d6447f87edf7/ruby-social-feed-demo.gif)\n\n## Prerequisites\n\nA basic understanding of Ruby, CoffeeScript and PostgreSQL will help you get the best out of this tutorial. You can check the [PostgreSQL](https://www.postgresql.org/download/), [Ruby](https://www.ruby-lang.org/en/downloads/) and [Rails](http://guides.rubyonrails.org/getting_started.html) documentation for installation steps.\n\n## Setting up the application\n\nBefore starting off, ensure that you have Ruby and Rails installed. Run the following command to confirm your version:\n\n```\n    $ ruby -v      // 2.1 or above\n    $ rails -v   // 4.2 or above\n```\n\nOpen your terminal and run the following Rails commands to create our demo application:\n\n```\n    # create a new Rails application\n    $ rails new pusher-live-feeds -T --database=postgresql\n```\n\nGo ahead and change directory into the newly created `pusher-live-feeds` folder:\n\n```\n    # change directory\n    $ cd pusher-live-feeds\n```\n\nIn the root of your `pusher-live-feeds` directory, open your `Gemfile` and add the following gems:\n\n```\n    # Gemfile\n    \n    gem 'bootstrap', '~\u003e 4.1.0'\n    gem 'jquery-rails'\n    gem 'pusher'\n    gem 'figaro'\n```\n\nIn your terminal, ensure you are in the `pusher-live-feeds` project directory and install the gems by running:\n\n```\n    $ bundle install\n```\n\n## Database setup\n\nTo get our app up and running, we’ll go ahead and create a database for it to work with. You can check out this [article](https://www.digitalocean.com/community/tutorials/how-to-setup-ruby-on-rails-with-postgres) on how to create a Postgres database and an associated user and password.\n\nOnce you have your database details, in your `database.yml` file, under the `development` key, add the following code:\n\n``` yaml\n    # config/database.yml\n    \n    ...\n    development:\n      \u003c\u003c: *default\n      database: pusher-live-feeds_development // add this line if it isn't already there\n      username: database_user // add this line\n      password: user_password // add this line\n    ...\n```\n\nEnsure that the username and password entered in the code above has access to the `pusher-live-feeds_development database`. After that, run the following code to setup the database:\n\n```\n    # setup database\n    $ rails db:setup\n```\n\n## Bootstrap the application\n\nWith our database all set up, we’ll go ahead and create our models and controllers. In your terminal, while in the project’s directory, run the following code:\n\n```\n    # generate a post model\n    $ rails g model post username:string post:text\n    \n    # generate a like model\n    $ rails g model like like_count:integer post:references\n    \n    # generate a posts controller with the index, new and create view\n    $ rails g controller posts index new create\n```\n\nNext, we’ll modify our like model migration file to contain an initial default value for likes. In the `db/migrate` folder, look for the create likes migration file. It should be a file with the current date stamp and ends with `_create_likes.rb`. In that file, update the code there with the following:\n\n``` ruby\n    # db/migrate/20180520125755_create_likes.rb\n    \n    class CreateLikes \u003c ActiveRecord::Migration[5.1]\n      def change\n        create_table :likes do |t|\n          t.integer :like_count, default: 0 # add the default: 0 part.\n          t.references :post, foreign_key: true\n          t.timestamps\n        end\n      end\n    end\n```\n\nIn our post model, we’ll also add an association to the likes model. In your post model, add the following code:\n\n``` ruby\n    # app/models/post.rb\n    \n    class Post \u003c ApplicationRecord\n      has_many :likes\n    end\n```\n\nNow, we’re ready to run our database migrations and see our new app. In your terminal, run the following code:\n\n```\n    # run database migrations\n    $ rails db:migrate\n```\n\nAfter running migrations, start the development server on your terminal by running `rails s`. Visit http://localhost:3000 in your browser to see your brand new application:\n\n![youre-on-rails](//images.ctfassets.net/1es3ne0caaid/3sOsgC4S80gOKM8Waqkgui/87c5c9e64375cbb2f8f2516223f4e515/youre-on-rails.png)\n\n## Pusher account setup\n\nIt’s time for us to create our app on Pusher. Head over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up).\n\n![ruby-create-pusher-account](//images.ctfassets.net/1es3ne0caaid/6uDbn5kOyIOiKyeSeOKqeS/6136b86bc4d9b6ceff7fcf8458375a19/ruby-create-pusher-account.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![ruby-channels-dashboard](//images.ctfassets.net/1es3ne0caaid/5IDtPf0HhC4aKg66gguYq8/183e0b23ec44fdfc23a38921e11fe9e3/ruby-channels-dashboard.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n\n![ruby-new-pusher-app](//images.ctfassets.net/1es3ne0caaid/3qnLmThfu8ue2ImYKKSw8a/2e4f39b15b8787e0f6d3b4f2ea022d95/ruby-new-pusher-app.png)\n\nClick the **App Keys** tab to retrieve your keys\n\n![ruby-app-keys](//images.ctfassets.net/1es3ne0caaid/1XHWE3GCeoCeqsMCO8uM2q/52523148497d08f6e9ba4f52fe0750f6/ruby-app-keys.png)\n\n## Building the homepage\n\nWith our Pusher account set up, let’s change our app’s landing page to something eye-worthy. Let’s set our homepage to our post’s index page and add the necessary routes for our app.\nIn your routes file, add the following code:\n\n``` ruby\n    # config/routes.rb\n    \n    Rails.application.routes.draw do\n      resources :posts\n      post '/likes/:post_id', to: 'posts#add_like', as: \"add_likes\"\n      root 'posts#index'\n    end\n```\nNext, we’ll require Bootstrap and add some styling. Add the following code to your `application.js` file, all before the last line:\n\n``` javascript\n    # app/assets/javascripts/application.js\n    \n    .....\n    //= require jquery3 # add this line\n    //= require popper # add this line\n    //= require bootstrap # add this line\n    //= require_tree .\n```\n\nRename your `application.css` file to `application.scss` and add the following code:\n\n``` scss\n    # app/assets/stylesheets/application.scss\n    \n     @import \"bootstrap\";\n     @import url('https://fonts.googleapis.com/css?family=Tajawal');\n     \n     body {\n     font-family: 'Tajawal', sans-serif;\n    }\n    #post {\n      min-height: 5rem;\n      max-height: 8rem;\n    }\n    .card-header {\n      padding: 0.25rem 0.85rem;\n      font-weight: 700;\n    }\n    .card-body {\n      padding: 0.55rem 0.85rem;\n    }\n    .far {\n      cursor: pointer;\n    }\n```\n\nNow, we’ll add the HTML markup for our homepage in our `index.html.erb` file:\n\n``` html\n    # app/views/posts/index.html.erb\n    \n    \u003cdiv class=\"container-fluid\"\u003e\n      \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"container bg-light p-3 col-8 col-lg-6 welcome-page\"\u003e\n          \u003ch5 class=\"text-center\"\u003eEnter your username\u003c/h5\u003e\n          \u003cinput type=\"text\" id=\"new-user-form\" class=\"form-control my-5\" required /\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"container bg-light p-3 col-8 col-lg-6 post-page collapse\"\u003e\n          \u003cdiv class=\"post-form-wrapper\"\u003e\n            \u003cp class=\"current-user\"\u003e\u003c/p\u003e\n            \u003c%= form_with(model: @post, scope: :post, format: :json, id: 'post-form') do |form| %\u003e\n              \u003cdiv class=\"field\"\u003e\n                \u003c%= form.text_area :post, id: :post, class: \"form-control post-textarea\", required: true %\u003e\n                \u003c%= form.hidden_field :username, id: :username %\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"actions text-right\"\u003e\n                \u003c%= form.submit 'Submit post', class: \"btn btn-success btn-sm mt-1\" %\u003e\n              \u003c/div\u003e\n            \u003c% end %\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"posts mt-5\"\u003e\n            \u003c% @posts.each do |post| %\u003e\n              \u003cdiv class=\"post-wrapper col-12 mb-2 p-0\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                  \u003cdiv class=\"card-header\"\u003e\n                    @\u003c%= post.username %\u003e\n                    \u003csmall class=\"float-right mt-1\"\u003e\u003c%= post.created_at.strftime(\"at %I:%M%p\") %\u003e\u003c/small\u003e\n                  \u003c/div\u003e\n                  \u003cdiv class=\"card-body\"\u003e\n                    \u003cp class=\"card-text\"\u003e\u003c%= post.post %\u003e\u003c/p\u003e\n                    \u003c%= link_to '', add_likes_path(post_id: post.id), remote: true, method: :post, class: \"far fa-thumbs-up add-like\" %\u003e\u003cspan class=\"ml-2\" data-post=\"\u003c%= post.id %\u003e\"\u003e\u003c%= post.likes[0].like_count %\u003e\u003c/span\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c% end %\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nNext, we’ll add the JavaScript code to display the feeds page after collecting the user’s username. Add the following code to your `post.coffee` file:\n\n``` coffeescript\n    # app/assets/javascripts/post.coffee\n    \n    $(document).ready =\u003e\n      currentUser = ''\n      welcomePage = $('.welcome-page')\n      postPage = $('.post-page')\n      newUserForm = $('#new-user-form')\n    \n      # when user enters a username, store it and show the post page\n      newUserForm.on 'keyup', (event) -\u003e\n        if event.keyCode == 13 and !event.shiftKey\n          currentUser = event.target.value\n          newUserForm.val('')\n          welcomePage.addClass('collapse')\n          postPage.removeClass('collapse')\n          greeting = \"\"\"welcome @#{currentUser}\"\"\"\n          $('.current-user').html(greeting)\n          $('#username').val(currentUser)\n        return\n```\n\nIn our posts controller, we’ll instantiate a posts object. In your `posts_controller.rb` file, add the following code:\n\n``` ruby\n    # app/controllers/posts_controller.rb\n    \n    class PostsController \u003c ApplicationController\n      def index\n        @posts = Post.all.order(created_at: :desc) # add this line\n      end\n      ...\n    end\n```\n\nLastly, we’ll be making use of [Font Awesome](https://fontawesome.com/) icons, so we need to add the Font Awesome CDN to our app head tag. While we’re at it, we’ll also add the Pusher library.\n\n``` html\n    # app/views/layouts/application.html.erb\n    \n    \u003chead\u003e\n      ....\n      \u003clink rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.0.13/css/all.css\" integrity=\"sha384-DNOHZ68U8hZfKXOrtjWvjxusGo9WQnrNx2sqG0tfsghAvtVlRW3tvkXWZh58N9jp\" crossorigin=\"anonymous\"\u003e # add this line\n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e # add this line\n      \u003c%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %\u003e\n    \u003c/head\u003e\n```\n\nIf you’ve followed the tutorial so far, when you reload the homepage, you should see the first image below. On entering a username, you should see the second image below.\n\n![ruby-social-feed-enter-username](//images.ctfassets.net/1es3ne0caaid/2d3IghEs9qgUASCogqo8KM/e27a11b7e6264f110b9b3fb94d4d85b0/ruby-social-feed-enter-username.png)\n\n![ruby-social-feed-main-page](//images.ctfassets.net/1es3ne0caaid/2AomTyRGDKYIk4SSQeIgIM/7ce5b4a5b463fb0413c6487d84b36d90/ruby-social-feed-main-page.png)\n\nIf you encounter a RegExp error while trying to set up Bootstrap, In `config/boot.rb`, change the ExecJS runtime from Duktape to Node.\n\n``` ruby\n    # config/boot.rb\n    ENV['EXECJS_RUNTIME'] ='Node'\n```\n\n## Adding posts\n\nNow that our app’s UI is set up, we’ll go ahead and start adding posts. In the posts controller, we’ll add code for creating posts and liking them. Update your posts controller with following:\n\n``` ruby\n    # app/controllers/posts_controller.rb\n    \n    class PostsController \u003c ApplicationController\n      def index\n        @posts = Post.all.order(created_at: :desc)\n      end\n      \n      def new\n        @post = Post.new\n      end\n      \n      def create\n        @post = Post.new(post_params)\n        @post.likes.build()\n        respond_to do |format|\n          if @post.save\n            format.json { render :show, status: :created }\n          else\n            format.json { render json: @chat.errors, status: :unprocessable_entity }\n          end\n        end\n      end\n      \n      def add_like\n        @post = Post.find(params[:post_id])\n        if @post\n          @post.likes[0].like_count +=1\n          \n          if @post.likes[0].save\n            respond_to do |format|\n              format.json { render :show, status: :ok }\n            end\n          end\n        end\n      end\n      \n      private\n        def post_params\n          params.require(:post).permit(:post, :username)\n        end\n    end\n```\n\nWe’ll build our server response to JSON using [Jbuilder](https://github.com/rails/jbuilder). In your posts views folder, create a `show.json.jbuilder` file and add the following code:\n\n```\n    # app/views/posts/show.json.jbuilder\n    \n    json.extract! @post, :id, :username, :post, :created_at\n    json.url post_url(@post, format: :json)\n    json.likes @post.likes[0].like_count\n```\n\nWhenever a new post is created, we’ll handle it via AJAX and prepend it to our current feed so the new feeds are at the top. Update your `posts.coffee` file with the following:\n\n``` coffeescript\n    # app/assets/javascripts/posts.coffee\n    \n      # function for adding new posts to the feed\n      updateFeed = (post) -\u003e\n        postTime = new Date(post.created_at.replace(' ', 'T')).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })\n        $('.posts').prepend \"\"\"\n          \u003cdiv class=\"post-wrapper col-12 mb-2 p-0\"\u003e\n            \u003cdiv class=\"card\"\u003e\n              \u003cdiv class=\"card-header\"\u003e@#{post.username}\u003csmall class=\"float-right mt-1\"\u003eat #{postTime}\u003c/small\u003e\u003c/div\u003e\n              \u003cdiv class=\"card-body\"\u003e\n                \u003cp class=\"card-text\"\u003e#{post.post}\u003c/p\u003e\n                \u003ca class=\"far fa-thumbs-up add-like\" data-remote=\"true\" rel=\"nofollow\" data-method=\"post\" href=\"/likes/#{post.id}\"\u003e\u003c/a\u003e\n                \u003cspan class=\"ml-2\" data-post=\"#{post.id}\"\u003e#{post.likes[0].like_count}\u003c/span\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \"\"\"\n        return\n        \n      # if the post was successfully saved, get the post and pass it to the updateFeed function\n      $('#post-form').on 'ajax:success', (data) -\u003e\n        post = data.detail[0]\n        updateFeed post\n        $('#post-form')[0].reset()\n        return\n```\n\nWith that, we should be able to create new posts and see them appear in our feed. Next, we’ll add our killer realtime feature.\n\n## Realtime feed with Pusher\n\nTo make our feed realtime, whenever a new post is created, we publish it on the server via Pusher and subscribe to it on the frontend of our app. Before we can do this though, we need to initialize our Pusher client.\nIn the `config/initializers` folder, create a `pusher.rb` file and add the following code:\n\n``` ruby\n    # config/initializers/pusher.rb\n    \n    require 'pusher'\n    Pusher.app_id = ENV[\"PUSHER_APP_ID\"]\n    Pusher.key = ENV[\"PUSHER_KEY\"]\n    Pusher.secret = ENV[\"PUSHER_SECRET\"]\n    Pusher.cluster = ENV[\"PUSHER_CLUSTER\"]\n    Pusher.logger = Rails.logger\n    Pusher.encrypted = true\n```\n\nNext, install [Figaro](https://github.com/laserlemon/figaro) by running `figaro install` in your terminal. It will generate an `application.yml` file. In the `application.yml` file add your Pusher keys:\n\n``` yaml\n    # config/application.yml\n    \n    PUSHER_APP_ID: 'xxxxxx'\n    PUSHER_KEY: 'xxxxxxxxxxxxxxxxx'\n    PUSHER_SECRET: 'xxxxxxxxxxxxxx'\n    PUSHER_CLUSTER: 'xx'\n```\n\nNow we can go ahead and publish new posts and likes whenever they’re created. Add the following code to your post and like models:\n\n``` ruby\n    # app/models/post.rb\n    \n    class Post \u003c ApplicationRecord\n      after_create :notify_pusher, on: :create\n      has_many :likes\n      \n      def notify_pusher\n        Pusher.trigger('feed', 'new-post', self.as_json(include: :likes))\n      end\n    end\n```\n\n``` ruby\n    # app/models/like.rb\n    \n    class Like \u003c ApplicationRecord\n      after_save :notify_pusher, on: :create\n      belongs_to :post\n      \n      def notify_pusher\n        Pusher.trigger('feed', 'new-like', self.post.as_json(include: :likes))\n      end\n    end\n```\n\nIn the code above, we add an `after_create` and `after_save` callback to the post and like models respectively. These callbacks call the function to publish new posts and likes.\n\n## Updating the UI\n\nNow that our server is publishing data each time it’s created, it’s up to the client to listen for those changes and do something with that data.\nLets rename our `posts.coffee` file to `posts.coffee.erb` and update it with the following code:\n\n``` ruby\n    $(document).ready =\u003e\n      currentUser = ''\n      welcomePage = $('.welcome-page')\n      postPage = $('.post-page')\n      newUserForm = $('#new-user-form')\n      \n      \u003c%# when user enters a username, store it and show the post page %\u003e\n      newUserForm.on 'keyup', (event) -\u003e\n        if event.keyCode == 13 and !event.shiftKey\n          currentUser = event.target.value\n          newUserForm.val('')\n          welcomePage.addClass('collapse')\n          postPage.removeClass('collapse')\n          greeting = \"\"\"welcome @#{currentUser}\"\"\"\n          $('.current-user').html(greeting)\n          $('#username').val(currentUser)\n        return\n        \n      \u003c%# function for adding new posts to the feed %\u003e\n      updateFeed = (post) -\u003e\n        postTime = new Date(post.created_at.replace(' ', 'T')).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })\n        $('.posts').prepend \"\"\"\n          \u003cdiv class=\"post-wrapper col-12 mb-2 p-0\"\u003e\n            \u003cdiv class=\"card\"\u003e\n              \u003cdiv class=\"card-header\"\u003e@#{post.username}\u003csmall class=\"float-right mt-1\"\u003eat #{postTime}\u003c/small\u003e\u003c/div\u003e\n              \u003cdiv class=\"card-body\"\u003e\n                \u003cp class=\"card-text\"\u003e#{post.post}\u003c/p\u003e\n                \u003ca class=\"far fa-thumbs-up add-like\" data-remote=\"true\" rel=\"nofollow\" data-method=\"post\" href=\"/likes/#{post.id}\"\u003e\u003c/a\u003e\n                \u003cspan class=\"ml-2\" data-post=\"#{post.id}\"\u003e#{post.likes[0].like_count}\u003c/span\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \"\"\"\n        return\n        \n      \u003c%# if the post was successfully saved, get the post and pass it to the updateFeed function %\u003e\n      $('#post-form').on 'ajax:success', (data) -\u003e\n        post = data.detail[0]\n        $('#post-form')[0].reset()\n        return\n        \n      \u003c%# suscribe our Pusher client to the feed channel. Whenever there is a new post or new like, update the view with it %\u003e\n      pusher = new Pusher('\u003c%= ENV[\"PUSHER_KEY\"] %\u003e',\n        cluster: '\u003c%= ENV[\"PUSHER_CLUSTER\"] %\u003e'\n        encrypted: true)\n      channel = pusher.subscribe('feed')\n      channel.bind 'new-post', (data) -\u003e\n        updateFeed data\n      channel.bind 'new-like', (data) -\u003e\n        \u003c%# whenever there is a new like, find the liked post via it's \"data-post\" attribute then update its likes count %\u003e\n        currentPost = $ 'span[data-post=\\'' + data.id + '\\']'\n        currentPost.text(data.likes[0].like_count)\n        return\n      return \n```\n\nIn the code above, we subscribed our Pusher client to the `feed` channel and listened for the `new-post` and `new-like` events. Once those events are emitted, we get the data and update the feed and likes count with it.\n\n## Bringing it all together\n\nRestart the development server if it is currently running. Visit http://localhost:3000 in two separate browser tabs and test out the realtime feed and likes.\n\n## Conclusion\n\nIn this post, we have been able to create a realtime feed app using Pusher. I hope you found this tutorial helpful and would love to apply the knowledge gained here to easily set up your own application using Pusher.\nYou can find the source code for the demo app on [GitHub](https://github.com/9jaswag/pusher-live-feeds).","metaTitle":"Build a social feed with Ruby on Rails and PostgreSQL","metaDescription":"Build a social media feed using Ruby on Rails. The web app allows users to make and like posts, with changes being displayed to all users instantly."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4lpahyGo5GCgYAiwygE60Y","type":"Entry","createdAt":"2018-05-21T09:39:52.486Z","updatedAt":"2020-06-19T14:06:19.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an activity feed using .NET","url":"activity-feed-dotnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"projectRepo":"https://github.com/dongido001/ProdFeed","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2zMClYDH68wMGYcoiYC8wI","type":"Entry","createdAt":"2018-02-12T14:44:37.285Z","updatedAt":"2018-02-12T14:44:37.285Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":".NET","url":"net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}}],"reviewDate":"2018-05-20","description":"Build an activity feed and dashboard using .NET. Create two interfaces: one for entering and modifying data, and another that monitors the database and provides alerts when data changes.","prerequisite":"You need .NET and Visual Studio Code installed on your machine, along with the Visual Studio Code C# extension.","content":"Getting a notification for an important event hours after the event is over is really annoying.\nTo be responsive, you need to be in sync with what is happening and as soon as it happens.  Activity feeds allow you to visualize activities in your application and see what is happening in realtime.\n\nIn this tutorial, I'll show you how to integrate an activity feed into your project using ASP.NET Core and Pusher’s [Channels](https://pusher.com/channels). We’ll start by building an application that will allow a user to add a product, view, change status, and delete a product. Then, we'll create a new page that displays in realtime what is happening in the app. \n\nHere is what the final app will look like:\n\n![activity-feed-dotnet-demo](//images.ctfassets.net/1es3ne0caaid/6qeORzrkByakGuiOM0qqy2/648a2cad6a96b0230d8bd68d218ef941/activity-feed-dotnet-demo.gif)\n\n## Prerequisites\n\nThis tutorial uses the following technologies:\n\n\n- JavaScript ([jQuery](http://jquery.com/)) \n- [ASP.NET Core](https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-2.1)\n- [Visual Studio Code](https://code.visualstudio.com/) \n- [.NET Core SDK](https://www.microsoft.com/net/download/core) \u003e= 2.0 (Download and install it [here](https://www.microsoft.com/net/download/core) if you don’t have it)\n- Visual Studio Code [C# extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp) (Install [C# extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp) from the Visual Studio Code Marketplace if you don’t have it installed)\n- A Pusher account\n\nBefore we move on, verify that your installation is complete by typing the below command:\n\n```\n    dotnet --version\n```\n \nIf everything worked correctly, the above command will have an output like below:\n\n![activity-feed-dotnet-version-output](//images.ctfassets.net/1es3ne0caaid/6lEPTDeqlOEskMiosMEgQ8/ed67592803a8ed26fe5079da4f3f2313/activity-feed-dotnet-version-output.png)\n\n## Setting up a Pusher Channels application\n\nTo start utilizing Pusher’s technology, you need to create a Pusher app and get the app keys.  [Log in](https://dashboard.pusher.com/accounts/sign_in) or [sign up](https://dashboard.pusher.com/accounts/sign_up) (if you don’t have an account already) for a free account.\n\nOnce you are [logged in,](https://dashboard.pusher.com/) create a new app then note down your `app_id`, `key`, `secret` and `cluster`. We’ll need it later.\n\n\n## Creating an ASP.NET Core MVC project\n\nWe'll set up an ASP.NET Core project using the `dotnet` command.\n\nOpen up a command line, and enter the below commands:\n\n```\n    mkdir ProdFeed\n    cd ProdFeed\n    dotnet new mvc\n```\nIn the above command,\n\n\n- The first command will create a new folder named `ProdFeed`\n- The second command will change your current directory to the folder you just created\n- And the last command will create a new ASP.NET Core MVC project in your current folder\n\nNext,\n\n\n- Open the `ProdFeed` folder in Visual Studio Code editor and select the `Startup.cs` file.\n\n\n\u003e  💡 If your Visual Studio Code has been added to your system path, you can open the project by typing  `code .` in your command prompt.\n\n\n- Select **Yes** to the **Warn** message \"Required assets to build and debug are missing from `ProdFeed`. Add them?\"\n- Select **Restore** to the **Info** message \"There are unresolved dependencies\" if you got the message.\n\nNow, press **Debug** (F5) to build and run the program. The address in which the project is running will open automatically if there is no error. In case it does not open automatically, navigate to [http://localhost:5000/](http://localhost:5000/) from your browser. You should see a default page.\n\nNext, update `ProdFeed.csproj` with the following code:\n\n``` c#\n    \u003cProject Sdk=\"Microsoft.NET.Sdk.Web\"\u003e\n      \u003cPropertyGroup\u003e\n        \u003cTargetFramework\u003enetcoreapp2.0\u003c/TargetFramework\u003e\n      \u003c/PropertyGroup\u003e\n      \u003cItemGroup\u003e\n        \u003cPackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.3\" /\u003e\n        \u003cPackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.0.0\" /\u003e\n      \u003c/ItemGroup\u003e\n      \u003cItemGroup\u003e\n        \u003cDotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.0\" /\u003e\n        \u003cDotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.1\" /\u003e\n      \u003c/ItemGroup\u003e\n    \u003c/Project\u003e\n```\n\nSave the file and select **Restore** to the **Info** message \"There are unresolved dependencies\". This will prepare the project for scaffolding and enable entity framework tooling. Now we are ready to start building our application.\n\n\n## Adding models\n\nA model is an object that represents the data in our application. For this project, we’ll create a model - `Product` - which will hold our business logic for products.\n\nNow, create a new file named `Product.cs` in the `Models` folder and add the below code to it:\n\n``` c#\n    using System;\n    \n    namespace ProdFeed.Models\n    {\n        public class Product\n        {\n            public int ID { get; set; }\n            public string Name { get; set; }\n            public string Description { get; set; }\n            public bool Status { get; set; }\n            public decimal Price { get; set; }\n        }\n    }\n```\n\n## Creating the database context\n\nThe *database context* is the main class that coordinates [Entity Framework](https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application) functionality for a given data model. We’ll derive from the  `Microsoft.EntityFrameworkCore.DbContext`  to create this class. When we run our migration, a table named `Products` will be created which we’ll use to save products.\n\nCreate a new file called `ProdFeedContext.cs` in the `Models` folder and add the following code to it:\n\n``` c#\n    using Microsoft.EntityFrameworkCore;\n    \n    namespace ProdFeed.Models\n    {\n        public class ProdFeedContext : DbContext\n        {\n            public ProdFeedContext (DbContextOptions\u003cProdFeedContext\u003e options)\n                : base(options)\n            {\n            }\n            public DbSet\u003cProduct\u003e Products { get; set; }\n        }\n    }\n```\n\n## Setting up the database and running migrations\n\nNow that we have created our models, we can easily generate a migration file that will contain code for creating and updating our table schema.\n\nIn this tutorial, we’ll make use of SQLite for our database.\n\nWe’ll register the database context with the [dependency injection](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection) container. Services (such as the DB context) that are registered with the dependency injection container are available to the controllers. \n\nUpdate the code in `ConfigureServices`  method of  `/Startup.cs`  file with the following code:\n\n``` c#\n    [...]\n    public void ConfigureServices(IServiceCollection services)\n    {\n       [...]\n          services.AddDbContext\u003cProdFeedContext\u003e(options =\u003e\n                  options.UseSqlite(\"Data Source=ProdFeed.db\"));\n       [...]\n    }\n    [...]\n```\n\nThis tells Entity Framework which model classes are included in the data model.\n\nFinally, add the following **usings** to the header of `Startup.cs` file:\n\n``` c#\n    using ProdFeed.Models;\n    using Microsoft.EntityFrameworkCore;\n```\nYou can see the database context as a database connection and a set of tables, and the Dbset as a representation of the tables themselves. \n\nThe database context allows us to link our model properties to our database with a connection string (in our case, we are using SQLite)\n\n### Running the migration\n\nFrom your command line, run the following command:\n\n```\n    dotnet ef migrations add ProdFeed\n    dotnet ef database update\n```\n\n- The first command will create a migration script that will be used for managing our database tables\n- The second command will execute the migration script, thereby applying the migration to the database to create the schema\n\n\n\u003e 💡 If you got an error while running the command, stop the debugging or the server and try again.\n\n\n## Adding our controllers\n\nWe’ll need two controllers - `ProdctController` and `FeedController`. The ProductController will be responsible for all product-related logic while the FeedController will be responsible for feeds related logic.\n\n### The Product controller\nNow let’s create the ProductController. Create a new file called `ProductController.cs` in the `Controllers` folder and add the below code to it:\n\n``` c#\n    using System;\n    using System.Collections.Generic;\n    using System.Diagnostics;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using Microsoft.AspNetCore.Mvc;\n    using Microsoft.EntityFrameworkCore;\n    using ProdFeed.Models;\n    \n    namespace ProdFeed.Controllers\n    {\n        public class ProductController : Controller\n        {\n            private readonly ProdFeedContext _context;\n            public ProductController(ProdFeedContext context) \n            {\n                _context = context;\n            }\n        }\n    }\n```\nHere, we have injected `ProdFeedContext` class into the `ProductController` class.\n\nNext, let’s add a method for listing all the products to the views. Add the following code to `ProductController.cs`:\n\n``` c#\n        [...]\n            public async Task\u003cIActionResult\u003e Index()\n            {\n                // get all products..\n                return View(await _context.Products.ToListAsync());\n            }\n        [...]\n```\nThis will fetch all the products on the `Products` table and pass it down to the view.\n\nNext, add the following code to add the `Create` method in `ProductController.cs`:\n\n``` c#\n      [...]\n            [HttpPost]\n            public async Task\u003cIActionResult\u003e Create([Bind(\"ID,Name,Description,Status,Price\")] Product product)\n            {\n                if (ModelState.IsValid)\n                {\n                    _context.Products.Add(product);\n                    await _context.SaveChangesAsync();\n                }\n                return RedirectToAction(nameof(Index));\n            }\n      [...]\n```\nThis method will add a new product to the database.\n\nNext, add the following code to add the `Delete` method in `ProductController.cs`:\n\n``` c#\n        [...]\n            [HttpGet]\n            public async Task\u003cIActionResult\u003e Delete(int id)\n            {\n                var product = new Product { ID = id };\n                _context.Products.Remove(product);\n                await _context.SaveChangesAsync();\n                return RedirectToAction(nameof(Index));\n            }\n        [...]\n```\nThis method will delete a product from the database using the product ID.\n\nNext, add the following code to add the `ChangeStatus` method in `ProductController.cs`:\n\n``` c#\n        [...]\n            [HttpGet]\n            public async Task\u003cIActionResult\u003e ChangeStatus(int id)\n            {\n                var product = await _context.Products.SingleOrDefaultAsync(m =\u003e m.ID == id);\n                product.Status = !product.Status;\n                await _context.SaveChangesAsync();\n                return RedirectToAction(nameof(Index));\n            }\n        [...]\n```\nIn this method, we’ll change the product status, either from “In stock” to “Out of stock” or vice versa.\n\nWith this, we now have four routes available:\n\n\n- http://localhost:5000/Product/Index  - for listing products\n- http://localhost:5000/Product/Create - for creating new product\n- http://localhost:5000/Product/Delete/{id} - for deleting a product\n- http://localhost:5000/Product/ChangeStatus/{id} - for changing a product status\n\nAlthough, if you visit any of the routes, you’ll get an error because we are yet to create their respective views. \n\n### The Feedback controller\nNext, let’s create the controller for feeds.\n\nCreate a new file named `FeedController.cs` in the `Controllers` folder and add the following code to it:\n\n``` c#\n    using Microsoft.AspNetCore.Mvc;\n    \n    namespace ProdFeed.Controllers\n    {\n        public class FeedController : Controller\n        {\n            public IActionResult Index()\n            {\n                return View();\n            }\n        }\n    }\n```\n\n## Adding the views\n\nNow, let’s craft out our views. The layout view allows us to define a common site template, which can be inherited in multiple views to provide a consistent look and feel across multiple pages of our application. \n\nReplace the content in `Views/Shared/_Layout.cshtml` with the below:\n\n``` html\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003c!-- Required meta tags --\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003c!-- Bootstrap CSS --\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css\"\u003e\n        \u003ctitle\u003eHello, world!\u003c/title\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cnav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"\u003e\n            \u003ca class=\"navbar-brand\" href=\"#\"\u003eProduct\u003c/a\u003e\n            \u003cbutton class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"\u003e\n                \u003cspan class=\"navbar-toggler-icon\"\u003e\u003c/span\u003e\n            \u003c/button\u003e\n            \u003cdiv class=\"collapse navbar-collapse\" id=\"navbarText\"\u003e\n                \u003cul class=\"navbar-nav mr-auto\"\u003e\n                    \u003cli class=\"nav-item active\"\u003e\n                        \u003ca class=\"nav-link\" href=\"#\"\u003eHome \u003cspan class=\"sr-only\"\u003e(current)\u003c/span\u003e\u003c/a\u003e\n                    \u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n        \u003c/nav\u003e\n        \u003cdiv class=\"container-fluid\"\u003e\n           @RenderBody()\n        \u003c/div\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\nFor the product page, create a new folder named `Product` in the `Views` folder then create a new file called `Index.cshtml` to the `Product` folder.\n\nNow, add the below code to `Views``/Product/Index.cshtml`:\n\n``` html\n    @model IEnumerable\u003cProdFeed.Models.Product\u003e\n    \n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col\"\u003e\n            \u003cdiv style=\"padding: 40px;\"\u003e\n                \u003ch4 class=\"text-center\"\u003eAdd product\u003c/h4\u003e\n                \u003cform method=\"POST\" action=\"/product/Create\"\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"name\"\u003eName\u003c/label\u003e\n                        \u003cinput \n                          type=\"text\" \n                          class=\"form-control\" \n                          name=\"Name\" \n                          id=\"name\" \n                          placeholder=\"Gala\"\n                        \u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"product_name\"\u003e($)Price\u003c/label\u003e\n                        \u003cinput \n                          type=\"text\" \n                          class=\"form-control\" \n                          name=\"Price\" \n                          id=\"Price\"\n                          placeholder=\"10\"\n                        \u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"status\"\u003eAvailability\u003c/label\u003e\n                        \u003cselect class=\"form-control\" id=\"Status\" name=\"Status\"\u003e\n                            \u003coption value=\"true\"\u003eIn stock\u003c/option\u003e\n                            \u003coption value=\"false\"\u003eOut of Stock\u003c/option\u003e\n                        \u003c/select\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"description\"\u003eDescription\u003c/label\u003e\n                        \u003ctextarea \n                          class=\"form-control\" \n                          id=\"description\" \n                          name=\"Description\" \n                          rows=\"3\"\n                        \u003e\u003c/textarea\u003e\n                    \u003c/div\u003e\n                    \u003cbutton \n                      type=\"submit\" \n                      role=\"submit\" \n                      class=\"btn btn-secondary btn-lg btn-block\"\n                    \u003e\n                      Add Product\n                    \u003c/button\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n         \u003c/div\u003e\n        \u003cdiv class=\"col\"\u003e\n            \u003cdiv class=\"products\" style=\"padding: 40px;\"\u003e\n                \u003ch4 class=\"text-center\"\u003eProducts\u003c/h4\u003e\n                @foreach (var product in Model) {\n                    \u003cdiv class=\"product\"\u003e\n                        \u003cdiv class=\"card\" style=\"margin-bottom: 5px;\"\u003e\n                            \u003cimg \n                              class=\"card-img-top\" \n                              height=\"250\"\n                              src=\"https://www.africalinked.com/images/product-default.png\" \n                              alt=\"Product image\"\n                            \u003e\n                            \u003cdiv class=\"card-body\"\u003e\n                              \u003ch5 class=\"card-title\"\u003e@product.Name\u003c/h5\u003e\n                              \u003cp class=\"card-text\"\u003e@product.Description\u003c/p\u003e\n                              \u003cp class=\"card-text\"\u003e$@product.Price\u003c/p\u003e\n                               @if (product.Status) {\n                                 \u003cspan style=\"color: green\"\u003eIn Stock\u003c/span\u003e\n                               } else {\n                                 \u003cspan style=\"color: red\"\u003e Out of Stock  \u003c/span\u003e\n                               }\n                            \u003c/div\u003e\n                            \u003cdiv class=\"card-footer\"\u003e\n                                \u003cdiv class=\"row\"\u003e\n                                   \u003cdiv class=\"col\"\u003e\n                                      \u003ca \n                                        type=\"link\"\n                                        asp-controller=\"Product\"\n                                        asp-route-id=\"@product.ID\"\n                                        asp-action=\"Delete\"\n                                        role=\"button\"\n                                        class=\"btn btn-secondary btn-lg btn-block\"\n                                      \u003e\n                                       Delete\n                                      \u003c/a\u003e\n                                    \u003c/div\u003e\n                                    \u003cdiv class=\"col\"\u003e\n                                      \u003ca\n                                        type=\"link\"\n                                        asp-controller=\"Product\"\n                                        asp-route-id=\"@product.ID\"\n                                        asp-action=\"ChangeStatus\"\n                                        role=\"button\"\n                                        class=\"btn btn-secondary btn-lg btn-block\"\n                                      \u003e\n                                      @if (!product.Status) {\n                                        \u003cspan\u003eIn stock\u003c/span\u003e\n                                      }\n                                      else\n                                      {\n                                        \u003cspan\u003eOut of Stock\u003c/span\u003e\n                                      }\n                                      \u003c/a\u003e\n                                    \u003c/div\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                }\n            \u003c/div\u003e\n         \u003c/div\u003e\n    \u003c/div\u003e\n```\nNow, we have our product page where users can add, delete or change the status of a product. The page will have two columns. The first column is for adding a new product while the second column will be used to display products.\n\n### Creating the feed page\nCreate a new folder named `Feed` in the `Views` folder then add a new file called `Index.cshtml` to the `Feed` folder.\n\nNow, add the below code to `Views``/Feed/Index.cshtml`:\n\n``` html\n    \u003cstyle\u003e\n       .feed {\n           padding: 2px 10px;\n           background-color:#6c757d;\n           margin: 4px; \n           color:aliceblue;\n           border-radius: 3px;\n       }\n    \u003c/style\u003e\n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col\"\u003e\n            \u003cdiv class=\"container\" style=\"padding: 40px;\"\u003e\n                \u003ch4 class=\"text-center\"\u003eFeeds\u003c/h4\u003e\n                \u003cdiv id=\"feeds\"\u003e\n                    \u003c!-- feeds --\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n         \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n```\n\n## Subscribing to a channel, triggering and listening for events\n\nWe’ll subscribe to a channel called `feed` on the feed page. Then we’ll continuously listen for `new_feed` events. When there is any activity, we’ll trigger an event to Pusher's server so that Pusher will broadcast the event to the client (our feed page). Then we’ll act on the event to display the feed for that activity.\n\n### Installing the Pusher library\nPusher has a .NET library that makes it easy to interact with its API. We need to add this to the project.\n\nFrom your command line, install the library by running the below command: \n\n```\n    dotnet add package PusherServer\n```\n\nChannel helper class and events\nLet’s create a helper class that we’ll use to trigger event to Pusher. \n\nCreate a new folder called `Helpers` in the root folder of the project then create a new file named `ChannelHelper.cs` in the folder you just created.\n\nThen, add the following code to `ChannelHelper.cs`:\n \n``` c#\n    using System.Threading.Tasks;\n    using Microsoft.AspNetCore.Mvc;\n    using PusherServer;\n    \n    namespace ProdFeed.Helpers\n    {\n        public class Channel\n        {\n            public static async Task\u003cIActionResult\u003e Trigger(object data, string channelName, string eventName)\n            {\n                var options = new PusherOptions\n                {\n                    Cluster = \"\u003cPUSHER_APP_CLUSTER\u003e\",\n                    Encrypted = true\n                };\n                var pusher = new Pusher(\n                  \"\u003cPUSHER_APP_ID\u003e\",\n                  \"\u003cPUSHER_APP_KEY\u003e\",\n                  \"\u003cPUSHER_APP_SECRET\u003e\",\n                  options\n                );\n            \n                var result = await pusher.TriggerAsync(\n                  channelName,\n                  eventName,\n                  data\n                );\n                return new OkObjectResult(data);\n            }\n        }\n    }\n```\nIn the preceding code,\n\n- We created a method called `Trigger` which accepts `data`, `channelName` and `eventName` as parameters. We’ll use this method to trigger events to Pusher\n- Then, we included the Pusher library. Although we’ve not yet installed the library, we’ll do so in the next step\n- Next, we initialized the .NET library\n- Finally, we triggered an event to Pusher using the parameters passed to the method\n\nMake sure to update the code with your correct Pusher keys.\n\n### Import the ChannelHelper class to ProductController.cs\n\nAdd the bellow **using** to `ProductController.cs`:\n\n```\n    using ProdFeed.Helpers;\n```\n\n### Trigger an event when a new product is added\n\nUpdate the `Create` method in the `ProductController.cs` with the folowing code:\n\n``` c#\n            [HttpPost]\n            public async Task\u003cIActionResult\u003e Create([Bind(\"ID,Name,Description,Status,Price\")] Product product)\n            {\n                if (ModelState.IsValid)\n                {\n                    _context.Products.Add(product);\n                    await _context.SaveChangesAsync();\n                    \n                    var data = new {\n                        message = System.String.Format(\"New product with ID of #{0} added\", product.ID)\n                    };\n                    await Channel.Trigger(data, \"feed\", \"new_feed\");\n                }\n                return RedirectToAction(nameof(Index));\n            }\n```\n\nHere we added code for triggering an event to Pusher once a new product has been created using `await Channel.Trigger(data, \"feed\", \"new_feed\");`.\n\n### Trigger an event when a product is deleted\n\nNext, update the `Delete` method in the `ProductController.cs` class with the following code:\n\n``` c#\n            [HttpGet]\n            public async Task\u003cIActionResult\u003e Delete(int id)\n            {\n                var product = new Product { ID = id };\n                _context.Products.Remove(product);\n                await _context.SaveChangesAsync();\n                var data = new {\n                    message = System.String.Format(\"Product with ID of #{0} deleted\", product.ID)\n                };\n                await Channel.Trigger(data, \"feed\", \"new_feed\");\n                return RedirectToAction(nameof(Index));\n            }\n```  \n\nWhen we delete a product, we’ll trigger an event to Pusher.\n\n### Trigger an event when a product status is changed\n\nFinally, update the `ChangeStatus` method in the `ProductController.cs` class with the following code:\n\n``` c#\n            [HttpGet]\n            public async Task\u003cIActionResult\u003e ChangeStatus(int id)\n            {\n                var product = await _context.Products.SingleOrDefaultAsync(m =\u003e m.ID == id);\n                product.Status = !product.Status;\n                await _context.SaveChangesAsync();\n                \n                var status = product.Status ? \"In stock\" : \"Out of Stock\";\n                var data = new {\n                    message = System.String.Format(\"Status of product with ID #{0} status changed to '{1}'\", product.ID, status)\n                };\n              \n                await Channel.Trigger(data, \"feed\", \"new_feed\");\n                \n                return RedirectToAction(nameof(Index));\n            }\n```\nWhen the status of a product changes, we’ll trigger an event to Pusher using `await Channel.Trigger(data, \"feed\", \"new_feed\");`\n\n### Listening and responding to events\n\nNow we can trigger events on the server side when there is an activity going on. Next, we'll respond to those events on the client side. We’ll do this using the Pusher JavaScript library we’ve included earlier.\n\nInitiate the Pusher JavaScript library by adding the below code to `Views/Feed/Index.cshtml` file:\n\n``` html\n    [...]\n    \u003cscript type=\"text/javascript\"\u003e\n        const pusher = new Pusher('\u003cPUSHER_APP_KEY\u003e', {\n            cluster: '\u003cPUSHER_APP_CLUSTER\u003e'\n        });\n    \u003c/script\u003e\n```\nMake sure to update the code with your correct Pusher keys.\n\nNext, subscribe to a channel. Add the below code to `Views/Feed/Index.cshtml` between the `\u003cscript\u003e` tag:\n\n``` html\n    [...]\n        const channel = pusher.subscribe('feed');\n    [...]\n```  \n\nNext, listen for `new_feed` events and respond to them when they happen. Add the below code to `Views/Feed/Index.cshtml` between the `\u003cscript\u003e` tag:\n\n``` c#\n    [...]\n        channel.bind('new_feed', function(data) {\n          $(\"#feeds\").append(`\n              \u003cdiv class=\"feed\"\u003e\n                  \u003cdiv class=\"feed\" style=\"margin-bottom: 5px;\"\u003e\n                      ${data.message}\n                  \u003c/div\u003e\n              \u003c/div\u003e\n          `);\n        });\n    [...]\n```\nAnd that’s it! There you have your working activity feed. Load up the pages (the product page - http://localhost:5000/Product and the feed page - http://localhost:5000/Feed) in a different tab in your browser then add or delete a product.\n\n\n## Conclusion\n\nIn this tutorial, we built a simple app to demonstrate how you can add an activity feed to your apps. Feeds will be visible to every user using the app. But at times, this might not be what you want. You may want to send the notification to some targeted user. This means you need to subscribe to a private channel instead of a public channel. You can read more about the [private channels](https://pusher.com/docs/client_api_guide/client_private_channels) here.\nAlso, you can get the complete code of this app on [Github](https://github.com/dongido001/ProdFeed.git).\n\n","metaTitle":"Build an activity feed using .NET","metaDescription":"This tutorial uses .NET to create an activity feed. You will build an app with two pages: one to modify data, and one to monitor the database and provide updates when it changes."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N924MqeI0o4k8msEgyoWs","type":"Entry","createdAt":"2018-05-17T21:40:18.246Z","updatedAt":"2020-06-19T12:43:12.908Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a location feed app for Android with Kotlin","url":"location-feed-android-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/pusher-location-feeds","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-05-17","description":"This tutorial shows you how to build a location-sharing app for Android using Kotlin. The app has a Node.js backend. Users can share their location and see where their friends are.","prerequisite":"You will need Android Studio 3+ and Node.js installed on your machine. Some knowledge of Android development will be helpful.","content":"## Introduction\n\nOften times we like to track and visualize our applications in a central place. Feeds are great for this! In this tutorial, we'll build an Android app with an activity feed that allows users to broadcast their locations and share with all other connected users in realtime.\n\nWe’ll build the Android app to monitor the activities of a [Node.js](https://nodejs.org/) REST API. Every time the endpoint of the API is hit, Pusher will publish an event with some information (location shared by the user) to a channel. This event will be received in realtime, on all the connected Android devices.\n\nHere’s the app in action:\n\n![kotlin-location-sharing-demo-login](//images.ctfassets.net/1es3ne0caaid/4TzPM2B6nmKsYe02424aQI/f29753ee89af486eeef5d09ea35434a5/kotlin-location-sharing-demo-login.png)\n\n![kotlin-location-sharing-demo-friends](//images.ctfassets.net/1es3ne0caaid/5BwV1PSK1aUSkaWggIkeiy/ee6936790ced1a80c32ec02c5de4168f/kotlin-location-sharing-demo-friends.png)\n\n\n\n## Prerequisites\n\nThis tutorial uses the following technologies\n\n- [Pusher](https://pusher.com/)\n- [Android Studio](https://developer.android.com/studio/index.html)\n- [Node](https://nodejs.org/en/download)\n\nTo follow along, you’ll need to [sign up with Pusher](https://pusher.com/signup.) and gain access to your dashboard to create a Pusher project. You will also need to have Android Studio v3+ installed to build the client part of this application. To build our server side script, you’ll need to [download and install Node](https://nodejs.org/en/download) if you don’t already have it installed.  \n\n## Client side\n\nNow that you have that sorted out, let’s start building our Android app. Launch Android Studio and create a new project. Be sure to include Kotlin support.\nEnter an application name, in our case -  Pusher-Location-Feeds\n\n![kotlin-location-sharing-create-android](//images.ctfassets.net/1es3ne0caaid/3Cpgj5cA8wqUwkQIeuyma2/0d5ee3c27fb43565c1adf87ce31542be/kotlin-location-sharing-create-android.jpeg)\n\nSelect application’s target SDK:\n\n![kotlin-location-sharing-target-devices](//images.ctfassets.net/1es3ne0caaid/75lRgCp6ogAQUMqU8KMoKU/c862d02968337389e63b93386fe984f4/kotlin-location-sharing-target-devices.jpeg)\n\nChoose the basic activity template:\n\n![kotlin-location-sharing-basic-activity](//images.ctfassets.net/1es3ne0caaid/3zVD6WjkOQiuowYegwo64G/8d31950078f4cf322b6a6531c5111f19/kotlin-location-sharing-basic-activity.jpeg)\n\nWhen the project build is completed, open your app level `build.gradle` file and update the dependencies like so:\n\n\n``` gradle    \n    implementation fileTree(include: ['*.jar'], dir: 'libs')\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version\"\n    implementation 'com.android.support:appcompat-v7:26.1.0'\n    implementation 'com.android.support.constraint:constraint-layout:1.0.2'\n    implementation 'com.pusher:pusher-java-client:1.5.0'\n    implementation 'com.google.android.gms:play-services-maps:15.0.0'\n    implementation 'com.google.android.gms:play-services-location:15.0.0'\n    \n    implementation 'com.squareup.retrofit2:retrofit:2.3.0'\n    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'\n    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'\n    implementation 'com.android.support:recyclerview-v7:26.1.0'\n    implementation 'com.android.support:design:26.1.0'\n    testImplementation 'junit:junit:4.12'\n    androidTestImplementation 'com.android.support.test:runner:1.0.1'\n    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'\n```\n\n\nNext, sync the project by clicking **Sync Now** with the gradle file to install the added dependencies.\n\n\n## Application activities\n\n### Login activity\nBy default creating the Android project also creates a `MainActivity` class and an associating `activity_main.xml` file for you. Now we need a login Activity to collect the users username. So create a new activity, right-click on **MainActivity \u003e\u003e New \u003e\u003e Activity \u003e\u003e Empty Activity**, then name it `LoginActivity`. Once this activity is created, it’ll create a default layout file `activity_login.xml` inside the `layout` folder under `res`. The layout will be a rather simple one, it will have a text input to collect the user’s `username` and a button to share their location. Here’s a snippet for the `activity_login.xml` file:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\"\n        android:gravity=\"center\"\n        android:layout_margin=\"16dp\"\n        tools:context=\".LoginActivity\"\u003e\n    \n        \u003cEditText\n            android:paddingStart=\"10dp\"\n            android:id=\"@+id/userName\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"50dp\"\n            android:hint=\"Username\"\n            android:background=\"@drawable/input_bg\"\n            android:layout_marginEnd=\"5dp\"/\u003e\n    \n        \u003cButton\n            android:id=\"@+id/enterButton\"\n            android:layout_marginTop=\"15dp\"\n            android:layout_width=\"wrap_content\"\n            android:padding=\"10dp\"\n            android:text=\"Share Location\"\n            android:textColor=\"@android:color/white\"\n            android:background=\"@drawable/button\"\n            android:layout_gravity=\"center\"\n            android:layout_height=\"wrap_content\" /\u003e\n    \n    \u003c/LinearLayout\u003e\n```\n\n\nHere we have a simple `LinearLayout` with two view objects, an `EditText` input to collect the user’s `username` and a share button to send the location to the server.\n\nAndroid default styling isn’t always appealing so let’s add some custom styles to our layout simply for aesthetic purposes.\nUnder `res` folder, open the `values` folder and navigate into `colors.xml` file and update it with this code :\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cresources\u003e\n        \u003ccolor name=\"colorPrimary\"\u003e#8e0517\u003c/color\u003e\n        \u003ccolor name=\"colorPrimaryDark\"\u003e#4c060f\u003c/color\u003e\n        \u003ccolor name=\"colorAccent\"\u003e#FF4081\u003c/color\u003e\n    \n    \u003c/resources\u003e\n```\nSecondly to achieve the button and Input styles, we create two `drawable` files. Under `res` right-click on **drawable \u003e\u003eNew \u003e\u003e Drawable resource file**, name it `input_bg` and update it with this code:\n\n``` xml\n    \u003cshape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:shape=\"rectangle\" android:padding=\"10dp\" \u003e\n        \u003csolid android:color=\"#FFFFFF\"\n            /\u003e\n        \u003ccorners\n            android:radius=\"10dp\"/\u003e\n    \u003c/shape\u003e\n```\nThis simply adds round edges to the EditText object. For the button styles, follow the same steps as the one above and create a new drawable file, name it `button` and set it up like so:\n\n``` xml\n    \u003cshape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:shape=\"rectangle\" android:padding=\"10dp\" \u003e\n        \u003csolid android:color=\"#4c060f\" /\u003e\n        \u003ccorners\n            android:radius=\"10dp\"/\u003e\n    \u003c/shape\u003e\n```\n\n\nFinally update your `styles.xml` file inside the `values` folder in the `layout` directory:\n\n``` xml\n    \u003cresources\u003e\n        \u003c!-- Base application theme. --\u003e\n        \u003cstyle name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\"\u003e\n            \u003c!-- Customize your theme here. --\u003e\n            \u003citem name=\"colorPrimary\"\u003e@color/colorPrimary\u003c/item\u003e\n            \u003citem name=\"colorPrimaryDark\"\u003e@color/colorPrimaryDark\u003c/item\u003e\n            \u003citem name=\"colorAccent\"\u003e@color/colorAccent\u003c/item\u003e\n        \u003c/style\u003e\n        \u003cstyle name=\"AppTheme.NoActionBar\"\u003e\n            \u003citem name=\"windowActionBar\"\u003efalse\u003c/item\u003e\n            \u003citem name=\"windowNoTitle\"\u003etrue\u003c/item\u003e\n        \u003c/style\u003e\n    \n     \u003cstyle name=\"AppTheme.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\" /\u003e\n    \n    \u003cstyle name=\"AppTheme.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\" /\u003e\n    \u003c/resources\u003e\n```\nAt this point, your output in the xml visualizer should look exactly like this:\n\n![kotlin-location-sharing-part-1](//images.ctfassets.net/1es3ne0caaid/4CM5Xxcy1O88scGEcY8ugy/64ce857627e2ae7ff22b08ff2279e2aa/kotlin-location-sharing-part-1.jpeg)\n\nNext lets create a new layout file called `custom_view.xml`. We’ll use this file to render each individual map of a user on our recyclerview object. Inside the `layout` folder under `res`, create the new layout resource file and set it up like so:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\u003e\n    \u003ccom.google.android.gms.maps.MapView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/map\"\n    android:layout_margin=\"10dp\"\n    android:name=\"com.google.android.gms.maps.SupportMapFragment\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"200dp\" /\u003e\n    \n    \u003c/LinearLayout\u003e\n```\n\nOkay, we are done with login and UI lets hook it up with it’s Java file to handle the logic. Open `LoginActivity.kt` file and set it up like so:\n\n``` kotlin\n    //package your_project_package_here\n    \n    import android.content.Intent\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import kotlinx.android.synthetic.main.activity_login.*\n    \n    class LoginActivity : AppCompatActivity() {\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_login)\n            enterButton.setOnClickListener {\n                if (userName.text.isNotEmpty()){\n                    val intent = Intent(this@LoginActivity,MainActivity::class.java)\n                    intent.putExtra(\"username\",userName.text.toString())\n                    startActivity(intent)\n                }\n            }\n        }\n    }\n```\nHere we are simply getting the value of the input we defined in the layout file and passing it into the `MainActivity` class with an intent . Once the user has entered a value (username) in the `Edittext` object, we set a listener on the button to call the intent action when clicked. This action will only execute if the input value is not empty.\n\n### MainActivity\nNext we define a layout where we’ll render the map locations of each user when they share their location. We’ll get their latitude and longitude coordinates along with the username they provided in the `LoginActivity` and send it to our server, which then returns a map of the location with the provided username on the map-marker and display it on screen for all users. \n\nBefore we get into MainActivity, let’s first define a new layout file with a RecyclerView object to hold these location widgets as the users share them. Under `res`, right-click on **layout \u003e\u003e New \u003e\u003e Layout resource file** and name it `content_main`, (if you selected the basic activity template while setting up the project, then you should have this file by default). Open this file and set it up like so:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.v7.widget.RecyclerView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/recyclerView\"\n        android:layout_margin=\"16dp\"\n        tools:showIn=\"@layout/activity_main\"/\u003e\n```\nAs seen, we simply have a RecyclerView object where we’ll render each individual user's location so they can all appear in a list.\nLastly, Open up `activity_main.xml` and update it:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\"\u003e\n    \n        \u003candroid.support.design.widget.AppBarLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:theme=\"@style/AppTheme.AppBarOverlay\"\u003e\n    \n            \u003candroid.support.v7.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                android:background=\"?attr/colorPrimary\"\n                app:popupTheme=\"@style/AppTheme.PopupOverlay\" /\u003e\n    \n        \u003c/android.support.design.widget.AppBarLayout\u003e\n    \n        \u003cinclude layout=\"@layout/content_main\" /\u003e\n    \n        \u003candroid.support.design.widget.FloatingActionButton\n            android:id=\"@+id/fab\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"bottom|end\"\n            android:layout_margin=\"16dp\"\n            app:srcCompat=\"@android:drawable/ic_menu_send\" /\u003e\n    \n    \u003c/android.support.design.widget.CoordinatorLayout\u003e\n```\n## Application logic\n\nSince we used a RecyclerView in our layout file, we’ll need an adapter class. `RecyclerView` works with an [Adapter](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html) to manage the items of its data source and a [ViewHolder](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewHolder.html) to hold a view representing a single list item. Before we create the `Adapter` class, lets first create a `Model` class that will interface between our remote data and the adapter. It’ll have the values that we’ll pass data to our recyclerview. Now right-click on **MainActivity \u003e\u003e New \u003e\u003e** **Kotlin File/Class**, name it **Model,** under the **Kind** dropdown, select **Class** and set it up like so:\n\n``` kotlin\n    // java/package/Model\n    \n    data class Model(val latitude:Double,\n                     val longitude:Double,\n                     val username:String)\n```\n\n\nNow that we have that, lets create the `Adapter` class.  Right-click on **MainActivity \u003e\u003e New \u003e\u003e Kotlin File/Class**, name it `Adapter`, under the **Kind** dropdown, select Class again and set it up with the code:\n\n``` kotlin\n    // java/package/Adapter\n    //package your_project_package_here\n    \n    // imports  \n    import android.content.Context\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.TextView\n    \n    class Adapter(private val mContext: AppCompatActivity)\n        : RecyclerView.Adapter\u003cAdapter.MyViewHolder\u003e() {\n    \n        private var arrayList: ArrayList\u003cModel\u003e = ArrayList()\n        override fun getItemCount(): Int {\n            return arrayList.size\n        }\n        override fun onBindViewHolder(holder: Adapter.MyViewHolder, position: Int) {\n          val latLng = LatLng(arrayList[position].latitude,arrayList[position].longitude)\n            holder.mapView.onCreate(null)\n            holder.mapView.getMapAsync(OnMapReadyCallback {\n                it.addMarker(MarkerOptions()\n                        .title(arrayList[position].username)\n                        .position(latLng))\n            val cameraPosition = CameraPosition.Builder().target(latLng).zoom(17f).build()\n                it.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition))\n            })\n        }\n         override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {\n            val view = LayoutInflater.from(mContext).inflate(R.layout.custom_view, parent, false)\n            return MyViewHolder(view)\n        }\n        \n        inner class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n            val mapView:MapView = itemView.findViewById(R.id.map)\n        }\n        \n        fun addItem(model: Model) {\n            this.arrayList.add(model)\n            notifyDataSetChanged()\n        }\n    }\n```\n\nHere we have defined an `arrayList` from our Model class that will be used by the adapter to populate the `R``ecycler``V``iew`. In the `onBindViewHolder()` method, we bind the locations coming from our server (as longitude and latitude) to the view holder we defined for it. We also passed the user’s username to the map marker.\n\nThen in the `onCreateViewHolder()` method we define the design of the layout for individual items on the list.  Finally the `addItem()` method adds a new instance of our model class to the `arrayList` and refresh the list every time we get a new addition.\n\nNext let’s establish a connection to our Node server using the Retrofit library we installed at the beginning. First we create a new Kotlin interface to define the API endpoint we’ll be calling for this project. Right-click on **MainActivity \u003e\u003e New \u003e\u003e** **Kotlin File/Class**, under the **Kind** dropdown, select Interface name it **Service** and set it up like so:\n\n\n``` kotlin    \n    // imports ...\n    import retrofit2.Call\n    import retrofit2.http.GET\n    import retrofit2.http.Path\n    \n    interface Service {\n        @POST(\"/location\")\n        fun sendLocation(@Body coordinates: RequestBody): Call\u003cString\u003e\n    }\n```\n\nWe also need a class that’ll give us an instance of Retrofit for making networking calls. It’ll also be the class where we’ll define the server URL and network parameters. So follow the previous steps and create a class called `Client.kt` and set it up like this:\n\n\n``` kotlin\n    // imports...\n    \n    import okhttp3.OkHttpClient\n    import retrofit2.Retrofit\n    import retrofit2.converter.gson.GsonConverterFactory\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    \n    class Client {\n        fun getClient(): Service {\n            val httpClient = OkHttpClient.Builder()\n    \n            val builder = Retrofit.Builder()\n                    .baseUrl(\"your_server_url\")\n                    .addConverterFactory(ScalarsConverterFactory.create())\n                    .addConverterFactory(GsonConverterFactory.create())\n    \n            val retrofit = builder\n                    .client(httpClient.build())\n                    .build()\n    \n            return retrofit.create(Service::class.java)\n        }\n    }\n```\n\n\u003e Replace the Base URL with your localhost address for the Node server. We’ll \n\nThe `baseUrl` we used here points to our local Node server running on your machine as shown above but we’ll get to that later on in the tutorial. For now let’s go back to `MainActivity.kt` and initialize the necessary objects and update it with the classes we’ve created above.\n\n``` kotlin\n    // imports ...\n    \n    import android.Manifest\n    import android.annotation.SuppressLint\n    import android.content.DialogInterface\n    import android.content.pm.PackageManager\n    import android.location.Location\n    import android.os.Bundle\n    import android.support.design.widget.Snackbar\n    import android.support.v4.app.ActivityCompat\n    import android.support.v4.content.ContextCompat\n    import android.support.v7.app.AlertDialog\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import com.google.android.gms.location.FusedLocationProviderClient\n    import com.google.android.gms.location.LocationServices\n    import com.google.android.gms.maps.model.LatLng\n    import com.google.android.gms.maps.model.MarkerOptions\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import kotlinx.android.synthetic.main.activity_main.*\n    import kotlinx.android.synthetic.main.content_main.*\n    import okhttp3.MediaType\n    import okhttp3.RequestBody\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class MainActivity : AppCompatActivity() {\n    \n        var adapter: Adapter = Adapter(this@MainActivity)\n        lateinit var pusher:Pusher\n        val MY_PERMISSIONS_REQUEST_LOCATION = 100\n        private lateinit var fusedLocationClient: FusedLocationProviderClient\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n            setSupportActionBar(toolbar)\n            \n            }\n    }\n```\nHere we’ve just initialized the objects we’ll need, our Adapter class, Pusher, location request and the `fusedLocationClient`. \n\n  \n\nIn the `onCreate()` method we’ll setup our RecyclerView with the adapter. We’ll also call the `setupPusher()` method and the `sendLocation()` action with the floating action button:\n\n``` kotlin\n    // java/package/MainActivity.onCreate()\n     setupPusher()\n    fab.setOnClickListener { view -\u003e\n        if (checkLocationPermission())\n            sendLocation()\n    }\n    with(recyclerView){\n        layoutManager = LinearLayoutManager(this@MainActivity)\n        adapter = this@MainActivity.adapter\n    }\n    //... continue from next snippet\n```\n\n\u003e While adding this code to your `onCreate()` method, be careful not to miss the curly braces\n\nSo we called methods we haven’t defined yet, that’s no problem we’ll define the `setupPusher()` method later on in the tutorial but first off, let’s define and setup the  `sendLocation()` method this time, outside the `onCreate()`:\n\n``` kotlin\n    //java/package/MainActivity\n    \n    //... continue from the last snippet above, outside the onCreate() method\n    @SuppressLint(\"MissingPermission\")\n    private fun sendLocation() {\n        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)\n        fusedLocationClient.lastLocation\n                .addOnSuccessListener { location: Location? -\u003e\n                    if (location!=null){\n                        Log.e(\"TAG\",\"location is not null\")\n                        val jsonObject = JSONObject()\n                        jsonObject.put(\"latitude\",location.latitude)\n                        jsonObject.put(\"longitude\",location.longitude)\n                        jsonObject.put(\"username\",intent.extras.getString(\"username\"))\n    \n                        val body = RequestBody.create(MediaType.parse(\"application/json\"), jsonObject.toString())\n                        Log.e(\"TAG\",jsonObject.toString())\n                        Client().getClient().sendLocation(body).enqueue(object: Callback\u003cString\u003e {\n                            override fun onResponse(call: Call\u003cString\u003e, response: Response\u003cString\u003e) {}\n    \n                            override fun onFailure(call: Call\u003cString\u003e?, t: Throwable) {\n                                Log.e(\"TAG\",t.message)\n                            }\n    \n                        })\n    \n                    } else {\n                        Log.e(\"TAG\",\"location is null\")\n                    }\n                }\n    \n    }\n    //MainActivity\n```\nWith the `fusedLocationClient` object we initialized earlier, we are getting the user’s location. If we succeed in getting the location, we pass the the longitude and latitude along with the user’s `username` into our `body` object. We then use it to build our HTTP request with the `jsonObjects` as our request parameters. \n\nWe also called the `checkLocationPermission()` method in the `onCreate()` method however we haven’t defined it yet. Lets now create this method and set it up like so:\n\n``` kotlin\n    private fun checkLocationPermission(): Boolean {\n        if (ContextCompat.checkSelfPermission(this,\n                        Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\n    \n            // Should we show an explanation?\n            if (ActivityCompat.shouldShowRequestPermissionRationale(this,\n                            Manifest.permission.ACCESS_FINE_LOCATION)) {\n    \n                AlertDialog.Builder(this)\n                        .setTitle(\"Location permission\")\n                        .setMessage(\"You need the location permission for some things to work\")\n                        .setPositiveButton(\"OK\", DialogInterface.OnClickListener { dialogInterface, i -\u003e\n                            \n                            ActivityCompat.requestPermissions(this@MainActivity,\n                                    arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),\n                                    MY_PERMISSIONS_REQUEST_LOCATION)\n                        })\n                        .create()\n                        .show()\n    \n            } else {\n                // No explanation needed, we can request the permission.\n                ActivityCompat.requestPermissions(this,\n                        arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),\n                        MY_PERMISSIONS_REQUEST_LOCATION)\n            }\n            return false\n        } else {\n            return true\n        }\n    }\n```\nOf course we can’t just grab every user’s location without first asking for their permission, so here’s how we set up the method that requests permission to access their location. Just after the `sendLocation()` method, add:\n\n``` kotlin\n    // MainActivity\n    override fun onRequestPermissionsResult(requestCode: Int,\n     permissions: Array\u003cString\u003e, grantResults: IntArray) {\n      when (requestCode) {\n            MY_PERMISSIONS_REQUEST_LOCATION -\u003e {\n                // If request is cancelled, the result arrays are empty.\n       if (grantResults.isNotEmpty() \u0026\u0026 grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                    // permission was granted, yay! Do the\n                    // location-related task you need to do.\n                    if (ContextCompat.checkSelfPermission(this,\n        Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\n                     sendLocation()\n             }\n         } else {\n               // permission denied!\n            }\n              return\n          }\n      }\n    }\n    //MainActivity\n```\nAnd now let’s define the `setUpPusher()` method we called earlier in the `onCreate()` method:\n\n``` kotlin\n    // MainActivity\n    private fun setupPusher() {\n        val options = PusherOptions()\n        options.setCluster(\"eu\")\n        pusher = Pusher(\"9117088b176802bda36f\", options)\n        val channel = pusher.subscribe(\"feed\")\n        channel.bind(\"location\") { _, _, data -\u003e\n            val jsonObject = JSONObject(data)\n            Log.d(\"TAG\",jsonObject.toString())\n            val lat:Double = jsonObject.getString(\"latitude\").toDouble()\n            val lon:Double = jsonObject.getString(\"longitude\").toDouble()\n            val name:String = jsonObject.getString(\"username\").toString()\n            runOnUiThread {\n                val model = Model(lat,lon,name)\n                adapter.addItem(model)\n            }\n        }\n    }\n    //MainActivity\n```\nHere we simply pass in our Pusher configs to the Pusher object and subscribe to the `feed` channel to listen for `location` events. Then we get the data returned from the server into our defined variables and pass them to our model class to update the adapter.\n\nNext we implement the `onStart()` and `onStop()` methods to connect and disconnect Pusher respectively in our app:\n\n\n``` kotlin    \n    override fun onStart() {\n        super.onStart()\n        pusher.connect()\n    }\n    \n    override fun onStop() {\n        super.onStop()\n        pusher.disconnect()\n    }\n```\nFinally on the client side, we create a Kotlin data class that will define the payload we’ll be requesting from the server. Following the previous steps, create a class called **RequestPayload** and set it up like so:\n\n``` kotlin\n    // java/package/RequestPayload\n    \n    //package your_project_package_here\n    \n    data class RequestPayload(var latitude:Double,var longitude:Double,var username:String)\n```\n## Server side\n\n### Set up Pusher\nNow that we have all the client side functionalities, lets go ahead and build our server. But first, if you haven’t, now will be a good time to create a free account [here](https://pusher.com/signup).\nWhen you first log in, you'll be asked to enter some configuration options:\n\n![kotlin-location-sharing-pusher-1](//images.ctfassets.net/1es3ne0caaid/3ubhoW8yhqYUaseamiI6Wg/d527cb538be6495172a3eb99a6813a0e/kotlin-location-sharing-pusher-1.jpeg)\n\nEnter a name, choose *Android* as your front-end tech, and *Node.js* as your back-end tech. This will give you some sample code to get you started along with your project api keys:\n\n![kotlin-location-sharing-pusher-2](//images.ctfassets.net/1es3ne0caaid/3S9b0fAwtyGIiK0ykQy6O4/9be858e3ddc13a982e1205950fe3ee66/kotlin-location-sharing-pusher-2.jpeg)\n\nThen go to the **App Keys** tab and copy your app_id, key, and secret credentials, we'll need them later.\n\n### Set up a Node server\nFor this we will use Node. So check that you have `node` and `npm` installed on your machine by running this command in command prompt:\n\n```\n    node --version\n    //should display version numbers\n    \n    npm --version\n    //should display version numbers\n```\nIf that is not the case, [Download and Install Node](https://nodejs.org/en/download/).\n\nNext lets start building our server side script. Still in command prompt, run:\n\n```    \n    mkdir pusherLocationFeeds\n    //this creates a project directory to host your project files\n    \n    cd pusherLocationFeeds\n    // this navigates into the just created directory\n    \n    npm init -y\n    //this creates a default package.json file to host our project dependencies\n```\n\nLet’s install the Node modules we’ll need for this project. Basically we’ll need Express,  Pusher and body-parser. Inside the project directory, run:\n\n\n```    \n    npm install express, body-parser, pusher\n```\n\nYou can always verify these installations by opening your `package.json` file, at this point the dependency block should look like this :\n\n```      \n      \"dependencies\": {\n        \"body-parser\": \"^1.18.2\",\n        \"express\": \"^4.16.3\",\n        \"pusher\": \"^1.5.1\"\n      }\n```\n\nNext create a `server.js` file in the project directory. First we require the Node modules we installed:\n\n``` javascript    \n    var express = require(\"express\")\n    var pusher = require(\"pusher\")\n    var bodyParser = require(\"body-parser\")\n```    \n\nNext we configure Express:\n\n```    \n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n```    \n\nLets now create the Pusher object by passing the configuration object with the id, key, and the secret for the app created in the [Pusher Dashboard](https://dashboard.pusher.com/):\n\n\n``` javascript    \n    var pusher = new Pusher({    \n        appId: \"pusher_app_id\",\n        key: \"pusher_app_key\",\n        secret: \"pusher_app_secret\",\n        cluster: \"pusher_app_cluster\"\n      });\n```      \n\nAs we described earlier, we’ll use Pusher to publish events that happen in our application. These events have an `eventChannel`, which allows them to relate to a particular topic, an `eventName` that is used to identify the type of the event, and a `*payload*`, which you can attach any additional information to and send back to the client.\n\nIn our case, we’ll publish an event to a Pusher channel (“feed”) when the endpoint of our API is called. Then send the information as an attachment so we can show it in an activity feed on the client side.\n\nHere's  how we define our API's REST endpoint:\n\n\n``` javascript    \n    app.post('/location', (req, res,next)=\u003e{\n        \n        var longitude = req.body.longitude;\n        var latitude = req.body.latitude;\n        var username = req.body.username;\n      ...\n```      \n\nHere when we receive request parameters, we’ll extract the longitude, latitude and the username of the sender from the request and send back as response to the client like so:\n\n\n``` javascript      \n      ...  \n        pusher.trigger('feed', 'location', {longitude, latitude,username});\n        res.json({success: 200});\n      });\n```      \n\nNow when a user types in a username and clicks the share location button, the server returns the data like:\n\n``` json\n    {\n      \"longitude\" : \"longitude_value\"\n      \"latitude\" : \"latitude_value\"\n      \"username\" : \"username_value\"\n    }\n```\n\nFrom here, we then use the `adapter` to pass it to the `V``iewHolder` and lay it out on the screen.\nWhen you’re done, your `server.js` file should look like this:\n\n``` javascript\n    var pusher = require(\"pusher\")\n    var express = require(\"express\")\n    var Pusher = require(\"pusher\")\n    var bodyParser = require(\"body-parser\")\n    var pusher = new Pusher({\n        appId: \"app_id\",\n        key: \"app_key\",\n        secret: \"app_secrete\",\n        cluster: \"app_cluster\"\n      });\n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    app.post('/location', (req, res,next)=\u003e{\n        \n        var longitude = req.body.longitude;\n        var latitude = req.body.latitude;\n        var username = req.body.username;\n      \n        pusher.trigger('feed', 'location', {longitude, latitude,username});\n        res.json({success: 200});\n    });\n    app.listen(4040, function () {\n        console.log('Listening on 4040')\n      })\n```    \n    \n\nNow navigate to the terminal and cd into the  `server.js` file. Then run the server with:\n\n```\n    $ node server\n```\n\n## Run app\n\nOnce the server is live, go ahead and run the Android app.\nTo run the app, keep your system connected to the internet. Back in Android Studio, click the green play icon on the menu bar to run the application or select **Run** from the menu and click **Run ‘app’** from the dropdown. This action will launch your device modal for you to see all connected devices and emulators. If you’re using a physical device, simply select your device from the list of available devices shown and click **OK**.\n\nIf you’re running on an emulator, select your preferred emulator from the list of devices if you have one setup or follow these instructions to set up a new emulator:\n\nOn the devices modal, select **Create New Virtual Device.** This will launch a hardware selection modal where you will select any device of your choice for instance ( Nexus 5) and click **Next.** This will launch another modal where you will select the API level you will like to run on the device. Your can choose any of the available options for you or stick with the default and select API level 25. Click **Next** again to give your emulator a custom name and then click **Finish** to complete the setup. Now when you run the app again, you will see your emulator listed on the available devices modal. With your system still connected to the internet, select your preferred device and click **Ok**  to run.\n\n## Conclusion\n\nHopefully, this tutorial has shown you in an easy way, how to build an activity feed for Android apps with Pusher. As you continue to build stuff, Perhaps you’ll see for yourself that realtime updates are of great importance. When you do, Pusher has all you’ll need to get pushing. Project is available on [Github](https://github.com/christiannwamba/pusher-location-feeds) and the server side code also available [on this gist](https://gist.github.com/christiannwamba/75d23de8da1ae8feaf2bc13b528fd7f1).","metaTitle":"Build a location feed app for Android with Kotlin","metaDescription":"Build an Android app featuring a location feed provided by a Node.js server. Users are able to share their location and see where their friends are."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1ruuQyBJ6QAUykmMCuAQaS","type":"Entry","createdAt":"2018-05-03T10:17:53.628Z","updatedAt":"2018-05-31T09:08:17.751Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Publish Android notifications from the Guardian’s API","url":"android-notifications-guardian-api","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/pusher-news","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2018-05-02","description":"Learn how to build a news notification service that hooks into the Guardian's public APIs. Create an Android app using Kotlin, subscribe to Guardian news sections, and receive push notifications for breaking news.","prerequisite":"To follow this tutorial you will need some experience with Kotlin. You will also need appropriate IDEs: IntelliJ IDEA and Android Studio are recommended. You will also need free accounts with Pusher and Guardian Open Platform.","content":"A recent piece about the New York Times tech team “[How to Push a Story](https://www.nytimes.com/2018/04/01/insider/how-to-push-a-story.html)” chronicled the lengths they go to make sure that the push notifications they send are relevant, timely, and interesting.\n\nThe publishing platform at the NYT lets editors to put notifications through an approval process,  measures the tolerance for the frequency of notifications, and tracks whether users un-subscribe from them. \n\nIn this article we are going to build a news notification service. It will publish articles from [The Guardian](https://www.theguardian.com) - who offer [publi](http://open-platform.theguardian.com/)[c](http://open-platform.theguardian.com/) [API](http://open-platform.theguardian.com/)[s](http://open-platform.theguardian.com/). We will send push notifications for every news article they publish, and let user users subscribe to their interests so they get notified when news breaks.\n\n![android-guardian-beams-demo](//images.ctfassets.net/1es3ne0caaid/4hpz1rjqecwsWaW2AMsqGo/e10372db40ec505f3d3c7003144fe4a9/android-guardian-beams-demo.gif)\n\n## Prerequisites\n\nIn order to follow along, you will need some experience with the Kotlin programming language, which we are going to use for both the backend and frontend of our application. \n\nYou will also need appropriate IDEs. We suggest [IntelliJ IDEA](https://www.jetbrains.com/idea/) and [Android Studio](https://developer.android.com/studio/index.html). Finally, you will need a free [Pusher Account](https://dash.pusher.com/authenticate/register?ref=pn-landing-page) and a free [Guardian Open Platform account](http://open-platform.theguardian.com/access/). Sign up now if you haven’t already done so.\n\n## Setting up your Pusher account\n\nIn order to use the Push Notifications API and SDKs from Pusher, you need to create a new Beams instance in the [Pusher Beta Dashboard](https://dash.pusher.com/authenticate/register?ref=pn-social-network-android).\n\nNext, on your **Overview** for your Beams instance, click **Open Quickstart** to add your Firebase Cloud Messaging (FCM) Server Key to the Beams instance. \n\nAfter saving your FCM key, you can finish the Quickstart wizard by yourself to send your first push notification, or just continue as we’ll cover this below.\n\nIt’s important to make sure that you download and keep the `google-services.json` file from the Firebase Console as we are going to need this later on. \n\nOnce you have created your Push Notifications instance, you will also need to note down your “Instance ID” and “Secret Key” from the Pusher Dashboard, found under the “Keys” section of your Instance settings.\n\n## Building the backend\n\nThe backend of our system is responsible for recognising that a new news story has been published and broadcasting out push notifications about it. We are going to build this in Kotlin using the Spring Boot framework, as this is a very quick way to get going for server-side Kotlin applications. All of the backend work will be done in IntelliJ.\n\nHead over to https://start.spring.io/ to create our project structure. We need to specify that we are building a **Gradle** project with **Kotlin** and Spring Boot **2.0.1** (or newer if available at the time of reading), and we need to include the “Web” and “Cache” components:\n\n![android-guardian-beams-spring](//images.ctfassets.net/1es3ne0caaid/3mqWJf6yTe8U2Qe6aOogG/d55761f0d4cb40d2d5b156f42f05ece9/android-guardian-beams-spring.png)\n\nThe **Generate Project** button will give you a zip file containing our application structure. Unpack this somewhere. At any time, you can execute `./gradlew bootRun` to build and start your backend server running.\n\n\n\u003e **Note:** when you run this, the output will appear to stop at 80%. This is because gradle expects to run to completion, whereas we are starting a long-running application here.\n\nFirstly though, we need to add some dependencies. Open up the `build.gradle` file and add the following to the `dependencies` section:\n\n```\n    compile 'com.pusher:push-notifications-server-java:0.9.0'\n    runtime 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.2'\n```\n\nThe first of these is the Pusher library needed for triggering push notifications. The second is the Jackson module needed for serialising and deserialising Kotlin classes into JSON.\n\nNow, build the project. This will ensure that all of the dependencies are downloaded and made available and that everything compiles and builds correctly:\n\n```\n    $ ./gradlew build\n    \n    \u003e Task :test\n    2018-04-28 09:47:14.913  INFO 41535 --- [       Thread-5] o.s.w.c.s.GenericWebApplicationContext   : Closing org.springframework.web.context.support.GenericWebApplicationContext@656af5fa: startup date [Sat Apr 28 09:47:13 BST 2018]; root of context hierarchy\n    \n    \n    BUILD SUCCESSFUL in 6s\n    5 actionable tasks: 5 executed\n```\n\n## Retrieving the list of sections\n\nOur application is going to allow subscription to a number of sections from the news feed provided by The Guardian. This means that we need to offer a list of the sections that can be subscribed to.\n\nIn order to do this, we need to create some classes that can represent the response structure from the Guardian API. In this case we are listing sections, so we need to create the following classes under `src/main/kotlin/com/pusher/newsbackend`:\n\n``` kotlin\n    data class Section(\n            val id: String,\n            @JsonProperty(\"webTitle\") val title: String\n    )\n    \n    data class SectionResponse(\n            val results: List\u003cSection\u003e\n    )\n    \n    data class SectionPayload(\n            val response: SectionResponse\n    )\n```\n\nNext we’ll create the start of our component for interacting with the Guardian API. Create a new class called `GuardianApi` as follows:\n\n``` kotlin\n    @Component\n    open class GuardianApi(\n        @Value(\"\\${guardian.apiKey}\") private val apiKey: String\n    ) {\n        private val restTemplate = RestTemplate()\n    \n        open fun listSections(): List\u003cSection\u003e {\n            val uri = UriComponentsBuilder.fromUriString(\"http://content.guardianapis.com/sections\")\n                    .queryParam(\"api-key\", apiKey)\n                    .build()\n                    .toUri()\n    \n            return restTemplate.getForObject(uri, SectionPayload::class.java)\n                    ?.response?.results ?: emptyList()\n        }\n    }\n```\n\nCalls to the `listSections()` method will now go and retrieve the full list of sections from The Guardian, as represented by our `SectionPayload` class, and then return the results list from this class.\n\n\n\u003e **Note:** The presence of the `@Component` annotation means that Spring will automatically find this class during Component Scanning and make it available.\n\n\n\u003e **Note:** Both the class and method are marked as `open`. This will become important in a short while when we introduce caching.\n\nNext we need a controller to actually make the data available to our clients. Create a new class called `SectionController` as follows:\n\n``` kotlin\n    @RestController\n    class SectionController(\n            private val api: GuardianApi\n    ) {\n        @RequestMapping(\"/sections\")\n        fun getSections() = api.listSections()\n    }\n```\n\nThe only thing we need now is to configure our API key. Add this to the existing `src/main/resources/application.properties` file, using the value you obtained earlier by registering with The Guardian Open Platform:\n\n```\n    guardian.apiKey=\u003cGUARDIAN API KEY HERE\u003e\n```\n\n\u003e **Note:** this value should be put in exactly as it was provided, without any quotes or whitespace present.\n\nAt this point, we can start our application and retrieve a list of sections by calling our handler.\n\n## Caching of sections\n\nOne thing to be careful of whenever you work with a third-party API is any usage limits they have. For example, The Guardian restricts you to: \n\n- Up to 12 calls per second\n- Up to 5,000 calls per day\n\nWe can help alleviate that by reducing the number of calls we make. The list of sections is going to be relatively static, so why not cache it in our application and dramatically reduce the number of calls going out. Spring makes this really easy as we will see.\n\nFirstly we need some Spring configuration. Create a new class called `CachingConfig` as follows:\n\n``` kotlin\n    @Configuration\n    @EnableCaching\n    open class CachingConfig {\n        @Bean\n        open fun cacheManager() = ConcurrentMapCacheManager(\"sections\")\n    }\n```\n\nThis enables caching in our application, and creates a cache manager that knows about one cache - “sections”. \n\nNext, add the `@Cachable` annotation to our `listSections()` method of the `GuardianApi` class:\n\n```\n    @Cacheable(\"sections\")\n    open fun listSections(): List\u003cSection\u003e {\n```\n\nAt this point, we are now caching the calls to The Guardian API. If you make repeated calls to our handler in quick succession - regardless of whether they come from the same client or not - then we will only make a single call out to The Guardian. This will dramatically cut down on our API usage limits.\n\n## Publishing events about new articles\n\nNow that we can have clients get the list of article sections, we want to publish events whenever a new article appears on the Guardian’s API. The process for this will be:\n\n- Periodic task to go and do a search of the Guardian’s API, ordered by oldest first and returning everything since the most recent date we’ve seen\n- For every article returned, emit a push notification event about the article, with the interest specified as the section ID.\n\nClients can then register to receive push notifications filtered by the Section ID, and will automatically receive only notifications that they are interested in.\n\nFirst then, lets build the classes to represent the API response:\n\n``` kotlin\n    data class ArticleFields(\n            val headline: String,\n            val trailText: String?,\n            val thumbnail: String?\n    )\n    \n    data class Article(\n            val id: String,\n            @JsonProperty(\"webUrl\") val url: String,\n            @JsonProperty(\"webPublicationDate\") val publicationDate: String,\n            val fields: ArticleFields,\n            val sectionId: String\n    )\n    \n    data class ArticleResponse(\n            val results: List\u003cArticle\u003e\n    )\n    \n    data class ArticlePayload(\n            val response: ArticleResponse\n    )\n```\n\nThen we want to be able to actually retrieve the articles. Add the following to `GuardianApi`: \n\n``` kotlin\n    open fun listArticles(from: Instant?): List\u003cArticle\u003e {\n        val uriBuilder = UriComponentsBuilder.fromUriString(\"http://content.guardianapis.com/search\")\n                .queryParam(\"api-key\", apiKey)\n                .queryParam(\"rights\", \"syndicatable\")\n                .queryParam(\"page-size\", \"50\")\n                .queryParam(\"show-fields\", \"headline,trailText,thumbnail\")\n                .queryParam(\"order-by\", \"oldest\")\n                .queryParam(\"order-date\", \"published\")\n                .queryParam(\"use-date\", \"published\")\n    \n        if (from != null) {\n            uriBuilder.queryParam(\"from-date\", from.toString())\n        }\n        val uri = uriBuilder.build().toUri()\n    \n        return restTemplate.getForObject(uri, ArticlePayload::class.java)\n                    ?.response?.results ?: emptyList()\n    }\n```\n\nNext we want to be able to send details of articles to Pusher to pass on as push notifications. For this we will create a new `ArticleNotifier` class as follows:\n\n```kotlin\n    @Component\n    class ArticleNotifier(\n            @Value(\"\\${pusher.instanceId}\") private val instanceId: String,\n            @Value(\"\\${pusher.secretKey}\") private val secretKey: String\n    ) {\n        private val pusher = PushNotifications(instanceId, secretKey)\n    \n        fun notify(article: Article) {\n            pusher.publish(\n                    listOf(article.sectionId.replace(\"[^A-Za-z0-9-]\".toRegex(), \"\")),\n                    mapOf(\n                            \"fcm\" to mapOf(\n                                    \"data\" to mapOf(\n                                            \"url\" to article.url,\n                                            \"published\" to article.publicationDate,\n                                            \"section\" to article.sectionId,\n                                            \"headline\" to article.fields.headline,\n                                            \"trailText\" to article.fields.trailText,\n                                            \"thumbnail\" to article.fields.thumbnail\n                                    )\n                            )\n                    )\n            )\n        }\n    }\n```\n\nWe need to change the section ID that we are using for the interest slightly so that it is valid for the Pusher Beams service. An interest can only contain letters, numbers and the characters “_-=@,.:”, whilst some of the section IDs from the Guardian API contain other characters too. \n\nYou will also need to add to the `application.properties` file the credentials needed to access the Pusher API:\n\n```\n    pusher.instanceId=\u003cPUSHER_INSTANCE_ID\u003e\n    pusher.secretKey=\u003cPUSHER_SECRET_KEY\u003e\n```\n\n\u003e **Note:** this value should be put in exactly as it was provided, without any quotes or whitespace present.\n\nFinally, a new component to call the Guardian API and retrieve the articles. This simply calls our `GuardianApi` class, does some manipulation of the results and then calls our `ArticleNotifier` for each article. Create a new `ArticleRetriever` class as follows:\n\n``` kotlin\n    @Component\n    class ArticleRetriever(\n            private val guardianApi: GuardianApi,\n            private val articleNotifier: ArticleNotifier\n    ) {\n        private var lastDate: Instant? = null\n    \n        private val lastSeenIds = mutableSetOf\u003cString\u003e()\n    \n        @Scheduled(fixedDelayString = \"PT10S\")\n        fun retrieveArticles() {\n            val articles = guardianApi.listArticles(lastDate)\n                    .filter { !lastSeenIds.contains(it.id) }\n    \n            lastSeenIds.clear()\n            lastSeenIds.addAll(articles.map { it.id })\n    \n            lastDate = articles.map { it.publicationDate }\n                    .map(Instant::parse)\n                    .sorted()\n                    .reversed()\n                    .first()\n    \n            articles.forEach(articleNotifier::notify)\n        }\n    }\n```\n\nNote here that we have an `@Scheduled` annotation on our method. Spring will automatically call this method at this delay - here we have 10 seconds purely for the purposes of this article. In reality it would be whatever is appropriate for your needs. \n\nWe are also keeping track of the most recently seen publication date - so that next time we can request articles newer than it - and the list of IDs that we have seen on the last pass - because the Guardian API includes articles with the same publication date as specified, so we need to filter them out by hand. \n\n\n\u003e **Note:** in reality these would be kept in a data store so that they can be persisted between restarts, but for now this is good enough.\n\nFinally, we need to actually enable scheduling. This is done by simply adding the `@EnableScheduling` annotation to the `NewsBackendApplication` class:\n\n``` kotlin\n    @SpringBootApplication\n    @EnableScheduling\n    class NewsBackendApplication {\n    \n       static void main(String[] args) {\n          SpringApplication.run NewsBackendApplication, args\n       }\n    }\n```\n\nAt this point we can start the application up, and it will periodically go to the Guardian API, retrieve the next 50 articles and send push notifications for them all. \n\n\n\u003e **Note:** we’re not specifying a start date in our application. It just so happens that The Guardian has news articles going back to November 1805, so there will be plenty of examples for us to test with.\n\nIn this application, we are broadcasting out notifications of new stories on a third party site. If we wished, we could actually have a site where we author and publish the articles ourselves and this would work just as well. In that case though, we would be able to broadcast the notifications immediately on the article being published instead of polling the remote site for updates.\n\nNow that our backend is complete, we can start and leave it running whilst we build our UI. For this, we simply execute `./gradlew bootRun` or run it from inside IntelliJ.\n\n## Building the Android application\n\nThe frontend Android application will also be built in Kotlin, using Android Studio. To start, open up Android Studio and create a new project, entering some appropriate details and ensuring that you select the **Include Kotlin support** option. Note that the **Package name** must exactly match that specified when you set up the FCM Server Key earlier.\n\n![android-guardian-beams-create-project](//images.ctfassets.net/1es3ne0caaid/1G1wqnaUsMOWC62o2iOCIi/5b6a2879d6057a2c1595c93bae1e52fd/android-guardian-beams-create-project.png)\n\nThen on the next screen, ensure that you select support for **Phone and Tablet** using at least API 16:\n\n![android-guardian-beams-target-sdk](//images.ctfassets.net/1es3ne0caaid/2CTWGHNIbiAumeEi0Koqu0/1eee8836affae086b14a48a07f9d7e2b/android-guardian-beams-target-sdk.png)\n\nEnsure that an **Empty Activity** is selected:\n\n![android-guardian-beams-add-activity](//images.ctfassets.net/1es3ne0caaid/kRbqSYnHjiqQIS86ici8Y/c1688a2df512bb77fd76c1bcd273688a/android-guardian-beams-add-activity.png)\n\nAnd leave the **Activity Name** as “MainActivity”:\n\n![android-guardian-beams-config-activity](//images.ctfassets.net/1es3ne0caaid/4iTUDWfV3WUCg4yicMmQKS/3732ce4ecf72c81d44022d8e29c3f916/android-guardian-beams-config-activity.png)\n\nNext we need to add some dependencies to our project to support Pusher. Add the following to the project level `build.gradle`, in the existing `dependencies` section:\n\n```\n    classpath 'com.google.gms:google-services:3.2.0'\n```\n\nThen add the following to the `dependencies` section of the app level `build.gradle`:\n\n```\n    implementation 'com.google.firebase:firebase-messaging:12.0.1'\n    implementation 'com.pusher:push-notifications-android:0.10.0'\n    \n    compile 'com.loopj.android:android-async-http:1.4.9'\n    compile 'com.google.code.gson:gson:2.2.4'\n```\n\nAnd this to bottom of the app level `build.gradle`:\n\n```\n    apply plugin: 'com.google.gms.google-services'\n```\n\nNext, copy the `google-services.json` file we downloaded earlier into the `app` directory under your project. We are now ready to actually develop our specific application using these dependencies.\n\nFinally, we need to add some permissions to our application. Open up the `AndroidManifest.xml` file and add the following immediately before the `\u003capplication\u003e` tag:\n\n```\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\n## List of sections\n\nOur primary screen in the UI is simply going to be a list of sections provided by our API. The user will then be able to select which of these they are subscribed to, which will then be managed by receiving push notifications on those stories.\n\nFirstly we need our UI layout. Update `app/res/layout/activity_main.xml` as follows:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"#fff\"\u003e\n        \u003cScrollView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\u003e\n            \u003cLinearLayout\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:orientation=\"vertical\"\u003e\n    \n                \u003cTableLayout\n                    android:layout_marginTop=\"10dp\"\n                    android:id=\"@+id/table_layout\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\u003e\n    \n                    \u003cTableRow\n                        android:layout_height=\"wrap_content\"\n                        android:layout_width=\"match_parent\"\n                        android:id=\"@+id/table_row1\"\n                        android:padding=\"10dp\"\u003e\n    \n                        \u003cTextView\n                            android:id=\"@+id/selected\"\n                            android:fontFamily=\"serif\"\n                            android:layout_height=\"wrap_content\"\n                            android:layout_width=\"match_parent\"\n                            android:layout_weight=\"1\"\n                            android:textColor=\"#000\"\n                            android:text=\"\"/\u003e\n                        \u003cTextView\n                            android:id=\"@+id/name\"\n                            android:textColor=\"#000\"\n                            android:fontFamily=\"serif\"\n                            android:layout_height=\"wrap_content\"\n                            android:layout_width=\"match_parent\"\n                            android:layout_weight=\"3\"\n                            android:text=\"Section\"/\u003e\n    \n                    \u003c/TableRow\u003e\n                    \u003cView\n                        android:layout_height=\"3dip\"\n                        android:layout_width=\"match_parent\"\n                        android:background=\"#ff0000\"/\u003e\n                \u003c/TableLayout\u003e\n    \n                \u003cListView\n                    android:id=\"@+id/records_view\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"500dp\"\n                    android:layout_marginTop=\"16dp\"\u003e\n                \u003c/ListView\u003e\n            \u003c/LinearLayout\u003e\n        \u003c/ScrollView\u003e\n    \u003c/LinearLayout\u003e\n```\n\n\u003e **Note:** in order to paste this snippet in, the **Text** tab at the bottom of the screen should be selected.\n\n\n\u003e **Note:** sometimes, copy and paste of the entire file into the **Text** tab will cause a blank line at the very top. This is invalid XML and needs to be removed.\n\nNow we need a class to represent each entry in this list. Create a new class called `SectionEntry` as follows:\n\n``` kotlin\n    data class SectionEntry(\n            val id: String,\n            val webTitle: String,\n            val subscribed: Boolean\n    )\n```\n\nYou will notice that this is basically the same as the `Section` class on the backend. This is not surprising because it represents the same data on the same API.\n\nNext we need a layout to represent a single row in our list. For this, create a new layout resource called `app/res/layout/section.xml` as follows:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"horizontal\" android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n        \u003cCheckBox\n            android:id=\"@+id/section_selected\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:fontFamily=\"serif\"\n            android:layout_weight=\"3\"\n            android:textColor=\"#000\" /\u003e\n        \u003cTextView\n            android:id=\"@+id/section_name\"\n            android:textColor=\"#000\"\n            android:fontFamily=\"serif\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:text=\"Name\"/\u003e\n    \u003c/LinearLayout\u003e\n```\n\nThis has two entries in it - a checkbox and a section name. We will use the checkbox later on to decide which sections we are subscribed to.\n\nNow we need to be able to render this new layout for each of our sections. For this, create a new class called `SectionEntryAdapter` as follows:\n\n``` kotlin\n    class SectionEntryAdapter(private val recordContext: Context) : BaseAdapter() {\n        var records: List\u003cSectionEntry\u003e = listOf()\n            set(value) {\n                field = value\n                notifyDataSetChanged()\n            }\n    \n        override fun getView(i: Int, view: View?, viewGroup: ViewGroup): View {\n            val theView = if (view == null) {\n                val recordInflator = recordContext.getSystemService(Activity.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n    \n                val theView = recordInflator.inflate(R.layout.section, null)\n                val newSectionViewHolder = SectionViewHolder(\n                        theView.findViewById(R.id.section_selected),\n                        theView.findViewById(R.id.section_name)\n                )\n                theView.tag = newSectionViewHolder\n    \n                theView\n            } else {\n                view\n            }\n    \n            val sectionViewHolder = theView.tag as SectionViewHolder\n    \n            val section = getItem(i)\n            sectionViewHolder.name.text = section.webTitle\n            sectionViewHolder.id = section.id\n            sectionViewHolder.selected.isChecked = section.subscribed\n    \n            return theView\n        }\n    \n        override fun getItem(i: Int) = records[i]\n    \n        override fun getItemId(i: Int) = 1L\n    \n        override fun getCount() = records.size\n    }\n    \n    data class SectionViewHolder(\n            val selected: CheckBox,\n            val name: TextView\n    ) {\n        var id: String? = null\n    }\n```\n\nFinally we just need to get the data into this list. Update `MainActivity` by adding the following field to the class:\n\n```\n    private lateinit var recordAdapter: SectionEntryAdapter\n```\n\nand then initialize this by adding the following to our `MainActivity` class:\n\n``` kotlin\n    override fun onResume() {\n        super.onResume()\n        recordAdapter = SectionEntryAdapter(this)\n        val recordsView = findViewById\u003cView\u003e(R.id.records_view) as ListView\n        recordsView.setAdapter(recordAdapter)\n    \n        refreshEventsList()\n    }\n```\n\nNext we just need to implement the `refreshEventsList` method, as follows:\n\n``` kotlin\n    private fun refreshEventsList() {\n        val client = AsyncHttpClient()\n        client.get(\"http://10.0.2.2:8080/sections\", object : JsonHttpResponseHandler() {\n            override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, response: JSONArray) {\n                super.onSuccess(statusCode, headers, response)\n                runOnUiThread {\n                    val events = IntRange(0, response.length() - 1)\n                            .map { index -\u003e response.getJSONObject(index) }\n                            .map { obj -\u003e\n                                    val id = obj.getString(\"id\")\n                                    SectionEntry(\n                                        id = id,\n                                        webTitle = obj.getString(\"webTitle\"),\n                                        subscribed = false\n                                )\n                            }\n    \n                    recordAdapter.records = events\n                }\n            }\n        })\n    }\n```\n\n\u003e **Note:** The import for `Header` should be `cz.msebera.android.httpclient.Header`\n\n\n\u003e **Note:** 10.0.2.2. is the IP Address that the host machine appears when running inside the Android emulator. In reality you will want to use the real host of your service.\n\nAt this point we can start up the Android application and see all of the sections:\n\n![android-guardian-beams-emulator](//images.ctfassets.net/1es3ne0caaid/47dgVy35tuUI2kkEyCSUM6/fa9c583c57251e5ec1f6821349fbb92c/android-guardian-beams-emulator.png)\n\n## Subscribing to notifications\n\nNow that we have a list of notifications, we want to be able to subscribe to them, and to show the list that we are subscribed to.\n\nFirstly we need to register with the Pusher Beams service. This is done by adding the following to the top of the `o``nCreate` method in `MainActivity`:\n\n```\n        PushNotifications.start(getApplicationContext(), \"YOUR_INSTANCE_ID\");\n```\n\nNext we want to be able to subscribe and unsubscribe to notifications for the sections as we toggle them. For this, add the following to bottom of the `getView` method of `SectionEntryAdapter`:\n\n``` kotlin\n    sectionViewHolder.selected.setOnCheckedChangeListener { _, isChecked -\u003e\n        if (isChecked) {\n            PushNotifications.subscribe(section.id.replace(\"[^A-Za-z0-9-]\".toRegex(), \"\"))\n        } else {\n            PushNotifications.unsubscribe(section.id.replace(\"[^A-Za-z0-9-]\".toRegex(), \"\"))\n        }\n    }\n```\n\nWe need to update the section IDs that we use in the Pusher Beams subscriptions in the same way that we did in the actual sending of the notifications.\n\nFinally we need to update our checkboxes to show which sections we have previously subscribed to. We only need to do this when loading the list from the server in the first place - any other time the UI is already correctly in sync. For this, add the following to the top of `refreshEventsList` in `MainActivity`:\n\n```\n    val subscriptions = PushNotifications.getSubscriptions()\n```\n\nThen we can use it by updating the code lower down in the same method where we are processing the received sections as follows:\n\n``` kotlin\n    SectionEntry(\n            id = id,\n            webTitle = obj.getString(\"webTitle\"),\n            subscribed = subscriptions.contains(id)\n    )\n```\n\n\u003e **Note:** the change here is to give a real value for the `subscribed` parameter.\n\n## Displaying notifications\n\nNow that we can subscribe to notifications on different sections, we need to be able to actually receive and display them. In order to do this, we need to add a listener to `PushNotifications` for every message received. To do this, add the following to `MainActivity`:\n\n``` kotlin\n    fun getBitmapfromUrl(imageUrl: String): Bitmap? {\n        return try {\n            val url = URL(imageUrl)\n            val connection = url.openConnection() as HttpURLConnection\n            connection.doInput = true\n            connection.connect()\n            val input = connection.inputStream\n            BitmapFactory.decodeStream(input)\n        } catch (e: Exception) {\n            null\n        }\n    }\n    \n    private fun receiveNotifications() {\n    \n        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n    \n        if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.O) {\n            val channel = NotificationChannel(\"news\",\n                    \"Pusher News\",\n                    NotificationManager.IMPORTANCE_DEFAULT)\n            notificationManager.createNotificationChannel(channel)\n        }\n    \n        var notificationId = 0\n    \n        PushNotifications.setOnMessageReceivedListenerForVisibleActivity(this, object : PushNotificationReceivedListener {\n            override fun onMessageReceived(remoteMessage: RemoteMessage) {\n                Log.v(\"ReceivedMessage\", remoteMessage.data.toString())\n                val headline = remoteMessage.data[\"headline\"]\n                val url = remoteMessage.data[\"url\"]\n                val trailText = remoteMessage.data[\"trailText\"]\n                val thumbnail = remoteMessage.data[\"thumbnail\"]\n    \n                val intent = Intent(Intent.ACTION_VIEW)\n                intent.data = Uri.parse(url)\n                val pendingIntent = PendingIntent.getActivity(applicationContext, 0, intent, 0)\n                \n                val notification = NotificationCompat.Builder(applicationContext, \"news\")\n                        .setSmallIcon(R.mipmap.ic_launcher)\n                        .setContentTitle(headline)\n                        .setContentText(trailText)\n                        .setLargeIcon(thumbnail?.let { getBitmapfromUrl(it) })\n                        .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\n                        .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                        .setContentIntent(pendingIntent)\n    \n                notificationManager.notify(notificationId++, notification.build())\n            }\n        });\n    }\n```\n\n\u003e **Note:** The import for `URL` should be `java.net.URL`, and the import for `NotificationCompat` should be `android.support.v4.app.NotificationCompat`\n\nThere is quite a lot going on here, so lets break it down a bit. The method `getBitmapFromUrl` is a little helper that can take a URL, download the Image that it points to and convert it into an Android `Bitmap` object. The method `receiveNotifications` will ensure that the `NotificationManager` is correctly configured for raising notifications, and then will add a listener to `PushNotifications` to do the bulk of the work.\n\nThis listener is called on every single push notification received, and will raise an Android notification for them. This notification will have the headline and trail text from the push notification, the thumbnail displayed as an image if there is one, and clicking on the notification will then load the full news article in the system web browser.\n\nFinally, add a call to `onResume` to the `receiveNotifiactions` method so that we can start to receive and display our push notifications:\n\n``` kotlin\n    override fun onResume() {\n        super.onResume()\n        recordAdapter = SectionEntryAdapter(this)\n        val recordsView = findViewById\u003cView\u003e(R.id.records_view) as ListView\n        recordsView.setAdapter(recordAdapter)\n    \n        refreshEventsList()\n        receiveNotifications()\n    }\n```\n\n![android-guardian-beams-demo](//images.ctfassets.net/1es3ne0caaid/4hpz1rjqecwsWaW2AMsqGo/e10372db40ec505f3d3c7003144fe4a9/android-guardian-beams-demo.gif)\n\n## Conclusion\n\nThis article has shown how to consume details from a third-party API and broadcast them out to your users by utilizing Pusher Beams. \n\nThe full source code for this article is available on [GitHub](https://github.com/sazzer/pusher-news). Why not try extending it to allow multiple news sources to be consumed instead? Or to allow specific searches to be performed?\n\n","metaTitle":"Publish Android notifications from the Guardian’s API","metaDescription":"This tutorial will guide you through building an Android app with Kotlin. The app takes advantage of the Guardian's news APIs and Pusher Beams to provide push notifications for new articles."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1RAwp0Srr6qKOayCc8OQAa","type":"Entry","createdAt":"2018-04-30T12:48:42.775Z","updatedAt":"2018-04-30T16:41:03.503Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime Instagram clone — Part 3: Realtime feed updates with Pusher and desktop notifications","url":"instagram-clone-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/instagram-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2018-04-27","description":"This four-part series takes you through building an Instagram clone using Node and React. In part three, implement realtime feed updates with Pusher, and create desktop notifications.","prerequisite":"You should have completed the previous parts of the series.","content":"*This is part 3 of a 4 part tutorial. You can find part 1 [here](https://pusher.com/tutorials/instagram-clone-part-1), part 2 [here](https://pusher.com/tutorials/instagram-clone-part-2) and part 4 [here](https://pusher.com/tutorials/instagram-clone-part-4).*\n\nIn the [last part](https://pusher.com/tutorials/instagram-clone-part-2) of this series, we looked at how to connect the GraphQL server to our React Instagram clone allowing for dynamic posts to be viewed on the homepage. Now, to give users a seamless and fluid experience when interacting with the application, let’s add realtime functionality to it. This will update feeds as new posts are created and a notification system will also be put in place to allow for this. \n\nTo make this possible, [Pusher](https://pusher.com) is going to be integrated into the application to make it easier to bring realtime functionality without worrying about infrastructure.\n\n## Prerequisites\n- Should have read previous parts of the series\n- Basic knowledge of JavaScript\n- Node installed on your machine\n- NPM installed on your machine\n\n\n## Configure Pusher on the server\n\nTo get started with Pusher, create a [developer account](https://pusher.com/signup). Once you do this, [create your application](https://dashboard.pusher.com/#wizard-modal) and get your application keys. \n\n\n\u003e Note your application keys as you will need them later on in the article\n\n### Install the Node modules\nOnce you do that, you will need to install the Node modules needed for the application to work in the `server` directory of the application:\n\n```\n    npm install pusher connect-multiparty body-parser --save\n```\n\n- `pusher` to integrate realtime functionality\n- `body-parser` and `connect-multiparty` to handle incoming requests\n\n### Import the Node modules\nNow that the necessary modules have been installed, the next thing is to import them for use in the `server/server.js` file. Edit it to look like this:\n\n``` javascript\n    // server/server.js\n    [...]\n    \n    let Pusher = require(\"pusher\");\n    let bodyParser = require(\"body-parser\");\n    let Multipart = require(\"connect-multiparty\");\n    \n    [...]\n```\n\n### Configure the Pusher client\nYou will also need to configure your Pusher client to allow you to trigger events. To do this, add the following to the `server.js` file:\n\n``` javascript\n    // server/server.js\n    [...]\n    \n    let pusher = new Pusher({\n      appId: 'PUSHER_APP_ID',\n      key: 'PUSHER_APP_KEY',\n      secret: 'PUSHER_APP_SECRET',\n      cluster: 'PUSHER_CLUSTER',\n      encrypted: true\n    });\n    \n    // create express app\n    [...]\n```\n\n### Creating the endpoint for storing new posts\nTo simulate the effect of creating a new post, a new endpoint is added to the application as follows:\n\n``` javascript\n    // server/server.js\n    \n    // add Middleware\n    let multipartMiddleware = new Multipart();\n    \n    // trigger add a new post \n    app.post('/newpost', multipartMiddleware, (req,res) =\u003e {\n      // create a sample post\n      let post = {\n        user : {\n          nickname : req.body.name,\n          avatar : req.body.avatar\n        },\n        image : req.body.image,\n        caption : req.body.caption\n      }\n      \n      // trigger pusher event \n      pusher.trigger(\"posts-channel\", \"new-post\", { \n        post \n      });\n    \n      return res.json({status : \"Post created\"});\n    });\n    \n    // set application port\n    [...]\n```\n\nWhen a post request is made to the `/post` route, the data submitted is then used to construct a new post and then the  `new-post` event is triggered in the `post-channel` and a response is sent to the client making the request.\n\n## Configure Pusher on the client\n\nNow that the server has been configured, the next thing that needs to be done is to get Pusher working in our React application. To do this, let’s install the JavaScript Pusher module in the root of the `instagram-clone` directory:\n\n```\n    npm install pusher-js\n```\n\n### Set up the Pusher client\nNow that the module is installed, the Pusher module needs to be used. Edit the `src/App.js` like this:\n\n``` javascript\n    // src/App.js\n    \n    import React, {Component} from 'react';\n    [...]\n    // import pusher module\n    import Pusher from 'pusher-js';\n    \n    // set up graphql client\n    [...]\n    \n    // create component\n    class App extends Component{\n      constructor(){\n        super();\n        // connect to pusher\n        this.pusher = new Pusher(\"PUSHER_APP_KEY\", {\n         cluster: 'eu',\n         encrypted: true\n        });\n      }\n    \n      render(){\n        return (\n          \u003cApolloProvider client={client}\u003e\n            \u003cdiv className=\"App\"\u003e\n              \u003cHeader /\u003e\n              \u003csection className=\"App-main\"\u003e\n                {/* pass the pusher object and apollo to the posts component */}\n                \u003cPosts pusher={this.pusher} apollo_client={client}/\u003e\n              \u003c/section\u003e\n            \u003c/div\u003e\n          \u003c/ApolloProvider\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nNotice that in the snippet above, `pusher` and `apollo_client` are passed as properties for the `Posts` component.\n\nLet’s examine the Posts component.\n\n``` javascript\n    // src/components/Posts/index.js\n    \n    import React, {Component} from \"react\";\n    import \"./Posts.css\";\n    import gql from \"graphql-tag\";\n    import Post from \"../Post\";\n    \n    class Posts extends Component{\n      constructor(){\n        super();\n        this.state = {\n          posts : []\n        }\n      }\n      [...]\n```\n\nIn the constructor of the Posts component an array of posts is added to the state of the component.\n\nThen, we use the lifecycle function `componentDidMount()` to make a query to fetch the existing posts from the server and then set the posts.\n\n``` javascript\n    // src/components/Posts/index.js\n    [...]\n    \n    componentDidMount(){\n        // fetch the initial posts \n        this.props.apollo_client\n          .query({ \n            query:gql`\n              {\n                posts(user_id: \"a\"){\n                  id\n                  user{\n                    nickname\n                    avatar\n                  }\n                  image\n                  caption\n                }\n              } \n            `})\n          .then(response =\u003e {\n            this.setState({ posts: response.data.posts});\n          });\n          [...]\n```\n\n### Subscribe to realtime updates\nNext thing is to subscribe the component to the `posts-channel` and then listen for `new-post` events:\n\n``` javascript\n    // src/components/Posts/index.js\n          [...]\n          //  subscribe to posts channel\n        this.posts_channel = this.props.pusher.subscribe('posts-channel');\n    \n        // listen for a new post\n        this.posts_channel.bind(\"new-post\", data =\u003e {\n            this.setState({ posts: this.state.posts.concat(data.post) });\n          }, this);\n      }\n      [...]\n```\n\n### Displaying posts\nAfterwards, use the `render()` function to map the `posts` to the `Post` component like this:\n\n``` javascript\n    // src/components/Posts/index.js\n      [...]\n       render(){\n        return (\n          \u003cdiv className=\"Posts\"\u003e\n            {this.state.posts.map(post =\u003e \u003cPost nickname={post.user.nickname} avatar={post.user.avatar} image={post.image} caption={post.caption} key={post.id}/\u003e)}\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default Posts;\n```\n\nNow, you can go ahead and start your backend server `node server` and your frontend server `npm start`. When you navigate to `locahost:3000/` you get the following:\n\n![instagram-clone-post-creation-feed](//images.ctfassets.net/1es3ne0caaid/1oaET2U8Hyqc066Auq2Gu8/235f7e3dafcf6c1dab02e42485cae6b9/instagram-clone-post-creation-feed.gif)\n\n## Enable desktop notifications for new posts\n\nNow, sometimes users have tabs of applications open but aren’t using them. I’m sure as you’re reading this, you likely have more than one tab open in your web browser - if you’re special, you have \u003e 10. To keep the users engaged, the concepts of notifications was introduced. Developers can now send messages to users based on interaction with the application. Let’s leverage this to keep users notified when a new post has been created. \n\n### Checking if notifications are enabled in the browser\nSince this feature is fairly new, not all users of your application may have the notification feature on their browser. You need to make a check to see if notifications are enabled. To do this, tweak the `src/App.js` as follows:\n\n``` javascript\n    // src/App.js\n    \n    class App extends Component{\n      [...]\n    \n      componentDidMount(){\n        if ('actions' in Notification.prototype) {\n          alert('You can enjoy the notification feature');\n        } else {\n          alert('Sorry notifications are NOT supported on your browser');\n        }\n      }\n      \n      [...]\n    }\n    export default App;\n```\n\n### Requesting permissions\nTo get started, the first thing you will need to do is to get permission from the user to display notifications. This is put in place so that developers don’t misuse the privilege and begin to spam their users. Edit the `src/components/Posts/index.js` file as follows :\n\n``` javascript\n    // src/components/Posts/index.js\n    \n    [...]\n    \n    class Posts extends Components{\n      [...]\n      \n      componentDidMount(){\n          // request permission\n          Notification.requestPermission();\n        [...]\n```\n\nThe next thing that needs to be done is to now display the notification to the user when an event is met. This is done by tweaking the `this.posts_channel.bind()` function :\n\n``` javascript\n    // src/components/Posts/index.js\n        \n        [...]\n          //  subscribe to posts channel\n          this.posts_channel = this.props.pusher.subscribe(\"posts-channel\");\n          \n          this.posts_channel.bind(\"new-post\", data =\u003e {\n            // update states\n            this.setState({ posts: this.state.posts.concat(data.post) });\n            \n            // check if notifcations are permitted\n            if(Notification.permission === 'granted' ){\n              try{\n                // notify user of new post\n                new Notification('Pusher Instagram Clone',{ body: `New post from ${data.post.user.nickname}`});\n              }catch(e){\n                console.log('Error displaying notification');\n              }\n            }\n          }, this);\n        }\n        \n        render() {\n        return (\n          \u003cdiv\u003e\n            \u003cdiv className=\"Posts\"\u003e\n              {this.state.posts\n                .slice(0)\n                .reverse()\n                .map(post =\u003e (\n                  \u003cPost\n                    nickname={post.user.nickname}\n                    avatar={post.user.avatar}\n                    image={post.image}\n                    caption={post.caption}\n                    key={post.id}\n                  /\u003e\n                ))}\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default Posts\n```\n\nNow, when you reload your application and head over to `localhost:3000/` and you get this: \n\n![instagram-clone-permission-browser](//images.ctfassets.net/1es3ne0caaid/luRPg9gZMs0OMI0CWYgmA/e41aad138d992acd5f0a3280d6151a71/instagram-clone-permission-browser.png)\n\n## Interacting with notifications\n\nTo add extra functionality, the notification could further be tweaked to allow users to interact with them. To do this, edit the `Notification` object like this:\n\n``` javascript\n    // src/components/Posts/index.js\n    \n    // check for notifications \n    if(Notification.permission === 'granted' ){\n      try{\n        // notify user of new post\n        let notification = new Notification(\n          'Pusher Instagram Clone',\n          { \n            body: `New post from ${data.post.user.nickname}`,\n            icon: 'https://img.stackshare.io/service/115/Pusher_logo.png',\n            image: `${data.post.image}`,\n          }\n        );\n        // open the website when the notification is clicked\n        notification.onclick = function(event){\n          window.open('http://localhost:3000','_blank');\n        }\n      }catch(e){\n        console.log('Error displaying notification');\n      }\n    }\n```\n\nWhen another user creates a new post, you then get a display that looks like this: \n\n![instagram-clone-notification](//images.ctfassets.net/1es3ne0caaid/t0FTrRsvE4oKC0QqEUsSQ/721ee430e7873b8a3002dab87f60b151/instagram-clone-notification.png)\n\nWhen the user clicks on the notification, they are directed to view the full post.\n\n## Conclusion\n\nIn this part of the series, we looked at how to incorporate realtime functionality into the `instagram-clone` application and also saw how to notify users when someone creates new posts using desktop notifications. In the [next](https://pusher.com/tutorials/instagram-clone-part-4) part of the series, we will see how to take our application offline using service workers. Here’s a link to the full [Github](https://github.com/christiannwamba/instagram-clone) repository if interested.","metaTitle":"Build an Instagram clone — Part 3: Feeds and notifications","metaDescription":"Use React, Node and Pusher to build an Instagram clone. In part three,implement realtime feed updates with Pusher, and create desktop notifications."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6tLdzM6PXqQQIuCKIO06cg","type":"Entry","createdAt":"2018-04-30T12:49:05.311Z","updatedAt":"2018-04-30T16:41:32.703Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime Instagram clone — Part 4: Going offline with service workers","url":"instagram-clone-part-4","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/instagram-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2018-04-27","description":"This four-part series takes you through building an Instagram clone using Node and React. In part four, implement offline support with service workers.","prerequisite":"You should have completed the previous parts of the series.","content":"*This is part 4 of a 4 part tutorial. You can find part 1 [here](https://pusher.com/tutorials/instagram-clone-part-1), part 2 [here](https://pusher.com/tutorials/instagram-clone-part-2) and part 3 [here](https://pusher.com/tutorials/instagram-clone-part-3).*\n\nIn the [last part](https://pusher.com/tutorials/instagram-clone-part-3) of the series, we looked at how to add realtime functionality to our React application using Pusher to enable notifications. Sometimes, when surfing the web, you loose internet connection. In the past, all you got was the default error page decided by the browser. Now, you sometimes get custom pages even when you don’t have internet connection at all.\n\nIn this article, we are going to look at how to add this kind of functionality to our application to allow the users still engage with our application even when they are constrained by internet connections. To do accomplish this, we are going to make use of the browser’s local storage and service workers.\n\n\n## Prerequisites\n\nTo follow this article you need the following:\n\n- Should have read previous parts of the series\n- Basic knowledge of JavaScript\n- Node installed on your machine\n- NPM installed on your machine\n\n\n## Set up an app shell to show when offline\n\nThe app “shell” is the minimal HTML, CSS and JavaScript required to power the user interface. This allow us to immediately render the page while the rest of the page is being fetched. \n\n### Service workers\nService workers are scripts that the browser runs in the background to give the online effect to users by caching assets and other files. Their core features are how they’re able to intercept and handle network requests. There are three stages in the lifecycle of a service worker: registration, installation and activation.\n\nReact includes starter code that registers a service worker. In the `src/index.js` you have:\n\n``` javascript\n    // src/index.js\n    [...]\n    import registerServiceWorker from './registerServiceWorker';\n    [...]\n    registerServiceWorker();\n```\n\nThis registers a service worker for your application when your application is in production mode.\n\nNext thing to do is update your `public/manifest.json` file\n\n``` json\n    {\n      \"short_name\": \"InstaClone\",\n      \"name\": \"Simple Instagram Clone App\",\n      \"icons\": [\n        {\n          \"src\": \"favicon.ico\",\n          \"sizes\": \"64x64 32x32 24x24 16x16\",\n          \"type\": \"image/x-icon\"\n        }\n      ],\n      \"start_url\": \"./index.html\",\n      \"display\": \"standalone\",\n      \"theme_color\": \"#000000\",\n      \"background_color\": \"#ffffff\"\n    }\n```\n\n\nNow, build your application using:\n\n```\n    npm run build # or yarn build\n```\n\nAn optimized version of your application will be built in the `build/` folder of your application. Now you will want to deploy the built application. To do this, `http-server` - a node module for serving static files:\n\n```\n    npm install http-server\n    http-server build\n```\n\nWhen you visit the application at `127.0.0.1:8080`, you get your regular application. Now, head over to the `Appication` tab of your Chrome debug console. You can see the existing service worker for your application displayed there. Click the `Offline` option to simulate no network connection. When you reload your application, you get this:\n\n![instagram-clone-offline](//images.ctfassets.net/1es3ne0caaid/7pWIiEf9cI0CMauaiMm8cI/b4a7f8baffb597091dcc3f9839e62a67/instagram-clone-offline.png)\n\n## Serving stale data when offline\n\nThe current display when a user is offline is a little better than the default page shown when there’s no connection. For an application like our Instagram clone application, it’ll be nice for the users to still be able to view old posts when offline. When we fetch posts in the **Posts** component, we are going to save them in the browsers `localStorage` for future use. To do this, update the `componentDidMount` of your `src/components/Posts/index.js` as follows:\n\n``` javascript\n    // src/components/Posts/index.js\n    [...]\n    componentDidMount(){\n        [...]\n        if( !navigator.onLine){\n          this.setState({ posts: JSON.parse(localStorage.getItem(\"posts\")) });\n        }else{\n          this.props.apollo_client\n          .query(\n            // grapgl ql query\n            [...]\n          )\n          .then(response =\u003e {\n            this.setState({ posts: response.data.posts});\n            localStorage.setItem('posts', JSON.stringify(response.data.posts));\n          });\n        }\n        [...]\n      }\n```\n\nWe first check if the user is online. If they are, the `apollo_client` ****makes the request to get new posts. After the posts are obtained they’re saved using the `localStorage.setItem()` function. When the user is offline, `!navigator.onLine` will return true and then the stored posts are fetched from the localStorage using `localStorage.getItem()`.\n\n\n\u003e **Tip:** localStorage only stores strings so to work around this, you use `JSON.stringify()` and `JSON.parse()` for storage and retrieval respectfully\n\nYou can also decide to display a banner to the user letting then know that they are viewing stale data. To do this, let’s create a simple Notifier component in the `src/components`  directory like this:\n\n```\n    cd src/components\n    mkdir Notifier\n    cd Notifier \u0026\u0026 touch index.js Notifier.css\n```\n\n``` javascript\n    // src/components/Notifier/index.js\n    \n    import React, { Component } from \"react\";\n    import \"./Notifier.css\";\n    class Notifier extends Component {\n      render() {\n        return (\n          \u003cdiv className=\"notify\"\u003e\n            \u003cp\u003e\n              \u003cem\u003e{this.props.data}\u003c/em\u003e\n            \u003c/p\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default Notifier;\n```\n\nThe component has the following styling:\n\n``` css\n    // src/components/Notifier/Notifier.css\n    \n    .notify{\n        background-color: red;\n        width: 100%;\n        padding-top: 20px;\n        padding-bottom: 20px;\n        text-align: center;\n        color: white;\n        margin-bottom: 20px;\n    }\n```\n\nNow that the component is created, to use it in the Posts component, update the `src/components/Posts/index.js`:\n\n``` javascript\n    // src/components/Posts/index.js\n    \n    import React, {Component} from \"react\";\n    import \"./Posts.css\";\n    import gql from \"graphql-tag\";\n    import Post from \"../Post\";\n    import Notifier from \"../Notifier\";\n    class Posts extends Component {\n      constructor() {\n        super();\n        this.state = {\n          posts: []\n        };\n        this.offline = !navigator.onLine;\n      }\n      componentDidMount() {\n        [...]\n      }\n      render() {\n        const notify = this.offline ? \u003cNotifier data=\"Instagram Clone: Offline Mode\" /\u003e : \u003cspan /\u003e;\n        return (\n          \u003cdiv\u003e\n            {notify}\n            // display posts\n            [...]\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default Posts;\n```\n\n\nNow, build the application again using:\n\n```\n    npm run build # or yarn build\n```\n\nStart your backend server:\n \n```\n    node server\n```\n\n\u003e If you are confused about the backend server, refer to previous parts of this series\n\nAnd then serve the production build with:\n\n```\n    http-server build\n```\n\nWhen you go to the browser you get:\n\n![instagram-clone-stale-data](//images.ctfassets.net/1es3ne0caaid/5HHvxror84m2kmQEqC4guG/6d407da3d8965adf5900e9eb47e1ca22/instagram-clone-stale-data.png)\n\n\n\u003e It’s advised to test service workers in incognito/private mode so that your application behavior is not affected by previously installed service workers / caches\n\n\n## Conclusion\n\nIn this series, we have seen how to build a simple Instagram clone using react by using react, fetching dynamic data using GraphQL, adding realtime functionality using Pusher and making the application work offline with service workers. Feel free to leverage any of the concepts shared here in your web applications. Here’s a link to the [Github](https://github.com/christiannwamba/instagram-clone) repository if interested","metaTitle":"Build an Instagram clone — Part 4: Service workers","metaDescription":"Use React, Node and Pusher to build an Instagram clone. In part four,implement offline support with service workers."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6fbjFSTGH6ek44G8w2SGQc","type":"Entry","createdAt":"2018-04-30T12:47:46.587Z","updatedAt":"2018-04-30T16:39:39.372Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime Instagram clone — Part 1: Setting up the project and creating the UI","url":"instagram-clone-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/instagram-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2018-04-27","description":"This four-part series takes you through building an Instagram clone using Node and React. In part one, set up your project and create your UI.","prerequisite":"You should have Node and NPM installed on your machine.","content":"*This is part 1 of a 4 part tutorial. You can find part 2 [here](https://pusher.com/tutorials/instagram-clone-part-2), part 3 [here](https://pusher.com/tutorials/instagram-clone-part-3) and part 4 [here](https://pusher.com/tutorials/instagram-clone-part-4).*\n\nEver used the web version of [Instagram](https://instagram.com)? Ever wondered how they make it all work? In this series, we are going to look in depth at how to build an Instagram clone using React. \n\nGet ready because this is going to be a fun ride!\n\n\n\u003e This article is meant for beginners, so feel free to follow through if you’re getting started with React\n\n\n## What is React? \n\nReact is an open-source frontend JavaScript framework used for building incredible, reusable user interfaces. Find out more about React, you can head over [here.](https://github.com/facebook/react)\n\n\n## Prerequisites\n\nBefore we can set up a React project, we need to have the following :\n\n\n- [Node](https://nodejs.org) installed on our machines\n- Node Package Manager ([NPM](https://www.npmjs.com/)) installed on our machines\n\nTo confirm your Node/NPM installation, run the following command on your terminal :\n\n```\n    node --version\n    npm --version\n```\n\nIf you get version numbers as results, then you’re good to go. If not, head over to the Node installation page and/or NPM installation page to get them set up.\n\n## Setting up a React project\n\n**Installing** **React** \nReact is available as a node package and to get React installed on your machine, you need to run the command :\n\n```\n    npm install -g create-react-app\n```\n\n\u003e 💡 You need to have Node version \u003e= 6 to install React\n\nThis globally installs the package for you to use as you please.\n\n### Creating our React application\nTo create our application, we use the `create-react-app`  we installed by running the the command :\n\n```\n    create-react-app instagram-clone\n```\n\nThis helps set up the development environment that gets you started with creating React applications.\n\n### Taking our application for a spin\nNow to confirm and test the creation of our new application, we change directory to our `instagram-clone` directory and then start our development server by running :\n\n```\n    cd instagram-clone\n    npm start\n```\n\nYour development server should start and you should get a page that looks like this:\n\n![instagram-clone-react-welcome](//images.ctfassets.net/1es3ne0caaid/6EbSE9MLkcGqsIiIS2Ca2e/c3c867def25a7bde30ec765b19110a3d/instagram-clone-react-welcome.png)\n\n\n## Creating UI components\n\nNow that we are ready to start developing react applications, the next thing we are going to do is design the components we are going to need in our application.\n\n### What are components\nIf you’re new to React, you may be wondering what components are. Wonder no more. Components in React give you the ability to build your UI in bite-sized bits. Instead of you building the whole interface in a single file, you break it down to independent and reusable pieces which you then put together to have your application as a whole. \n\n### Deciding what components we need\n\n![instagram-clone-skeleton](//images.ctfassets.net/1es3ne0caaid/7CRv9L4li0aAowaMSsOc06/c183f7e68f20b1d72c37635158e67cf2/instagram-clone-skeleton.png)\n\n\nNow, let’s think about the components needed. For starters, we can break down the components into two: \n\n\n- Header component\n- Post component\n\nThe Header component will contain the instagram logo and brand name while the Post component will contain the contain image and caption a user has posted.\n\n### Header component\nNow we create a `components` folder in the `src/`  directory of our application. \n\n```\n    cd src\n    mkdir components \u0026\u0026 cd components\n```\nWe then create a folder for our Header component: \n\n```\n    mkdir Header \u0026\u0026 cd Header\n```\nNow that we have our Header component, the  next thing we want to do is to create our `index.js` file in the Header directory:\n\n```\n    touch index.js\n```\n\nOpen `index.js` and past in the following:\n\n``` javascript\n    // src/components/Header/index.js\n    import React from \"react\";\n    \n    class Header extends React.Component{\n        render(){\n            return (\n               \u003cnav className=\"Nav\"\u003e\n                 \u003cdiv className=\"Nav-menus\"\u003e\n                   \u003cdiv className=\"Nav-brand\"\u003e\n                     \u003ca className=\"Nav-brand-logo\" href=\"/\"\u003e\n                       Instagram\n                     \u003c/a\u003e\n                   \u003c/div\u003e\n                 \u003c/div\u003e\n               \u003c/nav\u003e\n           );\n        }   \n    }\n    export default Header;\n```\n\nIn React we describe our component with JSX. JSX looks similar to pure HTML but there are some differences between them. \n\n\n\u003e 💡 Notice how the class names are being added in JSX and compare it to regular HTML\n\n### Styling our Header component\nNow, we are going to add the necessary style that makes our Header component look pleasing to the eye. To do this, we create a `Header.css` file in our `src/components/Header` directory. Open the `Header.css` and paste the following:\n\n``` css\n    /* src/components/Header/Header.css */\n    i.Nav {\n      background-color: #fff;\n      border-bottom: 1px solid rgba(0, 0, 0, 0.0975);\n      position: fixed;\n      top: 0;\n      width: 100%;\n      z-index: 2;\n      -webkit-transition: height 0.2s ease-in-out;\n      transition: height 0.2s ease-in-out;\n      height: 77px;\n    }\n    .Nav-menus {\n      display: flex;\n      flex-direction: row;\n      height: 77px;\n      width: 70%;\n      margin: 0 auto;\n      padding: 26px 40px;\n    }\n    .Nav-brand-logo {\n      display: block;\n      background-position: -176px 0px;\n      background-image: url(../../sprite.png);\n      background-size: 405px 379px;\n      background-repeat: no-repeat;\n      height: 35px;\n      width: 176px;\n      text-indent: -1000%\n    }\n```\n\n\u003e 💡 You need to add the `[sprite.png](https://github.com/christiannwamba/instagram-clone/blob/master/src/sprite.png)` [](https://github.com/christiannwamba/instagram-clone/blob/master/src/sprite.png)in the `src` directory of the application. Download it [here](https://github.com/christiannwamba/instagram-clone/blob/master/src/sprite.png)\n\n### Linking the style in our component\nWe head back to our Header component and add the following :\n\n``` javascript\n    // src/components/Header/index.js\n    \n    import \"./Header.css\";\n    \n    class Header extends React.Component{\n      // ....\n    }\n    export default Header;\n```\n\nOnce we link the style sheet as we did above, we are good to go. \n\n\n### Rendering the Header component\nNow that we have successfully built our Header component, the next thing we want to do is to render it. To that, we need to tweak our `src/App.js` file. \n\n``` javascript\n    // src.App.js\n    \n    import React, { Component } from 'react';\n    import './App.css';\n    import Header from './components/Header';\n    class App extends Component {\n      render() {\n        return (\n          \u003cHeader /\u003e\n        );\n      }\n    }\n    export default App;\n```   \n\n\nOnce we do this, we have our **Header** component added and the app looks like this: \n\n![instagram-clone-with-header](//images.ctfassets.net/1es3ne0caaid/jiMBc8jS00Se8EQy2mCSw/a6093e4de5a90972005fb5580d396dbb/instagram-clone-with-header.png)\n\n\n### Post component\nTo create a **Post** component, we create a folder called `Post` in the `src/components` directory,\n\n```\n    cd src/components\n    mkdir Post \u0026\u0026 cd POst\n```\n\nWe then create the `index.js` file. Open it and paste in the following:\n\n``` javascript\n    // src/components/Post/index.js\n    import React, { Component } from \"react\";\n    class Post extends Component {\n      render() {\n        return \u003carticle className=\"Post\" ref=\"Post\"\u003e\n            \u003cheader\u003e\n              \u003cdiv className=\"Post-user\"\u003e\n                \u003cdiv className=\"Post-user-avatar\"\u003e\n                  \u003cimg src=\"https://www.laravelnigeria.com/img/chris.jpg\" alt=\"Chris\" /\u003e\n                \u003c/div\u003e\n                \u003cdiv className=\"Post-user-nickname\"\u003e\n                  \u003cspan\u003eChris\u003c/span\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/header\u003e\n            \u003cdiv className=\"Post-image\"\u003e\n              \u003cdiv className=\"Post-image-bg\"\u003e\n                \u003cimg alt=\"Icon Living\" src=\"https://pbs.twimg.com/media/DOXI0IEXkAAkokm.jpg\" /\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"Post-caption\"\u003e\n              \u003cstrong\u003eChris\u003c/strong\u003e Moving the community!\n            \u003c/div\u003e\n          \u003c/article\u003e;\n        }\n    }\n    export default Post;\n```\n\nHere we see the structure of the posts outlined. We have the:\n\n- Post Header - shows the users avatar and name \n- Post Content - displays the post content\n- Post Caption - displays the username and post caption\n\n### Styling our Post component\nWe create a `Post.css` file in the `src/components/Post` directory. Open Post.css and paste in the following:\n\n``` css\n    /* src/components/Post/Post.css */\n    .Post {\n      border-radius: 3px;\n      border: 1px solid #e6e6e6;\n      background-color: #fff;\n      margin-bottom: 60px;\n      margin-left : 20%;\n      margin-right: 20%;\n    }\n    .Post-user {\n      display: flex;\n      padding: 16px;\n      align-items: center;\n    }\n    .Post-user-avatar {\n      width: 30px;\n      height: 30px;\n    }\n    .Post-user-avatar img {\n      width: 100%;\n      height: 100%;\n      border-radius: 50%;\n    }\n    .Post-user-nickname {\n      margin-left: 12px;\n      font-family: 'PT Sans', sans-serif;\n      font-weight: bold;\n    }\n    .Post-image-bg {\n      background-color: #efefef;\n    }\n    .Post-image img {\n      display: block;\n      width: 100%;\n    }\n    .Post-caption {\n      padding: 16px 16px;\n    }\n    .Post-caption strong {\n      font-family: 'PT Sans', sans-serif;\n      font-weight: bold;\n    }\n    .vjs-fade-out {\n      display: none;\n      visibility: hidden;\n      opacity: 0;\n    }\n```\n\n### Linking the style in our component\nWe head back to our Post component and add the following :\n\n``` javascript\n    // src/components/Post/index.js\n    \n    import \"./Post.css\";\n    \n    class Post extends React.Component{\n      // ....\n    }\n    export default Post;\n```\n\n### Rendering the Post component\nNow we go ahead to render the Post component itself. We edit our `App.js` file to make it look like this :\n\n``` javascript\n    // src/App.js\n    import Post from './components/Post';\n    \n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv\u003e\n            \u003cHeader /\u003e\n            \u003cdiv\u003e\n              \u003cPost /\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default App;\n```\n\nNow, when we go back to our page, we have this : \n\n![instagram-clone-with-post](//images.ctfassets.net/1es3ne0caaid/5HMwvynW5qW0aOUsUkw2UY/601b6e5a07b43c00f30e94aa2107c7e4/instagram-clone-with-post.png)\n\n\n\n## Rendering components with mock data\n\nYou already noticed that in our Post component had a lot of static data - every time you reload you only see the same post. In a real-life application, what we want is to have our list of dynamic posts when our application is accessed. To do this, we are going to tweak our Post component.\n \n### Using props in our Post component\nIn React, `props` as the name suggests, are the properties of a particular component. They help in making sure that our components are reusable. Update your Post component to look like this :\n\n``` javascript\n    // src/components/Post/index.js\n    import React, { Component } from \"react\";\n    \n    import \"./Post.css\";\n    \n    class Post extends Component {\n        constructor(props){\n            super(props);\n        }\n      render() {\n        const nickname = this.props.nickname;\n        const avatar = this.props.avatar;\n        const image = this.props.image;\n        const caption = this.props.caption;\n        \n        return (\n          \u003carticle className=\"Post\" ref=\"Post\"\u003e\n            ...\n                \u003cimg src={avatar} alt={nickname} /\u003e\n            ... \n                  \u003cspan\u003e{nickname}\u003c/span\u003e\n            ...\n                \u003cimg alt={caption} src={image} /\u003e\n            ...\n              \u003cstrong\u003e{nickname}\u003c/strong\u003e{caption}\n            ...\n          \u003c/article\u003e\n        );\n      }\n    }\n    export default Post;\n```\n\nWe accept the props from when the Post itself is being rendered and then display the results to the users in form of posts.\n\nNow, the `src/App,js` is also tweaked to pass the data to the component like this:\n\n``` javascript\n    // src/App.js\n    \n    import React, { Component } from 'react';\n    import './App.css';\n    import Header from './components/Header';\n    import Post from './components/Post';\n    \n    class App extends Component {\n      render() {\n        return \u003cdiv className=\"App\"\u003e\n            \u003cHeader /\u003e\n            \u003csection className=\"App-main\"\u003e\n              \u003cPost nickname=\"Chris\" avatar=\"https://www.laravelnigeria.com/img/chris.jpg\" caption=\"Moving the community!\" image=\"https://pbs.twimg.com/media/DOXI0IEXkAAkokm.jpg\" /\u003e\n              \u003cPost nickname=\"OG\" avatar=\"https://www.laravelnigeria.com/img/chris.jpg\" caption=\"Holding a mic\" image=\"https://pbs.twimg.com/media/DOXI0IEXkAAkokm.jpg\" /\u003e\n              \n              {/* more posts */}\n            \u003c/section\u003e\n          \u003c/div\u003e;\n      }\n    }\n    \n    export default App;\n```\n\nNow, when you visit the application at `localhost:3000`, you get a page that looks like this:\n\n![instagram-clone-part-1-complete](//images.ctfassets.net/1es3ne0caaid/513bWOORAIk4k6Eo6Mgcki/bffd3206773e6ae2f91c457cf515b3fe/instagram-clone-part-1-complete.png)\n\n\n\n## Conclusion \n\nIn this chapter of the series, we looked at how to get set up with React development and creating the UI for an Instagram clone application. In the [next chapter](https://pusher.com/tutorials/instagram-clone-part-2), we will take a look at how to connect the UI to Graph QL data. Here’s a link to the full [Github](https://github.com/christiannwamba/instagram-clone) repository.","metaTitle":"Build an Instagram clone with React — Part 1: Create the UI","metaDescription":"Use React, Node and Pusher to build an Instagram clone. In part one, set up your project and create your UI components."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1mDc9HOj7mEYwQ2CaoEMqQ","type":"Entry","createdAt":"2018-04-30T12:48:16.510Z","updatedAt":"2018-05-01T15:44:56.196Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime Instagram clone — Part 2: Connecting the UI with GraphQL data","url":"instagram-clone-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/instagram-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-04-27","description":"This four-part series takes you through building an Instagram clone using Node and React. In part two, connect your UI and data with GraphQL.","prerequisite":"You should have completed part one of the series.","content":"*This is part 2 of a 4 part tutorial. You can find part 1 [here](https://pusher.com/tutorials/instagram-clone-part-1), part 3 [here](https://pusher.com/tutorials/instagram-clone-part-3) and part 4 [here](https://pusher.com/tutorials/instagram-clone-part-4).*\n\nIn the last part, of this series, we set up the UI for our React Instagram clone. If you haven’t already, you can read up on it [here](https://pusher.com/tutorials/instagram-clone-part-1). In this part, we are going to take a look at how to connect the UI to GraphQL Data\n\n## Prerequisites\n- Should have read the first part of the series\n- Basic knowledge of JavaScript\n- Node installed on your machine\n- NPM installed on your machine\n\n## Set up the server\n\nTo allow us to serve data to the UI, let’s create an API server for the application. The server will be built using NodeJS and GraphQL.\n\n### What is GraphQL\nGraphQL allows you to describe how to ask for data. With GraphQL, the client specifies the exact resources it needs instead of making requests to REST Endpoints that return everything. The GraphQL API has three main building blocks which are queries, schema, and resolvers.\n\nTo get started, create a `server` directory in the project root of the `react-instagram-clone` app. Here’s a link to the [Github](https://github.com/christiannwamba/instagram-clone) repository for more reference. \n\n```\n    mkdir server\n```\n\nInitialize a new Node project and install the following modules:\n\n```\n    cd server\n    npm init \n    npm install --save express graphql express-graphql cors\n```\n\nCreate a `server.js` file in the `server/` directory:\n\n```\n    touch server.js\n```\n\nNow, edit the `server.js` file as follows. First, import the necessary node modules:\n\n``` javascript\n    // server/server.js\n    \n    let express = require(\"express\");\n    let graphqlHTTP = require(\"express-graphql\");\n    let { buildSchema } = require(\"graphql\");\n    let cors = require(\"cors\");\n    \n    [...]\n```\n\nNext thing is to construct a schema. In GraphQL, schemas are constructed using GraphQL Schema Language. \n\n``` javascript\n    // server/server.js\n    [...]\n    \n    let schema = buildSchema(`\n      type User {\n        id : String!\n        nickname : String!\n        avatar : String!\n      }\n      type Post {\n          id: String!\n          user: User!\n          caption : String!\n          image : String!\n      }\n      type Query{\n        user(id: String) : User!\n        post(user_id: String, post_id: String) : Post!\n        posts(user_id: String) : [Post]\n      }\n    `);\n    \n    [...]\n```\n\nIn specifying the schema, above, we also added a query**.** Query fields also allow you to add arguments which we will need in this case to display specific data.\n\nNext thing to do is to add some stock data for the application. Add the following to your `server.js` file:\n\n``` javascript\n    // server/server.js\n    [...]\n    // Maps id to User object\n    let userslist = {\n      a: {\n        id: \"a\",\n        nickname: \"Chris\",\n        avatar: \"https://www.laravelnigeria.com/img/chris.jpg\"\n      },\n      [...]\n    };\n    let postslist = {\n      a: {\n        a: {\n          id: \"a\",\n          user: userslist[\"a\"],\n          caption: \"Moving the community!\",\n          image: \"https://pbs.twimg.com/media/DOXI0IEXkAAkokm.jpg\"\n        },\n        b: {\n          id: \"b\",\n          user: userslist[\"a\"],\n          caption: \"Angular Book :)\",\n          image:\n            \"https://cdn-images-1.medium.com/max/1000/1*ltLfTw87lE-Dqt-BKNdj1A.jpeg\"\n        },\n        c: {\n          id: \"c\",\n          user: userslist[\"a\"],\n          caption: \"Me at Frontstack.io\",\n          image: \"https://pbs.twimg.com/media/DNNhrp6W0AAbk7Y.jpg:large\"\n        },\n        d: {\n          id: \"d\",\n          user: userslist[\"a\"],\n          caption: \"Moving the community!\",\n          image: \"https://pbs.twimg.com/media/DOXI0IEXkAAkokm.jpg\"\n        }\n      }\n    };\n    [...]\n```\n\nThe data is truncated for brevity. You can fetch the complete data from the `server.js` file on [Github](https://github.com/christiannwamba/instagram-clone/blob/master/server/server.js).\n\nNow that this is specified, the next thing to do is to specify the resolver function for the API. The resolver ****tells your server how to handle an incoming query telling it where to get the data for a given field. Add the resolver to the `server.js` file that looks like this:\n\n``` javascript\n    // server/server.js\n    [...]\n    // The root provides a resolver function for each API endpoint\n    let root = {\n      user: function({ id }) {\n        return userslist[id];\n      },\n      post: function({ user_id , post_id }) {\n        return postslist[user_id][post_id];\n      },\n      posts: function({ user_id }){\n        return Object.values(postslist[user_id]);\n      }\n    };\n    [...]\n```\n\nHere the functions `user` and `post` return data that matches the criteria specified above. `posts` returns all the posts created by a specific user. Now that this is all done, let’s create an Express app and have the server listen for incoming requests:\n\n``` javascript\n    // server/server.js\n    [...]\n    let app = express();\n    app.use(cors());\n    app.use(\n      \"/graphql\",\n      graphqlHTTP({\n        schema: schema,\n        rootValue: root,\n        graphiql: true\n      })\n    );\n    // set application port\n    app.listen(4000);\n```\n\nGraphQL also comes with an interactive console that could be displayed to allow developers get familiar with GraphQL queries. The `grapgiql: true` option specifies that this should also be mounted on the `/graphql` route of the express server.\n\nNow, when you run the `server.js` file, your server will be hosted at `http://localhost:4000/graphql`. \n\n```\n    node server\n```\n\nWhen you visit the URL in the browser,  you get the following:\n\n![instagram-clone-graphql](//images.ctfassets.net/1es3ne0caaid/3xeZYg3Ck82u2OWkIMEQCG/ec13578cf59e83d384d950101ddf3211/instagram-clone-graphql.png)\n\n\nYou can test it out by pasting this query into the GraphiQL console:\n\n``` json\n    {\n      user(id: \"a\"){\n        nickname,\n      }\n    }\n```\n\nWhen you hit the run button, you can get the result:\n\n![instagram-clone-graphql-result-1](//images.ctfassets.net/1es3ne0caaid/3kLI9o0RyogmcAKiKOAMau/936d93495403302a3f7dfa605048f68b/instagram-clone-graphql-result-1.png)\n\nThis is the query in the above screenshot, with one modification:\n\n``` json\n    {\n      user(id: \"a\"){\n        nickname,\n        avatar\n      }\n    }\n```\n\nAs you can see in the result below, all that needs to be changed is the description of what you want from the server.\n\n![instagram-clone-graphql-result-2](//images.ctfassets.net/1es3ne0caaid/3egEK130TuaayOu4muESom/83a0cd83f3636dfc10c7376fca741992/instagram-clone-graphql-result-2.png)\n\n\nFrom the screenshots above, you can see that the server only returns the data that was requested of it. Nothing more, nothing less.\n\n\n## Connect the React client to the GraphQL server\n\nNow, let’s see how to connect the server to our React UI that was created in the part of this series. To do this, we are going to make use of [Apollo](https://www.apollographql.com/client). \n\n### Getting set up with Apollo\nFirst, let’s install the necessary packages in the root folder of the react project.\n\n```\n    cd react-instagram-clone\n    npm install apollo-boost react-apollo graphql-tag graphql --save\n```\n\nNow that the installations are complete, create a new Apollo Client in the `src/app.js` file:\n\n``` javascript\n    // src/app.js\n    [...]\n    import ApolloClient from 'apollo-boost';\n    \n    const client = new ApolloClient({\n        uri : \"http://localhost:4000\"\n    })\n    [...]\n```\n\nThe `uri` used above is that of the GraphQL server that was created earlier. \n\n### Connecting the Apollo Client to React\nThen wrap the content of the App component in an `ApolloProvider` passing the created client as one of the props.\n\n``` javascript\n    // src/app.js\n    [...]\n    import { ApolloProvider } from \"react-apollo\";\n    \n    const client = new ApolloClient({\n      uri: \"http://localhost:4000/graphql\"\n    });\n    \n    const App = () =\u003e {\n      return (\n        \u003cApolloProvider client={client}\u003e\n          \u003cdiv className=\"App\"\u003e\n            \u003cHeader /\u003e\n            \u003csection className=\"App-main\"\u003e\n              \u003cPost /\u003e\n            \u003c/section\u003e\n          \u003c/div\u003e\n        \u003c/ApolloProvider\u003e\n      );\n    };\n    export default App;\n```\n\nThis allows us to use the created client all through the different components of our application without having to create a new Apollo Client every time.\n\n\n## Render server-provisioned data\n\nNow, let’s begin to make queries to render posts from the GraphQL server created earlier on. To do this, you’ll have to tweak the `src/components/Post/index.js` as follows:\n\nImport the necessary modules that would be needed to construct queries:\n\n``` javascript\n    // src/components/Post/index.js\n    import { Query } from \"react-apollo\";\n    import gql from \"graphql-tag\";\n    \n    [...]\n```\n\nNow, make query inside the `Post` component like this:\n\n``` javascript\n    // src/components/Post/index.js\n    const Post = () =\u003e {\n      return (\n        \u003cQuery\n          query={gql`\n            {\n              post(user_id: \"a\", post_id: \"a\") {\n                image\n                caption\n                user {\n                  nickname\n                  avatar\n                }\n              }\n            }\n          `}\n        \u003e\n          // handle result of the query\n          [...]\n        \u003c/Query\u003e\n      )\n    }\n```\n\nWe are going to replace the dots with the query handler but first let’s understand how query itself. The code above creates a GraphQL query that will be executed. When this query is run using the GraphiQL UI this result is obtained. \n\nYou can paste this query in your GraphiQL:\n\n``` json\n    {\n      post(user_id: \"a\", post_id: \"a\") {\n        image\n        caption\n        user {\n          nickname\n          avatar\n        }\n      }\n    }\n```\n\nWhen you run it, you get the result below:\n\n![instagram-clone-graphql-result-3](//images.ctfassets.net/1es3ne0caaid/18kOEEr6IkSckc268WAqoa/2e03f72c3fdd77ab7e6eb0e55b17b1e5/instagram-clone-graphql-result-3.png)\n\n\nNow, let’s handle the result as follows:\n\n``` javascript\n    // src/components/Post/index.js\n    [...]\n      {({ loading, error, data }) =\u003e {\n            if (loading) return \u003cp\u003eLoading Post...\u003c/p\u003e;\n            if (error) return \u003cp\u003eError loading Post:(\u003c/p\u003e;\n            let image = data.post.image;\n            let caption = data.post.caption;\n            let user = data.post.user;\n            \n            // return JSX to be rendered\n            [...]\n```\n\nChecks are made to see if the query is executed successfully. If it is, the data returned from the query is obtained and the result is handled as follows:\n        \n``` javascript\n    // src/components/Post/index.js\n            [...]\n            return (\n              \u003carticle className=\"Post\" ref=\"Post\"\u003e\n                \u003cheader\u003e\n                  \u003cdiv className=\"Post-user\"\u003e\n                    \u003cdiv className=\"Post-user-avatar\"\u003e\n                      \u003cimg src={user.avatar} alt={user.nickname} /\u003e\n                    \u003c/div\u003e\n                    \u003cdiv className=\"Post-user-nickname\"\u003e\n                      \u003cspan\u003e{user.nickname}\u003c/span\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/header\u003e\n                \u003cdiv className=\"Post-image\"\u003e\n                  \u003cdiv className=\"Post-image-bg\"\u003e\n                    \u003cimg alt={caption} src={image} /\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv className=\"Post-caption\"\u003e\n                  \u003cstrong\u003e{user.nickname}\u003c/strong\u003e {caption}\n                \u003c/div\u003e\n              \u003c/article\u003e\n            );\n          }}\n        \u003c/Query\u003e\n      );\n    };\n    \n    export default Post;\n```\n\nNow, when you run the react app using the command:\n\n```\n    yarn start # or npm start -- based on the package manager of choice\n``` \n\n\nthe application is loaded on `http://localhost:3000/` and the following view is obtained:\n\n\n\u003e Make sure that the GraphQL server is still running\n\n![instagram-clone-part-1-complete](//images.ctfassets.net/1es3ne0caaid/513bWOORAIk4k6Eo6Mgcki/bffd3206773e6ae2f91c457cf515b3fe/instagram-clone-part-1-complete.png)\n\n\n\n## Fetching and displaying multiple posts\n\nIn a real life scenario, you don’t expect to only have one post showing on your version of Instagram . What needs to be done now is that a new `Posts` component needs to be created to allow for dynamic queries and display of multiple posts. Let’s see how to do this. \n\nCreate a new `Posts` folder in the `/src/components` directory\n\n```\n    mkdir Posts \u0026\u0026 cd Posts\n```\n\nCreate an `index.js` file in the `Posts` folder:\n\n```\n    touch index.js\n```\n\nLet’s edit the `Posts/index.js` file to look like this:\n\nFirst, import the necessary node modules:\n\n``` javascript\n    // src/components/Posts/index.js\n    import React from \"react\";\n    import \"./Posts.css\";\n    import { Query } from \"react-apollo\";\n    import gql from \"graphql-tag\";\n    import Post from \"../Post\";\n    [...]\n```\n\nThen make Query for all the posts in the `Posts` component:\n\n``` javascript\n    // src/components/Posts/index.js\n    [...]\n    const Posts = () =\u003e {\n      return (\n        \u003cQuery\n          query={gql`\n            {\n              posts(user_id: \"a\"){\n                id\n                user{\n                  nickname\n                  avatar\n                }\n                image\n                caption\n              }\n            }\n          `}\n        \u003e\n        [...]\n```   \n\n Now, let’s handle the results of the Query like we did earlier on:\n \n``` javascript\n    // src/components/Posts/index.js\n        [...]\n        {({loading, error, data}) =\u003e {\n            if (loading) return \u003cp\u003eLoading Posts...\u003c/p\u003e;\n            if (error) return \u003cp\u003eError Fetching Posts...\u003c/p\u003e;\n            let posts = data.posts;\n            \n            return \u003cdiv className=\"Posts\"\u003e\n              {posts.map(post =\u003e \u003cPost nickname={post.user.nickname} avatar={post.user.avatar} image={post.image} caption={post.caption} key={post.id}/\u003e)}\n            \u003c/div\u003e;\n          }}\n        \u003c/Query\u003e\n      );\n    }\n    \n    export default Posts;\n```\n\nNotice how the `Post` component was used above. Let’s tweak the `Post` component to allow for this. Edit the `src/components/Post/index.js` to look as follows:\n\n``` javascript\n    import React, { Component } from \"react\";\n    import \"./Post.css\";\n    class Post extends Component {\n      render() {\n        const nickname = this.props.nickname;\n        const avatar = this.props.avatar;\n        const image = this.props.image;\n        const caption = this.props.caption;\n        return (\n          \u003carticle className=\"Post\" ref=\"Post\"\u003e\n            \u003cheader\u003e\n              \u003cdiv className=\"Post-user\"\u003e\n                \u003cdiv className=\"Post-user-avatar\"\u003e\n                  \u003cimg src={avatar} alt={nickname} /\u003e\n                \u003c/div\u003e\n                \u003cdiv className=\"Post-user-nickname\"\u003e\n                  \u003cspan\u003e{nickname}\u003c/span\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/header\u003e\n            \u003cdiv className=\"Post-image\"\u003e\n              \u003cdiv className=\"Post-image-bg\"\u003e\n                \u003cimg alt={caption} src={image} /\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"Post-caption\"\u003e\n              \u003cstrong\u003e{nickname}\u003c/strong\u003e {caption}\n            \u003c/div\u003e\n          \u003c/article\u003e\n        );\n      }\n    }\n    \n    export default Post;\n```\n\nAs seen above, the Post component has the `nickname`, `avatar`, `image` and `caption` which are dynamically added for each post that is fetched from the GraphQL server.\n\nRecall in the `src/components/Posts/index.js` we did this:\n\n``` javascript\n    // src/components/Posts/index.js\n    return \n      \u003cdiv className=\"Posts\"\u003e\n        {\n        posts.map(\n          post =\u003e \u003cPost nickname={post.user.nickname} avatar={post.user.avatar} image={post.image} caption={post.caption} key={post.id}/\u003e\n          )\n        }\n    \u003c/div\u003e;\n```\n\nWhat happened here is that all the posts received from the GraphQL server were mapped to Post components with the necessary data properties. \n\nCreate a `Posts.css` file in the `src/components/Posts` directory that will contain any styling you wish to add to the Posts component:\n\n```\n    touch Posts.css\n```\n\nNow, when you visit your application at `http://localhost:3000/` you get the following:\n\n\n\u003e Ensure that your GraphQL server is still running\n\n\n![instagram-clone-part-2-complete-1](//images.ctfassets.net/1es3ne0caaid/5jDZ0qWVDq0WAYyCcygS4w/6df2382517deb582ab48c0ea8bfa2387/instagram-clone-part-2-complete-1.png)\n\n![instagram-clone-part-2-complete-2](//images.ctfassets.net/1es3ne0caaid/OqquLfO3YGSUSCQCoM8gU/e53fb943de49c8bd3d06cda89be520cd/instagram-clone-part-2-complete-2.png)\n\n\n\n## Conclusion\n\nIn this part of the series, we took a look at GraphQL and how to create a GraphQL server. We also saw how to link our existing React UI to the GraphQL server using the Apollo Client. In the [next part](https://pusher.com/tutorials/instagram-clone-part-3) of the series, we are going to look at how to add realtime feed updates to the Instagram clone application using Pusher. Here’s a link to the full [Github](https://github.com/christiannwamba/instagram-clone) repository if you’re interested.","metaTitle":"Build an Instagram clone with React — Part 2: GraphQL","metaDescription":"Use React, Node and Pusher to build an Instagram clone. In part two, use GraphQL to connect your data to your UI."}}],"defaultValue":"Feeds","queryType":"tag","pages":4,"route":"/tutorials","query":{"tag":"Feeds","page":"2"}}},"page":"/tutorials","query":{"tag":"Feeds","page":"2"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Feeds&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:42:43 GMT -->
</html>