<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=JavaScript&page=5 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:39:10 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">224</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; JavaScript</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials512c.html?product=Beams&amp;tag=JavaScript" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials0e67.html?product=Channels" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#C223CE"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; JavaScript"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/social-online-presence-ionic.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Cordova<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Building a social app with online presence using Ionic</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This tutorial will show you how to create a simple social feed for Android and iOS using Ionic. The app features a Node ...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/pokemon-react-native-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a Pokemon battle game with React Native - Part 3: Animations and sounds</h3><p class="css-k12xad e5jrto45">In this three part series, use React Native and Node.js to create a two-player Pokemon-like game. In part three, extend ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/pokemon-react-native-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a Pokemon battle game with React Native - Part 2: Two-player mode</h3><p class="css-k12xad e5jrto45">In this three part series, use React Native and Node.js to create a two-player Pokemon-like game. In part two, implement...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/pokemon-react-native-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a Pokemon battle game with React Native - Part 1: Practice mode</h3><p class="css-k12xad e5jrto45">In this three part series, use React Native and Node.js to create a two-player Pokemon-like game. In part one, implement...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/todo-vue-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a to-do list app with Vue.js and Laravel</h3><p class="css-k12xad e5jrto45">This brief tutorial shows you how to create a simple to-do list app using Vue and Laravel. The list UI updates in realti...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/flask-vue-comments.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live comment feature with sentiment analysis using Flask and Vue</h3><p class="css-k12xad e5jrto45">This tutorial will guide you through building a comments feature for a website, using Flask and Vue.js. New comments wil...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/html5-notification-api.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Use the HTML5 Notification API to provide realtime alerts</h3><p class="css-k12xad e5jrto45">This brief tutorial will show you how to create a web application that sends a browser alert every time a GitHub repo re...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/spotify-history-react-node.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">View your live Spotify history with React and Node</h3><p class="css-k12xad e5jrto45">Build a web app using Node and React to view your Spotify history. The app allows users to link up to their Spotify acco...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-sharing-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a photo sharing app with React Native</h3><p class="css-k12xad e5jrto45">Use React Native, Node.js and Imgur to create a photo sharing app. Users will be able to follow their friends and share ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials4076.html?product=Channels&amp;tag=JavaScript&amp;page=4" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials013b.html?product=Channels&amp;tag=JavaScript&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialscae0.html?product=Channels&amp;tag=JavaScript&amp;page=3" class="css-za1ua3 edg0byb1">3</a><a href="tutorials4076.html?product=Channels&amp;tag=JavaScript&amp;page=4" class="css-za1ua3 edg0byb1">4</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials7840.html?product=Channels&amp;tag=JavaScript&amp;page=5" class="css-2wakph edg0byb1">5</a><a href="tutorialsb726.html?product=Channels&amp;tag=JavaScript&amp;page=6" class="css-za1ua3 edg0byb1">6</a><a href="tutorials53c5.html?product=Channels&amp;tag=JavaScript&amp;page=7" class="css-za1ua3 edg0byb1">7</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials959a.html?product=Channels&amp;tag=JavaScript&amp;page=25" class="css-5s6711 edg0byb1">25</a><a href="tutorialsb726.html?product=Channels&amp;tag=JavaScript&amp;page=6" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":224,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39sm03YEbuOmqucCw6Qk42","type":"Entry","createdAt":"2018-12-04T20:59:40.666Z","updatedAt":"2020-06-19T13:26:52.630Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Building a social app with online presence using Ionic","url":"social-online-presence-ionic","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qeLNtkOw0ImAS2QcUcKcG","type":"Entry","createdAt":"2018-06-15T10:54:43.491Z","updatedAt":"2019-05-17T10:50:18.109Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Oreoluwa Ogundipe","url":"oreoluwa-ogundipe","email":"oreogundipe@gmail.com","twitter":"https://twitter.com/ogundipeore","github":"https://github.com/orehga","guestWriter":true}}],"projectRepo":"https://github.com/oreHGA/ionic-twitter-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-12-04","description":"This tutorial will show you how to create a simple social feed for Android and iOS using Ionic. The app features a Node backend, and online presence indicators powered by Pusher.","prerequisite":"You will need Node and Ionic installed on your machine. A basic knowledge of modern JavaScript development will be helpful.","content":"In this tutorial, we are going to explore how to build a simple social application using Ionic and Pusher. [Ionic](https://ionicframework.com) will be used to create the mobile demo and [Pusher](http://www.pusher.com) Channels to add online functionality. At the end of this tutorial, you will have built an application that looks like this:\n\n![ionic-presence-demo-1](//images.ctfassets.net/1es3ne0caaid/4OKTHp8v4IAu6Ywo8uAigy/a899870614f492408bff0e0bf4d60d55/ionic-presence-demo-1.png)\n\nA while back on Twitter, the official Twitter handle teased their followers with a sample of an interesting idea they were exploring. They were exploring the possibility of letting you know who on your Twitter feed is online. This is something very different and it got a lot of mixed reactions because we know Twitter for for likes and retweets but not “online five minutes ago”. In other messaging applications we use, it is important to know if who you’re interacting with is online. As a developer, you are likely curious about how this all works.\n\n## Requirements\n\nTo be follow through this article properly, you’ll need the following:\n\n- Basic knowledge of JavaScript\n- [Ionic](https://ionicframework.com) installed on your machine, you can read up on how to do that [here](https://ionicframework.com/docs/intro/installation/)\n- [Node.js](https://nodejs.org) installed on your machine\n- [NPM](https://npmjs.org) installed on your machine\n\n\n## Getting started\n\nTo get started, create a new ionic application using the command:\n\n```\n    ionic start twi-clone blank\n```\n\nThis creates a starter ionic project in a folder titled `twi-clone`. To see the demo application at work, go to your terminal and run the command:\n\n```\n    cd twi-clone\n    ionic serve\n```\n\nThis serves the Ionic application. Navigate your browser to  `http://locahost:8100` and you should get a view that looks like this:\n\n![ionic-default](//images.ctfassets.net/1es3ne0caaid/qQv7V1UOEou4OOS6y8GIg/8e28ae0fc41a2af1a00a650fa41cec16/ionic-default.png)\n\n\n## Building the backend server\n\nThe backend server of our application will be responsible for doing the following:\n\n- Sharing users’ posts\n- Authenticating new users on the presence channel\n\nCreate a `/server` folder in your project:\n\n```\n    mkdir server\n    cd server\n```\n\nInstall the Node modules that we will need to power the backend server:\n\n```\n    npm install express body-parser pusher\n```\n\n- `express` will power the web server\n- `body-parser` to handle incoming requests\n- `pusher` to add realtime functionality and online presence\n\nAfterwards, create a `server.js` file in the `server/` directory:\n\n```\n    touch server.js\n```\n\nEdit the `server.js` file to look as follows:\n\n``` javascript\n    // server/server.js\n    \n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const Pusher = require('pusher');\n    \n    // create a express application\n    const app = express();\n    \n    // initialize pusher\n    let pusher = new Pusher({\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    // to Allow CORS\n    app.use((req, res, next) =\u003e {\n        res.header('Access-Control-Allow-Origin', '*');\n        res.header(\n            'Access-Control-Allow-Headers',\n            'Origin, X-Requested-With, Content-Type, Accept'\n        );\n        next();\n    });\n    \n    [...]\n```\n\nWe include the necessary JavaScript libraries and then create a new Pusher object using your Pusher application credentials.\n\n\n\u003e To obtain your Pusher credentials, create a new account [here](https://dashboard.pusher.com/accounts/sign_up). Afterwards, you’ll be redirected to your [Pusher dashboard](https://dashboard.pusher.com). Go ahead and create a new project, obtain your `PUSHER_APP_ID`, `PUSHER_APP_KEY`, `PUSHER_APP_SECRET`, `PUSHER_APP_CLUSTER` and add them to your `server.js` file.\n\nAfterwards, we specify some application middleware to handle incoming requests. The backend server will have two routes:\n\n- `/pusher/auth` - will be used to authenticate users joining the presence channel\n- `/create-post` - will be used when a new post is created.\n\nWith Pusher, when a new client tries to join a presence channel, a `POST` request is first made to authenticate the new client. In this case, a random string is created to identify the client and this makes up the `presenceData` object. The `presenceData` , `channel` and `socketId` are then passed to Pusher to authenticate the client.\n\nThe `/create-post` route accepts the incoming data and then triggers a `new-post` event to the `presence-channel`.\n\n\n\u003e In later parts of the article, we will see how the channel is created in our Ionic application\n\nAdd the code below to your `server/server.js` file:\n\n``` javascript\n    // server/server.js\n    [...]\n    \n    app.post('/pusher/auth', (req, res) =\u003e {\n        let socketId = req.body.socket_id;\n        let channel = req.body.channel_name;\n        random_string = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n        let presenceData = {\n            user_id: random_string,\n            user_info: {\n                username: '@' + random_string,\n            }\n        };\n        let auth = pusher.authenticate(socketId, channel, presenceData);\n        res.send(auth);\n    });\n    \n    app.post('/create-post', (req, res) =\u003e {\n        // trigger a new post event via pusher\n        pusher.trigger('presence-channel', 'new-post', {\n            'username': req.body.username,\n            'content': req.body.content\n        })\n        res.json({ 'status': 200 });\n    });\n    \n    let port = 3128;\n    app.listen(port);\n    console.log('listening');\n```\n\nNow that the backend server is created, you can run it by entering the command:\n\n```\n    node server.js\n```\n\nNow, let’s look at how to build the rest of the application.\n\n\n## Creating the interface\n\n![ionic-presence-interface](//images.ctfassets.net/1es3ne0caaid/4EICjygAsgii0kAm00Gwuy/9a97402d9d40017edb4e56f9979cb9df/ionic-presence-interface.png)\n\nThe starter application created a default homepage which we will then update to fit our particular use case. Update your `home.html` file to look like this: \n\n``` html\n    \u003c!-- src/pages/home/home.html --\u003e\n    \n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title style=\"text-align: center\"\u003e\n          Let's Go Social\n        \u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \n    \u003cion-content padding\u003e\n      \u003cform (ngSubmit)=\"submitPost()\"\u003e\n        \u003cdiv class=\"compose-post-area\"\u003e\n          \u003cion-textarea class=\"post-compose\" placeholder=\"Post something....\" [(ngModel)]=\"post.content\" name=\"content\"\u003e\u003c/ion-textarea\u003e\n          \u003cbutton ion-button round class=\"tweet-post\" type=\"submit\"\u003ePOST\u003c/button\u003e\n        \u003c/div\u003e\n      \u003c/form\u003e\n      \u003cdiv\u003e\n        \u003cion-card\u003e\n          \u003cion-item\u003e\n            \u003ch3\u003eHi \u003ci\u003e@{{ current_user }}\u003c/i\u003e \u003c/h3\u003e\n            \u003ch3\u003eFriends Online: {{ get_users_online() }}\u003c/h3\u003e\n          \u003c/ion-item\u003e\n        \u003c/ion-card\u003e\n    \n        \u003cdiv *ngFor=\"let post of post_list\"\u003e\n          \u003cion-card\u003e\n            \u003cion-item\u003e\n              \u003cion-avatar item-start\u003e\n                \u003cimg src=\"https://api.adorable.io/avatars/100/avatar.png\" alt=\"\"\u003e\n              \u003c/ion-avatar\u003e\n              \u003cp\u003e@{{ post.username }} \u003ci\u003e{{ isOnline(post.username) }} \u003c/i\u003e\u003c/p\u003e\n            \u003c/ion-item\u003e\n    \n            \u003cion-card-content\u003e\n              \u003cp\u003e{{ post.content }}\u003c/p\u003e\n            \u003c/ion-card-content\u003e\n    \n            \u003cion-row\u003e\n              \u003cion-col\u003e\n                \u003cbutton ion-button ion-start clear small\u003e\n                  \u003cion-icon name=\"repeat\"\u003e\u003c/ion-icon\u003e\n                  \u003cdiv\u003e\u0026nbsp;932 reposts\u003c/div\u003e\n                \u003c/button\u003e\n              \u003c/ion-col\u003e\n              \u003cion-col\u003e\n                \u003cbutton ion-button ion-start clear small color=\"danger\"\u003e\n                  \u003cion-icon name=\"heart\"\u003e\u003c/ion-icon\u003e\n                  \u003cdiv\u003e\u0026nbsp;12k likes\u003c/div\u003e\n                \u003c/button\u003e\n              \u003c/ion-col\u003e\n            \u003c/ion-row\u003e\n          \u003c/ion-card\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/ion-content\u003e\n```\n\nThe page also has the following styling:\n\n``` scss\n    # src/page/home/home.scss\n    \n    .compose-post-area{\n        display: flex;\n        align-items: center;\n    }\n    \n    ion-content{\n        background-color: #FAFAFA;\n    }\n```\n\nWe have seen the interface of the application. To add any functionality to our application, we need to edit the `home.ts` file to look like this:\n\n``` javascript\n    // src/app/pages/home/home.ts\n    \n    import { Component } from '@angular/core';\n    import { NavController, AlertController } from 'ionic-angular';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html'\n    })\n    export class HomePage {\n      // this will represent a new post by a user\n      post: any = {};\n      // this will represent your default pusher presence channel\n      presence_channel: any;\n      // this will represent the username of the current user\n      current_user;\n      // this will online a list of users online\n      users_online = {};\n      // list of default posts\n      post_list = [\n        {\n          'username': 'og',\n          'content': 'Making money was the plan oooo'\n        },\n        {\n          'username': 'daddywon',\n          'content': 'You can catch me on the express'\n        }\n      ];\n      \n      constructor(public navCtrl: NavController) {\n        [...]\n      }\n     \n    [...]\n    \n    }\n```\n\nWe can see that the home page component contains the variables that were referenced in the homepage template.\n\n### Creating the Pusher service\n\nTo know the number of friends online and when someone who shares a post is online, let’s make use of Presence Channels by Pusher. To use Pusher in our Ionic application, we need to install the library using the command:\n\n```\n    npm install pusher-js\n```\n\nNow, let’s create a simple Pusher provider. To do this, head over to your terminal and run the command:\n\n```\n    ionic generate provider pusher-service\n```\n\nNow, a `pusher-service` provider has been created. In the `pusher-service.ts` create a new Pusher object in the constructor by specifying the `PUSHER_APP_KEY`, `PUSHER_APP_CLUSTER` and the `authEndpoint` created on our backend server earlier in the article. \n\nAfterwards, subscribe to the `presence-channel` . The `init()` function is then responsible for returning the created presence channel which is to be used in our `home.ts` file. Update your `pusher-service.ts` to look like this:\n\n``` javascript\n    // src/providers/pusher-service/pusher-service.ts\n    \n    import { HttpClient } from '@angular/common/http';\n    import { Injectable } from '@angular/core';\n    import Pusher from 'pusher-js';\n    \n    @Injectable()\n    export class PusherServiceProvider {\n      presenceChannel;\n    \n      constructor(public http: HttpClient) {\n        let pusher = new Pusher('PUSHER_APP_KEY', {\n          authEndpoint: 'http://localhost:3128/pusher/auth',\n          cluster: 'PUSHER_APP_CLUSTER'\n        });\n    \n        this.presenceChannel = pusher.subscribe('presence-channel');\n      }\n    \n      public init() {\n        return this.presenceChannel;\n      }\n    }\n```\n\nUpdate your `app.module.ts` to ensure that the Pusher provider and the HttpClientModule are loaded:\n\n``` javascript\n    // src/app/app.module.ts\n    \n    import { BrowserModule } from '@angular/platform-browser';\n    import { ErrorHandler, NgModule } from '@angular/core';\n    import { IonicApp, IonicErrorHandler, IonicModule } from 'ionic-angular';\n    import { SplashScreen } from '@ionic-native/splash-screen';\n    import { StatusBar } from '@ionic-native/status-bar';\n    \n    import { MyApp } from './app.component';\n    import { HomePage } from '../pages/home/home';\n    import { PusherServiceProvider } from '../providers/pusher-service/pusher-service';\n    import { HttpClientModule } from '@angular/common/http';\n    \n    @NgModule({\n      declarations: [\n        MyApp,\n        HomePage\n      ],\n      imports: [\n        BrowserModule,\n        HttpClientModule,\n        IonicModule.forRoot(MyApp)\n      ],\n      bootstrap: [IonicApp],\n      entryComponents: [\n        MyApp,\n        HomePage\n      ],\n      providers: [\n        StatusBar,\n        SplashScreen,\n        { provide: ErrorHandler, useClass: IonicErrorHandler },\n        PusherServiceProvider\n      ]\n    })\n    export class AppModule { }\n```\n\nNow, let’s go back to the home page component. \n\n## Adding realtime functionality and online presence with Pusher\n\nWe are going to update the `home.ts` file to allow users know when other users are online. We first get the Pusher Channel using the Pusher provider we created earlier and then listen for the `pusher:subscription_succeeded` event. Once the client has successfully subscribed to the `presence-channel`, a `members` object is returned that contains information about the people subscribed to the `presence-channel`.\n\nWe also listen for a `new-post` event on the `presence-channel`. When a `new-post` event is triggered, the `post_list` is then updated to contain the new post. At this point, your `home.ts` should look like this:\n\n``` javascript\n    // src/pages/home/home.ts\n    import { Component } from '@angular/core';\n    import { NavController, AlertController } from 'ionic-angular';\n    import { PusherServiceProvider } from '../../providers/pusher-service/pusher-service';\n    import { HttpClient } from '@angular/common/http';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html'\n    })\n    export class HomePage {\n      // this will represent a new post by a user\n      post: any = {};\n      // this will represent your default pusher presence channel\n      presence_channel: any;\n      // this will represent the username of the current user\n      current_user;\n      // this will online a list of users online\n      users_online = {\n      };\n      // list of default posts\n      post_list = [\n        {\n          'username': 'og',\n          'content': 'Making money was the plan oooo'\n        },\n        {\n          'username': 'daddywon',\n          'content': 'You can catch me on the express'\n        }\n      ];\n    \n      constructor(public navCtrl: NavController, private pusher: PusherServiceProvider, private http: HttpClient, public alertCtrl: AlertController) {\n        let self = this\n        this.presence_channel = this.pusher.init();\n        // update the list of users online\n        this.presence_channel.bind('pusher:subscription_succeeded', function (members) {\n          console.log(members);\n          self.users_online = members.members;\n          self.current_user = members.myID;\n        })\n    \n        this.presence_channel.bind('new-post', function (body) {\n          self.post_list.unshift(body);\n        })\n      }\n    \n      [...]\n    }\n```\n\nFinally, we have three other methods in the component:\n\n- `get_users_online()` which returns the number of users that are currently online\n- `isOnline()` that checks if a particular user is currently online\n- `submitPost()` that submits a post by a user\n\nAdd the methods to your `home.ts` file:\n\n``` javascript\n    // src/pages/home/home.ts\n    \n      [...]\n      \n      get_users_online() {\n        return Object.keys(this.users_online).length - 1;\n      }\n      \n      isOnline(username: string) {\n        if (username in this.users_online) {\n          return 'online'\n        } else {\n          return 'offline'\n        }\n      }\n    \n      submitPost() {\n        let self = this;\n        // make a post request to the server\n        let body = {\n          'username': this.current_user,\n          'content': this.post.content\n        }\n    \n        const alert = this.alertCtrl.create({\n          title: 'Post Shared!',\n          subTitle: `Users online to see your post: ${self.get_users_online()}`,\n          buttons: ['OK']\n        });\n    \n        // submit post to the backend server to trigger pusher event\n        this.http.post('http://localhost:3128/create-post', body).subscribe(() =\u003e {\n          alert.present();\n        });\n      }\n    }\n```\n\nRecall in the `home.html` interface, we had the following form:\n\n``` html\n    \u003cform (ngSubmit)=\"submitPost()\"\u003e\n      \u003cdiv class=\"compose-post-area\"\u003e\n        \u003cion-textarea class=\"post-compose\" placeholder=\"Post something....\" [(ngModel)]=\"post.content\" name=\"content\"\u003e\u003c/ion-textarea\u003e\n        \u003cbutton ion-button round class=\"tweet-post\" type=\"submit\"\u003ePOST\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/form\u003e\n```\n\nWhen the `POST` button is clicked, the `submitPost()` function is called and the post content and username of the current user are sent to the `/create-post` of the backend server which then triggers the `new-post` event on the `presence-channel` and the `post_list` is updated accordingly.\n\nTo see it all at work, serve your Ionic application using the command:\n\n```\n    npm start  # or ionic serve\n```\n\n\u003e Ensure your backend server is on.\n\nNavigate on your browser to `http://localhost:8100` and you should get an experience that looks like this:\n\n![ionic-presence-demo-2](//images.ctfassets.net/1es3ne0caaid/1x0M3f2oWAw6qo0KI28q28/178a215890d22676babe4fad7b610651/ionic-presence-demo-2.gif)\n\n## Testing your Ionic application on a mobile device\n\nIf you’re building with Ionic, you generally don’t intend to have your application on your browser. Rather, you’d want to have it running on mobile devices. Before you do that, you should serve the backend of your application on a tunnel using [ngrok](https://ngrok.io).  Head over [here](https://ngrok.com/download) and follow the download instructions for your platform.\n\nAfter you’ve had it installed, tunnel your backend server using the command:\n\n```\n    ngrok http 3128\n```\n\nYou should get a view that looks like this:\n\n```\n    ngrok by @inconshreveable                                                                                                                                                                                                    (Ctrl+C to quit)\n    \n    Session Status                online\n    Session Expires               7 hours, 59 minutes\n    Version                       2.2.8\n    Region                        United States (us)\n    Web Interface                 http://127.0.0.1:4040\n    Forwarding                    http://b3b88c11.ngrok.io -\u003e localhost:3128\n    Forwarding                    https://b3b88c11.ngrok.io -\u003e localhost:3128\n    \n    Connections                   ttl     opn     rt1     rt5     p50     p90\n                                  0       0       0.00    0.00    0.00    0.00\n                                \n```\n\nThis means that you can now access your backend server using the public URL → `https://b3b88c11.ngrok.io`\n\nUpdate the `authEndpoint` of your `pusher-service.ts` to use the new public URL:\n\n``` javascript\n    // src/providers/pusher-service/pusher-service.ts\n    [...]\n       let pusher = new Pusher('9effdb6e1245bda33b17', {\n          authEndpoint: 'https://b3b88c11.ngrok.io/pusher/auth',\n          cluster: 'mt1'\n        });\n    [...]\n```\n\nAlso update the POST request in the `submitPost` of your `home.ts` file:\n\n``` javascript\n    // src/pages/home/home.ts\n    [...]\n        // submit post to the backend server to trigger pusher event\n        this.http.post('http://localhost:3128/create-post', body).subscribe(() =\u003e {\n          alert.present();\n        });\n    [...]\n```\n\nTo test the application on your mobile device, download the [IonicDevApp](https://ionicframework.com/docs/pro/devapp/) on your mobile device. Ensure that your device and computer are on the same network and you should see this demo application listed there:\n\n![ionic-presence-test-app](//images.ctfassets.net/1es3ne0caaid/1DdiNS8Nm4Ui0oysWcumQO/e2203b9d31dfeaa0e98f8f42269348bf/ionic-presence-test-app.png)\n\nNow, testing with the device, we get the following:\n\n![ionic-presence-demo-3](//images.ctfassets.net/1es3ne0caaid/AptCnwyeRwMQgKuSW2uag/dcccc9c4dafe09e22ee8a467b84e8e32/ionic-presence-demo-3.gif)\n\n## Conclusion\n\nIn this tutorial, we saw how to use Pusher Channels and Ionic to build a social media application that lets you know who’s online and how many online friends your post reach when they’re shared. There are many more use cases for Pusher Channels, so feel free to use concepts shared here in your own application. Here’s a link to the [GitHub](https://github.com/oreHGA/ionic-twitter-clone) repository.","metaTitle":"Building a social app with online presence using Ionic","metaDescription":"This tutorial will show you how to create a simple social feed for Android and iOS using Ionic. The app features a Node backend, and online presence indicators powered by Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3rb74nfHiMusgqcGmQyAoA","type":"Entry","createdAt":"2018-11-30T23:45:07.937Z","updatedAt":"2018-11-30T23:45:07.937Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a Pokemon battle game with React Native - Part 3: Animations and sounds","url":"pokemon-react-native-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNPokebattle","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4IiTE4WzzyQkoeAoaOqgcu","type":"Entry","createdAt":"2018-02-12T15:10:28.101Z","updatedAt":"2018-02-26T12:31:12.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Multiplayer Game","url":"multiplayer-game","type":"use case"}}],"reviewDate":"2018-11-30","description":"In this three part series, use React Native and Node.js to create a two-player Pokemon-like game. In part three, extend the app with improved animations.","prerequisite":"You will need Node 8+, Expo and Yarn installed on your machine.","content":"In this tutorial, we’ll add battle animations and sounds to make the game more fun to play with.\n\nThis is the final tutorial of a three-part series on creating a Pokemon battle game with React Native. \nThese are the topics covered in this series:\n\n- [Part one: Practice mode](https://pusher.com/tutorials/pokemon-react-native-part-1)\n- [Part two: Two-player mode](https://pusher.com/tutorials/pokemon-react-native-part-2)\n- Part three: Animations and sounds\n\n## Prerequisites\n\nThis tutorial has the same prerequisites as part two of the series.\n\n## Overview of features to add\n\nSince we’ve already implemented most of the features of the app, we can now focus on aesthetics. In this part, we’ll add animations and sounds to make it more interesting and pleasing to play with.\n\nHere are the sounds that we’re going to add:\n\n- Screen\n- Pokemon cry \n\nHere are the animations that we’re going to implement:\n\n- Health bar\n- Pokemon moves\n\nWe’re going to add the sounds first before the animations, as they’re easier to implement.\n\nWe’ll be using the [Audio API](https://docs.expo.io/versions/latest/sdk/audio) provided by Expo to play sounds, and React Native’s animation library to implement the animations.\n\n\n## Screen sounds\n\nWe’ll add background music to each of the screens. We’ll be using the sounds from [khinsider.com](https://downloads.khinsider.com/game-soundtracks/album/pokemon-original-game-soundtrack). Specifically, we’ll use the following soundtracks:\n\n- Login screen - [opening](https://downloads.khinsider.com/game-soundtracks/album/pokemon-original-game-soundtrack/101%2520-%2520opening.mp3). Rename the file to `opening.mp3`.\n- Team selection screen - [the final road](https://downloads.khinsider.com/game-soundtracks/album/pokemon-original-game-soundtrack/142%2520-%2520the%2520final%2520road.mp3). Rename the file to `final-road.mp3`.\n- Battle screen - [last battle (vs rival)](https://downloads.khinsider.com/game-soundtracks/album/pokemon-original-game-soundtrack/143%2520-%2520last%2520battle%2520%2528vs%2520rival%2529.mp3). Rename the file to `rival.mp3`.\n\nOpen the links above and download the `.mp3` file. Create a `sounds/background` folder inside `src/assets` and copy the files you downloaded in there. \n\nYou can also copy the files [from the repo](https://github.com/anchetaWern/RNPokeBattle/tree/animations-and-sounds/src/assets/sounds/background).\n\n### Login screen background sound\n\nOpen the login screen file, and import the `Audio` package from Expo:\n\n``` javascript\n    // src/screens/LoginScreen.js\n    import CustomText from \"../components/CustomText\";\n    \n    import { Audio } from \"expo\"; // add this\n```\n\nNext, add an initial value for the reference to the background sound. We need it as a class variable so we could stop the sound later once the user logs in:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      this.backgroundSound = null; // add this\n    }\n```\n\nNext, add a `componentDidMount` method with the following code:\n\n``` javascript\n    async componentDidMount() {\n      try {\n        this.backgroundSound = new Audio.Sound();\n        await this.backgroundSound.loadAsync(\n          require(\"../assets/sounds/background/opening.mp3\")\n        ); // load the mp3 file\n        await this.backgroundSound.setIsLoopingAsync(true); // make the sound loop after it's done playing\n        await this.backgroundSound.playAsync(); // start playing the sound\n      } catch (error) {\n        console.log(\"error loading background sound: \", error);\n      }\n    }\n    \n    render () {\n      // existing code here...\n    }\n```\n\nIn the code above, we’re using the [async/await pattern](https://medium.com/@bluepnume/learn-about-promises-before-you-start-using-async-await-eb148164a9c8) to load and play the background sound. To use the async/await pattern, we add the `async` keyword before the parent function name or the before the function’s open and close parenthesis, if it’s an anonymous function. Inside the function, we can use the `await` keyword to wait for the promise to resolve before executing the next line of code. This essentially makes the asynchronous function behave as if it were a synchronous one.\n\nThe `loadAsync` method accepts a reference to a file through the `require`  method. This is the same method we’re using to load images in React Native. Most methods in the Expo Audio API are async. This means you either have to use a promise or callback function to get its response. That’s the reason why we need to put the `await` keyword at the beginning of each method call, so each method will wait for the results of the previous method call before proceeding.\n\nNext, update the `login` method so it stops the sound once the user logs in. We need to stop the sound because it doesn’t automatically stop once a new sound starts playing. As mentioned earlier, each screen will have its own background sound. That’s why we need to stop it before the sound in the next screen starts playing:\n\n``` javascript\n    login = () =\u003e {\n      let username = this.state.username;\n    \n      if (username) {\n        this.props.navigation.navigate(\"TeamSelect\", {\n          username\n        });\n    \n        this.backgroundSound.stopAsync(); // add this\n      }\n    };\n```\n\n### Team selection screen background sound\n\nDo the same for the team selection screen. Be sure to load the correct `.mp3` file:\n\n``` javascript\n    // src/screens/TeamSelectionScreen.js\n    import Pusher from \"pusher-js/react-native\";\n    \n    import { Audio } from \"expo\"; // add this\n\n\n    constructor(props) {\n      // previous code here..\n      \n      this.backgroundSound = null; // add this\n    }\n\n\n    async componentDidMount() {\n      try {\n        this.backgroundSound = new Audio.Sound();\n        await this.backgroundSound.loadAsync(\n          require(\"../assets/sounds/background/final-road.mp3\")\n        );\n        await this.backgroundSound.setIsLoopingAsync(true);\n        await this.backgroundSound.playAsync();\n      } catch (error) {\n        console.log(\"error loading background sound: \", error);\n      }\n    }\n```\n\n### Battle screen background sound\n\nLastly, do the same for the battle screen:\n\n``` javascript\n    // src/screens/BattleScreen.js\n    import { Ionicons } from \"@expo/vector-icons\";\n    \n    import { Audio } from \"expo\"; // add this\n\n\n    constructor(props) {\n      // previous code here..\n      \n      this.backgroundSound = null; // add this\n    }\n\n\n    async componentDidMount() {\n      // previous code here..\n      \n      // add this\n      try {\n        this.backgroundSound = new Audio.Sound();\n        await this.backgroundSound.loadAsync(\n          require(\"../assets/sounds/background/rival.mp3\")\n        );\n        await this.backgroundSound.setIsLoopingAsync(true);\n        await this.backgroundSound.playAsync();\n      } catch (error) {\n        console.log(\"error loading background sound: \", error);\n      }\n    }\n```\n\n## Pokemon cry sounds\n\nWhen a user switches to a specific Pokemon on their team or their Pokemon faints, we want to play their [cry](https://bulbapedia.bulbagarden.net/wiki/Cry). \n\nDownload their cry (`.mp3` file) from the [asset folder of the Pokemon Showdown website](https://play.pokemonshowdown.com/audio/cries/). Once downloaded, create a `cries` folder inside `src/assets/sounds` and copy the files you downloaded over to that folder.\n\nNext, update the `src/data/pokemon_data.js` file so it includes a `cry` property for each Pokemon. We need to do this because we can’t really pass a variable to the `require` function. You can simply [copy the contents of the file in the repo](https://github.com/anchetaWern/RNPokeBattle/blob/e644d8fa6be30ef51d3b29c52fcb0c04828090ff/src/data/pokemon_data.js) if you want. Just be sure the filenames are the same.\n\n### Update the PokemonOption component\n\nAt this point, we’re now ready to add the cry sounds. Let’s first add the code for playing the cry when the user switches to another Pokemon. Start by importing the `Audio` package:\n\n``` javascript\n    // src/components/PokemonOption/PokemonOption.js\n    import { connect } from \"react-redux\";\n    \n    import { Audio } from \"expo\"; // add this\n```\n\nNext, we need to convert the component into a class-based one:\n\n``` javascript\n    class PokemonOption extends Component {\n      render() {\n        const { pokemon_data, is_selected, action_type } = this.props; // add this\n        \n        // add the same return code here..\n      }\n    }\n```\n\nNote that we’re extracting fewer props in the code above. This is because we’ll be separating the event handler for the `onPress` event of the `TouchableOpacity` component.\n\nAs mentioned earlier, playing Audio requires the direct parent function to have the `async` keyword. While you can actually do it like the one below, it’s better if we just refactor the code to declare the function for handling the `onPress` event separately:\n\n``` javascript\n    \u003cTouchableOpacity onPress={async () =\u003e {\n      // same code here..\n    }}\u003e\n```\n\nTo refactor the code, copy the existing code inside `onPress`. \n\nNext, create a `selectPokemon` function and paste the existing code inside it. Above the existing code, add the props that were previously being extracted:\n\n``` javascript\n    render() {\n      // same code here..\n    }\n    \n    // add this\n    selectPokemon = async () =\u003e {\n      // add these:\n      const {\n        pokemon_data,\n        is_selected,\n        action_type,\n        togglePokemon,\n        setPokemon,\n        setMessage,\n        setMove,\n        backToMove,\n        opponents_channel\n      } = this.props;\n    \n      const { id, cry } = pokemon_data; // add this\n      \n      // paste existing code here...\n      \n    };\n```\n\nNext, update the code you just pasted to play the cry sound when the `action_type` is `switch-pokemon`:\n\n``` javascript\n    if (action_type == \"select-pokemon\") {\n      // previous code here..\n    } else if (action_type == \"switch-pokemon\") {\n      // previous code here..\n    \n      // add these:    \n      try {\n        let crySound = new Audio.Sound();\n        await crySound.loadAsync(cry);\n        await crySound.playAsync();\n      } catch (error) {\n        console.log(\"error loading cry: \", error);\n      }\n      \n      // same code:\n      setTimeout(() =\u003e {\n        setMessage(\"Please wait for your turn...\");\n        setMove(\"wait-for-turn\");\n      }, 2000);\n    }\n```\n\n### Update the MovesList component\n\nNext, we need to update the MovesList component so it plays the cry sound when the opponent Pokemon faints:\n\n``` javascript\n    // src/components/MovesList/MovesList.js\n    \n    import { connect } from \"react-redux\";\n    \n    import { Audio } from \"expo\"; // add this\n```\n\nJust like what we did with the PokemonOption component earlier, we also need to refactor this component into a class-based one:\n\n``` javascript\n    class MovesList extends Component {\n      render() {\n        const { moves } = this.props;\n        \n        // add existing return code here..\n      }\n    }\n```\n\nNext, copy the code inside the `onPress` handler, then update it to use a named function. Pass in the `item` from the FlatLists’ `renderItem` method as an argument so we could make use of it inside the `selectMove` function:\n\n``` javascript\n    \u003cTouchableOpacity\n      style={styles.container}\n      onPress={this.selectMove.bind(this, item)}\n    \u003e\n      \u003cCustomText styles={styles.label}\u003e{item.title}\u003c/CustomText\u003e\n    \u003c/TouchableOpacity\u003e\n```\n\nAdd the `selectMove` function and paste the code from `onPress`:\n\n``` javascript\n    selectMove = async item =\u003e {\n      // add these:\n      const {\n        moves,\n        opponent_pokemon,\n        setOpponentPokemonHealth,\n    \n        backToMove,\n        pokemon,\n        setMessage,\n        setMove,\n        removePokemonFromOpponentTeam,\n        setOpponentPokemon,\n        opponents_channel\n      } = this.props;\n      \n      // paste existing onPress code here..\n      \n    }\n```\n\nLastly, when the opponent’s Pokemon faints, play the cry sound:\n\n``` javascript\n    if (health \u003c 1) {\n      // existing code here..\n      \n      // add these:\n      try {\n        let crySound = new Audio.Sound();\n        await crySound.loadAsync(opponent_pokemon.cry);\n        await crySound.playAsync();\n      } catch (error) {\n        console.log(\"error loading cry: \", error);\n      }\n    }\n```\n\n### Update the battle screen\n\nThe last thing we need to update is the battle screen. We also need to play the cry sound when the user receives an update that their opponent switched their Pokemon, or when their own Pokemon faints after receiving an attack.\n\nIn the code for handling the `client-switched-pokemon` event, we update the anonymous function so it uses the `async` keyword. Because we previously had a reference to the `pokemon`, we can just use it to get the `cry`:\n\n``` javascript\n    // src/screens/BattleScreen.js\n    \n    my_channel.bind(\"client-switched-pokemon\", async ({ team_member_id }) =\u003e {\n      // existing code here..\n      \n      // add these:\n      try {\n        let crySound = new Audio.Sound();\n        await crySound.loadAsync(pokemon.cry);\n        await crySound.playAsync();\n      } catch (error) {\n        console.log(\"error loading cry: \", error);\n      }\n      \n      // this is existing code:\n      setTimeout(() =\u003e {\n        setMove(\"select-move\");\n      }, 1500);\n    });\n```\n\nNext, inside the handler for the `client-pokemon-attacked` event, when the Pokemon faints, play the cry sound:\n\n``` javascript\n    if (data.health \u003c 1) { // Pokemon faints\n      // existing code here..\n      \n      setTimeout(async () =\u003e { // note the async\n        // existing code here..\n      \n        // add these:\n        try {\n          let crySound = new Audio.Sound();\n          await crySound.loadAsync(fainted_pokemon.cry);\n          await crySound.playAsync();\n        } catch (error) {\n          console.log(\"error loading cry: \", error);\n        }\n      }, 1000);\n    \n      // existing code here..\n    }\n```\n\nNote that this time, we’ve placed the `async` keyword in the function for `setTimeout` instead of the event handler itself. This is because we only need it on the direct parent function.\n\n\n## Health bar animation\n\nNow it’s time to implement the animations. If you’re new to animations in React Native, I recommend that you check out my article on [React Native animations](https://blog.pusher.com/animation-react-native-part-1/).\n\nLet’s first animate the health bar. Currently, when a Pokemon loses health, their current HP just abruptly changes when they receive the damage. We want to change it gradually so it gives the illusion that the Pokemon is slowly losing its health as it receives the attack:\n\n![rn-pokemon-3-1](//images.ctfassets.net/1es3ne0caaid/2Mnfxl11gISc20s6WwcECW/a47f745bf9cb03cab22b9faf37ed7a2f/rn-pokemon-3-1.gif)\n\nTo accommodate the animations, we first need to convert the HealthBar component to a class-based one. This is because we now need to work with the state:\n\n``` javascript\n    // src/components/HealthBar/HealthBar.js\n    \n    class HealthBar extends Component {\n      render() {\n        const { label, currentHealth, totalHealth } = this.props;\n        \n        // paste existing return code here..\n      }\n    }\n```\n\nNext, extract the `Animated` library from React Native. This allows us to perform animations:\n\n``` javascript\n    import { View, Animated } from \"react-native\"; \n```\n\nNext, declare the maximum width that the health bar can consume. We’ll be using this later to calculate the width to apply for the current health:\n\n``` javascript\n    import CustomText from \"../CustomText\";\n    \n    const available_width = 100; // add this\n```\n\nNext, initialize the state value which will represent the Pokemon’s current health. In the constructor, we also initialize the animated value. This is the value that we’ll interpolate so the health bar will be animated. Here, we’re using the `currentHealth` passed via props so the health bar animations and health percentage text will always use the current Pokemon’s health:\n\n``` javascript\n    class HealthBar extends Component {\n      // add these:\n      state = {\n        currentHealth: this.props.currentHealth // represents the Pokemon's current health\n      };\n      \n      constructor(props) {\n        super(props);\n        this.currentHealth = new Animated.Value(this.props.currentHealth); // add this\n      }\n      \n      // existing code here..\n      \n    }\n```\n\nYou might be wondering why we need to add a separate state value for storing the Pokemon’s health when we’re already passing it as a prop. The answer is that we also want to animate the number which represents the health percentage while the health bar animation is in progress. The `currentHealth` values passed via props only represents the current health, so we can’t really update it.\n\nNext, add the `getCurrentHealthStyles` function. This is where we define how the health bar will be updated while the animation is in progress. As you’ve seen in the demo earlier, the health bar should decrease its width and change its color from colors between green (healthy) to red (almost fainting). That’s exactly what we’re defining here:\n\n``` javascript\n    getCurrentHealthStyles = () =\u003e {\n      var animated_width = this.currentHealth.interpolate({\n        inputRange: [0, 250, 500],\n        outputRange: [0, available_width / 2, available_width]\n      });\n    \n      const color_animation = this.currentHealth.interpolate({\n        inputRange: [0, 250, 500],\n        outputRange: [\n          \"rgb(199, 45, 50)\",\n          \"rgb(224, 150, 39)\",\n          \"rgb(101, 203, 25)\"\n        ]\n      });\n    \n      return {\n        width: animated_width,\n        height: 8, //height of the health bar\n        backgroundColor: color_animation\n      };\n    };\n```\n\nIn the code above, we’re using the `interpolate` method to specify the input and output ranges of the animation. The `inputRange` represents the value of the animated value at a given point in time, while the `outputRange` is the value you want to use when the animated value is interpolated to the corresponding `inputRange`. Here’s how the values for the `animated_width` maps out. The number on the left is the `inputRange` while the one in the right is the `outputRange`:\n\n\n- 0 → 0\n- 250 → 50\n- 500 → 100\n\nThe numbers in between the numbers we specified are automatically calculated as the animation in on progress.\n\nThe same idea applies to the values for `color_animation`, only this time, it uses RGB color values as the `outputRange`. \n\nNext, update the `render` method so it uses the `Animated.View` component for the current health and call the `getCurrentHealthStyles` function to apply the styles. The health percent text should also be updated to make use of the value in the state. It needs to be divided by 5 because the animated value is 5 times the value of the health bar’s `available_width`:\n\n``` javascript\n    render() {\n      const { label } = this.props;\n    \n      return (\n        \u003cView\u003e\n          \u003cCustomText styles={styles.label}\u003e{label}\u003c/CustomText\u003e\n          \u003cView style={styles.container}\u003e\n            \u003cView style={styles.rail}\u003e\n              \u003cAnimated.View style={[this.getCurrentHealthStyles()]} /\u003e\n            \u003c/View\u003e\n            \u003cView style={styles.percent}\u003e\n              \u003cCustomText styles={styles.percentText}\u003e\n                {parseInt(this.state.currentHealth / 5)}%\n              \u003c/CustomText\u003e\n            \u003c/View\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nLastly, add the `componentDidUpdate` method. This gets invoked immediately after an update to the component occurs. The props don’t necessarily have to have been updated when this occurs, so we need to check whether the relevant prop was actually updated before we perform the animation. If it’s updated, we interpolate the `this.currentHealth` animated value over a period of 1.5 seconds. The final value will be the new `currentHealth` passed via props. After that, we add a listener to the animated value. This listener gets executed every time the animated value is updated. When that happens, we update the state value, which represents the Pokemon’s health. This allows us to update the UI with the current health percentage while the animation is in progress:\n\n``` javascript\n    componentDidUpdate(prevProps, prevState) {\n      if (prevProps.currentHealth !== this.props.currentHealth) { // check if health is updated\n        Animated.timing(this.currentHealth, {\n          duration: 1500, // 1.5 seconds\n          toValue: this.props.currentHealth // final health when the animation finishes\n        }).start(); // start the animation\n      \n        this.currentHealth.addListener(progress =\u003e {\n          this.setState({\n            currentHealth: progress.value\n          });\n        });\n      }\n    }\n```\n\n## Pokemon fainting animation\n\nWhen a Pokemon loses all of its health, we move the PokemonFullSprite component downwards out of the view. This gives the impression that the Pokemon collapsed. Here’s what it looks like (minus the boxing gloves, we’ll add that later):\n\n![rn-pokemon-3-2](//images.ctfassets.net/1es3ne0caaid/4buIkrcCRy6GOiIcMkkia4/175a5f59b39875ecff14041fdf3f1707/rn-pokemon-3-2.gif)\n\nJust like what we did with all the previous components, we also need to convert this one to a class-based one.\n\nOnce you’ve converted the component to a class-based one, import the `Animated` library:\n\n``` javascript\n    // src/components/PokemonFullSprite/PokemonFullSprite.js\n    \n    import { Image, Animated } from \"react-native\";\n```\n\nNext, add the animated value that we’re going to interpolate:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      this.sprite_translateY = new Animated.Value(0);\n    }\n```\n\nNext, update the `render` method to specify how the vertical position of the component will change. In this case, an `inputRange` of `0` means that it’s in its original position. Once it becomes `1000`, it’s no longer visible because its initial vertical position has moved 1000 pixels downwards. To apply the styles, specify it as an object under `transform`. This allows us to perform translation animations similar to the ones used in CSS3:\n\n``` javascript\n    render() {\n      const { spriteFront, spriteBack, orientation } = this.props;\n      let sprite = orientation == \"front\" ? spriteFront : spriteBack;\n      \n      // add these:\n      const pokemon_moveY = this.sprite_translateY.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, 1000]\n      });\n      \n      // use Animated.Image instead of Image, and add transform styles\n      return (\n        \u003cAnimated.Image\n          source={sprite}\n          resizeMode={\"contain\"}\n          style={[\n            styles.image,\n            {\n              transform: [\n                {\n                  translateY: pokemon_moveY\n                }\n              ]\n            }\n          ]}\n        /\u003e\n      );\n    }\n```\n\nWhen the component is updated, we only start the animation if the Pokemon has fainted. If it’s not then we set the initial value. This way, the component doesn’t stay hidden if the user switched to a different Pokemon:\n\n``` javascript\n    componentDidUpdate(prevProps, prevState) {\n      if (prevProps.isAlive !== this.props.isAlive \u0026\u0026 !this.props.isAlive) { // if Pokemon has fainted\n        Animated.timing(this.sprite_translateY, {\n          duration: 900,\n          toValue: 1\n        }).start();\n      } else if (prevProps.isAlive !== this.props.isAlive \u0026\u0026 this.props.isAlive) { // if Pokemon is alive\n        this.sprite_translateY.setValue(0); // unhides the component\n      }\n    }\n```\n\nThe last step is to add the `isAlive` prop when using the PokemonFullSprite component in the battle screen:\n\n``` javascript\n    // src/screens/BattleScreen.js\n    \u003cPokemonFullSprite\n      ...\n      isAlive={opponent_pokemon.current_hp \u003e 0}\n    /\u003e\n\n\n    \u003cPokemonFullSprite\n      ...\n      isAlive={pokemon.current_hp \u003e 0}\n    /\u003e\n```\n\n## Pokemon switch animation\n\nWhen the user switches Pokemon, we’re going to make a Pokeball bounce and scale the Pokemon gif up. This gives the impression that the user has thrown it and the Pokemon came out of it:\n\n![rn-pokemon-3-3](//images.ctfassets.net/1es3ne0caaid/78fxTmj54ssysgwQ4SCSMI/a4d8bb3f1003c2de75df49893720d4dc/rn-pokemon-3-3.gif)\n\nTo implement this animation, we also need to update the PokemonFullSprite component. Start by importing the additional components and libraries we need from React Native. This includes the `View` component and the `Easing` library to implement easing animations:\n\n``` javascript\n    // src/components/PokemonFullSprite/PokemonFullSprite.js\n    import { View, Image, Animated, Easing } from \"react-native\";\n```\n\nNext, update the constructor to include three new animated values. As mentioned earlier, we’re going to render a Pokeball which we will bounce so we need to translate its Y position. Aside from that, we also need to hide it so we have `pokeball_opacity`. Once the Pokeball is hidden, we want to scale up the Pokemon gif:\n\n``` javascript\n    constructor(props) {\n      // previously added code..\n      \n      // add these\n      this.pokeball_y_translate = new Animated.Value(0); // for updating the Y position of the Pokeball\n      this.pokeball_opacity = new Animated.Value(0); // for animating the Pokeball opacity\n      this.sprite_scale = new Animated.Value(0); // for scaling the Pokemon gif\n    }\n```\n\nNext, update the `render` method so it specifies how we’re going to interpolate the animated values we declared in the constructor:\n\n``` javascript\n    const pokemon_moveY = ... // same code\n    \n    // add these:\n    const pokemon_scale = this.sprite_scale.interpolate({\n      inputRange: [0, 0.5, 1],\n      outputRange: [0, 0.5, 1] // invisible (because zero size), half its original size, same as original size\n    });\n    \n    const pokeball_moveY = this.pokeball_y_translate.interpolate({\n      inputRange: [0, 1, 2],\n      outputRange: [0, 50, 25] // top to bottom Y position translate\n    });\n    \n    const pokeball_opacity = this.pokeball_opacity.interpolate({\n      inputRange: [0, 0.5, 1],\n      outputRange: [1, 0.5, 0] // full opacity, half opacity, invisible\n    });\n```\n\nNext, add an animated image on top of the Pokemon gif, then add the interpolated values to both the Pokeball image and the Pokemon gif. Since React Native doesn’t allow us to return siblings, we wrap everything in a `View` component:\n\n``` javascript\n    return (\n        \u003cView\u003e\n          \u003cAnimated.Image\n            source={require(\"../../assets/images/things/pokeball.png\")}\n            style={{\n              transform: [\n                {\n                  translateY: pokeball_moveY\n                }\n              ],\n              opacity: pokeball_opacity\n            }}\n          /\u003e\n    \n          \u003cAnimated.Image\n            source={sprite}\n            resizeMode={\"contain\"}\n            style={[\n              styles.image,\n              {\n                transform: [\n                  {\n                    translateY: pokemon_moveY\n                  },\n                  {\n                    scale: pokemon_scale\n                  }\n                ]\n              }\n            ]}\n          /\u003e\n    \n        \u003c/View\u003e\n      );\n    }\n```\n\nYou can get the [Pokeball image from this website](https://www.flaticon.com/free-icon/pokeball_361998). Select the 32px `.png` file. That’s also the source of the image included in the repo. Create a `things`  folder inside the `src/assets/images` directory, move the file in there, and rename it to `pokeball.png`.\n\nBecause we need to animate in two instances: `componentDidMount` and `componentDidUpdate`, we create a new function that will start the animations for us:\n\n``` javascript\n    animateSwitchPokemon = () =\u003e {\n      // initialize the animated values\n      this.sprite_translateY.setValue(0);\n      this.pokeball_opacity.setValue(0);\n      this.pokeball_y_translate.setValue(0);\n      this.sprite_scale.setValue(0);\n      \n      // perform the animations in order\n      Animated.sequence([\n        // bounce the Pokeball\n        Animated.timing(this.pokeball_y_translate, {\n          toValue: 1,\n          easing: Easing.bounce,\n          duration: 1000\n        }),\n        \n        // hide the Pokeball\n        Animated.timing(this.pokeball_opacity, {\n          toValue: 1,\n          duration: 200,\n          easing: Easing.linear\n        }),\n        \n        // scale the Pokemon gif up so it becomes visible\n        Animated.timing(this.sprite_scale, {\n          toValue: 1,\n          duration: 500\n        })\n      ]).start();\n    };\n```\n\nIn the code above, we first re-initialize the animated values. This is because this component doesn’t really get unmounted when a Pokemon faints and re-mounted again once the user switches to another Pokemon. If we don’t do this, the subsequent Pokemon’s that we switch to after the first one has fainted will no longer be visible. That is because the component will already have been in its final state of animation.\n\nOnce we’ve re-initialized the animated values, we performed the animations in order:\n\n\n1. Bounce the Pokeball.\n2. Hide the Pokeball.\n3. Scale the Pokemon gif up.\n\nWhen the component is mounted for the first time, we execute the function for animating it:\n\n``` javascript\n    componentDidMount() {\n      this.animateSwitchPokemon();\n    }\n```\n\nAlso, do the same when the component is updated. The only time we want to perform the animations for switching a Pokemon is when the user switches to a new one. Since we’re already passing the Pokemon name as a props, we simply check if the current one is not the same as the previous:\n\n``` javascript\n    componentDidUpdate(prevProps, prevState) {\n      if (prevProps.isAlive !== this.props.isAlive \u0026\u0026 !this.props.isAlive) {\n        // previous code here..\n      } else if (prevProps.pokemon !== this.props.pokemon \u0026\u0026 this.props.isAlive) {\n        this.animateSwitchPokemon();\n      }\n    }\n```\n\n## Pokemon move animation\n\nNext, we’re going to implement the Pokemon move animations. We’ll only implement a single generic move animation because it would take us forever if we’re going to implement everything via code. Here’s what the animation looks like:\n\n![rn-pokemon-3-4](//images.ctfassets.net/1es3ne0caaid/7HKTNLNoGIcSuIiSqsUIsW/24d567c3d49031c4cb044ec547deaee4/rn-pokemon-3-4.gif)\n\nJust like all the previous Pokemon-related animations, we’ll also be using the PokemonFullSprite component for this. Start by adding the new animated values that were going to interpolate. This includes the following: \n\n\n- `pokemon_opacity` - to seemingly make the Pokemon disappear for a split second to indicate that it received damage.\n- `punch_opacity` - for making the boxing gloves image appear while an attack is made, and disappear once it reaches its final destination (right above the Pokemon’s head).\n- `punch_translateY` - for moving the boxing gloves vertically across the target Pokemon when it’s attacked. \n\nHere’s the code. Add these after the last animated value in the constructor:\n\n``` javascript\n    // src/components/PokemonFullSprite/PokemonFullSprite.js\n    this.pokemon_opacity = new Animated.Value(0);\n    this.punch_opacity = new Animated.Value(0);\n    this.punch_translateY = new Animated.Value(0);\n```\n\nNext, we specify how the new animated values will be interpolated. This is inside the `render` method:\n\n``` javascript\n    const pokeball_opacity = ... // same code\n    \n    // add these:\n    const punch_opacity = this.punch_opacity.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 1]\n    });\n    \n    const punch_moveY = this.punch_translateY.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, -130] // negative value because we're moving upwards\n    });\n    \n    const pokemon_opacity = this.pokemon_opacity.interpolate({\n      inputRange: [0, 0.5, 1],\n      outputRange: [1, 0.2, 1] // appear, disappear, appear\n    });\n```\n\nNext, update the target components. The first one is the Pokemon gif. Add the `opacity` style:\n\n``` javascript\n    \u003cAnimated.Image\n      source={sprite}\n      resizeMode={\"contain\"}\n      style={[\n        styles.image,\n        {\n          transform: [\n            {\n              translateY: pokemon_moveY\n            },\n            {\n              scale: pokemon_scale\n            }\n          ],\n          opacity: pokemon_opacity // add this\n        }\n      ]}\n    /\u003e\n```\n\nThe second one hasn’t been added yet. Add it right below the Pokemon gif. This includes both transform and opacity animations:\n\n``` javascript\n    \u003cAnimated.Image\n      source={require(\"../../assets/images/things/fist.png\")}\n      style={[\n        styles.punch,\n        {\n          transform: [\n            {\n              translateY: punch_moveY // for moving it vertically across the Pokemon gif\n            }\n          ],\n          opacity: punch_opacity // for making it appear and disappear\n        }\n      ]}\n    /\u003e\n```\n\nYou’ll need to [download the image asset](https://www.flaticon.com/free-icon/fist_189013) we’re using above. Select the 32px `.png` file. That’s also the source of the image in the GitHub repo. Move the file inside the `src/assets/images/things` folder and rename it to `fist.png`.\n\nNext, add the styles. The component should be absolutely positioned so that it can overlap with the Pokemon gif:\n\n``` javascript\n    const styles = {\n      // previously added code here..  \n      \n      // add these:\n       punch: {\n        position: \"absolute\", // very important\n        bottom: -40,\n        left: 50\n      }\n    };\n```\n\nNext, add the function for starting the move animations:\n\n``` javascript\n    animateDamagePokemon = () =\u003e {\n      // reset the animated values\n      this.punch_opacity.setValue(0);\n      this.punch_translateY.setValue(0);\n      this.pokemon_opacity.setValue(0);\n    \n      Animated.sequence([\n        // make the boxing gloves visible\n        Animated.timing(this.punch_opacity, {\n          toValue: 1,\n          duration: 10,\n          easing: Easing.in\n        }),\n        \n        // move the boxing gloves upwards across the Pokemon\n        Animated.timing(this.punch_translateY, {\n          toValue: 1,\n          duration: 300,\n          easing: Easing.in\n        }),\n        \n        // hide the boxing gloves\n        Animated.timing(this.punch_opacity, {\n          toValue: 0,\n          duration: 200,\n          easing: Easing.in\n        }),\n        \n        // momentarily hide the Pokemon (to indicate damage)\n        Animated.timing(this.pokemon_opacity, {\n          toValue: 1,\n          duration: 850,\n          easing: Easing.in\n        })\n      ]).start();\n    };\n```\n\nNext, we call the `animateDamagePokemon` function when the current health changes. This may also happen when the user switches Pokemon so we need to make sure that the animation doesn’t execute if the previous Pokemon isn’t the same as the one the user switched to:\n\n``` javascript\n    componentDidUpdate(prevProps, prevState) {\n      // add these:\n      if (\n        prevProps.pokemon === this.props.pokemon \u0026\u0026\n        prevProps.currentHealth !== this.props.currentHealth\n      ) {\n        this.animateDamagePokemon();\n      }\n      \n      // existing code here..\n    }\n```\n\nNext, when we use the PokemonFullSprite component inside the battle screen, we need to add the new `currentHealth` prop. When its value changes, that’s the queue for the component to render the move animation:\n\n``` javascript\n    // src/screens/BattleScreen.js\n    \u003cPokemonFullSprite\n      ...\n      currentHealth={opponent_pokemon.current_hp}\n    /\u003e\n    \n    \u003cPokemonFullSprite\n      ...\n      currentHealth={pokemon.current_hp}\n    /\u003e\n```\n\nLastly, we need to move the code for dispatching the action for updating the Pokemon’s health to the very first line when the callback function is called. This is because setting the Pokemon’s health triggers the move animation as well, and we want to perform it while the health is being animated:\n\n``` javascript\n    // src/screens/BattleScreen.js\n    my_channel.bind(\"client-pokemon-attacked\", data =\u003e {\n      setPokemonHealth(data.team_member_id, data.health); // move this (previously above: setMove(\"select-move\"))\n      \n      // previously added code here..\n    });\n```\n\n## Conclusion\n\nWe’ve reached the end of this tutorial. Even though it took us three tutorials to implement it, there are still lots of things that need to be covered: \n\n\n- Only a handful of Pokemon can be selected, and their moves are limited. \n- There are two-turn moves like Fly, Dig, and Solar Beam in the `moves_data.js` file, but they’re not really implemented as such. \n- Moves that are supposed to modify base stats aren’t also implemented. There are also no status conditions such as frozen, burned, or paralyzed.\n- Players can’t use or equip items such as the max potion, berries to their Pokemon.\n\nYou might also have noticed that there’s a bug in the app. I call it “Zombie mode”. When your Pokemon faints, you can actually go to the Pokemon move selection screen and attack with your fainted Pokemon. \n\nLastly, there’s no functionality yet to inform both players that someone has won. Even though it’s obvious, it’s always good to acknowledge it. So if you’re interested, I encourage you to develop the app further.\n\nIn this tutorial, you learned how to play background sounds within an app using Expo’s Audio API. You also learned how to implement animations in React Native.\n\nThat also wraps up the series. In this series, you learned how to re-create the battles in the classic Pokemon game using React Native and Pusher. Along the way, you learned how to use Redux, Pusher Channels, audio, and animations in React Native.\n\nYou can find the code for this app on its [GitHub repo](https://github.com/anchetaWern/RNPokebattle). The code added to this specific part of the series is on the `animations-and-sounds` branch.","metaTitle":"Create a Pokemon battle game with React Native - Part 3","metaDescription":"In this three part series, use React Native and Node.js to create a two-player Pokemon-like game. In part three, extend the app with improved animations."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5CkISTLur64UK4OI6MIACk","type":"Entry","createdAt":"2018-11-29T22:29:13.432Z","updatedAt":"2018-11-29T22:29:13.432Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a Pokemon battle game with React Native - Part 2: Two-player mode","url":"pokemon-react-native-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNPokebattle","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4IiTE4WzzyQkoeAoaOqgcu","type":"Entry","createdAt":"2018-02-12T15:10:28.101Z","updatedAt":"2018-02-26T12:31:12.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Multiplayer Game","url":"multiplayer-game","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-11-29","description":"In this three part series, use React Native and Node.js to create a two-player Pokemon-like game. In part two, implement multi-player mode, allowing two players to fight in realtime.","prerequisite":"You will need Node 8+, Expo and Yarn installed on your machine.","content":"In this tutorial, we’ll be implementing the game’s two-player mode.\n\nIf you need an overview of what the final output for this series will look like, or if you need more details on what we’ll be doing in each part, check out part one. \n\nThis is the second tutorial of a three-part series on creating Pokemon battle game with React Native.\nThese are the topics covered in this series:\n\n- [Part one: Practice mode](https://pusher.com/tutorials/pokemon-react-native-part-1)\n- Part two: Two-player mode\n- Part three: Animations and sounds\n\n## Prerequisites\n\nThis tutorial has the same prerequisites as part one of the series.\n\nWe’ll be using Pusher to communicate data between players in realtime so you need to [create a Pusher account](https://dashboard.pusher.com/accounts/sign_up) and an [app instance](https://dashboard.pusher.com/). We’ll be specifically using Pusher package version 4.3.1 for the app.\n\n\n## Overview of features to add\n\nWe’ve added a lot of code in part one. This time, we’re mostly going to update the existing code in order for us to connect to Pusher and be able to emit moves made by each player, so their opponent’s screen also gets updated with the same changes. In this case, we need to implement the following:\n\n\n- When a user switches Pokemon, emit an event via Pusher Channels so their opponent also sees the new Pokemon they switched to.\n- When user attacks with their Pokemon, the opponent’s Pokemon should also receive the damage on their side.\n\nHere’s what the final output for this part is going to look like:\n\n![rn-pokemon-2-1](//images.ctfassets.net/1es3ne0caaid/49YYHxMFhe0yoOkAi4IoUs/255595da807bf050f24b09212605c6cf/rn-pokemon-2-1.gif)\n\n## Enable client events\n\nOn your Pusher app instance, enable client events in the settings page. This allows us to trigger client events right from the app itself. A server will still be required for authentication though:\n\n![rn-pokemon-2-2](//images.ctfassets.net/1es3ne0caaid/45k2HZhFpC420KAQoaWYiw/a44bc37166f113407909f5fe80e7460a/rn-pokemon-2-2.png)\n\n## Add the two-player mode\n\nAt this point, we’re ready to start adding the code for the two-player mode. Start by installing the Pusher JavaScript library. This allows us to use Channels:\n\n```\n    yarn add pusher-js\n```\n\n### Update the action types\n\nUpdate the action types file to include the new actions that we will be working with:\n\n``` javascript\n    // src/actions/types.js\n    export const SET_POKEMON_HEALTH = \"set_pokemon_health\";\n    export const SET_MESSAGE = \"set_message\";\n    export const REMOVE_POKEMON_FROM_TEAM = \"remove_pokemon_from_team\";\n```\n\nSince the two-player mode is already going to involve two players, we need a way to also update the health of the current player’s Pokemon (`SET_POKEMON_HEALTH`), as well as remove them from the team when they faint (`REMOVE_POKEMON_FROM_TEAM`). The `SET_MESSAGE` action is for informing both players on what each other’s actions are. For example: “opposing player switched to Pikachu”.\n\nNext, add the action creators for the action types we just added:\n\n``` javascript\n    // src/actions/index.js\n    import {\n      // existing code here..\n    \n      // add these:\n      SET_POKEMON_HEALTH,\n      SET_MESSAGE,\n      REMOVE_POKEMON_FROM_TEAM\n    } from \"./types\";\n    \n    // add these after the last function\n    export const setPokemonHealth = (team_member_id, health) =\u003e {\n      return {\n        type: SET_POKEMON_HEALTH,\n        team_member_id, // the unique ID assigned to a specific Pokemon on a team\n        health\n      };\n    };\n    \n    export const setMessage = message =\u003e {\n      return {\n        type: SET_MESSAGE,\n        message // the message to display on the player's screen\n      };\n    };\n    \n    export const removePokemonFromTeam = team_member_id =\u003e {\n      return {\n        type: REMOVE_POKEMON_FROM_TEAM,\n        team_member_id\n      };\n    };\n```\n\n### Update the battle reducer\n\nUpdate the battle reducer so it can process the actions we created. Start by including the action types:\n\n``` javascript\n    // src/reducers/BattleReducer.js\n    \n    import {\n      // existing code here..\n    \n      // add these:\n      SET_POKEMON_HEALTH,\n      SET_MESSAGE,\n      REMOVE_POKEMON_FROM_TEAM\n    } from \"../actions/types\";\n```\n\nNext, we add `wait-for-turn` as a move display text. In part one, we already added three of the move display text. These are the text displayed on top of the actual controls (fight or switch, Pokemon move selection, and Pokemon selection). It basically guides the user on what to do with the controls. `wait-for-turn` is empty because we don’t want to display a move display text while the user is waiting for their turn:\n\n``` javascript\n    const move_display_text = {\n      \"wait-for-turn\": \"\", // add this\n      \n      // existing code here..\n    };\n```\n\nNext, add the default message to display. This message is different from the move display text. Its primary function is to inform the user what move their opponent did, and it also shows them what move they did and how effective it is:\n\n``` javascript\n    const INITIAL_STATE = {\n     // existing code here..\n     \n      message: \"\" // add this\n    };\n```\n\nNext, add the conditions that will process the actions:\n\n``` javascript\n    case SET_POKEMON_HEALTH: // updates the current_hp of the Pokemon with the team_member_id specified in the action\n      let team_data = [...state.team];\n      team_data = team_data.map(item =\u003e {\n        if (item.team_member_id == action.team_member_id) {\n          item.current_hp = action.health;\n        }\n        return item;\n      });\n    \n      return { ...state, team: team_data };\n    \n    case SET_MESSAGE: // sets the message to display in place of the controls\n      return { ...state, move: \"wait-for-turn\", message: action.message };\n    \n    case REMOVE_POKEMON_FROM_TEAM: // removes the Pokemon with the specified team_member_id from the team\n      const diminished_team = [...state.team].filter(item =\u003e {\n        return item.team_member_id != action.team_member_id;\n      });\n    \n      return { ...state, team: diminished_team };\n```\n\n### Update the team selection screen\n\nAt this point, we’re now ready to update the team selection screen so it actually looks for an opponent instead of emulating that it’s looking for an opponent. Start by including the components and libraries we need:\n\n``` javascript\n    import { View, TouchableOpacity, ActivityIndicator, Alert } from \"react-native\"; // add Alert\n    import Pusher from \"pusher-js/react-native\";\n```\n\nNext, update the constructor so it declares an initial value for the Pusher client reference and the current user’s channel. This channel is where the opponent triggers events for updating their opponent Pokemon’s health and informing their opponent that they switched Pokemon:\n\n``` javascript\n    constructor(props) {\n      // existing code here..\n     \n      // add these:\n      this.pusher = null;\n      this.my_channel = null;\n    }\n```\n\nNext, update the function that gets executed when the user confirms their team selection to store the `pokemon_ids` and `team_member_ids` in a separate array. We will use those later as additional information when we authenticate the user with the server component of the app:\n\n``` javascript\n    confirmTeam = () =\u003e {\n      const { selected_pokemon, setTeam, setPokemon, navigation } = this.props;\n    \n      let team = [...selected_pokemon];\n      let pokemon_ids = []; // add this\n      let team_member_ids = []; // add this\n      team = team.map(item =\u003e {\n        let hp = 500;\n    \n        let shuffled_moves = shuffleArray(item.moves);\n        let selected_moves = shuffled_moves.slice(0, 4);\n    \n        let moves = moves_data.filter(item =\u003e {\n          return selected_moves.indexOf(item.id) !== -1;\n        });\n    \n        let member_id = uniqid();\n    \n        pokemon_ids.push(item.id); // add this\n        team_member_ids.push(member_id); // add this\n    \n        return {\n          ...item,\n          team_member_id: member_id,\n          current_hp: hp,\n          total_hp: hp,\n          moves: moves,\n          is_selected: false\n        };\n      });\n    \n      setTeam(team);\n      setPokemon(team[0]);\n    \n      this.setState({\n        is_loading: true\n      });\n    \n      // next: add code for authenticating with the server\n    };\n```\n\nNext, add the code for authenticating the user to the server. Here, we’re passing the `username`, `pokemon_ids` and `team_member_ids` as additional params. These are used later on so that both users have a copy of their opponents team. The users won’t really know all the Pokemon that are in their opponent’s team, only the app needs to know about that information so it can update the health and remove the Pokemon from the opponent’s team when they faint:\n\n``` javascript\n    const username = navigation.getParam(\"username\"); // get the username passed from the login screen\n    \n    this.pusher = new Pusher(\"YOUR_PUSHER_APP_KEY\", {\n      authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n      cluster: \"YOUR_PUSHER_APP_CLUSTER\",\n      encrypted: true,\n      auth: {\n        params: {\n          username: username,\n          pokemon_ids: pokemon_ids,\n          team_member_ids: team_member_ids\n        }\n      }\n    });\n    \n    // next: subscribe to current user's Pusher channel\n```\n\nIn the above code, replace the placeholder values with your Pusher credentials. We’ll replace the ngrok URL later once we get to the server part.\n\nNext, subscribe to the current user’s Pusher channel. If the subscription succeeds, we listen for the `opponent-found` event to be triggered. This event is triggered by the server once it finds an opponent for the user. As you’ll see later, the server will send the usernames of the two users that were matched. That’s what we’re picking up when the `opponent-found` event is triggered. \n\nWe determine the opponent by comparing the username of the user to the usernames sent from the server. The first turn goes to the user who first confirmed their team selection. Lastly, we send all the relevant information to the next screen by means of navigation props:\n\n``` javascript\n    this.my_channel = this.pusher.subscribe(`private-user-${username}`);\n    this.my_channel.bind(\"pusher:subscription_error\", status =\u003e {\n      Alert.alert(\n        \"Error\",\n        \"Subscription error occurred. Please restart the app\"\n      );\n    });\n    \n    this.my_channel.bind(\"pusher:subscription_succeeded\", data =\u003e {\n      this.my_channel.bind(\"opponent-found\", data =\u003e {\n        let opponent =\n          username == data.player_one.username\n            ? data.player_two // object containing player two's data\n            : data.player_one; // object containing player one's data\n    \n        let first_turn =\n          username == data.player_one.username\n            ? \"you\"\n            : data.player_two.username;\n    \n        Alert.alert(\n          \"Opponent found!\",\n          `${\n            opponent.username\n          } will take you on! First turn goes to ${first_turn}`\n        );\n    \n        this.setState({\n          is_loading: false,\n          username: \"\"\n        });\n        \n        // send all relevant information to the next screen\n        navigation.navigate(\"Battle\", {\n          pusher: this.pusher,\n          username: username,\n          opponent: opponent,\n          my_channel: this.my_channel,\n          first_turn: first_turn\n        });\n      });\n    });\n```\n\n### Update the battle screen\n\nWe’re now ready to update the battle screen so it can handle the two-player mode. Start by importing the new action creators we added earlier:\n\n``` javascript\n    // src/screens/BattleScreen.js\n    \n    import {\n      // existing code here..\n      \n      // add these:\n      setPokemonHealth,\n      removePokemonFromTeam,\n      setMessage,\n      removePokemonFromOpponentTeam\n    } from \"../actions\";\n```\n\nNext, update `mapStateToProps` to include the `message` from the store. This way, the battle screen’s UI will always stay up to date with the current value of `message` in the store: \n\n``` javascript\n    const mapStateToProps = ({ team_selection, battle }) =\u003e {\n      const {\n        // existing code here..\n    \n        message // add this\n      } = battle;\n      return {\n        // existing code here..\n        message // add this\n      };\n    };\n```\n\nNext, add the functions for dispatching the new actions in `mapDispatchToProps`:\n\n``` javascript\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        // existing code here..\n       \n        // add these:\n        setMessage: message =\u003e {\n          dispatch(setMessage(message));\n        },\n        setPokemonHealth: (team_member_id, health) =\u003e {\n          dispatch(setPokemonHealth(team_member_id, health));\n        },\n        setMove: move =\u003e {\n          dispatch(setMove(move));\n        },\n        removePokemonFromTeam: team_member_id =\u003e {\n          dispatch(removePokemonFromTeam(team_member_id));\n        },\n        removePokemonFromOpposingTeam: team_member_id =\u003e {\n          dispatch(removePokemonFromOpponentTeam(team_member_id));\n        }\n      };\n    };\n```\n\nFrom the code above, you can see that it’s not just the new actions we’re adding. We also have previously added actions that we didn’t have previously. This includes `setMove` and `removePokemonFromOpponentTeam`. Previously, we didn’t need to add those because we’re only dispatching them from the `MovesList` component. This time, we need to add them to the screen itself because it is where we will be putting all of the event listeners for Pusher Channels.\n\nNext, update the `constructor` to add an initial value for the `opponents_channel`. We will be using this channel to inform the user’s opponent when their current Pokemon receives damage. We also use it for sending messages to display on the opponent’s control section:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      this.opponents_channel = null;\n    }\n```\n\nNext, extract all of the store values and functions we returned earlier from `mapDispatchToProps`:\n\n``` javascript\n    async componentDidMount() {\n      const {\n        // existing code here..\n       \n        // add these:\n        navigation,\n        team,\n        setMove,\n        removePokemonFromOpposingTeam,\n        setMessage,\n        setPokemonHealth,\n        removePokemonFromTeam\n      } = this.props;\n      \n      // next: construct opponent team data\n    }\n```\n\nNext, construct the opponent team data based on the `pokemon_ids` and `team_member_ids` that were passed from the team selection screen earlier:\n\n``` javascript\n    let pusher = navigation.getParam(\"pusher\");\n    \n    const { username, pokemon_ids, team_member_ids } = navigation.getParam(\n      \"opponent\"\n    );\n    \n    let opponent_pokemon_ids = pokemon_ids.split(\",\");\n    let opponent_team_member_ids = team_member_ids.split(\",\");\n    \n    // only return the data of the Pokemon's that are on the opponent's team\n    let opponent_team_data = pokemon_data.filter(item =\u003e {\n      return opponent_pokemon_ids.indexOf(item.id.toString()) !== -1;\n    });\n    \n    opponent_team_data = opponent_team_data.map((item, index) =\u003e {\n      let hp = 500;\n    \n      let shuffled_moves = shuffleArray(item.moves);\n      let selected_moves = shuffled_moves.slice(0, 4);\n    \n      let moves = moves_data.filter(item =\u003e {\n        return selected_moves.indexOf(item.id) !== -1;\n      });\n    \n      return {\n        ...item,\n        current_hp: hp,\n        total_hp: hp,\n        moves: moves,\n        is_selected: false\n      };\n    });\n```\n\nOnce we have the opponent team data, we need to sort it based on the ordering of Pokemon the opponent has used when they were selecting their team. This ordering is represented by how the items in the `opponent_pokemon_ids` array are arranged so we loop through that array, and add the team member ID to each Pokemon. We then save the sorted opponent Pokemon team in the store:\n\n``` javascript\n    let sorted_opponent_team = [];\n    opponent_pokemon_ids.forEach((id, index) =\u003e {\n      let team_member = opponent_team_data.find(\n        item =\u003e id == item.id.toString()\n      );\n      team_member.team_member_id = opponent_team_member_ids[index];\n      sorted_opponent_team.push(team_member);\n    });\n    \n    // save the opponent Pokemon team in the store\n    setOpponentTeam(sorted_opponent_team);\n    setOpponentPokemon(sorted_opponent_team[0]);\n    \n    // next: subscribe to opponent's channel\n```\n\nNext, subscribe to the opponent’s channel. Once subscribed, get the username of the user who will make the first move, and if it’s not the current user, call `setMove` with `wait-for-turn` as the argument. This effectively locks the user’s controls so they can no longer perform any actions while their opponent hasn’t made their move yet:\n\n``` javascript\n    this.opponents_channel = pusher.subscribe(`private-user-${username}`);\n    this.opponents_channel.bind(\"pusher:subscription_error\", status =\u003e {\n      Alert.alert(\n        \"Error\",\n        \"Subscription error occurred. Please restart the app\"\n      );\n    });\n    \n    this.opponents_channel.bind(\"pusher:subscription_succeeded\", data =\u003e {\n      const first_turn = navigation.getParam(\"first_turn\");\n    \n      if (first_turn != \"you\") {\n        setMessage(\"Please wait for you turn...\"); // set message to display in place of the controls UI\n        setMove(\"wait-for-turn\");\n      }\n    });\n    \n    // next: listen for the event when the opponent informs the user that they switched Pokemon\n```\n\nNext, listen for the event when the opponent informs the user that they switched Pokemon. This event includes the `team_member_id` of the opponent Pokemon as its data. We use that ID to get the Pokemon data object from the `sorted_opponent_team` from earlier. From there, we just set the message to inform the user which Pokemon their opponent used, and then change the current opponent Pokemon by calling the `setOpponentPokemon` function. As setting a message automatically locks the UI, we need to call the `setMove` function after 1.5 seconds so the user can also make their move:\n\n``` javascript\n    let my_channel = navigation.getParam(\"my_channel\");\n    \n    my_channel.bind(\"client-switched-pokemon\", ({ team_member_id }) =\u003e {\n      let pokemon = sorted_opponent_team.find(item =\u003e {\n        return item.team_member_id == team_member_id;\n      });\n    \n      setMessage(`Opponent changed Pokemon to ${pokemon.label}`);\n      setOpponentPokemon(pokemon);\n    \n      setTimeout(() =\u003e {\n        setMove(\"select-move\");\n      }, 1500);\n    });\n    \n    // next: listen for event when the user's Pokemon is attacked\n```\n\nNext, listen for the event when the user's Pokemon is attacked. This event includes the updated `health`, `team_member_id` of the Pokemon, and the `message` to display. We use those data to update the UI. If the Pokemon’s health goes below 1, we get the data of that Pokemon and set its health to zero and remove it from the team. This is because, most likely, the health will become a negative value, which will make the health bar all red. Setting it to zero will make it white instead:\n\n``` javascript\n    my_channel.bind(\"client-pokemon-attacked\", data =\u003e {\n      setMessage(data.message);\n    \n      // update the UI with the new health and allow user to make a move after 1.5 seconds\n      setTimeout(() =\u003e {\n        setPokemonHealth(data.team_member_id, data.health);\n        setMove(\"select-move\");\n      }, 1500); \n    \n      if (data.health \u003c 1) { // if the Pokemon faints\n        let fainted_pokemon = team.find(item =\u003e {\n          return item.team_member_id == data.team_member_id;\n        });\n    \n        setTimeout(() =\u003e {\n          setPokemonHealth(data.team_member_id, 0); \n    \n          setMessage(`${fainted_pokemon.label} fainted`);\n          removePokemonFromTeam(data.team_member_id);\n    \n        }, 1000);\n        \n        // let the user select the Pokemon to switch to\n        setTimeout(() =\u003e {\n          setMove(\"select-pokemon\");\n        }, 2000);\n      }\n    });\n```\n\nNext, update the `render` method so it displays the current `message` value. Also, add the conditions to selectively display the `move_display_text`, we don’t really need to display it if `message` is not empty. The `PokemonList` and `MovesList` also shouldn’t be displayed until the `opponents_channel` is initialized because we’re passing it to those components. Note that the `…` indicates that the same props are used, so you simply have to copy the new props. In this case, the only new props are the `opponents_channel` for the `PokemonList` and `MovesList` components:\n\n``` javascript\n    render() {\n      const {\n        team,\n        move,\n        move_display_text,\n        pokemon,\n        opponent_pokemon,\n        backToMove,\n        message // add this\n      } = this.props;\n    \n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cCustomText styles={[styles.headerText]}\u003eFight!\u003c/CustomText\u003e\n    \n          \u003cView style={styles.battleGround}\u003e\n            {opponent_pokemon \u0026\u0026 (\n              \u003cView style={styles.opponent}\u003e\n                \u003cHealthBar ... /\u003e\n                \u003cPokemonFullSprite ... /\u003e\n              \u003c/View\u003e\n            )}\n    \n            {pokemon \u0026\u0026 (\n              \u003cView style={styles.currentPlayer}\u003e\n                \u003cHealthBar ... /\u003e\n                \u003cPokemonFullSprite ... /\u003e\n              \u003c/View\u003e\n            )}\n          \u003c/View\u003e\n    \n          \u003cView style={styles.controls}\u003e\n            \u003cView style={styles.controlsHeader}\u003e\n              {(move == \"select-pokemon\" || move == \"select-pokemon-move\") \u0026\u0026 (\n                \u003cTouchableOpacity\n                  style={styles.backButton}\n                  onPress={() =\u003e {\n                    backToMove();\n                  }}\n                \u003e\n                  \u003cIonicons name=\"md-arrow-round-back\" size={20} color=\"#333\" /\u003e\n                \u003c/TouchableOpacity\u003e\n              )}\n    \n              {move != \"wait-for-turn\" \u0026\u0026 (\n                \u003cCustomText styles={styles.controlsHeaderText}\u003e\n                  {move_display_text}\n                \u003c/CustomText\u003e\n              )}\n    \n              {move == \"wait-for-turn\" \u0026\u0026 (\n                \u003cCustomText styles={styles.message}\u003e{message}\u003c/CustomText\u003e\n              )}\n            \u003c/View\u003e\n    \n            {move == \"select-move\" \u0026\u0026 \u003cActionList /\u003e}\n    \n            {move == \"select-pokemon\" \u0026\u0026\n              this.opponents_channel \u0026\u0026 (\n                \u003cPokemonList\n                  ...\n                  opponents_channel={this.opponents_channel}\n                /\u003e\n              )}\n    \n            {pokemon \u0026\u0026\n              this.opponents_channel \u0026\u0026\n              move == \"select-pokemon-move\" \u0026\u0026 (\n                \u003cMovesList\n                  ...\n                  opponents_channel={this.opponents_channel}\n                /\u003e\n              )}\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\n### Update the PokemonList component\n\nNext, we need to make the `opponents_channel` props available to the `PokemonOption` component. Note that we could have used the [React Context API](https://reactjs.org/docs/context.html) or Redux for this. But to simplify things, we’re just going to “drill it down” to the component which actually needs it:\n\n``` javascript\n    // src/components/PokemonList/PokemonList.js\n    \n    const PokemonList = ({\n      // existing code here..\n     \n      opponents_channel // add this\n    }) =\u003e {\n      // existing code here..\n    });\n```\n\nLook for the return statement, and pass the value of `opponents_channel` to `PokemonOption`:\n\n``` javascript\n    \u003cPokemonOption\n      // existing code here..\n      opponents_channel={opponents_channel} // add this\n    /\u003e\n```\n\n### Update the PokemonOption component\n\nIf you still remember, the `PokemonOption` component is used for two things: for selecting Pokemon to be included in the team, and for selecting a Pokemon to switch to. The updates that we’re going to do is only for the latter, so the code in the condition for selecting a Pokemon for a team should stay intact.\n\nStart by importing the actions that we need:\n\n``` javascript\n    // src/components/PokemonOption/PokemonOption.js\n    import { selectPokemon, setPokemon, setMove, setMessage } from \"../../actions\";\n```\n\nNext, update the `mapDispatchToProps` function to expose the functions for dispatching the `setMessage` and `setMove` actions to the component:\n\n``` javascript\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        // existing code here..\n        \n        // add these:\n        setMessage: message =\u003e {\n          dispatch(setMessage(message));\n        },\n        setMove: move =\u003e {\n          dispatch(setMove(move));\n        }\n      };\n    };\n```\n\nScroll to the top, and extract the functions you just exposed. Don’t forget to include the `opponents_channel` as well:\n\n``` javascript\n    const PokemonOption = ({\n      // existing code here..\n     \n      // add these:\n      setMessage,\n      setMove,\n      opponents_channel\n    }) =\u003e {\n      // existing code here..\n    });\n```\n\nNext, update the `switch-pokemon` condition so it updates the message displayed in the controls section, and sets the user’s current Pokemon to the selected one. After that, inform the opponent by triggering the `client-switched-pokemon` event on their channel. As you’ve seen earlier, this would allow the opponent to make a move. Thus, we need to set the user to wait for their turn:\n\n``` javascript\n    if (action_type == \"select-pokemon\") {\n      // existing code here..\n    } else if (action_type == \"switch-pokemon\") {\n      // replace existing code with these:\n      \n      setMessage(`You used ${pokemon_data.label}`);\n      setPokemon(pokemon_data);\n    \n      opponents_channel.trigger(\"client-switched-pokemon\", {\n        team_member_id: pokemon_data.team_member_id // the ID of the Pokemon the user switched to\n      });\n    \n      setTimeout(() =\u003e {\n        setMessage(\"Please wait for your turn...\");\n        setMove(\"wait-for-turn\");\n      }, 2000);\n    }\n```\n\n### Update the MovesList component\n\nThe final thing we need to implement before we move on to the server component is the updating of the opponent Pokemon’s health.\n\nStart by importing the `setMessage` action:\n\n``` javascript\n    // src/components/MovesList/MovesList.js\n    \n    import {\n      // existing code here..\n     \n      setMessage // add this\n    } from \"../../actions\";\n```\n\nNext, update the `mapStateToProps` function to include the data on the user’s current Pokemon. This allows us to inform the opponent on which of their opponent’s Pokemon has made the move:\n\n``` javascript\n    const mapStateToProps = ({ battle }) =\u003e {\n      const { opponent_pokemon, pokemon } = battle;\n    \n      return {\n        opponent_pokemon,\n        pokemon // add this\n      };\n    };\n```\n\nNext, update `mapDispatchToProps` to expose functions for dispatching the `setMove` and `setMessage` actions:\n\n``` javascript\n    const mapDispatchToProps = dispatch =\u003e {\n      // existing code here..\n      \n      // add these:\n      backToMove: () =\u003e {\n        dispatch(setMove(\"select-move\"));\n      },\n      setMessage: message =\u003e {\n        dispatch(setMessage(message));\n      }\n    }\n```\n\nNext, extract the new data and functions we’ve mapped to this component’s props:\n\n``` javascript\n    const MovesList = ({\n      // existing code here..\n    \n      // add these:\n      pokemon,\n      opponents_channel,\n      backToMove,\n      setMessage\n    }) =\u003e {\n      // existing code here..\n    })\n```\n\nLastly, update the `onPress` function to construct the message to be displayed on the user’s controls UI. This includes the name of the Pokemon, the name of the move, and its effectiveness. After that, inform the opponent that their Pokemon was attacked:\n\n``` javascript\n    let { effectiveness, damage } = getMoveEffectivenessAndDamage(\n      item,\n      opponent_pokemon\n    ); // extract effectiveness\n    \n    let health = opponent_pokemon.current_hp - damage; \n    \n    // add these:\n    let message = `${pokemon.label} used ${\n      item.title\n    }! ${effectiveness}`;\n    \n    setMessage(message);\n    \n    // inform the opponent that their Pokemon was attacked\n    opponents_channel.trigger(\"client-pokemon-attacked\", {\n      team_member_id: opponent_pokemon.team_member_id,\n      message: message, // so the opponent sees the same message displayed on this user's screen\n      health: health\n    });\n    \n    setOpponentPokemonHealth(opponent_pokemon.team_member_id, health);\n    \n    if (health \u003c 1) {\n      setOpponentPokemonHealth(opponent_pokemon.team_member_id, 0); // set health to zero so health bar is not all red\n      removePokemonFromOpponentTeam(opponent_pokemon.team_member_id);\n    }\n    \n    setTimeout(() =\u003e {\n      setMessage(\"Please wait for your turn...\");\n      setMove(\"wait-for-turn\");\n    }, 1500);\n```\n\n## Add the server code\n\nAt this point, we’re ready to add the server code. Create a `server` folder inside the root of your project directory, navigate inside it, and execute `npm init`. Just answer the questions by entering a blank value. \n\nNext, open the generated `package.json` file and change the value of `name` to `RNPokeBattle-server`. \n\nAfter that, install all the packages we need:\n\n```\n    npm install body-parser dotenv express pusher\n```\n\nNext, create a `server.js` file and add the following. This includes the packages we just installed and initializes them:\n\n``` javascript\n    var express = require(\"express\"); // for setting up a server\n    var bodyParser = require(\"body-parser\");\n    var Pusher = require(\"pusher\"); // for connecting to Pusher\n    \n    var app = express(); \n    app.use(bodyParser.json()); // parse request body to JSON format\n    app.use(bodyParser.urlencoded({ extended: false })); // allow parsing of URL encoded request body\n    \n    require(\"dotenv\").config(); // load environment variables from .env file\n```\n\nNext, initialize the variable where we’ll store the users’ data, and initialize Pusher:\n\n``` javascript\n    var users = [];\n    \n    var pusher = new Pusher({\n      appId: process.env.APP_ID,\n      key: process.env.APP_KEY,\n      secret: process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER\n    });\n```\n\nAdd a route for testing if the server is working. Don’t forget to access this route later on your browser once we run the server:\n\n``` javascript\n    app.get(\"/\", function(req, res) {\n      // for testing if the server is running\n      res.send(\"all green...\");\n    });\n```\n\nNext, add the route for handling authentication requests (this is the endpoint that we’re accessing in the `src/screens/TeamSelectionScreen.js` earlier). Here, we get the user’s index based on the `username` in the request body. Only if the username doesn’t already exist do we process the request further. Once there are two users in the `users` array, we trigger the `opponent-found` event on both users. The event contains the `pokemon_ids` and `team_member_ids` for both users. That’s what we were making use of in the code for the battle screen earlier:\n\n``` javascript\n    app.post(\"/pusher/auth\", function(req, res) {\n      var username = req.body.username;\n      var pokemon_ids = req.body.pokemon_ids;\n      var team_member_ids = req.body.team_member_ids;\n    \n      let user_index = users.findIndex(item =\u003e {\n        return item.username == username;\n      });\n    \n      if (user_index === -1) {\n        users.push({\n          username: username,\n          pokemon_ids: pokemon_ids,\n          team_member_ids: team_member_ids\n        });\n    \n        if (users.length == 2) {\n          var player_one_index = 0;\n          var player_one = users.splice(player_one_index, 1)[0];\n    \n          var player_two_index = 0; // because there will only be one item left in the users array after the splice\n          var player_two = users.splice(player_two_index, 1)[0];\n    \n          // trigger a message to each players. the message contains the IDs of the Pokemon of their opponent\n          pusher.trigger(\"private-user-\" + player_one.username, \"opponent-found\", {\n            player_one: player_one,\n            player_two: player_two\n          });\n    \n          setTimeout(() =\u003e {\n            pusher.trigger(\n              \"private-user-\" + player_two.username,\n              \"opponent-found\",\n              {\n                player_one: player_one,\n                player_two: player_two\n              }\n            );\n          }, 3000);     \n        }\n        \n        // authenticate the user\n        var socketId = req.body.socket_id;\n        var channel = req.body.channel_name;\n        var auth = pusher.authenticate(socketId, channel);\n    \n        res.send(auth); // send a response back\n      } else {\n        res.status(400);\n      }\n    });\n```\n\nYou might be wondering why there’s a three-second delay for triggering the `opponent-found` event for the second user. This is because they joined last. This delay ensures that they’re already subscribed to all the relevant channels before the event is fired.\n\nNext, make the server listen to the `port` included in the `.env` file:\n\n``` javascript\n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\nDon’t forget to create the `.env` file and put your Pusher credentials:\n\n```\n    APP_ID=YOUR_PUSHER_APP_ID\n    APP_KEY=YOUR_PUSHER_APP_KEY\n    APP_SECRET=YOUR_PUSHER_APP_SECRET\n    APP_CLUSTER=YOUR_PUSHER_APP_CLUSTER\n    PORT=3000\n```\n\n## Running the app\n\nOnce that’s done, we’re now ready to run the server and the app. Go back to the root directory of the app, start it, and run the server:\n\n```\n    cd ..\n    expo start\n    node server/server.js\n```\n\nNext, navigate to the folder where you downloaded the ngrok executable file and run it:\n\n```\n    ./ngrok http 3000\n```\n\nCopy the resulting https URL to your `src/screens/TeamSelectionScreen.js` file by replacing the placeholder value for the ngrok URL.\n\n\n## Conclusion\n\nIn this tutorial, we learned how to use Pusher Channels to implement the two-player Pokemon battle in React Native. We’ve specifically used it to pair players, and sync the attacks made by their Pokemon to their opponents Pokemon. \n\nStay tuned for the last part where we turn this app into a proper game by adding animations and sounds.\n\nYou can find the code for this app on its [GitHub repo](https://github.com/anchetaWern/RNPokebattle). The code added to this specific part of the series is on the `two-player` branch.","metaTitle":"Create a Pokemon battle game with React Native - Part 2","metaDescription":"In this three part series, use React Native and Node.js to create a two-player Pokemon-like game. In part two, implement multi-player mode, allowing two players to fight in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"42CAPFNPAcOKwEqcEqCMKg","type":"Entry","createdAt":"2018-11-28T20:27:47.217Z","updatedAt":"2018-11-28T20:27:47.217Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a Pokemon battle game with React Native - Part 1: Practice mode","url":"pokemon-react-native-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNPokeBattle","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4IiTE4WzzyQkoeAoaOqgcu","type":"Entry","createdAt":"2018-02-12T15:10:28.101Z","updatedAt":"2018-02-26T12:31:12.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Multiplayer Game","url":"multiplayer-game","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-11-28","description":"In this three part series, use React Native and Node.js to create a two-player Pokemon-like game. In part one, implement a practice mode, allowing users to play against a random computer-generated team.","prerequisite":"You will need Node 8+, Expo and Yarn installed on your machine.","content":"In this tutorial, we’ll be building a Pokemon battle game with React Native and Pusher.\n\nThese are the topics that will be covered in this series:\n\n- Part one: Practice mode\n\nIn this part, we’ll be implementing the game’s practice mode. This is where we’ll be implementing the team selection and battle screen (login screen is already pre-coded in the starter project). First, the user logs in and selects six Pokemon that they want to use for the battle. Once the user has confirmed their team, an opponent Pokemon team will be randomly generated. The user gets to battle each Pokemon in the opponent team, but they won’t fight back. \n\n- Part two: Two-player mode\n\nIn part two, we’ll be implementing the two-player mode. This is where we will use Pusher channels, and a Node server to match users who are currently looking for an opponent. Additionally, we’ll also be showing messages to inform both users on the actual attack that was used and its effectiveness (for example, Pikachu used Thunderbolt! It’s super effective).\n\n- Part three: Animations and sounds\n\nIn part three, we’ll be adding animations and sounds to make the game more interactive and fun to play with. Specifically, we’ll animate the health bar when a Pokemon is attacked, animate a couple of attacks (for example, Fire Punch or Ice Punch), and animate when the user switches to a new Pokemon or their current one faints. As for the sounds, we’ll add background music in each of the screens, and play the specific Pokemon cry as they get switched to or when they faint.\n\n\n## Prerequisites\n\nBasic knowledge of React Native, React Navigation, Redux, and ES6 syntax is required. \n\nWe’ll be using the following package versions:\n\n\n- Node 8.3.0\n- Yarn 1.7.0\n- Expo CLI 2.2.0\n- Expo SDK 30.0.0\n- Pusher 4.3.1\n\nIt’s always recommended to use the most recent versions available to you, but those versions are there as a reference in case there’s a major change with those packages which causes the code used in this series to not work.\n\nWe’ll be using [Expo](https://expo.io/) in order to easily test the app on multiple devices. [Install Expo](https://expo.io/learn) on your computer, then download the Expo client app for your [iOS](https://itunes.apple.com/us/app/expo-client/id982107779?mt=8) or [Android](https://play.google.com/store/apps/details?id=host.exp.exponent\u0026hl=en) device.\n\n\n## App overview\n\nIf you’re not familiar with how Pokemon battles are done, there are usually two Pokemon trainers, each has six Pokemon in hand. Each trainer will select one Pokemon to battle the other trainer’s Pokemon. The goal is to make the other Pokemon lose all of its health points (HP) by using different moves (for example, Thunderbolt or Hydro Pump). Once the Pokemon loses all of its HP, they cannot be used again. \n\nThe trainer can also switch out their Pokemon. This is usually done to take advantage of type-effectiveness (for example, fire type Pokemon is effective on grass types, but is weak against water types). \n\nIn the middle of the battle, the trainer can also bring back the lost HP of their Pokemon by using healing items (for example, potion). There are also items for healing status conditions (for example, sleep or paralysis). These status conditions are invoked by using specific moves like Sleep Powder or Thunder Wave.\n\nThe first trainer who loses all of their Pokemon loses the game, while the trainer who still has Pokemon wins. \n\nFor this app, we’re going to simplify things a bit by omitting the following features:\n\n- Status conditions - no conditions such as frozen, burned, and poisoned.\n- Item usage - no items such as full heal, max potion, berries.\n\nNow that you’re familiar with the game mechanics, it’s time for a quick overview of the final output for the whole series:\n\n1. When the user opens the app, they first have to enter a username: \n\n![rn-pokemon-1-1](//images.ctfassets.net/1es3ne0caaid/4KX8UDT4N2iWqUqcwMYWSy/a587870109055dafa132651791ffd2be/rn-pokemon-1-1.png)\n\n2. Next, they will need to select their team, which composed of six Pokemon. Once they have selected all six, a button for confirming their selection will show up:\n\n![rn-pokemon-1-2](//images.ctfassets.net/1es3ne0caaid/6uOYPOHJPGaOwKMQQeceMO/d560d1857418cbc80d215d4cce8d3897/rn-pokemon-1-2.png)\n\n3. Next, the app will look for an opponent:\n\n![rn-pokemon-1-3](//images.ctfassets.net/1es3ne0caaid/G1eEr1C2WGmKicccQkgI/32bf02419a6c5444456d813a52f12753/rn-pokemon-1-3.png)\n\n4. Once an opponent is found, it will show the battle screen. The first turn will go to the user who confirmed their team first.\n\n5. From the battle screen, the first Pokemon picked by the user is pre-selected to battle the opponent’s first Pokemon:\n\n![rn-pokemon-1-4](//images.ctfassets.net/1es3ne0caaid/2Lk7qxVIbey4GUWAOk406w/4c204ca8645e7ff482f69db88f8d8eb0/rn-pokemon-1-4.png)\n\n6. The user can either pick another Pokemon from their team or use one of the four moves by their current Pokemon:\n\n![rn-pokemon-1-5](//images.ctfassets.net/1es3ne0caaid/3WBPC7kod2IaMAOoqKEOGa/95f495baf2c5be89ec4d05b1a2d598a0/rn-pokemon-1-5.png)\n\n7. Once a move is chosen (either attack or switch), the user can no longer make another move until their opponent has made their move. Each user just takes their turns until such time that someone has defeated the whole team of their opponent.\n\nHere’s a gif of the battle screen:\n\n![rn-pokemon-1-6](//images.ctfassets.net/1es3ne0caaid/5Ims6nO5sQi0o0SQIym04I/c72134444dcaf78369477dba9e29fac2/rn-pokemon-1-6.gif)\n\nIn this part, we won’t be implementing all the features yet. As mentioned in the introduction earlier, the first part will be the practice mode. This is where the user only gets to play the game by themselves. \n\n\n## Clone the starter project\n\nThe app that we’re building is pretty huge, that’s why I created a starter project which contains the Pokemon data, UI components, helper functions, and the bare-bones version of each screen. This way, we don’t have to code everything from scratch and we can focus on the more important parts of the app.\n\nGo ahead and clone the repo, switch to the `starter` branch, and install all the packages we need for this part:\n\n```\n    git clone http://github.com/anchetaWern/RNPokeBattle\n    cd RNPokeBattle\n    git checkout starter\n    yarn install\n```\n\n## Overview of the starter project\n\nBefore we proceed with writing some code, let’s first do a quick tour of the code we have on the `starter` branch.\n\n### data\n\nThe `src/data` folder contains the pokemon (`src/data/pokemon_data.js`) and moves data (`src/data/moves_data`). Open those files so you have an idea of what the data structure looks like. The `moves` array in each of the Pokemon object in the `src/data/pokemon_data.js` file contains the ID’s of the moves in the `src/data/moves_data.js` file. The app will pick four random ID’s from the `moves` array and get its details from the `src/data/moves_data.js` file.\n\n### assets\n\nThe `assets` folder contains app assets such as images, fonts, and later on, the sound files. We’re using three different images for each Pokemon: sprite, front animated, and back animated. I got the sprites from [pokemondb.net](https://pokemondb.net/sprites), while the front and back gifs are from [pokestadium.com](http://www.pokestadium.com/tools/sprites). \n\nFor the custom font, we’re using [Aldrich from Google Fonts](https://fonts.google.com/specimen/Aldrich).\n\n### components\n\nThe `src/components` folder contains all the UI components used in the app:\n\n- `ActionList` - for showing the actions that the user can do. In this case, there are only two: attack and switch.\n- `HealthBar` - for showing the current health of each Pokemon.\n- `MovesList` - for showing the list of Pokemon moves.\n- `PokemonFullSprite` - for showing the back and front animated gifs of each Pokemon.\n- `PokemonList` - for showing a list of Pokemon for the team selection and battle screen.\n- `PokemonOption` - for showing the individual clickable Pokemon in the `PokemonList`.\n- `CustomText` - allows us to use the custom font.\n\nNote that the UI for these components are already written, but we still need to turn a few of them into “connected components” so they can dispatch actions and have access to the app’s global store.\n\n### helpers\n\nThe `src/helpers` folder contains the following helper functions:\n\n- `getMoveEffectivenessAndDamage.js` - for calculating damage made to a Pokemon based on a specific attack and the attacked Pokemon’s type defenses. \n- `randomInt.js` - for generating a random integer between a specific range.\n- `shuffleArray.js` - for sorting arrays in random order. It’s used for sorting the moves data randomly so that random moves can be picked for each Pokemon.\n- `uniqid.js` - for generating a unique ID for each member of your Pokemon team. \n\n### screens\n\nThe `src/screens` folder contains all the screens of the app. Only a placeholder content and the screen’s final styles are pre-written in the starter project. The Login screen is already completed because all it does is pass the username to the team selection screen as a navigation prop. Navigation code is also set up for all the screens, so all you have to do is navigate between the screens.\n\nLastly, to make it easier to debug the app, the initialization code for [Reactotron](https://github.com/infinitered/reactotron) is also pre-written. All you have to do is update the value for the `host` with the internal IP address assigned by your router to your computer. This way, Reactotron can find your Expo app. You can find that code in the `Root.js` file.\n\n\n## Build the app\n\nNow that you know which part of the app is already pre-written, we’re ready to implement the functionality for each screen.\n\n### Team selection screen actions\n\nCreate a `src/actions/types.js` file. This is where we will add all the action types that can be performed in the app. First, let’s add the actions that can be performed in the team selection screen:\n\n``` javascript\n    export const SELECT_POKEMON = \"select_pokemon\"; // for marking Pokemon as selected\n    \n    export const SET_POKEMON = \"set_pokemon\"; // for setting a specific Pokemon as the current Pokemon used for battle\n    export const SET_TEAM = \"set_team\"; // for setting a Pokemon team\n```\n\nNext, create a `src/actions/index.js` file, this is where we will add all the action creators for the whole app. Start by adding the functions that will be dispatched when selecting a Pokemon in the team selection screen, and setting the user’s current Pokemon and Pokemon team:\n\n``` javascript\n    import {\n      SELECT_POKEMON,\n      SET_POKEMON,\n      SET_TEAM\n    } from \"./types\";\n    \n    export const selectPokemon = (id, pokemon_data, is_selected) =\u003e { // accepts the Pokemon ID, Pokemon object, and a boolean representing whether it's selected or not\n      return {\n        type: SELECT_POKEMON,\n        id,\n        pokemon_data,\n        is_selected\n      };\n    };\n    \n    export const setPokemon = pokemon =\u003e { // accepts a single Pokemon object\n      return {\n        type: SET_POKEMON,\n        pokemon\n      };\n    };\n    \n    export const setTeam = team =\u003e { // accepts an array of Pokemon object data (same as the ones you find in src/data/pokemon_data.js)\n      return {\n        type: SET_TEAM,\n        team\n      };\n    };\n```\n\n### Team selection screen reducer\n\nCreate a `src/reducers/TeamReducer.js` file. This reducer is responsible for specifying how the store will change when the action for selecting a Pokemon is dispatched. Specifically, it describes how the `selected_pokemon` array changes when it receives the `SELECT_POKEMON` action. It only processes the request further if less than six Pokemon are currently selected. From there, it pushes the selected Pokemon into the `selected_pokemon` array, and removes it if it’s deselected (when `action.is_selected` is `false`):\n\n``` javascript\n    import { SELECT_POKEMON } from \"../actions/types\";\n    \n    import pokemon_data from \"../data/pokemon_data\";\n    \n    const INITIAL_STATE = {\n      pokemon: pokemon_data,\n      selected_pokemon: [] // stores the currently selected Pokemon\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      switch (action.type) {\n        case SELECT_POKEMON:\n          let pokemon = [...state.pokemon];\n          let selected_pokemon = [...state.selected_pokemon];\n    \n          const is_selected = action.is_selected;\n    \n          if (state.selected_pokemon.length \u003c 6 || is_selected) { // there should only be six selected Pokemon\n            pokemon = pokemon.map(item =\u003e {\n              if (item.id == action.id) { // only modify the Pokemon specified in the action\n                item.is_selected = !is_selected; // flip the current is_selected value \n              }\n              return item;\n            });\n    \n            if (is_selected) {\n              const index_to_remove = selected_pokemon.findIndex(\n                item =\u003e item.id == action.id\n              );\n              selected_pokemon.splice(index_to_remove, 1);\n            } else {\n              selected_pokemon.push(action.pokemon_data);\n            }\n          }\n    \n          return { ...state, pokemon, selected_pokemon };\n    \n        default:\n          return state;\n      }\n    };\n```\n\nAs you noticed in the code above, we’re only processing the `SELECT_POKEMON` action type. This is because `SET_POKEMON` and `SET_TEAM` will be processed in the reducer for the battle screen related actions which we’ll add it shortly. We only added them in the action types and action creators file because they’re needed in the team selection screen.\n\n### Battle screen reducers for Team selection screen\n\nCreate a `src/reducers/BattleReducer.js` file, and add the reducers responsible for setting the user’s Pokemon team and current Pokemon:\n\n``` javascript\n    import {\n      SET_TEAM,\n      SET_POKEMON\n    } from \"../actions/types\";\n    \n    const INITIAL_STATE = {\n      team: [], // the user's Pokemon team\n      pokemon: null // currently selected pokemon by user (the one being shown in the UI)\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      switch (action.type) {\n        case SET_TEAM:\n          const { team } = action;\n          return { ...state, team };\n    \n        case SET_POKEMON:\n          const pokemon = action.pokemon;\n          return { ...state, pokemon };\n    \n        default:\n          return state;\n      }\n    };\n```\n\n### Bringing all the reducers together\n\nCreate a `src/reducers/index.js` file, and combine the two reducer files we created earlier. This allows us to import only this file when we need to include all the reducers that we need:\n\n``` javascript\n    import { combineReducers } from \"redux\";\n    import TeamReducer from \"./TeamReducer\";\n    import BattleReducer from \"./BattleReducer\";\n    \n    export default combineReducers({\n      team_selection: TeamReducer,\n      battle: BattleReducer\n    });\n```\n\n### Add the store to the app\n\nAt this point, we’re now ready to add the global app store:\n\n``` javascript\n    // Root.js\n    import { Provider } from \"react-redux\";\n    import { compose, createStore } from \"redux\";\n    import reducers from \"./src/reducers\";\n```\n\nTo make debugging the store easier, you may also add Reactotron Redux to your existing Reactotron configuration:\n\n``` javascript\n    import { reactotronRedux } from \"reactotron-redux\";\n    Reactotron.configure({ host: \"IP_ADDRESS_ASSIGNED_BY_YOUR_ROUTER\" })\n      .useReactNative()\n      .use(reactotronRedux()) // add this\n      .connect();\n```\n\nDon’t forget to add Reactotron Redux as your dev dependency:\n\n```\n    yarn add --dev reactotron-redux\n```\n\nLastly, update the `render` function so it wraps everything in the `Provider` component which uses the store:\n\n``` javascript\n    // Root.js\n    render() {\n      return (\n        \u003cProvider store={store}\u003e\n          \u003cRootStack /\u003e\n        \u003c/Provider\u003e\n      );\n    }\n```\n\n### Team selection screen\n\nThe team selection screen is where the user gets to pick the Pokemon they want to use to battle their opponent. Start by importing the action creators for setting the team and current Pokemon:\n\n``` javascript\n    // src/screens/TeamSelectionScreen.js\n    import { connect } from \"react-redux\";\n    \n    import { setTeam, setPokemon } from \"../actions\";\n    import moves_data from \"../data/moves_data\";\n```\n\nNext, scroll down to the part where the component is exported and add the function for mapping specific values in the store as props for this component. In this case, we only need values from the team reducer (`src/reducers/TeamReducer.js`). We gave it a name of `team_selection` in the `src/reducers/index.js` file, so that’s what we’re extracting:\n\n``` javascript\n    const mapStateToProps = ({ team_selection }) =\u003e {\n      const { pokemon, selected_pokemon } = team_selection;\n      \n      // return pokemon and selected_pokemon as props for this component\n      return {\n        pokemon, // all the Pokemon available for selection (a copy of src/data/pokemon_data.js)\n        selected_pokemon // array of selected Pokemon\n      };\n    };\n    \n    // next: add mapDispatchToProps\n```\n\nSince we want to set the team and current Pokemon from this screen, we create the function that allows us to dispatch the `setTeam` and `setPokemon` actions. This allows us to update the store with a new `team` and `pokemon` data by executing the similarly named `setTeam` and `setPokemon` functions returned from this function. Note that you don’t need to use the same name we used for the action creators. If it makes sense to use a different name, then do it (for example, if you get confused whether a specific function is referring to the function returned from `mapDispatchToProps` or the action creator itself):\n\n``` javascript\n    const mapDispatchToProps = dispatch =\u003e {\n      // for updating the value of team and pokemon in src/reducers/BattleReducer.js\n      return {\n        setTeam: team =\u003e {\n          dispatch(setTeam(team));\n        },\n        setPokemon: pokemon =\u003e {\n          dispatch(setPokemon(pokemon));\n        }\n      };\n    };\n    \n    // next: convert component into a connected one\n```\n\nNext, convert the component into a connected component. This gives us access to the specific values we returned earlier on `mapStateToProps` as props, and call the functions we returned in `mapDispatchToProps` earlier:\n\n``` javascript\n    export default connect(\n      mapStateToProps,\n      mapDispatchToProps\n    )(TeamSelectionScreen);\n```\n\nAt this point, we’re now ready to update the `render` method of the team selection screen. By default, we only display the `PokemonList`. As mentioned in the **overview of the starter project** section earlier, the `PokemonList` function is responsible for rendering a list of Pokemon. All you have to do is supply an array of Pokemon data to its `data` prop. The `pokemon` data is available in the store and it’s made available as a prop via the `mapStateToProps` function. The same is true of the `selected_pokemon`. We’re using it to determine whether to show the button to confirm the team. Once the user clicks on it, the `ActivityIndicator` will be shown to indicate that the app is looking for an opponent:\n\n``` javascript\n    render() {\n      const { selected_pokemon } = this.props;\n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cCustomText styles={[styles.headerText]}\u003eSelect your team\u003c/CustomText\u003e\n    \n          {selected_pokemon.length == 6 \u0026\u0026 (\n            \u003cView\u003e\n              {this.state.is_loading \u0026\u0026 (\n                \u003cView style={styles.loadingContainer}\u003e\n                  \u003cActivityIndicator size=\"large\" color=\"#ffbf5a\" /\u003e\n                  \u003cCustomText styles={styles.messageText}\u003e\n                    Waiting for opponent..\n                  \u003c/CustomText\u003e\n                \u003c/View\u003e\n              )}\n    \n              {!this.state.is_loading \u0026\u0026 (\n                \u003cTouchableOpacity\n                  style={styles.confirmButton}\n                  onPress={this.confirmTeam}\n                \u003e\n                  \u003cCustomText\u003eConfirm Selection\u003c/CustomText\u003e\n                \u003c/TouchableOpacity\u003e\n              )}\n            \u003c/View\u003e\n          )}\n          \u003cPokemonList\n            data={this.props.pokemon}\n            numColumns={1}\n            action_type={\"select-pokemon\"}\n          /\u003e\n        \u003c/View\u003e\n      );\n    }\n    \n    // next: add confirmTeam function\n```\n\nNext, add the code for the function that gets executed when the button for confirming the team is clicked. This adds some of the required data for the battle screen. This includes the health points, the unique team member ID, and the random Pokemon moves data for each Pokemon in the team:\n\n``` javascript\n    // src/screens/TeamSelectionScreen.js\n    \n    confirmTeam = () =\u003e {\n      const { selected_pokemon, setTeam, setPokemon, navigation } = this.props;\n    \n      let team = [...selected_pokemon]; // the array which stores the data for the Pokemon team selected by the user\n      \n      team = team.map(item =\u003e {\n        let hp = 500; // the total health points given to each Pokemon\n    \n        let shuffled_moves = shuffleArray(item.moves);\n        let selected_moves = shuffled_moves.slice(0, 4);\n    \n        let moves = moves_data.filter(item =\u003e {\n          return selected_moves.indexOf(item.id) !== -1;\n        });\n    \n        let member_id = uniqid();\n    \n        return {\n          ...item,\n          team_member_id: member_id, // unique ID for identifying each Pokemon in the team\n          current_hp: hp, // current HP. This gets updated when an opponent Pokemon attacks\n          total_hp: hp,\n          moves: moves,\n          is_selected: false // no longer needed\n        };\n      });\n      \n      // update the store with the new team and Pokemon data\n      setTeam(team);\n      setPokemon(team[0]);\n      \n      // next: set is_loading to true in state and navigate to Battle screen\n    };\n```\n\nNext, we want to emulate that the app is actually trying to find an opponent for the user, so we’ll trigger the `ActivityIndicator` to be visible for 2.5 seconds before we navigate to the battle screen:\n\n``` javascript\n    this.setState({\n      is_loading: true // show activity indicator\n    });\n    \n    setTimeout(() =\u003e {\n      const username = navigation.getParam(\"username\");\n    \n      this.setState({\n        is_loading: false\n      });\n    \n      navigation.navigate(\"Battle\", {\n        username: username\n      });\n    }, 2500); // 2.5 seconds\n```\n\nWe will update the above code in part two, so it actually tries to find a real opponent for the user.\n\n### Dispatch the action for selecting a Pokemon\n\nWe haven’t actually added the code that actually selects or deselects a specific Pokemon to be added to the team, so let’s go ahead and add it. If you open the `src/components/PokemonList/PokemonList.js` file, you will see that it uses the `PokemonOption` component to render each of the Pokemon items that you see in the team selection screen. We’re not really passing any functions in there so the actual function should be declared in the `PokemonOption` itself. Start by importing the action for selecting a Pokemon:\n\n``` javascript\n    // src/components/PokemonOption/PokemonOption.js\n    \n    import { connect } from \"react-redux\";\n    \n    import { selectPokemon } from \"../../actions\";\n```\n\nNext, use `mapDispatchToProps` so you can dispatch the action via a `togglePokemon` function which you can call inside the component’s body. This expects the `id` of the Pokemon, an object containing the Pokemon data, and a boolean that indicates whether it’s currently selected or not:\n\n``` javascript\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        togglePokemon: (id, pokemon_data, is_selected) =\u003e {\n          dispatch(selectPokemon(id, pokemon_data, is_selected));\n        }\n      };\n    };\n    \n    export default connect(\n      null,\n      mapDispatchToProps\n    )(PokemonOption);\n```\n\nNext, extract the `togglePokemon` function from the props:\n\n``` javascript\n    const PokemonOption = ({\n       // previously added code here..\n       \n      // add this:\n      togglePokemon\n    }) =\u003e {\n      // existing code here...\n    });\n```\n\nWhen the user clicks on the component, the `action_type` is first determined. This component is used for both team selection and Pokemon selection (in the battle screen later), so we need to determine the context in which it was called. An `action_type` of `select-pokemon` means that it was called from the team selection screen, thus we call the `togglePokemon` function to select or deselect it. The `action_type` prop is passed to the `PokemonList` component and down to the `PokemonOption`:\n\n``` javascript\n    onPress={() =\u003e {\n      if (action_type == \"select-pokemon\") {\n        togglePokemon(id, pokemon_data, is_selected);\n      } \n    }}\n```\n\n### Battle screen actions\n\nNow that we’ve implemented the team selection screen, let’s proceed with adding the code for the battle screen. Start by updating the action types file to include the actions that can be performed in the battle screen:\n\n``` javascript\n    // src/actions/types.js\n    \n    // existing code here...\n    \n    // add these:\n    export const SET_OPPONENT_TEAM = \"set_opponent_team\";\n    \n    export const SET_MOVE = \"set_move\";\n    \n    export const SET_OPPONENT_POKEMON = \"set_opponent_pokemon\";\n    export const SET_OPPONENT_POKEMON_HEALTH = \"set_opponent_pokemon_health\";\n    \n    export const REMOVE_POKEMON_FROM_OPPONENT_TEAM =\n      \"remove_pokemon_from_opponent_team\";\n```\n\nNext, create an action creator for the action types we just added:\n\n``` javascript\n    // src/actions/index.js\n    \n    import {\n      // existing action types here...\n      \n      // add these:\n      SET_OPPONENT_TEAM,\n      SET_MOVE,\n      SET_OPPONENT_POKEMON,\n      SET_OPPONENT_POKEMON_HEALTH,\n      REMOVE_POKEMON_FROM_OPPONENT_TEAM\n    } from \"./types\";\n    \n    // add these after the last function:\n    export const setOpponentTeam = team =\u003e { // accepts an array that contains the Pokemon data of the team selected by the user\n      return {\n        type: SET_OPPONENT_TEAM,\n        team \n      };\n    };\n    \n    export const setMove = move =\u003e { // accepts an object containing the move data (same as what you see in src/data/moves_data.js)\n      return {\n        type: SET_MOVE,\n        move\n      };\n    };\n    \n    export const setOpponentPokemon = pokemon =\u003e { // accepts an object containing the data of the Pokemon selected by the opponent\n      return {\n        type: SET_OPPONENT_POKEMON,\n        pokemon\n      };\n    };\n    \n    export const setOpponentPokemonHealth = (team_member_id, health) =\u003e { // accepts the team_member_id of the opponent's Pokemon, and the new health points to be assigned\n      return {\n        type: SET_OPPONENT_POKEMON_HEALTH,\n        team_member_id,\n        health\n      };\n    };\n    \n    export const removePokemonFromOpponentTeam = team_member_id =\u003e { // accepts the team_member_id of the Pokemon to be removed from the opponent's team\n      return {\n        type: REMOVE_POKEMON_FROM_OPPONENT_TEAM,\n        team_member_id\n      };\n    };\n```\n\n### Battle screen reducers for Battle screen\n\nNext, let’s add the reducers for the Battle screen:\n\n``` javascript\n    // src/reducers/BattleReducer.js\n    \n    import {\n      // existing code here...\n      \n      // add these:\n      SET_OPPONENT_TEAM,\n      SET_MOVE,\n      SET_OPPONENT_POKEMON,\n      SET_OPPONENT_POKEMON_HEALTH,\n      REMOVE_POKEMON_FROM_OPPONENT_TEAM\n    } from \"../actions/types\";\n```\n\nNext, include the additional state that we will manage in this reducer. This includes the user’s current `move`. It controls what the user sees in the bottom part of the screen. By default, it’s set to `select-move`, this allows the user to either attack with their current Pokemon or switch to another one from their team. The user also needs to access the data for their opponent’s team so we have the `opponent_team` and `opponent_pokemon` (the opponent’s current Pokemon) as well:\n\n``` javascript\n    const move_display_text = {\n      \"select-move\": \"Select your move\", // main menu (choose whether to attack or switch)\n      \"select-pokemon\": \"Which Pokemon will you use?\", // choose another Pokemon from team\n      \"select-pokemon-move\": \"Which attack will you use?\" // choose a move by their current Pokemon\n    };\n    \n    const default_move = \"select-move\";\n    \n    const INITIAL_STATE = {\n      // existing code here..\n      \n      // add these:\n      move: default_move,\n      move_display_text: move_display_text[default_move],\n      opponent_team: [],\n      opponent_pokemon: null // currently selected pokemon by opponent \n    };\n```\n\nNext, add the reducers that will process the actions. Add these before the default condition of the switch statement:\n\n``` javascript\n    case SET_OPPONENT_TEAM: // for setting the opponent's team\n      return { ...state, opponent_team: action.team };\n    \n    case SET_MOVE: // for setting the controls currently displayed in the user's screen\n      const { move } = action; \n      return { ...state, move, move_display_text: move_display_text[move] };\n    \n    case SET_OPPONENT_POKEMON: // for setting the opponent's current Pokemon\n      const opponent_pokemon = action.pokemon\n        ? action.pokemon\n        : state.opponent_team[0]; // if the action didn't pass a Pokemon, use the first Pokemon in the opponent's team instead\n      return { ...state, opponent_pokemon };\n    \n    case SET_OPPONENT_POKEMON_HEALTH: // for updating the opponent's current Pokemon's health\n      let opponent_team = [...state.opponent_team];\n      opponent_team = opponent_team.map(item =\u003e {\n        if (item.team_member_id == action.team_member_id) {\n          item.current_hp = action.health;\n        }\n        return item;\n      });\n    \n      return { ...state, opponent_team };\n    \n    case REMOVE_POKEMON_FROM_OPPONENT_TEAM: // for removing a specific Pokemon from opponent's team after it faints (when its HP goes below 1)\n      const diminished_opponent_team = [...state.opponent_team].filter(item =\u003e {\n        return item.team_member_id != action.team_member_id;\n      });\n    \n      return { ...state, opponent_team: diminished_opponent_team };\n```\n\n### Battle screen\n\nThe battle screen is where the user battles a random opponent. As mentioned earlier, we’re only going to generate a random Pokemon team and let the user attack each Pokemon in the opponent team one by one. Start by importing all the necessary packages, data, actions, and helper functions:\n\n``` javascript\n    // src/screens/BattleScreen.js\n    \n    import { connect } from \"react-redux\";\n    import pokemon_data from \"../data/pokemon_data.js\";\n    import moves_data from \"../data/moves_data\";\n    \n    import uniqid from \"../helpers/uniqid\";\n    import randomInt from \"../helpers/randomInt\";\n    import shuffleArray from \"../helpers/shuffleArray\";\n    \n    import { setOpponentTeam, setOpponentPokemon, setMove } from \"../actions\";\n```\n\nNext, scroll down to the part where the component class is exported and add the following code before it. These are the data from the store that we’re going to need:\n\n``` javascript\n    const mapStateToProps = ({ battle }) =\u003e {\n      const {\n        team,\n        move,\n        move_display_text,\n        pokemon,\n        opponent_team,\n        opponent_pokemon\n      } = battle;\n      return {\n        team,\n        move,\n        move_display_text,\n        pokemon,\n        opponent_team,\n        opponent_pokemon\n      };\n    };\n```\n\nNext, add the functions that will dispatch the actions for setting what the user sees in their controls UI, setting the opponent team, and setting the opponent Pokemon:\n\n``` javascript\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        backToMove: () =\u003e {\n          dispatch(setMove(\"select-move\"));\n        },\n        setOpponentTeam: team =\u003e {\n          dispatch(setOpponentTeam(team));\n        },\n        setOpponentPokemon: pokemon =\u003e {\n          dispatch(setOpponentPokemon(pokemon));\n        }\n      };\n    };\n```\n\nDon’t forget to pass those functions when exporting the component:\n\n``` javascript\n    export default connect(\n      mapStateToProps,\n      mapDispatchToProps\n    )(BattleScreen);\n```\n\nOnce the component is mounted, this is where we generate the data for the random team:\n\n``` javascript\n    componentDidMount() {\n    \n      const { setOpponentTeam, setOpponentPokemon } = this.props;\n    \n      let random_pokemon_ids = [];\n      for (let x = 0; x \u003c= 5; x++) {\n        random_pokemon_ids.push(randomInt(1, 54));\n      }\n    \n      let opposing_team = pokemon_data.filter(item =\u003e {\n        return random_pokemon_ids.indexOf(item.id) !== -1;\n      });\n    \n      opposing_team = opposing_team.map(item =\u003e {\n        let hp = 500;\n    \n        let shuffled_moves = shuffleArray(item.moves);\n        let selected_moves = shuffled_moves.slice(0, 4);\n    \n        let moves = moves_data.filter(item =\u003e {\n          return selected_moves.indexOf(item.id) !== -1;\n        });\n    \n        let member_id = uniqid();\n    \n        return {\n          ...item,\n          team_member_id: member_id,\n          current_hp: hp,\n          total_hp: hp,\n          moves: moves,\n          is_selected: false\n        };\n      });\n      \n      // update the store with the opponent team and current opponent Pokemon\n      setOpponentTeam(opposing_team);\n      setOpponentPokemon(opposing_team[0]);\n      \n    }\n```\n\nNext, we render the UI for the battle screen. Start by extracting all the data and functions that we need from the store:\n\n``` javascript\n    render() {\n      const {\n        team,\n        move,\n        move_display_text,\n        pokemon,\n        opponent_pokemon,\n        backToMove\n      } = this.props;\n      \n      // next: add code for returning the Battle screen UI\n    }\n```\n\nNext, return the UI. The battle screen is divided into two sections: battleground and controls:\n\n``` javascript\n    return (\n      \u003cView style={styles.container}\u003e\n        \u003cCustomText styles={[styles.headerText]}\u003eFight!\u003c/CustomText\u003e\n    \n        \u003cView style={styles.battleGround}\u003e\n          // next: render Pokemon and opponent Pokemon UI\n        \u003c/View\u003e\n        \n        \u003cView style={styles.controls}\u003e\n          // next: add battle controls UI\n        \u003c/View\u003e\n      \u003c/View\u003e\n    );\n```\n\nThe battleground section displays both the user’s and their opponent’s current Pokemon, along with their health points. This uses the pre-created `HealthBar` and `PokemonFullSprite` components:\n\n``` javascript\n    {opponent_pokemon \u0026\u0026 (\n      \u003cView style={styles.opponent}\u003e\n        \u003cHealthBar\n          currentHealth={opponent_pokemon.current_hp}\n          totalHealth={opponent_pokemon.total_hp}\n          label={opponent_pokemon.label}\n        /\u003e\n        \u003cPokemonFullSprite\n          pokemon={opponent_pokemon.label}\n          spriteFront={opponent_pokemon.front}\n          spriteBack={opponent_pokemon.back}\n          orientation={\"front\"}\n        /\u003e\n      \u003c/View\u003e\n    )}\n    \n    {pokemon \u0026\u0026 (\n      \u003cView style={styles.currentPlayer}\u003e\n        \u003cHealthBar\n          currentHealth={pokemon.current_hp}\n          totalHealth={pokemon.total_hp}\n          label={pokemon.label}\n        /\u003e\n    \n        \u003cPokemonFullSprite\n          pokemon={pokemon.label}\n          spriteFront={pokemon.front}\n          spriteBack={pokemon.back}\n          orientation={\"back\"}\n        /\u003e\n      \u003c/View\u003e\n    )}\n```\n\nThe controls section displays the options that the user can select to control what their move is going to be (either attack with their current Pokemon or switch to another one from their team). These are the default controls that the user is going to see. As you’ve seen in the battle reducer file earlier, this is controlled by the current value of `move`. By default, it is set to `select-move` which renders the main menu. If the user chose to attack, the value of `move` is updated to `select-pokemon-move`, thus displaying the `MovesList` component. On the other hand, if the user chose to switch Pokemon, the value of `move` is updated to `select-pokemon`, which displays the `PokemonList` component. Lastly, if `move` is either `select-pokemon` or `select-pokemon-move`, a back button is displayed. If the user clicks on it, it calls the `backToMove` function which dispatches an action to update the value of `move` back to `select-move`. This basically brings the user back to the control UI’s main menu:\n\n``` javascript\n    \u003cView style={styles.controlsHeader}\u003e\n      {(move == \"select-pokemon\" || move == \"select-pokemon-move\") \u0026\u0026 (\n        \u003cTouchableOpacity\n          style={styles.backButton}\n          onPress={() =\u003e {\n            backToMove();\n          }}\n        \u003e\n          \u003cIonicons name=\"md-arrow-round-back\" size={20} color=\"#333\" /\u003e\n        \u003c/TouchableOpacity\u003e\n      )}\n    \n      \u003cCustomText styles={styles.controlsHeaderText}\u003e\n        {move_display_text}\n      \u003c/CustomText\u003e\n    \u003c/View\u003e\n    \n    {move == \"select-move\" \u0026\u0026 \u003cActionList /\u003e}\n    \n    {move == \"select-pokemon\" \u0026\u0026 (\n      \u003cPokemonList\n        data={team}\n        scrollEnabled={false}\n        numColumns={2}\n        action_type={\"switch-pokemon\"}\n      /\u003e\n    )}\n    \n    {pokemon \u0026\u0026\n      move == \"select-pokemon-move\" \u0026\u0026 (\n        \u003cMovesList moves={pokemon.moves} /\u003e\n      )}\n```\n\n### Dispatch actions for fighting and switching Pokemon \n\nNext, we need to update the `ActionList` component so it dispatches the relevant actions that will update the controls UI. Start by importing `connect` from `react-redux` and the `setMove` action:\n\n``` javascript\n    // src/components/ActionList/ActionList.js\n    \n    import { connect } from \"react-redux\";\n    import { setMove } from \"../../actions\";\n```\n\nNext, add the `setMove` function so you can dispatch the similarly named action:\n\n``` javascript\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        setMove: move =\u003e {\n          dispatch(setMove(move));\n        }\n      };\n    };\n    \n    export default connect(\n      null,\n      mapDispatchToProps\n    )(ActionList);\n```\n\nLastly, call the `setMove` function on each of the `action` function. Pass the value you want the `move` to be: \n\n``` javascript\n    const data = [\n      {\n        label: \"Fight\",\n        action: () =\u003e { // function to execute when the fight button is clicked\n          setMove(\"select-pokemon-move\"); // add this\n        }\n      },\n      {\n        label: \"Switch\",\n        action: () =\u003e { // function to execute when the switch button is clicked\n          setMove(\"select-pokemon\"); // add this\n        }\n      }\n    ];\n```\n\n### Dispatch the action for switching to a specific Pokemon\n\nAt this point, the user can now view the attacks of the current Pokemon, as well as the list of Pokemon in their team. This time, we need to add the code that will update the UI when an attack is made, or when the user switches to another Pokemon. Start by importing the actions: \n\n``` javascript\n    // src/components/PokemonOption/PokemonOption.js\n    \n    import { selectPokemon, setPokemon, setMove } from \"../../actions\";\n```\n\nNext, update `mapDispatchToProps` to include the functions that will set the current Pokemon, and going back to the initial UI of the controls section:\n\n``` javascript\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        // existing code here..\n        \n        // add these:\n        setPokemon: pokemon =\u003e {\n          dispatch(setPokemon(pokemon)); // for setting the current Pokemon\n        },\n        backToMove: () =\u003e {\n          dispatch(setMove(\"select-move\")); // for showing the initial controls UI (the Fight or Switch buttons)\n        }\n      }\n    }\n```\n\nLastly, update the `onPress` handler to include the `switch-pokemon` condition:\n\n``` javascript\n    onPress={() =\u003e {\n      if (action_type == \"select-pokemon\") {\n        // existing code here...\n      } else if (action_type == \"switch-pokemon\") { // add these\n        setPokemon(pokemon_data); // use the pokemon data passed from the PokemonList component\n        backToMove();\n      }\n    }}\n```\n\n### Dispatch action for updating opponent Pokemon’s health\n\nThe final step is for us to update the opponent Pokemon’s health when the user chooses a move to attack with. Import the following actions, and the helper function for getting the move effectiveness and the actual damage:\n\n``` javascript\n    // src/components/MovesList/MovesList.js\n    \n    import { connect } from \"react-redux\";\n    import {\n      setOpponentPokemonHealth, // for setting the current opponent Pokemon's health\n      removePokemonFromOpponentTeam, // for removing the current opponent Pokemon from the opponent team\n      setOpponentPokemon, // for setting the current opponent Pokemon after the previous one has fainted\n      setMove // for going back to the initial controls UI after the opponent Pokemon has fainted\n    } from \"../../actions\";\n    \n    import getMoveEffectivenessAndDamage from \"../../helpers/getMoveEffectivenessAndDamage\";\n```\n\nNext, map the current `opponent_pokemon` as a prop. This gives us access to the opponent Pokemon’s current health points, type defenses, and team member ID. This allows us to calculate the damage made by the attack by passing those data to the `getMoveEffectivenessAndDamage` function:\n\n``` javascript\n    const mapStateToProps = ({ battle }) =\u003e {\n      const { opponent_pokemon } = battle;\n    \n      return {\n        opponent_pokemon\n      };\n    };\n```\n\nNext, add the functions that will dispatch the actions that we imported earlier:\n\n``` javascript\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        setOpponentPokemonHealth: (team_member_id, health) =\u003e {\n          dispatch(setOpponentPokemonHealth(team_member_id, health));\n        },\n    \n        removePokemonFromOpponentTeam: team_member_id =\u003e {\n          dispatch(removePokemonFromOpponentTeam(team_member_id));\n        },\n    \n        setOpponentPokemon: () =\u003e {\n          dispatch(setOpponentPokemon());\n        },\n        setMove: move =\u003e {\n          dispatch(setMove(move));\n        }\n      };\n    };\n```\n\nFinally, update the `onPress` function so it calculates the damage done by an attack, as well as return a description of how effective the attack is (examples: no effect, not very effective, super effective):\n\n``` javascript\n    onPress={() =\u003e {\n      let { damage } = getMoveEffectivenessAndDamage(\n        item,\n        opponent_pokemon\n      );\n      let health = opponent_pokemon.current_hp - damage;\n    \n      setOpponentPokemonHealth(opponent_pokemon.team_member_id, health); // update the opponent Pokemon's health\n    \n      if (health \u003c 1) { // opponent Pokemon has fainted\n        removePokemonFromOpponentTeam(opponent_pokemon.team_member_id);\n    \n        setMove(\"select-move\"); // go back to the initial controls UI\n        setOpponentPokemon(); // set the opponent Pokemon (if there's still one left)\n      }\n      \n    }}\n```\n\n## Conclusion\n\nIn this tutorial, we’ve created a Pokemon battle game app using React Native and Redux. Along the way, you’ve strengthened your basic Redux knowledge by building an app that makes use of all the basic Redux concepts.\n\nStay tuned for the second part where we will implement the two-player mode, so the users actually get to battle another human.\n\nYou can find the full source code of the app on this [GitHub repo](https://github.com/anchetaWern/RNPokeBattle). The code added to this specific part of the series is on the `practice` branch.","metaTitle":"Create a Pokemon battle game with React Native - Part 1","metaDescription":" In part one, implement a practice mode, allowing users to play against a random computer-generated team.\nThis three-part tutorial series, we will be using React Native and Node.js to create a two-player Pokemon-like game."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"TKcYWbcewS0aiOIQyY0uU","type":"Entry","createdAt":"2018-11-27T21:32:21.715Z","updatedAt":"2018-11-27T21:32:21.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a to-do list app with Vue.js and Laravel","url":"todo-vue-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/realtime_todo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-11-27","description":"This brief tutorial shows you how to create a simple to-do list app using Vue and Laravel. The list UI updates in realtime as items are added, completed and removed.","prerequisite":"You will need Laravel 5.7 installed on your machine.","content":"## Introduction\n\nIn this tutorial, we will build a to-do app with Vue.js and Laravel using Pusher to add the realtime functionality. Vue.js is such a great JS framework as it speeds up frontend development and helps achieve more with less code. Laravel on its side is one the most popular and powerful backend frameworks; allied with Vue.js we can build awesome web apps. \nPusher you may know is a collection of hosted APIs to build realtime apps with less code. Now let’s get started!\n\n## Demo\n\nThis is the result of our final working app:\n\n![todo-vue-demo](//images.ctfassets.net/1es3ne0caaid/p2EBbkFfEWqusEuUo02Qk/6f9ee671f0a51c1fce08a9397f9ae88b/todo-vue-demo.gif)\n\n## Prerequisites\n\nIn order to follow this tutorial a basic or good understanding of Vue.js and Laravel is required, as we’ll be using these technologies throughout this tutorial. Also ensure you have npm or Yarn on your machine. \n\nWe’ll be using these tools to build our application:\n\n- [Pusher](https://pusher.com/channels)\n- [Laravel 5.7](https://laravel.com)\n- [Vue.js](https://vuejs.org)\n- [Vuex](https://vuex.vuejs.org)\n- [Laravel CLI](https://laravel.com/docs/5.7/installation) \n\n\n## Pusher setup\n\nHead over to the [Pusher website](https://pusher.com) and sign up for a free account. Select **Create new app** on the sidebar, and hit **Create my app** to create a new app after filling the form.\n\nOnce your app is created, retrieve your credentials from the **API Keys** tab, and make note of them as we’ll use them later in the tutorial.\n\n\n## Initialize the project and install dependencies\n\nTo get started we’ll install a new Laravel application using the Laravel CLI. We’ll run the following command:\n\n```\nlaravel new realtime_todo\n```\n\nOnce the installation is finished run the following command to move to your app directory: \n\n```\ncd realtime_todo\n```\n\nNow we’ll install our node dependencies, first paste this in your `package.json` file: \n\n``` json\n    {\n      \"private\": true,\n      \"scripts\": {\n        \"dev\": \"npm run development\",\n        \"development\": \"cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n        \"watch\": \"npm run development -- --watch\",\n        \"watch-poll\": \"npm run watch -- --watch-poll\",\n        \"hot\": \"cross-env NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js\",\n        \"prod\": \"npm run production\",\n        \"production\": \"cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\"\n      },\n      \"devDependencies\": {\n        \"axios\": \"^0.18\",\n        \"bootstrap\": \"^4.0.0\",\n        \"cross-env\": \"^5.1\",\n        \"jquery\": \"^3.2\",\n        \"laravel-mix\": \"^2.0\",\n        \"lodash\": \"^4.17.5\",\n        \"popper.js\": \"^1.12\",\n        \"vue\": \"^2.5.7\",\n        \"vuex\": \"^3.0.1\",\n        \"laravel-echo\": \"^1.4.0\",\n        \"pusher-js\": \"^4.2.2\"\n      }\n    }\n```\n\nThen run `npm install` or `yarn` to install the dependencies. It’s up to you.\n\nAfter this step, add the following to your  `.env` file in the root of your project directory. Ensure to replace the placeholders with your keys from Pusher.\n\n``` \n    PUSHER_APP_ID=YOUR_PUSHER_APP_ID\n    PUSHER_APP_KEY=YOUR_PUSHER_APP_KEY\n    PUSHER_APP_SECRET=YOUR_PUSHER_APP_SECRET\n    PUSHER_APP_CLUSTER=YOUR_PUSHER_APP_CLUSTER\n```\n\n\n## Database setup\n\nIn this tutorial, we’ll use SQLite as our database. Create a `database.sqlite` file in the database directory, and amend the .env file like this:\n\n```\n    DB_CONNECTION=sqlite\n    DB_DATABASE=/absolute/path/to/database.sqlite\n```\n\nRefer to this [section on Laravel website](https://laravel.com/docs/5.7/database) for more relevant information.\n\n\n## Building models and seeding our database\n\nNow, let’s build our database structure. We’ll use the Laravel CLI again for that.\nRun this command: \n\n```\nphp artisan make:model Task -mc\n```\n\nThe above command will generate the Task model as well as its migration and its controller `TaskController.php`   for us.\n\nOpen your `Task.php` file and paste this:\n\n``` php\n    //realtime_todo/app/Task.php\n    \n    \u003c?php\n    namespace App;\n    use Illuminate\\Database\\Eloquent\\Model;\n    class Task extends Model\n    {\n        //\n        protected $fillable = ['title','completed'];\n    }\n```\n\n\n\nNext copy and paste this piece of code in your task migration file: \n\n``` php\n    //realtime_todo/database/migrations/*_create_tasks_table.php\n    \n    \u003c?php\n    use Illuminate\\Support\\Facades\\Schema;\n    use Illuminate\\Database\\Schema\\Blueprint;\n    use Illuminate\\Database\\Migrations\\Migration;\n    class CreateTasksTable extends Migration\n    {\n        /**\n        * Run the migrations.\n        *\n        * @return void\n        */\n    \n        public function up() {\n            Schema::create('tasks', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003estring('title');\n                $table-\u003eboolean('completed')-\u003edefault(false);\n                $table-\u003etimestamps();\n            }\n            );\n        }\n    \n        /**\n        * Reverse the migrations.\n        *\n        * @return void\n        */\n          public function down(){\n            Schema::dropIfExists('tasks');\n        }\n    }\n```\n\n\nThen run `php artisan migrate` to run the migration.\n\n\n## Define routes and create the TaskController\n\nIn this section, we’ll define our app endpoints and define the logic behind our `TaskController.php`\n\nThis is a simple CRUD(create, read, update, delete) over our Task model. So we defined our routes with corresponding functions to handle our browser requests.\nPaste the following into `api.php`:\n\n``` php\n    //realtime_todo/routes/api.php\n    \u003c?php\n    use Illuminate\\Http\\Request;\n    \n    /*\n    --------------------------------------------------------------------------\n    | API Routes\n    |--------------------------------------------------------------------------\n    |\n    | Here is where you can register API routes for your application. These\n    | routes are loaded by the RouteServiceProvider within a group which\n    | is assigned the \"api\" middleware group. Enjoy building your API!\n    |\n    */\n    \n    Route::get('todos','TaskController@fetchAll');\n    Route::post('todos','TaskController@store');\n    Route::delete('todos/{id}','TaskController@delete');\n```\n\nNow let’s define our controller logic. Our controller functions will be responsible for actions to handle when some requests reach our API endpoints.\n\nOpen your `TaskController` file and paste the following code:\n\n``` php\n    //realtime_todo/app/Http/Controllers/TaskController.php\n    \n    \u003c?php\n    \n    namespace App\\Http\\Controllers;\n    use Illuminate\\Http\\Request;\n    use App\\Events\\TaskCreated;\n    use App\\Events\\TaskRemoved;\n    use App\\Task;\n    class TaskController extends Controller\n    {\n        //\n        public function fetchAll(){\n            $tasks = Task::all();\n            //return response()-\u003ejson($tasks);\n            return $tasks;\n        }\n        \n        public function store(Request $request){\n            $task = Task::create($request-\u003eall());\n            broadcast(new TaskCreated($task));\n            return response()-\u003ejson(\"added\");\n        }\n        \n        public function delete($id){\n            $task = Task::find($id);\n            broadcast(new TaskRemoved($task));\n            Task::destroy($id);\n            return response()-\u003ejson(\"deleted\");\n        }\n    }\n```\n\nIn the above code we have three functions `fetchAll`, `store` , and `delete`:\n\n- `fetchAll`:  queries our database to return all our tasks/to-dos\n- `store`: creates a new to-do with request params(title and task status)\n- `delete`: finds a task and deletes from the database.\n\n\n### Emit events\n\nWell you may have noticed these lines: `broadcast(new Taskcreated($task))` and `broadcast(new TaskRemoved($task))` respectively in `store` and `delete` functions. What is their purpose? Through these lines we emit events with a task model instance. \n\nYou can get more relevant information about Laravel broadcasting [here](https://laravel.com/docs/5.7/broadcasting). \nIn the next part of the tutorial, we’ll see how to create these events..\n\n\n\n## Create our events\n\nIn this part we’ll create events we talked about above: `TaskCreated` and `TaskRemoved` events.\n\n### TaskCreated event\n\nOur  `TaskCreated` event will be emitted whenever a new to-do or task is created. Enough talk, let’s focus on the code. Let’s create our `TaskCreated` by running the following command in your terminal: `php artisan make:event TaskCreated`.\n\nNow open your `TaskCreated` file and paste the following:\n\n``` php\n    //realtime_todo/app/Events/TaskCreated.php\n    \u003c?php\n    \n    namespace App\\Events;\n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Broadcasting\\PrivateChannel;\n    use Illuminate\\Broadcasting\\PresenceChannel;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcastNow;\n    \n    \n    class TaskCreated implements ShouldBroadcastNow\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n    \n        /**\n        * Create a new event instance.\n        *\n        * @param $task\n        * @return void\n        */\n        \n        public $task;\n        public function __construct($task)\n        {\n            //\n            $this-\u003etask = $task;\n        }\n    \n        /**\n        * Get the channels the event should broadcast on.\n        *\n        * @return \\Illuminate\\Broadcasting\\Channel|array\n        */\n        \n        public function broadcastOn()\n        {\n            return new Channel('newTask');\n        }\n        \n        public function broadcastAs(){\n            return 'task-created';\n        }\n        \n    }\n```\n\nOur class constructor initializes a task that is created. We have two additional functions that may seem strange to you:\n\n- `broadcastAs`: customizes the broadcast name because by default Laravel uses the event’s class name.\n- `broadcastOn`: defines the channel `task-created` (which we’ll set up further on the tutorial) on which our event should be broadcast.\n\n### TaskRemoved event\n\nThis event is broadcast when a task is deleted and we want to notify other users of that.\n\nAs you may guess, you can run:  `php artisan make:event TaskRemoved` to create the event. Now head up to your `TaskRemoved` file:\n\n``` php\n    //realtime_todo/app/Events/TaskRemoved.php\n    \n    \u003c?php\n    namespace App\\Events;\n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Broadcasting\\PrivateChannel;\n    use Illuminate\\Broadcasting\\PresenceChannel;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcastNow;\n    class TaskRemoved implements ShouldBroadcastNow\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n    \n        /**\n        * Create a new event instance.\n        *\n        *  @param $task\n        * @return void\n        *\n        */\n            public $task;\n            public function __construct($task)\n            {\n            //\n            $this-\u003etask = $task;\n        }\n    \n        /**\n        * Get the channels the event should broadcast on.\n        *\n        * @return \\Illuminate\\Broadcasting\\Channel|array\n        */\n        \n        public function broadcastOn()\n        {\n            return new Channel('taskRemoved');\n        }\n        \n        public function broadcastAs(){\n            return 'task-removed';\n        }\n        \n    }\n```\n\nThis class structure is pretty similar to the previous one, so we won't spend further time explaining its functions.\n\n\n\u003e Don’t forget to implement `ShouldBroadcastNow` to enable Pusher broadcasting events as soon as they occur.\n\n### Broadcast configuration\n\nAccording to Laravel documentation about [event broadcasting](https://laravel.com/docs/5.7/broadcasting), before broadcasting any events, you will first need to register the `App\\Providers\\BroadcastServiceProvider`. In fresh Laravel applications, you only need to uncomment this provider in the `providers` array of your `../config/app.php` configuration file. This provider will allow you to register the broadcast authorization routes and callbacks.\n\n\n\u003e You may also set the `encrypted` value to `false` in order to avoid a 500 error while broadcasting events with Pusher.\n\nIf this is done, you have to tell Laravel to use Pusher to broadcast events. Open your `.env` file and ensure you have this line: `BROADCAST_DRIVER=pusher`\n\nAs we are broadcasting our events over [Pusher](https://pusher.com), we should install the Pusher PHP SDK using the Composer package manager:\n\n```\n    composer require pusher/pusher-php-server \"~3.0\"\n```\n\n### Setting up the broadcast channel\n\nLaravel broadcasts events on well defined channels. As said above our events should be broadcast on particular channels. It’s time to set them up. Paste the following code in your `channels.php` file: \n\n\n``` php    \n    //realtime_todo/routes/channels.php\n    \u003c?php\n    \n    /*\n    ------------------------------------------------------------------------\n    | Broadcast Channels\n    |--------------------------------------------------------------------------\n    |\n    | Here you may register all of the event broadcasting channels that your\n    | application supports. The given channel authorization callbacks are\n    | used to check if an authenticated user can listen to the channel.\n    |\n    */\n    Broadcast::channel('newTask', function(){\n        return true;\n    });\n    Broadcast::channel('taskRemoved', function(){\n        return true;\n    });\n```\n    \n\nAs we aren’t using Laravel auth, we return `true` in the function callback so that everybody can use this channel to broadcast events.\n\n### Set up Laravel Echo\n\nWe’ll use [Laravel Echo](https://laravel.com/docs/5.7/broadcasting#installing-laravel-echo) to consume our events on the client-side.\n\nOpen your `resources/js/bootstrap.js`  file and uncomment this section of the code:\n\n``` php\n    import Echo from 'laravel-echo'\n    \n    window.Pusher = require('pusher-js');\n    \n    window.Echo = new Echo({\n        broadcaster: 'pusher',\n        key: process.env.MIX_PUSHER_APP_KEY,\n        cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n        encrypted: false\n    });\n```\n\nWhile uncommenting, you may also set the `encrypted` property to `false` to avoid a 500 error while trying to broadcast events with Pusher channels.\n\nThe above code sets up Laravel Echo with Pusher. This will make our app aware of events broadcast, and Laravel Echo will consume our events \n\nOur app is ready to broadcast and consume events in realtime using Pusher channels. Let’s focus now on the frontend of your app.\n\n\n## Set up Vuex store\n\nWe’ll be using the [Vuex](https://vuex.vuejs.org) library to centralize our data and control the way it is mutated throughout our application.\n\n### Create our state\n\nVuex state is a single object that contains all our application data. So let’s create  `../resources/js/store/state.js`  and paste this code inside:\n\n``` javascript\n    let state = {\n        todos: [],\n        toRemove: null,\n        newTodo: {\n            title: '',\n            completed: false\n        }\n    }\n    export default state\n```\n\nOur state objects holds :\n\n- `todos`: holds our to-dos got from the backend\n- `toRemove`: holds temporarily the to-do we intend to remove \n- `newTodo`: holds details about a new to-do we are about to add \n\n### Create our getters\n\nWith help of getters we can compute derived state based on our data store state. Create  `../resources/js/store/getters.js`  and paste this code inside\n\n``` javascript\n    let getters = {\n        newTodo: state =\u003e {\n            return state.newTodo\n        },\n        todos: state =\u003e {\n            return state.todos\n        },\n        toRemove: state =\u003e {\n            return state.toRemove\n        }\n    }\n    export default getters\n```\n\n### Create our mutations\n\nMutations allow us to perform some changes on our data. Create `../resources/js/store/mutations.js` and paste this piece of code inside:\n\n``` javascript\n    let mutations = {\n        ADD_TODO(state, todo) {\n            state.todos.unshift(todo)\n        },\n        CACHE_REMOVED(state, todo) {\n          state.toRemove = todo;\n        },\n        GET_TODOS(state, todos) {\n            state.todos = todos\n        },\n        DELETE_TODO(state, todo) {\n            state.todos.splice(state.todos.indexOf(todo), 1)\n            state.toRemove = null;\n        }\n    }\n    export default mutations\n```\n\nHere we have three mutations:\n\n- `ADD_TODO`: adds a new to-do to the top our to-dos list\n- `CACHE_REMOVED`: keeps track temporarily of the to-do to remove\n- `GET_TODOS`: sets our to-dos list given some data\n- `DELETE_TODO`: responsible for deleting a to-do from our to-dos list\n\n\n### Create our actions\n\nVuex actions allow us to perform asynchronous operations over our data. Create the file `../resources/js/store/actions.js`  and  paste the following code:\n\n``` javascript\n    let actions = {\n      ADD_TODO({commit}, todo) {\n            axios.post('/api/todos', todo).then(res =\u003e {\n                if (res.data === \"added\")\n                    console.log('ok')\n            }).catch(err =\u003e {\n                console.log(err)\n            })\n        },\n        DELETE_TODO({commit}, todo) {\n            axios.delete(`/api/todos/${todo.id}`)\n                .then(res =\u003e {\n                    if (res.data === 'deleted')\n                        console.log('deleted')\n                }).catch(err =\u003e {\n                    console.log(err)\n                })\n        },\n        GET_TODOS({commit}) {\n            axios.get('/api/todos')\n                .then(res =\u003e {\n                    {  console.log(res.data)\n                        commit('GET_TODOS', res.data)\n                    }\n                }).catch(err =\u003e {\n                    console.log(err)\n                })\n        }\n    }\n    export default actions\n```\n\nWe have defined two actions and each of them responsible of a single operation. They perform asynchronous calls to our API routes. \n\n\n- `ADD_TODO`  makes a POST request to our `api/todos`  endpoint to add a new task.  This action is dispatched whenever the user is submitting a task to add.\n\n\n- `GET_TODOS` sends a GET request to our `api/todos` endpoint to get our database to-dos/tasks and commits the response with `GET_TODOS` mutation.\n\n\n- `DELETE_TODO` performs a DELETE a request to our `api/todos/{id}` endpoint in order to remove a to-do from our to-dos list.\n\n### Set up our store with Vue\n\nCreate the file `../resources/js/store/index.js` and paste this code inside:\n\n``` javascript\n    import Vue from 'vue'\n    import Vuex from 'vuex'\n    import actions from './actions'\n    import mutations from './mutations'\n    import getters from './getters'\n    import state from \"./state\";\n    \n    Vue.use(Vuex);\n    \n    export default new Vuex.Store({\n        state,\n        mutations,\n        getters,\n        actions\n    })\n```\n\nThen, we export our store and add it to the Vue instance. Replace the existing code in your `../resouces/js/app.js`  file with the following:\n\n``` javascript\n    require('./bootstrap');\n    window.Vue = require('vue');\n    \n    Vue.component('todo', require('./components/Todo'))\n    Vue.component('new-todo', require('./components/NewTodo.vue'))\n    Vue.component('todo-list', require('./components/TodoList'))\n    Vue.component('todo-app', require('./components/TodoApp'))\n    import store from '../js/store'\n    \n    const app = new Vue({\n        el: '#app',\n        store\n    });\n```\n\nThe previous code also globally registers four Vue components, `Todo.vue` ,`NewTodo.vue`,`TodoList.vue` and  `TodoApp.vue` that we’ll build in the next part of this tutorial.\n\n\n## Building Vue components\n\nWe’ll build four Vue components for our app as we said above, so let’s do it.\n\n### Create the Todo.vue component\n\nThe  `Todo.vue` component is responsible for encapsulating details about a single Task instance from the database and rendering it in a proper and styled way. Create a `Todo.vue` file in your `../resources/js/components` directory and paste the following inside:\n\n``` javascript\n    //../resources/js/components/Todo.vue\n    \u003ctemplate\u003e\n     \u003cli class=\"todo\" :class=\"{ completed: todo.completed }\"\u003e\n         \u003cdiv class=\"view\"\u003e\n             \u003cinput type=\"checkbox\" v-model=\"todo.completed\" class=\"toggle\"\u003e\n             \u003clabel\u003e{{todo.title}}\u003c/label\u003e\n             \u003cbutton @click=\"removeTodo(todo)\" class=\"destroy\"\u003e\u003c/button\u003e\n         \u003c/div\u003e\n     \u003c/li\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    export default {\n      name: \"Todo\",\n      props: [\"todo\"],\n     \n      methods: {\n        removeTodo(todo) {\n          this.$store.commit(\"CACHE_REMOVED\", todo)\n          this.$store.dispatch(\"DELETE_TODO\", todo);\n        }\n      }\n    };\n    \u003c/script\u003e\n```\n\nOur  `Todo.vue` component takes a `todo` property whose details we render in the component body using the HTML `\u003cli\u003e\u003c/li\u003e` tag. The component has the  `removeTodo` function that takes the to-do we intend to remove as argument, caches it temporarily (via the `CACHE_REMOVED`  mutation) and dispatches the `DELETE_TODO` action to remove it.\n\n### Create the NewTodo.vue component\n\nWe’ll use this component to add a new task to our to-dos list.  This component should be very simple to code. I promise you 😉.  First create the `NewTodo.vue` file inside the same directory as above and paste this inside:\n\n``` javascript\n    //../resources/js/components/NewTodo.vue\n    \u003ctemplate\u003e\n         \u003cinput type=\"text\" v-model=\"newTodo.title\"\n         @keyup.enter=\"addTodo\" autofocus=\"autofocus\"\n          placeholder=\"What are you trying to get done?\" class=\"new-todo\"\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    import { mapGetters } from \"vuex\";\n    export default {\n      name: \"NewTodo\",\n      methods: {\n        addTodo() {\n          this.$store.dispatch(\"ADD_TODO\", this.newTodo);\n        }\n      },\n      computed: {\n        ...mapGetters([\"newTodo\"])\n      }\n    };\n    \u003c/script\u003e\n```\n    \n\nThis component is composed of a simple input field to enter our to-do title. We append a `@keyup.enter` event so we can execute the `addTodo` function whenever the user hits the `Enter` key of his keyboard. Nice play isn’t it 😎 ?! We get the `newTodo` state object from our getters using Vue.js `mapGetters`  helper and bind it to our input. As I said above the `newTodo` object should contain information of a new todo we want to add to our to-dos list.\nThe `addTodo` function dispatches the `ADD_TODO` action having our `newTodo` as a parameter.\n\n\n### Create the TodoList.vue component\n\nThis component will render to-dos items from database. It’s that simple.\nSo create your  `TodoList.vue` component and paste this code inside:\n\n``` javascript\n    //../resources/js/components/TodoList.vue\n    \u003ctemplate\u003e\n       \u003cul class=\"todo-list\"\u003e\n         \u003ctodo v-for=\"todo in todos\" :todo=\"todo\" :key=\"todo.id\" /\u003e\n       \u003c/ul\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    import { mapGetters } from \"vuex\";\n    import todo from \"../components/Todo\";\n    export default {\n      components: {\n        todo\n      },\n      name: \"TodoList\",\n      mounted() {\n        this.$store.dispatch(\"GET_TODOS\");\n      },\n      computed: {\n        ...mapGetters([\"todos\"]),\n      }\n    };\n    \u003c/script\u003e\n```\n\nIn the  `mounted`  *hook*  function  we dispatch the  `GET_TODOS` action to get our to-dos list item, and we use Vuex helper function  `…mapGetters()` to access our todos state. We loop over our to-dos list and render a `todo` component (imported from `Todo.vue` component) which takes the current loop item as a property.\n\n### Create the TodoApp.vue component\n\nIn this component we simply merge the first three components we created and listen to Pusher realtime events. Create your `TodoApp.vue` component and paste the following inside: \n\n``` javascript\n    //../resources/js/components/TodoApp.vue\n    \n     \u003ctemplate\u003e\n         \u003csection class=\"todoapp\"\u003e\n                \u003cheader class=\"header\"\u003e\n                  \u003ch1\u003etodos\u003c/h1\u003e\n                \u003c/header\u003e\n                \u003cnew-todo\u003e\u003c/new-todo\u003e\n                \u003ctodo-list\u003e\u003c/todo-list\u003e\n         \u003c/section\u003e\n     \u003c/template\u003e\n     \u003cscript\u003e\n    import newTodo from \"../components/NewTodo.vue\";\n    import todoList from \"../components/TodoList.vue\";\n    import { mapGetters } from \"vuex\";\n    \n    export default {\n      components: {\n       newTodo,\n       todoList\n      },\n      name: \"TodoApp\",\n      mounted() {\n        window.Echo.channel(\"newTask\").listen(\".task-created\", e =\u003e {\n          this.$store.commit(\"ADD_TODO\", e.task);\n          this.newTodo.title = \"\";\n        });\n        window.Echo.channel(\"taskRemoved\").listen(\".task-removed\", e =\u003e {\n            this.$store.commit(\"DELETE_TODO\", this.toRemove);\n        });\n      },\n      computed: {\n        ...mapGetters([\"newTodo\", \"toRemove\"])\n      }\n    };\n    \u003c/script\u003e\n```\n    \n\nIn the mounted function of our component, we are subscribing to two channels:\n\n- `newTask` channel: we listen the `task-created` event triggered when a new to-do is added to the list. Then we commit the `ADD_TODO` mutation with the task sent carried by the event, in order to add it to our to-dos list. Finally we reset our `newTodo` we import from our Vuex store.\n\n\n- `taskRemoved` channel, this channel enables to listen to the `task-removed` event triggered when a task/to-do is removed from our list. When the event is emit, we assign the task deleted to our `toRemove` object we set up in our Vuex store, and we commit the `DELETE_TODO` mutation to finally remove it from to-dos list.\n\n\n\n## Finalize the app\n\nNow, let’s replace of our  `welcome.blade.php` with the following containing our `TodoApp` component:\n \n``` php\n    //realtime_todo/resources/views/welcome.blade.php\n    \n    \u003c!doctype html\u003e\n    \u003chtml lang=\"{{ str_replace('_', '-', app()-\u003egetLocale()) }}\"\u003e\n        \u003chead\u003e\n            \u003cmeta charset=\"utf-8\"\u003e\n            \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n            \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\" /\u003e\n            \u003ctitle\u003eRealtime to-do app\u003c/title\u003e\n            \u003c!-- Fonts --\u003e\n            \u003clink href=\"https://fonts.googleapis.com/css?family=Nunito:200,600\" rel=\"stylesheet\" type=\"text/css\"\u003e\n            {{--  Style  --}}\n            \u003clink href=\"{{ mix('css/app.css') }}\" rel=\"stylesheet\" type=\"text/css\"\u003e\n            \u003c!-- Styles --\u003e\n            \u003cstyle\u003e\n                html, body {\n                    background-color: #fff;\n                    color: #636b6f;\n                    font-family: 'Nunito', sans-serif;\n                    font-weight: 200;\n                    height: 100vh;\n                    margin: 0;\n                }\n                .full-height {\n                    height: 100vh;\n                }\n                .flex-center {\n                    align-items: center;\n                    display: flex;\n                    justify-content: center;\n                }\n                .position-ref {\n                    position: relative;\n                }\n                .top-right {\n                    position: absolute;\n                    right: 10px;\n                    top: 18px;\n                }\n                .content {\n                    text-align: center;\n                }\n                .title {\n                    font-size: 84px;\n                }\n                .links \u003e a {\n                    color: #636b6f;\n                    padding: 0 25px;\n                    font-size: 12px;\n                    font-weight: 600;\n                    letter-spacing: .1rem;\n                    text-decoration: none;\n                    text-transform: uppercase;\n                }\n                .m-b-md {\n                    margin-bottom: 30px;\n                }\n            \u003c/style\u003e\n        \u003c/head\u003e\n        \u003cbody\u003e\n              \u003cdiv id=\"app\"\u003e\n                        \u003ctodo-app\u003e\u003c/todo-app\u003e\n              \u003c/div\u003e\n    \n              \u003cscript src=\"{{mix('js/app.js')}}\"\u003e\u003c/script\u003e\n        \u003c/body\u003e\n    \u003c/html\u003e\n```\n    \n\nTo style our app, get this [file](https://github.com/Ethiel97/realtime_todo/blob/master/resources/sass/app.scss) and replace the content inside your `../resources/sass/app.scss` file with it.\n \nNow open your terminal and run `npm run dev` to build your app in a proper way. This can take a few seconds. After this step run `php artisan serve` and  open your browser at `localhost:8000`  to see your app working fine.  You can try to add a new to-do to your list and see things working in realtime if you carefully followed steps above. You are now a boss 😎\n\n![todo-vue-demo](//images.ctfassets.net/1es3ne0caaid/p2EBbkFfEWqusEuUo02Qk/6f9ee671f0a51c1fce08a9397f9ae88b/todo-vue-demo.gif)\n\n\u003e **Note**: If you encounter  a 500 error when trying to add or delete to-dos, it’s sure that you have to disable Pusher encryption as I suggested you. Open these files  `../config/broadcasting.php` and  `../resources/js/bootstrap.js` and make sure you disable Pusher encryption `encrypted: false` in both of them.\n\n## Conclusion\n\nIn this tutorial we’ve created a realtime to-do app using Laravel, Vue.js, and Pusher to provide realtime functionality. You can think up new ideas to extend the application. It’ll be fun to see what you come up with. The source code for this tutorial is available on  [GitHub](https://github.com/Ethiel97/realtime_todo) here.","metaTitle":"Build a to-do list app with Vue.js and Laravel","metaDescription":"This brief tutorial shows you how to create a simple to-do list app using Vue and Laravel. The list UI updates in realtime as items are added, completed and removed."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Eh0neIijuMe6u8WUkigeo","type":"Entry","createdAt":"2018-11-19T21:11:07.272Z","updatedAt":"2020-06-19T11:00:49.074Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live comment feature with sentiment analysis using Flask and Vue","url":"flask-vue-comments","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-11-19","description":"This tutorial will guide you through building a comments feature for a website, using Flask and Vue.js. New comments will appear in realtime, and the application includes sentiment analysis, to measure the opinion of commenters.","prerequisite":"You will need Python 3.6+ and Flask installed on your machine.","content":"In this tutorial, we’ll see how we can get the overall feeling of our users after they might have read our post and added their comments. We’ll build a simple blog where users can comment. Then we process the comment to determine the percentages of people that find the post interesting and those who don't.\n\nAs technologies are advancing, the way we process data is also taking a huge turn around. Taking advantage of natural language processing, we can determine from a group of comments, how our users feel about our blog post.\n\nWe also don’t have to reload a page to see a new comment from a blog post. We can make comments visible in realtime to every user.\n\nWe’ll be using Channels, Vue.js and Flask to build the app.\n\nHere is a preview of what the final app will look like:\n\n![flask-comments-sentiment-demo](//images.ctfassets.net/1es3ne0caaid/5gkbkrLNgIkOsgOGmgwsUM/7b7e547c466433070e56ced75f8ac738/flask-comments-sentiment-demo.gif)\n\n## Prerequisite\n\nThis tutorial uses the following:\n\n- [Vue.js](https://vuejs.org/)\n- [Python 3.6+](https://www.python.org/)\n- [Flask](http://flask.pocoo.org/)\n\nYou should have some familiarity with Python development to follow along with this tutorial. If you are not familiar with Vue but still want to follow along,  you can go through the basics of Vue in the [documentation](https://vuejs.org/v2/guide/) to get you up to speed in a couple of minutes.\n\nBefore we start, let’s get your environment ready. Check that you have the appropriate installation and setup on your machine.\n\nOpen up a terminal on your machine and execute the below code:\n\n```\n    $ python --version\n```\n\nIf you have a Python 3.6+ installed on your machine, you will have a similar text printed out as `python 3.6.0`. If you got an output similar to “Command not found”, you need to install Python on your machine. Head over to Python’s official website to download and get it installed.\n\nIf you have gotten all that installed, let's proceed.\n\n## Creating a Pusher account\n\nWe'll use Pusher Channels to handle all realtime functionalities. Before we can start using Pusher Channels, we need to get our API key. We need an account to be able to get the API key.\n\nHead over to Pusher and [log](https://dashboard.pusher.com/accounts/sign_in) in to your account or create a [new account](https://dashboard.pusher.com/accounts/sign_up) if you don’t have one already. Once you are logged in, create a new app and then copy the app API keys.\n\n## Setting up the backend app\n\nLet’s create our backend app that will be responsible for handling all communication to Pusher Channels and getting the sentiment of a comment.\n\nCreate the following files and folder in a folder named `live-comment-sentiment` in any convenient location on your system:\n\n```\n    live-comment-sentiment\n      ├── .env\n      ├── .flaskenv\n      ├── app.py\n      ├── requirements.txt\n      ├── static\n      │   ├── custom.js\n      │   └── style.css\n      └── templates\n          └── index.html\n          └── base.html\n```\n\n### Creating a virtual environment\n\nIt’s a good idea to have an isolated environment when working with Python. [virtualenv](https://virtualenv.pypa.io/) is a tool to create an isolated Python environment. It creates a folder which contains all the necessary executables to use the packages that a Python project would need.\n\nFrom your command line, change your directory to the Flask project root folder, execute the below command:\n\n```\n    $ python3 -m venv env\n```\n\nOr:\n\n```\n    $ python -m venv env\n```\n\nThe command to use depends on which associates with your Python 3 installation.\n\nThen, activate the virtual environment:\n\n```\n    $ source env/bin/activate\n```\n\nIf you are using Windows, activate the virtualenv with the below command:\n\n```\n    \u003e \\path\\to\\env\\Scripts\\activate\n```\n\nThis is meant to be a full path to the activate script. Replace `\\path\\to` with your correct path name.\n\nNext, add the Flask configuration setting to the `.flaskenv` file:\n\n```\n    FLASK_APP=app.py\n    FLASK_ENV=development\n```\n\nThis will instruct Flask to use `app.py` as the main entry file and start up the project in development mode.\n\nNow, add your Pusher API keys to the `.env` file:\n\n```\n    PUSHER_APP_ID=app_id\n    PUSHER_APP_KEY=key\n    PUSHER_APP_SECRET=secret\n    PUSHER_APP_CLUSTER=cluster\n```\n\nMake sure to replace `app_id`, `key`, `secret` and `cluster` with your own Pusher keys which you have noted down earlier.\n\nNext, create a Flask instance by adding the below code to `app.py`:\n\n``` python\n    # app.py\n    \n    from flask import Flask, jsonify, render_template, request\n    from textblob import TextBlob\n    import pusher\n    import os\n    \n    app = Flask(__name__)\n    \n    @app.route('/')\n    def index():\n        return render_template('index.html')\n    \n    # run Flask app\n    if __name__ == \"__main__\":\n        app.run()\n```\n\nIn the code above, after we instantiate Flask using `app = Flask(__name__)`, we created a new route - `/` which renders an `index.html` file from the templates folder.\n\nNow, add the following python packages to the `requirements.txt` file:\n\n```\n    Flask==1.0.2\n    python-dotenv==0.8.2\n    pusher==2.0.1\n    textblob==0.15.1\n```\n\nThe packages we added:\n\n- [python-dotenv](https://github.com/theskumar/python-dotenv): this library will be used by Flask to load environment configurations files.\n- [pusher](https://github.com/pusher/pusher-http-python): this is the Pusher Python library that makes it easy to interact with its API.\n- [textblob](https://textblob.readthedocs.io/en/dev/): a Python library which provides a simple API for common natural language processing (NLP).\n\nNext, install the library by executing the below command:\n\n```\n    $ pip install -r requirements.txt\n```\n\nOnce the packages are done installing, start up Flask:\n\n```\n    $ flask run\n```\n\nIf there is no error, our Flask app will now be available on port 5000. If you visit http://localhost:5000, you will see a blank page. This is because the `templates/index.html` file is empty, which is ok for now.\n\n### Setting up TextBlob\n\nTo get the sentiment from comments, we’ll use the [TextBlob](https://textblob.readthedocs.io/en/dev/) Python library which provides a simple API for common natural language processing (NLP). We already have the library installed. What we’ll do now is install the necessary data that TextBlob will need.\n\nFrom your terminal, make sure you are in the project root folder. Also, make sure your virtualenv is activated. Then execute the below function.\n\n```\n    # Download NLTK corpora\n    $ python -m textblob.download_corpora lite\n```\n\nThis will download the necessary NLTK [corpora](https://textblob.readthedocs.io/en/dev/install.html) (trained models).\n\n### Initialize the Pusher Python library\n\nInitialize the Pusher Python library by adding the below code to `app.py`  just after the `app = Flask(__name__)` line:\n\n``` python\n    # app.py\n    \n    pusher = pusher.Pusher(\n        app_id=os.getenv('PUSHER_APP_ID'),\n        key=os.getenv('PUSHER_APP_KEY'),\n        secret=os.getenv('PUSHER_APP_SECRET'),\n        cluster=os.getenv('PUSHER_APP_CLUSTER'),\n        ssl=True)\n```\n\nNow we are fully set.\n\n## Setting up the frontend\n\nWe’ll create a simple page for adding comments. Since we won’t be building a full blog website, we won’t be saving the comments to a database.\n\n### Adding the base layout\n\nWe’ll use the template inheritance approach to build our views, which makes it possible to reuse the layouts instead of repeating some markup across pages. \n\nAdd the following markup to the `templates/base.html` file:\n\n``` html\n    \u003c!-- /templates/base.html  --\u003e\n    \n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n          \u003c!-- Required meta tags --\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003c!-- Bootstrap CSS --\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\"\u003e\n        \u003ctitle\u003eLive comment\u003c/title\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n          \u003cdiv class=\"container\" id=\"app\"\u003e\n               {% block content %}  {% endblock %}\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='custom.js')}}\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThis is the base layout for our view. All other views will inherit from the base file.\n\nIn this file, we have added some libraries. This includes: \n\n- [Bootstrap](https://getbootstrap.com/)\n- Pusher JavaScript library\n- Vue.js\n\n### The blog page\n\nThis will serve as the landing page of the application. Add the following to the `templates/index.html` file:\n\n``` html\n    \u003c!-- /templates/index.html  --\u003e\n    \n    \n    {% extends 'base.html' %}\n    \n    {% block content %}\n    \u003cdiv class=\"grid-container\"\u003e\n        \u003cheader class=\"header text-center\"\u003e \n            \u003cimg src=\"https://cdn1.imggmi.com/uploads/2018/10/13/1d5cff977fd6e3aac498e581ef681a1a-full.png\"\u003e\n        \u003c/header\u003e\n        \u003cmain class=\"content\"\u003e         \n           \u003cdiv class=\"content-text\"\u003e\n              Our pioneering and unique technology is based on state-of-the-art \u003cbr/\u003e \n              machine learning and computer vision techniques. Combining deep neural \u003cbr/\u003e\n              networks and spectral graph theory with the computing... \u003cbr/\u003e\n            \u003c/div\u003e\n        \u003c/main\u003e\n        \u003csection class=\"mood\"\u003e\n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col text-center\"\u003e \n                    \u003cdiv class=\"mood-percentage\"\u003e[[ happy ]]%\u003c/div\u003e\n                    \u003cdiv\u003eHappy\u003c/div\u003e \n                \u003c/div\u003e\n                \u003cdiv class=\"col text-center\"\u003e\n                    \u003cdiv class=\"mood-percentage\"\u003e[[ neutral ]]%\u003c/div\u003e\n                    \u003cdiv\u003eNeutral\u003c/div\u003e \n                \u003c/div\u003e\n                \u003cdiv class=\"col text-center\"\u003e \n                    \u003cdiv class=\"mood-percentage\"\u003e[[ sad ]]%\u003c/div\u003e\n                    \u003cdiv\u003eSad\u003c/div\u003e \n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/section\u003e\n        \u003csection class=\"comment-section\"\u003e\n            \u003cdiv v-for=\"comment in comments\"\u003e\n               \u003ccomment \n                    :comment=\"comment\"\n                    v-bind:key=\"comment.id\"\n                \u003e\n                \u003c/comment\u003e       \n            \u003c/div\u003e\n        \u003c/section\u003e\n        \u003csection class=\"form-section\"\u003e\n            \u003cform class=\"form\" @submit.prevent=\"addComment\"\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput\n                        type=\"text\" \n                        class=\"form-control\" \n                        v-model=\"username\"\n                        placeholder=\"Enter username\"\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003ctextarea \n                      class=\"form-control\" \n                      v-model=\"comment\" \n                      rows=\"3\"\u003e\u003c/textarea\u003e\n                \u003c/div\u003e\n                \u003cbutton type=\"submit\" class=\"btn btn-primary btn-block\"\u003eAdd comment\u003c/button\u003e\n            \u003c/form\u003e\n        \u003c/section\u003e\n    \u003c/div\u003e\n    {% endblock %}\n```\n\nIn the preceding code:\n\n- In the `\u003csection class=\"mood\"\u003e… \u003c/section\u003e`, we added three placeholders - [[ happy ]], [[ neutral ]] and [[ sad ]], which is the percentages of the moods of users who added comments. These placeholders will be replaced by their actual values when Vue takes over the page DOM ([mounted](https://vuejs.org/v2/api/#mounted)). \n\n      \n\n  \u003e Notice we are using `[[  ]]` instead of the normal Vue placeholders - `{{  }}`. This is because we are using [Jinja2](http://jinja.pocoo.org/) template that comes bundled with Flask to render our page. The Jinja2 uses `{{   }}` placeholder to hold variables that will be substituted to their real values and so do Vue by default. So to avoid conflicts, we will change Vue to use `[[  ]]` instead.\n\n\n\n- In the `\u003csection class=\"comment-section\"\u003e` section, we are rendering the comments to the page.\n- Next, is the `\u003csection class=\"form-section\"\u003e… \u003c/section\u003e`, where we added a form for adding new comments. Also in the inputs fields, we declare a [two-way data binding](https://vuejs.org/v2/guide/forms.html) using the v-model directive.\n- In the form section - `\u003cform class=\"form\" @submit.prevent=\"addComment\"\u003e…`, notice that we have the `@submit.prevent` directive. This will prevent the form from submitting normally when the user adds a new comment. Then we call the `addComment` function to add a comment. We don’t have the `addComment` function declared anywhere yet. We’ll do this when we initialize Vue.\n\nNow, add some styles to the page. Add the below styles to the `static/style.css` file:\n\n``` css\n    body {\n        width: 100%;\n        height: 100%;\n    }\n    .grid-container {\n        display: grid;\n        grid-template-rows: 250px auto auto 1fr;\n        grid-template-columns: repeat(3, 1fr);\n        grid-gap: 20px;\n        grid-template-areas:\n            '. header .'\n            'content content content'\n            'mood mood mood'\n            'comment-section comment-section comment-section'\n            'form-section form-section form-section';\n    }\n    .content {\n        grid-area: content;\n    }\n    .comment-section {\n        grid-area: comment-section;\n    }\n    .content-text {\n       font-style: oblique;\n       font-size: 27px;\n    }\n    .mood {\n        grid-area: mood;\n    }\n    .header {\n        grid-area: header;\n    }\n    .form-section {\n        grid-area: form-section;\n    }\n    .comment {\n        border: 1px solid rgb(240, 237, 237);\n        border-radius: 4px;\n        margin: 15px 0px 5px 60px;\n        font-family: monospace;\n    }\n    .comment-text {\n        padding-top: 10px;\n        font-size: 17px;\n    }\n    .form {\n        margin-top: 50px;\n    }\n    .mood-percentage {\n       border: 1px solid gray;\n       min-height: 50px;\n       padding-top: 10px;\n       font-size: 30px;\n       font-weight: bolder;\n    }\n```\n\nNow we have all our user interface ready. If you visit the app URL again, you will see a similar page as below:\n\n![flask-comments-sentiment-interface](//images.ctfassets.net/1es3ne0caaid/5ZAOxZyWmkC440I20kGeic/59156808839dade15400693ffaa7bc8b/flask-comments-sentiment-interface.png)\n\n## Initializing Channels\n\nNow let’s initialize Channels. Since we have added the Pusher JavaScript library already, we’ll go ahead and initialize it.\n\nAdd the below code to the `static/custom.js` file:\n\n``` javascript\n    // Initiatilze Pusher JavaScript library\n    var pusher = new Pusher('\u003cPUSHER-APP-KEY\u003e', {\n        cluster: '\u003cCLUSTER\u003e',\n        forceTLS: true\n    });\n```\n\nReplace `\u003cPUSHER-APP-KEY\u003e` and `\u003cCLUSTER\u003e` with your correct Pusher app details you noted down earlier.\n\n## Creating the comment component\n\nIf you view the `/templates/index.html` file, in the `\u003csection class=\"comment-section\"\u003e` section, you will notice we are calling the `\u003ccomment\u003e` component which we have not created yet. We need to create this component. Also, notice inside the file, we are calling the v-for (`v-for=\"comment in comments\"`) directive to render the comments.\n\nLet’s create the component. Add the below code to `static/custom.js`:\n\n``` javascript\n    Vue.component('comment', {\n        props: ['comment'],\n        template: `\n            \u003cdiv class=\"row comment\"\u003e \n                \u003cdiv class=\"col-md-2\"\u003e\n                    \u003cimg \n                       src=\"https://cdn1.imggmi.com/uploads/2018/10/13/1d5cff977fd6e3aac498e581ef681a1a-full.png\" \n                       class=\"img-responsive\" \n                       width=\"90\" \n                       height=\"90\"\n                    \u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-10 comment-text text-left\" v-html=\"comment.comment\"\u003e             \u003c/div\u003e\n            \u003c/div\u003e\n        `\n    })\n```\n\n## Initialize Vue\n\nNow let’s initialize Vue to take over the DOM manipulation. \n\nAdd the below code to the `static/custom.js` file:\n\n``` javascript\n    var app = new Vue({\n        el: '#app',\n        delimiters: ['[[', ']]'],\n        data: {\n          username: '',\n          comment: '',\n          comments: [],\n          happy: 0,\n          sad: 0,\n          neutral: 0,\n          socket_id: \"\"\n        },\n        methods: {},\n        created () {},\n    })\n```\n\nIn the preceding code: \n\n- We initialize Vue using `var app = new Vue(…` passing to it a key-value object.\n- Next, we tell Vue the part on the page to watch using `el:` `'``#app'`. The `#app` is the ID we have declared in the `/templates/base.html`.\n- Next, using `delimiters: ['[[', ']]'],`, we change the default Vue delimiter from `{{ }}` to `[[ ]]` so that it does not interfere with that of Jinja2.\n- Then we defined some states using `data: {….`.\n- Finally, we have `methods: {},` and `created () {},`. We’ll add all the function we’ll declare inside the  ``methods: {}`` block and then the `created () {}` is for adding code that will execute once Vue instance is [created](https://vuejs.org/v2/guide/instance.html#Instance-Lifecycle-Hooks).\n\nNext, add a function to update the sentiment score. Add the below code to the `methods: {}` block of the `static/custom.js` file:\n\n``` javascript\n            updateSentiments () {\n                // Initialize the mood to 0\n                let [happy, neutral, sad] = [0, 0, 0];\n                \n                // loop through all comments, then get the total of each mood\n                for (comment of this.comments) {\n                   if (comment.sentiment \u003e 0.4) {\n                      happy++;\n                   } else if (comment.sentiment \u003c 0) {\n                      sad++;\n                   } else {\n                       neutral++;\n                   }\n                }\n                \n                const total_comments = this.comments.length;\n                \n                // Get the percentage of each mood\n                this.sad = ((sad/total_comments) * 100).toFixed();\n                this.happy = ((happy/total_comments) * 100).toFixed();\n                this.neutral = ((neutral/total_comments) * 100).toFixed()\n                \n                // Return an object of the mood values\n                return {happy, neutral, sad}\n            },\n```\n\nIn the code above, we created a function that will loop through all the comments to get the number of each mood that appeared. Then we get the percentage of each mood then return their corresponding values.\n\nNext, add a function to add a new comment. Add the below code to the methods: {} block right after the code you added above:\n\n``` javascript\n            addComment () {\n               \n               fetch(\"/add_comment\", {\n                    method: \"post\",\n                    headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        id: this.comments.length,\n                        username: this.username,\n                        comment: this.comment,\n                        socket_id: this.socket_id\n                    })\n                })\n                .then( response =\u003e response.json() )\n                .then( data =\u003e {\n                    // Add the new comment to the comments state data\n                    this.comments.push({\n                        id: data.id,\n                        username: data.username,\n                        comment: data.comment,\n                        sentiment: data.sentiment\n                    })\n                    \n                    // Update the sentiment score\n                    this.updateSentiments();\n                 })\n                 \n               this.username = \"\";\n               this.comment = \"\";\n            },\n```\n\nHere, we created a function that makes a [request](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) to the `/add_comment` route to get the sentiment of a comment. Once we receive a response, we add the comment to the comments state. Then we call `this.updateSentiments()` to update the sentiment percentage. This function will be called each time a user wants to add a new comment.\n\nNext, let’s make comments visible to others in realtime. Add the below code to the `created () {}` block in the static/custom.js:\n\n``` javascript\n            // Set the socket ID\n            pusher.connection.bind('connected', () =\u003e {\n                this.socket_id = pusher.connection.socket_id;\n            });\n            \n            // Subscribe to the live-comments channel\n            var channel = pusher.subscribe('live-comments');\n            \n            // Bind the subscribed channel (live-comments) to the new-comment event\n            channel.bind('new-comment', (data) =\u003e {\n               this.comments.push(data);\n               \n               // Update the sentiment score\n               this.updateSentiments();\n            });\n```\n\n## Get sentiments from comments and make comments realtime\n\nNow, let’s add a function to get the sentiment of a message and then trigger a `new-comment` event whenever a user adds a comment. Add the below code to `app.py`\n\n``` python\n    # ./api/app.py\n    \n    @app.route('/add_comment', methods=[\"POST\"])\n    def add_comment():\n        # Extract the request data\n        request_data = request.get_json()\n        id = request_data.get('id', '')\n        username = request_data.get('username', '')\n        comment = request_data.get('comment', '')\n        socket_id = request_data.get('socket_id', '')\n        \n        # Get the sentiment of a comment\n        text = TextBlob(comment)\n        sentiment =  text.polarity\n        \n        comment_data = {\n            \"id\": id,\n            \"username\": username,\n            \"comment\": comment,\n            \"sentiment\": sentiment,\n        }\n        \n        #  Trigger an event to Pusher\n        pusher.trigger(\n            \"live-comments\", 'new-comment', comment_data, socket_id\n        )\n        \n        return jsonify(comment_data)\n```\n\nThe sentiment property returns a tuple of the form (polarity, subjectivity) where polarity ranges from -1.0 to 1.0 and subjectivity ranges from 0.0 to 1.0. We will only use the polarity property.\n\nIn the `pusher.trigger(…`, method,  we are passing the `socket_id` so that the user triggering the event won't get back the data sent.\n\n## Testing the app\n\nCongrats! Now we have our live comments with sentiments. To test the app, open the app in your browser on two or more different tabs, then add comments and see them appear in realtime on other tabs.\n\nHere is some sample comment you can try out:\n\n\n- The post is terrible! - Sad (Negative)\n- I love the way this is going - Happy (Positive)\n- This is amazingly simple to use. What great fun! - Happy (Positive)\n\nIf you are getting an error or nothing is working. Stop the server (Press CTRL+C) and then restart it (`$ flask run`). \n\n\n## Conclusion\n\nIn this tutorial, we built a live comment with sentiment analysis. We used Vue for DOM manipulation, Flask for the server side and Channels for realtime functionality. We used the [TextBlob](https://textblob.readthedocs.io/en/dev/quickstart.html#sentiment-analysis) python library to detect mood from text.","metaTitle":"Build a live comment feature using Flask and Vue","metaDescription":"This tutorial will guide you through building a comments feature for a website, using Flask and Vue.js. New comments will appear in realtime, and the application includes sentiment analysis, to measure the opinion of commenters."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3A1qNBZ83Y2UYeMaaaiUim","type":"Entry","createdAt":"2018-11-16T00:37:19.036Z","updatedAt":"2018-11-16T00:37:19.036Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Use the HTML5 Notification API to provide realtime alerts","url":"html5-notification-api","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/web-notifications-demo/","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-11-15","description":"This brief tutorial will show you how to create a web application that sends a browser alert every time a GitHub repo receives a push. You will use Node to create a simple server, ngrok to allow you to test locally, and GitHub webhooks to transmit the push event.","prerequisite":"You will need Node 6+ installed on your machine.","content":"This tutorial will describe how you can add realtime notifications to your own web app using [Pusher Channels](https://pusher.com/channels). I’ll demo this concept by building a small app that sends a notification whenever someone pushes code to a GitHub repository.\n\nRealtime notifications are a feature of many modern web applications. When utilized properly, they can be a great way to inform users about new activity in your web app so that they don’t miss it.\n\n## Prerequisites\n\nBefore you continue on with this tutorial, make sure you have [Node.js](https://docs.npmjs.com/getting-started/installing-node) (v6 or later), and npm installed on your machine. You also need to sign up for a [GitHub account](https://gtihub.com/new) and a [Pusher account](https://dashboard.pusher.com/accounts/sign_up) if you don’t have one already. Prior experience with the command line and with building Node.js applications is also required.\n\n## Set up the server\n\nLet’s start by setting up the server for the application. Before we start writing any code, create a new folder for this project in your filesystem and `cd` into it in your terminal application.\n\nRun the following command in your project directory to set up a new Node project:\n\n```\n    npm init -y\n```\n\nThis creates a `package.json` file in the current directory while skipping the questionnaire that would normally follow if you run the command without the `-y` flag.\n\nWe’ll be using Express to spin up a Node server along with a few other packages. Let’s install them all in one step:\n\n```\n    npm install express body-parser dotenv cors pusher --save\n```\n\nOnce the installation is complete, create a new `server.js` file at the root of your project directory and paste in the following code:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    \n    const app = express();\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nNext, create a `variables.env` file at the root of your project directory and add in the following:\n\n```\n    // variables.env\n    \n    PORT=5000\n```\n\nThe [dotenv](https://www.npmjs.com/package/dotenv) package loads environmental variables from this file into `process.env` so that they can easily be accessed in our code.\n\n\n## Set up Pusher Channels\n\nWe’ve already installed the Node SDK for Pusher Channels along with the other server dependencies, but we need to grab our application keys and use them in our code before anything can work.\n\nVisit the [Pusher account dashboard](https://dashboard.pusher.com/), select **Channels apps** on the sidebar and hit **Create Channels app** to create a new app. Then retrieve your credentials from the **API Keys** tab and add them to `variables.env` like this:\n\n```\n    // variables.env\n    \n    PORT=5000\n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\nNext, import the `pusher` package in `server.js` like this:\n\n``` javascript\n    // server.js\n    \n    ...\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    const app = express();\n    ...\n```\n\nFinally, let’s set up a new route that’ll receive webhook events from GitHub, then we’ll trigger an event with Pusher so that our app frontend can send a new notification each time a new push event is triggered.\n\nAdd the following route in `server.js`:\n\n``` javascript\n    // server.js\n    \n    app.post('/events', (req, res) =\u003e {\n      pusher.trigger('github', 'push', {\n        payload: req.body,\n      });\n    \n      res.status(200).end();\n    });\n```\n\nWhen a `POST` request is received on the `/event` route, a new `push` event is triggered on the `github` channel and the data from GitHub is included in the event payload.\n\nSave the code in `server.js` and run `node server.js` in your terminal to start the server.\n\n## Expose your local server to the world with ngrok\n\nYour server is currently running locally which means that it’s only accessible on your machine. However, GitHub needs a publicly available URL otherwise it is unable to send webhook events.\n\nWe can use ngrok to expose a local server to the world, which means anyone will be able to access it even though its running locally on your machine.\n\nVisit the ngrok website to find out [how to install and set up ngrok](https://ngrok.com/download) on your computer. Once you have it installed, start an HTTP tunnel on port 5000 by running the following command in a new terminal window:\n\n```\n    ./ngrok http 5000\n```\n\nIf your webhook server is listening on another port, make sure to provide the correct port when starting the HTTP tunnel. You will be given a couple of URLs but you only need the last one which is on the secure (HTTPS) protocol.\n\n![html5-notification-ngrok](//images.ctfassets.net/1es3ne0caaid/5fA3FFdtZmMIGgqaGcykKE/4c37c47e165a4d1d66f0d0e80efd7a55/html5-notification-ngrok.png)\n\n## Set up a webhook on a GitHub repo\n\nCreate a new GitHub repository. Give it a name and click the green **Create repository** button at the bottom. I called mine `web-notifications-demo`.\n\n![html5-notification-github-1](//images.ctfassets.net/1es3ne0caaid/47GTehMyUMIEEyqsOSm8cW/b2cae0a3936006e1b62bf3d6a75f5c39/html5-notification-github-1.png)\n\nOnce the repository has been created, head to the **Settings** tab and click the **Webhooks** link on the left. Then click the **Add webhook** button on the far right.\n\n![html5-notification-github-2](//images.ctfassets.net/1es3ne0caaid/25GNTGYsJCU2EeqS4M6wGy/701288fa54ce1f02da1915a15b72d84f/html5-notification-github-2.png)\n\nUnder the **Payload URL** field, tack `/events` to the URL you received from Ngrok and change the value of the **Content type** field to **application/json**. You can leave the rest of the form as is and click the green **Add webhook** button at the bottom.\n\n![html5-notification-github-3](//images.ctfassets.net/1es3ne0caaid/kOmhZNOY2O8cA0eE2w6qA/9960aa6cf94eacc0416771314d389e96/html5-notification-github-3.png)\n\n## Set up application frontend\n\nWithin your project directory, create the following files by running the command below:\n\n```\n    touch index.html style.css main.js\n```\n\nOpen up `index.html` in your text editor and paste in the following code:\n\n``` html\n    // index.html\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"\u003e\n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n      \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n      \u003ctitle\u003eRealtime Github Notifications\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" href=\"style.css\" type=\"text/css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003cmain class=\"app\"\u003e\n        \u003cheader class=\"header\"\u003e\n          \u003ch1\u003eRealtime Github Notifications\u003c/h1\u003e\n        \u003c/header\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003cbutton class=\"subscribe\" id=\"subscribe\"\u003eEnable notifications\u003c/button\u003e\n        \u003c/div\u003e\n      \u003c/main\u003e\n    \n      \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"main.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNext, add the styles for the application by change the contents of `style.css` to look like this:\n\n``` css\n    // style.css\n    \n    html {\n      box-sizing: border-box;\n    }\n    \n    *, *::before, *::after {\n      box-sizing: inherit;\n      margin: 0;\n      padding: 0;\n    }\n    \n    body {\n      font-family: -apple-system, BlinkMacSystemFont, 'San Francisco', 'Helvetica Neue', Helvetica, Ubuntu, Roboto, Noto, 'Segoe UI', Arial, sans-serif;\n    }\n    \n    .header {\n      width: 100%;\n      height: 200px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      background-color: #4051B4;\n      padding: 50px;\n    }\n    \n    h1 {\n      color: #fbf7f1;\n      font-size: 50px;\n    }\n    \n    .container {\n      width: 100%;\n      max-width: 700px;\n      margin: 30px auto;\n      text-align: center;\n    }\n    \n    button {\n      padding: 15px;\n      border: 1px solid #a00f3f;\n      color: #fbf7f1;\n      background-color: #a00f3f;\n      box-shadow: rgba(13, 13, 13, 0.14) 0px 2px 2px 0px, rgba(13, 13, 13, 0.2) 0px 3px 1px -2px, rgba(13, 13, 13, 0.12) 0px 1px 5px 0px;\n      text-transform: uppercase;\n      font-weight: 700;\n      font-size: 20px;\n    }\n```\n\nFinally, add the following code to `main.js`:\n\n``` javascript\n    // main.js\n    \n    const grantPermission = () =\u003e {\n      if (!('Notification' in window)) {\n        alert('This browser does not support system notifications');\n        return;\n      }\n    \n      if (Notification.permission === 'granted') {\n        new Notification('You are already subscribed to web notifications');\n        return;\n      }\n    \n      if (\n        Notification.permission !== 'denied' ||\n        Notification.permission === 'default'\n      ) {\n        Notification.requestPermission().then(result =\u003e {\n          if (result === 'granted') {\n            const notification = new Notification(\n              'Awesome! You will start receiving notifications shortly'\n            );\n          }\n        });\n      }\n    };\n    \n    const showNotification = data =\u003e {\n      const title = `${data.pusher.name} pushed to the ${\n        data.repository.name\n      } repo`;\n    \n      new Notification(title);\n    };\n    \n    const pusher = new Pusher('\u003cyour app key\u003e', {\n      cluster: '\u003cyour app cluster\u003e',\n      encrypted: true,\n    });\n    \n    const channel = pusher.subscribe('github');\n    channel.bind('push', data =\u003e {\n      showNotification(data.payload);\n    });\n    \n    const subscribe = document.getElementById('subscribe');\n    subscribe.addEventListener('click', event =\u003e {\n      grantPermission();\n      subscribe.parentNode.removeChild(subscribe);\n    });\n```\n\nDon’t forget to replace the `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e` placeholders with the appropriate values from your Pusher account dashboard.\n\nTo serve the app, install [http-server](https://www.npmjs.com/package/http-server) globally on your machine (`npm install -g http-server`) then run the command below from the root of your project directory to server the app on port 5001. Once done, open up http://localhost:5001 in your browser to view the application.\n\n```\n    http-server -p 5001\n```\n\nOnce the **ENABLE NOTIFICATIONS** button is clicked, you’ll get a prompt asking you to grant permission to show notifications. Make sure to grant that permission, otherwise you won’t get any notifications.\n\nIf you look at the code in `main.js` you will see that we are subscribed to the `github` channel so we will receive any `push` events once they are triggered. In the callback function, `showNotification()` is invoked which displays a realtime notification to the user whenever someone pushes code to the GitHub repo.\n\nFinally, make some changes to the GitHub repository you created earlier, commit the changes and push to GitHub. You should get a notification informing you of the new push activity.\n\n![html5-notification-demo](//images.ctfassets.net/1es3ne0caaid/6oxEp972QE8ico8IgUsoeG/a3d1ea90b236c6178232f7bae30191de/html5-notification-demo.png)\n\n## Conclusion\n\nWe’ve demonstrated how Pusher makes sending realtime web notifications much easier and how you can get started with it. All the code written in this tutorial is available [on GitHub](https://github.com/ayoisaiah/web-notifications-demo/) for you to check out and run locally.","metaTitle":"Use the HTML5 Notification API to provide realtime alerts","metaDescription":"This brief tutorial will show you how to create a web application that sends a browser alert every time a GitHub repo receives a push. You will use Node to create a simple server, ngrok to allow you to test locally, and GitHub webhooks to transmit the push event."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3m0gfzuNEsui62aYUI8QgI","type":"Entry","createdAt":"2018-11-14T19:23:28.246Z","updatedAt":"2018-11-14T19:23:28.246Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"View your live Spotify history with React and Node","url":"spotify-history-react-node","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/music-history","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2018-11-14","description":"Build a web app using Node and React to view your Spotify history. The app allows users to link up to their Spotify account and view a list of tracks played, with new tracks being added as they play.","prerequisite":"You will need Node 6+ installed on your machine. Some knowledge of Node and React will be helpful.","content":"In this tutorial, we’ll be creating an application that displays your Spotify music history in realtime. Once you connect a Spotify account, it’ll display a list of your 10 most recently played tracks. Then it’ll keep updating that list as you play more songs. The final result will look like this:\n\n![spotify-history-demo](//images.ctfassets.net/1es3ne0caaid/37NQjj1rGw0kysyWwqqGk4/c787a45b5fa976e4a273824ff79502d1/spotify-history-demo.gif)\n\n## Prerequisites\n\nExperience with building Node.js and React applications is required to grasp the concepts explored in this tutorial. You also need Node.js (v6 and later) along with npm on your machine to run the commands and code included in this article. You can find installation instructions [here](https://www.npmjs.com/get-npm).\n\n## Getting started\n\nCreate a new folder for this project in your filesystem. You can call it `spotify-history` or just `spotify`. Open up your terminal and `cd` into the newly created directory. Next, run the command below to initialize a new Node.js project:\n\n```\n    npm init -y\n```\n\nThe above command creates a new `package.json` file in the current directory. Now let’s install the dependencies we’ll be needing to build the server component of our application.\n\nRun the following command in the terminal to install the required packages. I’ll explain what each one does as we progress through the tutorial.\n\n```\n    npm install express cors nedb dotenv node-cron node-fetch pusher --save\n```\n\nOnce the server dependencies have been installed, run the command below to install [create-react-app](https://github.com/facebook/create-react-app) globally on your machine. This tool helps us bootstrap React apps quickly with no build configuration.\n\n```\n    npm install -g create-react-app\n```\n\nOnce the installation completes, you'll have access to the `create-react-app` command that will be used to set up the React project. Next, run the following command from within the root of your project directory to create the frontend component of the app.\n\n```\n    create-react-app client\n```\n\nThis command creates a new `client` directory and installs all the packages that are needed to build and run a React application within it.\n\nNext, change into the newly created `client` directory and run the command below install some additional dependencies that we’ll be needing in our application frontend:\n\n```\n    npm install pusher-js date-fns --save\n```\n\nFinally, run `npm start` within the `client` directory to start the development server. It should be available at http://localhost:3000 or some other port if 3000 is not available on your machine.\n\n\n## Create the application frontend\n\nLet’s begin by changing up the code in  `client/src/App.js` to look like this:\n\n``` javascript\n    // client/src/App.js\n    \n    import React, { Component } from 'react';\n    import Pusher from 'pusher-js';\n    import format from 'date-fns/format';\n    import './App.css';\n    \n    class App extends Component {\n      constructor() {\n        super();\n        const urlParams = new URLSearchParams(window.location.search);\n        const isUserAuthorized = urlParams.has('authorized') ? true : false;\n    \n        this.state = {\n          isUserAuthorized,\n          musicHistory: [],\n        };\n      }\n      \n      render() {\n        const { isUserAuthorized, musicHistory } = this.state;\n        const connectSpotify = isUserAuthorized ? (\n          ''\n        ) : (\n          \u003ca href=\"http://localhost:5000/login\"\u003eConnect your Spotify account\u003c/a\u003e\n        );\n    \n        const TableItem = (item, index) =\u003e (\n          \u003ctr key={item.played_at}\u003e\n            \u003ctd\u003e{index + 1}\u003c/td\u003e\n            \u003ctd\u003e{item.track_name}\u003c/td\u003e\n            \u003ctd\u003e{format(item.played_at, 'D MMM YYYY, hh:mma')}\u003c/td\u003e\n          \u003c/tr\u003e\n        );\n    \n        const RecentlyPlayed = () =\u003e (\n          \u003cdiv className=\"recently-played\"\u003e\n            \u003ch2\u003eRecent Tracks\u003c/h2\u003e\n            \u003ctable className=\"table\"\u003e\n              \u003cthead\u003e\n                \u003ctr\u003e\n                  \u003cth\u003e#\u003c/th\u003e\n                  \u003cth\u003eSong title\u003c/th\u003e\n                  \u003cth\u003eTime\u003c/th\u003e\n                \u003c/tr\u003e\n              \u003c/thead\u003e\n              \u003ctbody\u003e{musicHistory.map((e, index) =\u003e TableItem(e, index))}\u003c/tbody\u003e\n            \u003c/table\u003e\n          \u003c/div\u003e\n        );\n    \n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cheader className=\"header\"\u003e\n              \u003ch1\u003eSpotify Listening History\u003c/h1\u003e\n              \u003cp\u003eView your music history in realtime with Spotify and Pusher\u003c/p\u003e\n    \n              {connectSpotify}\n              {musicHistory.length !== 0 ? \u003cRecentlyPlayed /\u003e : null}\n            \u003c/header\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nWe’ve initialized the state of the application with two values: `isUserAuthorized` which keeps track of whether the user has authenticated with Spotify or not via a URL parameter, and `musicHistory` which is where all the recently played tracks will be stored. If `isUserAuthorized` is set to false (which it is by default), a link that prompts the user to connect a Spotify account to the app will be displayed on the screen.\n\nLet’s change up the styles for the app in `client/src/App.css`:\n\n``` css\n    // client/src/App.css\n    \n    .App {\n      width: 100%;\n      max-width: 750px;\n      margin: 0 auto;\n      padding: 30px;\n      text-align: center;\n    }\n    \n    table {\n      width: 100%;\n      text-align: center;\n    }\n    \n    th,\n    td {\n      padding: 12px 15px;\n      border-bottom: 1px solid #E1E1E1; }\n    th:first-child,\n    td:first-child {\n      padding-left: 0; }\n    th:last-child,\n    td:last-child {\n    padding-right: 0; }\n```\n\n## Set up the server\n\nIn the root of your project directory, create a new `server.js` file and change its contents to look like this:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    const Datastore = require('nedb');\n    const cron = require('node-cron');\n    const Pusher = require('pusher');\n    \n    const clientUrl = process.env.CLIENT_URL;\n    \n    const app = express();\n    \n    const db = new Datastore();\n    \n    app.use(cors());\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nNext, create a file called `variables.env` also in the root of your project folder. This is where all the environmental variables will be stored so that they can be made available on `process.env`. The `dotenv` package is what allows us to achieve this.\n\n```\n    // variables.env\n    \n    PORT=5000\n    CLIENT_URL=https://localhost:3000\n```\n\nThe `CLIENT_URL` variable is the URL where the React development server is available on. You can change the value if your app is running on another port.\n\n## Sign up for Spotify\n\nBefore you can access and use Spotify’s API, you need to [create a free account](https://www.spotify.com/signup/). You don’t need to be on the premium plan to follow through with this tutorial. Once you have done so, go to the [developer dashboard](https://developer.spotify.com/dashboard/) and log in to with your Spotify account. Accept the terms of service and create your first app by selecting any one of the three options presented.\n\n![spotify-history-signup](//images.ctfassets.net/1es3ne0caaid/3hE8aVYYzuK4MmOSYEAke2/4eafa968232a3138d01a4c6576e9f095/spotify-history-signup.png)\n\nFill the popup form as shown above and hit **Next** to move along. Hit **No** on the **Are you developing a commercial integration?** screen and tick all the checkboxes on the final screen before hitting the green **SUBMIT** button to create the app.\n\n![spotify-history-keys](//images.ctfassets.net/1es3ne0caaid/2IUr6YjSGcGGuSoA6EWUWw/ee5f5cc81c7f2800533cfa125dadb534/spotify-history-keys.png)\n\nOnce your app has been created, you will be redirected to the app page where you can access your Client ID and Client Secret tokens. You will find this at the top left of your screen. Also hit the **EDIT SETTINGS** button at the top right and add the redirect URI (http://localhost:5000/callback) in the popup form that appears, then hit the **ADD** button. Finally hit **SAVE** at the bottom of the form to save your settings.\n\n![spotify-history-settings](//images.ctfassets.net/1es3ne0caaid/7ykPNnlWrmukW4sO4KIQkC/f5c8528fdb9feb0c77d81f97269aa5ca/spotify-history-settings.png)\n\nAdd the following variables to your `variable.env` file:\n\n```\n    // variables.env\n    \n    SPOTIFY_CLIENT_ID=\u003cyour spotify client id\u003e\n    SPOTIFY_CLIENT_SECRET=\u003cyour spotify client secret\u003e\n    SPOTIFY_REDIRECT_URI=http://localhost:5000/callback\n```\n\nNext, create new `credentials.js` file in your project directory and change its contents to look like this:\n\n``` javascript\n    // credentials.js\n    \n    const spotify = {\n      client_id: process.env.SPOTIFY_CLIENT_ID,\n      client_secret: process.env.SPOTIFY_CLIENT_SECRET,\n      redirect_uri: process.env.SPOTIFY_REDIRECT_URI,\n    };\n    \n    module.exports = spotify;\n```\n\n## Create the authentication flow\n\nWe need to create a flow for authorizing users’ Spotify accounts to work with our app. We can do this by creating the login route in the server, which is where the user hits the **Connect your Spotify account** link is clicked on the app frontend.\n\nCreate a new file called `authorizeSpotify.js` and paste in the following code within it:\n\n``` javascript\n    // authorizeSpotify.js\n    \n    const spotify = require('./credentials');\n    \n    const authorizeSpotify = (req, res) =\u003e {\n      const scopes = 'user-read-recently-played';\n    \n      const url = `https://accounts.spotify.com/authorize?\u0026client_id=${\n        spotify.client_id\n      }\u0026redirect_uri=${encodeURI(\n        spotify.redirect_uri\n      )}\u0026response_type=code\u0026scope=${scopes}`;\n    \n      res.redirect(url);\n    };\n    \n    module.exports = authorizeSpotify;\n```\n\nNext  import this module into `server.js` and use it in the a new `/login` route as shown below:\n\n``` javascript\n    // server.js\n    \n    ...\n    const Pusher = require('pusher');\n    const authorizeSpotify = require('./authorizeSpotify');\n    \n    ...\n    app.use(bodyParser.urlencoded({ extended: true }));\n    app.get('/login', authorizeSpotify);\n    ...\n```\n\nWhenever, the user hits the `/login` route (by trying to connect a Spotify account), the app generates a request where the user is prompted to grant the  `user-read-recently-played` permission.\n\nWhen the user grants the permission, it will redirect back to the redirect URL you specified while creating the app (http://localhost:5000/callback). We need to grab the code that is included in the URL parameters and exchange it for an access token which will be used when interacting with the Spotify API. Let’s write the code that’ll do just that in the next step.\n\nCreate a new file called `getAccessToken.js` and paste the following code inside it:\n\n``` javascript\n    // getAccessToken.js\n    \n    const fetch = require('node-fetch');\n    const spotify = require('./credentials');\n    \n    const getAccessToken = (req, res, next) =\u003e {\n      const { code } = req.query;\n    \n      if (code) {\n        const url = 'https://accounts.spotify.com/api/token';\n    \n        const data = {\n          grant_type: 'authorization_code',\n          code,\n          redirect_uri: spotify.redirect_uri,\n          client_id: spotify.client_id,\n          client_secret: spotify.client_secret,\n        };\n    \n        const headers = {\n          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n        };\n    \n        const searchParams = new URLSearchParams();\n    \n        Object.keys(data).forEach(prop =\u003e {\n          searchParams.set(prop, data[prop]);\n        });\n    \n        fetch(url, {\n          method: 'POST',\n          headers,\n          body: searchParams,\n        })\n          .then(res =\u003e res.json())\n          .then(credentials =\u003e {\n            req.credentials = credentials;\n            next();\n          })\n          .catch(next);\n      }\n    };\n    \n    module.exports = getAccessToken;\n```\n\nNext, require `getAccessToken` in `server.js` and use it in the `/callback` route as shown below:\n\n``` javascript\n    // server.js\n    \n    ...\n    const authorizeSpotify = require('./authorizeSpotify');\n    const getAccessToken = require('./getAccessToken');\n    \n    ...\n    app.get('/login', authorizeSpotify);\n    app.get('/callback', getAccessToken);\n    ...\n```\n\nIn  `getAccessToken`, we grab the code off the URL parameters and exchange it for an access token by making a POST request to the Spotify Accounts service. When the requested credentials are received, they’re saved on the `req` object and  `next()` is invoked which executes the next middleware.\n\nLet’s go ahead and create the succeeding middleware in the next step. This middleware is tasked with saving the credentials received from Spotify to a temporary database. Here’s the code that helps us achieve that:\n\n``` javascript\n    // server.js\n    ...\n    app.get('/login', authorizeSpotify);\n    app.get('/callback', getAccessToken, (req, res, next) =\u003e {\n      db.insert(req.credentials, err =\u003e {\n        if (err) {\n          next(err);\n        } else {\n          res.redirect(`${clientUrl}/?authorized=true`);\n        }\n      });\n    });\n```\n\nThis code allows us to redirect the user back to the app frontend once the credentials have been saved to the database. Notice the `?authorized=true` parameter? That presence of that in the URL lets us detect that authorization was successful and `isUserAuthorized` will now be set to `true` in the app frontend.\n\n## Fetch the user’s recently played tracks\n\nNow that we know that authorization with the Spotify API was successful, we need to fetch the 10 most recently played tracks of the user and display it on the page. At this point, you should start listening to some music on Spotify if your account is new so that some songs will show up when this request is performed.\n\nUnder the `constructor()` function, add the `componentDidMount()` lifecycle hook to your React app and paste the following code within it:\n\n``` javascript\n    // client/src/App.js\n    \n    componentDidMount() {\n      const { isUserAuthorized } = this.state;\n    \n      if (isUserAuthorized) {\n        fetch('http://localhost:5000/history')\n          .then(res =\u003e res.json())\n          .then(data =\u003e {\n            this.setState({\n              musicHistory: data,\n            });\n          })\n          .catch(error =\u003e console.log(error));\n      }\n    }\n```\n\nWe’re making a request to the `/history` route and we expect the 10 most recently played songs on the users’ account to be sent back. Let’s create this route on the server in the next step.\n\nCreate a file called `getRecentlyPlayed` and paste the code below within it. This is where the actual request to Spotify is performed.\n\n``` javascript\n    // getRecentlyPlayed.js\n    \n    const fetch = require('node-fetch');\n    \n    const getRecentlyPlayed = accessToken =\u003e {\n      const url = 'https://api.spotify.com/v1/me/player/recently-played?limit=10';\n    \n      return fetch(url, {\n        method: 'GET',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${accessToken}`,\n        },\n      })\n        .then(res =\u003e res.json())\n        .then(data =\u003e data.items)\n        .catch(error =\u003e console.log(error));\n    };\n    \n    module.exports = getRecentlyPlayed;\n```\n\nNext, import it in `server.js` and add the `/history` route below the other two:\n\n``` javascript\n    // server.js\n    \n    ...\n    const getAccessToken = require('./getAccessToken');\n    const getRecentlyPlayed = require('./getRecentlyPlayed');\n    \n    ...\n    app.get('/history', (req, res) =\u003e {\n      db.find({}, (err, docs) =\u003e {\n        if (err) {\n          throw Error('Failed to retrieve documents');\n        }\n    \n        const accessToken = docs[0].access_token;\n        getRecentlyPlayed(accessToken)\n          .then(data =\u003e {\n            const arr = data.map(e =\u003e ({\n              played_at: e.played_at,\n              track_name: e.track.name,\n            }));\n    \n            res.json(arr);\n          })\n          .catch(err =\u003e console.log(err));\n      });\n    });\n```\n\nAt this point, if the user is authenticated and this route is hit, the most recently played songs will be sent to the frontend and displayed on the page.\n\n![spotify-history-partial](//images.ctfassets.net/1es3ne0caaid/1qqnFvWVQgku0iKmEaW4O4/a2d0141ad82128558ce664c7b8be3b87/spotify-history-partial.png)\n\n## Set up realtime updates with Pusher\n\nThe next task is to make the list of songs update on the page as you continue to listen. Head over to the Pusher website and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). Select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app. Once your app is created, retrieve your credentials from the **API Keys** tab, then add the following to your `variables.env` file.\n\n```\n    // variables.env\n    \n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\nWe’re going to set up a cron job to run every five minutes, retrieve the most recently played songs and merge it with the existing list of recent tracks so that new songs are displayed on top. Change up `server.js` to look like this:\n\n``` javascript\n    // server.js\n    \n    ....\n    const db = new Datastore();\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    ...\n    app.get('/history', (req, res) =\u003e {\n      db.find({}, (err, docs) =\u003e {\n        if (err) {\n          throw Error('Failed to retrieve documents');\n        }\n    \n        const accessToken = docs[0].access_token;\n        getRecentlyPlayed(accessToken)\n          .then(data =\u003e {\n            const arr = data.map(e =\u003e ({\n              played_at: e.played_at,\n              track_name: e.track.name,\n            }));\n    \n            res.json(arr);\n          })\n          .then(() =\u003e {\n            cron.schedule('*/5 * * * *', () =\u003e {\n              getRecentlyPlayed(accessToken).then(data =\u003e {\n                const arr = data.map(e =\u003e ({\n                  played_at: e.played_at,\n                  track_name: e.track.name,\n                }));\n    \n                pusher.trigger('spotify', 'update-history', {\n                  musicHistory: arr,\n                });\n              });\n            });\n          })\n          .catch(err =\u003e console.log(err));\n      });\n    });\n```\n\nOnce the initial listing is made, a cron job is triggered that runs every five minutes. That’s what the `*/5 * * * *` string signifies. The user’s most recently played tracks are fetched and pushed to the `spotify` channel via the `update-history` event. Any client that is subscribed to this channel can receive the latest data and update the list of tracks on the page.\n\nLet’s go ahead and do just that in the frontend of our app. Update the `componentDidMount()` lifecycle hook in `client/src/App.js` to look like this:\n\n``` javascript\n    // client/src/App.js\n    \n    componentDidMount() {\n      const { isUserAuthorized } = this.state;\n    \n      if (isUserAuthorized) {\n        fetch('http://localhost:5000/history')\n          .then(res =\u003e res.json())\n          .then(data =\u003e {\n            this.setState({\n              musicHistory: data,\n            });\n          })\n          .catch(error =\u003e console.log(error));\n    \n        const pusher = new Pusher('\u003cyour app key\u003e', {\n          cluster: '\u003cyour app cluster\u003e',\n          encrypted: true,\n        });\n    \n        const channel = pusher.subscribe('spotify');\n        channel.bind('update-history', data =\u003e {\n          this.setState(prevState =\u003e {\n            const arr = data.musicHistory\n              .map(item =\u003e {\n                const isPresent = prevState.musicHistory.find(\n                  e =\u003e e.played_at === item.played_at\n                );\n                if (isPresent === undefined) {\n                  return item;\n                } else {\n                  return null;\n                }\n              })\n              .filter(Boolean);\n            return {\n              musicHistory: arr.concat(prevState.musicHistory),\n            };\n          });\n        });\n      }\n    }\n```\n\nHere, we opened a connection to Channels and used the `subscribe()` method  to subscribe to the `spotify` channel. Updates to the user’s music history are listened for via the `bind` method. Once an update is received, the data is merged with the existing one so that the list is updated with the latest tracks.\n\nDon’t forget to replace the `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e` placeholders with the appropriate details from your Pusher account dashboard.\n\nStart your server by running `node server.js` and link your Spotify account on the frontend. As long as you continue to play music, you should see the page update with your most recent tracks updates.\n\n## Conclusion\n\nThat’s it! In this tutorial, you learned how to view your Spotify music history in realtime with React and Pusher. Along the way, you learned how to use Spotify’s API, and Pusher Channels to send and receive data in realtime.\n\nYou can find the app’s source code in this [GitHub repo](https://github.com/ayoisaiah/music-history).","metaTitle":"View your live Spotify history with React and Node","metaDescription":"Build a web app using Node and React to view your Spotify history. The app allows users to link up to their Spotify account and view a list of tracks played, with new tracks being added as they play."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"xmvFyFo8GyCU6acuyo2My","type":"Entry","createdAt":"2018-10-15T18:24:47.488Z","updatedAt":"2018-11-12T17:12:56.801Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a photo sharing app with React Native","url":"photo-sharing-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNPhotoShare","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-11-12","description":"Use React Native, Node.js and Imgur to create a photo sharing app. Users will be able to follow their friends and share their own photos with their followers. New photos will be published and shared in realtime.","prerequisite":"You will need Node 8+ and the Expo CLI and SDK installed on your machine. Some knowledge of React Native development will be helpful.","content":"In this tutorial, we’ll be creating a realtime photo-sharing app with React Native and Pusher Channels. \n\n## Prerequisites\n\nBasic knowledge of React Native is required is in order to follow along. We’ll also be using [Redux](https://redux.js.org/) in some parts of the app so basic knowledge of it will be helpful as well.\n\nWe’ll be using [Expo](https://expo.io/) in order to easily test the app on multiple devices. Download the Expo client app for your [iOS](https://itunes.apple.com/us/app/expo-client/id982107779?mt=8) or [Android](https://play.google.com/store/apps/details?id=host.exp.exponent\u0026hl=en) device.\n\nThese are the package versions used in creating the app:\n\n\n- Node 8.3.0\n- Yarn 1.7.0\n- Expo CLI 2.0.0\n- Expo SDK 30.0.0\n- Pusher 4.3.1\n- React Navigation 2.14.0\n\nYou don’t necessarily have to use the versions above, but if you encounter problems when using other versions, I recommend you to use the ones above instead. For other packages used in the app, be sure to check out the `package.json` file found in the [GitHub repo](https://github.com/anchetaWern/RNPhotoShare).\n\nWe’ll be using Pusher and Imgur in this tutorial so you need to have an account on both of those services:\n\n\n- [Pusher](http://pusher.com/)\n- [Imgur](https://imgur.com/register)\n\n\n## App overview\n\nWhen the user first opens the app, they’ll be greeted by the following screen. From here, they can either choose to share photos or view them by subscribing to another user who chose to share their photo:\n\n![react-native-photo-share-homepage](//images.ctfassets.net/1es3ne0caaid/3HcHtirrO0uwwgwa8gAQQw/8403a2f60c25d96dd5a27a52ce808cd1/react-native-photo-share-homepage.png)\n\nWhen a user chooses **Share**, they’ll be assigned a unique username, which they can share with anyone. This sharing mechanism will be entirely outside the app, so it can be anything (For example, email or SMS):\n\n![react-native-photo-share-share-screen](//images.ctfassets.net/1es3ne0caaid/5djOaJHu7SEmUEeEYqyKQK/5606ea888ba1d2c57977f323024421c4/react-native-photo-share-share-screen.png)\n\nHere’s what it looks like when someone chooses **View**. On this screen, they have to enter the username assigned to the user they want to follow:\n\n![react-native-photo-share-follow](//images.ctfassets.net/1es3ne0caaid/36VjMRTrAQyCkmWSumYYk8/86034cb4c4f690912d53e6d00f32422b/react-native-photo-share-follow.png)\n\nGoing back to the user who selected **Share**, here’s what their screen will look like when they click on the camera icon from earlier. This will allow the user to take a photo, flip the camera, or close it:\n\n![react-native-photo-share-camera](//images.ctfassets.net/1es3ne0caaid/7GUgMyZVKMCAs0m4m4uACc/4bb3ae4b6ef1b91385dc067196f3f73c/react-native-photo-share-camera.png)\n\nOnce they take a snap, the camera UI will close and the photo will be previewed. At this point, the photo should have already started uploading in the background using the Imgur API:\n\n![react-native-photo-share-preview](//images.ctfassets.net/1es3ne0caaid/67D4M5ttYcKsyo0wuIgwq0/86a3b74cf8aba2e8a895ad2418849f20/react-native-photo-share-preview.png)\n\nSwitching back to the follower (the user who clicked on **View**), once the upload is finished, the Imgur API should return the image URL and its unique ID. Those data are then sent to the Pusher channel which the follower has subscribed to. This allows them to also see the shared photo:\n\n![react-native-photo-share-photo-received](//images.ctfassets.net/1es3ne0caaid/3QWCIyl3w4kuUIysMgoymA/7db155610e74f1d47095cb3f3c7e594e/react-native-photo-share-photo-received.png)\n\nIt’s not shown in the screenshot above, but everytime a new photo is received, it will automatically be appended to the top of the list.\n\nYou can find the app’s source code in this [GitHub repo](https://github.com/anchetaWern/RNPhotoShare).\n\n\n## Create Pusher and Imgur apps\n\nOn your [Pusher dashboard](https://dashboard.pusher.com/), create a new app and name it **RNPhotoShare**. Once it’s created, go to app settings and enable client events. This will allow us to directly trigger events from the app:\n\n![react-native-photo-share-enable-client-events](//images.ctfassets.net/1es3ne0caaid/1PhoIFNEOQKA0AoaKqqoMW/856f0fe856a794e95700342da0fa917b/react-native-photo-share-enable-client-events.png)\n\nNext, after logging in to your Imgur account, go to [this page](https://api.imgur.com/oauth2/addclient) and register an app. The most important setting here is the **Authorization type**. Select **Anonymous usage without user authorization** as we will only be uploading images anonymously. **Authorization callback URL** can be any value because we won’t really be using it. Other than that, you can enter any value for the other fields:\n\n![react-native-photo-share-imgur-app](//images.ctfassets.net/1es3ne0caaid/74FnQEJcdyAqaWgq8qugiK/59e01a1269e38c32cf9494ad3e62ecd3/react-native-photo-share-imgur-app.png)\n\nClick **Submit** to create the app. This will show you the app ID and app secret. We’re only going to need the app ID so take note of that. In case you lose the app ID, you can view all the Imgur apps you created [here](https://imgur.com/account/settings/apps).\n\n\n## Building the app\n\nStart by cloning the project repo and switch to the `starter` branch:\n\n```\n    git clone https://github.com/anchetaWern/RNPhotoShare.git\n    cd RNPhotoShare\n    git checkout starter\n```\n\nThe `starter` branch contains the bare-bones app template, navigation, components, and all of the relevant styles which we will be using later on. Having all of those in the starter allows us to focus on the main meat of the app.\n\nInstall the packages using [Yarn](https://yarnpkg.com/):\n\n```\n    yarn install\n```\n\nHere’s a quick overview of what each package does:\n\n\n- `expo` - the Expo SDK. This includes the Camera API and the icons that we will be using in the app.\n- `random-animal-name-generator` - for generating the unique usernames for users who want to share photos.\n- `pusher-js` - the JavaScript library for working with Pusher.\n- `react-navigation` - for implementing navigation within the app.\n- `prop-types` - for validating the props added to components on runtime.\n- `whatwg-fetch` - there’s a [recent issue](https://forums.expo.io/t/cant-find-variable-self/13547) with the latest version of the `whatwg-fetch` package that Expo uses, so we need to install a lower version through the main project in order to fix the issue.\n- `redux` - for adding and managing global app state.\n- `react-redux` - for working with Redux within the React environment.\n\n### Home screen\n\nLet’s first start with the Home screen by importing all the necessary packages:\n\n``` javascript\n    // src/screens/HomeScreen.js\n    import React, { Component } from \"react\";\n    import { View, Text, Button } from \"react-native\";\n    \n    import Pusher from \"pusher-js/react-native\";\n```\n\nBy default, React Navigation will display a header on every page, we don’t want that in this page so we disable it. In the constructor, we initialize the value of the Pusher client. We will be using this to connect to Pusher and trigger and subscribe to events:\n\n``` javascript\n    export default class HomeScreen extends Component {\n      static navigationOptions = {\n        header: null // don't display header\n      };\n    \n      constructor(props) {\n        super(props);\n        this.pusher = null;\n      }\n      \n      // next: add componentDidMount\n    }\n```\n\nOnce the component is mounted, we initialize the Pusher client using the app key and app cluster from your app settings. As for the `authEndpoint`, retain the value below for now, we will be updating it later before we run the app:\n\n``` javascript\n    componentDidMount() {\n      this.pusher = new Pusher(\"YOUR PUSHER APP KEY\", {\n        authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n        cluster: \"YOUR PUSHER APP CLUSTER\",\n        encrypted: true // false doesn't work, you need to always use https for the authEndpoint\n      });\n    }\n    \n    // next: add render method\n```\n\nNext, we render the UI for the Home screen. This contains two buttons that allow the user to navigate to either the Share screen or the View screen. In both cases, we pass in the reference to the Pusher client as a navigation param. This allows us to use Pusher on both pages:\n\n``` javascript\n    render() {\n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cText style={styles.mainText}\u003eWhat to do?\u003c/Text\u003e\n    \n          \u003cView style={styles.buttonContainer}\u003e\n            \u003cButton\n              title=\"Share\"\n              color=\"#1083bb\"\n              onPress={() =\u003e {\n                this.props.navigation.navigate(\"Share\", {\n                  pusher: this.pusher\n                });\n              }}\n            /\u003e\n          \u003c/View\u003e\n    \n          \u003cView style={styles.buttonContainer}\u003e\n            \u003cButton\n              title=\"View\"\n              color=\"#2f9c0a\"\n              onPress={() =\u003e {\n                this.props.navigation.navigate(\"View\", {\n                  pusher: this.pusher\n                });\n              }}\n            /\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\n### Share screen\n\nNext is the Share screen. This is where the user can take pictures with the in-app camera and share it on realtime to people who have followed their username. \n\nStart by importing all the packages we’ll need. Most of these should look familiar, except for `Clipboard`. We’ll be using it to copy the user’s username to the clipboard so they can easily share it on another app:\n\n``` javascript\n    // src/screens/ShareScreen.js\n    import React, { Component } from \"react\";\n    import {\n      View,\n      Text,\n      TouchableOpacity,\n      Clipboard,\n      Alert,\n      Image,\n      Dimensions,\n      Button,\n      ScrollView\n    } from \"react-native\";\n```\n\nNext are the Expo packages and the random animal name generator. For Expo, we need the `Camera` for rendering a bare-bones camera UI and the `Permissions` to ask the user to access the camera:\n\n``` javascript\n    import { MaterialIcons } from \"@expo/vector-icons\";\n    import { Camera, Permissions } from \"expo\";\n    import generateRandomAnimalName from \"random-animal-name-generator\"; // for generating unique usernames\n```\n\nNext, add a button in the header. This will allow the user to stop sharing their photos. When this button is clicked, all users who are currently subscribed to this user will stop receiving updates:\n\n``` javascript\n    export default class ShareScreen extends Component {\n      static navigationOptions = ({ navigation }) =\u003e {\n        const { params } = navigation.state;\n        return {\n          title: \"Share Photos\",\n          headerTransparent: true,\n          headerRight: (\n            \u003cButton\n              title=\"Finish\"\n              color=\"#333\"\n              onPress={() =\u003e params.finishSharing()}\n            /\u003e\n          ),\n          headerTintColor: \"#333\"\n        };\n      };\n      \n      // next: initialize state\n    }\n```\n\nNext, initialize the state:\n\n``` javascript\n    state = {\n      hasCameraPermission: null, // whether the user has allowed the app to access the device's camera\n      cameraType: Camera.Constants.Type.front, // which camera to use? front or back?\n      isCameraVisible: false, // whether the camera UI is currently visible or not\n      latestImage: null // the last photo taken by the user\n    };\n    \n    // next: add constructor\n```\n\nIn the constructor, we generate a unique username for the user. This is composed of the funny animal name from the `random-animal-name-generator` library and a random number. Here, we also initialize the value for the Pusher client (we’ll get it from the navigation params shortly) and the `user_channel` where we will emit the event for sharing photos. Since this screen is where the Camera UI will be rendered, we also want the user to be able to change the screen orientation. That way, they can capture both portrait and landscape photos:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      // generate unique username\n      const animalName = generateRandomAnimalName()\n        .replace(\" \", \"_\")\n        .toLowerCase();\n      const min = 10;\n      const max = 99;\n      const number = Math.floor(Math.random() * (max - min + 1)) + min;\n      const username = animalName + number;\n      this.username = username;\n      \n      // initialize pusher\n      this.pusher = null;\n      this.user_channel = null;\n      \n      // allow changing of screen orientation\n      Expo.ScreenOrientation.allow(\n        Expo.ScreenOrientation.Orientation.ALL_BUT_UPSIDE_DOWN // enable all screen orientations except upside-down/reverse portrait\n      );\n    }\n    \n    // next: add componentDidMount\n```\n\nOnce the component is mounted, we set the `finishSharing` method as a navigation param. We’ll define this method later, but for now, know that this is used for unsubscribing the user from their own channel. We’re subscribing to that channel right below that code. This allows us to listen to or trigger messages from this channel. Lastly, we ask for permission from the user to access the camera:\n\n``` javascript\n    async componentDidMount() {\n      const { navigation } = this.props;\n    \n      navigation.setParams({\n        finishSharing: this.finishSharing\n      });\n    \n      // subscribe to channel\n      this.pusher = navigation.getParam(\"pusher\");\n      this.user_channel = this.pusher.subscribe(`private-user-${this.username}`);\n    \n      // ask user to access device camera\n      const { status } = await Permissions.askAsync(Permissions.CAMERA);\n      this.setState({ hasCameraPermission: status === \"granted\" });\n    }\n    // next: add render method\n```\n\nFor those who are working with Pusher for the first time, the way it works is that you first have to subscribe the users to a channel. Anyone who is subscribed to this channel will be able to trigger and listen for messages sent through that channel by means of “events”. Not all users who are subscribed to the channel need to know all about the events being sent through that channel, that’s why users can selectively bind to specific events only.\n\nNext, we render the contents of the Share screen. In this case, there are only two possible contents: one where only the camera UI is visible, and the other where only the box containing the username and a button (for opening the camera) is visible:\n\n``` javascript\n    render() {\n      return (\n        \u003cView style={styles.container}\u003e\n          {!this.state.isCameraVisible \u0026\u0026 (\n            \u003cScrollView contentContainerStyle={styles.scroll}\u003e\n              \u003cView style={styles.mainContent}\u003e\n                \u003cTouchableOpacity onPress={this.copyUsernameToClipboard}\u003e\n                  \u003cView style={styles.textBox}\u003e\n                    \u003cText style={styles.textBoxText}\u003e{this.username}\u003c/Text\u003e\n                  \u003c/View\u003e\n                \u003c/TouchableOpacity\u003e\n                \u003cView style={styles.buttonContainer}\u003e\n                  \u003cTouchableOpacity onPress={this.openCamera}\u003e\n                    \u003cMaterialIcons name=\"camera-alt\" size={40} color=\"#1083bb\" /\u003e\n                  \u003c/TouchableOpacity\u003e\n                \u003c/View\u003e\n    \n                {this.state.latestImage \u0026\u0026 (\n                  \u003cImage\n                    style={styles.latestImage}\n                    resizeMode={\"cover\"}\n                    source={{ uri: this.state.latestImage }}\n                  /\u003e\n                )}\n              \u003c/View\u003e\n            \u003c/ScrollView\u003e\n          )}\n    \n          {this.state.isCameraVisible \u0026\u0026 (\n            \u003cCamera\n              style={styles.camera}\n              type={this.state.cameraType}\n              ref={ref =\u003e {\n                this.camera = ref;\n              }}\n            \u003e\n              \u003cView style={styles.cameraFiller} /\u003e\n              \u003cView style={styles.cameraContent}\u003e\n                \u003cTouchableOpacity\n                  style={styles.buttonFlipCamera}\n                  onPress={this.flipCamera}\n                \u003e\n                  \u003cMaterialIcons name=\"flip\" size={25} color=\"#e8e827\" /\u003e\n                \u003c/TouchableOpacity\u003e\n    \n                \u003cTouchableOpacity\n                  style={styles.buttonCamera}\n                  onPress={this.takePicture}\n                \u003e\n                  \u003cMaterialIcons name=\"camera\" size={50} color=\"#e8e827\" /\u003e\n                \u003c/TouchableOpacity\u003e\n    \n                \u003cTouchableOpacity\n                  style={styles.buttonCloseCamera}\n                  onPress={this.closeCamera}\n                \u003e\n                  \u003cMaterialIcons name=\"close\" size={25} color=\"#e8e827\" /\u003e\n                \u003c/TouchableOpacity\u003e\n              \u003c/View\u003e\n            \u003c/Camera\u003e\n          )}\n        \u003c/View\u003e\n      );\n    }\n    \n    // next: add copyUsernameToClipboard\n```\n\nIf you’ve read the app overview earlier, you should already have a general idea on what’s going on in the code above so I’ll no longer elaborate. Take note of the `ref` prop we’ve passed to the `Camera` component though. This allows us to get a reference to that instance of the `Camera` component and assign it to a local variable called `this.camera`. We will be using it later to take a picture using that camera instance.\n\nWhen the user clicks on the box containing the user’s username, this method is called and it sets the username to the clipboard:\n\n``` javascript\n    copyUsernameToClipboard = () =\u003e {\n      Clipboard.setString(this.username);\n      Alert.alert(\"Copied!\", \"Username was copied clipboard\");\n    };\n    \n    // next: add openCamera\n```\n\nNext, are the methods for opening the camera UI, flipping it (use either back or front camera), and closing it:\n\n``` javascript\n    openCamera = () =\u003e {\n      const { hasCameraPermission } = this.state;\n      if (!hasCameraPermission) {\n        Alert.alert(\"Error\", \"No access to camera\");\n      } else {\n        this.setState({ isCameraVisible: true });\n      }\n    };\n    \n    flipCamera = () =\u003e {\n      this.setState({\n        cameraType:\n          this.state.cameraType === Camera.Constants.Type.back\n            ? Camera.Constants.Type.front\n            : Camera.Constants.Type.back\n      });\n    };\n    \n    closeCamera = () =\u003e {\n      this.setState({\n        isCameraVisible: false\n      });\n    };\n    \n    // next: add takePicture\n```\n\nNext is the method for taking pictures. This is where we use the camera reference from earlier (`this.camera`) to call the `takePictureAsync` method from the Camera API. By default, the `takePictureAsync` method only returns an object containing the `width`, `height` and `uri` of the photo that was taken. That’s why we’re passing in an object containing the options we want to use. In this case, `base64` allows us to return the base64 representation of the image. This is what we set in the request body of the request we send to the Imgur API. Once we receive a response from the Imgur API, we extract the data that we need from the response body and trigger the `client-posted-photo` event so any subscriber who is currently listening to that event will receive the image data:\n\n``` javascript\n    takePicture = async () =\u003e {\n      if (this.camera) {\n        let photo = await this.camera.takePictureAsync({ base64: true }); // take a snap, and return base64 representation\n        \n        // construct\n        let formData = new FormData();\n        formData.append(\"image\", photo.base64); \n        formData.append(\"type\", \"base64\");\n    \n        this.setState({\n          latestImage: photo.uri, // preview the photo that was taken\n          isCameraVisible: false // close the camera UI after taking the photo\n        });\n    \n        const response = await fetch(\"https://api.imgur.com/3/image\", {\n          method: \"POST\",\n          headers: {\n            Authorization: \"Client-ID YOUR_IMGUR_APP_ID\" // add your Imgur App ID here\n          },\n          body: formData\n        });\n    \n        let response_body = await response.json(); // get the response body\n        \n        // send data to all subscribers who are listening to the client-posted-photo event\n        this.user_channel.trigger(\"client-posted-photo\", {\n          id: response_body.data.id, // unique ID assigned to the image\n          url: response_body.data.link // Imgur link pointing to the actual image\n        });\n      }\n    };\n    \n    // next: add finishSharing\n```\n\nNote that the name of the event has to have `client-` as its prefix, just like what we did above. This is because we’re triggering this event from the client side. It’s a naming convention used by Pusher so your event won’t work if you don’t follow it. Check out the [docs](https://pusher.com/docs/client_api_guide/client_events#trigger-events) for more information about this.\n\nOnce the user clicks on the **Finish** button, we unsubscribe them from their own channel. This effectively cuts off all communication between this user and all their followers:\n\n``` javascript\n    finishSharing = () =\u003e {\n      this.pusher.unsubscribe(`private-user-${this.username}`);\n      this.props.navigation.goBack(); // go back to home screen\n    };\n```\n\nFor production apps, it’s a good practice to first trigger an “ending” event right before the main user (the one who mainly triggers events) unsubscribes from their own channel. This way, all the other users will get notified and they’ll be able to clean up their connection before their source gets completely shut off.\n\n\n### View screen\n\nThe View screen is where users who want to follow another user go. Again, start by importing all the packages we need:\n\n``` javascript\n    // src/screens/ViewScreen.js\n    import React, { Component } from \"react\";\n    import {\n      View,\n      Text,\n      TextInput,\n      ScrollView,\n      Dimensions,\n      Button,\n      Alert\n    } from \"react-native\";\n    \n    import CardList from \"../components/CardList\";\n```\n\nNothing really new in the code above, except for the `CardList` component. This component is already included in the starter project so we don’t have to create it separately. What it does is render all the images that were sent by the user followed by the current user.\n\nNext, import all the Redux-related packages:\n\n``` javascript\n    // src/screens/ViewScreen.js\n    import { Provider } from \"react-redux\";\n    import { createStore } from \"redux\";\n    import reducers from \"../reducers\";\n    \n    import { addedCard } from \"../actions\";\n    \n    const store = createStore(reducers);\n```\n\nNext, we also add a button in the header. This time, to unfollow the user. We’re also passing in the function used here (`params.unfollow`) as a navigation param later inside the `componentDidMount` method:\n\n``` javascript\n    export default class ViewScreen extends Component {\n    \n      static navigationOptions = ({ navigation }) =\u003e {\n        const { params } = navigation.state;\n        return {\n          title: \"View Photos\",\n          headerTransparent: true,\n          headerTintColor: \"#333\",\n          headerRight: (\n            \u003cButton\n              title=\"Unfollow\"\n              color=\"#333\"\n              onPress={() =\u003e params.unFollow()}\n            /\u003e\n          )\n        };\n      };\n      \n      // next: initialize state\n    }\n```\n\nNext, initialize the state:\n\n``` javascript\n    state = {\n      subscribedToUsername: \"\", // the username of the user the current user is subscribed to\n      isSubscribed: false // is the user currently subscribed to another user?\n    };\n```\n\nIn the constructor, we also set the default value for the Pusher client and the user channel. In this case, the user channel will be whoever the current user is subscribed to. The current user doesn’t really need to trigger any events in the user channel, so we don’t have to generate a unique username and subscribe them to their own channel as we did in the Share screen earlier:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      this.pusher = null;\n      this.user_channel = null;\n    }\n    // next: add componentDidMount\n```\n\nOnce the component is mounted, we set the `unFollow` function as a navigation param and initialize the Pusher client:\n\n``` javascript\n    componentDidMount() {\n      const { navigation } = this.props;\n      navigation.setParams({ unFollow: this.unFollow }); // set the unFollow function as a navigation param\n    \n      this.pusher = navigation.getParam(\"pusher\");\n    }\n    \n    // next: add render\n```\n\nNext, we render the UI of the of the View screen. Here, we wrap everything in the `Provider` component provided by `react-redux`. This allows us to pass down the `store` so we could use it inside the `followUser` to dispatch the action for adding a new Card to the CardList:\n\n``` javascript\n    render() {\n      return (\n        \u003cProvider store={store}\u003e\n          \u003cView style={styles.container}\u003e\n            {!this.state.isSubscribed \u0026\u0026 (\n              \u003cView style={styles.initialContent}\u003e\n                \u003cText style={styles.mainText}\u003eUser to follow\u003c/Text\u003e\n                \u003cTextInput\n                  style={styles.textInput}\n                  onChangeText={subscribedToUsername =\u003e\n                    this.setState({ subscribedToUsername })\n                  }\n                \u003e\n                  \u003cText style={styles.textInputText}\u003e\n                    {this.state.subscribedToUsername}\n                  \u003c/Text\u003e\n                \u003c/TextInput\u003e\n    \n                \u003cView style={styles.buttonContainer}\u003e\n                  \u003cButton\n                    title=\"Follow\"\n                    color=\"#1083bb\"\n                    onPress={this.followUser}\n                  /\u003e\n                \u003c/View\u003e\n              \u003c/View\u003e\n            )}\n    \n            {this.state.isSubscribed \u0026\u0026 (\n              \u003cScrollView\u003e\n                \u003cView style={styles.mainContent}\u003e\n                  \u003cCardList /\u003e\n                \u003c/View\u003e\n              \u003c/ScrollView\u003e\n            )}\n          \u003c/View\u003e\n        \u003c/Provider\u003e\n      );\n    }\n    // next: add followUser\n```\n\nThe `followUser` method is where we add the code for subscribing to the username entered by the user in the text field. Once the subscription succeeds, only then can we listen for the `client-posted-photo` event. When we receive this event, we expect the `id` and `url` of the image to be present. We then use those to dispatch the action for adding a new Card on top of the CardList:\n\n``` javascript\n    followUser = () =\u003e {\n      this.setState({\n        isSubscribed: true\n      });\n      \n      // subscribe to the username entered in the text field\n      this.user_channel = this.pusher.subscribe(\n        `private-user-${this.state.subscribedToUsername}`\n      );\n      \n      // alert the user if there's an error in subscribing\n      this.user_channel.bind(\"pusher:subscription_error\", status =\u003e {\n        Alert.alert(\n          \"Error occured\",\n          \"Cannot connect to Pusher. Please restart the app.\"\n        );\n      });\n    \n      this.user_channel.bind(\"pusher:subscription_succeeded\", () =\u003e { // subscription successful\n        this.user_channel.bind(\"client-posted-photo\", data =\u003e { // listen for the client-posted-photo event to be triggered from the channel\n          store.dispatch(addedCard(data.id, data.url)); // dispatch the action for adding a new card to the list\n        });\n      });\n    };\n    \n    // next: add unFollow\n```\n\nLastly, add the `unFollow` method. This gets called when the user clicks on the **Unfollow** button in the header. This allows us to unsubscribe from the user we subscribed to earlier inside the `followUser` method:\n\n``` javascript\n    unFollow = () =\u003e {\n      this.pusher.unsubscribe(`private-user-${this.state.subscribedToUsername}`);\n      this.props.navigation.goBack(); // go back to the home page\n    };\n```\n\nUnsubscribing from a channel automatically unbinds the user from all the events they’ve previously bound to. This means they’ll no longer receive any new photos.\n\n### Adding the action and reducer\n\nEarlier in the `followUser` method of the `src/screens/ViewScreen.js` file, we dispatched the `addedCard` action. We haven’t really defined it yet so let’s go ahead and do so. Create an `actions` and `reducers` folder inside the `src` directory to house the files we’re going to create.\n\nTo have a single place where we define all the action types in this app, create a `src/actions/types.js` file and add the following:\n\n``` javascript\n    export const ADDED_CARD = \"added_card\";\n```\n\nIn the code above, all we do is export a constant which describes the action type. Nothing really mind-blowing, but this allows us to import and use this constant every time we need to use this specific action. This prevents us from making any typo when using this action.\n\nNext, create a `src/actions/index.js` file, this is where we define and export the action. We pass in the `ADDED_CARD` constant as a type along with the `id` and `url`. These are the unique ID and URL of the image which is received by the reducer everytime this action is dispatched:\n\n``` javascript\n    // src/actions/index.js\n    import { ADDED_CARD } from \"./types\";\n    \n    export const addedCard = (id, url) =\u003e {\n      return {\n        type: ADDED_CARD,\n        id: id,\n        url: url\n      };\n    };\n```\n\nNext, create a `src/``reducers/CardsReducer.js` file, this is where we add the reducer responsible for modifying the value of the `cards` array in the state. This gets executed every time we dispatch the `addedCard` action. When that happens, we simply return a new array containing the existing card objects and the new card object:\n\n``` javascript\n    // src/reducers/CardsReducer.js\n    import { ADDED_CARD } from \"../actions/types\";\n    \n    const INITIAL_STATE = {\n      cards: []\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      switch (action.type) {\n        case ADDED_CARD:\n          const cards = [...state.cards, { id: action.id, url: action.url }]; // return a new array containing the existing card objects and the new card object\n          return { ...state, cards };\n    \n        default:\n          return state;\n      }\n    };\n```\n\nNote that we’re adding it to the end of the new array instead of in the beginning. This is because the `FlatList` component which is responsible for rendering this data is `inverted`. This means that the items are rendered from bottom to top.\n\nLastly, combine all the reducers in a single file:\n\n``` javascript\n    // src/reducers/index.js\n    import { combineReducers } from \"redux\";\n    import CardsReducer from \"./CardsReducer\";\n    \n    export default combineReducers({\n      cards: CardsReducer\n    });\n```\n\nThe code above enabled us to import only a single file to include the reducers and use it for creating the store. Don't add this, as it was already added earlier:\n\n``` javascript\n    // src/screens/ViewScreen.js (don't add as it was already added earlier)\n    import reducers from \"../reducers\"; \n    const store = createStore(reducers);\n```\n\n### Update the CardList component\n\nIf you saw the `CardList` component from the codes of the View screen earlier, you might have noticed that we haven’t really passed any props to it. So how will it have any data to render?\n\n``` javascript\n    // src/screens/ViewScreen.js\n    {this.state.isSubscribed \u0026\u0026 (\n      \u003cScrollView\u003e\n        \u003cView style={styles.mainContent}\u003e\n          \u003cCardList /\u003e\n        \u003c/View\u003e\n      \u003c/ScrollView\u003e\n    )}\n```\n\nThe answer is it doesn’t. Currently, the `CardList` component doesn’t really have the ability to render cards, so we have to update it. Start by importing the `connect` method from the `react-redux` library. This will allow us to create a “connected” component:\n\n``` javascript\n    // src/components/CardList.js\n    import { connect } from \"react-redux\";\n```\n\nAfter the `CardList` prop types, add a `mapStateToProps` method. This allows us to map out any value in the store as a prop for this component. In this case, we only want the `cards` array:\n\n``` javascript\n    CardList.propTypes = {\n      // previous CardList propTypes code here...\n    };\n    \n    // add this:\n    const mapStateToProps = ({ cards }) =\u003e { // extract the cards array from the store\n      return cards; // make it available as props\n    };\n    \n    // replace export default CardList with this:\n    export default connect(mapStateToProps)(CardList);\n```\n\nNow, every time the `addedCard` action is dispatch, the value of `this.props.cards` inside this component will always be in sync with the value of the `cards` array in the store.\n\n\n## Creating the server\n\nThe server is mainly used for authenticating a user who tries to connect to Pusher. If you open the file for the Home screen, we’ve added this code earlier:\n\n``` javascript\n    // src/screens/HomeScreen.js\n    componentDidMount() {\n      this.pusher = new Pusher(\"YOUR PUSHER APP KEY\", {\n        authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n        cluster: \"YOUR PUSHER APP CLUSTER\",\n        encrypted: true\n      });\n    }\n```\n\nThis is where we establish the connection to Pusher’s servers. The `authEndpoint` is responsible for authenticating the user to verify that they’re really a user of your app. So the app hits the server every time the code above is executed.\n\nNow that you know what the server is used for, we’re ready to add its code. Start by navigating inside the `server` directory and install all the packages:\n\n```\n    cd server\n    npm install\n```\n\nImport all the libraries we need and intialize them. This includes Express and a couple of middlewares (JSON and URL encoded body parser), and `dotenv` which allows us to load values from the `.env` file:\n\n``` javascript\n    var express = require(\"express\");\n    var bodyParser = require(\"body-parser\");\n    var Pusher = require(\"pusher\");\n    \n    var app = express(); // Express server\n    app.use(bodyParser.json()); // for parsing the request body into JSON object\n    app.use(bodyParser.urlencoded({ extended: false })); // for parsing URL encoded request body\n    \n    require(\"dotenv\").config(); // initialize dotenv\n```\n\nNext, initialize the Pusher server component using the values from the `.env` file inside your `server` directory:\n\n``` javascript\n    var pusher = new Pusher({\n      // connect to pusher\n      appId: process.env.APP_ID,\n      key: process.env.APP_KEY,\n      secret: process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER\n    });\n```\n\nNext, add the route for testing if the server is working correctly:\n\n``` javascript\n    app.get(\"/\", function(req, res) {\n      res.send(\"all green...\");\n    });\n```\n\nNext, add the route for authenticating user requests:\n\n``` javascript\n    app.post(\"/pusher/auth\", function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    });\n```\n\nNote that in the code above, we haven’t really added any form of authentication. All we’re really doing is authenticating the user as they hit this route. This is not what you want to do for production apps. For production apps, you will most likely have some sort of user authentication before a user can use your app. That’s what you need to integrate into this code so you can ensure that the users who are making requests to your Pusher app are real users of your app.\n\nNext, make the server listen to the port indicated in the `.env` file:\n\n``` javascript\n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\nLastly, update the `.env` file and update it with your Pusher app details:\n\n``` javascript\n    APP_ID=YOUR_PUSHER_APP_ID\n    APP_KEY=YOUR_PUSHER_APP_KEY\n    APP_SECRET=YOUR_PUSHER_APP_SECRET\n    APP_CLUSTER=YOUR_PUSHER_APP_CLUSTER\n    PORT=3000\n```\n\n## Running the app\n\nTo run the app, you need to create an account on [ngrok.com](https://ngrok.com/). Once you have an account, go to your [account dashboard](https://dashboard.ngrok.com/get-started) and download the ngrok binary for your operating system. Extract the zip file and you’ll see an `ngrok` file. Execute that file from the terminal (Note: you’ll probably need to add [execution permissions](https://askubuntu.com/questions/484718/how-to-make-a-file-executable) to it if you’re on Linux) to add your auth token:\n\n```\n    ./ngrok authToken YOUR_NGROK_AUTH_TOKEN\n```\n\nOnce that’s done, run the server and expose port 3000 using ngrok:\n\n```\n    node server.js\n    ./ngrok http 3000\n```\n\nNgrok will provide you with an https URL. Use that as the value for the `authEndpoint` in the `src/screens/HomeScreen.js` file:\n\n``` javascript\n    componentDidMount() {\n      this.pusher = new Pusher(\"YOUR PUSHER APP KEY\", {\n        authEndpoint: \"YOUR_NGROK_HTTPS_URL/pusher/auth\",\n      });\n    }\n```\n\nLastly, navigate inside the root directory of the app and start it:\n\n```\n    expo start\n```\n\nYou can test the app on your machine using the emulator if you have a powerful machine. Personally, I tested it on my iOS and Android device so you might have better luck when running it on your device also.\n\n\n## Conclusion\n\nThat’s it! In this tutorial, you learned how to create a realtime photo-sharing app with React Native and Pusher. Along the way, you learned how to use Expo’s Camera API, Imgur API to anonymously upload images, and Pusher to send and receive data in realtime.\n\nYou can find the app’s source code in this [GitHub repo](https://github.com/anchetaWern/RNPhotoShare).","metaTitle":"Creating a photo sharing app with React Native","metaDescription":"Create a live photo sharing app using Node.js, React Native and Imgur. Users will be able to follow their friends and broadcast their own photos to their followers."}}],"defaultValue":"Channels \u0026 JavaScript","queryType":"tag","pages":25,"route":"/tutorials","query":{"product":"Channels","tag":"JavaScript","page":"5"}}},"page":"/tutorials","query":{"product":"Channels","tag":"JavaScript","page":"5"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=JavaScript&page=5 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:39:12 GMT -->
</html>