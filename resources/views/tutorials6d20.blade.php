<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=iOS&page=8 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:43:47 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">91</span> tutorials for “<span class="css-npldjc ehwuahf2">iOS</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorialsb729.html?product=Beams&amp;tag=iOS" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials.html" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#C223CE"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="iOS"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/stocks-push-notifications-ios.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a live stocks application with push notifications for iOS</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This tutorial will show you how to build an iOS app that tracks stock prices. It features realtime updates and push noti...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/accessible-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Making accessible React Native apps</h3><p class="css-k12xad e5jrto45">This tutorial looks at ways to improve the accessibility of React Native apps. You will take a (provided) starter app an...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/ios-machine-learning.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create an iOS application using machine learning</h3><p class="css-k12xad e5jrto45">This tutorial dives into machine learning with a practical demo. You will build a convolutional neural network, , before...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-app-framework7.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app using Framework7</h3><p class="css-k12xad e5jrto45">Build a chat app for iOS and Android using Framework7 and Vue.js, with a simple Node.js backend. Framework7 is a free an...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/cryptocurrency-tracking-swift-laravel-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a cryptocurrency tracking app with push notifications using Swift and Laravel - Part 2: The iOS app</h3><p class="css-k12xad e5jrto45">Build a cryptocurrency tracking app featuring push notifications. Use Swift to create an iOS app, powered by a Laravel b...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/cryptocurrency-tracking-swift-laravel-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a cryptocurrency tracking app with push notifications using Swift and Laravel - Part 1: The backend</h3><p class="css-k12xad e5jrto45">Build a cryptocurrency tracking app featuring push notifications. Use Swift to create an iOS app, powered by a Laravel b...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-blog-swift-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a live blog app using Swift and Go</h3><p class="css-k12xad e5jrto45">Build a live blogging app for iOS with Swift. Create a backend using Go. Admin users will be able to add blog posts, wit...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/ios-chat-app-swift-chatkit-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an iOS chat app using Swift and Chatkit - Part 3: Building the iOS app</h3><p class="css-k12xad e5jrto45">Build a chat app for iOS, with a Laravel API backend. In part three, build the iOS application. By the end of this secti...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/social-notifications-ios-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Send push notifications in a social network iOS app - Part 2: Build the app</h3><p class="css-k12xad e5jrto45">Learn to build a social network app for iOS, featuring push notifications. In part two, create the app and set up push n...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialse4e2.html?tag=iOS&amp;page=7" class="css-5s6711 edg0byb1">Prev</a><a href="tutorialseee7.html?tag=iOS&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials47ac.html?tag=iOS&amp;page=6" class="css-za1ua3 edg0byb1">6</a><a href="tutorialse4e2.html?tag=iOS&amp;page=7" class="css-za1ua3 edg0byb1">7</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials6d20.html?tag=iOS&amp;page=8" class="css-2wakph edg0byb1">8</a><a href="tutorials0d6d.html?tag=iOS&amp;page=9" class="css-5s6711 edg0byb1">9</a><a href="tutorialsbd83.html?tag=iOS&amp;page=10" class="css-5s6711 edg0byb1">10</a><a href="tutorials8cf1.html?tag=iOS&amp;page=11" class="css-5s6711 edg0byb1">11</a><a href="tutorials0d6d.html?tag=iOS&amp;page=9" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":91,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6I6zL6laFOeMuuWyQAGWqo","type":"Entry","createdAt":"2018-09-07T15:16:38.025Z","updatedAt":"2018-09-07T15:16:38.025Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a live stocks application with push notifications for iOS","url":"stocks-push-notifications-ios","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro-articles/stocks-app-ios","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kOTcNAC12gwWEyE6MimMY","type":"Entry","createdAt":"2018-02-12T15:08:28.581Z","updatedAt":"2018-02-26T12:31:12.766Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Trading","url":"trading","type":"use case"}}],"reviewDate":"2018-09-05","description":"This tutorial will show you how to build an iOS app that tracks stock prices. It features realtime updates and push notifications. You will build the frontend app in Swift, and the backend in Node.js.","prerequisite":"You will need Xcode, Cocoapods and Node.js installed on your machine. Some knowledge of iOS development will be helpful.","content":"In this article, we will see how you can build a stock market application using iOS and Swift. The prices will update in realtime as the changes to the prices occur. More importantly, though, you will be able to activate push notifications on certain stocks so you get notified when the prices of the stock changes.\n\nWhen we are done, we will have an application that functions like this:\n\n![ios-stocks-demo](//images.ctfassets.net/1es3ne0caaid/4oR4dRIkTCEMEK2iOMcoMQ/c7f74457e5e4529929a84f960ef0faaf/ios-stocks-demo.gif)\n\n## Prerequisites\n\nTo follow along in this tutorial you need the following things:\n\n- Xcode installed on your machine. Download [here](https://developer.apple.com/xcode).\n- Know your way around the Xcode IDE.\n- Basic knowledge of the Swift programming language.\n- Basic knowledge of JavaScript.\n- Node.js installed on your machine. Download [here](https://nodejs.org/en/download/).\n- Cocoapods installed on your machine. Install [here](https://guides.cocoapods.org/using/getting-started.html).\n- A Pusher account. Create one [here](https://pusher.com).\n\nLet’s get started.\n\n\n## Creating your iOS project\n\nThe first thing we need to do is create the project in Xcode. Launch Xcode and click **Create a new Xcode project**.\n\n![ios-stocks-welcome-xcode](//images.ctfassets.net/1es3ne0caaid/U17iFrhgC4GKEKaUqAI0i/158f59671b9340e854de759f1a1b495a/ios-stocks-welcome-xcode.png)\n\nFrom the next screen, select **Single View App \u003e Next** then give the project a name. Let’s name it something really creative, like **Stocks.**\n\n![ios-stocks-new-app](//images.ctfassets.net/1es3ne0caaid/5CEuleMypUI6MGKK6IeIo6/89863680adb2722700e0687d0cc0fd40/ios-stocks-new-app.png)\n\n### Installing dependencies using Cocoapods\n\nNow that we have our project set up, we need to add some external libraries to the project. These libraries will be used for various functions like push notifications and HTTP requests.\n\nFirst close Xcode. Next, create a new `Podfile` in the root of your project and paste the following code:\n\n```\n    # File: ./Podfile\n    platform :ios, '11.0'\n    \n    target 'Stocks' do\n      use_frameworks!\n      pod 'Alamofire', '~\u003e 4.7.3'\n      pod 'PusherSwift', '~\u003e 6.1.0'\n      pod 'PushNotifications', '~\u003e 1.0.1'\n      pod 'NotificationBannerSwift', '~\u003e 1.6.3'\n    end\n```\n\nAbove, we are using the `Podfile` to define the libraries our project will be depending on to work. Here are the libraries we have:\n\n\n- [Alamofire](https://github.com/Alamofire/Alamofire) - an HTTP networking library written in Swift.\n- [PusherSwift](https://github.com/pusher/pusher-websocket-swift) - the iOS library for Pusher.\n- [PushNotifications](https://github.com/pusher/push-notifications-swift) - Swift SDK for Pusher Beams.\n- [NotificationBannerSwift](https://github.com/Daltron/NotificationBanner) - easy way to display app notification banners in iOS apps.\n\nNow that we have defined the dependencies, let’s install them. Open your terminal and `cd` to the project root and run this command:\n\n```\n    $ pod update\n```\n\nThis will install all the dependencies listed in the `Podfile`. We are using the `update` command because we want the latest versions of the libraries, which may have changed since writing this article.\n\nWhen the installation is complete, we will have a new `Stocks.xcworkspace` file in the root of the project. Going forward, we will have to open our iOS project using this Xcode workspace file.\n\n\n## Building the iOS application\n\nThe first thing we want to do is consider how the entire service will work. We will build two applications. One will be the iOS application and the other will be a backend, which will be built with JavaScript (Node.js). \n\nIn this section, we will start with the iOS application. Open the `Stocks.xcworkspace` file in Xcode and let’s start building the iOS app.\n\n### Creating the settings class\n\nThe first thing we are going to do is create a notification settings class. This will be responsible for storing the notification settings for a device. When you subscribe for push notifications on a certain stock, we will store the setting using this class so that the application is aware of the stocks you turned on notifications for.\n\nCreate a new Swift class named `STNotificationSettings` and paste the following code:\n\n``` swift\n    // File: ./Stocks/STNotificationSettings.swift\n    import Foundation\n    \n    class STNotificationSettings: NSObject {\n        static let KEY = \"ST_NOTIFICATIONS\"\n        static let shared = STNotificationSettings()\n        \n        private override init() {}\n        \n        private var settings: [String: Bool] {\n            get {\n                let key = STNotificationSettings.KEY\n                \n                if let settings = UserDefaults.standard.object(forKey: key) as? [String: Bool] {\n                    return settings\n                }\n                \n                return [:]\n            }\n            set(newValue) {\n                var settings: [String: Bool] = [:]\n                \n                for (k, v) in newValue {\n                    settings[k.uppercased()] = v\n                }\n                \n                UserDefaults.standard.set(settings, forKey: STNotificationSettings.KEY)\n            }\n        }\n        \n        func enabled(for stock: String) -\u003e Bool {\n            if let stock = settings.first(where: { $0.key == stock.uppercased() }) {\n                return stock.value\n            }\n            \n            return false\n        }\n        \n        func save(stock: String, enabled: Bool) {\n            settings[stock.uppercased()] = enabled\n        }\n    }\n```\n\nIn the class above, we have a static property, `key`, that is just used as the key for the preference that will hold all our settings. This key will be used for lookup and storage of the settings in the iOS file system. \n\nWe also have a `shared` static property, which holds an instance of the class. We want this class to be instantiated once. This is also why we have made our `init` method private. \n\nNext, we have the `settings` property. This is a [computed property](https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID259) that provides a getter and a setter to retrieve and set other properties and values indirectly. The getter just retrieves the settings data from the filesystem, while the setter saves the settings to the filesystem.\n\nWe have two methods in the class, `enabled(for:)` and `save(stock:enabled:)`. The first one checks if push notifications are enabled for a stock, while the second saves the setting for a stock.\n\nThat’s all for the settings class.\n\n### Creating our view controller\n\nThe next thing we want to do is create the view controller. We will start by creating a view controller class, then we will create a view controller in the storyboard. We will then connect the class to the storyboard.\n\nCreate a new table view controller named `StocksTableViewController` and replace the contents with this:\n\n``` swift\n    // File: ./Stocks/StocksTableViewController.swift\n    import UIKit\n    import Alamofire\n    import PusherSwift\n    import PushNotifications\n    import NotificationBannerSwift\n    \n    class StocksTableViewController: UITableViewController {\n    }\n```\n\nWe will get back to this class, but for now, leave it and open the `Main.storyboard` file. In the storyboard, drag a new table view controller to the canvas. Next, drag the arrow from the old view controller that was in the storyboard to the new table view controller and then delete the old view controller.\n\n![ios-stocks-tableview](//images.ctfassets.net/1es3ne0caaid/1osRvlJkvaackYIc82seis/6b7fd1aca66a446c06137d1003d54574/ios-stocks-tableview.png)\n\nNext, open the **Identity Inspector** and set the custom class for the table view controller to `StocksTableViewController`. This will connect the class we created earlier to this table view controller we have on the storyboard.\n\n![ios-stocks-identity-inspector](//images.ctfassets.net/1es3ne0caaid/1DSUBk4DZamggSwwSIKI20/c2453f16afbd30b9c8a11568e019709e/ios-stocks-identity-inspector.png)\n\nFinally, set the reuse **Identifier** on the cell to ‘default’. We will not be using the cells that come with this table view controller, but we still need to set the identifier so Swift does not whine about it.\n\n![ios-stocks-identifier-default](//images.ctfassets.net/1es3ne0caaid/6G5pxC76us4IWKugGOKUUc/aa262d59135adedd281a2931dd8df26f/ios-stocks-identifier-default.png)\n\nNext, open the `StocksTableViewController` class and let's start adding logic to it. Update the class as seen below:\n\n``` swift\n    // [...]\n    \n    class StocksTableViewController: UITableViewController {\n        var stocks: [Stock] = []\n        \n        var pusher: Pusher!\n        let pushNotifications = PushNotifications.shared\n        let notificationSettings = STNotificationSettings.shared\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n        }\n        \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return stocks.count\n        }\n        \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"stock\", for: indexPath) as! StockCell\n            cell.stock = stocks[indexPath.row]\n            return cell\n        }\n    }\n```\n\nAbove we have a few properties we have defined:\n\n- `stocks` - this holds an array of `Stock` items. This is the data that will be displayed on each table cell. The `Stock` is a model we have not created but will later on.\n- `pusher` - this holds the `PusherSwift` library instance. We will use it to connect to Pusher and update the cells in realtime.\n- `pushNotifications` - this holds a singleton of the `PushNotifications` library. We will use this to subscribe and unsubscribe from [interests](https://docs.pusher.com/beams/concepts/interests).\n- `notificationSettings` - this holds a singleton of the `STNotificationSettings` class. We will use this to get the setting for each stock when necessary.\n\nThe methods we have defined above are standard with iOS development and should not need explanation. \n\nHowever, in the `tableView(_:cellForRowAt:)` method, we do something a little different. We get an instance of `StockCell`, which we have not created, and then assign a `Stock` item to the cell. Later on, we will see how we can use the `didSet` [property observer](https://medium.com/the-andela-way/property-observers-didset-and-willset-in-swift-4-c3730f26b1e9) to neatly populate the cell.\n\nIn the same class, add the following methods:\n\n``` swift\n    // [...]\n    \n    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        let cell = tableView.cellForRow(at: indexPath) as! StockCell\n        if let stock = cell.stock {\n            showNotificationSettingAlert(for: stock)\n        }\n    }\n    \n    private func showNotificationSettingAlert(for stock: Stock) {\n        let enabled = notificationSettings.enabled(for: stock.name)\n        let title = \"Notification settings\"\n        let message = \"Change the notification settings for this stock. What would you like to do?\"\n        \n        let alert = UIAlertController(title: title, message: message, preferredStyle: .actionSheet)\n        \n        let onTitle = enabled ? \"Keep on\" : \"Turn on notifications\"\n        alert.addAction(UIAlertAction(title: onTitle, style: .default) { [unowned self] action in\n            guard enabled == false else { return }\n            self.notificationSettings.save(stock: stock.name, enabled: true)\n            \n            let feedback = \"Notfications turned on for \\(stock.name)\"\n            StatusBarNotificationBanner(title: feedback, style: .success).show()\n    \n            try? self.pushNotifications.subscribe(interest: stock.name.uppercased())\n        })\n        \n        let offTitle = enabled ? \"Turn off notifications\" : \"Leave off\"\n        let offStyle: UIAlertActionStyle = enabled ? .destructive : .cancel\n        alert.addAction(UIAlertAction(title: offTitle, style: offStyle) { [unowned self] action in\n            guard enabled else { return }\n            self.notificationSettings.save(stock: stock.name, enabled: false)\n            \n            let feedback = \"Notfications turned off for \\(stock.name)\"\n            StatusBarNotificationBanner(title: feedback, style: .success).show()\n            \n            try? self.pushNotifications.unsubscribe(interest: stock.name.uppercased())\n        })\n        \n        present(alert, animated: true, completion: nil)\n    }\n    \n    // [...]\n```\n\nAbove, we added two new methods:\n\n\n- `tableView(_:didSelectRowAt:)` - this is a default table view controller method that is fired when a row is selected in the table. In this method, we get the row that was tapped, and then show an alert that we can use to configure the push notification setting for that stock.\n- `showNotificationSettingAlert` - this is invoked from the method above. It contains all the actual logic required to display the notification settings alert. The alert will look like this when the application is ready:\n\n![ios-stocks-alert-demo](//images.ctfassets.net/1es3ne0caaid/27JECNw00wuUqMo6m4eKiE/529b48f741ee6992a4db70f5f45a04b4/ios-stocks-alert-demo.gif)\n\nNext, let’s update the `viewDidLoad()` method. Replace the `viewDidLoad()` method with the following code:\n\n``` swift\n    // [...]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        fetchStockPrices()\n        \n        tableView.separatorInset.left = 0\n        tableView.backgroundColor = UIColor.black\n        \n        let customCell = UINib(nibName: \"StockCell\", bundle: nil)\n        tableView.register(customCell, forCellReuseIdentifier: \"stock\")\n        \n        pusher = Pusher(\n            key: AppConstants.PUSHER_APP_KEY,\n            options: PusherClientOptions(host: .cluster(AppConstants.PUSHER_APP_CLUSTER))\n        )\n        \n        let channel = pusher.subscribe(\"stocks\")\n        let _ = channel.bind(eventName: \"update\") { [unowned self] data in\n            if let data = data as? [[String: AnyObject]] {\n                if let encoded = try? JSONSerialization.data(withJSONObject: data, options: .prettyPrinted) {\n                    if let stocks = try? JSONDecoder().decode([Stock].self, from: encoded) {\n                        self.stocks = stocks\n                        self.tableView.reloadData()\n                    }\n                }\n            }\n        }\n        \n        pusher.connect()\n    }\n    \n    // [...]\n```\n\nAbove, we do a couple of things. First, we call the `fetchStockPrices()` method, which we will define later, to fetch all the stock prices from a backend API. Then we changed the background color of the table view to black. \n\nWe registered the non-existent custom cell, `StockCell`, which we referenced earlier in the article. We finally used the `pusher` instance to connect to a Pusher channel, `stock`, and also bind to the `update`  event on that channel. When the event is fired, we decode the data into the `stocks` property using Codable and reload the table to show the new changes.\n\n**Related:** [**Swift 4 decoding JSON using Codable**](https://blog.pusher.com/swift-4-decoding-json-codable/)\n\nBelow the `showNotificationSettingAlert(for:)` method in the same class, add the following method:\n\n``` swift\n    // [...]\n    \n    private func fetchStockPrices() {\n        Alamofire.request(AppConstants.ENDPOINT + \"/stocks\")\n            .validate()\n            .responseJSON { [unowned self] resp in\n                guard let data = resp.data, resp.result.isSuccess else {\n                    let msg = \"Error fetching prices\"\n                    return StatusBarNotificationBanner(title: msg, style: .danger).show()\n                }\n                \n                if let stocks = try? JSONDecoder().decode([Stock].self, from: data) {\n                    self.stocks = stocks\n                    self.tableView.reloadData()\n                }\n            }\n    }\n    \n    // [...]\n```\n\nThe method above was invoked in the `viewDidLoad()` method above. It fetches all the stocks from the API using the Alamofire library and then decodes the response to the `stocks` property using Codable. After this, the table view is reloaded to show the updated stocks data.\n\nThat’s all for this class. \n\nWe referenced a few non-existent classes in the `StocksTableViewController` though, let’s create them.\n\n### Creating supporting classes\n\nCreate a new `AppConstants` Swift file and paste the following code:\n\n``` swift\n    import Foundation\n    \n    struct AppConstants {\n        static let ENDPOINT = \"http://127.0.0.1:5000\" // Or use your ngrok HTTPS URL\n        static let PUSHER_APP_KEY = \"PASTE_PUSHER_APP_KEY_HERE\"\n        static let PUSHER_APP_CLUSTER = \"PASTE_PUSHER_APP_CLUSTER_HERE\"\n        static let BEAMS_INSTANCE_ID = \"PASTE_PUSHER_BEAMS_INSTANCE_ID_HERE\"\n    }\n```\n\nThe struct above serves as our configuration file. It allows us to define one true source of configuration values that we need for the application. At this point, you should create your [Pusher Channels](https://dashboard.pusher.com) and [Pusher Beams](https://dash.pusher.com) application if you haven’t already and paste the credentials above.\n\nNext, let’s define the `Stock` model. Create a new `Stock` Swift file and paste the following code:\n\n``` swift\n    import Foundation\n    \n    struct Stock: Codable {\n        let name: String\n        let price: Float\n        let percentage: String\n    }\n```\n\nAbove we have our `Stock` model which extends the Codable protocol. You can read more about it Codable [here](https://blog.pusher.com/swift-4-decoding-json-codable/).\n\n### Creating our custom cell\n\nWe referenced the `StockCell` several times above, so let’s create our custom cell now. We are creating this separately so it is easy to manage and everything is modular.\n\nFirst, create a new **Empty** view in Xcode as seen below:\n\n![ios-stocks-empty-view](//images.ctfassets.net/1es3ne0caaid/6DGSWQS7vi888q8sSGkww2/c49f48159ec3a4321def1d9e5e98bc9c/ios-stocks-empty-view.png)\n\nNext, drag a new table view cell into the empty canvas. We will be using this as our custom cell. Next, create a new Swift file named `StockCell` and paste the following code into it:\n\n``` swift\n    import UIKit\n    \n    class StockCell: UITableViewCell {\n    \n        var stock: Stock? {\n            didSet {\n                if let stock = stock {\n                    stockName.text = stock.name\n                    stockPrice.text = \"\\(stock.price)\"\n                    stockPercentageChange.text = \"\\(stock.percentage)\"\n                    percentageWrapper.backgroundColor = stock.percentage.first == \"+\"\n                        ? UIColor.green.withAlphaComponent(0.7)\n                        : UIColor.red\n                }\n            }\n        }\n        \n        @IBOutlet private weak var stockName: UILabel!\n        @IBOutlet private weak var stockPrice: UILabel!\n        @IBOutlet private weak var percentageWrapper: UIView!\n        @IBOutlet private weak var stockPercentageChange: UILabel!\n        \n        override func awakeFromNib() {\n            super.awakeFromNib()\n            percentageWrapper.layer.cornerRadius = 5\n        }\n    }\n```\n\nIn the cell class above, we have the `stock` property which holds a `Stock` model. The property has the `didSet` [property observer](https://medium.com/the-andela-way/property-observers-didset-and-willset-in-swift-4-c3730f26b1e9). So anytime the `stock` property is set, the code in the observer is run. In the observer, we set the private `@IBOutlet` properties. \n\nThis makes our code neat and organized because the `StockTableViewController` does not have to care about how the `stock` is handled, it just sets the `Stock` model to the `StockCell` and the cell handles the rest.\n\nWe have an `awakeFromNib()` method which is called when the cell is created. We use this to set a corner radius to the view holding the percentage change text.\n\nNext, open the `StockCell.xib` view, and set the **custom class** of the view to `StockCell`. Then design the cell as seen below:\n\n![ios-stocks-stockcell](//images.ctfassets.net/1es3ne0caaid/5gWw79b0HuYWem0GsoEMWG/3b1f763d173196e8349652a3d56c3f5e/ios-stocks-stockcell.png)\n\nWe have used constraints to make sure each item stays in place. You can decide to do the same if you wish.\n\nWhen you are done designing, connect the labels and views to your `StockCell` class using the **Assistant Editor**. This will establish the link between the items in the view and the `StockCell`'s `@IBOutlet`s.\n\n![ios-stocks-link-stockcell](//images.ctfassets.net/1es3ne0caaid/3uiTevTlcQa64A6sWKQug8/042265249736981fb7cb8cf7bf121012/ios-stocks-link-stockcell.png)\n\n\n### Updating the AppDelegate and turning on push notifications\n\nOpen the `AppDelegate` file and replace the contents with the following:\n\n``` swift\n    import UIKit\n    import PushNotifications\n    \n    @UIApplicationMain\n    class AppDelegate: UIResponder, UIApplicationDelegate {\n        var window: UIWindow?\n        let pushNotifications = PushNotifications.shared\n    \n        func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n            pushNotifications.start(instanceId: AppConstants.BEAMS_INSTANCE_ID)\n            pushNotifications.registerForRemoteNotifications()\n            return true\n        }\n        \n        func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n            pushNotifications.registerDeviceToken(deviceToken)\n        }\n    }\n```\n\nIn the `application(_:didFinishLaunchingWithOptions:)` method, we start the `PushNotifications` library and then we register the device for remote notifications. In the `application(_:didRegisterForRemoteNotificationsWithDeviceToken:)` method, we register the device token with Pusher Beams.\n\nNext, turn on the **Push Notification** capability for our application as seen below:\n\n![ios-stocks-enable-push-notifications](//images.ctfassets.net/1es3ne0caaid/9MNOUcCNWw8mMmCwAwyeA/b030fbae83c929289c2de367b754a07b/ios-stocks-enable-push-notifications.png)\n\nThis will add a `Stocks.entitlement` file in your project root.\n\nOne last thing we need to do before we are done with the iOS application is allowing the application load data from arbitrary URLs. By default, iOS does not allow this, and it should not. However, since we are going to be testing locally, we need this turned on temporarily. Open the `info.plist` file and update it as seen below:\n\n![ios-stocks-enable-app-transport](//images.ctfassets.net/1es3ne0caaid/61AnDSwfleaswuGGcGCuEI/1d19d8a391787c846841c2815b2ae656/ios-stocks-enable-app-transport.png)\n\nNow, our app is ready, but we still need to create the backend in order for it to work. Let’s do just that.\n\n\n## Building the backend API\n\nOur API will be built using Node.js. The backend will be responsible for providing the available stocks and also sending push notifications when there are changes. It will also push changes to Pusher Channels when there are changes in the stock price. We will be simulating the stock prices for instant results, but you can choose to use a live API.\n\nCreate a new directory for your backend application. Inside this project directory, create a new `package.json` file and paste the following code:\n\n``` json\n    {\n      \"name\": \"webapi\",\n      \"version\": \"1.0.0\",\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.18.3\",\n        \"express\": \"^4.16.3\",\n        \"pusher\": \"^2.1.3\",\n        \"@pusher/push-notifications-server\": \"1.0.0\"\n      }\n    }\n```\n\nNext, open a terminal window, `cd` to the application directory and run the command below:\n\n```\n    $ npm install\n```\n\nThis will install the dependencies in the `package.json` file. Next, create a new `config.js` file, and paste the following code:\n\n``` javascript\n    module.exports = {\n      appId: 'PASTE_PUSHER_CHANNELS_APPID',\n      key: 'PASTE_PUSHER_CHANNELS_KEY',\n      secret: 'PASTE_PUSHER_CHANNELS_SECRET',\n      cluster: 'PASTE_PUSHER_CHANNELS_CLUSTER',\n      secretKey: 'PASTE_PUSHER_BEAMS_SECRET',\n      instanceId: 'PASTE_PUSHER_BEAMS_INSTANCEID'\n    };\n```\n\nAbove, we have the configuration values for our Pusher instances. Replace the placeholders above with the keys from your Pusher dashboard.\n\nFinally, create a new file, `index.js` and paste the following code:\n\n``` javascript\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const path = require('path');\n    const Pusher = require('pusher');\n    const PushNotifications = require('@pusher/push-notifications-server');\n    \n    const app = express();\n    const pusher = new Pusher(require('./config.js'));\n    const pushNotifications = new PushNotifications(require('./config.js'));\n    \n    function generateRandomFloat(min, max) {\n      return parseFloat((Math.random() * (max - min) + min).toFixed(2));\n    }\n    \n    function getPercentageString(percentage) {\n      let operator = percentage \u003c 0 ? '' : '+';\n      return `${operator}${percentage}%`;\n    }\n    \n    function loadStockDataFor(stock) {\n      return {\n        name: stock,\n        price: generateRandomFloat(0, 1000),\n        percentage: getPercentageString(generateRandomFloat(-10, 10))\n      };\n    }\n    \n    app.get('/stocks', (req, res) =\u003e {\n      let stocks = [\n        loadStockDataFor('AAPL'),\n        loadStockDataFor('GOOG'),\n        loadStockDataFor('AMZN'),\n        loadStockDataFor('MSFT'),\n        loadStockDataFor('NFLX'),\n        loadStockDataFor('TSLA')\n      ];\n      \n      stocks.forEach(stock =\u003e {\n        let name = stock.name;\n        let percentage = stock.percentage.substr(1);\n        let verb = stock.percentage.charAt(0) === '+' ? 'up' : 'down';\n    \n        pushNotifications.publish([stock.name], {\n          apns: {\n            aps: {\n              alert: {\n                title: `Stock price change: \"${name}\"`,\n                body: `The stock price of \"${name}\" has gone ${verb} by ${percentage}.`\n              }\n            }\n          }\n        });\n      });\n      \n      pusher.trigger('stocks', 'update', stocks);\n    \n      res.json(stocks);\n    });\n    \n    app.listen(5000, () =\u003e console.log('Server is running'));\n```\n\nAbove, we have a simple Express application. We have three helper functions:\n\n\n- `generateRandomFloat` - generates a random float between two numbers.\n- `getPercentageString` - uses a passed number to generate a string that will be shown on the table cell, for example, +8.0%. \n- `loadStockDataFor` - loads random stock data for a stock passed to it.\n\nAfter the helpers, we have the `/stocks` route. In here we generate a list of stocks, and for each stock, we send a push notification about the change in price. The stocks name serves as the interest for each stock. This means that subscribing to the AAPL interest, for instance, will subscribe to receiving push notifications for the AAPL stock.\n\nNext, we trigger an event, `update`, on the `stocks` channel, so all other devices can pick up the recent changes. Lastly, we return the generated list of stocks and we add the code that starts the server on port 5000.\n\nTo get the server started, run the following command on your terminal:\n\n```\n    $ node index\n```\n\n![ios-stocks-node](//images.ctfassets.net/1es3ne0caaid/775RfIfVHqoMg88wgKYcqG/0a0871547d6c395efa9950916d08d22f/ios-stocks-node.png)\n\n## Testing the application\n\nNow that we have built the backend and started the Node.js server, you can now run the iOS application. Your stocks will be displayed on the screen. However, if you want to test push notifications, you will need a real iOS device, and you will need to follow the following instructions.\n\nFirst, you will need to install [ngrok](https://ngrok.com/). This tool is used to expose local running web servers to the internet. Follow [the instructions](https://ngrok.com/download) on their website to download and install ngrok.\n\nOnce you have it installed, run the following command in another terminal window:\n\n```\n    $ ngrok http 8000\n```\n\n![ios-stocks-ngrok](//images.ctfassets.net/1es3ne0caaid/5bh8fTsXxuOQgyIgkCUsm0/87caf9152990a1c6cbc56288122fb6f5/ios-stocks-ngrok.png)\n\n\u003e Make sure your Node.js server is still running before executing the command above.\n\nNow we have a **Forwarding** URL we can use in our application. Copy the HTTPS forwarding URL and replace the `ENDPOINT` value in `AppConstants.swift` with the URL.\n\nNow, run the application on your device. Once it has loaded, tap on a stock and turn on notification for that stock then minimize the application and visit http://localhost:5000/stocks on your web browser. This will simulate a change in the stock prices and you should get a push notification for the stock you subscribed to.\n\n![ios-stocks-demo](//images.ctfassets.net/1es3ne0caaid/4oR4dRIkTCEMEK2iOMcoMQ/c7f74457e5e4529929a84f960ef0faaf/ios-stocks-demo.gif)\n\n\n## Conclusion\n\nIn this article, we have been able to create a stocks application with push notification using Pusher Channels and Pusher Beams.\n\nThe source code to the entire application is available on [GitHub](https://github.com/neoighodaro-articles/stocks-app-ios). ","metaTitle":"Create a stocks application with push notifications for iOS","metaDescription":"Use Swift and Node.js to build a realtime stock price tracker. The app features live updates and push notifications."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1CtUK8rOmUWskec6qKQ04E","type":"Entry","createdAt":"2018-08-17T22:30:49.340Z","updatedAt":"2018-08-17T22:30:49.340Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Making accessible React Native apps","url":"accessible-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNa11y","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-08-13","description":"This tutorial looks at ways to improve the accessibility of React Native apps. You will take a (provided) starter app and enhance it with various accessibility features. You will also learn how to test and measure your app's accessibility.","prerequisite":"You will need React Native and Yarn installed on your machine. Some familiarity with React Native will be helpful.","content":"In this tutorial, you’re going to learn how to make React Native apps more accessible. Specifically, we’re going to cover the following:\n\n- What is accessibility?\n- Designing apps with accessibility in mind\n- Accessibility in React Native apps\n- Accessibility testing tools\n\nOf course, we cannot hope to cover everything about accessibility. It’s a pretty big subject and it’s a continuous journey. There’s always something that you can improve in order to make the experience just a little bit more pleasant for a certain user. Instead, what we hope to achieve in this tutorial, is to take that first step into making more accessible apps.\n\nYou can view the code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/RNa11y). The `starter` branch contains the not so accessible version of the app, while the `a11y` branch contains the more accessible version.\n\n\n## Prerequisites\n\nTo follow this tutorial, you need to know the basics of creating a React Native app. \nThe React Native development environment should also be set up on your machine.\n\nWe will be using React Native version 0.56 in this tutorial. We’ll also be using [Yarn](https://yarnpkg.com/en/) to install packages.\n\n\n## What is accessibility?\n\nBefore we proceed, it’s important that we all agree on what accessibility is, in the context of a mobile app. Accessibility or a11y, means making your apps usable to both normal users and users with disabilities. Any person can have one or more form of disability. That usually includes but not limited to the following:\n\n\n- **Visual impairments** - examples include low vision, color-blindness, and total blindness.\n- **Physical or motor disabilities** - cerebral palsy, bone and joint deformities.\n- **Mental disorders** - autism spectrum disorders such as Asperger’s syndrome, and autistic disorder.\n- **Hearing impairment** - deafness and partial hearing loss.\n- **Reading disabilities** - Dyslexia.\n\nAccessibility means designing your apps in such a way that it takes all of these disabilities into consideration in order to make the user experience pleasant for everyone. \n\n\n## What you’ll be building\n\nWe won’t actually be building anything from scratch. Instead, we’re going to make a pre-built app more accessible. Here’s what the starter app looks like:\n\n![accessible-rn-starter](//images.ctfassets.net/1es3ne0caaid/5o4PrPT43eGaCw8yGswg4A/1fe4265f13dd87224aae737a8c9f95b6/accessible-rn-starter.png)\n\nThis won’t be how the final output will look like because we’ll also be taking design into consideration (though, only a little because I’m not really a designer). \n\nIf you want to follow along, clone the repo, switch to the `starter` branch and install the dependencies:\n\n```\n    git clone https://github.com/anchetaWern/RNa11y.git\n    cd RNa11y\n    git checkout starter\n    yarn install\n    react-native upgrade\n    react-native link\n    react-native run-android\n    react-native run-ios\n```\n\n## Designing apps with accessibility in mind\n\nIn this section, we’ll redesign the app so that it becomes more accessible. We will be using the [dos and don'ts on designing for accessibility](https://accessibility.blog.gov.uk/2016/09/02/dos-and-donts-on-designing-for-accessibility/) from the [GOV.UK](https://accessibility.blog.gov.uk/2016/09/02/dos-and-donts-on-designing-for-accessibility/) website as a guide. Specifically, we’re going to adopt the following dos from their guide:\n\n\n- Use simple colors\n- Make buttons descriptive\n- Build simple and consistent layouts\n- Follow a linear, logical layout\n- Write descriptive links and heading\n- Use good contrasts and a readable font size\n- Use a combination of color, shapes, and text\n- Make large clickable actions\n\nRight off the bat, you can see that the starter app violates some of these rules. The app is already following a few, but we can still improve on it.\n\n### Use simple colors\n\nThe starter app violates this rule because it’s using a dark color for its background. It’s not really easy on the eyes, so we need to update the app and card background:\n\n``` javascript\n    // file: App.js\n    const styles = {\n      container: {\n        flex: 10,\n        backgroundColor: \"#FFF\" // update this\n      }\n    };\n```\n\n``` javascript\n    // src/components/Card.js\n    const styles = StyleSheet.create({\n      card: {\n        width: 120,\n        height: 140,\n        backgroundColor: \"#3e3e3e\", // update this\n      }\n    });\n```\n\nAlso, update the `Header` component to match. This is because the items in the status bar aren’t really very readable when using a dark background:\n\n``` javascript\n    // src/components/Header.js\n    const styles = StyleSheet.create({\n      header: {\n        paddingTop: 10,\n        backgroundColor: \"#ccc\" // update this\n      },\n      header_text: {\n        fontWeight: \"bold\",\n        color: \"#333\", // update this\n      }\n    });\n```\n\nOnce that’s done, the content should now be more readable.\n\n### Make large clickable actions\n\nNext, we need to make the buttons larger. This change is specifically useful for people with physical and motor disabilities, as they’re often the ones who have difficulty in pressing small buttons.\n\nIf you inspect the app right now, you’ll see that there’s not much space we can work with. So even if we make the buttons larger, it will still be difficult to target a specific one because there won’t be ample whitespace between them. Though we still have some free space between each card so we’ll make use of that instead.\n\nIn your `Card` component, include the `Dimensions` module so that we can get the device’s width. We’ll use it to determine how much width each card can use. In this case, we have two cards in each row so we’ll just divide it by two and add a padding. We’re also making the `height` bigger because we’re anticipating the buttons to become bigger:\n\n``` javascript\n    // src/components/Card.js\n    \n    import { View, Text, Image, StyleSheet, Dimensions } from \"react-native\"; // add Dimensions\n    \n    const { width } = Dimensions.get(\"window\");\n    \n    const cardPadding = 20;\n    const styles = StyleSheet.create({\n      card: {\n        width: (width / 2) - cardPadding, // update this\n        height: 150, // update this\n      }\n    });\n```\n\nNext, we can now proceed with updating the size and padding of the button:\n\n``` javascript\n    // src/components/IconButton.js:\n    \n    const icon_color = \"#586069\";\n    const icon_size = 25; // update this\n    \n    const styles = StyleSheet.create({\n      icon: {\n        // update these:\n        paddingLeft: 10, \n        paddingRight: 10\n      }\n    });\n```\n\nAt this point, each button should be huge and visible enough to click on.\n\n### Make buttons descriptive\n\nUnfortunately, this isn’t really something that can be implemented all the time because of design constraints. If you check the app now, you’ll see that there’s not really enough space to accommodate labels for each button. \n\nThere is a solution, but we will end up giving up the current layout (two cards per row) for a one card per row layout. So the only feasible solution is to have a walkthrough for new users. This way, you can teach what each button is used for. I won’t really be covering how to do that, but there’s a [good component](https://github.com/okgrow/react-native-copilot) which allows you to implement it easily.\n\n### Use good contrasts and a readable font size\n\nIn my opinion, the app already has pretty good contrast. But to be on the safe side, we’ll tweak it some more.\n\nFirst, we have to differentiate between each individual card and the app’s background. We can do that by applying a darker background color:\n\n``` javascript\n    // src/components/Card.js\n    const cardPadding = 20;\n    const styles = StyleSheet.create({\n      card: {\n        width: width / 2 - cardPadding,\n        height: 150,\n        backgroundColor: \"#e0e0e0\", // update this\n      }\n    });\n```\n\nNext, we need to differentiate between the card’s body and its contents:\n\n``` javascript\n    // src/components/Card.js\n    const styles = StyleSheet.create({\n      name: {\n        fontSize: 16,\n        color: \"#3a3f46\", // update this\n      }\n    });\n```\n\n``` javascript\n    // src/components/IconButton.js\n    \n    const icon_color = \"#3a3f46\"; // update this\n    const icon_size = 25;\n```\n\nLastly, we need to make the text larger. While there’s no general agreement as to what font size should we be using to optimize accessibility, a [few](https://ux.stackexchange.com/questions/102813/minimum-font-size-for-mobile-view) [people](https://accessibleweb.com/wcag_2_0_developers/minimum-font-size/) seem to swear by `16px` so we’re also going with that:\n\n``` javascript\n    const styles = StyleSheet.create({\n      name: {\n        fontSize: 16, // update this\n      }\n    });\n```\n\nWe’ve skipped the following because we’re already following them:\n\n\n- Write descriptive links and heading\n- Follow a linear, logical layout\n- Use a combination of color, shapes, and text\n- Build simple and consistent layouts\n\nOnce that’s done, the app’s design should be pretty accessible. \n\n\n## Accessibility in React Native apps\n\nThe previous section discussed mainly the visual component of accessibility. In this section, we’ll look at how to make the app more accessible for people who use screen readers.\n\nFor those unfamiliar, a screen reader reads to users what they’re currently touching on the screen. This technology is mainly used by blind or visually impaired people. If a screen reader is enabled, the user has to double tap in order to activate the intended action.\n\nIn order for a screen reader to be useful, we need to properly label all the relevant components that a user will most likely interact upon. In React Native, this can be done by adding accessibility props. Here’s an example of how we can add these props:\n \n``` javascript\n    // src/components/Header.js\n    const Header = ({ title }) =\u003e {\n      return (\n        \u003cView\n          style={styles.header}\n          accessible={true}\n          accessibilityLabel={\"Main app header\"}\n          accessibilityRole={\"header\"}\n        \u003e\n          \u003cText style={styles.header_text}\u003e{title}\u003c/Text\u003e\n        \u003c/View\u003e\n      );\n    };\n```\n\nLet’s go through each of the accessibility props we’ve added to the `Header` component:\n\n\n- `accessible` - accepts a boolean value that’s used to mark whether a specific component is an accessible element or not. This means that the screen reader will read whatever label you put on it. Be careful with using this though, as it makes all of its children inaccessible. In the `Header` component above, this makes the `Text` component inside the `View` inaccessible. So the screen reader won’t actually read the title indicated in the header. It will only read the `accessibilityLabel` you’ve passed to the `View` instead. It’s a good practice to only set the `accessible` prop to `true` if you know that the component doesn’t have any child that’s supposed to be treated as an accessible element.\n- `accessibilityLabel` - the text you want the screen reader to read when the user touches over it. A good practice when using this prop is to be as descriptive as possible. Remember that the user will only rely on what’s being read by the screen reader. They actually have no idea of the context a specific component is in, so it’s always useful to repeat it in your labels. For example, each of the buttons in each card should still mention the name of the Pokemon.\n- `accessibilityRole` - the general role of the component in this app. Examples include: `button`, `link`, `image`, `text`, and in this case `header`. Note that `header` doesn’t only indicate the app’s main header. It can also indicate a section header or a list header.\n\nThe next component we’ll update is the IconButton because it’s important that the user knows that those buttons we’ve added are actually buttons:\n\n````javascript\n    // src/components/IconButton.js\n    const IconButton = ({ icon, onPress, data, label }) =\u003e {\n      return (\n        \u003cTouchableOpacity\n          accessible={true}\n          accessibilityLabel={label}\n          accessibilityTraits={\"button\"}\n          accessibilityComponentType={\"button\"}\n          onPress={() =\u003e {\n            onPress(data.name);\n          }}\n        \u003e\n          \u003cIcon\n            name={icon}\n            style={styles.icon}\n            size={icon_size}\n            color={icon_color}\n          /\u003e\n        \u003c/TouchableOpacity\u003e\n      );\n    };\n```\n\nFrom the code above, you can see that we’re accepting a new `label` prop which we then use as the value for the `accessibilityLabel`. We’ve also set the component to be `accessible` which means that when the user’s finger goes over it, the screen reader will read out the `accessibilityLabel`. \n\nBut what about `accessibilityTraits` and `accessibilityComponentType`? Well, they are the old way of setting the `accessibilityRole`. `accessibilityTraits` is only for iOS and `accessibilityComponentType` is only for Android. As [mentioned in the docs](https://facebook.github.io/react-native/docs/accessibility#accessibilitytraits-ios), these props will be deprecated soon. We’re only using it because `TouchableOpacity` doesn’t seem to be accepting `accessibilityRole`. The trait (button) wouldn’t show up as I was testing with the accessibility inspector. We’ll go over this tool in the next section.\n\nLastly, we update the `Card` component so it passes the correct labels to each of the IconButton. We’re also making the Pokemon Image and Text accessible:\n\n``` javascript\n    // src/components/Card.js\n    const Card = ({ item, viewAction, bookmarkAction, shareAction }) =\u003e {\n      return (\n        \u003cView style={styles.card}\u003e\n          \u003cImage\n            source={item.pic}\n            style={styles.thumbnail}\n            accessible={true}\n            accessibilityRole={\"image\"}\n            accessibilityLabel={`${item.name} image`}\n          /\u003e\n          \u003cText style={styles.name} accessibilityRole={\"text\"}\u003e\n            {item.name}\n          \u003c/Text\u003e\n          \u003cView style={styles.icons}\u003e\n            \u003cIconButton\n              icon=\"search\"\n              onPress={viewAction}\n              data={item}\n              label={`View Pokemon ${item.name}`}\n            /\u003e\n            \u003cIconButton\n              icon=\"bookmark\"\n              onPress={bookmarkAction}\n              data={item}\n              label={`Bookmark Pokemon ${item.name}`}\n            /\u003e\n            \u003cIconButton\n              icon=\"share\"\n              onPress={shareAction}\n              data={item}\n              label={`Share Pokemon ${item.name}`}\n            /\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    };\n```\n\nIn case you’re wondering why we didn’t add the `accessible` and `accessibilityLabel` prop in the Pokemon label, it’s because the `Text` component is [accessible by default](https://facebook.github.io/react-native/docs/text#accessible). This also means that the screen reader automatically reads the text inside of this component.\n\n\n## Accessibility testing tools\n\nIn this section, we’ll take a look at four tools you can use to test the accessibility of your React Native app.\n\n### Testing accessibility while developing the app\n\nIn iOS, you can use the Accessibility Inspector tool in Xcode. Because it’s in Xcode, you have to run the app from Xcode. You can do that by opening the `RNa11y.xcodeproj` or `RNa11y.xcworkspace` file inside your project’s `ios` directory. Then run the app using the big play button located on the upper left side of the screen. \n\nOnce the app is running, you can open the Accessibility Inspector tool by going to **Xcode** → **Open Developer Tool** → **Accessibility Inspector**.\n\nFrom there, you can select the running iOS simulator instance:\n\n![ios-accessibility-inspector-1](//images.ctfassets.net/1es3ne0caaid/6qNgPqBzxY2gQCya28EQCe/18c5511aaa2c0c91d2627c6e4af89e05/ios-accessibility-inspector-1.png)\n\nOnce you’ve selected the simulator, click on the target icon right beside the drop-down. This activates the inspection mode. You can then hover over the components which we updated earlier and verify whether the inspector is reading the labels correctly:\n\n![ios-accessibility-inspector-2](//images.ctfassets.net/1es3ne0caaid/2SeBUm2GQM08QYMyu8acM2/bc43ab7293dfc5cdb317cd5b92585106/ios-accessibility-inspector-2.png)\n\nFor Android testing, you can use the [Accessibility Scanner](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor) app. Unlike the Accessibility Inspector in iOS, you have to install it on your emulator or device in order to use it. Once installed, go to **Settings** → **Accessibility** → **Accessibility Scanner** and enable it. \n\n![android-accessibility-scanner](//images.ctfassets.net/1es3ne0caaid/23c3rdh3BeOOQuGCQoKEUk/ccd4b3393e5c944ef0d4dd661864fcd6/android-accessibility-scanner.png)\n\nOnce it’s enabled, switch to the app that we’re working on and click the floating blue button. This will scan the app for any accessibility issues. Once it’s done scanning, you can click on any of the indicated areas to view the suggestion:\n\n![image-contrast-warning](//images.ctfassets.net/1es3ne0caaid/4RRVksnQ3YsSsuQuYGo8Cg/91e7e74829222b88ac984bd166517f72/image-contrast-warning.png)\n\nThe easiest way to solve this issue is by making the card’s background color lighter. You can also try increasing the contrast of the image as suggested.\n\nInterestingly, if you remove the accessibility props from the image and scan again, you’ll see that it will no longer complain about the contrast:\n\n``` javascript\n    // src/components/Card.js\n    const Card = ({ item, viewAction, bookmarkAction, shareAction }) =\u003e {\n      return (\n        \u003cView style={styles.card}\u003e\n          \u003cImage\n            source={item.pic}\n            style={styles.thumbnail}\n          /\u003e\n          ...\n        \u003c/View\u003e\n      );\n    };\n```\n\nThis can mean that the scanner only gets picky when you’ve marked a component as accessible. To test this assumption, try removing the accessibility props from the IconButton:\n\n``` javascript\n    // src/components/IconButton.js\n    const IconButton = ({ icon, onPress, data, label }) =\u003e {\n      return (\n        \u003cTouchableOpacity\n          onPress={() =\u003e {\n            onPress(data.name);\n          }}\n        \u003e\n        ...\n        \u003c/TouchableOpacity\u003e\n      );\n    };\n```\n\nIf you run the scanner again, you’ll see that it actually picks up on the issue:\n\n![item-description-warning](//images.ctfassets.net/1es3ne0caaid/5XT7FDpT32QQW640uuy664/b711061ff8d32bb41f09996a83c82cea/item-description-warning.png)\n\n### Manual accessibility testing\n\nAs with anything, it’s always important to test things manually so you know the actual experience your users are getting. After all, accessibility is all about improving the user experience that your users get when using the app. \n\n#### Testing in iOS\nTo test things manually in iOS, open Xcode and run the app on your iOS device. You can also do this from the simulator but that kinda beats the purpose of manual testing. You won’t really have an accurate “feel” of the experience if you’re just testing from a screen.\n\nOnce the app is running on your device, go to **Settings** → **Accessibility** → **VoiceOver**. From there, you can select the **Speech** menu to change the voice (I personally prefer Siri Female). You can also adjust the speaking rate. Adjust a little bit more from the mid-point should be fast enough for most people.\n\nOnce you’re done adjusting the settings, enable the **VoiceOver** setting then switch to the app. From there, you can tap on each of the accessibility areas that we’ve set to verify if it’s being read correctly.\n\n#### Testing in Android\nTo test in Android, run the app on your Android device. Once the app is running, go to **Settings** → **Language** and set it to your preferred language. \n\nNext, go to **Accessibility** → **Text-to-speech** options and make sure the **Default language status** is fully supported. If not, you have to go to the language settings again and select a supported language. \n\nThe equivalent of VoiceOver in Android is TalkBack, you can enable it by going to **Accessibility** → **TalkBack** then enable the setting**.** Once enabled, switch to the app and verify if the labels are read correctly as you tap.\n\n\n## Further reading\n\nHere are some resources to learn more about accessibility:\n\n\n- [Accessibility by Rob Dodson](https://www.youtube.com/watch?v=KPN31sB7v8c)\n- [React Native Accessibility: Creating Inclusive Apps in React Native](https://medium.com/@larenelg/creating-inclusive-apps-in-react-native-the-coding-bit-bd3832349009)\n- [React Native: Accessibility](https://facebook.github.io/react-native/docs/accessibility)\n- [Accessibility Testing on Android](https://robots.thoughtbot.com/accessibility-testing-on-android)\n- [iOS Accessibility Tutorial: Getting Started](https://www.raywenderlich.com/845-ios-accessibility-tutorial-getting-started)\n\n\n## Conclusion\n\nThat’s it! In this tutorial, you’ve learned how to make React Native apps more accessible to a person with disabilities. I hope that you’ll use the knowledge you’ve gained in order to make accessibility a part of your development workflow. Because all of your users deserve an equal or similar ease of use.\n\nYou can view the code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/RNa11y).","metaTitle":"Making accessible React Native apps","metaDescription":"Using a starter app, learn to implement improved accessibility in React Native apps. Work through practical examples, and discover accessibility tools."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2wVdDDrHTCUWaUoKkO2Acs","type":"Entry","createdAt":"2018-08-10T18:29:41.646Z","updatedAt":"2018-11-21T11:33:38.688Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create an iOS application using machine learning","url":"ios-machine-learning","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"44i97616Lmk0Q0Ygcwc8iI","type":"Entry","createdAt":"2018-08-10T18:11:48.524Z","updatedAt":"2018-11-21T11:42:23.848Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Elena Jovchevska","url":"elena-jovchevska","email":"jovchevska.elenaa@gmail.com","twitter":"https://twitter.com/EJovchevska","github":"https://github.com/elleAI/","guestWriter":true}}],"projectRepo":"https://github.com/elleAI/ios-ml-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kaOeiCgZqsKQowY0KAQIY","type":"Entry","createdAt":"2018-08-08T16:33:51.998Z","updatedAt":"2018-08-08T16:33:51.998Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Machine Learning","url":"machine-learning","type":"use case"}}],"reviewDate":"2018-08-08","description":"This tutorial dives into machine learning with a practical demo. You will build a convolutional neural network, , before connecting it to an iOS app, creating a machine learning powered iOS image recognition app.","prerequisite":"You will need the following installed on your machine: PyCharm, Miniconda, Python 2.7, pip, coremltools, XCode and Keras.","content":"We are lucky enough to be living in an era of exponential technology growth. We are lucky enough to witness the transition from yesterday’s technology - the one we grew up with, to the new era - the era of artificial intelligence.\n\nThe world of technology is in a constant rise. New ideas, researchers and curious minds are striving for new discoveries and advancements.\n\nAlgorithms for mimicking the human brain, such as a neural network, are used as part of machines, which will act as a human being. The area of the deep learning is in the main focus and the peak of its glory. But still, there is yet a lot more to discover.\n\nIn order for us to be able to do this, we should start with the basics. This tutorial will guide you through the following concepts:\n\n\n- Building a machine learning algorithm\n- Applying the technique of [transfer learning](https://towardsdatascience.com/what-is-transfer-learning-8b1a0fa42b4)\n- Building an iOS application based on the ML model using the Core ML framework.\n\nWhether you are an iOS developer, machine learning enthusiast or curious mind for technology, this tutorial is for you.\n\nFrom what I have learned from my experience with machine learning is that the hardest part is understanding its basic principles. When you get the hang of it, everything else is going to be the right amount of challenge, knowledge and projects stacked up in your experience. This tutorial will do exactly that, help you see the bigger picture and guide you deeper into one of the most hyped technology these days.\n\nHere is a demo of what we will build: \n\n![ml-ios-demo](//images.ctfassets.net/1es3ne0caaid/3OSefYygNaScYiwiWOaMOi/0358ec5921b77e4321c21393eace5c66/ml-ios-demo.gif)\n\nTo start working on this project, we will need to set up an environment. In the following section I will include all the packages used and links from where you can download them.\n\n## Prerequisites\n\nFor this tutorial you should have a basic understanding of machine learning,  and also familiarity with iOS development. \n\nThe following are used in this project:\n\n\n- [PyCharm (Commercial)](https://www.jetbrains.com/pycharm/download/#section=mac)\n- [Miniconda](https://conda.io/miniconda.html)\n- [Python 2.7](https://www.python.org/downloads/release/python-2714/) \n- [pip (10.0.1)](https://pip.pypa.io/en/stable/installing/)\n- coremltools (0.8)\n- [XCode (9.4.1)](https://developer.apple.com/xcode/)\n- Keras (2.1.3)\n\nDownload the above packages from the links attached. I went on and used Python 2.7 in combination with miniconda, I suggest you do the same, since there are differences between Python 2 and Python 3. You can always use Anaconda if you prefer, or used it before.\n\nThe installation of coremltools and Keras will be done with pip. Open your terminal and type the following:\n\n```\n    pip install keras==2.1.3\n    pip install coremltools\n```\n\n## But first of all, what is machine learning?\n\nMachine learning is the creation of algorithms who are able to learn on their own. They do not need to be programmed for each decision on the way. An algorithm builds on rules, fed with input and resulting in output. It is capable of making classifications, recognizing patterns and analyzing a large amount of data. \n\nThe input for these algorithms can be either supervised or unsupervised, ie. labelled or unlabelled data. ML can help us optimize large amounts of data and classify it in a way no human brain can, at least not with that speed. But it can't help us clean the data, that is our job. \n\nOur first task when building a machine learning algorithm - is finding the right data. Data is power. With the right amount of data, the diverse and clean one, we can build the optimal algorithm.\n\n## Secondly, what algorithm will be used?\n\nIn this tutorial, I will focus on building a convolutional neural network. CNN is used for image recognition in the area of deep learning. \n\nThe logic behind this choice is fairly simple since the final product is an algorithm that does image recognition. \n\nTo understand how the CNN works, we should understand how it processes the data, which is an image. An image is a three dimensional array of numbers, commonly known as pixels. Each pixel may have a value from 0 to 255. The colors we see are represented in RGB (RED, GREEN, BLUE) spectrum. The three dimensional array is consisted of width, height and its three channels(RGB). This neural network performs mathematical operations on the image's pixels.\n\nTo understand the operations more thoroughly, we will explain the topology of the CNN. The name of the neural network - convolutional, originates from the mathematical operation - dot between two functions. \n\n![topology-cnn](//images.ctfassets.net/1es3ne0caaid/3Wd1SI59EcSeE4KCsO6woE/c5457db830b8fbb4b6b5e89f516dac91/topology-cnn.png)\n\nThe first layer in the neural network is the convolutional (1). This is our main layer. In this step, certain effects are applied to the images, effects such as blurring or sharpening. This is achieved with filters. The filters are matrices of digits, performing matrix multiplication with the input image, resulting in a feature vector.\n\n![convolutional-layer-operation](//images.ctfassets.net/1es3ne0caaid/6kjISWq7bGSSw8mG8wMiiW/573017e5f035e96d68e8eab7b2a30e6c/convolutional-layer-operation.png)\n\nThe number and size of the filters are defined by us. \n\nThe next step is dealing with the fact that the real world data is a nonlinear one. If you are not familiar with non-linearity, it is a concept where the output does not rely on the input changes. So to achieve the nonlinearity, we apply one of the [activation functions](https://towardsdatascience.com/activation-functions-neural-networks-1cbd9f8d91d6) available such as ReLU, sigmoid or tanh. \n\nThe next layer in the neural network is recommended to be the pooling layer (2). The pooling layer performs downsampling of the image input dimensions, keeping the most important features. Usually, the pooling operation can either be selecting the largest digits of the image matrix, performing a sum of the matrices numbers, or calculating the matrices average. It all depends on the type of the pooling layer. \n\n![pooling-operation](//images.ctfassets.net/1es3ne0caaid/1LK85ny2nqCwQES2cmeeIi/99cc21446e688be013379bd591031136/pooling-operation.png)\n\nFinally, the last step of the neural network is flattening the output high dimensional matrix to a two dimensional array. Then adding the last fully connected layer in the CNN (3). This layer has connections between all the neurons and is the one responsible for performing the classification.\n\n![fully-connected-layer](//images.ctfassets.net/1es3ne0caaid/4zj9bHBTvaA2W0YMauyoME/674bf43e3627b8f88657c4dae8090e82/fully-connected-layer.png)\n\nThe dataset we will use for the training is a dataset of flowers, separated into five categories, which you can download [here](https://www.kaggle.com/alxmamaev/flowers-recognition#flowers.zip). One of the first problems, that was encountered with this dataset is the different dimensions of each of the images. The prerequisites for building a convolutional neural network is defining an input shape. So the first step towards processing the dataset is resizing the images. The final shape of the input is 200x200 (width x height). The following step is separating the dataset to train and test data. The threshold for test data is 20 percent. The process for resizing the images and separation can be observed below.\n\n## Project setup\n\nFirst, checkout the whole code from [**GitHub**](https://github.com/elleAI/ios-ml-app). \n\nOpen your terminal and navigate to the folder structure where you will set the project and clone the repository. Download the folder models from this [Dropbox link](https://www.dropbox.com/sh/nbopbot03e5hr0o/AAAHeps1wOehKKGj6SK4ZGyTa?dl=0) and place in the folder structure next to Datasets and MachineLearningTutorial folders.\n\nIn the project you can find the Python scripts for creating the neural networks for the initial training and the transfer learning.\n\nThe scripts are the following:\n⋅⋅/project/algorithmFlowManager.py - Defines the flow of the scripts.\n⋅⋅/project/cnn.py - Convolutional Neural Network for Initial Training\n⋅⋅/project/readDataset.py - Reads the datasets\n⋅⋅/project/seperateDataset.py - Separate the datasets to train and test folders.\n⋅⋅/project/resizeDataset.py - Resizes the images to 200x200 dimensions.\n⋅⋅/project/transferLearning.py - Convolutional Neural Network for Transfer Learning\n⋅⋅/project/convertToMLModel.py - Conversion of trained model with Transfer Learning to MLModel\n\nThere are also three additional subfolders: one being `datasets` for the images used for training and transfer learning respectively, the other one being `MachineLearningTutorial` folder, where you can find the iOS Application and the last one are the trained `models` (downloaded from Dropbox).\n\nFirst we need to open the project, by selecting **Choose File → Open . . .** from the menu.\nThe second thing during the project setup is choosing the project interpreter. To set up the interpreter open the settings options by selecting **Choose File → Default Settings . . .**:\n\n![ml-ios-pycharm-menu](//images.ctfassets.net/1es3ne0caaid/6p97SidpCgYCwYeggAE8wc/c1eb6bc491603d026e6b8c68f8e17e5c/ml-ios-pycharm-menu.png)\n\nYou will be prompted with the window shown in the picture below. Since this will be the first time setting up the interpreter, select **Project Interpreter → Add Local**.\n\n![ml-ios-project-interpreter](//images.ctfassets.net/1es3ne0caaid/1MzQNn5Ky8aUQk0qeMAMuu/2713f3a7309a8a6194cd7e3d195f5fe4/ml-ios-project-interpreter.png)\n\nThe interpreter can be found in the Miniconda or Anaconda installation folders on your computer. Usually it is located under the bin subfolder of the installation folder.\n\nSo when you set the interpreter, to check that everything works as expected, select **Edit Configurations . . .** . option, located next to the run button.\n\n![ml-ios-interpreter-config](//images.ctfassets.net/1es3ne0caaid/t6Pp2hNGbA2wgCgGUyUSw/19ba028893539b292be0305a43cf6928/ml-ios-interpreter-config.png)\n\nAnd you will get an overview for the project interpreter.\nNow that we are all set up, we can start working on our project.\n\n## Building the CNN\n\nFirst open the script  `algorithmFlowManager.py`.\n\n``` python\n    # ../ios-ml-app-master/algorithmFlowManager.py\n    \n    import readDataset\n    import cnn\n    import transferLearning\n    import convertToMLModel\n    import seperateDataset\n    import sys\n    import os\n    \n    # Returns the absolute path of the current project folder\n    def getFolderPath():\n        pathname = os.path.dirname(sys.argv[0])\n        return os.path.abspath(pathname)\n    \n    trainingDir = os.path.join(getFolderPath(), \"datasets\",\"trainDataset/\")\n    transferLearningDir = os.path.join(getFolderPath(), \"datasets\",\"transferLearningDataset/\")\n    \n    # Performs the initial training\n    def performTrainingCNN():\n        seperateDataset.createDatasetFolders(trainingDir)\n        xtrain, xtest, ytrain, ytest = readDataset.loadData(trainingDir, True)\n        modelPath = os.path.join(getFolderPath(), \"models\")\n        cnn.trainCNN(xtrain, xtest, ytrain, ytest, modelPath)\n    \n    # Performs the transfer Learning\n    def performTransferLearning():\n        seperateDataset.createDatasetFolders(transferLearningDir)\n        xtrain, xtest, ytrain, ytest = readDataset.loadData(transferLearningDir, False)\n        modelPath = os.path.join(getFolderPath(), \"models\")\n        transferLearning.performTransferLearning(xtrain, xtest, ytrain, ytest, modelPath)\n        \n    # Saves the trained model to .mlmodel format\n    def saveCoreMLModel():\n        convertToMLModel.convert(os.path.join(getFolderPath(), \"models\"))\n    \n    # To start the whole process, call this function\n    def start():\n        performTrainingCNN()\n        performTransferLearning()\n        saveCoreMLModel()\n    \n    start()\n```\n\n\nWhen calling the method:\n\n``` python\n    # ../ios-ml-app-master/algorithmFlowManager.py\n    \n    def start():\n        performTrainingCNN()\n        performTransferLearning()\n        saveCoreMLModel()\n```\n\nWe will initiate the initial training, the transfer learning and the conversion to MLModel.\n \nIf you are using macOS, you might get an error while running `algorithmFlowManager.py`, for unrecognized .DS_Store file in the datasets folders. To handle this run the following command:\n\n```\n    cd /folder\n    rm -rf .DS_Store \n```\n \nThis will delete this file which is autogenerated Desktop Service Store, created by the Finder application on Mac.\n \nNow we will look in the following method for the initial training:\n\n``` python\n    # ../ios-ml-app-master/algorithmFlowManager.py\n    \n    def performTrainingCNN():\n        seperateDataset.createDatasetFolders(trainingDir)\n        xtrain, xtest, ytrain, ytest = readDataset.loadData(trainingDir, True)\n        modelPath = os.path.join(getFolderPath(), \"models\")\n        cnn.trainCNN(xtrain, xtest, ytrain, ytest, modelPath)\n```\n\nLooking at this method, we will notice that before training the model, the first step is to separate the dataset images to train and test subfolders.\n\n``` python\n    # ../ios-ml-app-master/algorithmFlowManager.py\n    \n    seperateDataset.createDatasetFolders(trainingDir)\n```\n\nThis method is located in `seperateDataset.py` script.\n\nThe next line is reading the dataset images for the corresponding folders and allocates them in arrays, such as xtrain, ytrain, xtest and ytest. \n\n``` python\n    # ../ios-ml-app-master/algorithmFlowManager.py\n    \n    xtrain, xtest, ytrain, ytest = readDataset.loadData(trainingDir, True)\n```\n\nThis method is located in `readDataset.py` script.\n\nThe scripts for separating the datasets and reading the data for train and test are automatically called before training of the neural network, from `algorithmFlowManager.py`.\n\nNext open the script named `cnn.py`. Navigate to the method called from `algorithmFlowManager.py`:\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    from keras.models import Sequential\n    from keras.layers import Dense, Dropout, Flatten, Activation\n    from keras.layers import Conv2D, MaxPooling2D\n    from sklearn.model_selection import train_test_split\n    import os\n    \n    def trainCNN(xtrain, xtest, ytrain, ytest, path):\n        x_train, x_validation, y_train, y_validation = train_test_split(xtrain, ytrain, \n                                                    test_size = 0.2, random_state = 0)\n        model = Sequential()\n        model.add(Conv2D(32,(3,3), input_shape=(200,200,3)))\n        model.add(Conv2D(32,(3,3)))\n        model.add(Activation('relu'))\n        model.add(MaxPooling2D(pool_size=(2,2)))\n        model.add(Dropout(0.25))\n        model.add(Conv2D(64,(3,3)))\n        model.add(Conv2D(64, (3, 3)))\n        model.add(Activation('relu'))\n        model.add(MaxPooling2D(pool_size=(2, 2)))\n        model.add(Dropout(0.25))\n    \n        model.add(Flatten())\n        model.add(Dense(128))\n        model.add(Activation('relu'))\n        model.add(Dropout(0.5))\n        model.add(Dense(5))\n        model.add(Activation('softmax'))\n    \n        model.compile(loss='categorical_crossentropy',\n                  optimizer='rmsprop',\n                  metrics=['accuracy'])\n        model.fit(x_train, y_train,\n               batch_size=32, nb_epoch=10, verbose=1, validation_data=(x_validation, \n               y_validation))\n        model.evaluate(xtest, ytest)\n        saveModel(model, path)\n```\n\nThis method is building and training of the convolutional neural network. We will go step by step through the code.\n\nInitially before creating the neural network, the training data is separated in train and validation datasets. The main difference between the validation and test datasets is that we use the validation dataset for fine tuning of the hyperparameters of the neural network during training, while we use the test data for evaluating the overall accuracy. The main similarity is that both of the datasets are \"unknown\" to the neural network.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    x_train, x_validation, y_train, y_validation = train_test_split(xtrain, ytrain, \n                                                    test_size = 0.2, random_state = 0)\n```\n\nWhen the data is separated, we will start with the creation of the model. With Keras there are two models available, Sequential and Functional. In this tutorial we will use the Sequential model.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    model = Sequential()\n```\n\nThe next step will be adding the convolutional layers. I have decided to use 32 filters in our first layer of the CNN, since it a more common practice to do so. The size of the filters will be (3,3), which is a common small size for filters, when we know that small and local features are the one that are distinctive.\n\nNext, we will add two convolutional layers, the more convolutional layers, the better results. After the second layer, we will add activation Rectified Linear Unit (ReLU) function. The ReLU function is a nonlinear function f(x) = max(0,x), which replaces the negative values in the input with zeroes. So adding this nonlinearity is really important for the accuracy of our network. There are also other functions such as sigmoid and tanh, but this one has proved to give the best results.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    model.add(Conv2D(32,(3,3), input_shape=(200,200,3)))\n    model.add(Conv2D(32,(3,3)))\n    model.add(Activation('relu'))\n```\n\nNext, we add the pooling layer. It is common to follow this step after convolutional layers since it reduces the number of parameters in the network and it removes the unnecessary features during the training, therefore preventing overfitting. Here we perform max pooling, which in this case is selection of the largest number in the matrix of (2,2). The pooling operation is performed on the output from the previous layer, sliding through the output matrix.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    model.add(MaxPooling2D(pool_size=(2,2)))\n```\n\nIt is recommended after the pooling layer to apply dropout, which is a regularisation technique. This technique improves the accuracy of the network by preventing inter-dependencies between the nodes. It works by randomly dropping nodes and creating new connections at each iteration of the backpropagation algorithm. This algorithm is the base of the neural network.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    model.add(Dropout(0.25))\n```\n\nNext, we add the following convolutional layers, but with a higher number of filters, doubled because of the pooling layer.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    model.add(Conv2D(64,(3,3)))\n    model.add(Conv2D(64,(3,3)))\n    model.add(Activation('relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.25))\n```\n\nAt the last stages of building our neural network, we will perform a so-called \"flattening\". What this does is it takes the output of the convolutional layers and flattens the higher dimension of the array to a two dimensional array. The last layer is not focused only on a limited part of the image, it needs a set of features summed from the convolution to perform the classification.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    model.add(Flatten())\n```\n\nThe dense layer is actually the fully connected layer, this means each input node is connected with each output node. The 128 is the number of neurons in this layer. It is recommended to use two dense layers since it increases the accuracy. Keep in mind that there is no perfect network topology, but with testing you can finalize your neural network structure. Here we also apply activation function.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    model.add(Dense(128))\n    model.add(Activation('relu'))\n    model.add(Dropout(0.5))\n```\n\nThe final layer is the softmax activation function which will do the classification for the images fed in the neural network.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    model.add(Dense(5))\n    model.add(Activation('softmax'))\n```\n\nNow when we have defined our topology, we would need to compile the model. To do so, we need to define loss function. Loss function calculates the difference between the predictions of the neural network and correct answers for the dataset. The smaller the loss function, the better. There are few [loss functions](https://keras.io/losses/) available, such as binary_crossentropy, Poisson, cosine_proximity, categorical_crossentropy, and sparse_categorical_crossentropy. Next, we will define the optimizer for the network, here I have chosen rmsprop, but there are also [others](https://keras.io/optimizers/) such as adam, adagrad, adadelta, adamax and many more.\n\n``` pyython\n    # ../ios-ml-app-master/cnn.py\n    \n    model.compile(loss='categorical_crossentropy',\n                  optimizer='rmsprop',\n                  metrics=['accuracy'])\n```\n\nFinally, the model is fitted with the training data for the batch size of 32 and 10 epochs. This means that the data will be iterated 10 times, and during the epoch, the images will be separated in batches of 32 until all of them are processed through the network.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    model.fit(x_train, y_train,\n               batch_size=32, nb_epoch=10, verbose=1, \n               validation_data=(x_validation, y_validation))\n    model.evaluate(xtest, ytest)\n```\n\nAfter the training of the model is finished, we need to save it. \nWe will save the model to .h5 file format using the following method\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    model.save(path)\n```\n\nBut before saving it we want to remove the last dense layers, and then set the trainable flag to the layers of the CNN to false. In the next section on transfer learning I will explain why this is done.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    def saveModel(model, path):\n        layers = model.layers\n        first_dense_idx = [index for index, layer in enumerate(layers) if type(layer) is \n        Dense][0]\n    \n        num_del = len(layers) - first_dense_idx\n        for i in range(0, num_del):\n            model.pop()\n        for layer in model.layers:\n            layer.trainable = False\n    \n        model.save(os.path.join(path,\"model.h5\"))\n        model.summary()\n```\n\nThe following snippet is the summary of the trained model.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    Layer (type)                 Output Shape              Param #   \n    =================================================================\n    conv2d_1 (Conv2D)            (None, 198, 198, 32)      896       \n    _________________________________________________________________\n    conv2d_2 (Conv2D)            (None, 196, 196, 32)      9248      \n    _________________________________________________________________\n    max_pooling2d_1 (MaxPooling2 (None, 98, 98, 32)        0         \n    _________________________________________________________________\n    dropout_1 (Dropout)          (None, 98, 98, 32)        0         \n    _________________________________________________________________\n    conv2d_3 (Conv2D)            (None, 96, 96, 64)        18496     \n    _________________________________________________________________\n    conv2d_4 (Conv2D)            (None, 94, 94, 64)        36928     \n    _________________________________________________________________\n    max_pooling2d_2 (MaxPooling2 (None, 47, 47, 64)        0         \n    _________________________________________________________________\n    dropout_2 (Dropout)          (None, 47, 47, 64)        0         \n    _________________________________________________________________\n    flatten_1 (Flatten)          (None, 141376)            0         \n    _________________________________________________________________\n    dense_1 (Dense)              (None, 128)               18096256  \n    _________________________________________________________________\n    dropout_3 (Dropout)          (None, 128)               0         \n    _________________________________________________________________\n    dense_2 (Dense)              (None, 5)                 645       \n    =================================================================\n    Total params: 18,162,469\n    Trainable params: 18,162,469\n    Non-trainable params: 0\n    _________________________________________________________________\n```\n\nThe results of the training of the model are in the span of 95 - 99 % accuracy. \n\n## Transfer learning\n\nAndrew Ng said \"Transfer Learning will be the next driver of ML Success\", and we do follow. The idea behind transfer learning is a fairly basic one. Imagine the processing power and data needed for training a powerful machine learning algorithm. Now imagine doing that for every new data, retraining the algorithm, again and again, it is nor efficient, nor fast, also we would need a lot of data. \nBut instead of that approach, why don't we train one good neural network, save its topology and weights, load that model and remove the last layers, the one responsible for the classification of the data. Then load the saved model, add in new fully connected layers, and train this network with new data. This main difference is this data is way smaller and also we would need to train only the new layers, we will have faster and more efficient training. We have transferred the learning.\n\nThe training for the transfer learning is also intiated from `algorithmFlowManger.py` script.\n\n``` python\n    # ../ios-ml-app-master/algorithmFlowManager.py\n    \n    def performTransferLearning():\n        seperateDataset.createDatasetFolders(transferLearningDir)\n        xtrain, xtest, ytrain, ytest = readDataset.loadData(transferLearningDir, False)\n        modelPath = os.path.join(getFolderPath(), \"models\")\n        transferLearning.performTransferLearning(xtrain, xtest, ytrain, ytest, modelPath)\n```\n\nNow to understand the algorithm for transfer learning, we will open the script `transferLearning.py`.\n\n``` python\n    # ../ios-ml-app-master/transferLearning.py\n    \n    from keras.layers import Dense, Dropout, Activation\n    from keras.models import load_model\n    from sklearn.model_selection import train_test_split\n    import os\n    \n    def performTransferLearning(xtrain, xtest, ytrain, ytest, modelPath):\n        x_train, x_validation, y_train, y_validation = train_test_split(xtrain, ytrain,\n                                                       test_size=0.2, random_state=0)\n        model = load_model(os.path.join(modelPath, \"model.h5\"))\n        model.add(Dense(128))\n        model.add(Activation('relu', name='activation6'))\n        model.add(Dropout(0.5, name= 'dropout4'))\n        model.add(Dense(3))\n        model.add(Activation('softmax', name='activation7'))\n    \n        model.compile(loss='categorical_crossentropy',\n                      optimizer='adam', metrics=['accuracy'])\n        model.fit(x_train, y_train, validation_data=(x_validation, y_validation), epochs=30, batch_size=5)\n    \n        model.evaluate(xtest, ytest)\n        # Save the model\n        model.save(os.path.join(modelPath, \"transferLearning.h5\"))\n```\n\nAs you can notice, the above code is pretty familiar. We read the saved model of the trained CNN and then we add the new fully connected layers with the new number of classes.\n\nYou can notice that there is a specified name for some of the new layers, such as ‘activation6’ and ‘dropout4’, this is since the topology of the neural network can't have duplicate names. Since the loaded model already contains ‘activation1’ and ‘dropout1’.  So be sure to specify these names.\n\nThe dataset I will be using for transfer learning can be downloaded from [here](http://www.vision.caltech.edu/Image_Datasets/Caltech101/), it is a dataset of objects, but instead of using the whole list of categories, I only used three of them for the training. The categories are a butterfly, chandelier, and hawksbill. \nYou can also find the images attached in the datasets folder of the structure of the project. The grayscale images were also removed from the original folders since the input shape of the CNN is with three channels (RGB).\n\n``` python\n    # ../ios-ml-app-master/transferLearning.py\n    \n    Layer (type)                 Output Shape              Param #   \n    =================================================================\n    conv2d_1 (Conv2D)            (None, 198, 198, 32)      896       \n    _________________________________________________________________\n    conv2d_2 (Conv2D)            (None, 196, 196, 32)      9248      \n    _________________________________________________________________\n    activation_1 (Activation)    (None, 196, 196, 32)      0         \n    _________________________________________________________________\n    max_pooling2d_1 (MaxPooling2 (None, 98, 98, 32)        0         \n    _________________________________________________________________\n    dropout_1 (Dropout)          (None, 98, 98, 32)        0         \n    _________________________________________________________________\n    conv2d_3 (Conv2D)            (None, 96, 96, 64)        18496     \n    _________________________________________________________________\n    conv2d_4 (Conv2D)            (None, 94, 94, 64)        36928     \n    _________________________________________________________________\n    activation_2 (Activation)    (None, 94, 94, 64)        0         \n    _________________________________________________________________\n    max_pooling2d_2 (MaxPooling2 (None, 47, 47, 64)        0         \n    _________________________________________________________________\n    dropout_2 (Dropout)          (None, 47, 47, 64)        0         \n    _________________________________________________________________\n    flatten_1 (Flatten)          (None, 141376)            0         \n    _________________________________________________________________\n    dense_1 (Dense)              (None, 128)               18096256  \n    _________________________________________________________________\n    activation6 (Activation)     (None, 128)               0         \n    _________________________________________________________________\n    dropout4 (Dropout)           (None, 128)               0         \n    _________________________________________________________________\n    dense_2 (Dense)              (None, 4)                 516       \n    _________________________________________________________________\n    activation7 (Activation)     (None, 4)                 0         \n    =================================================================\n    Total params: 18,162,340\n    Trainable params: 18,096,772\n    Non-trainable params: 65,568\n    _________________________________________________________________\n```\n\nThe results of the training of the model are :\n\n``` python\n    # ../ios-ml-app-master/transferLearning.py\n    \n    loss: 0.0018 - acc: 1.0000 - val_loss: 1.1946 - val_acc: 0.7692\n```\n\n## Convert to MLModel\n\nAfter we perform transfer learning we save the model and convert it into MLModel format. The conversion is called from `algorithmFlowManager.py` with method:\n\n``` python\n    # ../ios-ml-app-master/algorithmFlowManager.py\n    \n    def saveCoreMLModel():\n        convertToMLModel.convert(os.path.join(getFolderPath(), \"models\"))\n```\n\nOpen the script `convertToMLModel.py`. You can notice implementation of the method called from `algorithmFlowManager.py`.\n\n``` python\n    # ../ios-ml-app-master/convertToMLModel.py\n    \n    def convert(path):\n        model = load_model(os.path.join(path, \"transferLearning.h5\"))\n        coreml_model = coremltools.converters.keras.convert(model,\n                                                            class_labels=['butterfly',\n                                                            'chandelier',\n                                                            'hawksbill'], \n                                                            input_names='input_1',\n                                                            image_input_names = 'input_1')\n        coreml_model.short_description = 'Model to classify category of images'\n        coreml_model.save(os.path.join(path, \"ObjectPredict.mlmodel\"))\n```\n\nFirst we read the saved transfer learning model\n\n``` python\n    # ../ios-ml-app-master/convertToMLModel.py\n    \n    model = load_model(os.path.join(path, \"transferLearning.h5\"))\n```\n\nThen perform the conversion by using the Python library coremltools. It supports conversion from the saved HDF5 file type to .mlmodel type, supported by Apple. Adding description to model come in handy when the MLModel is seen from the iOS Application. \n\n``` python\n    # ../ios-ml-app-master/convertToMLModel.py\n    \n    coreml_model = coremltools.converters.keras.convert(model,\n                                                            class_labels=['butterfly',\n                                                            'chandelier',\n                                                            'hawksbill'], \n                                                            input_names='input_1',\n                                                            image_input_names = 'input_1')\n    coreml_model.short_description = 'Model to classify category of images'\n    coreml_model.save(os.path.join(path, \"ObjectPredict.mlmodel\"))\n```\n\nAlso before the conversion is important to add the following parameters \n\n``` python\n    # ../ios-ml-app-master/convertToMLModel.py\n    \n    input_names='input_1',\n    image_input_names = 'input_1\n```\n\nThese will allow the input for our MLModel in our iOS Application to be CVPixelBufferRef instead of MLMultiArray.\n\nDuring conversion to MLModel we will see the following output:\n\n``` python\n    # ../ios-ml-app-master/convertToMLModel.py\n    \n    0 : conv2d_1_input, \u003ckeras.engine.topology.InputLayer object at 0x112d094d0\u003e\n    1 : conv2d_1, \u003ckeras.layers.convolutional.Conv2D object at 0x112d09510\u003e\n    2 : conv2d_2, \u003ckeras.layers.convolutional.Conv2D object at 0x112d159d0\u003e\n    3 : activation_1, \u003ckeras.layers.core.Activation object at 0x112d52910\u003e\n    4 : max_pooling2d_1, \u003ckeras.layers.pooling.MaxPooling2D object at 0x112d52ed0\u003e\n    5 : conv2d_3, \u003ckeras.layers.convolutional.Conv2D object at 0x112d7a710\u003e\n    6 : conv2d_4, \u003ckeras.layers.convolutional.Conv2D object at 0x112d7a250\u003e\n    7 : activation_2, \u003ckeras.layers.core.Activation object at 0x112dce710\u003e\n    8 : max_pooling2d_2, \u003ckeras.layers.pooling.MaxPooling2D object at 0x112e14cd0\u003e\n    9 : flatten_1, \u003ckeras.layers.core.Flatten object at 0x112e65b10\u003e\n    10 : dense_1, \u003ckeras.layers.core.Dense object at 0x112db7950\u003e\n    11 : activation6, \u003ckeras.layers.core.Activation object at 0x112e3b7d0\u003e\n    12 : dense_2, \u003ckeras.layers.core.Dense object at 0x112ed6c90\u003e\n    13 : activation7, \u003ckeras.layers.core.Activation object at 0x112e9ded0\u003e\n```\n\nThis is our first step toward building our user interface - the iOS Application.\n\n## iOS application with MLModel\n\nNow that we have generated the `ObjectPredict.ml` model we need to integrate it in our iOS application.\nOpen the `MachineLearningTutorial.xcodeproj`, located in `MachineLearningTutorial`  directory, in the project we cloned, `ios-ml-app-master`. This will launch the Xcode interface. Next, we will drag and drop `ObjectPredict.ml` file in the structure folder of our project, directly in Xcode. \n\n![ml-ios-objectpredict-file](//images.ctfassets.net/1es3ne0caaid/uLeWEy75nMeg820IWMqEC/339780b8a1c73613cba173200a654b93/ml-ios-objectpredict-file.png)\n\nIf we click on the model in XCode, it will present a generated overview of its input, output, and description. \n\nFinally we build our application.\n\nAfter a successful build, when the user selects an image, it is converted to CVPixelBuffer. This is achieved by using an open source class from GitHub which allows resizing of the image to specific dimensions and performs the conversion of the image to CVPixelBuffer. The return type of this conversion method will be the input to our MLModel Object, which will return the predicted class label.\n\nThe method responsible for the model prediction class is in the extension `ViewController+Classify.swift`. This method is called each time the end user choose an image.\n\n``` swift\n    // ../ios-ml-app-master/MachineLearningTutorial/MachineLearningTutorial/ViewController+Classify.swift\n    \n    func predictImageClass(_ image: UIImage) -\u003e String? {\n            let model = ObjectPredict()\n            do {\n                let category = try model.prediction(input_1: image.pixelBuffer(width: 200,                                                 height: 200)!)\n                return category.classLabel\n            } catch {\n                print(error)\n                return nil\n            }\n        }\n```\n\nThe result is being presented under the image. This can be noticed in the demo application attached above.\n\n***Tip:***  *If you are testing on a simulator if you want to add photo in its library, just drag and drop the image and it will be automatically added.*\n\n## Conclusion\n\nSo now hopefully you have a better overview of:\n\n\n- Collecting datasets and building a neural network\n- Performing transfer learning with new data (which is more than 10 times smaller in size)\n- And finally connecting the trained model in an iOS Application and creating a simple user interface for trying out the results.\n\nThis is the [Github](https://github.com/elleAI/ios-ml-app) link from where you can access the code.\n\nFrom trying out a few test images, I have noticed that for the categories that have less and more unstructured data, the results are worse. Since the accuracy of the transfer learning is not high, it can be concluded that with more and cleaner image data the neural network can learn better features from the images and show better results. Also, the initial network should have a lot more data, more epochs and bigger structure. This is why performing transfer learning on networks such as [inceptionV3](https://keras.io/applications/#inceptionv3) created by Google Brain Team, results in high accuracy.\n\nHope this tutorial gave you a quick and in depth intro of what the machine learning area can do at a very small scale at least. You could also try out recurrent neural networks or their extension - LSTM, there are few examples of speech recognition that you would probably find exciting. And last but not least take up to the challenge and improve my algorithm from above, by fine tuning the parameters and improving the data, because almost always there is a more optimized version of any piece of code you will see.\n\n\n## References:\n\n+ *Transfer Learning Images* - L. Fei-Fei, R. Fergus and P. Perona. \n+ *Learning generative visual models*\n*from few training examples: an incremental Bayesian approach tested on*\n*101 object categories*. IEEE. CVPR 2004, Workshop on Generative-Model\nBased Vision. 2004","metaTitle":"Create an iOS application using machine learning","metaDescription":"Use Python and Swift to create a machine learning powered iOS image recognition app. You will explore how to build a machine learning model, and add it to a simple iOS application."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5iJKA5uH6oMMw8GSGM2ko8","type":"Entry","createdAt":"2018-07-12T21:02:54.294Z","updatedAt":"2020-06-19T13:46:49.924Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app using Framework7","url":"chat-app-framework7","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/Kennypee/pusher-framework7-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-07-09","description":"Build a chat app for iOS and Android using Framework7 and Vue.js, with a simple Node.js backend. Framework7 is a free and open source mobile HTML framework to develop hybrid mobile apps or web apps with iOS \u0026 Android native look and feel.","prerequisite":"You will need Node and npm or Yarn installed on your machine.","content":"## Introduction\n\nRealtime chat functionality has revitalized the way we communicate over the years. In recent times, customers can speak directly with business owners from their mobile applications and websites. This is a huge plus in technology considering how difficult it was in the past.\n\nFramework7 is a free and open source mobile HTML framework to develop hybrid mobile apps with iOS and Android native look and feel. In this tutorial, we'll build a realtime chat application with Framework7 using Pusher channels. Here’s a preview of what we’ll be building. \n\n![framework7-chat-app-demo](//images.ctfassets.net/1es3ne0caaid/5ksbxBpdDyueuymA0OMEae/45c761be2e92c8b19f8eb55ca8a3a9d9/framework7-chat-app-demo.jpeg)\n\n## Prerequisites\n\nBefore you begin, ensure that you have Node and npm or Yarn installed on your machine. Here is a run-down of the core technologies we will be using.\n\n\n1. [**Framework7**](http://framework7.io) ****- a framework for building native-like mobile applications with HTML\n\n\n2. [**Pusher**](https://pusher.com/) - Pusher is a technology for building apps with varying realtime needs like push notifications and pub/sub messaging. It is the engine behind the realtime ability of our chat app.\n\n\n3. [**Vue.js**](https://vuejs.org/) - an open-source JavaScript framework for building user interfaces\n\n\n4. [**Phonegap**](http://phonegap.com/) - an application framework that enables you to build natively installed applications using HTML and JavaScript. \n\n\n## Setting up the project\n\nThe simplest way to set up a Phonegap project is through the command line interface (CLI). Before we create a Phonegap project, ensure that you have Phonegap installed on your machine. To install Phonegap, run:\n\n```\n    $ npm install -g phonegap\n```\n\nThis will install phonegap on your machine and you can confirm the installation by running the command:\n\n```\n    $ phonegap -v\n```\n\nThis should print the version of the currently installed Phonegap. Now that we have that installed let’s create a Phonegap project. Run:\n\n\n```    \n    // create a phonegap project with the framework7 vue template\n    $ phonegap create pusher-chat --template https://github.com/hollyschinsky/phonegap-template-framework7-vue\n    $ cd pusher-chat\n    //start the server\n    $ phonegap serve\n```\n\n\nIf you get any prompts in the process, it is always safe to say yes within the scope of this demo. The `phonegap serve` command will start your project on `localhost:3000`. If you navigate to it on your browser, you should see this.\n\n![framework7-default-page](//images.ctfassets.net/1es3ne0caaid/6peL2Lzl7imkwesSOiAKuM/3d2898faf0d1debba50b40bd9c0ae337/framework7-default-page.jpeg)\n\n## Setting up Pusher\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). \n\n![framework7-create-pusher](//images.ctfassets.net/1es3ne0caaid/2X2s4DWEt2cQEmAG6iui4k/a4bd9f45baaa63a44ea6c85c8f2cf22f/framework7-create-pusher.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![framework7-create-channels](//images.ctfassets.net/1es3ne0caaid/2reyE709jys2EO6eOIQKgw/12d2a1d82bd74a28a017eba7a441a6cc/framework7-create-channels.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with to be provided with some boilerplate code:\n\n![framework7-pusher-app-config](//images.ctfassets.net/1es3ne0caaid/55C390SQikyEYaY8uwW4Uc/3ddd7e19bd5134635da595a617e22cf1/framework7-pusher-app-config.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![framework7-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/3zxbKtLyysGEWyko8I2MOq/292dc1a265982eee46b7236043cfb6cb/framework7-pusher-app-keys.png)\n\nSave your Pusher credentials somewhere in your editor where you can quickly retrieve it as we’ll be needing it soon.\n\n\n## Server configurations\n\nWe’ll be using a local Node server to establish communications with the client so as to render messages in realtime. Before we create our server, let’s install the packages it’ll need to run effectively. Back in your project root, run:\n\n```\n    $ npm install --save axios body-parser cors express pusher pusher-js\n```\n\nThen in your code editor, create a new file `server.js` and set it up like so:\n\n``` javascript\n        //server.js\n        const Pusher = require('pusher');\n        const express = require('express');\n        const bodyParser = require('body-parser');\n        const cors = require('cors');\n        const app = express();\n        app.use(cors());\n        app.use(bodyParser.urlencoded({extended: false}));\n        app.use(bodyParser.json());\n        \n        var pusher = new Pusher({\n            appId: 'Your-app-Id',\n            key: 'Your-app-Key',\n            secret: 'Your-app-secret',\n            cluster: 'Your-app-cluster',\n            encrypted: true\n          });\n        app.set('PORT', process.env.PORT || 6000);\n        app.post('/message', (req, res) =\u003e {\n          const message = req.body;\n          pusher.trigger('chat', 'message', message);\n          res.send(message)\n      \n        });\n        app.listen(app.get('PORT'), () =\u003e \n          console.log('Listening at ' + app.get('PORT')))\n```\n\n\u003e Do not forget to replace the placeholder values here with your unique keys from Pusher.\n\nHere we loaded all the necessary middlewares for the Express server and then configured Pusher using the credentials we got from our Pusher dashboard.\n\nWe also created the `/``message` endpoint that will receive and process messages sent in from our app. Finally, we trigger an event named `message` to Pusher Channels on a channel called `chat`. The `chat` channel holds a message payload that contains the `message` sent by the user.\n\nTo start the server, run:\n\n```\n    $ node server\n```\n\nThe above command should output this message in your terminal:\n\n\n```    \n    Listening on port 6000\n``` \n\n## Application layout\n\nNow let’s open the `index.html` file and set it up. This is the entrance to our app and we’ll place a form to collect the user’s name and a button to take them to the chat page. Open the `index.html` file, delete all the code in it and update it with this:\n\n``` html\n    // www/index.html\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e \n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui\"\u003e\n      \u003cmeta name=\"apple-mobile-web-app-capable\" content=\"yes\"\u003e\n      \u003cmeta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\"\u003e\n      \u003ctitle\u003eMy App\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" href=\"css/framework7.ios.min.css\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"css/framework7.ios.colors.min.css\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"css/app.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cf7-statusbar\u003e\u003c/f7-statusbar\u003e\n        \u003cf7-views\u003e\n          \u003cf7-view id=\"main-view\" navbar-through :dynamic-navbar=\"true\" main\u003e\n            \u003cf7-navbar back-link=\"Back\" sliding\u003e\n              \u003cf7-nav-center sliding\u003ePusher-Framework7 App \u003c/f7-nav-center\u003e\n            \u003c/f7-navbar\u003e\n      \n            \u003cf7-pages\u003e\n              \u003cf7-page\u003e\n                \u003cf7-list\u003e\n                  \u003c/f7-list-item\u003e\n                        \u003cf7-list-item\u003e    \n                          \u003cf7-input type=\"text\" v-model:value=\"name\" placeholder=\"Your name\" clear-button\u003e\u003c/f7-input\u003e\n                        \u003c/f7-list-item\u003e\n                  \u003c/f7-list-item\u003e\n                  \u003cf7-list-button v-on:click=\"enterChat\"\u003eEnter Chat\u003c/f7-list-button\u003e\n                \u003c/f7-list\u003e\n              \u003c/f7-page\u003e\n            \u003c/f7-pages\u003e\n          \u003c/f7-view\u003e\n        \u003c/f7-views\u003e\n      \u003c/div\u003e\n      \u003ctemplate id=\"page-chat\"\u003e\n        \u003cf7-page\u003e\n    \u003c!-- chat page goes here ... --\u003e\n        \u003c/f7-page\u003e\n      \u003c/template\u003e\n      \n    \u003c!-- Add CDN for Pusher and Axios --\u003e\n      \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e \n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \n      \u003cscript src=\"cordova.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/framework7.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/vue.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/framework7-vue.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/app.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNotice we added the CDN for both Pusher and Axios in the scripts above. Next, open the `app.js` file and  replace the code there in it with this:\n\n``` javascript\n    // www/js/app.js\n    \n    (function(){\n    function init(){\n    Vue.use(Framework7Vue)\n    Vue.component('page-chat', {\n      template: '#page-chat',\n    \n    });\n      // Init App\n    new Vue({\n      el: '#app',\n      methods: {\n        enterChat: function(){\n          if(this.name.trim().length === 0 ){\n            alert(\" Enter your name ...\")\n            return false;\n          }\n        }\n      },\n      framework7: {\n        root: '#app',\n        // material: true,\n        routes: [\n          {\n            path: '/chat/',\n            component: 'page-chat'\n          }\n        ],\n      }\n    });\n    }  \n    // Handle device ready event\n    document.addEventListener('deviceready', init, false)\n    })();\n```    \n    \n\nAt this point, if you save both edited files and check back on your browser, you should now get this look:\n\n![framework7-chat-app-stage-1](//images.ctfassets.net/1es3ne0caaid/3CjVXRcJT2Q268I2QyiwCG/4da71e4c5139bcf6a0c6470879a578b5/framework7-chat-app-stage-1.jpeg)\n\nHere we can supply a name and click the **Enter Chat** button to enter the chat page, but at this point it won’t work. That is expected, given that we’ve not defined a function to handle the button click event. To fix that, let’s go ahead and do some data binding between our component and our states. Update the `app.js` file like so:\n\n``` javascript\n    // www/js/app.js\n    \n    // init states\n    var states = {\n        name: '',\n        msgs: []\n    };\n      \n    (function(){\n    function init(){\n    \n    Vue.use(Framework7Vue)\n    \n    Vue.component('page-chat', {\n      template: '#page-chat',\n      data: function(){\n        return states;\n      },\n      // handle onSend\n      methods: {\n        onSend: function(text, clear){\n             console.log(\"clicked\") \n          if( typeof clear == 'function' ) clear()\n        }\n      }\n    });\n      // Init App\n    new Vue({\n      el: '#app',\n      data: function(){\n        return states;\n      },\n      // handle enterChat button\n      methods: {\n        enterChat: function(){\n          if(this.name.trim().length === 0 ){\n            alert(\" Enter your name ...\")\n            return false;\n          }\n          this.msgs.length = 0;\n          this.$f7.mainView.router.load({url:'/chat/'});\n        }\n      },\n      framework7: {\n        root: '#app',\n        /* Uncomment to enable Material theme: */\n        // material: true,\n        routes: [\n          {\n            path: '/chat/',\n            component: 'page-chat'\n          }\n        ],\n      }\n    });\n    }  \n    // Handle device ready event\n    \n    document.addEventListener('deviceready', init, false)\n    })();\n```\n\nHere we defined a states object to hold the name of the user and an array of messages. Then we added the missing callbacks that we defined in our HTML file to handle the click events on the buttons. \n\nIf the user supplies a name and clicks the **Enter Chat** button, it’ll open up the chat page, but if that is not the case, it’ll alert the user to a name. Update your `app.js` file with the snippet above and save. Now go back to the browser, enter a name and click **Enter Chat.** This should now open up the empty chat page.\n\nNext, we’ll set up the chat page to have a simple chat form with an input to collect the message and a button to send it. Open the `index.html` file and update the chat page template section with this code:\n\n``` html\n    // www/index.html\n    // ...\n    \u003cf7-messages\u003e\n      \u003cf7-message v-for=\"msg in msgs\" :name=\"msg.name\" :text=\"msg.text\" :type=\"msg.type\"\u003e\n    \u003c/f7-message\u003e\n    \u003c/f7-messages\u003e\n      \u003cf7-messagebar placeholder=\"type message\" send-link=\"Send\" v-on:submit=\"onSend\" \u003e\n    \u003c/f7-messagebar\u003e\n    // ...\n```    \n\nAdd this code in the section where we left a comment to add chat page. Save the `index.html` file and check back on your browser. The chat page should look like this:\n\n![framework7-chat-app-stage-2](//images.ctfassets.net/1es3ne0caaid/5hX0MmKXSEE2KYKo20kUoM/6a2fb2c3fbf42ac5aef29d016d50e115/framework7-chat-app-stage-2.jpeg)\n\n## Realtime updates\n\nAt this point, we can type messages, but nothing happens when you try to send. This is because we haven’t integrated Pusher. At the beginning we set up Pusher and retrieved our app keys, we’ll now use it to configure our project. Open the `app.js`  file and add this code:\n\n``` javascript\n      // www/js/app.js\n      \n       const pusher = new Pusher('YOUR_PUSHER_KEY', {\n        cluster: 'YOUR_CLUSTER',\n        encrypted: true,\n      });\n      const channel = pusher.subscribe('chat');\n      channel.bind('message', data =\u003e {\n          console.log(data)\n        var type = data.name == states.name ? 'sent':'received'\n        var name = type == 'sent'? states.name : data.name;\n        states.msgs.push({name:name, text:data.text, type:type});\n      });\n      \n      // ...\n```\n\nThis sets up Pusher in our client with the credentials from our dashboard. We subscribe to the `chat` channel we defined on the server and bind our response data to the appropriate view objects to display them on screen.\n\nNow to send the chat to the server when the user clicks the **Send button**, let’s update the onSend function in the `app.js`  file:\n\n``` javascript\n      // www/js/app.js\n      ...\n      \n      // Init Page Components\n    Vue.component('page-chat', {\n      template: '#page-chat',\n      data: function(){\n        return states;\n      },\n      \n      methods: {\n        onSend: function(text, clear){\n             console.log(\"clicked\") \n            var message = {\n                name: this.name,\n                text: text \n            }\n            axios.post('http://localhost:6000/message', message);\n          if( typeof clear == 'function' ) clear()\n          }\n        }\n      });\n      \n      // Init App\n    new Vue({\n      el: '#app',\n      data: function(){\n        return states;\n      },\n      methods: {\n        enterChat: function(){\n          if(this.name.trim().length === 0 ){\n            alert(\" Enter your name ...\")\n            return false;\n          }\n          this.msgs.length = 0;\n          this.$f7.mainView.router.load({url:'/chat/'});\n          \n        }\n      },\n      ...\n```\n\nHere we define a message object that takes the name of the user and text message to send. Then we use Axios to post the message object to the `/messages` endpoint we defined on the server.\n\n\n## Testing\n\nTo test out the application, ensure that both Phonegap server and the Node server is running. If that’s not the case, you can start the Phonegap server in project root with `phonegap serve` and the Node server with `node server`. \n\nBefore testing your application, I recommend you compare your codes with mine to ensure that you did everything right so as not to encounter any blockers. Compare your `index.html`, `server.js` and `app.js`. If everything looks alright, now go ahead and test the application.\n\nOpen two browser windows to `localhost:3000` and send messages:\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/8xB4rlOXW-A?rel=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen\u003e\u003c/iframe\u003e\n\n\n\n## Conclusion\n\nThe importance of realtime engagement of users on any platform cannot be overemphasized. As seen in this tutorial, we were able to implement a realtime chat system with Framework7 and Pusher. I hope you found this tutorial helpful.\n\nFeel free to explore the code for this tutorial on [GitHub](https://github.com/Kennypee/pusher-framework7-chat) and add more features as you deem fit.  ","metaTitle":"Build a chat app using Framework7","metaDescription":"Use Framework7, Vue.js and Node.js to build a simple chat app for Android and iOS. Framework7 is a free and open source mobile HTML framework to develop hybrid mobile apps or web apps with iOS \u0026 Android native look and feel."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1DwFvg2XSM0e0KAWSkq6MQ","type":"Entry","createdAt":"2018-07-03T09:11:22.597Z","updatedAt":"2020-06-19T10:55:11.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a cryptocurrency tracking app with push notifications using Swift and Laravel - Part 2: The iOS app","url":"cryptocurrency-tracking-swift-laravel-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/cryptocurrency-alert-ios-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2018-07-02","description":"Build a cryptocurrency tracking app featuring push notifications. Use Swift to create an iOS app, powered by a Laravel backend. User will receive alerts when currency prices change. In part two, create the iOS app.","prerequisite":"You will need the following installed on your machine: Xcode, the Laravel CLI, SQLite and Cocoapods. Familiarity with the Xcode IDE will be helpful. You should have completed part one of the series.","content":"In the [first part](http://http://https://pusher.com/tutorials/cryptocurrency-tracking-swift-laravel-part-1) of this article, we started developing our cryptocurrency alert application. We developed the backend of the application that will power the iOS application. As it stands, our backend application can return settings for a device based on its UUID, save the settings for a device based on its UUID and also it can figure out what devices to send push notifications to when the currencies update.\n\nIn this part, we will focus on creating the iOS application using Swift and Xcode.\n\n## Prerequisites\n\nTo follow along you need the following requirements:\n\n\n- Completed the [part one](http://#) of this article.\n- [Xcode](https://developer.apple.com/xcode) installed on your machine.\n- Knowledge of the Xcode IDE.\n- Basic knowledge using the [Laravel framework](https://laravel.com/).\n- Basic knowledge of the [Swift programming language](http://developer.apple.com/swift).\n- [Laravel CLI](https://laravel.com/docs/5.6/installation) installed on your machine.\n- SQLite installed on your machine. [Installation guide](http://www.sqlitetutorial.net).\n- [Cocoapods](https://guides.cocoapods.org/using/getting-started.html) installed on your machine.\n- [Pusher Beams](https://pusher.com/beams) and [Channels](https://pusher.com/channels) application.\n\n\n## What we will be building\n\nWe already started out by building the backend of the application using Laravel. So next, we will build the iOS application using Swift. If you want to test the push notifications then you will need to run the application on a live device.\n\n### How the client application will work\n\nFor the client app, the iOS application, we will create a simple list that will display the available currencies and the current prices to the dollar. Whenever the price of the cryptocurrency changes, we will trigger an event using Pusher Channels so the prices are updated.\n\nFrom the application, you will be able to set a minimum and maximum price change when you want to be alerted. For instance, you can configure the application to send a push notification to the application when the price of one Etherium (ETH) goes below $500. You can also configure the application to receive a notification when the price of Bitcoin goes above $5000.\n\n### How the application will look\n\nWhen we are done with the application, here's how the application will look:\n\n![ios-cryptocurrency-part-1-demo](//images.ctfassets.net/1es3ne0caaid/1K08NTSdaoIIqWQ2YAyOqo/4efdb4fa01a2ee599bf5b71561a717a4/ios-cryptocurrency-part-1-demo.gif)\n\nLet’s get started.\n\n\n## Setting up your client application\n\nLaunch Xcode and click **Create a new Xcode project**. Select **Single View App** and click **Next**. Enter your **Product Name**, we will call our project *cryptoalat*, and select **Swift** from the **Language** options. You can also change any other detail you wish to on the screen then click **Next**.\n\n### Installing dependencies\n\nNow you have your Xcode project. Close Xcode and open a terminal window. `cd` to the iOS project directory in terminal and run the command below to create a Podfile:\n\n```\n    $ pod init\n```\n\n\u003e The Podfile is a specification that describes the dependencies of the targets of one or more Xcode projects. The file should simply be named Podfile. All the examples in the guides are based on CocoaPods version 1.0 and onwards. - [Cocoapods Guides](https://guides.cocoapods.org/using/the-podfile.html)\n\nThis will generate a new file called `Podfile` in the root of your project. Open this file in any editor and update the file as seen below:\n\n```\n    // File: Podfile\n    platform :ios, '11.0'\n    \n    target 'cryptoalat' do\n      use_frameworks!\n    \n      pod 'Alamofire', '~\u003e 4.7.2'\n      pod 'PushNotifications', '~\u003e 0.10.8'\n      pod 'PusherSwift', '~\u003e 6.1.0'\n      pod 'NotificationBannerSwift', '~\u003e 1.6.3'\n    end\n```\n\n\u003e If you used a project name other than cryptoalat, then change it in the Podfile to match your project’s target name. \n\nGo to terminal and run the command below to install your dependencies:\n\n```\n    $ pod install\n```\n\nWhen the installation is complete, you will have a  `*.xcworkspace` file in the root of your project. Open this file in Xcode and let’s start developing our cryptocurrency alert application.\n\n\n## Building the iOS application\n\n### Creating our storyboard\n\nThe first thing we need to do is design our storyboard for the application. This is what we want the storyboard to look like when we are done.\n\n![ios-cryptocurrency-part-2-storyboard](//images.ctfassets.net/1es3ne0caaid/3CgFeKuZnyMkQ0Kseaw2Gk/9e4a0a12e87fe5685f30c563d9f3ea8d/ios-cryptocurrency-part-2-storyboard.png)\n\nOpen the `Main.storyboard` file and design as seen above.\n\nAbove we have three scenes. The first scene, which is the entry point, is the launch scene. We then draw a manual segue with an identifier called **Main**. Then we set the segue **Kind** to **Present Modally**. This will present the next scene which is a navigation view controller. Navigation controllers already have an attached root view controller by default.\n\nWe will use this attached view controller, which is a `TableViewController`, as the main view for our application. It’ll list the available currencies and show us a text field that allows us to change the setting for that currency when it is tapped.\n\nOn the third scene, we set the reuse identifier of the cells to **coin** and we drag two labels to the prototype cell. The first label will be for the coin name and the second label will be for the price.\n\nNow that we have the scenes, let’s create some controllers and view classes and connect them to our storyboard scenes.\n\n### Creating your controllers\n\nIn Xcode, create a new class `LaunchViewController` and paste the contents of the file below into it:\n\n``` swift\n    import UIKit\n    \n    class LaunchViewController: UIViewController {\n        \n        override func viewDidAppear(_ animated: Bool) {\n            super.viewDidAppear(animated)\n            \n            SettingsService.shared.loadSettings {\n                self.routeToMainController()\n            }\n        }\n    \n        fileprivate func routeToMainController() {\n            performSegue(withIdentifier: \"Main\", sender: self)\n        }\n    }\n```\n\n\u003e Set the controller as the custom class for the first scene in the `Main.storyboard` file.\n\nIn the code, we load the settings using a `SettingsService` class we will create later. When the settings are loaded for the device, we then call the `routeToMainController` method, which routes the application to the main controller using the **Main** segue we created earlier.\n\nThe next controller we will be creating will be the `CoinsTableViewController`. This will be the controller that will be tied to the third scene which is the main scene. \n\nCreate the `CoinsTableViewController` and replace the contents with the following code;\n\n``` swift\n    import UIKit\n    import PusherSwift\n    import NotificationBannerSwift\n    \n    struct Coin {\n        let name: String\n        let rate: Float\n    }\n    \n    class CoinsTableViewController: UITableViewController {\n    \n        var coins: [Coin] = []\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n        }\n        \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return coins.count\n        }\n    \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let coin = coins[indexPath.row]\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"coin\", for: indexPath) as! CoinTableViewCell\n    \n            cell.name.text = \"1 \\(coin.name) =\"\n            cell.amount.text = \"$\\(String(coin.rate))\"\n    \n            return cell\n        }\n    }\n```\n\n\u003e Set the controller as the custom class for the first scene in the `Main.storyboard` file.\n\nAbove we have defined the `Coin` struct and it has a `name` and `rate` property. We have the controller which we define the `coins` property as an array of `Coin`s. We then have some boilerplate code that comes with creating a table view controller.\n\nThe `numberOfSections` method specifies how many sections the table will have. In the first `tableView` method, we return the number of `coins` available and in the second `tableView` method, we define how we want each row to be handled.\n\n### Creating other supporting classes\n\nIf you noticed in the code above, we referenced a `CoinTableViewCell` as the class for each row in the last `tableView` method. Let’s create that.\n\nCreate a `CoinTableViewCell` class and paste the following code into it:\n\n``` swift\n    class CoinTableViewCell: UITableViewCell {\n        @IBOutlet weak var name: UILabel!    \n        @IBOutlet weak var amount: UILabel!\n    }\n```\n\nOpen the `Main.storyboard` file and set the class as the custom class for the prototype cell in the third scene of the `Main.storyboard` file. When you have set the class, connect the `@IBOutlet`s as specified in the cell class above.\n\nThe next class we need to create is the `SettingsService`. This class will be responsible for updating and fetching the settings for the device.\n\nCreate a new `SettingsService` class and replace the contents with the following code:\n\n``` swift\n    import Foundation\n    import Alamofire\n    import NotificationBannerSwift\n    \n    class SettingsService {\n        static let key = \"CryptoAlat\"\n        static let shared = SettingsService()\n        \n        var settings: Settings? {\n            get {\n                return self.getCachedSettings()\n            }\n            set(settings) {\n                if let settings = settings {\n                    self.updateCachedSettings(settings)\n                }\n            }\n        }\n        \n        private init() {}\n        \n        func loadSettings(completion: @escaping() -\u003e Void) {\n            fetchRemoteSettings { settings in\n                guard let settings = settings else {\n                    return self.saveSettings(self.defaultSettings()) { _ in\n                        completion()\n                    }\n                }\n                \n                self.updateCachedSettings(settings)\n                completion()\n            }\n        }\n        \n        fileprivate func defaultSettings() -\u003e Settings {\n            return Settings(\n                btc_min_notify: 0, \n                btc_max_notify: 0, \n                eth_min_notify: 0, \n                eth_max_notify: 0\n            )\n        }\n        \n        func saveSettings(_ settings: Settings, completion: @escaping(Bool) -\u003e Void) {\n            updateRemoteSettings(settings, completion: { saved in\n                if saved {\n                    self.updateCachedSettings(settings)\n                }\n                \n                completion(saved)\n            })\n        }\n        \n        fileprivate func fetchRemoteSettings(completion: @escaping (Settings?) -\u003e Void) {\n            guard let deviceID = AppConstants.deviceIDFormatted else {\n                return completion(nil)\n            }\n    \n            let url = \"\\(AppConstants.API_URL)?u=\\(deviceID)\"\n            Alamofire.request(url).validate().responseJSON { resp in\n                if let data = resp.data, resp.result.isSuccess {\n                    let decoder = JSONDecoder()\n                    if let settings = try? decoder.decode(Settings.self, from: data) {\n                        return completion(settings)\n                    }\n                }\n                \n                completion(nil)\n            }\n        }\n        \n        fileprivate func updateRemoteSettings(_ settings: Settings, completion: @escaping(Bool) -\u003e Void) {\n            guard let deviceID = AppConstants.deviceIDFormatted else {\n                return completion(false)\n            }\n            \n            let params = settings.toParams()\n            let url = \"\\(AppConstants.API_URL)?u=\\(deviceID)\"\n            Alamofire.request(url, method: .post, parameters: params).validate().responseJSON { resp in\n                guard resp.result.isSuccess, let res = resp.result.value as? [String: String] else {\n                    return StatusBarNotificationBanner(title: \"Failed to update settings.\", style: .danger).show()\n                }\n                \n                completion((res[\"status\"] == \"success\"))\n            }\n        }\n        \n        fileprivate func updateCachedSettings(_ settings: Settings) {\n            if let encodedSettings = try? JSONEncoder().encode(settings) {\n                UserDefaults.standard.set(encodedSettings, forKey: SettingsService.key)\n            }\n        }\n        \n        fileprivate func getCachedSettings() -\u003e Settings? {\n            let defaults = UserDefaults.standard\n            if let data = defaults.object(forKey: SettingsService.key) as? Data {\n                let decoder = JSONDecoder()\n                if let decodedSettings = try? decoder.decode(Settings.self, from: data) {\n                    return decodedSettings\n                }\n            }\n            \n            return nil\n        }\n    }\n```\n\nAbove we have the `SettingsService`. The first method `loadSettings` loads the settings from the API and then saves it locally. If there is no setting remotely, it calls the `defaultSettings` method and saves the response to the API.\n\nThe `saveSettings` method saves the `Settings` remotely using `updateRemoteSettings` and then locally using `updateCachedSettings`. The `fetchRemoteSettings` gets the settings from the API and decodes the response using the [Swift decodable API](https://blog.pusher.com/swift-4-decoding-json-codable/).\n\nNext, let’s define the `Settings` struct and have it extend `Codable`. In the same file for the `SettingsService`, add this above the `SettingsService` class definition:\n\n``` swift\n    struct Settings: Codable {\n        var btc_min_notify: Int?\n        var btc_max_notify: Int?\n        var eth_min_notify: Int?\n        var eth_max_notify: Int?\n        \n        func toParams() -\u003e Parameters {\n            var params: Parameters = [:]\n            \n            if let btcMin = btc_min_notify { params[\"btc_min_notify\"] = btcMin }\n            if let btcMax = btc_max_notify { params[\"btc_max_notify\"] = btcMax }\n            if let ethMin = eth_min_notify { params[\"eth_min_notify\"] = ethMin }\n            if let ethMax = eth_max_notify { params[\"eth_max_notify\"] = ethMax }\n    \n            return params\n        }\n    }\n```\n\nAbove we have a simple `Settings` struct that conforms to `Codable`. We also have a `toParams` method that converts the properties to a `Parameters` type so we can use it with [Alamofire](https://github.com/Alamofire/Alamofire) when making requests.\n\nOne last class we need to create is  `AppConstants`. We will use this class to keep all the data that we expect to remain constant and unchanged throughout the lifetime of the application.\n\nCreate a `AppConstants` file and paste the following code:\n\n``` swift\n    import UIKit\n    \n    struct AppConstants {\n        static let API_URL = \"http://127.0.0.1:8000/api/settings\"\n        static let deviceID = UIDevice.current.identifierForVendor?.uuidString\n        static let deviceIDFormatted = AppConstants.deviceID?.replacingOccurrences(of: \"-\", with: \"_\").lowercased()\n        static let PUSHER_INSTANCE_ID = \"PUSHER_BEAMS_INSTANCE_ID\"\n        static let PUSHER_APP_KEY = \"PUSHER_APP_KEY\"\n        static let PUSHER_APP_CLUSTER = \"PUSHER_APP_CLUSTER\"\n    }\n```\n\n\u003e Replace the `PUSHER_*` keys with the values gotten from the Pusher Channels and Beams dashboard.\n\n### Updating the settings for the device\n\nNow that we have defined the settings service, let’s update our controller so the user can set the minimum and maximum prices for each currency.\n\nOpen the `CoinsTableViewController` class and add the following method:\n\n``` swift\n    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        let coin = coins[indexPath.row]\n    \n        var minTextField: UITextField?\n        var maxTextField: UITextField?\n    \n        let title = \"Manage \\(coin.name) alerts\"\n        let message = \"Notification will be sent to you when price exceeds or goes below minimum and maximum price. Set to zero to turn off notification.\"\n    \n        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n        alert.addTextField { textfield in\n            minTextField = textfield\n            textfield.placeholder = \"Alert when price is below\"\n        }\n    \n        alert.addTextField { textfield in\n            maxTextField = textfield\n            textfield.placeholder = \"Alert when price is above\"\n        }\n    \n        alert.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))\n    \n        alert.addAction(UIAlertAction(title: \"Save\", style: .default, handler: { action in\n            guard let minPrice = minTextField?.text, let maxPrice = maxTextField?.text else {\n                return StatusBarNotificationBanner(title: \"Invalid min or max price\", style: .danger).show()\n            }\n    \n            var btcMin: Int?, btcMax: Int?, ethMin: Int?, ethMax: Int?\n    \n            switch coin.name {\n            case \"BTC\":\n                btcMin = Int(minPrice)\n                btcMax = Int(maxPrice)\n            case \"ETH\":\n                ethMin = Int(minPrice)\n                ethMax = Int(maxPrice)\n            default:\n                return\n            }\n    \n            let settings = Settings(\n                btc_min_notify: btcMin,\n                btc_max_notify: btcMax,\n                eth_min_notify: ethMin,\n                eth_max_notify: ethMax\n            )\n    \n            SettingsService.shared.saveSettings(settings, completion: { saved in\n                if saved {\n                    StatusBarNotificationBanner(title: \"Saved successfully\").show()\n                }\n            })\n        }))\n    \n        present(alert, animated: true, completion: nil)\n    }\n```\n\nThe method above is automatically called when a row is selected. In this method, we display a `UIAlertController` with two text fields for the minimum price and the maximum price. When the prices are submitted, the `SettingsService`  we created earlier takes care of updating the values both locally and remotely.\n\n### Adding realtime cryptocurrency update support\n\nOpen the `CoinsTableViewController` and add the `pusher` property to the class as seen below:\n\n``` swift\n    var pusher: Pusher!\n```\n\nThen replace the `viewDidLoad` method with the following code:\n\n``` swift\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    \n        pusher = Pusher(\n            key: AppConstants.PUSHER_APP_KEY, \n            options: PusherClientOptions(host: .cluster(AppConstants.PUSHER_APP_CLUSTER))\n        )\n    \n        let channel = pusher.subscribe(\"currency-update\")\n    \n        let _ = channel.bind(eventName: \"currency.updated\") { data in\n            if let data = data as? [String: [String: [String: Float]]] {\n                guard let payload = data[\"payload\"] else { return }\n    \n                self.coins = []\n    \n                for (coin, deets) in payload {\n                    guard let currentPrice = deets[\"current\"] else { return }\n                    self.coins.append(Coin(name: coin, rate: currentPrice))\n                }\n    \n                Dispatch.main.async {\n                    self.tableView.reloadData()\n                }\n            }\n        }\n    \n        pusher.connect()\n    }\n```\n\nIn the code above, we are using the [Pusher Swift SDK](https://pusher.com/docs/ios_quick_start) to subscribe to our `currency-update` Pusher Channel. We then subscribe to the `currency.updated` event on that channel. Whenever that event is triggered, we refresh the price of the cryptocurrency in realtime.\n\n### Adding push notifications to our iOS new application\n\nTo add push notification support, open the `AppDelegate` class and replace the contents with the following:\n\n``` swift\n    import UIKit\n    import PushNotifications\n    \n    @UIApplicationMain\n    class AppDelegate: UIResponder, UIApplicationDelegate {\n    \n        var window: UIWindow?\n        \n        func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n            PushNotifications.shared.start(instanceId: AppConstants.PUSHER_INSTANCE_ID)\n            PushNotifications.shared.registerForRemoteNotifications()\n            return true\n        }\n    \n        func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n            PushNotifications.shared.registerDeviceToken(deviceToken) {\n                if let deviceID = AppConstants.deviceIDFormatted {\n                    try? PushNotifications.shared.subscribe(interest: \"\\(deviceID)_eth_changed\")\n                    try? PushNotifications.shared.subscribe(interest: \"\\(deviceID)_btc_changed\")\n                }\n            }\n        }\n    }\n```\n\nIn the class above, we use the [Pusher Beams Swift SDK](https://docs.pusher.com/push-notifications/reference/ios) to register the device for push notifications. We then subscribe to the `*_eth_changed` and `*_btc_changed` interests, where `*` is the device’s unique UUID.\n\nNow that we have completed the logic for the application, let’s enable push notifications on the application in Xcode. \n\nIn the project navigator, select your project, and click on the **Capabilities** tab. [Enable Push Notifications](http://help.apple.com/xcode/mac/current/#/devdfd3d04a1) by turning the switch ON.\n\n![ios-cryptocurrency-part-2-enable-push](//images.ctfassets.net/1es3ne0caaid/7wLtGQ4Y00EUWiKgw6oQoE/8eb22b60c3271e6d0e47646c6423a7ad/ios-cryptocurrency-part-2-enable-push.png)\n\nThis will create an entitlements file in the root of your project. With that, you have provisioned your application to fully receive push notifications.\n\n### Allowing our application to connect locally\n\nIf you are going to be testing the app’s backend using a local server, then there is one last thing we need to do. Open the `info.plist` file and add an entry to the `plist` file to allow connection to our local server:\n\n![ios-cryptocurrency-part-2-local-connection](//images.ctfassets.net/1es3ne0caaid/5SXadC36VOcMs22Ooayw44/a7272c2b7126b3195878e1bcfad3e57b/ios-cryptocurrency-part-2-local-connection.png)\n\nThat’s all. We can run our application. However, **remember that to demo the push notifications, you will need an actual iOS device as simulators cannot receive push notifications.** If you are using a physical device, you’ll need to expose your local API using [Ngrok](https://ngrok.com) and then change the `API_URL`  **In** `AppConstants`.\n\nAnytime you want to update the currency prices, run the command below manually in your Laravel application:\n\n```\n    $ php artisan schedule:run\n```\n\nHere is a screen recording of the application in action:\n\n![ios-cryptocurrency-part-1-demo](//images.ctfassets.net/1es3ne0caaid/1K08NTSdaoIIqWQ2YAyOqo/4efdb4fa01a2ee599bf5b71561a717a4/ios-cryptocurrency-part-1-demo.gif)\n\n\n## Conclusion\n\nIn this article, we have been able to see how easy it is to create a cryptocurrency alert website using Laravel, Swift, Pusher Channels and Pusher Beams. The source code to the application built in this article is available on [GitHub](https://github.com/neoighodaro/cryptocurrency-alert-ios-app).","metaTitle":"Create a cryptocurrency tracking app - Part 2: The iOS app","metaDescription":"Use Swift and Laravel to create an iOS app for tracking cryptocurrency price changes. Users will receive alerts as prices go beyond set limits.  In part two, create the iOS app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rJUFHakQgGc6A0WQyyMcA","type":"Entry","createdAt":"2018-07-03T09:11:14.166Z","updatedAt":"2018-07-03T09:14:45.775Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a cryptocurrency tracking app with push notifications using Swift and Laravel - Part 1: The backend","url":"cryptocurrency-tracking-swift-laravel-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/cryptocurrency-alert-ios-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2018-07-02","description":"Build a cryptocurrency tracking app featuring push notifications. Use Swift to create an iOS app, powered by a Laravel backend. User will receive alerts when currency prices change. In part one, create the backend with Laravel.","prerequisite":"You will need the following installed on your machine: Xcode, the Laravel CLI, SQLite and Cocoapods. Familiarity with the Xcode IDE will be helpful.","content":"## Introduction\n\nCryptocurrency has been and is still one of the biggest trends this year. With currencies like Bitcoin reaching record highs and new companies creating tokens and offerings, it’s showing just how much potential cryptocurrencies have. However, cryptocurrency prices are erratic and can fall or climb at a moments notice, so it’s always a good idea to keep tabs on the changes.\n\nIn this article, we will be building an application that keeps tabs on changes to the crypto market. The application will focus on BTC and ETH and will allow users of the application to set minimum and maximum amounts when they would like to be notified about the coins current price. The application will be built using Swift, Laravel, Pusher Channels, and Pusher Beams.\n\n## Prerequisites\n\nTo follow along you need the following requirements:\n\n\n- [Xcode](https://developer.apple.com/xcode) installed on your machine.\n- Knowledge of the Xcode IDE.\n- Basic knowledge using the [Laravel framework](https://laravel.com/).\n- Basic knowledge of the [Swift programming language](http://developer.apple.com/swift).\n- [Laravel CLI](https://laravel.com/docs/5.6/installation) installed on your machine.\n- SQLite installed on your machine. [Installation guide](https://www.tutorialspoint.com/sqlite/sqlite_installation.htm).\n- [Cocoapods](https://guides.cocoapods.org/using/getting-started.html) installed on your machine.\n- [Pusher Beams](https://pusher.com/beams) and [Channels](https://pusher.com/channels) application.\n\n\n## What we will be building\n\nWe will start out by building the backend of the application using Laravel. Then we will build the iOS application using Swift. If you want to test the push notifications then you will need to run the application on a live device.\n\n### How the client application will work\n\nFor the client app, the iOS application, we will create a simple list that will display the available currencies and the current prices to the dollar. Whenever the price of the cryptocurrency changes, we will trigger an event using Pusher Channels so the prices are updated.\n\nFrom the application, you will be able to set a minimum and maximum price change when you want to be alerted. For instance, you can configure the application to send a push notification to the application when the price of one Etherium (ETH) goes below $500. You can also configure the application to receive a notification when the price of Bitcoin goes above $5000.\n\n### How the backend application will work\n\nFor the backend application, we will be using Laravel and we will create endpoints that allow a user update the settings and load the settings for a device. The API will be responsible for checking the current prices of the cryptocurrency and sending both a Channels update and a Beams notification when the price changes. \n\nHowever, because the prices don’t change very predictably, we will be simulating the currency changes so we can preview the application in action. We will also be using [task scheduling](https://laravel.com/docs/5.6/scheduling) in Laravel to trigger the checks for the current currency prices. \n\nIn a production environment we will set the scheduler as a cronjob, but because we are in development, we will manually run the command to trigger price changes.\n\n### How the application will look\n\nWhen we are done with the application, here's how the application will look:\n\n![ios-cryptocurrency-part-1-demo](//images.ctfassets.net/1es3ne0caaid/1K08NTSdaoIIqWQ2YAyOqo/4efdb4fa01a2ee599bf5b71561a717a4/ios-cryptocurrency-part-1-demo.gif)\n\nLet’s get started.\n\n## Setting up Pusher Beams and Channels\n\n### Setting up Pusher Channels\n\nLog in to your [Pusher dashboard](https://dashboard.pusher.com). If you don’t have an account, create one. Your dashboard should look like this:\n\n![ios-cryptocurrency-part-1-keys](//images.ctfassets.net/1es3ne0caaid/47FA7jeU0w62siO8G6iCQi/aeda1c00644c75e4d327dbe6725694d7/ios-cryptocurrency-part-1-keys.png)\n\nCreate a new Channels app. You can easily do this by clicking the big **Create new Channels app** card at the bottom right. When you create a new app, you are provided with keys. Keep them safe as you will soon need them.\n\n### Setting up Pusher Beams\n\nNext, log in to the new [Pusher dashboard](https://dash.pusher.com/), in here we will create a Pusher Beams instance. You should sign up if you don’t have an account yet. Click on the **Beams** button on the sidebar then click **Create**, this will launch a pop up to **Create a new Beams instance**. Name it `cryptoalat`.\n\n![ios-cryptocurrency-part-1-new-beams](//images.ctfassets.net/1es3ne0caaid/4xKD0goX606gGqUSQW2EcC/3dcd7757df87351ddc54cb62397ce2e7/ios-cryptocurrency-part-1-new-beams.png)\n\nAs soon as you create the instance, you will be presented with a quickstart guide. Select the **IOS** quickstart and follow through the wizard.\n\n![ios-cryptocurrency-part-1-beams-quickstart](//images.ctfassets.net/1es3ne0caaid/27fmUEHf64Qc0KcIQo0KAw/265bde6f67ea031f5d5495a10273e678/ios-cryptocurrency-part-1-beams-quickstart.png)\n\nWhen you are done creating the Beams application, you will be provided with an instance ID and a secret key, we will need these later.\n\n## Setting up your backend application\n\nIn your terminal, run the command below to create a new Laravel project:\n\n```\n    $ laravel new cryptoapi\n```\n\nThis command will create a new Laravel project and install all the required Laravel dependencies. \n\nNext, let’s install some of the project specific dependencies. Open the `composer.json` file and in the `require` property, add the following dependencies:\n\n``` json\n    // File: composer.json\n    \"require\": {\n        [...]\n        \n        \"neo/pusher-beams\": \"^1.0\",\n        \"pusher/pusher-php-server\": \"~3.0\"\n    },\n```\n\nNow run the command below to install these dependencies.\n\n```\n    $ composer update\n```\n\nWhen the installation is complete, open the project in a text editor of your choice. [Visual Studio Code](https://code.visualstudio.com/) is pretty nice. \n\n### Setting up our Pusher Beams library\n\nThe first thing we want to do is set up the [Pusher Beams library](https://github.com/neoighodaro/pusher-beams) we just pulled in using composer. To set up, open the `.env` file and add the following keys:\n\n```\n    PUSHER_BEAMS_SECRET_KEY=\"PUSHER_BEAMS_SECRET_KEY\"\n    PUSHER_BEAMS_INSTANCE_ID=\"PUSHER_BEAMS_INSTANCE_ID\"\n```\n\nYou should replace the `PUSHER_BEAMS_*` placeholders with the keys you got when setting up your Beams application.\n\nNext, open the `config/broadcasting.php` file and scroll until you see the `connections` key. In there, you’ll have the `pusher` settings, add the following to the `pusher` configuration:\n\n``` php\n    'pusher' =\u003e [\n        // [...]\n    \n        'beams' =\u003e [\n            'secret_key' =\u003e env('PUSHER_BEAMS_SECRET_KEY'),\n            'instance_id' =\u003e env('PUSHER_BEAMS_INSTANCE_ID'),\n        ],\n    ],\n```\n\n### Setting up our Pusher Channels library\n\nThe next step is to set up Pusher Channels. Laravel comes with native support for Pusher Channels so we do not need to do much to set it up.\n\nOpen the `.env` file and update the following keys below:\n\n```\n    BROADCAST_DRIVER=pusher\n    \n    // [...]\n    \n    PUSHER_APP_ID=\"PUSHER_APP_ID\"\n    PUSHER_APP_KEY=\"PUSHER_APP_KEY\"\n    PUSHER_APP_SECRET=\"PUSHER_APP_SECRET\"\n    PUSHER_APP_CLUSTER=\"PUSHER_APP_CLUSTER\"\n```\n\nAbove you set the `BROADCAST_DRIVER` to `pusher` and then for the other `PUSHER_APP_*` keys, replace the placeholders with the keys gotten from your Pusher dashboard. That’s all we need to do to set up Pusher Channels for this application.\n\n\n## Building the backend application\n\nNow that we have set up all the dependencies, we can start building the application. We will start by creating the routes. However, instead of creating controllers to hook into the routes, we will be adding the logic directly to the routes.\n\n### Setting up the database, migration, and model\n\nSince we will be working with a database, we need to set up the database we are going to be working with. To make things easy we will be using SQLite. Create an empty  `database.sqlite` file in the `database` directory.\n\nOpen the `.env` file and replace:\n\n```\n    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_DATABASE=homestead\n    DB_USERNAME=homestead\n    DB_PASSWORD=secret\n```\n\nWith\n\n```\n    DB_CONNECTION=sqlite\n    DB_DATABASE=/full/path/to/your/database.sqlite\n```\n\nNext, let’s create a migration for the `devices` table. We will use this table to store devices and their notification settings. This will help us know what devices to send push notifications to.\n\nRun the command below to create the migration and model:\n\n```\n    $ php artisan make:model Device -m\n```\n\n\u003e The `-m` flag will instruct artisan to create a migration alongside the model.\n\nThis command will generate two files, the migration file in the `database/migrations` and the model in the `app` directory. Let’s edit the migration file first.\n\nOpen the `*_create_devices_table.php` migration file in the `database/migrations`  directory and replace the contents with the following:\n\n``` php\n    \u003c?php\n    \n    use Illuminate\\Support\\Facades\\Schema;\n    use Illuminate\\Database\\Schema\\Blueprint;\n    use Illuminate\\Database\\Migrations\\Migration;\n    \n    class CreateDevicesTable extends Migration\n    {\n        /**\n         * Run the migrations.\n         *\n         * @return void\n         */\n        public function up()\n        {\n            Schema::create('devices', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003estring('uuid')-\u003eunique();\n                $table-\u003efloat('btc_min_notify')-\u003edefault(0);\n                $table-\u003efloat('btc_max_notify')-\u003edefault(0);\n                $table-\u003efloat('eth_min_notify')-\u003edefault(0);\n                $table-\u003efloat('eth_max_notify')-\u003edefault(0);\n            });\n        }\n        \n        /**\n         * Reverse the migrations.\n         *\n         * @return void\n         */\n        public function down()\n        {\n            Schema::dropIfExists('devices');\n        }\n    }\n```\n\nIn the `up` method, we have defined the structure of the `devices` table. We have the `uuid` field which will be a unique string for each device registered. We have two `btc_notify` fields which are there to save the minimum and maximum prices of BTC at which point the device should be notified. Same applies to the* `eth_*_notify`  fields.\n\nTo run the migration, run the command below:\n\n```\n    $ php artisan migrate\n```\n\nOpen the `app/Device.php` model and replace the contents with the code below:\n\n``` php\n    \u003c?php\n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    use Illuminate\\Notifications\\Notifiable;\n    \n    class Device extends Model\n    {\n        use Notifiable;\n    \n        public $timestamps = false;\n        \n        protected $fillable = [\n            'uuid', \n            'btc_min_notify', \n            'btc_max_notify', \n            'eth_min_notify', \n            'eth_max_notify',\n        ];\n        \n        protected $cast = [\n            'btc_min_notify' =\u003e 'float',\n            'btc_max_notify' =\u003e 'float',\n            'eth_min_notify' =\u003e 'float',\n            'eth_max_notify' =\u003e 'float'\n        ];\n        \n        public function scopeAffected($query, string $currency, $currentPrice)\n        {\n            return $query-\u003ewhere(function ($q) use ($currency, $currentPrice) {\n                $q-\u003ewhere(\"${currency}_min_notify\", '\u003e', 0)\n                  -\u003ewhere(\"${currency}_min_notify\", '\u003e', $currentPrice);\n            })-\u003eorWhere(function ($q) use ($currency, $currentPrice) {\n                $q-\u003ewhere(\"${currency}_max_notify\", '\u003e', 0)\n                  -\u003ewhere(\"${currency}_max_notify\", '\u003c', $currentPrice);\n            });\n        }\n    }\n```\n\nIn the model above, we have set the `$timestamps` property to `false` to make sure that Eloquent does not try to update the `created_at` and `updated_at` fields, which is the normal behavior.\n\nWe also have the `scopeAffected` method which is an example of an [Eloquent scope](https://laravel.com/docs/5.6/eloquent#local-scopes). We use this to get the affected devices after a price change has occurred on a currency. So if, for instance, BTC’s price drops, this method will check the devices and the settings to see the devices that need to be notified of this change.\n\n\n\u003e Local scopes allow you to define common sets of constraints that you may easily re-use throughout your application. For example, you may need to frequently retrieve all users that are considered \"popular\". To define a scope, prefix an Eloquent model method with `scope`. - [Laravel documentation](https://laravel.com/docs/5.6/eloquent#local-scopes).\n\nWe will use this scope later in our application when we need to know what devices to send push notifications to.\n\n### Creating the routes\n\nOpen the `routes/api.php` file and replace the contents of the file with the following code:\n\n``` php\n    // File: routes/api.php\n    \u003c?php\n    \n    use App\\Device;\n    use Illuminate\\Http\\Request;\n```\n \nNext, let’s add the first route. Append the code below to the routes file:\n\n``` php\n    // File: routes/api.php\n    Route::get('/settings', function (Request $request) {\n        return Device::whereUuid($request-\u003equery('u'))-\u003efirstOrFail()['settings'];\n    });\n```\n\nIn the route above, we are returning the settings for the device supplied in the `u` query parameter. This means if a registered device hits the `/settings` endpoint and passes the device UUID through the `u` parameter, the settings for that device will be returned. \n\nNext, in the same routes file, paste the following at the bottom of the file:\n\n``` php\n    Route::post('/settings', function (Request $request) {\n        $settings = $request-\u003evalidate([\n            'btc_min_notify' =\u003e 'int|min:0',\n            'btc_max_notify' =\u003e 'int|min:0',\n            'eth_min_notify' =\u003e 'int|min:0',\n            'eth_max_notify' =\u003e 'int|min:0',\n        ]);\n    \n        $settings = array_filter($settings, function ($value) { return $value \u003e 0; });\n    \n        $device = Device::firstOrNew(['uuid' =\u003e $request-\u003equery('u')]);\n        $device-\u003efill($settings);\n        $saved = $device-\u003esave();\n        \n        return response()-\u003ejson([\n            'status' =\u003e $saved ? 'success' : 'failure'\n        ], $saved ? 200 : 400);\n    });\n```\n\nAbove, we have defined the route for the `POST /settings`  route. This route saves settings to the database. It will create a new entry if the setting does not already exist or will update the existing one if it does.\n\nThat’s all for the routes.\n\n### Creating the jobs, events, and notifiers\n\nNext, we need to create the [Laravel job](https://laravel.com/docs/5.6/queues#creating-jobs) that will run at intervals to check if there is a change in the currency price. \n\nRun the command below to create a new Laravel job:\n\n```\n    $ php artisan make:job CheckPrices\n```\n\nThis will create a new `CheckPrices` class in the `app` directory. Open that class and replace the contents with the following:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Jobs;\n    \n    use App\\Device;\n    use Illuminate\\Bus\\Queueable;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Queue\\InteractsWithQueue;\n    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n    use Illuminate\\Foundation\\Bus\\Dispatchable;\n    use App\\Events\\CurrencyUpdated;\n    use App\\Notifications\\CoinPriceChanged;\n    \n    class CheckPrices implements ShouldQueue\n    {\n        use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;\n        \n        protected $supportedCurrencies = ['ETH', 'BTC'];\n    \n        /**\n         * Execute the job.\n         *\n         * @return void\n         */\n        public function handle()\n        {\n            $payload = $this-\u003egetPricesForSupportedCurrencies();\n    \n            if (!empty($payload)) {\n                $this-\u003etriggerPusherUpdate($payload);\n                $this-\u003etriggerPossiblePushNotification($payload);\n            }\n        }\n        \n        private function triggerPusherUpdate($payload)\n        {\n            event(new CurrencyUpdated($payload));\n        }\n        \n        private function triggerPossiblePushNotification($payload)\n        {\n            foreach ($this-\u003esupportedCurrencies as $currency) {\n                $currentPrice = $payload[$currency]['current'];\n                \n                $currency = strtolower($currency);\n    \n                foreach (Device::affected($currency, $currentPrice)-\u003eget() as $device) {\n                    $device-\u003enotify(new CoinPriceChanged($currency, $device, $payload));\n                }\n            }\n        }\n        \n        public function getPricesForSupportedCurrencies(): array\n        {\n            $payload = [];\n    \n            foreach ($this-\u003esupportedCurrencies as $currency) {\n                if (config('app.debug') === true) {\n                    $response = [\n                        $currency =\u003e [\n                            'USD' =\u003e (float) rand(100, 15000)\n                        ]\n                    ];\n                } else {\n                    $url = \"https://min-api.cryptocompare.com/data/pricehistorical?fsym={$currency}\u0026tsyms=USD\u0026ts={$timestamp}\";\n                    \n                    $response = json_decode(file_get_contents($url), true);\n                }\n    \n                if (json_last_error() === JSON_ERROR_NONE) {\n                    $currentPrice = $response[$currency]['USD'];\n    \n                    $previousPrice = cache()-\u003eget(\"PRICE_${currency}\", false);\n    \n                    if ($previousPrice == false or $previousPrice !== $currentPrice) {\n                        $payload[$currency] = [\n                            'current' =\u003e $currentPrice,\n                            'previous' =\u003e $previousPrice,\n                        ];\n                    }\n    \n                    cache()-\u003eput(\"PRICE_${currency}\", $currentPrice, (24 * 60 * 60));\n                }\n            }\n    \n            return $payload;\n        }\n    }\n```\n\nIn the class above, we implement the `ShouldQueue` interface. This makes it so that the job can and will be queued. In a production server, queueing jobs makes your application faster as it queues jobs that might take a while to execute for later execution. \n\nWe have four methods in this class. The first one is the `handle` method. This one is called automatically when the job is executed. In this method, we fetch the prices for the available currencies and then check if the price has changed. If it has, we publish a Pusher Channel event and then check if there are any devices that need to be notified based on the user’s settings. If there are any, we send a push notification to that device. \n\nWe have the `triggerPusherUpdate` method which triggers a `CurrencyUpdated` event. We will create this event in the next section. We also have a `triggerPossiblePushNotification` method which gets the list of devices which should be notified of the currency change and then notifies the user using the `CoinPriceChanged` class, which we will create in the next section.\n\nLastly, we have the `getPricesForSupportedCurrencies` method which just fetches the current price of a currency. In this method, we have a debug mode that simulates the current price of a currency.\n\nTo make sure this class we just created is scheduled properly, open the `app/Console/Kernel.php` file and in the `schedule` method, add the following code to the `schedule` method:\n\n``` php\n    $schedule-\u003ejob(new \\App\\Jobs\\CheckPrices)-\u003eeveryMinute();\n```\n\nNow every time we run the command `php artisan schedule:run` all the jobs in this `schedule` method will be run. Normally, in a production environment, we will need to add the schedule command as a cronjob, however, we will run this command manually.\n\nThe next thing to do will be to create the notifiers and events. In your terminal, run the following commands:\n\n```\n    $ php artisan make:event CurrencyUpdated\n    $ php artisan make:notification CoinPriceChanged\n```\n\nThis will create a class in the `Events` and `Notifications` directories.\n\n In the [event](https://laravel.com/docs/5.6/events) class, `CurrencyUpdated` paste the following code:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Events;\n    \n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n    \n    class CurrencyUpdated implements ShouldBroadcast\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n    \n        public $payload;\n        \n        public function __construct($payload)\n        {\n            $this-\u003epayload = $payload;\n        }\n    \n        public function broadcastOn()\n        {\n            return new Channel('currency-update');\n        }\n        \n        public function broadcastAs()\n        {\n            return 'currency.updated';\n        }\n    }\n```\n\nIn the event class above, we have the `broadcastOn` method that specifies the Pusher channel we want to broadcast an event on. We also have the `broadcastAs` method which specifies the name of the event we want to broadcast to the channel.\n\nIn the `CoinPriceChanged` [notification](https://laravel.com/docs/5.6/notifications) class, replace the contents with the following code:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Notifications;\n    \n    use App\\Device;\n    use Illuminate\\Bus\\Queueable;\n    use Neo\\PusherBeams\\PusherBeams;\n    use Neo\\PusherBeams\\PusherMessage;\n    use Illuminate\\Notifications\\Notification;\n    \n    class CoinPriceChanged extends Notification\n    {\n        use Queueable;\n        \n        private $currency;\n        private $device;\n        private $payload;\n        \n        public function __construct(string $currency, Device $device, array $payload)\n        {\n            $this-\u003ecurrency = $currency;\n            $this-\u003edevice = $device;\n            $this-\u003epayload = $payload;\n        }\n        \n        public function via($notifiable)\n        {\n            return [PusherBeams::class];\n        }\n        \n        public function toPushNotification($notifiable)\n        {\n            $currentPrice = $this-\u003epayload[strtoupper($this-\u003ecurrency)]['current'];\n            \n            $previousPrice = $this-\u003epayload[strtoupper($this-\u003ecurrency)]['current'];\n    \n            $direction = $currentPrice \u003e $previousPrice ? 'climbed' : 'dropped';\n    \n            $currentPriceFormatted = number_format($currentPrice);\n    \n            return PusherMessage::create()\n                    -\u003eiOS()\n                    -\u003esound('success')\n                    -\u003etitle(\"Price of {$this-\u003ecurrency} has {$direction}\")\n                    -\u003ebody(\"The price of {$this-\u003ecurrency} has {$direction} and is now \\${$currentPriceFormatted}\");\n        }\n        \n        public function pushNotificationInterest()\n        {\n            $uuid = strtolower(str_replace('-', '_', $this-\u003edevice-\u003euuid));\n            \n            return \"{$uuid}_{$this-\u003ecurrency}_changed\";\n        }\n    } \n```\n\nIn the class above we have the `toPushNotification` class which prepares the push notification using the Pusher Beams library. We also have the `pushNotificationInterest` method which sets the name for the interest of the push notification depending on the currency and device ID.\n\nThat’s all for the backend, now just run the command below to start the server:\n\n```\n    $ php artisan serve\n```\n\nThis will start a PHP server with our application running. Also if you need to manually trigger a currency change, run the command below:\n\n```\n    $ php artisan schedule:run\n```\n\nNow that we are done with the backend, we can create the application using Swift and Xcode.\n\n## Conclusion\n\nIn this part of the article, we have created the backend for our cryptocurrency alert application. [In the next part](https://pusher.com/tutorials/cryptocurrency-tracking-swift-laravel-part-2), we will be seeing how we can create the application that will consume the API we just created in this part.\n\nThe source code to this application is available on [GitHub](https://github.com/neoighodaro/cryptocurrency-alert-ios-app).","metaTitle":"Create a cryptocurrency tracking app - Part 1: The backend","metaDescription":"Use Swift and Laravel to create an iOS app for tracking cryptocurrency price changes. Users will receive alerts as prices go beyond set limits.  In part one, create the backend with Laravel."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mROLAeJqdUOeyyeIOaY6e","type":"Entry","createdAt":"2018-06-22T15:26:32.144Z","updatedAt":"2020-06-19T12:35:25.717Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a live blog app using Swift and Go","url":"live-blog-swift-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/liveblog-swift-go-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2018-06-20","description":"Build a live blogging app for iOS with Swift. Create a backend using Go. Admin users will be able to add blog posts, with the homepage showing the updates in realtime.","prerequisite":"You will need Xcode, Go, SQLite and Cocoapods installed on your machine. Some knowledge of Swift will be helpful.","content":"Live blogs allow users to follow events live without audio or video. It's particularly useful when you are in situations where you cannot consume audio/video media. Live blogs have been used to cover things like football commentary, political commentary, and more.\n\nIn this article, we are going to consider how to build a live blogging application. We will be building it using Swift for iOS and we will use Go as the backend language for the application.\nWhen we are done with the application, this is what it will look like:\n\n![swift-liveblog-demo](//images.ctfassets.net/1es3ne0caaid/DXndn8OaXYOsmIYImoc4g/57197aefae945c69127b5289f6566b3c/swift-liveblog-demo.gif)\n\n## Prerequisites\n\nTo get started you need the following:\n\n\n- Xcode (v9.x) running on your machine. [Download Xcode](https://developer.apple.com/xcode/).\n- Go (v0.10 or later) installed on your machine. [Installation guide](https://golang.org/doc/install#install).\n- SQLite installed on your machine.\n- Knowledge of the Swift programming language.\n- Basic knowledge of the Go programming language.\n- Knowledge of using the Xcode IDE.\n- Cocoapods installed on your machine. [Installation guide](https://guides.cocoapods.org/using/getting-started.html).\n  \n\nLet's get started.\n\n## Creating the Swift application\n\nLaunch Xcode and create a new 'Single View App' project. We will creatively name ours ... *drum rolls* ... LiveBlog. Next, close Xcode and `cd` to the root directory of your Xcode project and run the following command:\n\n```\n    $ pod init\n```\n\nThis command will create a new `Podfile` in the root of your project. Open the `Podfile` in your code editor and paste the following code:\n\n```\n    platform :ios, '11.0'\n    \n    target 'LiveBlog' do\n      use_frameworks!\n    \n      pod 'Alamofire', '~\u003e 4.7.2'\n      pod 'PusherSwift', '~\u003e 6.1.0'\n      pod 'PushNotifications', '~\u003e 0.10.8'\n      pod 'NotificationBannerSwift', '~\u003e 1.6.3'\n    end\n```\n\nNext, run the following command to install the packages listed above using Cocoapods:\n\n```\n    $ pod install\n```\n\nWhen the installation is complete, you will see a `LiveBlog.xcworkspace` file in the project directory. Open this file in Xcode.\n\nLet's create our application's storyboard. Open the `Main.storyboard` file and what we want to do is create something similar to the board below:\n\n![swift-liveblog-storyboard](//images.ctfassets.net/1es3ne0caaid/4KTjm5s42c84E4OU0EyqcW/9fd1fe99e09b565aec3f032cd4a34b7d/swift-liveblog-storyboard.png)\n\nTo create this, we added a new navigation controller and made it the entry point of the storyboard. We then assigned a reuse identifier to the cell on the table view controller called post. We also set the title of the view controller using the interface builder.\n\nNext, create a table view controller called `PostsTableViewController` and set this as the custom class for the table view controller in the main storyboard.\n\nIn the `PostsTableViewController` paste in the following code:\n\n``` swift\n    import UIKit\n    import Alamofire\n    import NotificationBannerSwift\n    \n    struct Post: Codable {\n        let id: Int64\n        let content: String\n    }\n    \n    struct Posts: Codable {\n        var items: [Post]\n    }\n    \n    class PostsTableViewController: UITableViewController {\n    \n        var posts = Posts(items: [])\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n    \n            Alamofire.request(\"http://127.0.0.1:9000/posts\").validate().responseJSON { resp in\n                guard resp.result.isSuccess, let data = resp.data else {\n                    return StatusBarNotificationBanner(title: \"Unable to fetch posts\", style: .danger).show()\n                }\n    \n                if let posts = try? JSONDecoder().decode(Posts.self, from: data) {\n                    self.posts = posts\n                    self.tableView.reloadData()\n                }\n            }\n        }\n    \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return posts.items.count\n        }\n    \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"post\", for: indexPath)\n            let post = posts.items[indexPath.row]\n    \n            cell.textLabel?.text = post.content\n    \n            return cell\n        }\n    \n    }\n```\n\nAbove we have a two `Codable` structs for the `Post` and `Posts` objects. We will decode the response from the API to these objects and make working with JSON responses easier.\n\n**Recommended:** [**Decoding JSON using Codable in Swift 4**](https://blog.pusher.com/swift-4-decoding-json-codable/)\n\nIn our `viewDidLoad` method, we make a request to the API to fetch the posts and then we save them to the `posts` property of the controller then we reload the `tableView`.\nThe rest of the methods in the controller should be familiar to you. They are used to override the table view's rendering.\n\n### Adding realtime functionality\nBecause we are creating a live blog, we want to add the realtime functionality to the application so that when a new post is made, we get an instant update.\n\nIn the `PostsTableViewController`, import the Pusher Swift SDK:\n\n``` swift\n    import PusherSwift\n```\n\nNow in the `viewDidLoad` method, we can add our Pusher functionality. At the top of the method after `super.viewDidLoad()`, add the following code:\n\n``` swift\n    let pusher = Pusher(\n        key: \"PUSHER_APP_KEY\", \n        options: PusherClientOptions(\n            host: .cluster(\"PUSHER_APP_CLUSTER\")\n        )\n    )\n    \n    let channel = pusher.subscribe(\"live-blog-stream\")\n    \n    let _ = channel.bind(eventName: \"new-post\") { data in\n        if let data = data as? [String: AnyObject] {\n            if let id = data[\"id\"] as? Int64, let content = data[\"content\"] as? String {\n                self.posts.items.insert(Post(id: id, content: content), at: 0)\n                self.tableView.reloadData()\n            }\n        }\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the value from your Pusher dashboard.\n\nIn the code above, we create an instance of the Pusher SDK and then we `subscribe` to the `live-blog-stream` channel. We then `bind` a callback to the `new-post` event on the channel.\n\nWhenever this event is triggered, the callback is fired. In the callback, we update the `posts` with the new post that was passed with the event then we reload the `tableView` so the changes are reflected immediately.\n\nWith those few lines, we have implemented realtime functionality to the application. Easy right?\n\n## Creating the Go backend for our realtime application\n\nThe next thing we want to do is create the backend for our application. We will make it as simple as possible so we can easily demonstrate how to trigger events on a channel in Pusher using Go.\n\nCreate a new project directory for the Go application. Let's call it `liveblog-backend` and in that directory create a `public` directory:\n\n```\n    $ mkdir liveblog-backend\n    $ cd liveblog-backend\n    $ mkdir public\n```\n\nIn the root directory, create a new file called `main.go` and in here is where all our Go code will reside.\n\nOpen the `main.go` file in your favorite editor and paste the following code into the file:\n\n``` go\n    package main\n    \n    import (\n        \"database/sql\"\n        \"net/http\"\n    \n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/middleware\"\n        _ \"github.com/mattn/go-sqlite3\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    func main() {\n        e := echo.New()\n    \n        e.Use(middleware.Logger())\n        e.Use(middleware.Recover())\n    \n        db := initialiseDatabase(\"./storage.db\")\n        migrateDatabase(db)\n    \n        e.File(\"/admin\", \"public/admin.html\")\n        e.GET(\"/posts\", getPosts(db))\n        e.POST(\"/posts\", savePost(db))\n    \n        e.Logger.Fatal(e.Start(\":9000\"))\n    }\n```\n\nAbove, we import the packages we will need for the Go application to function properly. We also defined a `main` function which will be the sole entry point of the application.\n\nIn the `main` function, we instantiated the [Echo framework](https://echo.labstack.com/) and we added some middlewares to the instance of `echo`.\n\nNext, we initialized the database and ran a migration on the database. This will create a `storage.db` file in the root directory. This is the file SQLite will use to operate. Finally, we defined some routes for our application and specified the port we want our application to start on, 9000.\nIn the `main` function, we referenced some functions we had not created so let's add these functions.\n\nIn the `main.go` file, add the following above the `main` function:\n\n``` go\n    func initialiseDatabase(filepath string) *sql.DB {\n        db, err := sql.Open(\"sqlite3\", filepath)\n    \n        if err != nil {\n            panic(err)\n        }\n    \n        if db == nil {\n            panic(\"db nil\")\n        }\n    \n        return db\n    }\n    \n    func migrateDatabase(db *sql.DB) {\n        sql := `\n            CREATE TABLE IF NOT EXISTS posts(\n                    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n                    content TEXT\n            );\n    `\n        _, err := db.Exec(sql)\n        if err != nil {\n            panic(err)\n        }\n    }\n    \n    func getPosts(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            rows, err := db.Query(\"SELECT * FROM posts ORDER BY id DESC\")\n            if err != nil {\n                panic(err)\n            }\n    \n            defer rows.Close()\n    \n            result := PostCollection{}\n    \n            for rows.Next() {\n                post := Post{}\n                err2 := rows.Scan(\u0026post.ID, \u0026post.Content)\n                if err2 != nil {\n                    panic(err2)\n                }\n    \n                result.Posts = append(result.Posts, post)\n            }\n    \n            return c.JSON(http.StatusOK, result)\n        }\n    }\n    \n    func savePost(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            postContent := c.FormValue(\"content\")\n            stmt, err := db.Prepare(\"INSERT INTO posts (content) VALUES(?)\")\n            if err != nil {\n                panic(err)\n            }\n    \n            defer stmt.Close()\n    \n            result, err := stmt.Exec(postContent)\n            if err != nil {\n                panic(err)\n            }\n    \n            insertedID, err := result.LastInsertId()\n            if err != nil {\n                panic(err)\n            }\n    \n            post := Post{\n                ID:      insertedID,\n                Content: postContent,\n            }\n    \n            client.Trigger(\"live-blog-stream\", \"new-post\", post)\n    \n            return c.JSON(http.StatusOK, post)\n        }\n    }\n```\n\nAbove, we have four functions. The first is the `initialiseDatabase` function. We use this to create the database file if it does not exist and then create a connection to the database once it exists. The `migrateDatabase` function does just what the name suggests. It executes migrations for the database if it was not previously run.\n\nThe `getPosts` function gets the list of posts from the database and returns it as a JSON response. The `savePost` function saves a new post to the database and triggers an update to Pusher on the `live-blog-stream` channel.\n\nThe `savePost` function is referencing a Pusher client instance that does not exist so let's create that. In the `main.go` file right after the `import` statements, add the following:\n\n``` go\n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the keys from your Pusher application dashboard.\n\nIn the above, we instantiate the Pusher Go client with the credentials from the dashboard. This will make it possible to trigger events using the Pusher instance.\n\nThe final thing we want to do is add the object structures for our `Post` and `PostCollection`. In the same `main.go` file, add the following code below the Pusher instance above:\n\n``` go\n    // Post type\n    type Post struct {\n        ID      int64  `json:\"id\"`\n        Content string `json:\"content\"`\n    }\n    \n    // PostCollection type\n    type PostCollection struct {\n        Posts []Post `json:\"items\"`\n    }\n```\n\nNow save and close the file.\n\nCreate a new `admin.html` file in the `public` directory and paste the following into it:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003ctitle\u003eAdmin Panel\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\"\u003e\n        \u003cstyle\u003e\n            .container {\n                max-width: 500px;\n            }\n            .logo-space {\n                text-align: center;\n                padding: 50px 0;\n                background-color: #bada55;\n                margin: 10px 0;\n            }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n            \u003cdiv class=\"container\"\u003e\n                \u003cdiv class=\"logo-space\"\u003e\n                    \u003ch1\u003eLive Blog\u003c/h1\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"alert alert-success\" role=\"alert\" v-show=\"successfulPost\"\u003e\n                    Post added successfully!\n                \u003c/div\u003e\n                \u003cform action=\"/posts\" method=\"POST\" id=\"post-stuff\" v-on:submit.prevent=\"submitForm\"\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003ctextarea class=\"form-control\" v-model=\"content\" placeholder=\"Enter Post\"\u003e\u003c/textarea\u003e\n                    \u003c/div\u003e\n                    \u003cinput type=\"submit\" class=\"form-control btn btn-primary\" name=\"submit\" value=\"Update Stream\"\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript\u003e\n            new Vue({\n                el: \"#app\",\n                data: {\n                    content: \"\",\n                    successfulPost: false\n                },\n                methods: {\n                    submitForm() {\n                        if (this.content.length \u003e 0 \u0026\u0026 this.content !== \"\") {\n                            let data = new FormData()\n                            data.append(\"content\", this.content)\n    \n                            axios.post(\"/posts\", data).then(res =\u003e {\n                                this.content = \"\"\n                                this.successfulPost = true\n                                setTimeout(() =\u003e this.successfulPost = false, 3000)\n                            })\n                        }\n                    }\n                }\n            })\n        \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe code above is for the admin page where we can add our new posts. This will then make a POST request to the API to add a new post to the database. When the post is added to the database, an event will be triggered by the Pusher Go client. This event will then be picked up by the Swift application and the iOS app will be updated in realtime.\n\nSave the file and execute the following command to run our Go application:\n\n```\n    $ go run main.go\n```\n\nThis will start a server on port 9000.\n\n## Testing our live blogging application\n\nThe next thing we need to do is test our application. Open your project in Xcode using the `.xcworkspace` file. Before building the application though, we need to do one last thing. Open the `info.plist` file and apply the following changes:\n\n![swift-liveblog-info-plist](//images.ctfassets.net/1es3ne0caaid/3soymv0P2Miks2EsGQEEOk/a8fad768891f219b1ae10f7710047207/swift-liveblog-info-plist.png)\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\n![swift-liveblog-demo](//images.ctfassets.net/1es3ne0caaid/DXndn8OaXYOsmIYImoc4g/57197aefae945c69127b5289f6566b3c/swift-liveblog-demo.gif)\n\n## Conclusion\n\nIn this article, we have seen how we can easily create a live blog using Swift, Go and Pusher Channels.\n\nPusher Channels makes it very easy to implement realtime features into almost any application in all languages. You should check out the [documentation](https://pusher.com/docs) here to get started.\nThe source code for this article is available on [GitHub](https://github.com/neoighodaro/liveblog-swift-go-pusher).","metaTitle":"Create a live blog app using Swift and Go","metaDescription":"Use Swift and Go to create an iOS app that allows admins to publish blog posts quickly. The homepage shows new posts in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5aeEXGAZZeeAQGmMc4mggo","type":"Entry","createdAt":"2018-06-05T12:52:45.191Z","updatedAt":"2020-06-19T14:25:43.622Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an iOS chat app using Swift and Chatkit - Part 3: Building the iOS app","url":"ios-chat-app-swift-chatkit-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/pusher/sample-chatroom-ios-chatkit","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2018-06-05","description":"Build a chat app for iOS, with a Laravel API backend. In part three, build the iOS application. By the end of this section you will have a working app with instant chat functionality.","prerequisite":"To follow this series you will need Xcode, Cocoapods, PHP and Laravel installed on your machine. Some knowledge of Xcode and Swift will be helpful.","content":"We previously created the API backend we need our iOS application to connect to. In this part, we will create the application itself using Xcode and Swift. We will be building out the application based on the prototypes we created in the first part of the series.\n\nHere are the prototypes we made using our prototyping tool:\n\n![Create-iOS-Chat-App-Using-Chatkit-prototype](//images.ctfassets.net/1es3ne0caaid/2OGOxROMGsikAgIMAksa66/810bd07140a87a274ee6f983235342c4/Create-iOS-Chat-App-Using-Chatkit-prototype.png)\n\n Let’s go through some requirements you need to have to follow this part of the article.\n\n## Creating our app’s storyboard in Xcode\n\nWe previously created the scenes of our application in Xcode using the Clean Swift templates. Now we are going to work on creating our storyboards and linking them to the view controllers we created.\n\n### Creating the launch scene\n\nFirst add a Navigation View Controller and a View Controller to the storyboard as seen below. The Navigation Controller will be the entry point to our application. Set the custom class for the second View Controller as the `LaunchViewController` we created in the first part of the article.\n\n![Create-iOS-Chat-App-Using-Chatkit-launch-scene-controller](//images.ctfassets.net/1es3ne0caaid/xgFRNtuy3YGiiSUMWsAYW/3e22912c68e4bcd6f09012d0c38d7ee0/Create-iOS-Chat-App-Using-Chatkit-launch-scene-controller.png)\n\nWe will use the `LaunchViewController` to determine which initial screen to present to the user when the app is launched. If the user is logged in we’ll present the contacts list, if not, we’ll present the Welcome scene so the user can log in or sign up.\n\n### Creating the welcome scene\nThe next scene we will create is the welcome scene. When a user is not logged in, they will be redirected to this scene. From here they can sign up or log in to their account. In the `Main.storyboard` add the View Controller and create a “Present Modally” manual segue from the launch controller to the controller you just created.\n\n![Create-iOS-Chat-App-Using-Chatkit-welcome-scene](//images.ctfassets.net/1es3ne0caaid/P1C4QxlOgKmQOwEkckUqs/31f6d0f2a15493825d2d33af23caaabe/Create-iOS-Chat-App-Using-Chatkit-welcome-scene.png)\n\nAfter creating the welcome view controller, you can start designing it to look like the prototype using a combination of `UILabel`s, `UIButton`s, and `UIView`s. Then set the name of the manual segue to **Welcome**. Finally, set the custom class for the view controller to `WelcomeViewController`\n\n### Creating the signup and login scene\n\nNext create two new View Controllers. The first will be for login and the second will be for sign up. Set theView Controller for the Signup controller to `SignupViewController` and the custom class for the login View Controller to `LoginViewController`.\n\nCreate a “Present Modally” segue from the **Sign In** button to the `LoginViewController` and from the **Don’t have an account? Sign up here** button to the `SignupViewController`. Name the segues **Login** and **Signup**.\n\n![Create-iOS-Chat-App-Using-Chatkit-signup-login-scene](//images.ctfassets.net/1es3ne0caaid/3Yp5Dp0gNaEG24i0aAWKcE/bddb6f073a6c86d080affba594de08be/Create-iOS-Chat-App-Using-Chatkit-signup-login-scene.png)\n\nIn the Signup view create three input fields and create an `@IBOutlet` for them in the `SignupViewController`, we named ours `emailTextField`, `nameTextField` and `passwordTextField`. Create an `@IBAction` called `cancelButtonWasPressed` for the cancel button and `signupButtonWasPressed`  for the sign up button.\n\nIn the login view, we will follow almost the same steps as the sign up controller, but, this time the  `@IBAction` will be named `loginButtonWasPressed` and there will be no `nameTextField`.\n\n### Creating the ListContacts and Chatroom scenes\n\nNext, create a Navigation controller and make sure the root controller for it is a `UITableViewController`. Create a manual segue named **ListMessages** from the `LaunchViewController` to the navigation controller and set the custom class of the `UITableViewController` to `ListContactsViewController`.\n\nCreate a “Present Modally” manual segue named **MainNavigator** between the navigation controller and the Login and Signup scenes. \n\nLastly, create a new `UIViewController` and create a segue named **Chatroom** from the Prototype Cells to the new View Controller, then set the custom class of the View Controller to `ChatroomViewController`.\n\nHere is a screenshot of our entire storyboard:\n\n![Create-iOS-Chat-App-Using-Chatkit-storyboard](//images.ctfassets.net/1es3ne0caaid/4bUz80F2Io4CSKSWA60mY0/131de2d7b16dd933cedd7b68eff1fd26/Create-iOS-Chat-App-Using-Chatkit-storyboard.png)\n\n## Adding functionality to our scenes\n\nNow that we have our scenes in place and hooked up to our View Controllers, let’s start adding the functionality to them. We will start at the very first piece of code that gets called when the application is launched: `AppDelegate`.\n\nIn the `AppDelegate` file, right below the `import` statement add the code block below:\n\n``` swift\n    struct AppConstants {\n        static let ENDPOINT: String = \"http://127.0.0.1:8000\"\n        static let CLIENT_ID: Int = API_CLIENT_ID\n        static let CLIENT_SECRET: String = \"API_CLIENT_SECRET\"\n        static let CHATKIT_INSTANCE_LOCATOR: String = \"CHATKIT_INSTANCE_LOCATOR\"\n    }\n```\n\nIn the `struct` above, we define some constants for our application. We will use this as some configuration value handler for our application. Replace the values for the `API_CLIENT_ID`, `API_CLIENT_SECRET` and `CHATKIT_INSTANCE_``LOCATOR` with the actual values.\n\n\n\u003e 💡  You can get the `API_CLIENT_*` key values from when you were setting up Passport in the previous part of the tutorial, and you can get the `CHATKIT_INSTANCE_``LOCATOR` from the Chatkit dashboard.\n\n### Launch scene\n\nOpen the `Scenes/Launch/LaunchSceneController` file and let us start adding some functionality to the class.\n\nIn the file, replace the code with [this](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Launch/LaunchViewController.swift)\n\nWe have simplified most of the code that comes with the Clean Swift template. In the `viewDidLoad` method, we check to see if the user is logged in using an `Authenticator` class, which we will create later. If the user is logged in then we route the user to the list messages page else we go to the welcome page.\n\nNext, open the `LaunchRouter` class and in the file paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Launch/LaunchRouter.swift)\n\nIn the router we have defined the `routeToWelcome` and `routeToListContacts` methods. Both methods do what is necessary to route the user to either the **Welcome** or **MainNavigator** segue.\n\nThis is all we need to do for the Launch scene. You can delete the other template files in the `Scenes/Launch` directory as we will not be using them.\n\n### Welcome scene\n\nFor our Welcome scene we do not need to do anything actually as the scene has no logic. In the `WelcomeViewController` you can just paste the code below:\n\n``` swift\n    import UIKit\n    \n    class WelcomeViewController: UIViewController {\n    }\n```\n\nYou can delete the other template files in the Welcome scene as we will not be needing them and they serve no purpose.\n\n### Login scene\n\nFor our Login scene we will start by adding the logic to our `LoginModels` class. The models will help us format the response from the API to what our application will be able to consume.\n\nIn the `LoginModels` file paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Login/LoginModels.swift). \n\nIn the code above we have defined a series of `struct`s and in them we have `Request` and `Response`. The `Request` standardises the parameters required for the request to the login endpoint while the `Response` takes the raw response from the API and saves them as either a  `ChatkitToken` or `UserToken` object. We will define the `ChatToken` and the `UserToken` object later in the article\n\nNext open the `LoginInteractor` and paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Login/LoginInteractor.swift) into the file.\n\nIn this class we have a `login` method that just calls a `login` method on the `UsersWorker` class. Depending on the response from that call, we either show a login error or we route to the contacts list.\n\nNext, open the `LoginRouter` class and in the file paste the following code:\n\n``` swift\n    import UIKit\n    \n    @objc protocol LoginRoutingLogic {\n        func routeToListContacts()\n    }\n    \n    class LoginRouter: NSObject, LoginRoutingLogic {\n        weak var viewController: LoginViewController?\n    \n        func routeToListContacts() {\n            let storyboard = UIStoryboard(name: \"Main\", bundle: nil)\n            let destinationVC = storyboard.instantiateViewController(withIdentifier: \"MainNavigator\") as! UINavigationController\n            \n            viewController!.show(destinationVC, sender: nil)\n        }\n    }\n```\n\nThe router above has just one method. This method routes the app to the list contacts page when called.\n\nThe last class we want to edit for this scene is the `LoginViewController`. This is the class that pieces the other classes above. Open the file and paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Login/LoginViewController.swift) into the file.\n\nIn the view controller we have the usual set up methods used by Clean Swift but we also have the `@IBAction`s and `@IBOutlet`s we created when we were creating our storyboards. \n\nIn the `cancelButtonPressed` method we just dismiss the login screen modal, in the `loginButtonPressed` method we call the `login` method on the interactor, and in the `showValidationError` method we show an alert with an error message.\n\n### Signup scene\n\nFor the Login scene functionality we will start with the models. Open the `SignupModels` file in the `Scene/Signup` directory and paste the code below into it:\n\n``` swift\n    import Foundation\n    \n    enum Signup {    \n        struct Request {\n            var name: String\n            var email: String\n            var password: String\n        }\n    \n        struct Response {\n            var user: User?\n            \n            init(data: [String:Any]) {\n                self.user = User(\n                    id: data[\"id\"] as! Int,\n                    name: data[\"name\"] as! String,\n                    email: data[\"email\"] as! String,\n                    chatkit_id: data[\"chatkit_id\"] as! String\n                )\n            }\n        }\n    }\n```\n\nIn the models we have Request and Response structs. Their functionality was described above.\n\nNext, paste the code below into the `SignupInteractor` class in the same directory:\n\n``` swift\n    import Foundation\n    \n    protocol SignupBusinessLogic {\n        func createAccount(request: Signup.Request)\n    }\n    \n    class SignupInteractor: SignupBusinessLogic {\n        var viewController: SignupFormErrorLogic?\n        var router: (NSObjectProtocol \u0026 SignupRoutingLogic)?\n        var worker = UsersWorker()\n    \n        func createAccount(request: Signup.Request) -\u003e Void {\n            self.worker.signup(request: request) { user, error in\n                guard error == nil else {\n                    self.viewController?.showValidationError(\"Error creating account!\")\n                    return\n                }\n                \n                self.router?.routeToListContacts()\n            }\n        }\n    }\n```\n\nIn the `createAccount` method, we call the `signup` method on the `UsersWorker` and then depending on the response we either route to the contacts list or show an error.\n\nNext, open the router class `SignupRouter` and paste the code below into it:\n\n``` swift\n    import UIKit\n    \n    @objc protocol SignupRoutingLogic {\n        func routeToListContacts()\n    }\n    \n    class SignupRouter: NSObject, SignupRoutingLogic {\n        weak var viewController: SignupViewController?\n        \n        func routeToListContacts() {\n            let storyboard = UIStoryboard(name: \"Main\", bundle: nil)\n            let destinationVC = storyboard.instantiateViewController(withIdentifier: \"MainNavigator\") as! UINavigationController\n            \n            viewController!.show(destinationVC, sender: nil)\n        }\n    }\n```\n\nAs in the login router, this method just routes the user to the contacts screen using the `MainNavigator` segue.\n\nFor the `SignupViewController`, use [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Signup/SignupViewController.swift).\n\nIn this view controller, we set up the Clean Swift components then in the `cancelButtonPressed` method we dismiss the signup modal and in the `signupButtonPressed` method we create the account using the interactor. The `showValidationError` shows an alert when it is called, usually when there is an error signing up.\n\n### ListContacts scene\n\nThe ListContacts scene is supposed to show a list of the contacts available to chat with. Open the `ListContactsModels` file and paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/ListContacts/ListContactsModels.swift) into the file.\n\nIn the code above we have the usual `Request` and `Response` (explained above). We also have a `ParseContact` struct that takes the raw data and an array of `rooms`. It parses it into a `Contact` model object with `User` and `PCRoom` object. We reference this in the `Response`s above so as to avoid duplication.\n\nWe also have a `ViewModel` struct that we use to format the data in a way the presenter needs to display the data to the user.\n\nNext open the `ListContactsInteractor` class and paste the code below into it: https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/ListContacts/ListContactsInteractor.swift\n\nIn the method above, we have `fetchContacts`, which uses the `UsersWorker` class to fetch the contacts from the API and also the `addContact` class, which also uses the same worker to add contacts.\n\nAfter a successful call, in both methods we call the presenter, which formats the data and makes a call to the View Controller and displays the content. \n\nLet’s update the code for the `ListContactsPresenter`. Open the file and paste the code below into the file:\n\n``` swift\n    import Foundation\n    \n    protocol ListContactsPresentationLogic {\n        func presentContacts(_ contacts: [Contact])\n        func presentAddedContact(_ contact: Contact)\n    }\n    \n    class ListContactsPresenter: ListContactsPresentationLogic {\n        weak var viewController: ListContactsDisplayLogic?\n        var displayedContacts: [ListContacts.Fetch.ViewModel.DisplayedContact] = []\n    \n        func presentContacts(_ contacts: [Contact]) {\n            displayedContacts = []        \n            for contact in contacts {\n                displayedContacts.append(ListContacts.Fetch.ViewModel.DisplayedContact(\n                    id: contact.user.chatkit_id,\n                    name: contact.user.name, \n                    isOnline: false\n                ))\n            }\n            displayContacts()\n        }\n        \n        func presentAddedContact(_ contact: Contact) {\n            displayedContacts.append(ListContacts.Fetch.ViewModel.DisplayedContact(\n                id: contact.user.chatkit_id,\n                name: contact.user.name, \n                isOnline: false\n            ))\n            displayContacts()\n        }\n        \n        private func displayContacts() {\n            let vm = ListContacts.Fetch.ViewModel(displayedContacts: displayedContacts)\n            viewController?.displayFetchedContacts(viewModel: vm)\n        }\n    }\n```\n\nThe code above has three methods. `presentContacts` and `presentAddedContact` do pretty much the same thing: format the contacts, append it to the `displayedContacts` array, and call the `displayContacts` method. The `displayContacts` method just calls `displayFetchedContacts` on the View Controller.\n\nLet us update the code for the `ListContactsViewController`. Paste the following into the controller:\n\n``` swift\n    import UIKit\n    import PusherChatkit\n    \n    protocol ListContactsDisplayLogic: class {\n        func displayFetchedContacts(viewModel: ListContacts.Fetch.ViewModel)\n    }\n    \n    class ListContactsViewController: UITableViewController, ListContactsDisplayLogic {\n        var interactor: ListContactsBusinessLogic?\n        var displayedContacts: [ListContacts.Fetch.ViewModel.DisplayedContact] = []\n        var router: (NSObjectProtocol \u0026 ListContactsRoutingLogic \u0026 ListContactsDataPassing)?\n      \n        override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {\n            super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)\n            setup()\n        }\n      \n        required init?(coder aDecoder: NSCoder) {\n            super.init(coder: aDecoder)\n            setup()\n        }\n      \n        private func setup() {\n            let viewController = self\n            let interactor = ListContactsInteractor()\n            let presenter = ListContactsPresenter()\n            let router = ListContactsRouter()        \n            viewController.interactor = interactor\n            viewController.router = router\n            interactor.presenter = presenter\n            presenter.viewController = viewController\n            router.viewController = viewController\n            router.dataStore = interactor\n        }\n          \n        override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n            if let scene = segue.identifier {\n                let selector = NSSelectorFromString(\"routeTo\\(scene)WithSegue:\")\n                if let router = router, router.responds(to: selector) {\n                    router.perform(selector, with: segue)\n                }\n            }\n        }\n    }\n```\n\nThis is the basic set up that comes with the Clean Swift templates. It just sets up the connections between all the **ListContacts** scene classes. Next, let’s add the methods below to the class. These are specific to our implementation:\n\n``` swift\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        navigationItem.title = \"Contacts\"\n        navigationController?.navigationBar.prefersLargeTitles = true\n        navigationItem.rightBarButtonItem = UIBarButtonItem(\n            title: \"Add\", \n            style: .plain, \n            target: self, \n            action: #selector(showAddContactPopup)\n        )\n                \n        initialiseChatkit()\n    }\n        \n    private func initialiseChatkit() {\n        let userId = CurrentUserIDDataStore().getID()\n    \n        let chatManager = ChatManager(\n            instanceLocator: AppConstants.CHATKIT_INSTANCE_LOCATOR,\n            tokenProvider: ChatkitTokenDataStore(),\n            userID: userId.id!\n        )\n        \n        chatManager.connect(delegate: self) { user, error in\n            guard error == nil else { return }\n            self.interactor?.currentUser = user\n            self.fetchContacts()\n        }\n    }\n    \n    var emailTextField: UITextField?\n    \n    @objc func showAddContactPopup(_ sender: Any) {\n        let alert = UIAlertController(\n            title: \"Add\",\n            message: \"Enter the users email address\",\n            preferredStyle: .alert\n        )\n    \n        alert.addTextField { emailTextField in\n            emailTextField.placeholder = \"Enter email address\"\n            self.emailTextField = emailTextField\n        }\n        \n        alert.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))\n        alert.addAction(UIAlertAction(title: \"Add Contact\", style: .default) { action in\n            let request = ListContacts.Create.Request(user_id: self.emailTextField!.text!)\n            self.interactor?.addContact(request: request)\n        })\n        \n        present(alert, animated: true, completion: nil)\n    }\n    \n    private func fetchContacts() {\n        interactor?.fetchContacts(request: ListContacts.Fetch.Request())\n    }\n    \n    func displayFetchedContacts(viewModel: ListContacts.Fetch.ViewModel) {\n        displayedContacts = viewModel.displayedContacts\n        tableView.reloadData()\n    }\n```\n\nIn the `viewDidLoad` method, we configure the navigation bar and add an “Add” button to it. We also set the title to “Contacts”. The `showAddContactPopup` method shows an alert controller with a text field for the contact you want to add. When you click add, the contact will be added. \n\nThe `initialiseChatkit` method connects to Chatkit and stores the `currentUser` in the interactor while the `fetchContacts` method gets all the contacts from the API while the `displayFetchedContacts` method simply displays them.\n\nNext we will add the class extension of `ListContactsViewController` that implements the `UITableViewDelegate` protocol. At the bottom of the `ListContactsViewController` paste the following:\n\n``` swift\n    extension ListContactsViewController {    \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n        \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return displayedContacts.count\n        }\n        \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            var cell = tableView.dequeueReusableCell(withIdentifier: \"ContactTableViewCell\")        \n            if cell == nil {\n                cell = UITableViewCell(style: .subtitle, reuseIdentifier: \"ContactTableViewCell\")\n            }\n    \n            let contact = displayedContacts[indexPath.row]\n            cell?.textLabel?.text = contact.name\n            cell?.detailTextLabel?.text = contact.isOnline ? \"online\" : \"Seen recently\"\n    \n            return cell!\n        }\n    }\n```\n\nThe method should be familiar to you as it just helps us feed data to the `UITableView` so our contacts display properly on the table.\n\nThe last bit of code for the ListContacts scene is the `ListContactsRouter`. This will manage the routing to the Chatroom scene. Open the `ListContactsRouter` class and add the following code:\n\n``` swift\n    import UIKit\n    \n    @objc protocol ListContactsRoutingLogic {\n        func routeToChatroom(segue: UIStoryboardSegue)\n    }\n    \n    protocol ListContactsDataPassing {\n        var dataStore: ListContactsDataStore? { get }\n    }\n    \n    class ListContactsRouter: NSObject, ListContactsRoutingLogic, ListContactsDataPassing {\n        var dataStore: ListContactsDataStore?\n        weak var viewController: ListContactsViewController?\n    \n        func routeToChatroom(segue: UIStoryboardSegue) {\n            let destinationVC = segue.destination as! ChatroomViewController\n            var destinationDS = destinationVC.router!.dataStore!\n            passDataToChatroom(source: dataStore!, destination: \u0026destinationDS)\n        }\n        \n        func passDataToChatroom(source: ListContactsDataStore, destination: inout ChatroomDataStore) {\n            let selectedRow = viewController?.tableView.indexPathForSelectedRow?.row\n            destination.contact = source.contacts?[selectedRow!]\n            destination.currentUser = source.currentUser\n        }\n    } \n```\n\nIn the `routeToChatroom` method we call `passDataToChatroom` which passes data (the `Contact` object and the current user) to the `ListContactsViewController` for usage.\n\n### Chatroom scene\nIn the Chatroom scene we will start with the `ChatroomModels`. Open the file and paste the following code:\n\n``` swift\n    import Foundation\n    import MessageKit\n    import PusherChatkit\n    \n    enum Chatroom {\n        struct Messages {        \n            struct Fetch {\n                struct Request {\n                    var room: PCRoom\n                }\n                \n                struct Response {\n                    var messages: [Message] = []                \n                    init(messages: [PCMessage]) {\n                        for message in messages {\n                            let res = Chatroom.Messages.Create.Response(message: message)\n                            self.messages.append(res.message)\n                        }\n                    }\n                }\n            }\n            \n            struct Create {\n                struct Request {\n                    var text: String\n                    var sender: Sender\n                    var room: PCRoom\n                }\n                \n                struct Response {\n                    var message: Message                \n                    init(message: PCMessage) {\n                        self.message = Message(\n                            text: message.text,\n                            sender: Sender(id: message.sender.id, displayName: message.sender.displayName),\n                            messageId: String(describing: message.id),\n                            date: ISO8601DateFormatter().date(from: message.createdAt)!\n                        )\n                    }\n                }\n            }\n        }\n    }\n```\n\nLike the other methods, we have the usual `Request` and `Response` struct (explained above).\n\nIn the `ChatroomInteractor.swift` file paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Chatroom/ChatroomInteractor.swift).\n\n\n\nIn the `subscribeToRoom` method, we subscribe the `currentUser` to a room. We also set the `PCRoomDelegate` to the interactor which means we can implement methods that handle events on the interactor.\n\nIn the `addChatMessage` method we add a new message to the room as the `currentUser`. When the user is added we pass the `messageId` to the completion handler.\n\nIn the extension class, we implement the `newMessage` method of the `PCRoomDelegate`. The method is fired automatically anytime there is a new message in the room. So we handle the new message by presenting it to the controller using the `ChatroomPresenter`s `presentMessages` method.\n\nNext, open the `ChatPresenter.swift` file and paste the code below into it:\n\n``` swift\n    import Foundation\n    \n    protocol ChatroomPresentationLogic {\n        func presentMessages(response: Chatroom.Messages.Fetch.Response)\n    }\n    \n    class ChatroomPresenter: ChatroomPresentationLogic {\n        weak var viewController: ChatroomDisplayLogic?\n        \n        func presentMessages(response: Chatroom.Messages.Fetch.Response) {\n            viewController?.displayChatMessages(response: response)\n        }\n    }\n```\n\nThe only method there is the `presentMessages` method. It just calls the `displayChatMessages` method on the view controller.\n\nNext, in the `ChatroomRouter` just paste in the following code:\n\n``` swift\n    import Foundation\n    \n    protocol ChatroomDataPassing {\n        var dataStore: ChatroomDataStore? { get }\n    }\n    \n    class ChatroomRouter: NSObject, ChatroomDataPassing {\n        weak var viewController: ChatroomViewController?\n        var dataStore: ChatroomDataStore?\n    }\n```\n\nThen in the `ChatroomViewController` we are going to split the controller into extensions as the code is lengthy. First paste the Clean Swift set up code into the file:\n\n``` swift\n    import UIKit\n    import MessageKit\n    import PusherChatkit\n    import MessageInputBar\n    \n    protocol ChatroomDisplayLogic: class {\n        func displayChatMessages(response: Chatroom.Messages.Fetch.Response)\n    }\n    \n    class ChatroomViewController: MessagesViewController, ChatroomDisplayLogic {\n        var messages: [Message] = []\n        var interactor: ChatroomBusinessLogic?\n        var router: (NSObjectProtocol \u0026 ChatroomDataPassing)?\n      \n        override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {\n            super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)\n            setup()\n        }\n      \n        required init?(coder aDecoder: NSCoder) {\n            super.init(coder: aDecoder)\n            setup()\n        }\n      \n        private func setup() {\n            let viewController = self\n            let interactor = ChatroomInteractor()\n            let presenter = ChatroomPresenter()\n            let router = ChatroomRouter()\n      \n            viewController.interactor = interactor\n            viewController.router = router\n            interactor.presenter = presenter\n            presenter.viewController = viewController\n            router.viewController = viewController\n            router.dataStore = interactor\n        }\n    }\n```\n\nNext, we will paste the class extension that handles the loading of the chat messages, and configures [MessageKit](https://messagekit.github.io/) and [Chatkit](https://pusher.com/chatkit) as the view is loaded:\n\n``` swift\n    extension ChatroomViewController {\n        override func viewDidLoad() {\n            super.viewDidLoad()\n            self.initialiseChatkit()\n            self.configureMessageKit()\n            self.navigationItem.title = router?.dataStore?.contact?.user.name\n        }\n        \n        private func initialiseChatkit() {\n            guard let room = router?.dataStore?.contact?.room else { return }\n            guard let currentUser = router?.dataStore?.currentUser else { return }\n            self.interactor?.currentUser = currentUser\n            self.interactor?.subscribeToRoom(room: room)\n        }\n        \n        private func configureMessageKit() {\n            messageInputBar.delegate = self\n            messagesCollectionView.messagesDataSource = self\n            messagesCollectionView.messagesLayoutDelegate = self\n            messagesCollectionView.messagesDisplayDelegate = self\n            scrollsToBottomOnKeyboardBeginsEditing = true\n            maintainPositionOnKeyboardFrameChanged = true\n        }\n        \n        func displayChatMessages(response: Chatroom.Messages.Fetch.Response) {\n            self.messages = response.messages\n            self.messagesCollectionView.reloadData()\n            self.messagesCollectionView.scrollToBottom()\n        }\n    }\n```\n\nIn the extension above we have the `initialiseChatkit` method. It takes the current user passed on from the ListContacts scene and saves it to the interactor. Then the next method is the `configureMessageKit` where we configure MessageKit. Lastly, we have the `displayChatMessages` method that displays the messages.\n\nNext, paste the extension below the previous class:\n\n``` swift\n    extension ChatroomViewController: MessagesDataSource {    \n        func isFromCurrentSender(message: MessageType) -\u003e Bool {\n            return message.sender == currentSender()\n        }\n    \n        func currentSender() -\u003e Sender {\n            return Sender(id: (interactor?.currentUser?.id)!, displayName: (interactor?.currentUser?.name)!)\n        }\n    \n        func numberOfSections(in messagesCollectionView: MessagesCollectionView) -\u003e Int {\n            return self.messages.count\n        }\n        \n        func messageForItem(at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e MessageType {\n            return self.messages[indexPath.section]\n        }\n    \n        func configureAvatarView(_ avatarView: AvatarView, for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) {\n            avatarView.initials = self.initials(fromName: message.sender.displayName)\n        }\n    \n        func messageTopLabelAttributedText(for message: MessageType, at indexPath: IndexPath) -\u003e NSAttributedString? {\n    \n            return NSAttributedString(\n                string: message.sender.displayName,\n                attributes: [NSAttributedString.Key.font: UIFont.preferredFont(forTextStyle: .caption1)]\n            )\n        }\n    \n        func messageBottomLabelAttributedText(for message: MessageType, at indexPath: IndexPath) -\u003e NSAttributedString? {\n    \n            struct ConversationDateFormatter {\n                static let formatter: DateFormatter = {\n                    let formatter = DateFormatter()\n                    formatter.dateStyle = .medium\n                    return formatter\n                }()\n            }\n    \n            return NSAttributedString(\n                string: ConversationDateFormatter.formatter.string(from: message.sentDate),\n                attributes: [NSAttributedStringKey.font: UIFont.preferredFont(forTextStyle: .caption2)]\n            )\n        }\n    }\n    \n    extension ChatroomViewController: MessagesLayoutDelegate {\n        func messageBottomLabelHeight(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e CGFloat {\n            return 16\n        }\n    \n        func messageTopLabelHeight(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e CGFloat {\n            return 16\n        }\n    \n        func avatarPosition(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e AvatarPosition {\n            return AvatarPosition(horizontal: .natural, vertical: .messageBottom)\n        }\n    \n        func messagePadding(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e UIEdgeInsets {\n            return isFromCurrentSender(message: message)\n                ? UIEdgeInsets(top: 0, left: 30, bottom: 0, right: 4)\n                : UIEdgeInsets(top: 0, left: 4, bottom: 0, right: 30)\n        }\n    \n        func footerViewSize(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e CGSize {\n            return CGSize(width: messagesCollectionView.bounds.width, height: 10)\n        }\n    \n        func heightForLocation(message: MessageType, at indexPath: IndexPath, with maxWidth: CGFloat, in messagesCollectionView: MessagesCollectionView) -\u003e CGFloat {\n            return 200\n        }\n    }\n    \n    extension ChatroomViewController: MessagesDisplayDelegate {\n    }\n    \n    extension ChatroomViewController: MessageInputBarDelegate {\n        func messageInputBar(_ inputBar: MessageInputBar, didPressSendButtonWith text: String) {\n            guard interactor?.currentUser != nil else { return }\n            guard let room = router?.dataStore?.contact?.room else { return }\n     \n            let request = Chatroom.Messages.Create.Request(text: text, sender: currentSender(), room: room)\n    \n            self.interactor?.addChatMessage(request: request) { id, error in\n                guard error == nil else { return }\n                inputBar.inputTextView.text = String()\n            }\n        }\n    }\n```\n\nThe first extension above extends the `[MessagesDataSource](https://messagekit.github.io/Protocols/MessagesDataSource.html)` protocol and has to conform to some of its methods. Here we implement `currentSender`, `numberOfMessages` and `messageForItem`, all self explanatory.\n\nThe next extension on the list is for the `[MessagesLayoutDelegate](https://messagekit.github.io/Protocols/MessagesLayoutDelegate.html)` protocol and it implements some of the methods but there are other methods you can implement to change the layouts display. There is also the implementation of `[MessagesDisplayDelegate](https://messagekit.github.io/Protocols/MessagesDisplayDelegate.html)`, which is empty but you can look through the documentation to see methods you can implement.\n\nLastly, we implement  `[MessageInputBarDelegate](https://messagekit.github.io/Protocols/MessageInputBarDelegate.html)` and in there we have the `messageInputBar` method, which is called after the send button is clicked on the chat screen. In this method we send the message using the interactor and then empty the input.\n\nWith this we are done with our scenes. Next, we will add the code for our supporting classes used in the scenes.\n\n\n## Implementing supporting classes for our application\n\nThe first set of supporting classes we will implement are the models. The models we want to implement are `User`, `Message`, `Contact`, `Room`, `UserToken`, and `ChatToken`. Here are the class contents:\n\n### Implementing the models\n\nTo implement the models, create a new folder/group in the root directory called **Models** and start creating the model files below in them. Get the code from the GitHub links.\n\n[The code for the `Message.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/Message.swift)\n\n[The code for the `Contact.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/Contact.swift) \n\n[The code for the `User.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/User.swift)\n\n[The code for `UserToken` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/UserToken.swift)\n\nIn the `UserToken` class above we implement the `NSCoding` protocol, we need this so we can save the `UserToken` object to UserDefaults.\n\n[The code to the `ChatToken.swift` model]( https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/ChatkitToken.swift)\n\nLike the `UserToken` model, the `ChatToken` does the same thing with the `NSCoding` protocol.\n\nWhen we have received a `chatkit_id` back from the server we want to store that in `UserDefaults` so that we can use it to connect to Chatkit.\n\n[The code to the `CurrentUserID.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/CurrentUserID.swift)\n\n### Implementing the services\nCreate a new folder/group in the root directory for the project on Xcode and name it **Services** and in there add the following files:\n\n`Authenticator.swift` class:\n\n``` swift\n    import Foundation\n    \n    class Authenticator {\n        func isLoggedIn() -\u003e Bool {\n            return getAccessToken().count \u003e 0\n        }\n    \n        private func getAccessToken() -\u003e String {\n            guard let token = ChatkitTokenDataStore().getToken().access_token, token.count \u003e 0 else {\n                return \"\"\n            }\n    \n            return token\n        }\n    } \n```\n\nThis `Authenticator` class checks if the user is logged in. It does this by checking if the token from the API is saved in UserDefaults.\n\n`UserTokenDataStore.swift` class:\n\n``` swift\n    import Foundation\n    \n    class UserTokenDataStore {\n        static var DATA_KEY = \"WORDS_API_TOKEN\"\n        \n        func getToken() -\u003e UserToken {\n            if let token = UserDefaults.standard.object(forKey: type(of: self).DATA_KEY) as! Data? {\n                return NSKeyedUnarchiver.unarchiveObject(with: token) as! UserToken\n            }\n    \n            return UserToken(token_type: nil, access_token: nil, expires_in: nil)\n        }\n        \n        func setToken(_ token: UserToken) {\n            let encodedData = NSKeyedArchiver.archivedData(withRootObject: token)\n            UserDefaults.standard.set(encodedData, forKey: type(of: self).DATA_KEY)\n        }\n    }\n```\n\nThe `UserDataTokenStore` class saves and fetches the token required to make calls to our backend API.\n\nAdd the `ChatTokenDataStore.swift` class with [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Services/ChatkitTokenDataStore.swift)\n\nThe class above does the same as the `UserTokenDataStore`, however it checks for the token required to make calls to the Chatkit API. It also extends the `[PCTokenProvider](https://github.com/pusher/chatkit-swift/blob/master/Source/PCTokenProvider.swift)` and thus we have the `fetchToken` method that fetches the token from the UserDefaults.\n\nAdd the `CurrentUserIDDataStore.swift` class with [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Services/CurrentUserIDDataStore.swift)\n\nThe class above does the same as the two token data stores. It takes some information, in this case the user’s Chatkit ID, and fetches and stores it in `UserDefaults`.\n\n### Implementing the global worker\nThe last class we want to implement is the `UsersWorker`. Create a `UsersWorker` class and paste the following into the file:\n\n``` swift\n    import UIKit\n    import Alamofire\n    \n    class UsersWorker {\n    }\n    \n    // MARK: Errors\n    \n    enum ContactsError: Error {\n        case CannotAdd\n        case CannotFetch\n    }\n    \n    enum UsersStoreError: Error {\n        case CannotLogin\n        case CannotSignup\n        case CannotFetchChatkitToken\n    }\n```\n\nNow we will start adding methods to the `UsersWorker` class. The first method is the `fetchContacts` method, which calls the API, using [Alamofire](https://github.com/Alamofire/Alamofire), to get a list of contacts for display:\n\n``` swift\n    func fetchContacts(currentUser: PCCurrentUser, completionHandler: @escaping ([Contact]?, ContactsError?) -\u003e Void){\n        let enc = JSONEncoding.default\n        let url = AppConstants.ENDPOINT + \"/api/contacts\"\n        let headers = authorizationHeader(token: nil)\n        \n        Alamofire\n            .request(url, method: .get, parameters: nil, encoding: enc, headers: headers)\n            .validate()\n            .responseJSON { response in\n                switch (response.result) {\n                case .success(let data):                \n                    DispatchQueue.main.async {\n                        let data = data as! [[String:Any]?]\n                        let res = ListContacts.Fetch.Response(for: currentUser, data:data)\n                        completionHandler(res.contacts, nil)\n                    }\n                case .failure(_):\n                    completionHandler(nil, ContactsError.CannotFetch)\n            }\n        }\n    }\n```\n\nThe next method to add to the class is the `addContact` method. The method makes the call to the API to add a contact:\n\n``` swift\n    func addContact(currentUser: PCCurrentUser, request: ListContacts.Create.Request, completionHandler: @escaping (Contact?, ContactsError?) -\u003e Void) {\n        let params = [\"user_id\": request.user_id]\n        let headers = authorizationHeader(token: nil)\n        \n        postRequest(\"/api/contacts\", params: params, headers: headers) { data in\n            guard data != nil else {\n                return completionHandler(nil, ContactsError.CannotAdd)\n            }\n            \n            DispatchQueue.main.async {\n                let response = ListContacts.Create.Response(for: currentUser, data: data!)\n                completionHandler(response.contact, nil)\n            }\n        }\n    }\n```\n\nThe next method to add to the class is the `login` method. The method makes a call to the API to login. The API returns the token for the API as the response. We make an additional call to the API to get the Chatkit token for the user so we can make calls to the Chatkit API on behalf of the user:\n\n``` swift\n    func login(request: Login.Account.Request, completionHandler: @escaping (UserToken?, UsersStoreError?) -\u003e Void) {\n        let params: Parameters = [\n            \"grant_type\": \"password\",\n            \"username\": request.email,\n            \"password\": request.password,\n            \"client_id\": AppConstants.CLIENT_ID,\n            \"client_secret\": AppConstants.CLIENT_SECRET,\n        ]\n        \n        postRequest(\"/oauth/token\", params: params, headers: nil) { data in\n            guard data != nil else {\n                return completionHandler(nil, UsersStoreError.CannotLogin)\n            }\n            \n            let response = Login.Account.Response(data: data!)\n            \n            let request = Login.Chatkit.Request(\n                username: request.email, \n                password: request.password, \n                token: response.userToken\n            )\n            \n            self.fetchChatkitToken(request: request) { token, error in\n                guard error == nil else {\n                    return completionHandler(nil, UsersStoreError.CannotFetchChatkitToken)\n                }\n                \n                ChatkitTokenDataStore().setToken(token!)\n                UserTokenDataStore().setToken(response.userToken)\n                \n                DispatchQueue.main.async {\n                    completionHandler(response.userToken, nil)\n                }\n            }\n        }\n    }\n```\n\nNext we will add the `signup` method, this will call the API to create a user and then it will log the user in and fetch the Chatkit token for that user:\n\n``` swift\n    func signup(request: Signup.Request, completionHandler: @escaping (User?, UsersStoreError?) -\u003e Void) {\n        let params: Parameters = [\n            \"name\": request.name,\n            \"email\": request.email,\n            \"password\": request.password\n        ]\n        \n        postRequest(\"/api/users/signup\", params: params, headers: nil) { data in\n            guard data != nil else {\n                return completionHandler(nil, UsersStoreError.CannotSignup)\n            }\n            \n            let response = Signup.Response(data: data!)\n            CurrentUserIDDataStore().setID(CurrentUserID(id: response.user?.chatkit_id))\n            \n            let request = Login.Account.Request(\n                email: request.email, \n                password: request.password\n            )\n            \n            self.login(request: request) { token, error in\n                guard error == nil else {\n                    return completionHandler(nil, UsersStoreError.CannotLogin)\n                }\n                \n                DispatchQueue.main.async {\n                    completionHandler(response.user, nil)\n                }\n            }\n        }\n    }\n```\n\nThe next method to add is the `fetchChatkitToken`. It fetches the Chatkit token from the API:\n\n``` swift\n    func fetchChatkitToken(request: Login.Chatkit.Request, completionHandler: @escaping (ChatkitToken?, UsersStoreError?) -\u003e Void) {\n        let headers = authorizationHeader(token: request.token.access_token!)\n        \n        postRequest(\"/api/chatkit/token\", params: nil, headers: headers) { data in\n            guard data != nil else {\n                return completionHandler(nil, UsersStoreError.CannotFetchChatkitToken)\n            }\n            \n            DispatchQueue.main.async {\n                let response = Login.Chatkit.Response(data: data!)\n                completionHandler(response.token, nil)\n            }\n        }\n    }\n```\n\nThe last two methods to add will be helpers, the `postRequest` and `authorizationHeader` methods:\n\n``` swift\n    private func postRequest(_ url: String, params: Parameters?, headers: HTTPHeaders?, completion: @escaping([String:Any]?) -\u003e Void) {\n        let enc = JSONEncoding.default\n        let url = AppConstants.ENDPOINT + url\n        \n        Alamofire\n            .request(url, method: .post, parameters:params, encoding:enc, headers:headers)\n            .validate()\n            .responseJSON { response in\n                switch (response.result) {\n                case .success(let data): completion((data as! [String:Any]))\n                case .failure(_): completion(nil)\n            }\n        }\n    }\n    \n    private func authorizationHeader(token: String?) -\u003e HTTPHeaders {\n        let accessToken = (token == nil) \n            ? UserTokenDataStore().getToken().access_token \n            : token\n        \n        return [\"Authorization\": \"Bearer \\(accessToken!)\"]\n    }\n```\n\nThe first method is a wrapper around Alamofire and the second method generates a HTTPHeaders array where we specify the token to send along with requests to the API.\n\nNow you can run the application in the emulator and it should work.\n\nIf you are running the API server locally XCode might not allow you to make requests to the local server. You can get around this by adding `App Transport Security Settings` to your `Info.plist` file and set `Allow Artibrary Loads` to `YES`.\n\n![Create-iOS-Chat-App-Using-Chatkit-allow-arbitrary-loads](//images.ctfassets.net/1es3ne0caaid/4ZHA4yRh4ss2SEY4GeMKSm/0d2667e4f46fb35c26aff64b96aab1a8/Create-iOS-Chat-App-Using-Chatkit-allow-arbitrary-loads.png)\n\n## Conclusion\n\nIn this part we were able to create the iOS application. \n\nThe source code to the application built in this series is available on [GitHub](https://github.com/neoighodaro/sample-chatroom-ios-chatkit).","metaTitle":"Build an iOS chat app using Swift and Chatkit - Part 3","metaDescription":"This tutorial series provides a detailed walkthrough of how to create a chat app for iOS, with a Laravel API backend. In this article you will create the iOS app. By the end of this section you will have a working chat app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1OWZbq6ZlKgSE8CQo2m0OY","type":"Entry","createdAt":"2018-05-31T15:35:53.937Z","updatedAt":"2018-06-21T15:18:59.023Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Send push notifications in a social network iOS app - Part 2: Build the app","url":"social-notifications-ios-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro-articles/pusher-beams-ios-social-network","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}}],"reviewDate":"2018-05-25","description":"Learn to build a social network app for iOS, featuring push notifications. In part two, create the app and set up push notifications.","prerequisite":"To follow this tutorial you will need a Mac with Xcode installed, knowledge of Xcode and Swift, basic knowledge of PHP (including the Laravel framework), a Pusher account, and CocoaPods installed on your machine.","content":"In the [previous part,](https://pusher.com/tutorials/social-notifications-ios-part-1) we were able to set up our Pusher Beams application and also create our API backend with Laravel. We also added push notification support to the backend using the [pusher-beams](https://github.com/neoighodaro/pusher-beams) package.\n\nIn this part, we will continue where we left off. We will be creating the iOS application using Swift and then integrate push notifications to the application so we can receive notifications when they are sent.\n\n![ios-push-notifications-social-network-demo](//images.ctfassets.net/1es3ne0caaid/51GgQzYiqQEMAQWOK8AMgS/fd0d5bb1bbaa7f1f198fed340d25cd53/ios-push-notifications-social-network-demo.gif)\n\n## Prerequisites\n\nIn order to follow along in this tutorial you need to have the following:\n\n- Have completed [part one](https://pusher.com/tutorials/social-notifications-ios-part-1) of the article.\n\n\n## Building our iOS application using Swift\n\n### Creating our controllers\nIn Xcode, create a new class `LaunchViewController` and paste the contents of the file below into it:\n\n``` swift\n    import UIKit\n    \n    class LaunchViewController: UIViewController {\n        @IBOutlet weak var loginButton: UIButton!\n        @IBOutlet weak var signupButton: UIButton!\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            loginButton.isHidden = true\n            signupButton.isHidden = true\n    \n            loginButton.addTarget(self, action: #selector(loginButtonWasPressed), for: .touchUpInside)\n            signupButton.addTarget(self, action: #selector(signupButtonWasPressed), for: .touchUpInside)\n        }\n    \n        override func viewDidAppear(_ animated: Bool) {\n            super.viewDidAppear(animated)\n            \n            guard AuthService.shared.loggedIn() == false else {\n                SettingsService.shared.loadFromApi()\n                return performSegue(withIdentifier: \"Main\", sender: self)\n            }\n            \n            loginButton.isHidden = false\n            signupButton.isHidden = false\n        }\n            \n        private func loginButtonWasPressed() {\n            performSegue(withIdentifier: \"Login\", sender: self)\n        }\n        \n        private func signupButtonWasPressed() {\n            performSegue(withIdentifier: \"Signup\", sender: self)\n        }   \n    }\n```\n\nSet the controller as the custom class for the related storyboard scene.\n\nAbove we have two `@IBOutlet` buttons for login and signup. In the `viewDidLoad` method we hide the buttons and create a target callback for them when they are pressed. In the `viewDidAppear` method we check if the user is logged in and present the timeline if so. If the user is not logged in we unhide the authentication buttons.\n\nWe also have the `loginButtonWasPressed` and `signupButtonWasPressed` methods. These methods present the login and signup controllers.\n\nNext, create a `SignupViewController` class and paste the following code into the file:\n\n``` swift\n    import UIKit\n    import NotificationBannerSwift\n    \n    class SignupViewController: UIViewController {\n        @IBOutlet weak var nameTextField: UITextField!\n        @IBOutlet weak var emailTextField: UITextField!\n        @IBOutlet weak var passwordTextfield: UITextField!\n        @IBOutlet weak var signupButton: UIBarButtonItem!\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            activateSignupButtonIfNecessary()\n            \n            nameTextField.addTarget(self, action: #selector(textFieldChanged(_:)), for: .editingChanged)\n            emailTextField.addTarget(self, action: #selector(textFieldChanged(_:)), for: .editingChanged)\n            passwordTextfield.addTarget(self, action: #selector(textFieldChanged(_:)), for: .editingChanged)\n        }\n        \n        @IBAction func closeButtonWasPressed(_ sender: Any? = nil) {\n            dismiss(animated: true, completion: nil)\n        }\n        \n        @IBAction func signupButtonWasPressed(_ sender: Any) {\n            guard let credentials = textFields(), signupButton.isEnabled else {\n                return\n            }\n            \n            ApiService.shared.signup(credentials: credentials) { token, error in\n                guard let token = token, error == nil else {\n                    return StatusBarNotificationBanner(title: \"Signup failed. Try again.\", style: .danger).show()\n                }\n                \n                AuthService.shared.saveToken(token).then {\n                    self.closeButtonWasPressed()\n                }\n            }\n        }\n        \n        func textFields() -\u003e AuthService.SignupCredentials? {\n            if let name = nameTextField.text, let email = emailTextField.text, let pass = passwordTextfield.text {\n                return (name, email, pass)\n            }\n            \n            return nil\n        }\n    \n        func activateSignupButtonIfNecessary() {\n            if let field = textFields() {\n                signupButton.isEnabled = !field.name.isEmpty \u0026\u0026 !field.email.isEmpty \u0026\u0026 !field.password.isEmpty\n            }\n        }\n        \n        @objc func textFieldChanged(_ sender: UITextField) {\n            activateSignupButtonIfNecessary()\n        }\n    }\n```\n\nSet the controller as the custom class for the signup storyboard scene.\n\nAbove we have three `@IBOutlet`'s for our signup text fields and one `@IBOutlet` for our signup button. In the `viewDidLoad` method we add a callback for our text fields to be triggered when the text is changed. We also call the `activateSignupButtonIfNecessary` method, which activates the signup button if all the field’s contents are valid.\n\nWe have two `@IBAction` functions. The first for when the close button is pressed and the other for when the signup button is pressed. When the **Sign up** button is pressed, the `signupButtonWasPressed` method is called, which uses the `ApiService` to create an account for the user and log the user in. If the signup fails we use the [NotificationBanner](https://github.com/Daltron/NotificationBanner) package to display an error.\n\nWe also have other helper methods. The `textFields` method returns a tuple of the text fields contents and the `textFieldChanged` method is fired every time a text field’s content is modified.\n\nNext, create a `LoginViewController` class and paste the following code into the file:\n\n``` swift\n    import UIKit\n    import NotificationBannerSwift\n    \n    class LoginViewController: UIViewController {\n        @IBOutlet weak var emailTextField: UITextField!\n        @IBOutlet weak var passwordTextField: UITextField!\n        @IBOutlet weak var loginButton: UIBarButtonItem!\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            activateLoginButtonIfNecessary()\n            \n            emailTextField.addTarget(self, action: #selector(textFieldChanged(_:)), for: .editingChanged)\n            passwordTextField.addTarget(self, action: #selector(textFieldChanged(_:)), for: .editingChanged)\n        }\n    \n        @IBAction func closeButtonWasPressed(_ sender: Any? = nil) {\n            dismiss(animated: true, completion: nil)\n        }\n        \n        @IBAction func loginButtonWasPressed(_ sender: Any) {\n            guard let credentials = textFields(), loginButton.isEnabled else {\n                return\n            }\n            \n            ApiService.shared.login(credentials: credentials) { token, error in\n                guard let token = token, error == nil else {\n                    return StatusBarNotificationBanner(title: \"Login failed, try again.\", style: .danger).show()\n                }\n                \n                AuthService.shared.saveToken(token).then {\n                    self.closeButtonWasPressed()\n                }\n            }\n        }\n        \n        func textFields() -\u003e AuthService.LoginCredentials? {\n            if let email = emailTextField.text, let password = passwordTextField.text {\n                return (email, password)\n            }\n            \n            return nil\n        }\n        \n        func activateLoginButtonIfNecessary() {\n            if let field = textFields() {\n                loginButton.isEnabled = !field.email.isEmpty \u0026\u0026 !field.password.isEmpty\n            }\n        }\n    \n        @objc func textFieldChanged(_ sender: UITextField) {\n            activateLoginButtonIfNecessary()\n        }\n    }\n```\n\nSet the controller as the custom class for the login storyboard scene.\n\nThe controller above functions very similarly to the `SignupViewController`. When the `loginButtonWasPressed` method is called it uses the `ApiService` to log the user in and save the token.\n\nNext, we need to create the settings controller. This will be where the settings can be managed. Create a `SettingsTableViewController` and paste the following code into the file:\n\n``` swift\n    import UIKit\n    \n    class SettingsTableViewController: UITableViewController {\n        let settings = {\n            return SettingsService.shared.settings\n        }()\n        \n        private func shouldCheckCell(at index: IndexPath, with setting: String) -\u003e Bool {\n            let status = Setting.Notification.Comments(rawValue: setting)\n    \n            return (status == .off \u0026\u0026 index.row == 0) ||\n                   (status == .following \u0026\u0026 index.row == 1) ||\n                   (status == .everyone \u0026\u0026 index.row == 2)\n        }\n        \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = super.tableView(tableView, cellForRowAt: indexPath)\n            cell.accessoryType = .none\n            \n            if let setting = settings[\"notification_comments\"], shouldCheckCell(at: indexPath, with: setting) {\n                cell.accessoryType = .checkmark\n            }\n            \n            return cell\n        }\n    \n        override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n            let rowsCount = self.tableView.numberOfRows(inSection: indexPath.section)\n            \n            for i in 0..\u003crowsCount  {\n                let  rowIndexPath = IndexPath(row: i, section: indexPath.section)\n                \n                if let cell = self.tableView.cellForRow(at: rowIndexPath) {\n                    cell.accessoryType = indexPath.row == i ? .checkmark : .none\n                }\n            }\n            \n            let setting = indexPath.row == 0 ? \"Off\" : (indexPath.row == 1 ? \"Following\" : \"Everyone\")\n            \n            if let status = Setting.Notification.Comments(rawValue: setting) {\n                SettingsService.shared.updateCommentsNotificationSetting(status)\n            }\n        }\n    }\n```\n\nSet the controller as the custom class for the settings storyboard scene.\n\nIn the `SettingsTableViewController`, we load the settings from the `SettingsService` class, which we will create later. We then define a `shouldCheckCell` method, which will determine if the cell row should be checked by checking the users setting.\n\n![ios-push-notifications-social-network-settings](//images.ctfassets.net/1es3ne0caaid/4TH2I2tOQ82eAIcueuEoqC/4597c23c2705aaf92044a0dc69a08c70/ios-push-notifications-social-network-settings.png)\n\nAs seen from the storyboard scene, there are three possible settings for the comments notification section: ‘**Off**’, ‘**From people I follow**’ and ‘**From everyone**’. The settings controller attempts to update the setting locally and remotely using the `SettingsService` when the setting is changed.\n\nNext, create the `SearchTableViewController` and paste the following code into it:\n\n``` swift\n    import UIKit\n    import NotificationBannerSwift\n    \n    class SearchTableViewController: UITableViewController {\n    \n        var users: Users = []\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            ApiService.shared.fetchUsers { users in\n                guard let users = users else {\n                    return StatusBarNotificationBanner(title: \"Unable to fetch users.\", style: .danger).show()\n                }\n                \n                self.users = users\n                self.tableView.reloadData()\n            }\n        }\n        \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return self.users.count\n        }\n    \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let user = self.users[indexPath.row]\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"User\", for: indexPath) as! UserListTableViewCell\n            \n            cell.delegate = self\n            cell.indexPath = indexPath\n            cell.textLabel?.text = user.name\n            \n            if let following = user.follows {\n                cell.setFollowStatus(following)\n            }\n    \n            return cell\n        }\n        \n    }\n    \n    extension SearchTableViewController: UserListCellFollowButtonDelegate {\n        \n        func followButtonTapped(at indexPath: IndexPath) {\n            let user = self.users[indexPath.row]\n            let userFollows = user.follows ?? false\n            \n            ApiService.shared.toggleFollowStatus(forUserId: user.id, following: userFollows) { successful in\n                guard let successful = successful, successful else { return }\n                \n                self.users[indexPath.row].follows = !userFollows\n                self.tableView.reloadData()\n            }\n        }\n        \n    }\n```\n\nSet the controller as the custom class for the search storyboard scene.\n\nThough we have named the class `SearchTableViewController` we are actually not going to be doing any searches. We are going to have a make-believe search result, which will display the list of users on the service with a **Follow/Unfollow** button to make it easy to follow or unfollow a user.\n\nIn the `viewDidLoad` method we call the `fetchUsers` method on the `ApiService` class and then we load the users to the `users` property, which is then used as the table’s data. In the class extension, we implement the `UserListCellFollowButtonDelegate` protocol, which makes it easy for us to know when the **Follow/Unfollow** button is tapped. We use the [delegation pattern](https://www.appcoda.com/swift-delegate/) to make this possible.\n\nNext, create the `TimelineTableViewController` class and paste the following code into it:\n\n``` swift\n    import UIKit\n    import Alamofire\n    import NotificationBannerSwift\n    import PushNotifications\n    \n    class TimelineTableViewController: UITableViewController {\n        var photos: Photos = []\n        var selectedPhoto: Photo?\n        let picker = UIImagePickerController()\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            self.reloadButtonWasPressed()\n            self.picker.delegate = self\n        }\n        \n        @IBAction func userButtonWasPressed(_ sender: Any) {\n            AuthService.shared.logout()\n            dismiss(animated: true, completion: nil)\n        }\n        \n        @IBAction func reloadButtonWasPressed(_ sender: Any? = nil) {\n            ApiService.shared.fetchPosts { photos in\n                if let photos = photos {\n                    self.photos = photos\n                    self.tableView.reloadData()\n                }\n            }\n        }\n        \n        @IBAction func addButtonWasPressed(_ sender: Any) {\n            picker.sourceType = .photoLibrary\n            picker.mediaTypes = UIImagePickerController.availableMediaTypes(for: .photoLibrary)!\n            picker.modalPresentationStyle = .popover\n            picker.popoverPresentationController?.barButtonItem = nil\n            present(picker, animated: true, completion: nil)\n        }\n    \n        override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n            if let vc = segue.destination as? CommentsTableViewController, let photo = selectedPhoto {\n                selectedPhoto = nil\n                vc.photoId = photo.id\n                vc.comments = photo.comments\n            }\n        } \n    }\n```\n\nSet the controller as the custom class for the timeline storyboard scene.\n \nIn the controller above we have the `photos` property, which is an array of all the photos on the service, the `selectedPhoto`, which will temporarily hold the selected photo object, and the `picker` property, which we will use for the image picker when trying to upload images to the service.\n \n In the `viewDidLoad` method, we load the posts by calling the `reloadButtonWasPressed` method, then we set the class as the `picker.delegate`. We have the `@IBAction` method `addButtonWasPressed`, which launches the iOS image picker.\n \n The `prepare` method is called automatically when the controller is navigating to the comments controller. So in here, we set the comments to the comments controller so we have something to display immediately. We also set the `photoId` to the comments controller.\n\nNext, in the same class, paste the following at the bottom:\n\n``` swift\n    extension TimelineTableViewController {\n        \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return photos.count\n        }\n        \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let photo = photos[indexPath.row]\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"PhotoCell\", for: indexPath) as! PhotoListTableViewCell\n            \n            cell.delegate = self\n            cell.indexPath = indexPath\n            cell.nameLabel.text = photo.user.name\n            cell.photo.image = UIImage(named: \"loading\")\n            \n            Alamofire.request(photo.image).responseData { response in\n                if response.error == nil, let data = response.data {\n                    cell.photo.image = UIImage(data: data)\n                }\n            }\n    \n            return cell\n        } \n        \n    }\n    \n    extension TimelineTableViewController: PhotoListCellDelegate {\n        \n        func commentButtonWasTapped(at indexPath: IndexPath) {\n            self.selectedPhoto = photos[indexPath.row]\n            self.performSegue(withIdentifier: \"Comments\", sender: self)\n        }\n        \n    }\n```\n\nIn the code above, we have two extensions for the `TimelineTableViewController`. The first extension defines how we want to present the photos to the table view. The second extension is an implementation of the `PhotoListCellDelegate`, which is another implementation of the delegation pattern. The method defined here, `commentButtonWasTapped`, will be triggered when the Comment button is pressed on a photo cell.\n\nIn the same file add the last class extension at the bottom of the file:\n\n``` swift\n    extension TimelineTableViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {\n        \n        @objc func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {\n            if let selected = info[\"UIImagePickerControllerOriginalImage\"] as? UIImage {\n                guard let image = UIImageJPEGRepresentation(selected, 0) else { \n                    return \n                }\n                \n                let uploadPhotoHandler: (() -\u003e Void)? = {\n                    var caption: UITextField?\n                    \n                    let alert = UIAlertController(title: \"Add Caption\", message: nil, preferredStyle: .alert)\n                    alert.addTextField(configurationHandler: { textfield in caption = textfield })\n                    alert.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))\n                    alert.addAction(UIAlertAction(title: \"Save\", style: .default, handler: { action in\n                        var filename = \"upload.jpg\"\n                        let caption = caption?.text ?? \"No caption\"\n                        \n                        if let url = info[UIImagePickerControllerImageURL] as? NSURL, let name = url.lastPathComponent {\n                            filename = name\n                        }\n                        \n                        ApiService.shared.uploadImage(image, caption: caption, name: filename) { photo, error in\n                            guard let photo = photo, error == nil else {\n                                return StatusBarNotificationBanner(title: \"Failed to upload image\", style: .danger).show()\n                            }\n                            \n                            try? PushNotifications.shared.subscribe(interest: \"photo_\\(photo.id)-comment_following\")\n                            try? PushNotifications.shared.subscribe(interest: \"photo_\\(photo.id)-comment_everyone\")\n                            \n                            self.photos.insert(photo, at: 0)\n                            self.tableView.reloadData()\n                            \n                            StatusBarNotificationBanner(title: \"Uploaded successfully\", style: .success).show()\n                        }\n                    }))\n                    \n                    self.present(alert, animated: true, completion: nil)\n                }\n    \n                self.dismiss(animated: true, completion: uploadPhotoHandler)\n            }\n        }\n        \n    }\n```\n\nIn the extension above, we implement the `UIImagePickerControllerDelegate`, which let’s us handle image selection from the `UIImagePickerController`. When an image is selected, the method above will be called.\n\nWe handle it by getting the selected image, displaying an alert controller with a text field so we can get a caption for the image and then we send the image and the caption to the API using the `ApiService`.\n\nWhen the upload is complete, we add the newly added photo to the table and then we subscribe the user to the Pusher Beam Interest so they can receive push notifications when comments are made to the photo.\n\nAlso above we subscribed to two interests. The first is `photo_\\(id)-comment_following` and the second one is `photo_\\(id)-comment_everyone`. We do this so that we can segment notifications depending on the users setting. On the server, when a comment is added, if the photo owner sets the comment notification setting to following then the push notification will be published to the `photo_\\(id)-comment_following` interest.\n\nNext, create the `CommentsTableViewController` class and paste the following code into it:\n\n``` swift\n    import UIKit\n    import NotificationBannerSwift\n    \n    class CommentsTableViewController: UITableViewController {\n        var photoId: Int = 0\n        var commentField: UITextField?\n        var comments: PhotoComments = []\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            navigationItem.title = \"Comments\"\n            navigationController?.navigationBar.prefersLargeTitles = false\n            navigationItem.rightBarButtonItem = UIBarButtonItem(title: \"Add\", style: .plain, target: self, action: #selector(addCommentButtonWasTapped))\n            \n            if photoId != 0 {\n                ApiService.shared.fetchComments(forPhoto: photoId) { comments in\n                    guard let comments = comments else { return }\n                    \n                    self.comments = comments\n                    self.tableView.reloadData()\n                }\n            }\n        }\n        \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return comments.count\n        }\n        \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"Comment\", for: indexPath) as! CommentsListTableViewCell\n            let comment = comments[indexPath.row]\n            \n            cell.username?.text = comment.user.name\n            cell.comment?.text = comment.comment\n            \n            return cell\n        }\n        \n        @objc func addCommentButtonWasTapped() {\n            let alertCtrl = UIAlertController(title: \"Add Comment\", message: nil, preferredStyle: .alert)\n            alertCtrl.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))\n            alertCtrl.addTextField { textField in self.commentField = textField }\n            alertCtrl.addAction(UIAlertAction(title: \"Add Comment\", style: .default) { _ in\n                guard let comment = self.commentField?.text else { return }\n                \n                ApiService.shared.leaveComment(forId: self.photoId, comment: comment) { newComment in\n                    guard let comment = newComment else {\n                        return StatusBarNotificationBanner(title: \"Failed to post comment\", style: .danger).show()\n                    }\n    \n                    self.comments.insert(comment, at: 0)\n                    self.tableView.reloadData()\n                }\n            })\n    \n            self.present(alertCtrl, animated: true, completion: nil)\n        }\n    }\n```\n\nSet the controller as the custom class for the timeline storyboard scene.\n\nIn the `CommentsTableViewController` above we have the `comments` property, which holds all the comments for the photo, the `photoId` property, which holds the ID of the photo whose comments are being loaded and the `commentField` property, which is the text field that holds new comments.\n\nIn the `viewDidLoad` method we set up the controller title and add an ‘**Add**’ button to the right of the navigation bar. Next, we call the `fetchComments` method in the `ApiService` to load comments for the photo.\n\nWe have the `addCommentButtonWasTapped` method in the controller, which is activated when the ‘**Add**’ button on the navigation bar is pressed. This brings up an alert controller with a text field where we can get the comment text and then send the comment to the API using the `ApiService`.\n\n### Creating our custom view classes\n\nSince we have created the controllers, let’s create some custom view classes that we need for the cells we used in the controllers earlier.\n\nThe first custom cell we will create will be the `PhotoListTableViewCell` class. Create the class and paste the following code into the file:\n\n``` swift\n    import UIKit\n    \n    protocol PhotoListCellDelegate {\n        func commentButtonWasTapped(at indexPath: IndexPath)\n    }\n    \n    class PhotoListTableViewCell: UITableViewCell {\n        @IBOutlet weak var nameLabel: UILabel!\n        @IBOutlet weak var photo: UIImageView!\n        @IBOutlet weak var commentButton: UIButton!\n    \n        var indexPath: IndexPath?    \n        var delegate: PhotoListCellDelegate?\n        \n        override func awakeFromNib() {\n            super.awakeFromNib()\n            self.selectionStyle = .none\n            \n            commentButton.addTarget(self, action: #selector(commentButtonWasTapped), for: .touchUpInside)\n        }\n        \n        @objc func commentButtonWasTapped() {\n            if let indexPath = indexPath, let delegate = delegate {\n                delegate.commentButtonWasTapped(at: indexPath)\n            }\n        }\n    }\n```\n\nSet this class as the custom class for the cell in the timeline scene of the storyboard.\n\nIn the class above we have a few `@IBOutlet`'s for the name, photo and comment button. We have a `commentButtonWasTapped` method that fires the `commentWasTapped` method on a delegate of the cell.\n\nThe next cell we want to create is the `CommentsListTableViewCell`. Create the class and paste the following code into the file:\n\n``` swift\n    import UIKit\n    \n    class CommentsListTableViewCell: UITableViewCell {\n        @IBOutlet weak var username: UILabel!\n        @IBOutlet weak var comment: UILabel!\n    }\n```\n\nSet this class as the custom class for the cell in the comments scene of the storyboard.\n\nThe next cell we want to create is the `UsersListTableViewCell`. Create the class and paste the following code into the file:\n\n``` swift\n    import UIKit\n    \n    protocol UserListCellFollowButtonDelegate {\n        func followButtonTapped(at index:IndexPath)\n    }\n    \n    class UserListTableViewCell: UITableViewCell {\n        var indexPath: IndexPath?    \n        var delegate: UserListCellFollowButtonDelegate?\n        \n        @IBOutlet weak var followButton: UIButton!\n        \n        override func awakeFromNib() {\n            super.awakeFromNib()\n            self.selectionStyle = .none\n            \n            self.setFollowStatus(false)\n            self.followButton.layer.cornerRadius = 5\n            self.followButton.setTitleColor(UIColor.white, for: .normal)\n            self.followButton.addTarget(self, action: #selector(followButtonTapped(_:)), for: .touchUpInside)\n        }\n    \n        func setFollowStatus(_ following: Bool) {\n            self.followButton.backgroundColor = following ? UIColor.red : UIColor.blue\n            self.followButton.setTitle(following ? \"Unfollow\" : \"Follow\", for: .normal)\n        }\n        \n        @objc private func followButtonTapped(_ sender: UIButton) {\n            if let delegate = delegate, let indexPath = indexPath {\n                delegate.followButtonTapped(at: indexPath)\n            }\n        }\n    }\n```\n\nSet this class as the custom class for the cell in the search scene in the storyboard.\n\nIn the class above we have a custom cell to display a user’s name and a follow button. We have a `setFollowStatus` method that toggles the state of the follow button and we have a `followButtonTapped` method that calls the `followButtonTapped` method on a delegate of the cell.\n\nThat’s all for custom cell classes. Let’s move on to creating other classes and setting up push notification.\n\n### Adding other classes and setting up push notifications\n\nWe still need to create one last file.  Create an `AppConstants` file and paste the following code into the file:\n\n``` swift\n    import Foundation\n    \n    struct AppConstants {\n        static let API_URL = \"http://127.0.0.1:8000\"\n        static let API_CLIENT_ID = \"API_CLIENT_ID\"\n        static let API_CLIENT_SECRET = \"API_CLIENT_SECRET\"\n        static let PUSHER_INSTANCE_ID = \"PUSHER_INSTANCE_ID\n    }\n```\n\nIn the struct above we have some constants that we will be using throughout the application. These will be used to store application credentials and will be unchanged throughout the lifetime of the application.\n\n\n\u003e 💡  Replace the key values with the actual values gotten from your Passport installation and from your Pusher dashboard.\n\nNext, open the `AppDelegate` class and replace the contents with the following:\n\n``` swift\n    import UIKit\n    import PushNotifications\n    \n    @UIApplicationMain\n    class AppDelegate: UIResponder, UIApplicationDelegate {\n    \n        var window: UIWindow?\n        \n        let pushNotifications = PushNotifications.shared\n        \n        func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n            self.pushNotifications.start(instanceId: AppConstants.PUSHER_INSTANCE_ID)\n            self.pushNotifications.registerForRemoteNotifications()\n    \n            return true\n        }\n        \n        func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n            self.pushNotifications.registerDeviceToken(deviceToken)\n        }\n    }\n```\n\nIn the class above, we use the [Pusher Beams Swift SDK](https://docs.pusher.com/push-notifications/reference/ios) to register the device for push notifications.\n\nThat’s all for our application’s code.\n\n### Adding push notifications to our iOS new application\n\nNow that we have completed the logic for the application, let’s enable push notifications on the application in Xcode. \n\nIn the project navigator, select your project, and click on the **Capabilities** tab. [Enable Push Notifications](http://help.apple.com/xcode/mac/current/#/devdfd3d04a1) by turning the switch ON.\n\n![ios-push-notifications-social-network-enable-push-notifications](//images.ctfassets.net/1es3ne0caaid/nwh9O0inWCAwwsi82iq4o/efa381b5ae180d746608e151f4559f0e/ios-push-notifications-social-network-enable-push-notifications.png)\n\nThis will create an entitlements file in the root of your project. With that, you have provisioned your application to fully receive push notifications.\n\n### Adding rich push notifications\n\nLet’s take it one step further and add rich notifications. We will want to be able to see the photo commented on in the notification received as this can increase engagement.\n\nIn Xcode go to ‘File’ \u003e ‘New’ \u003e ‘Target’ and select ‘Notification Service Extension’. Enter the name of the extension and then click proceed. Make sure the extension is added and embedded to the Gram project. We will call our extension **Notification**.\n\nWhen the target has been created you will see a new `Notification` group (it may be different depending on what you chose to call your extension) with two files in them. Open the `NotificationService` class and replace the `didReceive`  method with the method below:\n\n``` swift\n    override func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -\u003e Void) {\n        self.contentHandler = contentHandler\n        bestAttemptContent = (request.content.mutableCopy() as? UNMutableNotificationContent)\n    \n        func failEarly() {\n            contentHandler(request.content)\n        }\n        \n        guard\n            let content = (request.content.mutableCopy() as? UNMutableNotificationContent),\n            let apnsData = content.userInfo[\"data\"] as? [String: Any],\n            let photoURL = apnsData[\"attachment-url\"] as? String,\n            let attachmentURL = URL(string: photoURL.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)!),\n            let imageData = try? NSData(contentsOf: attachmentURL, options: NSData.ReadingOptions()),\n            let attachment = UNNotificationAttachment.create(imageFileIdentifier: \"image.png\", data: imageData, options: nil)\n            else {\n                return failEarly()\n        }\n        \n        content.attachments = [attachment]\n        contentHandler(content.copy() as! UNNotificationContent)\n    }\n```\n\nAbove we are simply getting the notifications payload and then extracting the data including the `attachment-url`, which is the photo URL. We then create an attachment for the notification and add it to the notification’s content. That’s all we need to do to add the image as an attachment.\n\n\u003e ⚠️  Your image URL has to be a secure URL with HTTPS or iOS will not load the image. You can override this setting in your `info.plist` file but it is strongly recommended that you don’t.\n\nNext, create a new file in the Notification extension called `UNNotificationAttachment.swift` and paste the following into the file:\n\n``` swift\n    import Foundation\n    import UserNotifications\n    \n    extension UNNotificationAttachment {\n        \n        static func create(imageFileIdentifier: String, data: NSData, options: [NSObject : AnyObject]?) -\u003e UNNotificationAttachment? {\n            let fileManager = FileManager.default\n            let tmpSubFolderName = ProcessInfo.processInfo.globallyUniqueString\n            let tmpSubFolderURL = NSURL(fileURLWithPath: NSTemporaryDirectory()).appendingPathComponent(tmpSubFolderName, isDirectory: true)\n            \n            do {\n                try fileManager.createDirectory(at: tmpSubFolderURL!, withIntermediateDirectories: true, attributes: nil)\n                let fileURL = tmpSubFolderURL?.appendingPathComponent(imageFileIdentifier)\n                try data.write(to: fileURL!, options: [])\n                let imageAttachment = try UNNotificationAttachment(identifier: imageFileIdentifier, url: fileURL!, options: options)\n                return imageAttachment\n            } catch let error {\n                print(\"error \\(error)\")\n            }\n            \n            return nil\n        }\n    }\n```\n\nThe code above is a class extension for the `UNNotificationAttachment` class. The extension contains the `create` method that allows us to create a temporary image to store the image attachment that was sent as a push notification.\n\nNow you can build your application using Xcode. Make sure the Laravel application is running or the app won’t be able to fetch the data.\n\n### Allowing our application to connect locally\n\nIf you are going to be testing the app’s backend using a local server, then there is one last thing we need to do. Open the `info.plist` file and add an entry to the `plist` file to allow connection to our local server:\n\n![ios-push-notifications-social-network-connect-locally](//images.ctfassets.net/1es3ne0caaid/5UymGAiLeg22C46SEyay4U/0f66ae00ca879dc03852ece398c955f9/ios-push-notifications-social-network-connect-locally.png)\n\nThat’s it now. We can run our application. However, **remember that to demo the push notifications, you will need an actual iOS device as simulators cannot receive push notifications.**\n\nHere is a screen recording of the application in action:\n\n![ios-push-notifications-social-network-demo](//images.ctfassets.net/1es3ne0caaid/51GgQzYiqQEMAQWOK8AMgS/fd0d5bb1bbaa7f1f198fed340d25cd53/ios-push-notifications-social-network-demo.gif)\n\n## Conclusion\n\nIn this article, we have seen how you can use Pusher Beams to send push notifications from a Laravel backend and a Swift iOS client application. When creating social networks it is essential that the push notifications we send are relevant and not spammy and Pusher Beams can help with this.\n\nThe source code to the application is on [GitHub](https://github.com/neoighodaro-articles/pusher-beams-ios-social-network).","metaTitle":"Social notifications on iOS app - Part 2: Build the app","metaDescription":"This tutorial is part two of a two-part series. You will create a a social network app for iOS, featuring push notifications. In this part, you will use Xcode to build the iOS app."}}],"defaultValue":"iOS","queryType":"tag","pages":11,"route":"/tutorials","query":{"tag":"iOS","page":"8"}}},"page":"/tutorials","query":{"tag":"iOS","page":"8"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=iOS&page=8 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:43:47 GMT -->
</html>