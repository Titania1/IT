<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Node.js&page=12 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:51 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">169</span> tutorials for “<span class="css-npldjc ehwuahf2">Node.js</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorialsd3fd.html?product=Beams&amp;tag=Node.js" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials.html" class="css-a3lpv2 e137azhw1"><svg fill="#C223CE" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#C223CE" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Node.js"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/location-feed-android-kotlin.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a location feed app for Android with Kotlin</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This tutorial shows you how to build a location-sharing app for Android using Kotlin. The app has a Node.js backend. Use...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/geofencing-nextjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a geofencing web app using Next.js</h3><p class="css-k12xad e5jrto45">Learn to build a web app with Next.js and React featuring geofencing functionality. Track the location of nearby friends...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/geofencing-angular.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a geofencing web app using Angular </h3><p class="css-k12xad e5jrto45">Learn to build a web app with Angular and Node featuring geofencing functionality. Track whether guests are within your ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/adonis-realtime.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime app with Adonis</h3><p class="css-k12xad e5jrto45">This tutorial will explore Adonis. You will build an app that pushes realtime messages to all connected clients using Pu...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/angular-chat-sentiment-analysis.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Emoji suggestions in an Angular chat application using sentiment analysis</h3><p class="css-k12xad e5jrto45">Build a chat app in Angular. The app features emoji suggestions (as suggested responses) based on the users&#x27; moods. The ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-comments-sentiment-analysis-angular.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Live comments and ratings using sentiment analysis and Angular</h3><p class="css-k12xad e5jrto45">Learn to build a live comments application using Angular, featuring sentiment analysis. Use the sentiment analysis to me...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-table-angular.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime table with Angular</h3><p class="css-k12xad e5jrto45">Create an Angular web app featuring a table interface that updates in realtime to reflect changes in the database.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-poll-angular.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime poll using Angular</h3><p class="css-k12xad e5jrto45">Build a polling application in Angular. Use Chart.js to visualize voting results in realtime.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-data-visualization-nextjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Realtime data visualization using Next.js and Chart.js</h3><p class="css-k12xad e5jrto45">Use Next.js and Chart.js to build a web app that receives user votes, presents the results as a graph, and updates the g...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials81a4.html?tag=Node.js&amp;page=11" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials43c6.html?tag=Node.js&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialsc68f.html?tag=Node.js&amp;page=10" class="css-za1ua3 edg0byb1">10</a><a href="tutorials81a4.html?tag=Node.js&amp;page=11" class="css-za1ua3 edg0byb1">11</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsa78c.html?tag=Node.js&amp;page=12" class="css-2wakph edg0byb1">12</a><a href="tutorials802f.html?tag=Node.js&amp;page=13" class="css-za1ua3 edg0byb1">13</a><a href="tutorials3c57.html?tag=Node.js&amp;page=14" class="css-za1ua3 edg0byb1">14</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorialsb101.html?tag=Node.js&amp;page=19" class="css-5s6711 edg0byb1">19</a><a href="tutorials802f.html?tag=Node.js&amp;page=13" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":169,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N924MqeI0o4k8msEgyoWs","type":"Entry","createdAt":"2018-05-17T21:40:18.246Z","updatedAt":"2020-06-19T12:43:12.908Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a location feed app for Android with Kotlin","url":"location-feed-android-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/pusher-location-feeds","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-05-17","description":"This tutorial shows you how to build a location-sharing app for Android using Kotlin. The app has a Node.js backend. Users can share their location and see where their friends are.","prerequisite":"You will need Android Studio 3+ and Node.js installed on your machine. Some knowledge of Android development will be helpful.","content":"## Introduction\n\nOften times we like to track and visualize our applications in a central place. Feeds are great for this! In this tutorial, we'll build an Android app with an activity feed that allows users to broadcast their locations and share with all other connected users in realtime.\n\nWe’ll build the Android app to monitor the activities of a [Node.js](https://nodejs.org/) REST API. Every time the endpoint of the API is hit, Pusher will publish an event with some information (location shared by the user) to a channel. This event will be received in realtime, on all the connected Android devices.\n\nHere’s the app in action:\n\n![kotlin-location-sharing-demo-login](//images.ctfassets.net/1es3ne0caaid/4TzPM2B6nmKsYe02424aQI/f29753ee89af486eeef5d09ea35434a5/kotlin-location-sharing-demo-login.png)\n\n![kotlin-location-sharing-demo-friends](//images.ctfassets.net/1es3ne0caaid/5BwV1PSK1aUSkaWggIkeiy/ee6936790ced1a80c32ec02c5de4168f/kotlin-location-sharing-demo-friends.png)\n\n\n\n## Prerequisites\n\nThis tutorial uses the following technologies\n\n- [Pusher](https://pusher.com/)\n- [Android Studio](https://developer.android.com/studio/index.html)\n- [Node](https://nodejs.org/en/download)\n\nTo follow along, you’ll need to [sign up with Pusher](https://pusher.com/signup.) and gain access to your dashboard to create a Pusher project. You will also need to have Android Studio v3+ installed to build the client part of this application. To build our server side script, you’ll need to [download and install Node](https://nodejs.org/en/download) if you don’t already have it installed.  \n\n## Client side\n\nNow that you have that sorted out, let’s start building our Android app. Launch Android Studio and create a new project. Be sure to include Kotlin support.\nEnter an application name, in our case -  Pusher-Location-Feeds\n\n![kotlin-location-sharing-create-android](//images.ctfassets.net/1es3ne0caaid/3Cpgj5cA8wqUwkQIeuyma2/0d5ee3c27fb43565c1adf87ce31542be/kotlin-location-sharing-create-android.jpeg)\n\nSelect application’s target SDK:\n\n![kotlin-location-sharing-target-devices](//images.ctfassets.net/1es3ne0caaid/75lRgCp6ogAQUMqU8KMoKU/c862d02968337389e63b93386fe984f4/kotlin-location-sharing-target-devices.jpeg)\n\nChoose the basic activity template:\n\n![kotlin-location-sharing-basic-activity](//images.ctfassets.net/1es3ne0caaid/3zVD6WjkOQiuowYegwo64G/8d31950078f4cf322b6a6531c5111f19/kotlin-location-sharing-basic-activity.jpeg)\n\nWhen the project build is completed, open your app level `build.gradle` file and update the dependencies like so:\n\n\n``` gradle    \n    implementation fileTree(include: ['*.jar'], dir: 'libs')\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version\"\n    implementation 'com.android.support:appcompat-v7:26.1.0'\n    implementation 'com.android.support.constraint:constraint-layout:1.0.2'\n    implementation 'com.pusher:pusher-java-client:1.5.0'\n    implementation 'com.google.android.gms:play-services-maps:15.0.0'\n    implementation 'com.google.android.gms:play-services-location:15.0.0'\n    \n    implementation 'com.squareup.retrofit2:retrofit:2.3.0'\n    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'\n    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'\n    implementation 'com.android.support:recyclerview-v7:26.1.0'\n    implementation 'com.android.support:design:26.1.0'\n    testImplementation 'junit:junit:4.12'\n    androidTestImplementation 'com.android.support.test:runner:1.0.1'\n    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'\n```\n\n\nNext, sync the project by clicking **Sync Now** with the gradle file to install the added dependencies.\n\n\n## Application activities\n\n### Login activity\nBy default creating the Android project also creates a `MainActivity` class and an associating `activity_main.xml` file for you. Now we need a login Activity to collect the users username. So create a new activity, right-click on **MainActivity \u003e\u003e New \u003e\u003e Activity \u003e\u003e Empty Activity**, then name it `LoginActivity`. Once this activity is created, it’ll create a default layout file `activity_login.xml` inside the `layout` folder under `res`. The layout will be a rather simple one, it will have a text input to collect the user’s `username` and a button to share their location. Here’s a snippet for the `activity_login.xml` file:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\"\n        android:gravity=\"center\"\n        android:layout_margin=\"16dp\"\n        tools:context=\".LoginActivity\"\u003e\n    \n        \u003cEditText\n            android:paddingStart=\"10dp\"\n            android:id=\"@+id/userName\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"50dp\"\n            android:hint=\"Username\"\n            android:background=\"@drawable/input_bg\"\n            android:layout_marginEnd=\"5dp\"/\u003e\n    \n        \u003cButton\n            android:id=\"@+id/enterButton\"\n            android:layout_marginTop=\"15dp\"\n            android:layout_width=\"wrap_content\"\n            android:padding=\"10dp\"\n            android:text=\"Share Location\"\n            android:textColor=\"@android:color/white\"\n            android:background=\"@drawable/button\"\n            android:layout_gravity=\"center\"\n            android:layout_height=\"wrap_content\" /\u003e\n    \n    \u003c/LinearLayout\u003e\n```\n\n\nHere we have a simple `LinearLayout` with two view objects, an `EditText` input to collect the user’s `username` and a share button to send the location to the server.\n\nAndroid default styling isn’t always appealing so let’s add some custom styles to our layout simply for aesthetic purposes.\nUnder `res` folder, open the `values` folder and navigate into `colors.xml` file and update it with this code :\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cresources\u003e\n        \u003ccolor name=\"colorPrimary\"\u003e#8e0517\u003c/color\u003e\n        \u003ccolor name=\"colorPrimaryDark\"\u003e#4c060f\u003c/color\u003e\n        \u003ccolor name=\"colorAccent\"\u003e#FF4081\u003c/color\u003e\n    \n    \u003c/resources\u003e\n```\nSecondly to achieve the button and Input styles, we create two `drawable` files. Under `res` right-click on **drawable \u003e\u003eNew \u003e\u003e Drawable resource file**, name it `input_bg` and update it with this code:\n\n``` xml\n    \u003cshape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:shape=\"rectangle\" android:padding=\"10dp\" \u003e\n        \u003csolid android:color=\"#FFFFFF\"\n            /\u003e\n        \u003ccorners\n            android:radius=\"10dp\"/\u003e\n    \u003c/shape\u003e\n```\nThis simply adds round edges to the EditText object. For the button styles, follow the same steps as the one above and create a new drawable file, name it `button` and set it up like so:\n\n``` xml\n    \u003cshape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:shape=\"rectangle\" android:padding=\"10dp\" \u003e\n        \u003csolid android:color=\"#4c060f\" /\u003e\n        \u003ccorners\n            android:radius=\"10dp\"/\u003e\n    \u003c/shape\u003e\n```\n\n\nFinally update your `styles.xml` file inside the `values` folder in the `layout` directory:\n\n``` xml\n    \u003cresources\u003e\n        \u003c!-- Base application theme. --\u003e\n        \u003cstyle name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\"\u003e\n            \u003c!-- Customize your theme here. --\u003e\n            \u003citem name=\"colorPrimary\"\u003e@color/colorPrimary\u003c/item\u003e\n            \u003citem name=\"colorPrimaryDark\"\u003e@color/colorPrimaryDark\u003c/item\u003e\n            \u003citem name=\"colorAccent\"\u003e@color/colorAccent\u003c/item\u003e\n        \u003c/style\u003e\n        \u003cstyle name=\"AppTheme.NoActionBar\"\u003e\n            \u003citem name=\"windowActionBar\"\u003efalse\u003c/item\u003e\n            \u003citem name=\"windowNoTitle\"\u003etrue\u003c/item\u003e\n        \u003c/style\u003e\n    \n     \u003cstyle name=\"AppTheme.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\" /\u003e\n    \n    \u003cstyle name=\"AppTheme.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\" /\u003e\n    \u003c/resources\u003e\n```\nAt this point, your output in the xml visualizer should look exactly like this:\n\n![kotlin-location-sharing-part-1](//images.ctfassets.net/1es3ne0caaid/4CM5Xxcy1O88scGEcY8ugy/64ce857627e2ae7ff22b08ff2279e2aa/kotlin-location-sharing-part-1.jpeg)\n\nNext lets create a new layout file called `custom_view.xml`. We’ll use this file to render each individual map of a user on our recyclerview object. Inside the `layout` folder under `res`, create the new layout resource file and set it up like so:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\u003e\n    \u003ccom.google.android.gms.maps.MapView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/map\"\n    android:layout_margin=\"10dp\"\n    android:name=\"com.google.android.gms.maps.SupportMapFragment\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"200dp\" /\u003e\n    \n    \u003c/LinearLayout\u003e\n```\n\nOkay, we are done with login and UI lets hook it up with it’s Java file to handle the logic. Open `LoginActivity.kt` file and set it up like so:\n\n``` kotlin\n    //package your_project_package_here\n    \n    import android.content.Intent\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import kotlinx.android.synthetic.main.activity_login.*\n    \n    class LoginActivity : AppCompatActivity() {\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_login)\n            enterButton.setOnClickListener {\n                if (userName.text.isNotEmpty()){\n                    val intent = Intent(this@LoginActivity,MainActivity::class.java)\n                    intent.putExtra(\"username\",userName.text.toString())\n                    startActivity(intent)\n                }\n            }\n        }\n    }\n```\nHere we are simply getting the value of the input we defined in the layout file and passing it into the `MainActivity` class with an intent . Once the user has entered a value (username) in the `Edittext` object, we set a listener on the button to call the intent action when clicked. This action will only execute if the input value is not empty.\n\n### MainActivity\nNext we define a layout where we’ll render the map locations of each user when they share their location. We’ll get their latitude and longitude coordinates along with the username they provided in the `LoginActivity` and send it to our server, which then returns a map of the location with the provided username on the map-marker and display it on screen for all users. \n\nBefore we get into MainActivity, let’s first define a new layout file with a RecyclerView object to hold these location widgets as the users share them. Under `res`, right-click on **layout \u003e\u003e New \u003e\u003e Layout resource file** and name it `content_main`, (if you selected the basic activity template while setting up the project, then you should have this file by default). Open this file and set it up like so:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.v7.widget.RecyclerView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/recyclerView\"\n        android:layout_margin=\"16dp\"\n        tools:showIn=\"@layout/activity_main\"/\u003e\n```\nAs seen, we simply have a RecyclerView object where we’ll render each individual user's location so they can all appear in a list.\nLastly, Open up `activity_main.xml` and update it:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\"\u003e\n    \n        \u003candroid.support.design.widget.AppBarLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:theme=\"@style/AppTheme.AppBarOverlay\"\u003e\n    \n            \u003candroid.support.v7.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                android:background=\"?attr/colorPrimary\"\n                app:popupTheme=\"@style/AppTheme.PopupOverlay\" /\u003e\n    \n        \u003c/android.support.design.widget.AppBarLayout\u003e\n    \n        \u003cinclude layout=\"@layout/content_main\" /\u003e\n    \n        \u003candroid.support.design.widget.FloatingActionButton\n            android:id=\"@+id/fab\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"bottom|end\"\n            android:layout_margin=\"16dp\"\n            app:srcCompat=\"@android:drawable/ic_menu_send\" /\u003e\n    \n    \u003c/android.support.design.widget.CoordinatorLayout\u003e\n```\n## Application logic\n\nSince we used a RecyclerView in our layout file, we’ll need an adapter class. `RecyclerView` works with an [Adapter](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html) to manage the items of its data source and a [ViewHolder](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewHolder.html) to hold a view representing a single list item. Before we create the `Adapter` class, lets first create a `Model` class that will interface between our remote data and the adapter. It’ll have the values that we’ll pass data to our recyclerview. Now right-click on **MainActivity \u003e\u003e New \u003e\u003e** **Kotlin File/Class**, name it **Model,** under the **Kind** dropdown, select **Class** and set it up like so:\n\n``` kotlin\n    // java/package/Model\n    \n    data class Model(val latitude:Double,\n                     val longitude:Double,\n                     val username:String)\n```\n\n\nNow that we have that, lets create the `Adapter` class.  Right-click on **MainActivity \u003e\u003e New \u003e\u003e Kotlin File/Class**, name it `Adapter`, under the **Kind** dropdown, select Class again and set it up with the code:\n\n``` kotlin\n    // java/package/Adapter\n    //package your_project_package_here\n    \n    // imports  \n    import android.content.Context\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.TextView\n    \n    class Adapter(private val mContext: AppCompatActivity)\n        : RecyclerView.Adapter\u003cAdapter.MyViewHolder\u003e() {\n    \n        private var arrayList: ArrayList\u003cModel\u003e = ArrayList()\n        override fun getItemCount(): Int {\n            return arrayList.size\n        }\n        override fun onBindViewHolder(holder: Adapter.MyViewHolder, position: Int) {\n          val latLng = LatLng(arrayList[position].latitude,arrayList[position].longitude)\n            holder.mapView.onCreate(null)\n            holder.mapView.getMapAsync(OnMapReadyCallback {\n                it.addMarker(MarkerOptions()\n                        .title(arrayList[position].username)\n                        .position(latLng))\n            val cameraPosition = CameraPosition.Builder().target(latLng).zoom(17f).build()\n                it.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition))\n            })\n        }\n         override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {\n            val view = LayoutInflater.from(mContext).inflate(R.layout.custom_view, parent, false)\n            return MyViewHolder(view)\n        }\n        \n        inner class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n            val mapView:MapView = itemView.findViewById(R.id.map)\n        }\n        \n        fun addItem(model: Model) {\n            this.arrayList.add(model)\n            notifyDataSetChanged()\n        }\n    }\n```\n\nHere we have defined an `arrayList` from our Model class that will be used by the adapter to populate the `R``ecycler``V``iew`. In the `onBindViewHolder()` method, we bind the locations coming from our server (as longitude and latitude) to the view holder we defined for it. We also passed the user’s username to the map marker.\n\nThen in the `onCreateViewHolder()` method we define the design of the layout for individual items on the list.  Finally the `addItem()` method adds a new instance of our model class to the `arrayList` and refresh the list every time we get a new addition.\n\nNext let’s establish a connection to our Node server using the Retrofit library we installed at the beginning. First we create a new Kotlin interface to define the API endpoint we’ll be calling for this project. Right-click on **MainActivity \u003e\u003e New \u003e\u003e** **Kotlin File/Class**, under the **Kind** dropdown, select Interface name it **Service** and set it up like so:\n\n\n``` kotlin    \n    // imports ...\n    import retrofit2.Call\n    import retrofit2.http.GET\n    import retrofit2.http.Path\n    \n    interface Service {\n        @POST(\"/location\")\n        fun sendLocation(@Body coordinates: RequestBody): Call\u003cString\u003e\n    }\n```\n\nWe also need a class that’ll give us an instance of Retrofit for making networking calls. It’ll also be the class where we’ll define the server URL and network parameters. So follow the previous steps and create a class called `Client.kt` and set it up like this:\n\n\n``` kotlin\n    // imports...\n    \n    import okhttp3.OkHttpClient\n    import retrofit2.Retrofit\n    import retrofit2.converter.gson.GsonConverterFactory\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    \n    class Client {\n        fun getClient(): Service {\n            val httpClient = OkHttpClient.Builder()\n    \n            val builder = Retrofit.Builder()\n                    .baseUrl(\"your_server_url\")\n                    .addConverterFactory(ScalarsConverterFactory.create())\n                    .addConverterFactory(GsonConverterFactory.create())\n    \n            val retrofit = builder\n                    .client(httpClient.build())\n                    .build()\n    \n            return retrofit.create(Service::class.java)\n        }\n    }\n```\n\n\u003e Replace the Base URL with your localhost address for the Node server. We’ll \n\nThe `baseUrl` we used here points to our local Node server running on your machine as shown above but we’ll get to that later on in the tutorial. For now let’s go back to `MainActivity.kt` and initialize the necessary objects and update it with the classes we’ve created above.\n\n``` kotlin\n    // imports ...\n    \n    import android.Manifest\n    import android.annotation.SuppressLint\n    import android.content.DialogInterface\n    import android.content.pm.PackageManager\n    import android.location.Location\n    import android.os.Bundle\n    import android.support.design.widget.Snackbar\n    import android.support.v4.app.ActivityCompat\n    import android.support.v4.content.ContextCompat\n    import android.support.v7.app.AlertDialog\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import com.google.android.gms.location.FusedLocationProviderClient\n    import com.google.android.gms.location.LocationServices\n    import com.google.android.gms.maps.model.LatLng\n    import com.google.android.gms.maps.model.MarkerOptions\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import kotlinx.android.synthetic.main.activity_main.*\n    import kotlinx.android.synthetic.main.content_main.*\n    import okhttp3.MediaType\n    import okhttp3.RequestBody\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class MainActivity : AppCompatActivity() {\n    \n        var adapter: Adapter = Adapter(this@MainActivity)\n        lateinit var pusher:Pusher\n        val MY_PERMISSIONS_REQUEST_LOCATION = 100\n        private lateinit var fusedLocationClient: FusedLocationProviderClient\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n            setSupportActionBar(toolbar)\n            \n            }\n    }\n```\nHere we’ve just initialized the objects we’ll need, our Adapter class, Pusher, location request and the `fusedLocationClient`. \n\n  \n\nIn the `onCreate()` method we’ll setup our RecyclerView with the adapter. We’ll also call the `setupPusher()` method and the `sendLocation()` action with the floating action button:\n\n``` kotlin\n    // java/package/MainActivity.onCreate()\n     setupPusher()\n    fab.setOnClickListener { view -\u003e\n        if (checkLocationPermission())\n            sendLocation()\n    }\n    with(recyclerView){\n        layoutManager = LinearLayoutManager(this@MainActivity)\n        adapter = this@MainActivity.adapter\n    }\n    //... continue from next snippet\n```\n\n\u003e While adding this code to your `onCreate()` method, be careful not to miss the curly braces\n\nSo we called methods we haven’t defined yet, that’s no problem we’ll define the `setupPusher()` method later on in the tutorial but first off, let’s define and setup the  `sendLocation()` method this time, outside the `onCreate()`:\n\n``` kotlin\n    //java/package/MainActivity\n    \n    //... continue from the last snippet above, outside the onCreate() method\n    @SuppressLint(\"MissingPermission\")\n    private fun sendLocation() {\n        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)\n        fusedLocationClient.lastLocation\n                .addOnSuccessListener { location: Location? -\u003e\n                    if (location!=null){\n                        Log.e(\"TAG\",\"location is not null\")\n                        val jsonObject = JSONObject()\n                        jsonObject.put(\"latitude\",location.latitude)\n                        jsonObject.put(\"longitude\",location.longitude)\n                        jsonObject.put(\"username\",intent.extras.getString(\"username\"))\n    \n                        val body = RequestBody.create(MediaType.parse(\"application/json\"), jsonObject.toString())\n                        Log.e(\"TAG\",jsonObject.toString())\n                        Client().getClient().sendLocation(body).enqueue(object: Callback\u003cString\u003e {\n                            override fun onResponse(call: Call\u003cString\u003e, response: Response\u003cString\u003e) {}\n    \n                            override fun onFailure(call: Call\u003cString\u003e?, t: Throwable) {\n                                Log.e(\"TAG\",t.message)\n                            }\n    \n                        })\n    \n                    } else {\n                        Log.e(\"TAG\",\"location is null\")\n                    }\n                }\n    \n    }\n    //MainActivity\n```\nWith the `fusedLocationClient` object we initialized earlier, we are getting the user’s location. If we succeed in getting the location, we pass the the longitude and latitude along with the user’s `username` into our `body` object. We then use it to build our HTTP request with the `jsonObjects` as our request parameters. \n\nWe also called the `checkLocationPermission()` method in the `onCreate()` method however we haven’t defined it yet. Lets now create this method and set it up like so:\n\n``` kotlin\n    private fun checkLocationPermission(): Boolean {\n        if (ContextCompat.checkSelfPermission(this,\n                        Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\n    \n            // Should we show an explanation?\n            if (ActivityCompat.shouldShowRequestPermissionRationale(this,\n                            Manifest.permission.ACCESS_FINE_LOCATION)) {\n    \n                AlertDialog.Builder(this)\n                        .setTitle(\"Location permission\")\n                        .setMessage(\"You need the location permission for some things to work\")\n                        .setPositiveButton(\"OK\", DialogInterface.OnClickListener { dialogInterface, i -\u003e\n                            \n                            ActivityCompat.requestPermissions(this@MainActivity,\n                                    arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),\n                                    MY_PERMISSIONS_REQUEST_LOCATION)\n                        })\n                        .create()\n                        .show()\n    \n            } else {\n                // No explanation needed, we can request the permission.\n                ActivityCompat.requestPermissions(this,\n                        arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),\n                        MY_PERMISSIONS_REQUEST_LOCATION)\n            }\n            return false\n        } else {\n            return true\n        }\n    }\n```\nOf course we can’t just grab every user’s location without first asking for their permission, so here’s how we set up the method that requests permission to access their location. Just after the `sendLocation()` method, add:\n\n``` kotlin\n    // MainActivity\n    override fun onRequestPermissionsResult(requestCode: Int,\n     permissions: Array\u003cString\u003e, grantResults: IntArray) {\n      when (requestCode) {\n            MY_PERMISSIONS_REQUEST_LOCATION -\u003e {\n                // If request is cancelled, the result arrays are empty.\n       if (grantResults.isNotEmpty() \u0026\u0026 grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                    // permission was granted, yay! Do the\n                    // location-related task you need to do.\n                    if (ContextCompat.checkSelfPermission(this,\n        Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\n                     sendLocation()\n             }\n         } else {\n               // permission denied!\n            }\n              return\n          }\n      }\n    }\n    //MainActivity\n```\nAnd now let’s define the `setUpPusher()` method we called earlier in the `onCreate()` method:\n\n``` kotlin\n    // MainActivity\n    private fun setupPusher() {\n        val options = PusherOptions()\n        options.setCluster(\"eu\")\n        pusher = Pusher(\"9117088b176802bda36f\", options)\n        val channel = pusher.subscribe(\"feed\")\n        channel.bind(\"location\") { _, _, data -\u003e\n            val jsonObject = JSONObject(data)\n            Log.d(\"TAG\",jsonObject.toString())\n            val lat:Double = jsonObject.getString(\"latitude\").toDouble()\n            val lon:Double = jsonObject.getString(\"longitude\").toDouble()\n            val name:String = jsonObject.getString(\"username\").toString()\n            runOnUiThread {\n                val model = Model(lat,lon,name)\n                adapter.addItem(model)\n            }\n        }\n    }\n    //MainActivity\n```\nHere we simply pass in our Pusher configs to the Pusher object and subscribe to the `feed` channel to listen for `location` events. Then we get the data returned from the server into our defined variables and pass them to our model class to update the adapter.\n\nNext we implement the `onStart()` and `onStop()` methods to connect and disconnect Pusher respectively in our app:\n\n\n``` kotlin    \n    override fun onStart() {\n        super.onStart()\n        pusher.connect()\n    }\n    \n    override fun onStop() {\n        super.onStop()\n        pusher.disconnect()\n    }\n```\nFinally on the client side, we create a Kotlin data class that will define the payload we’ll be requesting from the server. Following the previous steps, create a class called **RequestPayload** and set it up like so:\n\n``` kotlin\n    // java/package/RequestPayload\n    \n    //package your_project_package_here\n    \n    data class RequestPayload(var latitude:Double,var longitude:Double,var username:String)\n```\n## Server side\n\n### Set up Pusher\nNow that we have all the client side functionalities, lets go ahead and build our server. But first, if you haven’t, now will be a good time to create a free account [here](https://pusher.com/signup).\nWhen you first log in, you'll be asked to enter some configuration options:\n\n![kotlin-location-sharing-pusher-1](//images.ctfassets.net/1es3ne0caaid/3ubhoW8yhqYUaseamiI6Wg/d527cb538be6495172a3eb99a6813a0e/kotlin-location-sharing-pusher-1.jpeg)\n\nEnter a name, choose *Android* as your front-end tech, and *Node.js* as your back-end tech. This will give you some sample code to get you started along with your project api keys:\n\n![kotlin-location-sharing-pusher-2](//images.ctfassets.net/1es3ne0caaid/3S9b0fAwtyGIiK0ykQy6O4/9be858e3ddc13a982e1205950fe3ee66/kotlin-location-sharing-pusher-2.jpeg)\n\nThen go to the **App Keys** tab and copy your app_id, key, and secret credentials, we'll need them later.\n\n### Set up a Node server\nFor this we will use Node. So check that you have `node` and `npm` installed on your machine by running this command in command prompt:\n\n```\n    node --version\n    //should display version numbers\n    \n    npm --version\n    //should display version numbers\n```\nIf that is not the case, [Download and Install Node](https://nodejs.org/en/download/).\n\nNext lets start building our server side script. Still in command prompt, run:\n\n```    \n    mkdir pusherLocationFeeds\n    //this creates a project directory to host your project files\n    \n    cd pusherLocationFeeds\n    // this navigates into the just created directory\n    \n    npm init -y\n    //this creates a default package.json file to host our project dependencies\n```\n\nLet’s install the Node modules we’ll need for this project. Basically we’ll need Express,  Pusher and body-parser. Inside the project directory, run:\n\n\n```    \n    npm install express, body-parser, pusher\n```\n\nYou can always verify these installations by opening your `package.json` file, at this point the dependency block should look like this :\n\n```      \n      \"dependencies\": {\n        \"body-parser\": \"^1.18.2\",\n        \"express\": \"^4.16.3\",\n        \"pusher\": \"^1.5.1\"\n      }\n```\n\nNext create a `server.js` file in the project directory. First we require the Node modules we installed:\n\n``` javascript    \n    var express = require(\"express\")\n    var pusher = require(\"pusher\")\n    var bodyParser = require(\"body-parser\")\n```    \n\nNext we configure Express:\n\n```    \n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n```    \n\nLets now create the Pusher object by passing the configuration object with the id, key, and the secret for the app created in the [Pusher Dashboard](https://dashboard.pusher.com/):\n\n\n``` javascript    \n    var pusher = new Pusher({    \n        appId: \"pusher_app_id\",\n        key: \"pusher_app_key\",\n        secret: \"pusher_app_secret\",\n        cluster: \"pusher_app_cluster\"\n      });\n```      \n\nAs we described earlier, we’ll use Pusher to publish events that happen in our application. These events have an `eventChannel`, which allows them to relate to a particular topic, an `eventName` that is used to identify the type of the event, and a `*payload*`, which you can attach any additional information to and send back to the client.\n\nIn our case, we’ll publish an event to a Pusher channel (“feed”) when the endpoint of our API is called. Then send the information as an attachment so we can show it in an activity feed on the client side.\n\nHere's  how we define our API's REST endpoint:\n\n\n``` javascript    \n    app.post('/location', (req, res,next)=\u003e{\n        \n        var longitude = req.body.longitude;\n        var latitude = req.body.latitude;\n        var username = req.body.username;\n      ...\n```      \n\nHere when we receive request parameters, we’ll extract the longitude, latitude and the username of the sender from the request and send back as response to the client like so:\n\n\n``` javascript      \n      ...  \n        pusher.trigger('feed', 'location', {longitude, latitude,username});\n        res.json({success: 200});\n      });\n```      \n\nNow when a user types in a username and clicks the share location button, the server returns the data like:\n\n``` json\n    {\n      \"longitude\" : \"longitude_value\"\n      \"latitude\" : \"latitude_value\"\n      \"username\" : \"username_value\"\n    }\n```\n\nFrom here, we then use the `adapter` to pass it to the `V``iewHolder` and lay it out on the screen.\nWhen you’re done, your `server.js` file should look like this:\n\n``` javascript\n    var pusher = require(\"pusher\")\n    var express = require(\"express\")\n    var Pusher = require(\"pusher\")\n    var bodyParser = require(\"body-parser\")\n    var pusher = new Pusher({\n        appId: \"app_id\",\n        key: \"app_key\",\n        secret: \"app_secrete\",\n        cluster: \"app_cluster\"\n      });\n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    app.post('/location', (req, res,next)=\u003e{\n        \n        var longitude = req.body.longitude;\n        var latitude = req.body.latitude;\n        var username = req.body.username;\n      \n        pusher.trigger('feed', 'location', {longitude, latitude,username});\n        res.json({success: 200});\n    });\n    app.listen(4040, function () {\n        console.log('Listening on 4040')\n      })\n```    \n    \n\nNow navigate to the terminal and cd into the  `server.js` file. Then run the server with:\n\n```\n    $ node server\n```\n\n## Run app\n\nOnce the server is live, go ahead and run the Android app.\nTo run the app, keep your system connected to the internet. Back in Android Studio, click the green play icon on the menu bar to run the application or select **Run** from the menu and click **Run ‘app’** from the dropdown. This action will launch your device modal for you to see all connected devices and emulators. If you’re using a physical device, simply select your device from the list of available devices shown and click **OK**.\n\nIf you’re running on an emulator, select your preferred emulator from the list of devices if you have one setup or follow these instructions to set up a new emulator:\n\nOn the devices modal, select **Create New Virtual Device.** This will launch a hardware selection modal where you will select any device of your choice for instance ( Nexus 5) and click **Next.** This will launch another modal where you will select the API level you will like to run on the device. Your can choose any of the available options for you or stick with the default and select API level 25. Click **Next** again to give your emulator a custom name and then click **Finish** to complete the setup. Now when you run the app again, you will see your emulator listed on the available devices modal. With your system still connected to the internet, select your preferred device and click **Ok**  to run.\n\n## Conclusion\n\nHopefully, this tutorial has shown you in an easy way, how to build an activity feed for Android apps with Pusher. As you continue to build stuff, Perhaps you’ll see for yourself that realtime updates are of great importance. When you do, Pusher has all you’ll need to get pushing. Project is available on [Github](https://github.com/christiannwamba/pusher-location-feeds) and the server side code also available [on this gist](https://gist.github.com/christiannwamba/75d23de8da1ae8feaf2bc13b528fd7f1).","metaTitle":"Build a location feed app for Android with Kotlin","metaDescription":"Build an Android app featuring a location feed provided by a Node.js server. Users are able to share their location and see where their friends are."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"yE8cSdkP9m8GGAU6u6uq4","type":"Entry","createdAt":"2018-05-16T07:59:52.975Z","updatedAt":"2018-05-16T07:59:52.975Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a geofencing web app using Next.js","url":"geofencing-nextjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/gladchinda/realtime-geofencing-react-demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}}],"reviewDate":"2018-05-15","description":"Learn to build a web app with Next.js and React featuring geofencing functionality. Track the location of nearby friends, with a Google Map updating in realtime.","prerequisite":"You will need Node and npm or Yarn installed on your machine.","content":"According to Wikipedia, a [geo-fence](https://en.wikipedia.org/wiki/Geo-fence) is a virtual perimeter for a real-world geographic area. A geo-fence could be dynamically generated—as in a radius around a point location, or a geo-fence can be a predefined set of boundaries (such as school zones or neighborhood boundaries).\n\nIt is quite obvious that geofencing can be very useful for several of real life location-specific applications. With the advent of GPS technology, it becomes very easy to get the position of objects in realtime. These days, almost every smartphone have built-in GPS sensors that can be used to estimate the position of the device using WiFi or Cellular data.\n\nAs web technologies advance, a couple of tools are made available to us that can enable us build location-aware applications. One of such tools is the [GeolocationAPI](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation) which is supported by most of the modern browsers.\n\nWith the GeolocationAPI, getting the current position of the device is as simple as running the following code snippet in a browser:\n\n``` javascript\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(function(position) {\n        console.log({ lat: position.coords.latitude, lng: position.coords.longitude });\n      });  \n    }\n```\n\nIf you are interested in realtime position updates of the device, you can run the following code snippet on the browser:\n\n``` javascript\n    if ('geolocation' in navigator) {\n      navigator.geolocation.watchPosition(function(position) {\n        console.log({ lat: position.coords.latitude, lng: position.coords.longitude });\n      });  \n    }\n```\n\nIn this tutorial, we’ll build a very simple application with realtime geofencing updates, to list nearby people within a circular region of 1km radius.\n\nIn order to make testing our app as simple as possible, we will not be using any geolocation API in this tutorial. To avoid having to send our friends and coworkers out into the city to test our app, we will have a list of 15 fake people and randomly set their positions. We will also update the positions of the people who are online using an interval that runs every 10 seconds.\n\nIn a real application, you would use the [GeolocationAPI](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation) available on the user’s browser to get the approximate position of the user. You can also use a geolocation service such as [Google’s Geolocation API](https://developers.google.com/maps/documentation/geolocation/) without relying on the GPS of the device.\n\nHere is a screenshot of what we will end up building in this tutorial.\n\n![nextjs-geofencing-demo](//images.ctfassets.net/1es3ne0caaid/2vD20XayMY4cQOQAyWIYyQ/7e40fd4debb4db6f9d7c83a54b9106f6/nextjs-geofencing-demo.png)\n\n## Prerequisites\n\nBefore you begin, ensure that you have Node and npm or Yarn installed on your machine. Here is a run-down of the core technologies we will be using.\n\n\n1. [**Next.js**](https://learnnextjs.com/) - A framework for building server-side rendered(SSR) React applications with ease. It handles most of the challenges that come with building SSR React apps.\n\n\n2. [**Pusher**](https://pusher.com/) - Pusher is a technology for building apps with varying realtime needs like push notifications and pub/sub messaging. It is the engine behind the realtime geofencing updates.\n\n\n3. [**GoogleMaps API**](https://developers.google.com/maps/documentation/) - GoogleMaps JavaScript API provides utilities that make it possible to add interactive and customizable maps to web apps. We will use the [react-google-maps](https://tomchentw.github.io/react-google-maps/) package to enable us to add GoogleMaps to our React application.\n\n\n4. [**React**](https://reactjs.org/) - A very popular JavaScript DOM rendering framework for building scalable web applications using a component-based architecture.\n\nA few other libraries will be used as we will see in a moment. Also ensure that you have [Node](https://nodejs.org/) installed on your machine.\n\n### Pusher application\n\nCreate a new application on your [Pusher Dashboard](https://dashboard.pusher.com/) to get your application credentials. The following credentials are required:\n\n\n- `APP_ID`\n- `APP_KEY`\n- `APP_SECRET`\n- `APP_CLUSTER`\n\n### GoogleMaps application\n\nTo use the Maps JavaScript API, you must register your app project on the Google API Console and get a Google API key which you can add to your app. Follow this [quick guide to register your Maps app](https://developers.google.com/maps/documentation/javascript/get-api-key) and get your API credentials.\n\n\n### Installing dependencies\n\nCreate a new directory for the application and run the following command to install the required dependencies for the app.\n\n``` \n    # Create a new directory\n    mkdir realtime-geofencing-app\n    \n    # cd into the new directory\n    cd realtime-geofencing-app\n    \n    # Initiate a new package and install app dependencies\n    npm init -y\n    \n    npm install react react-dom next pusher pusher-js react-google-maps\n    npm install express body-parser morgan cors dotenv axios uuid\n    npm install --save-dev cross-env npm-run-all\n```\n\n### Setting environment variables\n\nCreate a `.env` file in the root directory of your application and add your application credentials as follows. \n\n```\n    PUSHER_APP_ID=YOUR_APP_ID\n    PUSHER_APP_KEY=YOUR_APP_KEY\n    PUSHER_APP_SECRET=YOUR_APP_SECRET\n    PUSHER_APP_CLUSTER=YOUR_APP_CLUSTER\n    \n    # GOOGLE MAPS API CREDENTIALS\n    GMAPS_API_KEY=YOUR_GOOGLE_MAPS_API_KEY\n```\nEnsure that you use the same variable names as specified in the above snippet. We will refer to them at several points in our code.\n\nNext create a Next.js configuration file named `next.config.js` in the root directory of your application with the following content:\n\n``` javascript\n    /* next.config.js */\n    \n    const webpack = require('webpack');\n    require('dotenv').config();\n    \n    module.exports = {\n      webpack: config =\u003e {\n        const env = Object.keys(process.env).reduce((acc, curr) =\u003e {\n          acc[`process.env.${curr}`] = JSON.stringify(process.env[curr]);\n          return acc;\n        }, {});\n        \n        config.plugins.push(new webpack.DefinePlugin(env));\n        \n        return config;\n      }\n    };\n```\nSince `Next.js` uses [Webpack](https://webpack.js.org/) in the background for module loading and bundling, we are simply configuring `Webpack` to be able to provide the environment variables we have defined and make them available to our React components by accessing the `process.env` object.\n\n\n## Getting started\n\n### Setting up the server\n\nWe will go ahead to setup a simple server using Next.js to wrap an [Express](https://expressjs.com/) application server. We will also load the necessary middlewares for the Express server and then we will configure Pusher using the credentials we added to our environment variables.\n\nCreate a `server.js` file in the root directory of your application and add the following code snippet to setup the server:\n\n``` javascript\n    /* server.js */\n    \n    const cors = require('cors');\n    const uuid = require('uuid').v4;\n    const next = require('next');\n    const Pusher = require('pusher');\n    const logger = require('morgan');\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const dotenv = require('dotenv').config();\n    \n    const dev = process.env.NODE_ENV !== 'production';\n    const port = process.env.PORT || 3000;\n    \n    const app = next({ dev });\n    const handler = app.getRequestHandler();\n    \n    // Ensure that your pusher credentials are properly set in the .env file\n    // Using the specified variables\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true\n    });\n    \n    app.prepare()\n      .then(() =\u003e {\n      \n        const server = express();\n        \n        server.use(cors());\n        server.use(logger('dev'));\n        server.use(bodyParser.json());\n        server.use(bodyParser.urlencoded({ extended: true }));\n        \n        server.get('*', (req, res) =\u003e {\n          return handler(req, res);\n        });\n        \n        server.listen(port, err =\u003e {\n          if (err) throw err;\n          console.log(`\u003e Ready on http://localhost:${port}`);\n        });\n        \n      })\n      .catch(ex =\u003e {\n        console.error(ex.stack);\n        process.exit(1);\n      });\n```\n\n### Modify npm scripts\n\nFinally, we will modify the `\"scripts\"` section of the `package.json` file to look like the following snippet:\n\n``` json\n    /* package.json */\n    \n    \"scripts\": {\n      \"dev\": \"node server.js\",\n      \"build\": \"next build\",\n      \"prod:server\": \"cross-env NODE_ENV=production node server.js\",\n      \"start\": \"npm-run-all -s build prod:server\"\n    }\n```\n\nWe have gotten all we need to start building our app components. If you run the command `npm run dev` on your terminal now, it will start up the application server on port 3000 if it is available. However, nothing happens on the browser yet, because we have not built any index page component.\n\n\n## Building the server routes\n\nAs stated earlier for our app, we have a list of 15 people. We will randomly create a `person` object for each person containing the following:\n\n\n- `id` - UUID identifier for the person\n- `name` - the name of the person\n- `position` - a random `{ lat, lng }` position coordinate for the person\n- `online` - the online status of the person\n\nMake the following modifications to the `server.js` file.\n\n``` javascript\n    /* server.js */\n    \n    app.prepare()\n      .then(() =\u003e {\n      \n        // server.use() middlewares here ...\n    \n        const initializePeople = ({ lat, lng }) =\u003e {\n        \n          const randomInRange = num =\u003e (width = 0.01) =\u003e ((Math.random() * width * 2) + num - width);\n          \n          const randomLat = randomInRange(lat);\n          const randomLng = randomInRange(lng);\n          \n          const people = [ 'Stephanie', 'John', 'Steve', 'Anna', 'Margaret', 'Felix', 'Chris', 'Jamie', 'Rose', 'Bob', 'Vanessa', '9lad', 'Bridget', 'Sebastian', 'Richard' ];\n          \n          return people.map(name =\u003e ({\n            name,\n            id: uuid(),\n            position: { lat: randomLat(0.0075), lng: randomLng(0.02) },\n            online: false\n          }));\n          \n        };\n    \n        const referencePosition = { lat: 6.4311415, lng: 3.4625833 };\n        \n        let people = initializePeople(referencePosition);\n        \n        server.get('/people', (req, res, next) =\u003e {\n          res.json({ status: 'success', people });\n        });\n        \n        server.post('/transit/:id', (req, res, next) =\u003e {\n          const id = req.params.id;\n          const { lat, lng } = req.body;\n          \n          people.forEach((person, index) =\u003e {\n            if (person.id === id) {\n              people[index] = { ...person, position: { lat, lng } };\n              \n              pusher.trigger('map-geofencing', 'transit', {\n                person: people[index], people\n              });\n            }\n          });\n        });\n    \n        server.post('/:presence/:id', (req, res, next) =\u003e {\n          const id = req.params.id;\n          const presence = req.params.presence;\n          \n          if (['online', 'offline'].includes(presence)) {\n            people.forEach((person, index) =\u003e {\n              if (person.id === id) {\n                return people[index] = { ...person, online: presence === 'online' };\n              }\n            });\n          }\n        });\n    \n        // server.get('*') is here ...\n        \n      })\n      .catch(ex =\u003e {\n        console.error(ex.stack);\n        process.exit(1);\n      });\n```\nFirst, we create the `initializePeople()` function, which loops through the list of 15 people and creates a `person` object for each of them with random position coordinates based on a reference position. It then returns the collection of `person` objects.\n\nNext, we create the `people` collection on the server by calling `initializePeople()` with a reference position. We then go ahead to define the server routes.\n\nWe first define the `GET /people` route. Whenever a client makes a `GET` request to the `/people` endpoint, it gets the current `people` collection from the server in the returned response.\n\nOn the `POST /transit/:id` route, we are fetching the ID of the person from the `id` route parameter. We then fetch the person’s current position from `req.body` through the help of the `body-parser` middleware we added earlier.\n\nNext, we update the person’s position on the `people` collection. Then, we trigger a `transit` event on the `map-geofencing` Pusher channel, passing the updated `person` and `people` collection. **This is important for the realtime behavior of the app**.\n\nFinally, we define the `POST /:presence/:id` route which accepts two route parameters: `presence` and `id`. The `presence` parameter can be either `online` or `offline`. We simply set the online status of the person with the given `id` parameter to either `true` or `false` based on the value of `presence`.\n\n\n## Building the index page\n\n`Next.js` requires that you create the page components of your app in a `pages` directory. We will go ahead and create a `pages` directory in our app root directory and create a new `index.js` file inside it for the index page of our application.\n\nIt is considered a good practice to have a layout that can be reused across multiple pages. It gives you a form of boilerplate and saves you from unnecessary repetitions.\n\nBefore we add content to the index page, we will build a `Layout` component that can be used in our app pages as a boilerplate. Go ahead and create a `components` directory in your app root. Create a new `Layout.js` file inside the just created `components`  directory with the following content:\n\n``` javascript\n    /* components/Layout.js */\n    \n    import React, { Fragment } from 'react';\n    import Head from 'next/head';\n    \n    const Layout = props =\u003e (\n      \u003cFragment\u003e\n        \u003cHead\u003e\n          \u003cmeta charSet=\"utf-8\" /\u003e\n          \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" /\u003e\n          \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossOrigin=\"anonymous\" /\u003e\n          \u003ctitle\u003e{props.pageTitle || 'Realtime Geofencing'}\u003c/title\u003e\n        \u003c/Head\u003e\n        {props.children}\n      \u003c/Fragment\u003e\n    );\n    \n    export default Layout;\n```\n\nHere, we try not to do so much. We are simply using the `next/head` component to add meta information to the `\u003chead\u003e` of our pages. We have also added a link to the Bootstrap CDN file to add some default styling to our app. We are also setting the page title dynamically from props and rendering the page contents using `{props.children}`.\n\nNow let's go ahead and add content to the `pages/index.js` file we created earlier:\n\n``` javascript\n    /* pages/index.js */\n    \n    import React, { Component, Fragment } from 'react';\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    import Layout from '../components/Layout';\n    \n    class IndexPage extends Component {\n    \n      state = { id: null, people: [] }\n    \n      endConnection = () =\u003e {\n        this.pusher.disconnect();\n        axios.post(`/offline/${this.state.id}`);\n      }\n      \n      componentWillMount() {\n        this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n          cluster: process.env.PUSHER_APP_CLUSTER,\n          encrypted: true\n        });\n        \n        this.channel = this.pusher.subscribe('map-geofencing');\n      }\n      \n      componentDidMount() {\n        axios.get('/people').then(({ data }) =\u003e {\n          const { people = [] } = data;\n          this.setState({ people });\n        });\n        \n        window.onbeforeunload = this.endConnection;\n      }\n      \n      componentWillUnmount() {\n        this.endConnection();\n      }\n      \n    };\n    \n    export default () =\u003e \u003cIndexPage /\u003e\n```\nFirst, we initialize the state with two props namely:\n\n\n- `id` - UUID used to identify the current user. This is initialized with `null` and is updated when a persona is selected.\n\n\n- `people` - An array of people with their respective position coordinates. This is initialized with an empty array (`[]`). It will be populated after we fetch people from the server.\n\nNext, we create the `endConnection()` method which terminates the current Pusher connection and also sends an `/offline` request to the server for the current user. The `endConnection()` method is called before the component is unmounted or before the page is unloaded.\n\nOn the `componentWillMount()` lifecycle method, we set up a Pusher connection and a `channel` subscription to the `map-geofencing` channel.\n\nWhen the component is mounted as seen in the `componentDidMount()` lifecycle method, we fetch the people collection from the server by making a `GET` HTTP request using [axios](https://github.com/axios/axios) to the `/people` endpoint. We then update the state with the people collection gotten from the response.\n\nWe will go ahead and add the `render()` method to the `IndexPage` component. Make the following additions to the `IndexPage` component.\n\n``` javascript\n    /* pages/index.js */\n    \n    import ChoosePersona from '../components/ChoosePersona';\n    \n    class IndexPage extends Component {\n    \n      // previous methods here ...\n    \n      personaSelected = id =\u003e {\n        this.setState({ id });\n        axios.post(`/online/${id}`);\n      }\n      \n      render() {\n      \n        const { id, people } = this.state;\n        const person = people.find(person =\u003e person.id === id) || {};\n        const peopleOffline = people.filter(person =\u003e !person.online);\n        \n        return (\n          \u003cLayout pageTitle=\"Realtime Geofencing\"\u003e\n            \u003cmain className=\"container-fluid position-absolute h-100 bg-light\"\u003e\n              {\n                id ? \u003cdiv className=\"row position-absolute w-100 h-100\"\u003e\u003c/div\u003e\n                : \u003cChoosePersona count={5} people={peopleOffline} onSelected={this.personaSelected} /\u003e\n              }\n            \u003c/main\u003e\n          \u003c/Layout\u003e\n        );\n        \n      }\n      \n    };\n```\nFirst, we import the `ChoosePersona` component, which we will create in a moment. This component enables us to activate a selected user.\n\nIn the `render()` method, we conditionally render the `ChoosePersona` component when there is no active user. The `ChoosePersona` component will randomly display a maximum of 5 people who are offline, using the `count` and `people` props. Notice how we filter the `people` collection to fetch those who are offline.\n\nWe also added a `personaSelected()` method which is passed to the `ChoosePersona` component via the `onSelected` prop, and is triggered when a user persona has been chosen. The method sends an `/online` request to the server to activate the selected user.\n\n\n## Choosing a persona\n\nNow we will go ahead and create the `ChoosePersona` component we saw in the last section. Create a new `ChoosePersona.js` file inside the `components` directory and add the following content:\n\n``` javascript\n    /* components/ChoosePersona.js */\n    \n    import React from 'react';\n    \n    const ChoosePersona = props =\u003e {\n    \n      const { people = [], count = 3, onSelected = f =\u003e f } = props;\n      \n      const nameBadgeStyles = {\n        fontSize: '0.8rem',\n        height: 40,\n        borderRadius: 20,\n        cursor: 'pointer'\n      };\n      \n      const choosePersona = id =\u003e evt =\u003e onSelected(id);\n      \n      const randomPeople = count =\u003e people =\u003e {\n      \n        const selected = [];\n        let i = 0;\n        \n        count = Math.max(0, Math.min(count, people.length));\n        \n        while (i \u003c count) {\n          const index = Math.floor(Math.random() * people.length);\n          if (selected.includes(index)) continue;\n          ++i \u0026\u0026 selected.push(index);\n        }\n        \n        return selected.map(index =\u003e {\n          const { id, name } = people[index];\n          const className = 'd-flex align-items-center text-center text-white bg-secondary font-weight-bold py-2 px-4 mx-1 my-2';\n          \n          return \u003cspan key={index} className={className} style={nameBadgeStyles} title={name} onClick={ choosePersona(id) }\u003e{name}\u003c/span\u003e\n        });\n        \n      };\n      \n      return (\n        \u003cdiv className=\"w-100 h-100 px-3 pb-5 d-flex flex-wrap align-items-center align-content-center justify-content-center\"\u003e\n          \u003cspan className=\"h3 text-dark text-center py-3 w-100 font-weight-bold\"\u003eChoose your Persona\u003c/span\u003e\n          { randomPeople(count)(people) }\n        \u003c/div\u003e\n      );\n    };\n    \n    export default ChoosePersona;\n```\n\nThe `randomPeople()` function takes a `count` as its only argument - which is the number of random personas to pick from the `people` collection prop. It then uses `.map()` to create an array of `\u003cspan\u003e` elements for each randomly picked persona and returns the array.\n\nNotice the `onClick` event handler for each `\u003cspan\u003e`. The `choosePersona(person)` function is used as the handler. It simply invokes the function passed to the `onSelected` prop with the `id` of the selected persona as argument.\n\nFinally, we render some random personas based on the `count` and `people` props passed to the `ChoosePersona` component.\n\nIf you test the app now in your browser, with `npm run dev`, you should see the following screen. Ensure that you hit `Ctrl+C` (Windows) or `Cmd+C` (Mac) on your command terminal before running `npm run dev` to restart the server.\n\n![nextjs-geofencing-choose-persona](//images.ctfassets.net/1es3ne0caaid/2NfbcBktMsUSCYQuQIYUKC/8012651152eec8d79e4faaa99fffbbdd/nextjs-geofencing-choose-persona.png)\n\n## Building the map components\n\nWe will go ahead and build the map components. As stated earlier in this tutorial, we will be using the [react-google-maps](https://tomchentw.github.io/react-google-maps) package for easy integration of the GoogleMaps API with our application.\n\n### The map component\n\nWe will start with building the `Map` component. This a wrapper component for the map. Create a new `Map.js` file inside the `components` directory and add the following content:\n\n``` javascript\n    /* components/Map.js */\n    \n    import React, { Fragment, Component } from 'react';\n    import MapContainer from './MapContainer';\n    \n    const API_KEY = process.env.GMAPS_API_KEY;\n    const MAP_URL = `https://maps.googleapis.com/maps/api/js?key=${API_KEY}\u0026v=3.exp\u0026libraries=geometry`;\n    \n    class Map extends Component {\n    \n      render() {\n        const containerStyles = {\n          height: '100%',\n          width: '100%',\n          position: 'relative'\n        };\n        \n        return \u003cMapContainer\n          googleMapURL={MAP_URL}\n          loadingElement={\u003cdiv style={containerStyles} /\u003e}\n          containerElement={\u003cdiv style={containerStyles} /\u003e}\n          mapElement={\u003cdiv style={containerStyles} /\u003e}\n          {...this.props}\n        /\u003e\n      }\n      \n    };\n    \n    export default Map;\n```\nHere we form the `MAP_URL` using the `API_KEY` of the GoogleMaps app we created earlier for our application. We also render the `MapContainer` passing in the `MAP_URL`. The `MapContainer` component contains the map and other visual elements such as markers and shape regions.\n\nNotice, how we pass the `props` received from the `Map` component to the `MapContainer`. We will go ahead and create the `MapContainer` component.\n\n### The map container\n\nCreate a new `MapContainer.js` file inside the `components` directory and add the following content:\n\n``` javascript\n    /* components/MapContainer.js */\n    \n    import axios from 'axios';\n    import React, { Fragment, Component } from 'react';\n    import { withGoogleMap, withScriptjs, GoogleMap } from 'react-google-maps';\n    \n    import UserMarker from './UserMarker';\n    import PersonMarker from './PersonMarker';\n    \n    class MapContainer extends Component {\n    \n      withinRegion = (position, radius) =\u003e {\n        const to = new google.maps.LatLng(position.lat, position.lng);\n        const distance = google.maps.geometry.spherical.computeDistanceBetween;\n        return point =\u003e {\n          const from = new google.maps.LatLng(point.lat, point.lng);\n          return distance(from, to) \u003c= radius;\n        }\n      }\n      \n      render() {\n        const { person: { id, position }, radius, people, channel } = this.props;\n        \n        return (\n          \u003cGoogleMap ref={elem =\u003e this.map = elem} zoom={15} center={position}\u003e\n            \u003cFragment\u003e\n              { people.map((person, index) =\u003e {\n              \n                const props = { key: index, radius, person, channel };\n                const withinRegion = point =\u003e (position, radius) =\u003e this.withinRegion(position, radius)(point);\n                \n                return (person.id === id)\n                  ? \u003cUserMarker {...props} /\u003e\n                  : \u003cPersonMarker user={this.props.person} withinRegion={withinRegion} {...props} /\u003e\n                  \n              }) }\n            \u003c/Fragment\u003e\n          \u003c/GoogleMap\u003e\n        );\n      }\n      \n    };\n    \n    export default withScriptjs(withGoogleMap(MapContainer));\n```\n\nFirst, we create the `withinRegion()` method that enables us determine if a point is within a defined circular region. It takes the center and radius of the region as its arguments, and returns a function. The returned function takes a point as argument and returns if the point is in the region.\n\nIn the `render()` method, we render the `GoogleMap` component passing the `position` of the current user as the `center` prop. We loop through the `people` collection received by the `MapComponent` and render different types of makers based on the person.\n\nNotice that we create a `ref` to the `GoogleMap` component and store it in the `this.map` property. This `ref` will give us access to the underlying `google.maps.Map` instance, which we will need later to update the map properties.\n\nWe render the `UserMarker` for the currently active user and the `PersonMarker` for other people. We also pass the `radius`, `person` and `channel` props to the marker components. The `channel` prop contains a reference to the current Pusher channel subscription.\n\nFor the `PersonMarker` component, we pass in the currently active user to the `user` prop. We also pass in an inverted version of the `withinRegion()` method to the `withinRegion` prop.\n\nFinally, we export the higher-order component  `withScriptjs(withGoogleMap(MapContainer))`. See the [react-google-maps documentation](https://tomchentw.github.io/react-google-maps/#usage--configuration) to learn more. We will go ahead and create the `UserMarker` and `PersonMarker` components.\n\n### The user marker\n\nCreate a new `UserMarker.js` file inside the `components` directory and add the following content:\n\n``` javascript\n    /* components/UserMarker.js */\n    \n    import React, { Fragment, Component } from 'react';\n    import { Marker, Circle } from 'react-google-maps';\n    \n    class UserMarker extends Component {\n    \n      constructor(props) {\n        super(props);\n        const { person: { id = null, position = null }, channel = null } = this.props;\n        \n        this.id = id;\n        this.channel = channel;\n        this.state = { position };\n      }\n      \n      componentDidMount() {\n        this.channel \u0026\u0026 this.channel.bind('transit', ({ person = {} }) =\u003e {\n          const { id, position } = person;\n          (id === this.id) \u0026\u0026 this.setState({ position });\n        });\n      }\n      \n      render() {\n      \n        const { radius } = this.props;\n        const { position } = this.state;\n        const regionOptions = { fillOpacity: 0.1, strokeWidth: 1, strokeOpacity: 0.2 };\n        \n        const MARKER_SIZE = new google.maps.Size(50, 70);\n        const MARKER_ICON = 'https://i.imgur.com/Rhv5xQh.png';\n        \n        return \u003cFragment\u003e\n          \u003cMarker position={position} title=\"You\" options={{ icon: { url: MARKER_ICON, scaledSize: MARKER_SIZE } }} /\u003e\n          \u003cCircle center={position} radius={radius} options={regionOptions} /\u003e\n        \u003c/Fragment\u003e\n        \n      }\n    };\n    \n    export default UserMarker;\n```\nThe `UserMarker` component stores the position of the current active user in the `position` property of the component’s state.\n\nWhen the component mounts, we bind to the `transit` event on the Pusher channel, and update the state with the new `position` of the user. We only update the state when the current user’s position changes.\n\nIn the `render()` method, we render a red marker icon for the currently active user by setting the `MARKER_ICON` constant as the marker icon URL. We also render a `Circle` region using the user’s current position as `center` and the `radius` received as prop.\n\n### The person marker\n\nCreate a new `PersonMarker.js` file inside the `components` directory and add the following content:\n\n``` javascript\n    /* components/PersonMarker.js */\n    \n    import React, { Component } from 'react';\n    import { Marker } from 'react-google-maps';\n    \n    const BLACK_MARKER = 'https://i.imgur.com/8dOrls4.png?2';\n    const GREEN_MARKER = 'https://i.imgur.com/9v6uW8U.png';\n    \n    class PersonMarker extends Component {\n    \n      constructor(props) {\n        super(props);\n        \n        const {\n          user: { id: userID, position: userPosition },\n          person: { id = null, position = null },\n          channel = null\n        } = this.props;\n        \n        this.id = id;\n        this.userID = userID;\n        this.channel = channel;\n        \n        this.state = { position, userPosition };\n      }\n      \n      componentDidMount() {\n        this.channel \u0026\u0026 this.channel.bind('transit', ({ person = {} }) =\u003e {\n          const { id, position } = person;\n          (id === this.id) \u0026\u0026 this.setState({ position });\n          (id === this.userID) \u0026\u0026 this.setState({ userPosition: position });\n        });\n      }\n      \n      render() {\n        const { position, userPosition } = this.state;\n        const { person: { name }, radius, withinRegion = f =\u003e f } = this.props;\n        \n        const within = !!(withinRegion(position)(userPosition, radius));\n        \n        const MARKER_SIZE = new google.maps.Size(25, 35);\n        const MARKER_ICON = within ? GREEN_MARKER : BLACK_MARKER;\n        \n        return \u003cMarker position={position} title={name} options={{ icon: { url: MARKER_ICON, scaledSize: MARKER_SIZE } }} /\u003e\n      }\n      \n    };\n    \n    export default PersonMarker;\n```\n\nThe `PersonMarker` component stores the position of the person in the `position` property of the component’s state and the position of the current active user in the `userPosition` property of the state.\n\nWhen the component mounts, we bind to the `transit` event on the Pusher channel, and update the state with the new position of the person or currently active user. We update the state’s `position` when the person’s position changes, and the `userPosition`  when the currently active user’s position changes.\n\nIn the `render()` method, we use the `withinRegion()` method received as prop to check if the person is within the defined circular region of the currently active user. We then conditionally render a green marker icon if the person is within the region, otherwise, we render a black icon. \n\n\n## Displaying nearby friends\n\nNow, we will create a component for displaying a list of nearby people/friends. We will display a green marker icon for people within the current user’s region and a black icon for other people.\n\nCreate a new `NearbyFriends.js` file inside the `components` directory and add the following content:\n\n``` javascript\n    /* components/NearbyFriends.js */\n    \n    import React, { Component, Fragment } from 'react';\n    \n    const BLACK_MARKER = 'https://i.imgur.com/8dOrls4.png?2';\n    const GREEN_MARKER = 'https://i.imgur.com/9v6uW8U.png';\n    \n    class NearbyFriends extends Component {\n    \n      state = { people: [] }\n      \n      updatePeople = people =\u003e this.setState({ people })\n      \n      render() {\n        const { people } = this.state;\n        const { person: { name, id } } = this.props;\n        \n        const nameBadgeStyles = {\n          fontSize: '0.8rem',\n          height: 40,\n          borderRadius: 20,\n          cursor: 'pointer'\n        };\n        \n        const showPeople = (filterFn, marker) =\u003e {\n          return \u003cFragment\u003e\n            { people.filter(filterFn).map((person, index) =\u003e {\n            \n              if (person.id === id) return null;\n              \n              return (\n                \u003cdiv key={index} className=\"d-flex border-bottom border-gray w-100 px-4 py-3 font-weight-bold text-secondary align-items-center\"\u003e\n                \n                  \u003cdiv className=\"pl-2\" style={{ width: 30, height: 30 }}\u003e\n                    \u003cimg src={marker} className=\"img-fluid\" alt=\"marker\" /\u003e\n                  \u003c/div\u003e\n                  \n                  \u003cspan className=\"pl-3\"\u003e{person.name}\u003c/span\u003e\n                  \n                \u003c/div\u003e\n              );\n              \n            }) }\n          \u003c/Fragment\u003e\n        };\n        \n        return id \u0026\u0026 \u003cFragment\u003e\n        \n          \u003cdiv className=\"border-bottom border-gray w-100 px-2 d-flex align-items-center bg-white justify-content-between\" style={{ height: 90 }}\u003e\n            \u003cspan className=\"h4 text-dark mb-0 mx-4 font-weight-bold\"\u003eNearby Friends\u003c/span\u003e\n            \u003cspan className=\"d-flex align-items-center text-center text-white bg-primary font-weight-bold py-2 px-4 mx-4\" style={nameBadgeStyles} title={name}\u003e{name}\u003c/span\u003e\n          \u003c/div\u003e\n          \n          \u003cdiv className=\"w-100 d-flex flex-wrap align-items-start align-content-start position-relative\" style={{ height: 'calc(100% - 90px)', overflowY: 'auto' }}\u003e\n            { showPeople(person =\u003e person.within, GREEN_MARKER) }\n            { showPeople(person =\u003e !person.within, BLACK_MARKER) }\n          \u003c/div\u003e\n          \n        \u003c/Fragment\u003e\n      }\n    };\n    \n    export default NearbyFriends;\n```\n\nWe initialize the state with a `people` property set to an empty array(`[]`). We then expose the `updatePeople()` method which will make it possible for us to update the `people` property of the component’s state.\n\nIn the `render()` method, we define the `showPeople()` method which will filter the `people` collection based on a `filterFn` and renders the filtered list of people using the given `marker`. Notice in the `showPeople()` function that we skip rendering the currently active user in the list.\n\nFinally, we render the two lists of people. First, we render the list of the people within the user’s region with a green marker. Then, we render the list of the rest people with a black marker.\n\n\n## Keeping track of nearby friends\n\nNow that we have our rendered list of nearby friends, we need to be able to update the list as the position of either the user or some other person changes.\n\nCurrently, our map markers are sensitive to position changes but our list is not. However, the list has an `updatePeople()` method that can enable us to update the people in the list based on position changes.\n\nWe will go ahead and create a bridge between the map and the list from the parent `IndexPage` component.\n\n### Completing the index page\n\nMake the following additions to the `pages/index.js` file:\n\n``` javascript\n    /* pages/index.js */\n    \n    import Map from '../components/Map';\n    import NearbyFriends from '../components/NearbyFriends';\n    \n    class IndexPage extends Component {\n    \n      regionFiltered = people =\u003e this.nearby.updatePeople(people)\n      \n      render() {\n        const { id, people } = this.state;\n        const person = people.find(person =\u003e person.id === id) || {};\n        const peopleOffline = people.filter(person =\u003e !person.online);\n        \n        return (\n          \u003cLayout pageTitle=\"Realtime Geofencing\"\u003e\n            \u003cmain className=\"container-fluid position-absolute h-100 bg-light\"\u003e\n              {\n                id ? \u003cdiv className=\"row position-absolute w-100 h-100\"\u003e\n                \n                  \u003csection className=\"col-md-9 px-0 border-right border-gray position-relative h-100\"\u003e\n                    \u003cMap person={person} radius={1000} people={people} channel={this.channel} onRegionFiltered={this.regionFiltered} /\u003e\n                  \u003c/section\u003e\n                  \n                  \u003csection className=\"col-md-3 position-relative d-flex flex-wrap h-100 align-items-start align-content-between bg-white px-0\"\u003e\n                    \u003cNearbyFriends ref={elem =\u003e this.nearby = elem} person={person} /\u003e\n                  \u003c/section\u003e\n                  \n                \u003c/div\u003e\n                : \u003cChoosePersona count={5} people={peopleOffline} onSelected={this.personaSelected} /\u003e\n              }\n            \u003c/main\u003e\n          \u003c/Layout\u003e\n        );\n      }\n      \n    }\n```\n\nHere, we update the `render()` method to render the `Map` and `NearbyFriends` components. You can see that we create a `ref` to the `NearbyFriends` component, storing it in the `this.nearby` component property.\n\nWe also add the `regionFiltered()` bridge method. This method receives a `people` collection as argument. It then calls the `updatePeople()` method on the `ref` created for the `NearbyFriends` component. This makes it possible for us to update the list as we so required.\n\nTo complete the bridge, we pass the `regionFiltered()` method to the `Map` component via the `onRegionFiltered` prop. We will go ahead and update the `MapContainer` component to handle position changes.\n\n### Updating the map container\n\nMake the following additions to the `components/MapContainer.js` file:\n\n``` javascript\n    /* components/MapContainer.js */\n    \n    class MapContainer extends Component {\n    \n      analyzeRegion = (position, radius) =\u003e people =\u003e {\n        const { onRegionFiltered = f =\u003e f } = this.props;\n        const withinRegion = this.withinRegion(position, radius);\n        \n        const mappedPeople = people.map(person =\u003e {\n          const { position } = person || {};\n          const within = withinRegion(position);\n          return { ...person, within };\n        });\n        \n        onRegionFiltered(mappedPeople);\n      }\n      \n      componentDidMount() {\n      \n        const { person: { id, position }, radius, people = [], channel = null } = this.props;\n        const mapContext = this.map.context['__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED'];\n        const setMapCenter = mapContext.setCenter.bind(mapContext);\n        \n        let { lat, lng } = position;\n        \n        channel \u0026\u0026 channel.bind('transit', ({ person = {}, people }) =\u003e {\n          const { id: $id, position: $position } = person;\n          const isUser = id === $id;\n          const center = isUser ? $position : position;\n          \n          isUser \u0026\u0026 setMapCenter(center);\n          this.analyzeRegion(center, radius)(people);\n        });\n        \n        this.positionUpdate = setInterval(() =\u003e {\n          lat = lat + Math.random() * 0.001;\n          lng = lng + Math.random() * 0.001;\n          \n          axios.post(`/transit/${id}`, { lat, lng });\n        }, 10000);\n        \n        this.analyzeRegion(position, radius)(people);\n        \n      }\n      \n      componentWillUnmount() {\n        clearInterval(this.positionUpdate);\n      }\n      \n    };\n```\n\nFirst, we add an `analyzeRegion()` method that uses the `withinRegion()` method defined earlier to modify the `people` collection based on the current user’s position, setting the `within` property for each person in the collection. It then calls the `onRegionFiltered()` method received as prop to the component, which in turns updates the `people` collection on the list as we stated earlier.\n\nWe then add the `componentDidMount()` lifecycle method. When the component mounts, we get the `setMapCenter` method from the underlying `google.maps.Map` instance which we will need to update the center of the map.\n\nWe then bind to the `transit` event on the Pusher channel, and update the center of the map to the new position of the currently active user. We also call the `analyzeRegion()` method to update the people on the `NearbyFriends` list.\n\nNext, we create an interval that randomly changes the user’s position every 10 seconds and triggers a realtime position update of the user by making a server request to the `/transit/:id` endpoint.\n\nFinally, we clear the interval when the component is unmounted.\n\n**Bravo**. If you made it to this point, then you have successfully built a realtime location-aware application app with geofencing updates using Next.js and Pusher.\n\nTest the app now in your browser, with `npm run dev`. Choose a persona and see how the position of the user along with the circular geofence updates in realtime. Your screen should look like the following screenshot.\n\nEnsure that you hit `Ctrl+C` (Windows) or `Cmd+C` (Mac) on your command terminal before running `npm run dev` to restart the server.\n\n![nextjs-geofencing-demo](//images.ctfassets.net/1es3ne0caaid/2vD20XayMY4cQOQAyWIYyQ/7e40fd4debb4db6f9d7c83a54b9106f6/nextjs-geofencing-demo.png)\n\n## Conclusion\n\nIn this tutorial, we have been able to build a very simple realtime application with geofencing updates using [Next.js](https://learnnextjs.com/), [React](https://reactjs.org/), [GoogleMaps API](https://developers.google.com/maps/documentation/) and [Pusher](https://pusher.com/). You can check the source code of this tutorial on [GitHub](https://github.com/gladchinda/realtime-geofencing-react-demo).\n\nDo check the documentation for each technology we used in this project to learn more about other ways of using them. I duly hope that this tutorial is of help to you.","metaTitle":"Build a geofencing web app using Next.js","metaDescription":"This tutorial will show you how to build a web app featuring geofencing. Track the location of nearby friends using Google Maps. Built with Next.js and React."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1Xdb7IlcGsuYMMsIWCKI04","type":"Entry","createdAt":"2018-05-16T08:00:50.038Z","updatedAt":"2018-05-16T08:00:50.038Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a geofencing web app using Angular ","url":"geofencing-angular","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/angular-geolocation","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-05-15","description":"Learn to build a web app with Angular and Node featuring geofencing functionality. Track whether guests are within your hotel limits or not.","prerequisite":"You will need Node and npm installed on your machine.","content":"A **geo-fence** is a virtual perimeter for a real-world geographic area. Geofencing is the use of GPS or RFID technology to create a virtual geographic boundary, enabling software to trigger a response when a mobile device enters or leaves a particular area. \n\nTo follow this tutorial a basic understanding of Angular and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nIf you have no prior knowledge of Angular, kindly follow the tutorial [here](https://angular.io/tutorial). Come back and finish the tutorial when you’re done.\n\nWe’ll be using these tools to build our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Angular](https://angular.io)\n- [Google Maps](https://cloud.google.com/maps-platform/)\n\nWe’ll be creating an application for a fictional ranch called “The Ranch”. Our application will allow “The Ranch” employees track the location of each active guest in realtime. The application will alert employees when an active guest is exiting the boundaries of the ranch.\n\nHere’s a screenshot of the final product:\n\n![angular-geofencing-demo](//images.ctfassets.net/1es3ne0caaid/6aLhQwx15KaGiqYKIsk626/a74ee3ef8d3a4dd507e7adaf6a204091/angular-geofencing-demo.png)\n\n## Initializing the application and installing dependencies\n\nTo get started, we will use the [CLI](https://cli.angular.io/) (command line interface) provided by the Angular team to initialize our project.\n\nFirst, install the CLI by running `npm install -g @angular/cli`. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/en/) installed.\n\nTo create a new Angular project using the CLI, open a terminal and run:  \n`ng new pusher-geofencing --style=scss` `--``routing`\n\nThis command is used to initialize a new Angular project with routing setup; the project will make use of SCSS for styling.\n\nNext run the following command in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher\n    \n    // front-end dependencies\n    npm install pusher-js\n```\n\nStart the Angular development server by running `ng serve` in a terminal in the root folder of your project.\n\n## Building our server\n\nWe’ll build our server using [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/).\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: 'eu',\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\nThe calls to our endpoint will be coming in from a different origin. Therefore, we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nThis is a standard Node application configuration, nothing specific to our app.\n\nCreate a Pusher account and a new Pusher Channels app if you haven’t done so yet and get your `appId`, `key` and `secret`. \n\nCreate a file in the root folder of the project and name it `.env`. Copy the following snippet into the `.env` file and ensure to replace the placeholder values with your Pusher credentials.\n\n```\n    // .env\n    \n    // Replace the placeholder values with your actual pusher credentials\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_KEY=PUSHER_KEY\n    PUSHER_SECRET=PUSHER_SECRET\n```\n\nWe’ll make use of the `dotenv` library to load the variables contained in the `.env` file into the Node environment. The `dotenv` library should be initialized as early as possible in the application.\n\n### Send votes\n\nLet’s create a post route `ping` , the frontend of the application will send make a request to this route containing the current location of the user. This will be done whenever there’s a location change.\n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      ...\n    });\n    \n    \n    app.post('/ping', (req, res) =\u003e {\n      const { lat, lng } = req.body;\n      const data = {\n        lat,\n        lng,\n      };\n      pusher.trigger('location', 'ping', data);\n      res.json(data);\n    });\n    \n     ...\n```\n\n- Using [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment), we got the `lat` and `lng` from the body of the request.\n- The `data` object contains the coordinates sent in. This object will be sent as the data for the triggered Pusher event. The same object will be sent as a response to the user.\n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`location`), an event name (`ping`), and a payload.\n\n\n## Home view\n\nRun `ng generate component home` to create the home component. This component will be the view users see when they visit. It will request permission to get the user’s current location.  \n\nOpen the `home.component.html` file and replace it with the content below.\n\n``` html\n    // home.component.html\n    \n    \u003capp-header [username]=\"username\"\u003e\u003c/app-header\u003e\n    \u003cdiv class=\"content\"\u003e\n      \u003ch2\u003eWelcome to \"The Ranch\"\u003c/h2\u003e\n      \u003cimg src=\"/assets/placeholder.svg\" alt=\"\"\u003e\n      \u003ch6\u003eEnable location to get updates\u003c/h6\u003e\n    \u003c/div\u003e\n```    \n\n\n\u003e **Note:** all assets used in the article are available in the [GitHub repo](https://github.com/christiannwamba/angular-geolocation) \n\nThe view itself is static. There won’t be a lot happening in this particular view except the request to get the user’s current location. We referenced a `header` component in the markup. The component was created because the same header will be reused in the admin page. We’ll create the component shortly.\n\n### Styling\n\nCopy the following styles into the `home.component.scss` file.\n\n``` scss\n    // home.component.scss\n    \n    .content {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      padding: 30px 0;\n      img {\n        height: 100px;\n      }\n      h6 {\n        margin:15px 0;\n        opacity: 0.6;\n      }\n    }\n```    \n\n### Home component\n\nHere, we’ll define methods to get the user’s location and sending the location to the server.\n\n``` typescript\n    // home.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n    @Component({\n      selector: 'app-home',\n      templateUrl: './home.component.html',\n      styleUrls: ['./home.component.scss'],\n    })\n    export class HomeComponent implements OnInit {\n      constructor(private http: HttpClient) {}\n      username = 'J. User'\n      pingServer(location) {\n        this.http\n          .post('http://localhost:4000/ping', location)\n          .subscribe((res) =\u003e {});\n      }\n      ngOnInit() {\n        if ('geolocation' in navigator) {\n          navigator.geolocation.watchPosition((position) =\u003e {\n            this.pingServer({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            });\n          });\n        }\n      }\n    }\n```    \n    \n\n\n- `pingServer`: this method makes use of the native HttpClient service to make requests to our server. It takes a `location`  parameter and sends it as the body of the request.\n- In the `OnInit` lifecycle, we check if the current browser supports the [geolocation](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation) API; we watch for location changes and send the  \n\nTo make use of the HttpClient service, we’ll need to import the `HttpClientModule` into the `app.module.ts` file. Update your app module file as follows:\n\n``` typescript\n    // app.module.ts\n    ...\n    import { AppRoutingModule } from './app-routing.module';\n    import { AppComponent } from './app.component';\n    import { HomeComponent } from './home/home.component';\n    import { HttpClientModule } from '@angular/common/http';\n    \n    @NgModule({\n      ...\n      imports: [\n        BrowserModule,\n        AppRoutingModule,\n        HttpClientModule\n      ],\n      ...\n    })\n    export class AppModule { }\n    \n      ...\n```\n\nLet’s create the header component by running `ng generate component header` in a terminal in the root folder of the project.\n\nReplace the contents of the `header.component.html` with the following:\n\n``` html\n    \u003c!-- header.component.html --\u003e\n    \n    \u003cheader\u003e\n      \u003cdiv class=\"brand\"\u003e\n        \u003ch5\u003eThe Ranch\u003c/h5\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"nav\"\u003e\n        \u003cul\u003e\n          \u003cli\u003e\n            \u003cimg src=\"/assets/boy.svg\" alt=\"avatar\"\u003e\n            \u003cspan\u003e{{username}}\u003c/span\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/div\u003e\n    \u003c/header\u003e\n```\n\n\u003e **Note:** all assets used in this article are available in the [repo](https://github.com/christiannwamba/angular-geolocation)\n\nUpdate the `home.component.scss` file with the following styles:\n\n``` scss\n    // header.component.scss\n    \n    header {\n      display: flex;\n      background: mediumseagreen;\n      margin: 0;\n      padding: 5px 40px;\n      color: whitesmoke;\n      box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1);\n      .brand {\n        flex: 1;\n        display: flex;\n        align-items: center;\n        h5 {\n          font-family: 'Lobster', cursive;\n          font-size: 20px;\n          margin: 0;\n          letter-spacing: 1px;\n        }\n      }\n      ul {\n        list-style: none;\n        padding-left: 0;\n        display: flex;\n        li {\n          display: flex;\n          align-items: center;\n          img {\n            height: 40px;\n            border-radius: 50%;\n          }\n          span {\n            margin-left: 8px;\n            font-size: 15px;\n            font-weight: 500;\n          }\n        }\n      }\n    }\n```    \n\nThe `header.component.ts` file should be updated to look like the snippet below:\n\n``` typescript\n    // header.component.ts\n    \n    import { Component, OnInit, Input } from '@angular/core';\n    @Component({\n      selector: 'app-header',\n      templateUrl: './header.component.html',\n      styleUrls: ['./header.component.scss'],\n    })\n    export class HeaderComponent implements OnInit {\n      constructor() {}\n      @Input() username = '';\n      ngOnInit() {}\n    }\n```    \n\nWe’ll be using external fonts in our application. Include a link to the stylesheet in the `index.html`  file.\n\n``` html\n    // index.html\n    \n    \u003chead\u003e\n      ...\n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003clink href=\"https://fonts.googleapis.com/css?family=Dosis:400,500,700|Lobster\" rel=\"stylesheet\"\u003e\n      ...\n    \u003c/head\u003e\n    ...\n```      \n\nUpdate the `styles.scss` file to use the external fonts throughout the project.\n\n``` scss\n    // styles.scss\n    \n    body{\n      margin: 0;\n      font-family: 'Dosis', sans-serif;\n    }\n```    \n\n\n## Introducing Pusher\n\nTo make the pusher library available in our project, add the library as a third party script to be loaded by Angular CLI. All CLI config is stored in `.angular-cli.json` file. Modify the `scripts` property to include the link to `pusher.min.js`.\n\n``` json\n    // .angular-cli.json\n    ...\n    \"scripts\": [\n      \"../node_modules/pusher-js/dist/web/pusher.min.js\",\n    ]\n     ...\n```          \n\nAfter updating this file, you’ll need to restart the angular server so the CLI compiles the new script file added.\n\nCreate a Pusher service using the Angular CLI by running the following command:\n\n```\n    ng generate service pusher\n```\nThis command simply tells the CLI to generate a service named `pusher`. Now open the `pusher.service.ts` file and update it with the code below.\n\n``` typescript\n    // pusher.service.ts\n    import { Injectable } from '@angular/core';\n    declare const Pusher: any;\n    @Injectable()\n    export class PusherService {\n      constructor() {\n        const pusher = new Pusher('PUSHER_KEY', {\n          cluster: 'eu',\n        });\n        this.channel = pusher.subscribe('location');\n      }\n      channel;\n      public init() {\n        return this.channel;\n      }\n    }\n```\n\n- First, we initialize Pusher in the constructor. \n- The  `init` method returns the Pusher property we created. \n\n\n\u003e **Note**: ensure you replace the `PUSHER_KEY` string with your actual Pusher key.\n  \n\nTo make the service available application wide, import it into the `app.module.ts` file.\n\n``` typescript\n    // app.module.ts\n    ...\n    import { HttpClientModule } from '@angular/common/http';\n    import {PusherService} from './pusher.service';\n    \n    @NgModule({\n       ....\n       providers: [PusherService],\n       ....\n     })\n    \n    ...\n```\n \n\n## Admin page\n\nTo monitor and track users using our application, we’ll need an admin page accessible to privileged employees. The page will use Google Maps to visualize the location of the user.  Using Pusher, changes in the user’s location will be seen in realtime.\n\nWe’ll be using [angular-google-maps](https://github.com/SebastianM/angular-google-maps), which has a set of reusable Angular components for Google Maps. Install the package by running `npm install @agm/core`.\n[](https://github.com/SebastianM/angular-google-maps)\nTo use the components in our project, we’ll need to include the angular-google-maps’ module in the `app.module.ts` file.\n\n``` typescript\n    //app.module.ts\n    ...\n    import {PusherService} from './pusher.service';\n    import { AgmCoreModule } from '@agm/core';\n    \n    @NgModule({\n      ...\n      imports: [\n        BrowserModule,\n        AppRoutingModule,\n        HttpClientModule,\n        AgmCoreModule.forRoot({\n          // please get your own API key here: https://developers.google.com/maps/documentation/javascript/get-api-key?hl=en\n          apiKey: 'GOOGLE_API_KEY',\n          libraries: ['geometry']\n        }),\n      ...\n    })\n    export class AppModule { }\n```    \n\n\n\u003e **Note:** ensure to replace the placeholder value with your google API key\n\nNow we’ll create the admin component using the CLI by running the following command:\n\n```\n    ng generate component admin\n```\nOpen the `admin.component.html` file and update it with the contents below:\n\n``` html\n    // admin.component.html\n    \n    \u003capp-header [username]=\"username\"\u003e\u003c/app-header\u003e\n    \u003cdiv class=\"main\"\u003e\n      \u003ch3\u003eAdmin\u003c/h3\u003e\n      \u003cagm-map [latitude]=\"center.lat\" [longitude]=\"center.lng\" [zoom]=\"zoom\"\u003e\n        \u003cagm-marker [latitude]=\"center.lat\" [longitude]=\"center.lng\"\u003e\u003c/agm-marker\u003e\n      \u003c/agm-map\u003e\n      \u003ch4\u003eLocation Alerts\u003c/h4\u003e\n      \u003cdiv class=\"alert\" [hidden]=\"!showAlert\"\u003e\n        \u003cp\u003eThis user has left the ranch\u003c/p\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"location alert\" [hidden]=\"!showLocationUpdate\"\u003e\n        \u003cp\u003e{{message}}\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\nStyle up the component by adding the following styles to the `admin.component.scss` file:\n\n``` scss\n    // admin.component.scss\n    \n    .main {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      margin: auto;\n      h3 {\n        font-size: 15px;\n        font-weight: bold;\n        text-transform: uppercase;\n        margin-bottom: 15px;\n      }\n      .alert {\n        background: #f14343;\n        color: white;\n        padding: 15px;\n        border-radius: 5px;\n        p{\n          margin: 0;\n        }\n      }\n      .location{\n        background: green;\n        margin-top: 20px;\n      }\n    }\n    agm-map {\n      height: 400px;\n      width: 600px;\n    }\n```    \n\nAdd the following content to the `admin``.component.ts` file:\n\n``` typescript\n    // admin.component.ts\n    import { Component, OnInit } from '@angular/core';\n    import { MapsAPILoader } from '@agm/core';\n    import { PusherService } from '../pusher.service';\n    declare const google;\n    @Component({\n      selector: 'app-admin',\n      templateUrl: './admin.component.html',\n      styleUrls: ['./admin.component.scss'],\n    })\n    export class AdminComponent implements OnInit {\n      constructor(private loader: MapsAPILoader, private pusher: PusherService) {}\n      theRanchPolygon;\n      username = 'J. Admin';\n      message = '';\n      showAlert = false;\n      showLocationUpdate = false;\n      zoom = 15;\n      // Center of the ranch, where the initial marker will be placed\n      center = {\n        lat: 6.435838,\n        lng: 3.451384,\n      };\n      // This array of latLngs represents the polygon around our ranch\n      polygon = [\n        { lat: 6.436914, lng: 3.451432 },\n        { lat: 6.436019, lng: 3.450917 },\n        { lat: 6.436584, lng: 3.450917 },\n        { lat: 6.435006, lng: 3.450928 },\n        { lat: 6.434953, lng: 3.451808 },\n        { lat: 6.435251, lng: 3.451765 },\n        { lat: 6.435262, lng: 3.451969 },\n        { lat: 6.435518, lng: 3.451958 },\n      ];\n      \n      ngOnInit() {\n        // Wait for the google maps script to be loaded before using the \"google\" keyword\n        this.loader.load().then(() =\u003e {\n          this.theRanchPolygon = new google.maps.Polygon({ paths: this.polygon });\n        });\n        const channel = this.pusher.init();\n        channel.bind('ping', (position) =\u003e {\n          this.center = {\n            ...position,\n          };\n          // Create a LatLng using the position returned from the pusher event\n          const latLng = new google.maps.LatLng(position);\n          this.showLocationUpdate = true;\n          this.message = \"The user's location has changed\";\n          // Check if the location is outside the polygon\n          if (!google.maps.geometry.poly.containsLocation(latLng, this.theRanchPolygon)) {\n            // Show alert if user has left the polygon\n            this.showAlert = true;\n          }else{\n            this.message = 'The user is currently in the ranch';\n          }\n        });\n      }\n    }\n```    \n\n\n- `polygon`:  this is an array of latLngs that represent the polygon around our ranch\n- `MapsApiLoader`: this is a service that provides a method to check if the Google maps script has been loaded.\n\nIn the `OnInit` lifecycle we do a few things:\n\n- We wait for the Google maps script to load; in the promise returned, we create a polygon using the array of LatLng objects.\n- We initialized Pusher and listened for the `ping` event. In the bind callback, we set the `center` property to the position sent through the event.\n- Create a LatLng using the position returned from the event. \n- Finally, we checked if the position is outside the polygon and then we display an alert if it is.\n\nNow that both pages have been created, let’s set up routes for each page. Open the `app-routing.module.ts` file and add routes to the `routes` array.\n\n``` typescript\n    // app-routing.module.ts\n    ...\n    import { HomeComponent } from './home/home.component';\n    import { AdminComponent } from './admin/admin.component';\n    \n    const routes: Routes = [\n      {\n        path: 'admin',\n        component: AdminComponent,\n      },\n      {\n        path: '',\n        component: HomeComponent,\n      },\n    ];\n    \n    ...\n```\n\nNow update the `app.component.html` file to contain just the `route-outlet`\n\n``` html\n    // app.component.html\n    \n    \u003crouter-outlet\u003e\u003c/router-outlet\u003e\n```\n\n At this point, your application should have realtime updates when there’s a location change. The admin user’s should we alerted if the user’s current location is outside “The Ranch” premises.\n \n Navigate to http://localhost:4000 to view the home page and http://localhost:4000/admin to view the admin page.\n \n The home page:\n\n![angular-geofencing-homepage](//images.ctfassets.net/1es3ne0caaid/1ZXKMIgJ3eWYAqieqQEg8E/4aa8ce557a153412ab7b0dc8e8f4c205/angular-geofencing-homepage.png)\n\nThe different states of the admin page:\n  \n![angular-geofencing-outside](//images.ctfassets.net/1es3ne0caaid/6ckCDoBsbKOayQ6C2mIqyk/c8e48fc10d5cc0b7b6598a9a74c3de65/angular-geofencing-outside.png)\n\n![angular-geofencing-inside](//images.ctfassets.net/1es3ne0caaid/67NKKJYD8AeOcEWGigo2ea/847fe6625d1c9a90aa60bbf83571236b/angular-geofencing-inside.png) \n\nTo test the realtime functionality of the application, open two browsers side-by-side and engage the application. Location updates should be in realtime.\n\n## Conclusion\n\nUsing Pusher,  we’ve built out an application using the pub/sub pattern to receive realtime updates. Using geofences, we’ll be able to tell when an active guest is leaving “The Ranch”. You can check out the repo containing the demo on [GitHub](https://github.com/christiannwamba/angular-geolocation).","metaTitle":"Build a geofencing web app using Angular ","metaDescription":"This tutorial will show you how to build a web app featuring geofencing. Track the location of hotel guests using Google Maps. Built with Angular and Node."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4TxXBicdnGA008syUI4wSq","type":"Entry","createdAt":"2018-05-14T09:51:24.155Z","updatedAt":"2020-06-15T15:58:06.934Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime app with Adonis","url":"adonis-realtime","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/adonis-event-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-05-11","description":"This tutorial will explore Adonis. You will build an app that pushes realtime messages to all connected clients using Pusher.","prerequisite":"You will need Node and npm installed on your machine. Some knowledge of JavaScript will be helpful.","content":"[Adonis](http://adonisjs.com) is a full stack, open source MVC framework for Node.js. The framework is inspired by the PHP framework [Laravel](https://laravel.com/). As at the time of this tutorial, it has over 2.8k stars on [GitHub](https://github.com/adonisjs/adonis-framework).\n\n**Adonis** focuses on the developers productivity and efficiency over anything else. It also comes with a lot of features including the following:\n- Lucid ORM\n- Database Migrations\n- Authentication System\n- OAuth\n- Mailing System\n- Data Validator\n\nAdonis has very detailed [documentation](http://dev.adonisjs.com/docs/4.0/installation) and a supportive community of users who are engaging on [Twitter](https://twitter.com/adonisframework).\n \nIn this tutorial we are going to see some of the interesting features of Adonis by building an app that pushes realtime messages to all connected clients using [Pusher](https://www.pusher.com).\n\n## Demo\n\nHere is what the final result of the app would look like:\n\n![build-realtime-app-adonis-pusher-demo](//images.ctfassets.net/1es3ne0caaid/3MguWGSbXiG6yCsYSc2uq8/4576da251a6cb08fa35a5edd17b67c13/build-realtime-app-adonis-pusher-demo.gif)\n\n## Prerequisites\n\nTo get started, you need knowledge of Node.js and JavaScript. The following must be installed on your machine:\n\n- [Node.js](https://nodejs.org)\n- NPM(Bundled with Node.js installer)\n\nNode.js is an open-source, cross-platform JavaScript run-time environment for executing JavaScript on a server.\n\n## Set up an Adonis project\n\nOpen your terminal and type this command to install Adonis CLI and create a new adonis app:\n\n```\n    # if you don't have Adonis CLI installed on your machine. \n    $ npm install -g @adonisjs/cli\n    \n    # Create a new adonis app and move into the app directory\n    $ adonis new adonis-event-pusher \u0026\u0026 cd adonis-event-pusher\n```\n\nStart the server and test if it's working:\n\n```\n    $ adonis serve --dev\n    2017-10-18T09:09:16.649Z - info: serving app on http://127.0.0.1:3333\n```\n\nOpen your browser and make a request to http://127.0.0.1:3333. You should see the following: \n\n![build-realtime-app-adonis-pusher-first-run](//images.ctfassets.net/1es3ne0caaid/2I5wjBfoVGA6uASUgcSmYo/d6643a390eb760e9f9443e6b4dd5e4dd/build-realtime-app-adonis-pusher-first-run.png)\n\n### Install the Pusher SDK\n\nFor Adonis to work with Pusher, we need to install `pusher` with npm or yarn into our project. To do so, run:\n\n```\n    #if you want to use npm\n    $ npm install pusher -save\n    \n    #if you want to use yarn\n    $ yarn add pusher\n```\n\n### Update the welcome view\n\nGo to the `resources/views` directory and replace the content of `welcome.edge` file with:\n\n``` html\n// welcome.edge\n\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\" /\u003e\n        \u003ctitle\u003eAdonis \u0026 Pusher\u003c/title\u003e\n        \u003c!-- Styles --\u003e\n        {{ css('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css') }}\n        {{ css('https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta/css/bootstrap.min.css') }}\n        {{ css('style') }}\n      \u003c/head\u003e\n      \u003cbody id=\"app-layout\"\u003e\n        \u003cnav class=\"navbar navbar-expand-md navbar-dark fixed-top\"\u003e\n          \u003ca class=\"navbar-brand\" href=\"{{ route('welcomePage') }}\"\u003e\u003ci class=\"fa fa-cube\"\u003e\u003c/i\u003e Adonis \u0026 Pusher\u003c/a\u003e\n          \u003cbutton class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"\u003e\n          \u003cspan class=\"navbar-toggler-icon\"\u003e\u003c/span\u003e\n          \u003c/button\u003e\n        \u003c/nav\u003e\n        \u003cdiv class=\"container\" style=\"margin-top: 160px\"\u003e\n          \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-2\"\u003e\u003c/div\u003e\n            \u003cdiv class=\"col-md-8\"\u003e\n              \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-header\"\u003eBroadcast a Message\u003c/div\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                  \u003cdiv class=\"container\"\u003e\n                    \u003cdiv class=\"row justify-content-md-center\"\u003e\n                      \u003cdiv class=\"col col-md-10\"\u003e\n                        @if(old('status'))\n                        \u003cdiv class=\"alert alert-success\" role=\"alert\"\u003e\n                          \u003cbutton type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"\u003e\n                          \u003cspan aria-hidden=\"true\"\u003e×\u003c/span\u003e\n                          \u003c/button\u003e\n                          {{ old('status') }}\n                        \u003c/div\u003e\n                        @endif\n                        \u003cform method=\"POST\" action=\"{{ route('sendMessage') }}\"\u003e\n                          {{ csrfField() }}\n                          \u003cdiv class=\"form-group row\"\u003e\n                            \u003clabel class=\"col-md-3 col-form-label\" for=\"email\"\u003e\n                            Message\n                            \u003c/label\u003e\n                            \u003cdiv class=\"col-md-9\"\u003e\n                              \u003cinput type=\"text\" name=\"message\" placeholder=\"Send Messege\"\n                                autocomplete=\"off\"\n                                class=\"form-control\" required\u003e\n                            \u003c/div\u003e\n                          \u003c/div\u003e\n                          \u003cdiv class=\"form-group row\"\u003e\n                            \u003cdiv class=\"col-md-3\"\u003e\u003c/div\u003e\n                            \u003cdiv class=\"col-md-6\"\u003e\n                              \u003cbutton type=\"submit\" class=\"btn btn-primary btn-block\"\u003e\n                              \u003ci class=\"fa fa-btn fa-paper-plane\"\u003e\u003c/i\u003e Send Message\n                              \u003c/button\u003e\n                            \u003c/div\u003e\n                          \u003c/div\u003e\n                        \u003c/form\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        {{ script('https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.slim.min.js') }}\n        {{ script('https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta/js/bootstrap.min.js') }}\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\nAs you can see, we are importing the CSS files using the `css` method. We do a similar thing with JavaScript, we use `script` method to import `.js`. Flash messages are used to display incoming messages from the server. Flash messages are messages stored temporarily in sessions by the server to display as browser notifications.\n\nRefresh your browser: \n\n![build-realtime-app-adonis-pusher-2](//images.ctfassets.net/1es3ne0caaid/3SlWV1aHF64MCC08cs0keA/c0819cad55157455415ffa519dc00b43/build-realtime-app-adonis-pusher-2.png)\n\n\n## Basic routes\n\nWe are going to define 3 basic routes for our application. One for displaying the form which you will use to collect the user message, another to render a sample frontend view and the last for broadcasting a messages via Event.\n\nGo to the `start/routes.js` file and replace the content with: \n\n``` javascript\n// routes.js\n\n    'use strict'\n    \n    const Route = use('Route')\n    const Event = use('Event')\n    \n    \n    Route.on('/').render('welcome')\n    \n    Route.on('/home').render('home')\n    \n    Route.post('/send', async ({request, session, response}) =\u003e {\n        const message = request.input('message')\n        \n        Event.fire('send.message', message)\n        \n        session.flash({ status: 'Message sent' })\n        return response.redirect('back')\n    \n    }).as('sendMessage')\n```\n\nThe block pulls in `Event` and `Route` service providers. \n\nThe first route renders the `welcome.edge` file in the `resources/views` directory (which is where views are stored in Adonis). \n\nThe second route renders the `home.edge` file (which we will create soon) and the last route accepts a message from browser requests, fires an event and redirects the user back with a flash message.\n\n## Pusher setup\n\nPusher is a hosted service that makes it super-easy to add realtime data and functionality to web and mobile applications. Pusher is an abstracted real-time layer between clients and servers.\n\nLet's setup pusher for our application. Head over to [Pusher](https://www.pusher.com) and create an account. You can sign in if you already have a account.\n\nRegister a new Pusher app instance. This registration provides credentials which can be used to communicate with the created Pusher instance. Copy the App ID, Key, Secret, and Cluster from the App Keys section and put them in the `.``env` file:\n\n```\n// .env\n\n    PUSHER_KEY=\u003cAPP_KEY\u003e\n    PUSHER_SECRET=\u003cAPP_SECRET\u003e\n    PUSHER_APP_ID=\u003cAPP_ID\u003e\n    PUSHER_CLUSTER=\u003cAPP_CLUSTER\u003e\n```\n\n### Connecting Adonis and Pusher\n\nCreate a file named `events.js` file inside the `start` directory. In this file, create an event which will be fired every time we need to send a message via the pusher channel:\n\n``` javascript\n// events.js\n\n    const Event = use('Event')\n    const Pusher = require('pusher')\n    const Env = use('Env')\n    \n    let pusher = new Pusher({\n            appId: Env.get('PUSHER_APP_ID', ''),\n            key: Env.get('PUSHER_KEY', ''),\n            secret: Env.get('PUSHER_SECRET', ''),\n            cluster: Env.get('PUSHER_CLUSTER'),\n            encrypted: true\n    });\n    \n    Event.when('send.message', async (message) =\u003e {\n            pusher.trigger('adonis-channel', 'send-message', {\n                    message\n            });\n    })\n```\n\nWe need to pull in the `Event` and `env` service providers. We are also importing the `pusher` module. Next, we create a Pusher instance and configured with the credentials that were received after creating a Pusher account.\n\nNext, we registered a listener for the `send.message` event, after which we initialize and configure Pusher. This event was registered in the routes we created above to handle the message request.\n\nWhen we are done with the pusher configuration, we trigger a `send-message` event on the `adonis-channel` with the `trigger` method.\n\n### Subscribing to Pusher events\nThe client needs to start listening to these events being emitted by Pusher. To do so, setup an Adonis view that displays incoming messages. Go to the `resources/views` directory and create a file called `home.edge` which would look like the following:\n\n``` html\n// home.edge\n\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n            \u003ctitle\u003eAdonis and Pusher awesomeness\u003c/title\u003e\n            {{ css('https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css') }}\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"content\"\u003e\n                    \u003ch1\u003eAdonis and Pusher\u003c/h1\u003e\n                    \u003cul id=\"messages\" class=\"list-group\"\u003e\n                    \u003c/ul\u003e\n            \u003c/div\u003e\n    \u003c/div\u003e\n    {{ script('https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.min.js') }}\n    \u003c!-- Include the Pusher Client library --\u003e\n    {{ script('https://js.pusher.com/4.1/pusher.min.js') }}\n    \u003cscript\u003e\n            //Open a connection to Pusher\n            let pusher = new Pusher('APP_KEY', {\n              cluster: 'APP_CLUSTER',\n              encrypted: true\n            });\n    \n            //Subscribe to the channel we specified in our Adonis Application\n            let channel = pusher.subscribe('adonis-channel')\n    \n            //Listen for events on the channel\n            channel.bind('send-message', (data) =\u003e {\n              let listItem = $(\"\u003cli class='list-group-item'\u003e\" + data.message + \"\u003c/li\u003e\")\n              $('#messages').prepend(listItem)\n            })\n    \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nFirst, we include jQuery and the [Pusher JavaScript client](https://github.com/pusher/pusher-js)  library which will enable us subscribe to Pusher events from the server. \n\nNext, we initialize the Pusher service by passing in our App Key (replace with your actual keys), and some other options (cluster, encrypted). The initialized instance is used to subscribe to the `adonis-channel` channel. \n\nFinally, we listen to the `send-message` event and update the view using jQuery, based on the content received via the event listener.\n\nNavigate to http://127.0.0.1:3333/home to see the new view:\n\n![build-realtime-app-adonis-pusher-3](//images.ctfassets.net/1es3ne0caaid/5fOgM94U3YgE06wcMcaOOi/4f53582286b94edfb6cf06038c997921/build-realtime-app-adonis-pusher-3.png)\n\n## Conclusion\n\nIn summary, Pusher makes it easy to add realtime capabilities to your Adonis app. Install the SDK, import it, create an instance and start triggering realtime events. Whatever language domain (JS, Android, iOS, etc) it still uses the same subscription pattern to listen to realtime events in order to update a user interface. This is why it fits right into the Adonis framework, which is picking up momentum in the Node ecosystem. You can find the source code for this tutorial [on GitHub](https://github.com/christiannwamba/adonis-event-pusher).","metaTitle":"Build a realtime app with Adonis","metaDescription":"In this tutorial discover interesting features of Adonis by building an app that pushes realtime messages to all connected clients using Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1zpEddTbRC2AQEoAyCqGie","type":"Entry","createdAt":"2018-05-14T09:36:28.189Z","updatedAt":"2018-05-14T09:36:28.189Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Emoji suggestions in an Angular chat application using sentiment analysis","url":"angular-chat-sentiment-analysis","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/angular-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-05-09","description":"Build a chat app in Angular. The app features emoji suggestions (as suggested responses) based on the users' moods. The mood is evaluated using the sentiment analysis library.","prerequisite":"You should have Node and npm installed on your machine. A basic understanding of Angular and Node is required.","content":"## Introduction\n\nSentiment analysis is the process of computationally identifying and categorizing opinions expressed in a piece of text, especially to determine whether the writer's attitude towards a particular topic, product, etc. is positive, negative, or neutral. Using sentiment analysis, we can suggest emojis to be used as replies to messages based on the context of the received message. \n\nUsing [Angular](https://angular.io), you can extend the template language with your components and use a wide array of existing components, and with [Pusher](https://pusher.com) we can enable realtime messaging in the chat using pusher’s pub/sub pattern. \n\nWe’ll be building a realtime chat application using Pusher, Angular and the [sentiment](https://github.com/thisandagain/sentiment) library for emoji suggestions based on the context of messages received.\n\nUsing our application users can get emoji suggestions as replies to received messages while engaging in a chat with a third party\n\nHere’s a demo of the final product:\n\n![emoji-suggestions-angular-demo](//images.ctfassets.net/1es3ne0caaid/331wY6ohiMCQqOcGacagG4/3e191b7b6fc94acbfa2a59bafd519263/emoji-suggestions-angular-demo.gif)\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of Angular and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nWe’ll be using these tools to build out our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Angular](https://angular.io)\n- [Sentiment](https://github.com/thisandagain/sentiment)\n\nWe’ll be sending messages to the server and using [Pusher’s](https://pusher.com) pub/sub pattern, we’ll listen to and receive messages in realtime. To make use of Pusher you’ll have to create an account [here](https://pusher.com). \n\nAfter account creation, visit the dashboard. Click **Create new Channels app**, fill out the details, click **Create my app**, and make a note of the details on the **App Keys** tab.\n\n\nLet’s build!\n\n## Setup and folder structure\n\nUsing the Angular [CLI](https://cli.angular.io/) (command line interface) provided by the Angular team, we’ll initialize our project. To initialize the project, first, install the CLI by running `npm install @angular/cli` in your terminal. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/) installed.\n\nTo create a new Angular project using the CLI, open a terminal and run:   \n```\n    ng new angular-pusher-chat --style=scss\n```\nThe command is simply telling the CLI to create a new project called `angular-pusher-chat` and it should make use of the CSS pre-processor SCSS rather than CSS for styling.\n\nOpen the newly created folder `angular-pusher-chat`, and your folder structure should look something like this:\n\n```\n    angular-pusher-chat/\n      e2e/\n      node_modules/\n      src/\n        app/\n          app.component.html\n          app.component.ts\n          app.component.css\n          ...\n```\nOpen a terminal inside the project folder and start the application by running `ng serve` or `npm start`. If you open your browser and visit the link `http://localhost:4200` you should see the screenshot below if everything went well.\n\n![tables-angular-welcome-screen](//images.ctfassets.net/1es3ne0caaid/7Cw6E4WHFmaOogyKkK0MA/a660fc968171c614fd566c33c5e00d7d/tables-angular-welcome-screen.png)\n\n##  Building our server\n\nNow that we have our Angular application running, let’s build out a basic part of our server.\n\nTo do this we’ll need to install [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/). We’ll use this to receive requests from our Angular application.\n\nTo install express, run `npm install express` in a terminal in the root folder of your project.\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```\n\nWe referenced three packages that haven’t been installed, `body-parser`, `pusher` and `dotenv`. Install these packages by running the following command in your terminal.\n\n```\n    npm i body-parser pusher dotenv\n```\n\n-  body-parser is a package used to parse incoming request bodies in a middleware before your handlers, available under the `req.body` property.\n- dotenv is a zero-dependency module that loads environment variables from a `.env` file into [process.env](https://nodejs.org/docs/latest/api/process.html#process_process_env). This package is used so sensitive information like the `appId` and `secret` aren’t added to our codebase directly. \n- The dotenv package will load the variables provided in our `.env` file into our environment.\n- CORS: The calls to our endpoint will be coming in from a different origin, therefore we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nIf you noticed, I added the `dotenv` package at the start of our file. This is because we need to load the variables as early as possible to make them available throughout the application.\n\nAlso, you’ll notice that we installed [Pusher](https://pusher.com) library as a dependency. Follow the steps above to create a Pusher account if you haven’t done so already\n\nLet’s create a `.env` file to load the variables we’ll be needing into the Node environment. Create the file in the root folder of your project and update it with the code below.\n\n```\n    // .env\n    \n    PUSHER_APP_ID=\u003cAPP_ID\u003e\n    PUSHER_KEY=\u003cPUSHER_KEY\u003e\n    PUSHER_SECRET=\u003cPUSHER_SECRET\u003e\n```\nPlease ensure you replace the placeholder values above with your Pusher `appId`, `key` and `secret`.\n\n\nThis is a standard Node application configuration, nothing specific to our app.\n\n### Sending messages\n\nTo enable users send and receive messages, we’ll create a route to handle incoming requests. Update your `server.js`  file with the code below.\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: 'eu',\n      encrypted: true,\n    });\n    \n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.post('/messages', (req, res) =\u003e {\n      const { body } = req;\n      const { text, id } = body;\n      const data = {\n        text,\n        id,\n        timeStamp: new Date(),\n      };\n      \n      pusher.trigger('chat', 'message', data);\n      res.json(data);\n    });\n     ...\n```\n\n- We created a `POST /messages` route which, when hit, triggers a Pusher event.\n- We used [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to get the body of the request, we also got the `text` and `id` in the request body sent by the user.\n- The `data` object contains the `text` and `id` sent by the user. We’ll also added a timestamp to the it. \n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`chat`), an event name (`message`), and a payload(`data`).\n- The payload can be any value, but in this case, we have a JS object. \n- We still go ahead to respond with an object containing the `data` variable we created. \n\n\n### Sentiment analysis\n\n\n\u003e Sentiment analysis refers to the use of [natural language processing](https://en.wikipedia.org/wiki/Natural_language_processing), [text analysis](https://en.wikipedia.org/wiki/Text_analytics), [computational linguistics](https://en.wikipedia.org/wiki/Computational_linguistics), and [biometrics](https://en.wikipedia.org/wiki/Biometrics) to systematically identify, extract, quantify, and study effective states and subjective information. - [Wikipedia](https://en.wikipedia.org/wiki/Sentiment_analysis)\n\nYou can read up a bit about sentiment analysis using the following links below:\n\n\n- [Brandwatch](https://www.brandwatch.com/blog/understanding-sentiment-analysis/)\n- [TowardsDataScience](https://towardsdatascience.com/sentiment-analysis-concept-analysis-and-applications-6c94d6f58c17)\n\nUsing sentiment analysis, we’ll analyse the messages sent to determine the attitude of the sender. With the data gotten from the analysis, we’ll determine the emojis to suggest to the user. \n\nWe’ll use the [Sentiment](https://github.com/thisandagain/sentiment) JavaScript library for analysis. To install this library, open a terminal in the root folder of your project and run the following command. \n\n\n    npm install sentiment\n\nWe’ll update our `POST /messages` route to include analysis of the messages being sent in. Update your `server.js` with the code below.\n\n\n    // server.js\n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const Sentiment = require('sentiment');\n    const sentiment = new Sentiment();\n    \n    ...\n    \n    app.post('/messages', (req, res) =\u003e {\n      const { body } = req;\n      const { text, id } = body;\n      const result = sentiment.analyze(text);\n      const comparative = result.comparative;\n      const tone =\n        comparative \u003e= 0 ? (comparative \u003e= 1 ? 'positive' : 'neutral') : 'negative';\n      const data = {\n        text,\n        id,\n        timeStamp: new Date(),\n        sentiment: {\n          tone,\n          score: result.score,\n        },\n      };\n      pusher.trigger('chat', 'message', data);\n      res.json(data);\n    });\n    \n    ...\n    \n\n\n- Include the sentiment library in the project\n- `result`: here, we analyze the message sent in by the user to determine the context of the message.\n- `comparative`: this is the comparative score gotten after analyzing the message. This score is used to determine if a message is `positive`, `negative` or `neutral`.\n- `tone`: the `tone` variable is the context of the message gotten after analysis. This will be `negative` if the comparative score is below `0`, `neutral` if the score is above `0` but below `1`. The tone is `positive` if the comparative score is `1` and above.\n- A new object(`sentiment`) property is added to the response data containing the message’s tone and score.\n\nYou can now start the server by running `node server.js` in the terminal in the root folder of the project.\n\n\n## Chat view\n\nLet’s begin to build out our chat interface. We’ll create a `chat` component to hold the chat interface. We’ll create this using the CLI. Run `ng generate component chat` in a terminal in the root folder of your project. \n\nUpdate the recently created files as follows: \n\n``` html\n    // chat.component.html\n    \n    \u003cdiv class=\"main\"\u003e\n      \u003cdiv class=\"chat-box\"\u003e\n        \u003cdiv class=\"message-area\"\u003e\n          \u003cdiv class=\"message\" \n          *ngFor=\"let message of messages\" \n          [ngClass]=\"getClasses(message.type)\"\u003e\n            \u003cp\u003e{{message.text}}\u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"input-area\"\u003e\n          \u003cform (submit)=\"sendMessage()\" name=\"messageForm\" #messageForm=\"ngForm\"\u003e\n            \u003cinput type=\"text\" name=\"message\" id=\"message\" [(ngModel)]=\"message\"\u003e\n            \u003cbutton\u003e\n              \u003cspan data-feather=\"send\"\u003e\u003c/span\u003e \n            \u003c/button\u003e\n          \u003c/form\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\n\nIn the code snippet above:\n\n- We loop through the available `messages` in the `.message-area`. \n- We have a form containing an input element and a submit button.\n- We using an icon-set called [feather-icons](https://feathericons.com) in our project. To include feather-icons in your project, simply add the cdn link in your `index.html` file.\n\n``` html\n    // index.html\n    ...\n    \u003cscript src=\"https://unpkg.com/feather-icons/dist/feather.min.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    ...\n```\n\nOpen the `chat.component.ts` file and update with the code below:\n\n``` typescript\n    // chat.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n    import { v4 } from 'uuid';\n    \n    declare const feather: any;\n    interface Message {\n      id: string;\n      text: string;\n      timeStamp: Date;\n      type: string;\n    }\n    \n    @Component({\n      selector: 'app-chat',\n      templateUrl: './chat.component.html',\n      styleUrls: ['./chat.component.scss'],\n    })\n    \n    export class ChatComponent implements OnInit {\n      constructor(private http: HttpClient) {}\n      \n      messages: Array\u003cMessage\u003e = [];\n      message: string = '';\n      lastMessageId;\n      \n      sendMessage() {\n        if (this.message !== '') {\n          // Assign an id to each outgoing message. It aids in the process of differentiat .     ing between outgoing and incoming messages\n          this.lastMessageId = v4();\n          const data = {\n            id: this.lastMessageId,\n            text: this.message,\n          };\n          \n          this.http\n            .post(`http://localhost:4000/messages`, data)\n            .subscribe((res: Message) =\u003e {\n              const message = {\n                ...res,\n                // The message type is added to distinguish between incoming and outgoing             messages. It also aids with styling of each message type\n                type: 'outgoing',\n              };\n              this.messages = this.messages.concat(message);\n              this.message = '';\n            });\n            \n        }\n      }\n      \n      // This method adds classes to the element based on the message type\n      getClasses(messageType) {\n        return {\n          incoming: messageType === 'incoming',\n          outgoing: messageType === 'outgoing',\n        };\n      }\n      \n      ngOnInit() {\n        // Initialize feather icons\n        feather.replace();\n      }\n    }\n```\n\n\n`sendMessage`: this method uses the native `HttpClient` to make requests to the server. The `POST` method takes a URL and the request `body` as parameters. We then append the data returned to the array of messages. We make use of a package called [uuid](https://www.npmjs.com/package/uuid) to give each message a unique `id`. \n\nRun `npm install uuid` in a terminal inside your project’s root folder to install this package.\n\n`getClasses` : this method generates classes for a message element based on the `messageType`\nIn the `ngOnInit` lifecycle, we initialize `[feather](https://feathericons.com)`, our chosen icon set. \n\nTo make use of the `HttpClient` service, we’ll need to import the `HttpClientModule` into the `app.module.ts` file. Also to make use of form-related directives, we’ll need to import the `FormsModule`. So update your app module file as follows:\n\n``` typescript\n    // app.module.ts\n    ...\n    import { ChatComponent } from './chat/chat-component';\n    import {HttpClientModule} from '@angular/common/http';\n    import {FormsModule} from \"@angular/forms\";\n    \n    ...\n    @NgModule({\n      declarations: [AppComponent, ChatComponent],\n      imports: [BrowserModule, HttpClientModule, FormsModule],\n      providers: [],\n      bootstrap: [AppComponent],\n    })\n      ...\n```\n\n### Styling\n\nOpen the `chat.component.scss` file and update it with the styles below: \n\n``` scss\n    // chat.component.scss\n    \n    .main {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      min-height: 90vh;\n      .chat-box {\n        width: 300px;\n        max-height: 500px;\n        height: 500px;\n        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.12), 0 2px 4px 0 rgba(0, 0, 0, 0.08);\n        border-radius: 3% 3% 0 0;\n        position: relative;\n        padding-bottom: 40px;\n        .message-area {\n          max-height: 450px;\n          height: 450px;\n          overflow: auto;\n          padding: 20px 20px;\n          .message {\n            p {\n              color: white;\n              font-size: 13px;\n              font-weight: bold;\n              margin: 0px;\n              width: 45%;\n              box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1);\n              padding: 7px 10px;\n              margin: 5px 0;\n            }\n          }\n          .message.incoming {\n            display: flex;\n            flex-direction: column;\n            justify-content: flex-start;\n            align-items: flex-start;\n            p {\n              border-radius: 0 11px 11px 11px;\n              background: goldenrod;\n            }\n          }\n          .message.outgoing {\n            display: flex;\n            flex-direction: column;\n            justify-content: flex-end;\n            align-items: flex-end;\n            p {\n              border-radius: 11px 11px 0 11px;\n              background: darkgrey;\n            }\n          }\n        }\n      }\n    }\n```\n\nThis first SCSS snippet styles the `.chat-area`. Including how messages should look. The next snippet will style the input area and the send button.\n\n``` scss\n    // chat.component.scss\n    \n    .input-area {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      width: 100%;\n      height: 40px;\n      form {\n        display: flex;\n        height: 100%;\n        input {\n          width: 85%;\n          border: none;\n          background: rgba(0, 0, 0, 0.08);\n          padding: 5px 10px;\n          color: rgba(0, 0, 0, 0.3);\n          font-size: 14px;\n          font-weight: bold;\n          font-family: 'Titillium Web', sans-serif;\n          \u0026:focus {\n            outline: none;\n          }\n        }\n        button {\n          width: 15%;\n          border: none;\n          background: darkslategray;\n          color: white;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          cursor: pointer;\n        }\n      }\n    }\n```\n\n### Introducing Pusher and sending messages\n\nSo far we have an application that allows users send messages but the messages aren’t delivered in realtime. To solve this problem, we’ll include the [Pusher](https://pusher.com) library.\n\nOpen a terminal in the root folder of the project and install the package by running the following command:\n\n```\n    npm install pusher-js\n```\nTo make the Pusher library available in our application, we’ll add the library as a third party script to be loaded by Angular CLI. All CLI config is stored in `.angular-cli.json` file. Modify the `scripts` property to include the link to `pusher.min.js`.\n\n``` json\n    // .angular-cli.json\n    ...\n    \n    \"scripts\": [\n      \"../node_modules/pusher-js/dist/web/pusher.min.js\"\n    ]\n     ...\n```          \n\nNow that Pusher has been made available in our project, we’ll create a Pusher service to be used application wide. The Angular CLI can aid in the service creation.  Open a terminal in your project’s root folder and run the following command.\n\n```\n    ng generate service pusher\n```\n\nThis command simply tells the CLI to generate a service named `pusher` . Now open the `pusher.service.ts` file and update it with the code below.\n\n``` typescript\n    // pusher.service.ts\n    \n    import { Injectable } from '@angular/core';\n    \n    declare const Pusher: any;\n    \n    @Injectable()\n    export class PusherService {\n      constructor() {\n        var pusher = new Pusher('\u003cPUSHER_KEY\u003e', {\n          cluster: 'eu',\n          encrypted: true,\n        });\n        this.channel = pusher.subscribe('chat');\n      }\n      channel;\n      \n      public init() {\n        return this.channel;\n      }\n    }\n```\n\n\n- First, we initialize Pusher in the constructor. \n- The  `init` method returns the Pusher property we created. \n\n\n\u003e **Note:** Ensure you replace the `PUSHER_KEY` string with your actual Pusher key.\n  \n\nTo make the service available application wide, import it into the module file.\n\n``` typescript\n    // app.module.ts\n    import {PusherService} from './pusher.service'\n    ...\n    \n    @NgModule({\n       ....\n       providers: [PusherService],\n       ....\n     })\n```\n \n We’ll make use of this service in our component, by binding to the message event and appending the returned message into the list of messages. This will be done in the `ngOnInit` lifecycle.\n\n``` typescript\n    // chat.component.ts\n    import { PusherService } from '../pusher.service';\n    \n    ...\n    // Include the PusherService in the component's constructor\n    constructor(private http: HttpClient, private pusher: PusherService){}\n      ...\n      \n      ngOnInit() {\n        feather.replace();\n        const channel = this.pusher.init();\n        channel.bind('message', (data) =\u003e {\n          if (data.id !== this.lastMessageId) {\n            const message: Message = {\n              ...data,\n              type: 'incoming',\n            };\n            this.messages = this.messages.concat(message);\n          }\n        });\n      }\n    }\n```\n\nTo test the realtime functionality of the application, open two browsers side-by-side and send messages. You should be able to receive a message sent from one browser on the other.\n\nNow let’s place the chat component in the `app.component.html` file. This will make our chat component available for viewing. Replace the contents of the file with the code below.\n\n``` html\n    // app.component.html\n    \u003cdiv\u003e\n      \u003capp-chat\u003e\u003c/app-chat\u003e\n    \u003c/div\u003e\n```\n\nNow we can view our application for the first time, it should currently be able to send messages back and forth in realtime. \n\n![emoji-suggestions-angular-messaging](//images.ctfassets.net/1es3ne0caaid/7qBC1aQeYgG4ayi0iigKQK/29883810d3217e4e773226c1421bad1b/emoji-suggestions-angular-messaging.png)\n\n### Emoji suggestions\n\nTo display emoji suggestions during a chat session, we’ll make use of the `sentiment` param being sent from the server as a response for each message request. The data being sent from the server should be similar to the snippet below.\n\n``` json\n    {\n      id: '83d3dd57-6cf0-42dc-aa5b-2d997a562b7c',\n      text: 'i love pusher',\n      timeStamp: '2018-04-27T15:04:24.574Z'\n      sentiment: {\n        tone: 'positive',\n        score: 3\n      }\n    }\n```      \n\nGenerate an `emoji` component that will hold the emoji section. This component will handle the display of emojis based on the tone of each message received. We’ll generate a new component using the CLI by running the following command in the terminal.\n\n```\n    ng generate component emoji-panel\n```\n\nReplace the contents of the `emoji-panel.component.html` file with the code snippet below.\n\n``` html\n    // emoji-panel.component.html\n    \n    \u003cdiv class=\"emojis\" [hidden]=\"!showEmojis\" [attr.aria-hidden]=\"!showEmojis\"\u003e\n      \u003cdiv class=\"emoji-list positive\" *ngIf=\"result.tone === 'positive'\"\u003e\n        \u003cspan class=\"emoji\" *ngFor=\"let emoji of emojiList.positive; let i = index;\" (click)=\"onClick('positive', i)\"\u003e\n          {{codePoint(emoji)}}\n        \u003c/span\u003e\n      \u003c/div\u003e\n      \n      \u003cdiv class=\"emoji-list neutral\" *ngIf=\"result.tone === 'neutral'\"\u003e\n        \u003cspan class=\"emoji\" *ngFor=\"let emoji of emojiList.neutral; let j = index;\" (click)=\"onClick('neutral', j)\"\u003e\n          {{codePoint(emoji)}}\n        \u003c/span\u003e\n      \u003c/div\u003e\n      \n      \u003cdiv class=\"emoji-list negative\" *ngIf=\"result.tone === 'negative'\"\u003e\n        \u003cspan class=\"emoji\" *ngFor=\"let emoji of emojiList.negative; let k = index;\" (click)=\"onClick('negative', k)\"\u003e\n          {{codePoint(emoji)}}\n        \u003c/span\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\n\n`attr.aria-hidden`: here we set the accessibility attribute of the element to either `true` or `false` based on the `showEmojis` variable.\n\n``` typescript\n    // emoji-panel.component.ts\n    import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n    \n    @Component({\n      selector: 'app-emoji-panel',\n      templateUrl: './emoji-panel.component.html',\n      styleUrls: ['./emoji-panel.component.scss'],\n    })\n    \n    export class EmojiPanelComponent implements OnInit {\n      constructor() {}\n      @Input() result = {};\n      @Input() showEmojis: boolean = false;\n      @Output() onEmojiSelect: EventEmitter\u003cstring\u003e = new EventEmitter();\n    \n      emojiList = {\n       positive: [128512, 128513, 128536, 128516],\n       neutral: [128528, 128529, 128566, 129300],\n       negative: [128543, 128577, 128546, 128542],\n      };\n    \n      codePoint(emojiCodePoint) {\n        return String.fromCodePoint(emojiCodePoint);\n      }\n      onClick(reaction, index) {\n        const emoji = this.emojiList[reaction][index];\n        this.onEmojiSelect.emit(emoji);\n      }\n    \n      ngOnInit() {}\n    }\n```\n\n\n`emojiList`:  this is an object containing a list of emojis that’ll be suggested. There’s a list for each message tone. \n`showEmojis`**:** an input variable from the parent component(`chat`) to determine the visibility of the emoji panel\n`onClick`**:**  this method takes to parameters. The `reaction` param is used to select the list of emojis to check for the provided `index`. The selected emoji is then emitted to the parent component.\n\n``` scss\n    // emoji-panel.component.scss\n    \n    .emojis {\n      \u0026[aria-hidden='true'] {\n        animation: slideOutDown 0.7s;\n      }\n      \u0026[aria-hidden='false'] {\n        animation: slideInUp 0.7s;\n      }\n      .emoji-list {\n        display: flex;\n        .emoji {\n          margin: 0 5px;\n          cursor: pointer;\n        }\n      }\n    }\n    @keyframes slideInUp {\n      from {\n        transform: translate3d(0, 100%, 0);\n        visibility: visible;\n      }\n      to {\n        transform: translate3d(0, 0, 0);\n      }\n    }\n    @keyframes slideOutDown {\n      from {\n        transform: translate3d(0, 0, 0);\n      }\n      to {\n        visibility: hidden;\n        transform: translate3d(0, 100%, 0);\n      }\n    }\n```\n\n\nAfter creating the `emoji-panel` component, the next step is to add it to our `chat` component. Update the chat component with the code snippets below.\n\n``` html\n    // chat.component.html\n    ...\n    \u003cdiv\u003e\n      ...\n      \u003cdiv class=\"emo-area\"\u003e\n        \u003capp-emoji-panel [showEmojis]=\"showEmojis\" [result]=\"score\" (onEmojiSelect)=\"selectEmoji($event)\"\u003e\u003c/app-emoji-panel\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"input-area\"\u003e\n        \u003cform (submit)=\"sendMessage()\" name=\"messageForm\" #messageForm=\"ngForm\"\u003e\n          \u003cinput type=\"text\" name=\"message\" id=\"message\" [(ngModel)]=\"message\"\u003e\n          \u003cbutton\u003e\n            \u003cspan data-feather=\"send\"\u003e\u003c/span\u003e\n          \u003c/button\u003e\n        \u003c/form\u003e\n      \u003c/div\u003e  \n    \u003c/div\u003e\n```\n\n\nUpdate the `chat.component.scss` with the following styles:\n\n``` scss\n    .main{\n      ...\n      .chat-box{\n        ...\n      }\n      .emo-area{\n        position: absolute;\n        bottom: 40px;\n        left: 0;\n        width: 100%;\n        padding: 3px 10px;\n      }\n      .input-area{\n        ...\n      }\n    }\n```\nOpen the `chat.component.ts` file and update it like so:\n\n``` typescript\n    // chat.component.ts\n    \n    ...\n      messages: Array\u003cMessage\u003e = [];\n      message: string = '';\n      lastMessageId;  \n      showEmojis = false;\n      score = {\n        tone: '',\n        score: 0,\n      };\n      \n      sendMessage() {\n        if (this.message !== '') {\n          this.lastMessageId = v4();\n          this.showEmojis = false;\n          ...\n        }\n      }\n      \n      selectEmoji(e) {\n        const emoji = String.fromCodePoint(e);\n        this.message += ` ${e}`;\n        this.showEmojis = false;\n      }\n      ...\n      \n      ngOnInit() {\n        feather.replace();\n        const channel = this.pusher.init();\n        channel.bind('message', (data) =\u003e {\n          if (data.id !== this.lastMessageId) {\n            const message: Message = {\n              ...data,\n              type: 'incoming',\n            };\n            this.showEmojis = true;\n            this.score = data.sentiment;\n            this.messages = this.messages.concat(message);\n          }\n        });\n      }\n    ...\n```\n    \n\n \n`selectEmoji` : this method appends the selected emoji to the current message and then hides the emoji panel. \nIn the Pusher event callback, we set the `showEmojis` property to `true`. In the same callback, we assign the `datas` sentiment property to the `score` variable.\n\nBy now our application should provide emoji suggestions for received messages.\n\n![emoji-suggestions-angular-complete](//images.ctfassets.net/1es3ne0caaid/2hLgA0e4OksyE8QE06qieo/179b838e07d540a23dbff82963f8bab1/emoji-suggestions-angular-complete.png)\n\n\n\u003e **Note:** Both the server(`node server`) and the Angular dev server(`ng serve`) must be running to get the application working. Run both command in two separate terminal sessions if you haven’t done so already.\n\n\n## Conclusion\n\nUsing sentiment analysis library, we’ve been able to suggest emojis as replies for received messages and with the help of [Pusher](https://pusher.com) our application can send messages back and forth in realtime. You can view the source code for the demo [here](https://github.com/christiannwamba/angular-chat).","metaTitle":"Emoji suggestions in an Angular app with sentiment analysis","metaDescription":"This tutorial shows how to build a chat app using Angular and Node. The app measures users' moods with the sentiment analysis library, and provides emoji suggestions based on this data."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3DkeuCPVMQ4cKIEckycsaO","type":"Entry","createdAt":"2018-05-09T09:36:10.483Z","updatedAt":"2018-05-09T09:36:10.483Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Live comments and ratings using sentiment analysis and Angular","url":"live-comments-sentiment-analysis-angular","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/angular-live-comment","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-05-08","description":"Learn to build a live comments application using Angular, featuring sentiment analysis. Use the sentiment analysis to measure whether comments are positive or negative, and display this information on an admin panel.","prerequisite":"You should have Node and npm installed on your machine. A basic understanding of Angular and Node is required.","content":"## Introduction\n\nSentiment analysis is a way to evaluate written or spoken language to determine if the expression is favorable, unfavorable, or neutral, and to what degree. You can read up about it [here](https://www.clarabridge.com/sentiment-analysis/).\n\nLive comments offer a realtime comment experience that doesn’t require a page refresh. You see comments when they’re posted.\n\nUsing [Angular](https://angular.io), you can extend the template language with your components and use a wide array of existing components. With [Pusher](https://pusher.com) we can enable realtime messaging in the chat using Pusher’s pub/sub pattern. \n\nWe’ll be building a live comments application using Pusher, Angular and the [sentiment](https://github.com/thisandagain/sentiment) library for emoji suggestions based on the context of messages received.\n\nUsing our application, admin users can view how videos are rated based on the analysis of the messages sent in the live comments section.\n\nHere’s a demo of the final product:\n\n![angular-comments-sentiment-demo](//images.ctfassets.net/1es3ne0caaid/3rWNv9JECI8O8ygySuAgaY/28000959a9534d3bd6c97a34afb5d525/angular-comments-sentiment-demo.gif)\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of Angular and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nWe’ll be using these tools to build out our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Angular](https://angular.io)\n- [Sentiment](https://github.com/thisandagain/sentiment)\n\nWe’ll be sending messages to the server, then using [Pusher’s](https://pusher.com) pub/sub pattern, we’ll listen and receive messages in realtime. To make use of Pusher you’ll have to create an account [here](https://pusher.com). \n\nAfter account creation, visit the dashboard. Click **Create new Channels** **app**, fill out the details, click **Create my app**, and make a note of the details on the **App Keys** tab.\n\nLet’s build!\n\n## Setup and folder structure\n\nUsing the Angular [CLI](https://cli.angular.io/) (command line interface) provided by the Angular team, we’ll initialize our project. To initialize the project, first, install the CLI by running `npm install @angular/cli` in your terminal. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/) installed.\n\nTo create a new Angular project using the CLI, open a terminal and run:   \n```\n    ng new angular-live-comments --style=scss --routing\n```\nThe command tells the CLI to create a new project called `angular-live-comments`, use the CSS pre-processor SCSS rather than CSS for styling and set up routing for the application.\n\nOpen the newly created folder `angular-live-comments`, your folder structure should be identical to this:\n\n```\n    angular-live-comments/\n      e2e/\n      node_modules/\n      src/\n        app/\n          app.component.html\n          app.component.ts\n          app.component.css\n          ...\n```\nOpen a terminal inside the project folder and start the application by running `ng serve` or `npm start`. Open your browser and visit http://localhost:4200.  What you see should be identical to the screenshot below.\n\n![angular-welcome-screen](//images.ctfassets.net/1es3ne0caaid/7Cw6E4WHFmaOogyKkK0MA/a660fc968171c614fd566c33c5e00d7d/tables-angular-welcome-screen.png)\n\n##  Building our server\n\nNow that we have our Angular application running, let’s build out a part of our server.\n\nTo do this we’ll need to install [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/). We’ll use this to receive requests from our Angular application.\n\nTo install express, run `npm install express` in a terminal in the root folder of your project.\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\nWe referenced three packages that haven’t been installed, `body-parser`, `pusher` and `dotenv`. Install these packages by running the following command in your terminal.\n\n```\n    npm i body-parser pusher dotenv\n```\n\n- body-parser is a package used to parse incoming request bodies in a middleware before your handlers, available under the `req.body` property.\n- dotenv is a zero-dependency module that loads environment variables from a `.env` file into `[process.env](https://nodejs.org/docs/latest/api/process.html#process_process_env)`. This package is used to avoid adding sensitive information like the `appId` and `secret` into our codebase directly. \n- The dotenv package will load the variables provided in our `.env` file into our environment.\n- CORS: The calls to our endpoint will be coming in from a different origin. Therefore we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\n The `dotenv` library should always be initialized at the start of our file because we need to load the variables as early as possible to make them available throughout the application.\n\nWe also installed the [Pusher](https://pusher.com) library as a dependency. Follow the steps above to create a Pusher account if you haven’t done so already\n\nLet’s create a `.env` file to load the variables we’ll be needing into the Node environment. Create the file in the root folder of your project and update it with the code below.\n\n```\n    // .env\n    \n    PUSHER_APP_ID=APP_ID\n    PUSHER_KEY=PUSHER_KEY\n    PUSHER_SECRET=PUSHER_SECRET\n```\nPlease ensure you replace the placeholder values above with your Pusher `appId`, `key` and `secret`.\n\nThis is a standard Node application configuration, nothing specific to our app.\n\n### Sending messages\n\nTo enable users to send and receive messages, we’ll create a route to handle incoming requests. Update your `server.js`  file with the code below.\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: 'eu',\n      encrypted: true,\n    });\n    \n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.post('/messages', (req, res) =\u003e {\n      const { body } = req;\n      const { text, name } = body;\n      const data = {\n        text,\n        name,\n        timeStamp: new Date(),\n      };\n      \n      try {\n        pusher.trigger(['chat', 'rate'], 'message', data);\n      } catch (e) {}\n      res.json(data);\n    });\n    \n     ...\n```\n\n- We created a `POST /messages` route which, when hit, triggers a Pusher event.\n- We used [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to get the body of the request, we also got the `text` and `name` in the request body sent by the user.\n- The `data` object contains the `text` and `name` sent by the user. It also includes a timestamp. \n-  The `trigger` method which takes a trigger identifier, we included a list of channels because we wish to dispatch the event across two channels(`chat`,  `rate`). \n- The trigger function also takes a second argument, the event name (`message`), and a payload(`data`).\n- We still go ahead to respond with an object containing the `data` variable we created. \n\n\n### Sentiment analysis\n\n\n\u003e Sentiment analysis uses data mining processes and techniques to extract and capture data for analysis in order to discern the subjective opinion of a document or collection of documents, like blog posts, reviews, news articles and social media feeds like tweets and status updates.                - [Technopedia](https://www.techopedia.com/definition/29695/sentiment-analysis)\n\n\nUsing sentiment analysis, we’ll analyze the messages sent to determine the attitude of the sender. With the data gotten from the analysis, we’ll determine the emojis to suggest to the user. \n\nWe’ll use the [Sentiment](https://github.com/thisandagain/sentiment) JavaScript library for analysis. To install this library, open a terminal in the root folder of your project and run the following command. \n\n```\n    npm install sentiment\n```\nWe’ll update our `POST /messages` route to include analysis of the messages being sent in. Update your `server.js` with the code below.\n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const Sentiment = require('sentiment');\n    const sentiment = new Sentiment();\n    \n    ...\n    \n    app.post('/messages', (req, res) =\u003e {\n      const { body } = req;\n      const { text, name } = body;\n      const result = sentiment.analyze(text);\n      const comparative = result.comparative;\n      \n      const data = {\n        text,\n        name,\n        timeStamp: new Date(),\n        score: result.score,\n      };\n      try {\n        pusher.trigger(['chat', 'rate'], 'message', data);\n      } catch (e) {}\n      res.json(data);\n    });\n    \n    ...\n```    \n\n\n- Include the sentiment library in the project.\n- `result`: here, we analyze the message sent in by the user to determine the context of the message.\n- `comparative`: this is the comparative score gotten after analyzing the message. \n- A new property (`score`) is added to the response data containing the message’s score after analysis.\n\nYou can now start the server by running `node server.js` in a terminal in the root folder of the project.\n\n\n## Chat view\n\nLet’s begin to build out our chat interface. We’ll create a `chat` component to hold the chat interface. We’ll create this using the CLI. Run `ng generate component chat` in a terminal in the root folder of your project. \n\nUpdate the recently created files as follows: \n\n``` html\n    // chat.component.html\n    \n    \u003cdiv\u003e\n      \u003cdiv class=\"input-area\"\u003e\n        \u003cform (submit)=\"sendMessage()\" name=\"messageForm\" #messageForm=\"ngForm\"\u003e\n          \u003cdiv\u003e\n            \u003cinput type=\"text\" placeholder=\"Your name\" name=\"name\" id=\"name\" [(ngModel)]=\"message.name\"\u003e\n            \u003ctextarea type=\"text\" placeholder=\"Your message\" name=\"message\" id=\"message\" [(ngModel)]=\"message.text\" rows=\"5\"\u003e\u003c/textarea\u003e\n          \u003c/div\u003e\n          \u003cbutton\u003e\n            \u003cspan data-feather=\"send\"\u003e\u003c/span\u003e\n          \u003c/button\u003e\n        \u003c/form\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```    \n\nIn the code snippet above:\n\n- We have a form containing an input element, a textarea and a submit button.\n- We are using an icon-set called [feather-icons](https://feathericons.com) in our project. To include feather-icons in your project, simply add the cdn link in your `index.html` file.\n\n``` html\n    // index.html\n    ...\n    \u003cscript src=\"https://unpkg.com/feather-icons/dist/feather.min.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    ...\n```\n\nOpen the `chat.component.ts` file and update with the code below:\n\n``` typescript\n    // chat.component.ts\n    \n    import { Component, OnInit, Output, EventEmitter } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n    declare const feather: any;\n    export interface Message {\n      text: string;\n      name: string;\n    }\n    @Component({\n      selector: 'app-chat',\n      templateUrl: './chat.component.html',\n      styleUrls: ['./chat.component.scss'],\n    })\n    export class ChatComponent implements OnInit {\n      constructor(private http: HttpClient) {}\n      @Output() onSendMessage: EventEmitter\u003cMessage\u003e = new EventEmitter();\n      message = {\n        name: '',\n        text: '',\n      };\n      sendMessage() {\n        if (this.message.text !== '' \u0026\u0026 this.message.name !== '') {\n          this.http\n            .post(`http://localhost:4000/messages`, this.message)\n            .subscribe((res: Message) =\u003e {\n              this.onSendMessage.emit(res);\n              this.message = {\n                name: '',\n                text: '',\n              };\n            });\n        }\n      }\n      ngOnInit() {\n        feather.replace(); \n      }\n    }\n```\n\n`sendMessage`: this method uses the native `HttpClient` to make requests to the server. The `POST` method takes a URL and the request `body` as parameters. We then append the data returned to the array of messages. \n\nIn the `ngOnInit` lifecycle, we initialize `[feather](https://feathericons.com)`, our chosen icon set. \n\nTo make use of the `HttpClient` service, we’ll need to import the `HttpClientModule` into the `app.module.ts` file. Also to make use of form-related directives, we’ll need to import the `FormsModule`. Update your app module file as follows:\n\n``` typescript\n    // app.module.ts\n    ...\n    import { ChatComponent } from './chat/chat.component';\n    import {HttpClientModule} from '@angular/common/http';\n    import {FormsModule} from \"@angular/forms\";\n    \n    @NgModule({\n      declarations: [AppComponent, ChatComponent],\n      imports: [BrowserModule, AppRoutingModule, HttpClientModule, FormsModule],\n      providers: [],\n      bootstrap: [AppComponent],\n    })\n      ...\n```\n\n### Styling\n\nOpen the `chat.component.scss` file and update it with the following styles below: \n\n``` scss\n    // chat.component.scss\n    \n    %input {\n      width: 100%;\n      border: none;\n      background: rgba(0, 0, 0, 0.08);\n      padding: 10px;\n      color: rgba(0, 0, 0, 0.3);\n      font-size: 14px;\n      font-weight: bold;\n      font-family: 'Roboto Condensed', sans-serif;\n      border-radius: 15px;\n      \u0026:focus{\n        outline: none;\n      }\n    }\n    .input-area {\n      width: 100%;\n      form {\n        display: flex;\n        flex-direction: column;\n        div {\n          display: flex;\n          flex-direction: column;\n          max-width: 450px;\n          input {\n            @extend %input;\n            margin: 0 0 10px 0;\n          }\n          textarea {\n            @extend %input;\n          }\n        }\n        button {\n          width: 25%;\n          border: none;\n          background: darkslategray;\n          color: white;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          cursor: pointer;\n          margin-top: 10px;\n          padding: 5px 20px;\n          border-radius: 27px;\n          box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.12),\n            0 2px 4px 0 rgba(0, 0, 0, 0.08);\n        }\n      }\n    }\n```\n\n## Home view \n\nLet’s create the home component, this will house (pun intended) our `chat` component, video and list of messages. Run `ng generate component home` in a terminal in the root folder of your project.\n\nOpen the `home.component.html` file and replace the contents with the snippet below.\n\n``` html\n    // home.component.html\n    \n    \u003cdiv\u003e\n      \u003cdiv class=\"video\"\u003e\n        \u003ciframe width=\"500\" height=\"300\" src=\"https://www.youtube.com/embed/7CVtTOpgSyY\" frameborder=\"0\" allow=\"autoplay; encrypted-media\"\n          allowfullscreen\u003e\u003c/iframe\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"messages\"\u003e\n        \u003ch4\u003eMessages\u003c/h4\u003e\n        \u003cdiv class=\"message\" *ngFor=\"let message of messages\"\u003e\n          \u003cdiv class=\"pic\"\u003e\n            \u003cimg src=\"/assets/man.svg\" alt=\"profile-img\"\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"message-text\"\u003e\n            \u003cspan\u003e{{message.name}}\u003c/span\u003e\n            \u003cp\u003e{{message.text}}\u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n      \u003capp-chat\u003e\u003c/app-chat\u003e\n    \u003c/div\u003e\n```\n\n\u003e **Note:** you can find the assets used throughout the article in the GitHub [repo](https://github.com/christiannwamba/angular-live-comment).\n\nOpen the `home.component.ts` file and update it with the following snippet:\n\n``` typescript\n    // home.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { Message } from '../chat/chat.component';\n    \n    @Component({\n      selector: 'app-home',\n      templateUrl: './home.component.html',\n      styleUrls: ['./home.component.scss'],\n    })\n    \n    export class HomeComponent implements OnInit {\n      constructor() {}\n      messages: Array\u003cMessage\u003e = [];\n      ngOnInit() {\n      }\n    }\n```    \n\n### Styling\n\nOpen the `home.component.scss` file and update it with the styles below:\n\n``` scss\n    .video {\n      width: 500px;\n      height: 300px;\n      background: rgba(0, 0, 0, 0.2);\n      margin-bottom: 20px;\n    }\n    .messages {\n      margin-bottom: 30px;\n      border-bottom: 2px solid rgba(0, 0, 0, 0.2);\n      max-width: 500px;\n      h4 {\n        margin: 10px 0;\n      }\n      .message {\n        display: flex;\n        .pic {\n          display: flex;\n          align-items: center;\n          img {\n            height: 40px;\n            width: 40px;\n            border-radius: 50%;\n          }\n        }\n        .message-text {\n          padding: 10px;\n          span {\n            font-size: 11px;\n            opacity: 0.8;\n            font-weight: bold;\n          }\n          p {\n            font-size: 15px;\n            opacity: 0.6;\n            margin: 2px 0;\n          }\n        }\n      }\n    }\n```\n\n\n\n## Introducing Pusher\n\nSo far we have an application that allows users send in comments, but these comments are only visible to the sender. We’ll include the [Pusher](https://pusher.com) library in our application to enable realtime features like seeing comments as they come in without having to refresh the page.\n\nOpen a terminal in the root folder of the project and install the package by running the following command:\n\n```\n    npm install pusher-js\n```\n\nWe’ll add the library as a third party script to be loaded by Angular CLI. CLI config is always stored in the `.angular-cli.json` file. Modify the `scripts` property to include the link to `pusher.min.js`.\n\n``` json\n    // .angular-cli.json\n    ...\n    \n    \"scripts\": [\n      \"../node_modules/pusher-js/dist/web/pusher.min.js\"\n    ]\n     ...\n```          \n\nNow that Pusher has been made available in our project, we’ll create a Pusher service to be used application wide. The Angular CLI can aid in the service creation.  Open a terminal in your project’s root folder and run the following command.\n\n```\n    ng generate service pusher\n```\n\nThis command simply tells the CLI to generate a service named `pusher`. Now open the `pusher.service.ts` file and update it with the code below.\n\n``` typescript\n    // pusher.service.ts\n    \n    import { Injectable } from '@angular/core';\n    declare const Pusher: any;\n    @Injectable()\n    export class PusherService {\n      constructor() {\n      // Replace this with your pusher key    \n        this.pusher = new Pusher('\u003cPUSHER_KEY\u003e', {\n          cluster: 'eu',\n          encrypted: true,\n        });\n      }\n      pusher;\n      public init(channel) {\n        return this.pusher.subscribe(channel);\n      }\n    }\n```\n\n\n\n- First, we initialize Pusher in the constructor. \n- The  `init` subscribes to the channel passed as a parameter. \n\n\n\u003e **Note:** ensure you replace the `PUSHER_KEY` string with your actual Pusher key.\n\nTo make the service available application wide, import it into the module file.\n\n``` typescript\n    // app.module.ts\n    ...\n    import { HttpClientModule } from '@angular/common/http';\n    import {PusherService} from './pusher.service';\n    \n    @NgModule({\n       ....\n       providers: [PusherService],\n       ....\n     })\n```\n \n We’ll make use of this service in our component, by binding to the message event and appending the returned message into the list of messages. This will be done in the `ngOnInit` lifecycle in the `home.component.ts` file.\n\n``` typescript\n    // home.component.ts\n    import { Component, OnInit } from '@angular/core';\n    import { Message } from '../chat/chat.component';\n    import { PusherService } from '../pusher.service';\n    ...\n    \n      constructor(private pusher: PusherService){}\n      messages: Array\u003cMessage\u003e = [];\n    \n      ngOnInit() {\n        const channel = this.pusher.init('chat');\n        channel.bind('message', (data) =\u003e {\n          this.messages = this.messages.concat(data);\n        });\n      }\n    }\n```\n\n\n\n## Routing\n\nTo enable routing between the `home` and `admin` page, we’ll define routes for each component in the `app-routing.module.ts` file.\n\n``` typescript\n    // app-routing.module.ts\n    \n    import { NgModule } from '@angular/core';\n    import { Routes, RouterModule } from '@angular/router';\n    import { HomeComponent } from './home/home.component';\n    \n    const routes: Routes = [\n      {\n        component: HomeComponent,\n        path: '',\n      },\n    ];\n    \n    @NgModule({\n      imports: [RouterModule.forRoot(routes)],\n      exports: [RouterModule],\n    })\n    \n    export class AppRoutingModule {}\n```\n\n\n`routes`: previously, the `routes` variable was an empty array, but we’ve updated it to include two objects containing our route `component` and `path`.\n\n\nNext we’ll replace all the contents in your `app.component.html` file leaving just the `router-outlet`. Your `app.component.html` file should look like the snippet below:\n\n``` html\n    // app.component.html\n    \n    \u003cdiv class=\"main\"\u003e\n      \u003crouter-outlet\u003e\u003c/router-outlet\u003e\n    \u003c/div\u003e\n```\n\nLet’s have a look at what our home page looks like after the updates. Navigate to http://localhost:4200\n\n![angular-comments-sentiment-home](//images.ctfassets.net/1es3ne0caaid/6rLqKZoZBC6cqIUCW0KaUQ/56a695bb4a6e5ec9302a9d795fcccec2/angular-comments-sentiment-home.png)\n\n## Admin page\n\nWhenever we post a video, we want to be able to tell how the video was perceived by users using their comments on the video. Sentiment analysis is used to achieve this. All comments under the video will be analyzed to determine the user’s attitude towards the video. All videos posted will be rated based on the tone of every comment posted.\n\nIf the comments under a video are mostly negative, the video will get a simple thumbs down(👎🏼) and a thumbs up(👍🏼) if the comments are positive. \n\nTo create the admin page, run `ng generate component admin` in a terminal in the root folder of your project.\n\nReplace the contents of the `admin.component.html` file with the snippet below.\n\n``` html\n    // admin.component.html\n    \n    \u003cdiv class=\"admin\"\u003e\n      \u003ch3\u003eAdmin\u003c/h3\u003e\n      \u003cdiv\u003e\n        \u003ch4\u003eVideos List\u003c/h4\u003e\n        \u003cdiv class=\"video\"\u003e\n          \u003cdiv class=\"vid-thumbnail\"\u003e\n            \u003cimg src=\"/assets/vid-thumbnail.png\" alt=\"video thumbnail\"\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"vid-desc\"\u003e\n            \u003cspan\u003ePixar\u003c/span\u003e\n            \u003cp\u003eShooting Star Clip\u003c/p\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"vid-rating\"\u003e\n            \u003cspan class=\"header\"\u003e\n              Rating\n            \u003c/span\u003e\n            \u003cdiv [hidden]=\"rating \u003c 1\"\u003e\n              \u003cspan data-feather=\"thumbs-up\" class=\"positive\"\u003e\u003c/span\u003e\n            \u003c/div\u003e\n            \u003cdiv [hidden]=\"rating \u003e= 1\"\u003e\n              \u003cspan data-feather=\"thumbs-down\" class=\"negative\"\u003e\u003c/span\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\n\n\n\u003e **Note:** all assets used are available in the repo [here](https://github.com/christiannwamba/angular-live-comment).\n\nWe have the thumbs up and thumbs down icons, we display thumbs up if the rating is one and above. Thumbs down is displayed when the video rating is below one. The `rating` property will be defined in the `admin.component.ts` file below.\n\n### Styling\n\nAdd the styles below to the `admin.component.scss` file.\n\n``` scss\n    // admin.component.scss\n    \n    .admin {\n      width: 500px;\n      .video {\n        display: flex;\n        box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.2);\n        padding: 10px;\n        .vid-thumbnail {\n          flex: 1;\n          img {\n            height: 70px;\n            width: 120px;\n          }\n        }\n        .vid-desc {\n          flex: 4;\n          padding: 0 8px;\n          span {\n            font-size: 15px;\n            font-weight: bold;\n            opacity: 0.8;\n          }\n          p {\n            margin: 3px;\n            font-size: 17px;\n            opacity: 0.6;\n          }\n        }\n        .vid-rating {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          .header{\n            font-size: 12px;\n            margin: 0 0 5px;\n            opacity: 0.6;\n          }\n          .positive {\n            color: #40a940;\n          }\n          .negative {\n            color: rgb(196, 64, 64);\n          }\n        }\n      }\n    }\n```\n\n\nOpen the `admin.component.ts` file and update it as so:\n\n``` typescript\n    // admin.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { PusherService } from '../pusher.service';\n    \n    declare const feather: any;\n    \n    @Component({\n      selector: 'app-admin',\n      templateUrl: './admin.component.html',\n      styleUrls: ['./admin.component.scss'],\n    })\n    \n    export class AdminComponent implements OnInit {\n      constructor(private pusher: PusherService) {}\n      rating = 1;\n      \n      ngOnInit() {\n        feather.replace();\n        const channel = this.pusher.init('rate');\n        channel.bind('message', (data) =\u003e {\n          this.rating += data.score;\n        });\n      }\n    }\n```\n\n- `rating`: starting out, every video has a rating of 1.\n- In the `ngOnInit` lifecycle, we initialize feather and subscribe to the `rate` channel. We then listen for a `message` event. In the callback, the `score`  property of the data returned is added to the `rating` property.\n\n\nNow let’s define the route for the admin page. Open the `app-routing.module.ts` file and update the `routes` array like so:\n\n``` typescript\n    // app-routing.module.ts\n    import { NgModule } from '@angular/core';\n    import { Routes, RouterModule } from '@angular/router';\n    import { HomeComponent } from './home/home.component';\n    import { AdminComponent } from './admin/admin.component';\n    \n    const routes: Routes = [\n      {\n        component: HomeComponent,\n        path: '',\n      },\n      {\n        component: AdminComponent,\n        path: 'admin',\n      },\n    ];\n    ...\n```\n\nNavigate to http://localhost:4200/admin to view the admin page. Here’s a screenshot of what it looks like:\n\n![angular-comments-sentiment-admin](//images.ctfassets.net/1es3ne0caaid/zpnyoDkAfYMwQ6m6OewY6/191a5054646bfc39b847213f5db0ef6b/angular-comments-sentiment-admin.png)\n\nThere’s not much going on here, but now our admin page rates videos in realtime whenever there’s a new comment. \n\nHere’s a screenshot of both pages side by side.\n\n![angular-comments-sentiment-both-views](//images.ctfassets.net/1es3ne0caaid/wpeiNFaL0yy8KSegKOugQ/2390d72d67eadf6289ccd55dba1e12fd/angular-comments-sentiment-both-views.png)\n\n## Conclusion\n\nUsing the sentiment analysis library, we can rate videos on our site by analyzing the comments posted under the videos. Using [Pusher Channels](https://pusher.com/channels), we were able to implement live comments functionality in our application. You can view the source code for the demo [here](https://github.com/christiannwamba/angular-live-comment).","metaTitle":"Build live comments and ratings using sentiment and Angular","metaDescription":"This tutorial shows you how to build a live comments application, featuring sentiment analysis. Use Angular and Node.js with a sentiment analysis library to measure whether comments are positive or negative, and display this information on an admin panel."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"73w2yjT0nmQgUQISKoSuuA","type":"Entry","createdAt":"2018-05-08T07:23:31.792Z","updatedAt":"2020-06-19T13:20:48.240Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime table with Angular","url":"realtime-table-angular","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/realtime-ng-table","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-05-07","description":"Create an Angular web app featuring a table interface that updates in realtime to reflect changes in the database.","prerequisite":"You will need Node and npm installed on your machine. A basic understanding of JavaScript will be helpful.","content":"## Introduction\n\nIn a traditional web app, the clients (browser) has no idea when the state of the server may have changed. It either polls for changes at a particular interval or waits for the user to initiate the change. With realtime features, information is transmitted (almost) instantaneously between the users and the server. Pusher helps to bring realtime apps to the masses with their simple APIs from the client end down to the server.\n\nIn this tutorial, we’ll demonstrate how to integrate [Pusher](https://pusher.com/) with an [Angular](http://angular.io/) application. We will  create a realtime table, where we don’t need to refresh our page or component anytime there’s a change to our table’s data, our table should immediately update based on the current state of the data.\n\n![tables-angular-demo](//images.ctfassets.net/1es3ne0caaid/1qlaJYq8G0U26I464gIeCM/705d08d6b78ac01afec901b3e34a7ac8/tables-angular-demo.gif)\n\n## Prerequisites\n\nWe are going to make use of the following dependencies: \n\n- [Angular 4+](http://angular.io/): a platform that makes it easy to build applications with the web. Angular combines declarative templates, dependency injection, end to end tooling, and integrated best practices to solve development challenges. \n\n\n- [Pusher](https://github.com/pusher/pusher-js): a hosted service that makes it super-easy to add realtime data and functionality to web and mobile applications. It has different products based on the need of your application. \n\n\n- [Bootstrap 4](http://getbootstrap.com/): an open source toolkit for developing with HTML and CSS. It includes HTML and CSS based design templates for typography, forms, buttons, tables, navigation, modals, image carousels and many other, as well as optional JavaScript plugins.\n\n\n- [open-iconic](https://useiconic.com/open): an open source icon set with 223 marks in SVG, webfont and raster formats\n\n\u003e Please ensure you have Node and npm installed before starting the tutorial.\n\u003e No knowledge of Angular is required, but a basic understanding of Javascript (not necessarily Typescript) may be helpful.\n\n## Let’s build our realtime application\n\nBootstrapping with [A](https://github.com/angular/angular-cli)[ngular-cli](https://github.com/angular/angular-cli): \n```\n    npm install -g @angular/cli\n    ng new realtimeNgTable\n    cd realtimeNgTable\n```\nWe installed a command line interface to scaffold and build Angular apps globally. It exposes `ng` in our terminal for us to make use of the [commands](https://github.com/angular/angular-cli#generating-and-serving-an-angular-project-via-a-development-server) available. To confirm everything went well, run the below command on your terminal within the newly created app folder `/realtimeNgTable`.\n\n```\n    ng serve\n```\nYou should see this:\n\n![tables-angular-welcome-screen](//images.ctfassets.net/1es3ne0caaid/7Cw6E4WHFmaOogyKkK0MA/a660fc968171c614fd566c33c5e00d7d/tables-angular-welcome-screen.png)\n\nInstalling dependencies:\n```\n    npm install bootstrap open-iconic @theo4u/ng-alert pusher-js\n```\nOpen `.angular-cli.json` within our application root folder and update the `styles` field to look like so:\n```\n    \"styles\": [\n      \"../node_modules/bootstrap/dist/css/bootstrap.css\",\n      \"../node_modules/open-iconic/font/css/open-iconic-bootstrap.css\",\n      \"../node_modules/@theo4u/ng-alert/style.css\",\n      \"styles.css\"\n    ]\n```\nOpen `src/styles.css` and add the below CSS to it:\n\n``` css\n    /* You can add global styles to this file, and also import other style files */\n    .box-shadow { box-shadow: 0 .25rem .75rem rgba(0, 0, 0, .05); }\n    \n    /* ngAlert customization */\n    .app-level-alert {\n      padding-top: 10px;\n    }\n```\nWe added a utility style for adding shadows to our div and also for making our alert align later on.\n\nFinally, open `src/app/app.module.ts` to add `NgAlertModule` to the `imports` array: \n\n``` typescript\n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule } from '@angular/core';\n    import { NgAlertModule } from '@theo4u/ng-alert';\n    import { AppComponent } from './app.component'; \n    \n    @NgModule({\n      declarations: [\n        AppComponent\n      ],\n      imports: [\n        BrowserModule,\n        NgAlertModule\n      ],\n      providers: [],\n      bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n```\nAt this point, we have successfully fixed our app dependencies and styling.\n\nNext, we need to create two services to manage our Pusher instance (we don’t have to always create a new instance of Pusher anytime we want to use it, we can use just one instance of it throughout the entire app) and our employees (interaction with the remote server and vice versa for employee’s data):\n\n```\n    ng g s services/pusher --spec false\n    ng g s services/employee --spec false\n    ng g i interfaces/iemployee\n```\nWe used another command of Angular CLI, which in full is `ng generate service path/name`. This creates a folder if not existing called `services/` and place our service files there. We also used `--spec false`  to let the Angular CLI know we don’t need to generate test file for the service file. The last comand generates an employee interface to help give an idea of what an employee object should have.\n\nOpen `src/app/services/pusher.service.ts` and update it to look like the one below:\n\n``` typescript\n    import { Injectable } from '@angular/core';\n    import * as Pusher from 'pusher-js';\n    \n    // this is here to discourage the instantianting of pusher any where its\n    // needed, better to reference it from one place\n    @Injectable()\n    export class PusherService {\n    private _pusher: any;\n    \n    constructor() {\n      this._pusher = new Pusher(API_KEY, {\n        cluster: CLUSTER,\n        encrypted: true\n      });\n    }\n    // any time it is needed we simply call this method\n    getPusher() {\n      return this._pusher;\n    }\n    \n    }\n```\nWe insert the free `API_KEY` and `CLUSTER` we get after [signing up](https://dashboard.pusher.com/accounts/sign_up) and creating a channel app with Pusher.\n\n\n\u003e After creating an app from Pusher’s dashboard, navigate to `App Keys` tab to see your app credentials \n\nTo ensure that connection traffic is encrypted, we set `encrypted` to the Boolean `true` in our app. Read more about client configuration [here](https://pusher.com/docs/client_api_guide).\n\nOpen `src/app/interfaces/iemployee.ts` and update it to look like so:\n``` typescript\n    export interface IEmployee {\n      id?: number;\n      name: string;\n      position: string;\n      salary: string;\n      createdAt?: string;\n    }\n```\nLet’s now move over to our `src/app/services/employee.service.ts`. This file will manage everything relating to employee and our server: \n``` typescript\n    // src/app/services/employee.service.ts\n    import { Injectable } from '@angular/core';\n    import { Observable } from 'rxjs/Observable';\n    import { HttpClient } from '@angular/common/http';\n    import { IEmployee } from '../interfaces/iemployee';\n    import 'rxjs/add/operator/map'; \n    import 'rxjs/add/operator/mapTo'; \n    import { PusherService } from './pusher.service';\n    \n    @Injectable()\n    export class EmployeeService {\n    private _endPoint = 'http://localhost:2000/employee'\n    private _channel: any;\n    \n    constructor(private _http: HttpClient, private _pusherService: PusherService) {\n      this._channel = this._pusherService.getPusher().subscribe('employee');\n    }\n    \n    /**\n     * @return employee's channel for the different event available under employee\n     */\n    getChannel () {\n      return this._channel;\n    }\n    \n    list (): Observable\u003cIEmployee[]\u003e {\n      return this._http.get(this._endPoint)\n      .map(res =\u003e \u003cIEmployee[]\u003e res);\n    }\n    \n    /**\n     * Create new employee\n     * @param param\n     * @return Observable\u003cIEmployee\u003e with the id\n     */\n    create(param: IEmployee): Observable\u003cIEmployee\u003e {\n      return this._http.post(this._endPoint, param)\n      .map(res =\u003e \u003cIEmployee\u003e res);\n    }\n    \n    /**\n     * Remove an employee\n     * @param employee to remove\n     * @return Observable\u003cIEmployee\u003e the employee just removed\n     */\n    delete(employee: IEmployee): Observable\u003cIEmployee\u003e {\n      return this._http.delete(`${this._endPoint}/${employee.id}`)\n      .mapTo(employee);\n    }\n    \n    }\n```\nObserve that we attached this service to the employee’s channel, which means anything that has to do with an employee and Pusher is within our employee’s service file.\n\nLet’s make our services available to be used by others from our `app.module.ts` by providing them also adding [HTTPClientModule](https://angular.io/guide/http) since it was used within `employee.service.ts` for http requests:\n``` typescript\n    // src/app/app.module.ts\n    import { EmployeeService } from './services/employee.service';\n    import { PusherService } from './services/pusher.service';\n    import { HttpClientModule } from '@angular/common/http'; \n    ...\n    imports: [\n      ...,\n      HttpClientModule\n      ],\n    providers:[EmployeeService, PusherService]\n```\n\n## Angular components to manage employees\n\nWe’ll now create two more components to list employees and create employees:\n\n```\n    ng g c listEmployee -is --spec false\n    ng g c createEmployee -is --spec false\n```\nUsing the Angular CLI, we generated a component with no test attached as explained earlier. It will create a folder for each containing a `.ts` and a `.html`. The `-is` command means don’t create a `.css` file instead use inline styling within our `.ts`. Since, we are not going to do alot or no styling within each component.\n\nLet’s start with the list employee component, it should look like our gif above. \nOpen `list-employee.component.html` and update it to look like so:\n\n``` html\n    \u003c!-- src/app/list-employee/list-employee.component.html --\u003e\n    \n    \u003ch6 class=\"pb-2 mb-0\"\u003eEmployees\u003c/h6\u003e\n    \u003ctable class=\"table\"\u003e\n      \u003cthead\u003e\n        \u003ctr\u003e\n          \u003cth scope=\"col\"\u003eName\u003c/th\u003e\n          \u003cth scope=\"col\"\u003ePosition\u003c/th\u003e\n          \u003cth scope=\"col\"\u003eSalary\u003c/th\u003e\n          \u003cth scope=\"col\"\u003eCreated At\u003c/th\u003e\n          \u003cth scope=\"col\"\u003eActions\u003c/th\u003e\n        \u003c/tr\u003e\n      \u003c/thead\u003e\n      \u003ctbody\u003e\n        \u003ctr *ngFor=\"let employee of employees\"\u003e\n          \u003ctd\u003e\n           \u003cspan *ngIf=\"employee.new\" class=\"badge badge-primary\"\u003enew\u003c/span\u003e\n           {{employee.name}}\n          \u003c/td\u003e\n          \u003ctd\u003e{{employee.position}}\u003c/td\u003e\n          \u003ctd\u003e{{employee.salary}}\u003c/td\u003e\n          \u003ctd\u003e{{employee.createdAt | date:'yyyy/MM/dd'}}\u003c/td\u003e\n          \u003ctd\u003e\n            \u003cbutton (click)=\"delete(employee)\" class=\"btn btn-danger btn-sm\"\u003e\n              \u003cspan class=\"oi oi-trash\"\u003e\u003c/span\u003e\n            \u003c/button\u003e\n          \u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr *ngIf=\"loading\"\u003e\n         \u003ctd colspan=\"5\" align=\"center\"\u003eFetching Employees\u003c/td\u003e\n        \u003c/tr\u003e\n      \u003c/tbody\u003e\n    \u003c/table\u003e\n```\nNext open `list-employee.component.ts` and update it with the code below:\n\n``` typescript\n    // src/app/list-employee/list-employee.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { EmployeeService } from '../services/employee.service';\n    import { IEmployee } from '../interfaces/iemployee';\n    import { NgAlertService, MessageType } from '@theo4u/ng-alert';\n    \n    @Component({\n      selector: 'app-list-employee',\n      templateUrl: './list-employee.component.html',\n      styles: []\n    })\n    export class ListEmployeeComponent implements OnInit {\n      employees: IEmployee[] = [];\n      loading = true;\n    \n      constructor(private _employeeService: EmployeeService, private _ngAlert: NgAlertService) { }\n    \n      ngOnInit() {\n        this.loading = true;\n        this._employeeService.list()\n          .subscribe(employees =\u003e {\n            this.loading = false;\n            this.employees = employees;\n          });\n      }\n    \n      delete(employee: IEmployee) {\n       // show delete confirmation with ngAlert\n        this._ngAlert.push({\n          message: `\u003cstrong\u003eAre you sure!\u003c/strong\u003e you want to delele this employee with name \u003cstrong\u003e${employee.name}\u003c/strong\u003e`,\n          type: MessageType.warning,\n          buttons: [\n            {\n              label: 'Continue',\n              action: () =\u003e {\n                this._actualDelete(employee);\n              },\n              css: 'btn btn-danger'\n            }\n          ]\n        });\n      }\n    \n      private _actualDelete (employee: IEmployee) {\n        this._employeeService.delete(employee)\n          .subscribe(() =\u003e {\n            // remove the employee if removed successfully\n            this.employees = this.employees.filter(item =\u003e item !== employee);\n            this._ngAlert.push({\n              message: `${employee.name} removed`,\n              type: MessageType.success\n            });\n          });\n      }\n    \n    }\n```\nHere, we are simply performing a normal loading and deleting of employees from our remote server via `EmployeeService`. \n\nLet’s go into our `create-employee.component.html`. Here, we’ll make use of [A](https://angular.io/api/forms/ReactiveFormsModule)[ngular’s reactive](https://angular.io/api/forms/ReactiveFormsModule) [form](https://angular.io/api/forms/ReactiveFormsModule): \n``` html\n    \u003c!-- src/app/create-employee/create-employee.component.html  --\u003e\n    \n    \u003ch6 class=\"pb-2 mb-0\"\u003eCreate Employees\u003c/h6\u003e\n    \n    \u003cform [formGroup]=\"employeeForm\" (ngSubmit)=\"onSubmit()\" novalidate\u003e\n      \u003cdiv class=\"form-group\"\u003e\n        \u003clabel for=\"name\"\u003eName\u003c/label\u003e\n        \u003cinput formControlName=\"name\" type=\"text\" class=\"form-control\" id=\"name\" placeholder=\"Christian Nwamba\"\u003e\n         \u003csmall *ngIf=\"employeeForm.get('name').hasError('required')\" class=\"form-text text-danger\"\u003eName is required.\u003c/small\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"form-group\"\u003e\n        \u003clabel for=\"position\"\u003ePosition\u003c/label\u003e\n        \u003cselect formControlName=\"position\" class=\"form-control\" id=\"position\"\u003e\n          \u003coption\u003eManager\u003c/option\u003e\n          \u003coption\u003eHr\u003c/option\u003e\n          \u003coption\u003eDeveloper\u003c/option\u003e\n        \u003c/select\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"form-group\"\u003e\n        \u003clabel for=\"salary\"\u003eSalary\u003c/label\u003e\n        \u003cinput formControlName=\"salary\" type=\"text\" class=\"form-control\" id=\"salary\" placeholder=\"$12,000\"\u003e\n        \u003csmall *ngIf=\"employeeForm.get('salary').hasError('required')\" class=\"form-text text-danger\"\u003eSalary is required.\u003c/small\u003e\n      \u003c/div\u003e\n      \u003cbutton type=\"submit\" [disabled]=\"loader || employeeForm.invalid\" class=\"btn btn-primary\"\u003e{{loader?'Adding':'Add'}}\u003c/button\u003e\n    \u003c/form\u003e \n```\nOpen  `create-employee.component.ts` to manage our HTML template above. We are making use of the `.create` method in our employee’s service with reactive forms to validate entries easily under the `_createForm` method.\n\n``` typescript\n    // src/app/create-employee/create-employee.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { FormGroup, FormBuilder, Validators } from '@angular/forms';\n    import { EmployeeService } from '../services/employee.service';\n    import { IEmployee } from '../interfaces/iemployee';\n    \n    @Component({\n      selector: 'app-create-employee',\n      templateUrl: './create-employee.component.html',\n      styles: []\n    })\n    export class CreateEmployeeComponent implements OnInit {\n       employeeForm: FormGroup;\n       loader: boolean;\n    \n      constructor(private _fb: FormBuilder, private _employeeService: EmployeeService) { }\n    \n      ngOnInit() {\n        this._createForm();\n      }\n    \n      /**\n       * create our reactive form here\n       */\n      private _createForm() {\n        this.employeeForm = this._fb.group({\n          name: ['', Validators.required],\n          position: ['Manager', Validators.required],\n          salary: ['', Validators.required]\n        });\n      }\n    \n      /**\n       * submit new employee to server\n       */\n      onSubmit() {\n        const param = this.employeeForm.value;\n        this._employeeService.create(param)\n          .subscribe((employee: IEmployee) =\u003e {\n             this.loader = false;\n             this.employeeForm.reset({position: 'Manager'});\n          },\n            (error) =\u003e {\n              console.error(error);\n              this.loader = false;\n            });\n      }\n    \n    }\n```\n\n## Making use of our components\n\nLet’s call our component so we can test easily with our browser, open up `app.component.ts` and update it to look like so:\n``` typescript\n    // src/app/app.component.ts\n    \n    import { Component, OnInit, OnDestroy } from '@angular/core';\n    import { IMessage, MessageType, CloseType, NgAlertService } from '@theo4u/ng-alert';\n    import { Subscription } from 'rxjs/Subscription';\n    \n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    export class AppComponent implements OnInit, OnDestroy {\n      message: IMessage;\n      closeTypes = CloseType;\n      private _alertSub: Subscription;\n    \n      constructor(private _ngAlert: NgAlertService) {\n      }\n    \n      ngOnInit () {\n         this._alertSub = this._ngAlert.getSource().subscribe(message =\u003e {\n          this.message = message;\n        });\n      }\n    \n      ngOnDestroy () {\n        this._alertSub.unsubscribe();\n      }\n    \n    }\n```\nMost of what is going on here is about managing our app level alerts. Anytime an alert is triggered from any component, we can easily get it here and we can also unsubscribe from it once we are done with the component.  Check the `delete` method in `list-employee.component.ts` to see where we push a confirmation message before deleting any employee.\n\nOpen `app.components.html` and let’s call our components side by side:\n\n``` html\n    \u003cdiv class=\"container\"\u003e\n      \u003c!-- Alert here --\u003e\n     \u003cdiv class=\"app-level-alert\"\u003e\n        \u003cng-alert [(message)]=\"message\" [dismissable]=\"true\" [closeType]=\"closeTypes.TIMES\"\u003e\u003c/ng-alert\u003e\n     \u003c/div\u003e\n      \u003c!-- /Alert here --\u003e\n      \n      \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-8\"\u003e\n          \u003cdiv class=\"my-3 p-3 bg-white rounded box-shadow\"\u003e\n            \u003capp-list-employee\u003e\u003c/app-list-employee\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"col-md-4\"\u003e\n          \u003cdiv class=\"my-3 p-3 bg-white rounded box-shadow\"\u003e\n            \u003capp-create-employee\u003e\u003c/app-create-employee\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \n    \u003c/div\u003e\n```\nOur final `app.module.ts` should now be like this:\n``` typescript\n    // src/app/app.module.ts\n    \n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule } from '@angular/core';\n    import { NgAlertModule } from '@theo4u/ng-alert';\n    import { AppComponent } from './app.component';\n    import { CreateEmployeeComponent } from './create-employee/create-employee.component';\n    import { ListEmployeeComponent } from './list-employee/list-employee.component';\n    import { EmployeeService } from './services/employee.service';\n    import { ReactiveFormsModule } from '@angular/forms';\n    import { HttpClientModule } from '@angular/common/http';\n    import { PusherService } from './services/pusher.service';\n    \n    @NgModule({\n      declarations: [\n        AppComponent,\n        CreateEmployeeComponent,\n        ListEmployeeComponent\n      ],\n      imports: [\n        BrowserModule,\n        ReactiveFormsModule,\n        NgAlertModule,\n        HttpClientModule\n      ],\n      providers: [EmployeeService, PusherService],\n      bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n```\nOur app behaviour should now look like this:\n\n![tables-angular-stage-1](//images.ctfassets.net/1es3ne0caaid/4J8haYXbrWI0y6M4KqW0GI/fa2c60b9866a4d83afceeeef3b5ef16f/tables-angular-stage-1.gif)\n\n\nWe have to always refresh our page to get newly added employees or deleted employees, next section will handle this.\n\n\n## Integrating Pusher for realtime table updates\n\nPusher is a hosted service that makes it super-easy to add realtime data and functionality to web and mobile applications. Pusher sits as a realtime layer between your servers and your clients. Pusher also maintains persistent connections to the clients over WebSocket if possible and falling back to HTTP-based connectivity so that as soon as your servers have new data that they want to push to the clients they can do, instantly via Pusher.\n\nWe’ll use Pusher’s event based API know as [**Pusher Channels**](https://pusher.com/channels). All we need to do is to subscribe to a particular channel like `employee` ( `employee.service.ts` `getChannel()` method) and watch for any event type (new, deleted) emitted and know how to handle the data coming along with the event. \n\nOpen `list-employee.component.ts` to spice it up with Pusher. We are watching for *new* and *deleted* employees, add the following to `ngOnInit` method:\n``` typescript\n      // subscribe to pusher's event\n        this._employeeService.getChannel().bind('new', data =\u003e {\n          data.new = true;\n          this.employees.push(data);\n        });\n    \n        this._employeeService.getChannel().bind('deleted', data =\u003e {\n          this.employees = this.employees.filter(emp =\u003e emp.id !== data.id);\n        });\n```\nAnytime a new/deleted record is received we get the data as well and then manipulate our array of employees. When a record is added we need to let the user know that this record just came in using `data.new=true` , which was used in our `list-employee.component.html` to show a new label.\nNow, try deleting or adding a record from another browser window, the current one should be updated. \n\n## Integrating Pusher to our Node server\n\nOur server is simply going to simulate an actual DB and routes to create, delete and get employees from a mock array object as our DB. Also, obeying the [twelve-factor](https://12factor.net/) approach to handling configurations for our server. Open your terminal within our application folder `/realtimeNgTable` and run the following commands:\n\n```\n    npm install express body-parser cors pusher dotenv shortid\n    touch server.js\n    touch mocks.js\n    touch .env\n```\nMock is simply going to export our initial list of employees, like so:\n``` javascript\n    // src/mocks.js\n    module.exports = [\n      {\n        id: 'S1234X',\n        name: 'Christian Nwamba',\n        position: 'Manager',\n        salary: '$13,000',\n        createdAt: new Date().toISOString()\n      },\n      {\n        id: 'S1234Y',\n        name: 'Prosper Otemuyiwa',\n        position: 'Hr',\n        salary: '$12,500',\n        createdAt: new Date().toISOString()\n      },\n      {\n        id: 'S1234Z',\n        name: 'Theophilus Omoregbee',\n        position: 'Developer',\n        salary: '$10,500',\n        createdAt: new Date().toISOString()\n      }\n    ]\n```\nLet’s setup our server in `server.js`: \n``` javascript\n    //server.js\n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const Pusher = require('pusher')\n    const cors = require('cors')\n    const dotenv = require('dotenv').config()\n    const shortId = require('shortid')\n    let mocks = require('./mocks')\n    \n    const app = express()\n    app.use(cors())\n    app.use(bodyParser.urlencoded({ extended: false }))\n    app.use(bodyParser.json())\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APPID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: process.env.PUSHER_CLUSTER,\n      encrypted: true\n    })\n    \n    app.post('/employee', (req, res) =\u003e {\n      // simulate actual db save with id (using shortId) and createdAt added\n      const employee = {\n        id: shortId.generate(),\n        createdAt: new Date().toISOString(),\n        ...req.body\n      }\n      mocks.push(employee) // like our db\n      // trigger this update to our pushers listeners\n      pusher.trigger('employee', 'new', employee)\n      res.send(employee)\n    })\n    \n    app.delete('/employee/:id', (req, res) =\u003e {\n      const employee = mocks.find(emp =\u003e emp.id === req.params.id)\n      mocks = mocks.filter(emp =\u003e emp.id !== employee.id)\n      pusher.trigger('employee', 'deleted', employee)\n      res.send(employee)\n    })\n    \n    app.get('/employee', (req, res) =\u003e {\n      res.send(mocks)\n    })\n    \n    app.listen(2000, () =\u003e console.log('Listening at 2000'))\n```\nWe instantiated Pusher with environment parameters, as said earlier on we are sticking with the twelve-factor approach, where we use `.env` file to pass environment variables to our `server.js`.\n\nLet’s populate our `.env`  file with our Pusher credentials\n```\n    PUSHER_APPID=YOUR_APP_ID\n    PUSHER_KEY=YOUR_APP_KEY\n    PUSHER_SECRET=YOUR_APP_SECRET\n    PUSHER_CLUSTER=YOUR_APP_CLUSTER\n```\nFinally, running the below command in our terminal should start the node server\n```\n    node server.js\n```\nAny time a new record is created we trigger the event to everyone who subscribed to the channel with the event type and additional data to pass across.\n\n\n## Conclusion\n\nWith this sample realtime Angular table, we can definitely build more with Pusher’s [channel](https://pusher.com/channels) event-based APIs to handle any form of realtime update needed in our [Angular](https://angular.io/) application. You can extend this sample application to handle edit by triggering another type of event and the data as `{id, data}`. With the `id` of the record that got updated from the server and the `data` as the changes.  Source code for both the frontend and the backend node server is located on [Github](https://github.com/christiannwamba/realtime-ng-table).","metaTitle":"Build a realtime table with Angular","metaDescription":"This tutorial takes you through building an Angular web app. The app displays a table designed to update in realtime to reflect changes in the database."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5apY2048FqkwOw2Kssywyo","type":"Entry","createdAt":"2018-05-08T07:24:27.718Z","updatedAt":"2018-05-08T08:44:50.671Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime poll using Angular","url":"live-poll-angular","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/angular-pusher-polls","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N8l3o0yD6QK2ooI2ME8wW","type":"Entry","createdAt":"2018-02-12T15:09:06.190Z","updatedAt":"2018-02-26T12:31:10.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Polls","url":"live-polls","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-05-07","description":"Build a polling application in Angular. Use Chart.js to visualize voting results in realtime.","prerequisite":"You will need Node and npm or Yarn installed on your machine. A basic knowledge of Angular and Node is required.","content":"An electronic polling system allows users cast their votes with ease without the hassle and stress of visiting a polling booth. This makes it easily accessible as it can be used by users anywhere in the world. Adding realtime functionality to the application improves the user experience as votes are seen in realtime. \n\nUsing [Angular](https://angular.io) you can extend the template language with your own components and use a wide array of existing components. \n\nTo follow this tutorial a basic understanding of Angular and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nIf you have no prior knowledge of Angular, kindly follow the tutorial [here](https://angular.io/tutorial). Come back and finish the tutorial when you’re done.\n\nWe’ll be using these tools to build out our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Angular](https://angular.io)\n- [Charts.js](http://www.chartjs.org/)\n\nWe’ll build a realtime polling application using Pusher , Angular and charts.js for data visualization.\n\nUsing our application users will get to vote for their favourite soccer player in the English Premier League.\n\nHere’s a demo of the final product:\n\n![angular-football-poll-demo](//images.ctfassets.net/1es3ne0caaid/40eDTb6o120IccY2CYEkym/3dfde317705621dccbdabdcb2b97a90d/angular-football-poll-demo.gif)\n\nWe’ll send our votes to the server and with the help of Pusher, update our polls in realtime. To make use of Pusher you’ll have to create an account [here](https://pusher.com). \n\nLet’s build!\n\n\n## Setup and folder structure\n\nTo get started, we will use the [CLI](https://cli.angular.io/) (command line interface) provided by the Angular team to initialize our project.\n\nFirst, install the CLI by running `npm install -g @angular/cli`. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [N](https://nodejs.org/en/)[ode](https://nodejs.org/en/) installed.\n\nTo create a new Angular project using the CLI, open a terminal and run  \n`ng new angular-realtime-polling` `--``style=scss`\n\nThe command is simply telling the CLI to create a new project called `angular-realtime-polling` and it should make use of the CSS pre-processor SCSS rather than CSS for styling.\n\nOpen the newly created `angular-realtime-polling`. Your folder structure should look something like this:\n\n```\n    angular-realtime-polling/\n      e2e/\n      node_modules/\n      src/\n        app/\n          app.component.html\n          app.component.ts\n          app.component.css\n          ...\n```\nOpen a terminal inside the project folder and start the application by running `ng serve` . If you open your browser and visit the link `http://localhost:4200` you should see the screenshot below if everything went well.\n\n![tables-angular-welcome-screen](//images.ctfassets.net/1es3ne0caaid/7Cw6E4WHFmaOogyKkK0MA/a660fc968171c614fd566c33c5e00d7d/tables-angular-welcome-screen.png)\n\n##  Building our server\n\nNow that we have our Angular application running, let’s build our server.\n\nTo do this we’ll need to install [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/). We’ll use this to receive requests from our Angular application.\n\nRun `npm install express` on a terminal inside the root folder of your project to install Express.\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: 'eu',\n      encrypted: true,\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\nWe referenced three packages that haven’t been installed, `body-parser`,  `pusher`  and `dotenv`. Install these packages by running `npm i body-parser pusher dotenv` in your terminal.\n\nThe `body-parser` package is used to parse incoming request bodies in a middleware before your handlers, available under the `req.body` property.\n\nThe calls to our endpoint will be coming in from a different origin, therefore we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nThis is a standard Node application configuration, nothing specific to our app.\n\nAlso you’ll notice that we installed [Pusher](https://pusher.com) library as a dependency.  Create a Pusher account and a new Pusher Channels app if you haven’t done so yet and get your `appId`, `key` and `secret`.\n\nThe last package, [dotenv](https://www.npmjs.com/package/dotenv) is a zero-dependency module that loads environment variables from a `.env` file into [process.env](https://nodejs.org/docs/latest/api/process.html#process_process_env). \n\nWe use this package so we don’t add sensitive information like our `appId` and `secret` directly into our code. To get these values loaded into our environment, we'll create a `.env` file in the root of our project. \n\nYour `.env` file should look something like the snippet below. We’ll add our Pusher `appId`, `key` and `secret` provided here.\n\n```\n    PUSHER_APP_ID=\u003cAPP_ID\u003e\n    PUSHER_KEY=\u003cPUSHER_KEY\u003e\n    PUSHER_SECRET=\u003cPUSHER_SECRET\u003e\n```\n\nIf you noticed, I added the `dotenv` package at the start of our file. This is done because we need to make the variables available throughout the file.\n\nPlease ensure you replace the following placeholder values above with your Pusher `appId`, `key` and `secret`.\n\n\n## Send votes\n\nTo enable users send requests to the server, we’ll create a route to handle incoming requests. Update your `server.js`  file with the code below. \n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    ...\n    \n    app.post('/vote', (req, res) =\u003e {\n      const { body } = req;\n      const { player } = body;\n      pusher.trigger('vote-channel', 'vote', {\n        player,\n      });\n      res.json({ player });\n    });\n    \n     ...\n```\n\n- We created a `POST /vote` route which, when hit, triggers a Pusher event.\n- We used [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to get the body of the request and also the player info sent by the user.\n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`vote-channel`), an event name (`vote`), and a payload.\n- The payload can be any value, but in this case we have a JS object. This object contains the name of the player being voted for\n- We still go ahead to respond with an object containing the voted player string so we can update the frontend with the data\n\n\n## Polling view\n\nOpen the `app.component.html` file and replace it with the content below.\n\n``` html\n    // app.component.html\n    \n    \u003cdiv\u003e\n      \u003ch2\u003eVote for your player of the season\u003c/h2\u003e\n      \u003cul\u003e\n        \u003cli *ngFor=\"let player of playerData\"\u003e\n          \u003cimg [src]=\"player.image\" [alt]=\"player.name\" (click)=\"castVote(player.shortName)\" [ngClass]=\"getVoteClasses(player.shortName)\"\u003e\n          \u003ch4\u003e{{player.name}}\u003c/h4\u003e\n          \u003cp\u003e{{player.goals}} goals\u003c/p\u003e\n          \u003cp\u003e{{player.assists}} assists\u003c/p\u003e\n        \u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/div\u003e\n```    \n\nIn the code snippet above, we looped through `playerData` to create a view based on the player’s information. \n\nThere are some undefined variables in code snippet above, don’t panic yet, we’ll define them in our component file below.\n\n### Styling\n\n``` scss\n    // app.component.scss\n    \n    div {\n      width: 60%;\n      margin: auto;\n      text-align: center;\n      ul {\n        list-style: none;\n        padding-left: 0;\n        display: flex;\n        justify-content: center;\n        li {\n          padding: 20px;\n          img {\n            width: 100px;\n            height: 100px;\n            border-radius: 50%;\n            box-shadow: 0 3px 4px 1px rgba(0, 0, 0, 0.1);\n            filter: grayscale(1);\n            border: 4px solid rgba(0, 0, 0, 0.2);\n            cursor: pointer;\n            \u0026.elect {\n              border: 3px solid rgb(204, 54, 54);\n              box-shadow: 0 4px 7px 1px rgba(0, 0, 0, 0.1);\n              filter: grayscale(0);\n              cursor: default;\n            }\n            \u0026.lost {\n              box-shadow: unset;\n              border: 4px solid rgba(0, 0, 0, 0.1);\n              \u0026:hover {\n                filter: grayscale(1);\n                cursor: default;\n              }\n            }\n            \u0026:hover {\n              filter: grayscale(0);\n            }\n          }\n          h4 {\n            font-size: 16px;\n            opacity: 0.9;\n            margin-bottom: 8px;\n            font-weight: lighter;\n          }\n          p {\n            font-size: 14px;\n            opacity: 0.6;\n            font-weight: bold;\n            margin: 4px 0;\n          }\n        }\n      }\n    }\n```    \n\nThese styles are meant to add a bit of life to our application. It also helps distinguish between states during application use. For example: the voted player is highlighted with a red border\n\n### App component\n\nIn the HTML snippet we made reference to some variables that weren’t yet defined, we’ll create the variables here with the logic behind our application. \n\n``` typescript\n    // app.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n    \n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.scss'],\n    })\n    export class AppComponent implements OnInit {\n      constructor(private http: HttpClient) {}\n      event = 'vote';\n      vote = '';\n      voted = false;\n      playerData = [\n        {\n          name: 'Mo. Salah',\n          goals: 30,\n          assists: 12,\n          shortName: 'salah',\n          image: 'https://platform-static-files.s3.amazonaws.com/premierleague/photos/players/250x250/p118748.png'\n        },\n        {\n          name: 'Christian Eriksen',\n          goals: 8,\n          assists: 13,\n          shortName: 'eriksen',\n          image: 'https://platform-static-files.s3.amazonaws.com/premierleague/photos/players/250x250/p80607.png',\n        },\n        {\n          name: 'Harry Kane',\n          goals: 26,\n          assists: 5,\n          shortName: 'kane',\n          image:\n            'https://platform-static-files.s3.amazonaws.com/premierleague/photos/players/40x40/p78830.png',\n        },\n        {\n          name: \"Kevin De'bruyne\",\n          goals: 10,\n          assists: 17,\n          shortName: 'kevin',\n          image: 'https://platform-static-files.s3.amazonaws.com/premierleague/photos/players/40x40/p61366.png',\n        },\n      ];\n      voteCount = {\n        salah: 0,\n        kane: 0,\n        eriksen: 0,\n        kevin: 0,\n      };\n      \n      castVote(player) {\n        this.http\n          .post(`http://localhost:4000/vote`, { player })\n          .subscribe((res: any) =\u003e {\n            this.vote = res.player;\n            this.voted = true;\n          });\n      }\n      \n      getVoteClasses(player) {\n        return {\n          elect: this.voted \u0026\u0026 this.vote === player,\n          lost: this.voted \u0026\u0026 this.vote !== player,\n        };\n      }\n      \n      ngOnInit() {\n      }\n    }\n```    \n\n\n- **castVote:** this method makes use of the native httpClient service to make requests to our server. It sends the name of the player being voted for in a POST request to the server. When a response is returned, it sets the `voted` property to `true` signifying that the user has placed a vote. Also, it sets the `vote` property to the name of the player being voted.\n- **getVoteClasses:**  this method sets classNames on each player element based on if a player was voted for or not.\n\nTo make use of the `HttpClient` service, we’ll need to import the `HttpClientModule` into the `app.module.ts` file. Update your app module file as follows:\n\n``` typescript\n    // app.module.ts\n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule } from '@angular/core';\n    import { AppComponent } from './app.component';\n    import {HttpClientModule} from '@angular/common/http';\n    \n    ....\n    @NgModule({\n      declarations: [AppComponent],\n      imports: [BrowserModule, HttpClientModule],\n      providers: [],\n      bootstrap: [AppComponent],\n    })\n      ....\n```\n\nBy now our application should look like this:\n\n![angular-football-poll-stage-1](//images.ctfassets.net/1es3ne0caaid/4DICk1XDSU26iq0CAMcgy6/5ac4b4f82450b5328b9d6ab0cc965411/angular-football-poll-stage-1.png)\n\n## Introducing Pusher\n\nSo far we have an application that enables users to cast votes but we have no way of keeping track of how others voted in realtime. We also have no way of visualizing the polling data. To solve both these problems, we’ll include the [Pusher](https://pusher.com) library and [Chart.js](http://www.chartjs.org/) for data visualization. \n\nOpen a terminal in the root folder of the project and install these packages by running the following command:\n\n `npm install pusher-js chart.js ng2-charts`\n\nTo make both libraries available in our project we’ll add the libraries as third party scripts to be loaded by Angular CLI. All CLI config is stored in `.angular-cli.json` file. Modify the `scripts` property to include the link to `pusher.min.js`. and `chart.js` files.\n\n``` json\n    // .angular-cli.json\n    ...\n    \n    \"scripts\": [\n      \"../node_modules/pusher-js/dist/web/pusher.min.js\",\n      \"../node_modules/chart.js/src/chart.js\"\n    ]\n     ...\n```         \n\nAfter updating this file, you’ll need to restart the angular server so that the CLI compiles the new script files we’ve just added.\n\nNow that Pusher has been made available in our project, we’ll create a Pusher service to be used application wide. The Angular CLI can aid in the service creation.  Open a terminal in your project’s root folder and run the following command.\n```\nng generate service pusher\n```\nThis command simply tells the CLI to generate a service named `pusher`. Now open the `pusher.service.ts` file and update it with the code below.\n\n``` typescript\n    // pusher.service.ts\n    \n    import { Injectable } from '@angular/core';\n    \n    declare const Pusher: any;\n    \n    @Injectable()\n    export class PusherService {\n      constructor() {\n        var pusher = new Pusher('\u003cPUSHER_KEY\u003e', {\n          cluster: 'eu',\n          encrypted: true,\n        });\n        this.channel = pusher.subscribe('vote-channel');\n      }\n      channel;\n      \n      public init() {\n        return this.channel;\n      }\n    }\n```    \n\n\n- First, we initialize Pusher in the constructor. \n- The  `init` method returns the Pusher property we created. \n- Ensure you replace the `PUSHER_KEY` string with your actual Pusher key.\n  \n\nTo make the service available application wide, import it into the module file.\n\n``` typescript\n    // app.module.ts\n    import {PusherService} from './pusher.service'\n    ...\n    \n    @NgModule({\n       ....\n       providers: [PusherService],\n       ....\n     })\n```\n \n We’ll make use of this service in our component, by binding to the vote event and incrementing the votes of the voted player returned in the event. This will be done in the `ngOnInit` lifecycle.\n\n``` typescript\n    // app.component.ts\n    import { Component, OnInit } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n    import { PusherService } from './pusher.service';\n    \n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.scss'],\n    })\n    export class AppComponent implements OnInit {\n      constructor(private pusher: PusherService, private http: HttpClient) {}\n      ...\n      \n      ngOnInit() {\n        const channel = this.pusher.init();\n        channel.bind('vote', ({ player }) =\u003e {\n          this.voteCount[player] += 1;\n        });\n      }\n    }\n```\n\n## Data visualization\n\nNow that our application has been built out, we’ll need to visualize the voting process using charts. This is vital because we need a way to determine the winner of the polls and how each person voted.\n\nTo make use of charts in our application, we’ll import the `ChartsModule` into our `app.module.ts` file.\n\n``` typescript\n    // app.module.ts\n    import {ChartsModule} from 'ng2-Charts';\n    ....\n    \n    @NgModule({\n      declarations: [AppComponent],\n      imports: [BrowserModule, HttpClientModule, ChartsModule],\n      providers: [PusherService],\n      bootstrap: [AppComponent],\n    })\n      ....\n```\n\nWe can then use the `canvas` component to provide visualization. Make the following changes to your `app.component.ts`, html and css files.\n\n``` typescript\n    // app.component.ts\n    ...\n    \n    playerData = [\n        {\n          name: 'Mo. Salah',\n          goals: 30,\n          assists: 12,\n          shortName: 'salah',\n          image:\n            'https://platform-static-files.s3.amazonaws.com/premierleague/photos/players/250x250/p118748.png',\n        }\n        ...\n      ];\n     voteCount = {\n        salah: 0,\n        kane: 0,\n        eriksen: 0,\n        kevin: 0,\n      };\n     chartLabels: string[] = Object.keys(this.voteCount);\n     chartData: number[] = Object.values(this.voteCount);\n     chartType = 'doughnut';\n    \n     ...\n     \n     ngOnInit() {\n        const channel = this.pusher.init();\n        channel.bind('vote', ({ player }) =\u003e {\n          this.voteCount[player] += 1;\n          // Update the chartData whenever there's a new vote\n          this.chartData = Object.values(this.voteCount);\n        });\n       }\n     } \n```\n    \n\n**chartLabels**:  we provide labels for our chart using the keys of the `voteCount` object.\n**chartData:**  the chart data will make use of the values of the `voteCount` object which signifies the vote count of each player.\n**chartType**: we specify the chart type we’ll use.\n\nWe also made a few changes to the `ngOnInit` lifecycle. We update the chartData values whenever there’s a new vote event.\n\n``` html\n    // app.component.html\n    \n    \u003cdiv\u003e\n        ...\n        \u003c/li\u003e\n      \u003c/ul\u003e\n      \n      \u003cdiv class=\"chart-box\" *ngIf=\"voted\"\u003e\n        \u003ch2\u003eHow others voted\u003c/h2\u003e\n        \u003ccanvas baseChart [data]=\"chartData\"\n        [labels]=\"chartLabels\" [chartType]=\"chartType\"\u003e\n        \u003c/canvas\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n\n\n    // app.component.scss\n    ...\n    \n    .chart-box{\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n    }\n```\n\n At this point, your application should have realtime updates when votes are placed. Ensure that the server is running alongside the Angular development server. If not, run `node server` and `ng serve` in two separate terminals. Both terminals should be opened in the root folder of your project.\n \n![angular-football-poll-complete](//images.ctfassets.net/1es3ne0caaid/3T73HIMEvCmmQwOCy4aMg6/d284da771bc3d8794939971c84bbfbf5/angular-football-poll-complete.png)\n \nTo test the realtime functionality of the application, open two browsers side-by-side and place votes. You’ll notice that votes placed on one reflect on the other browser.\n\n\n## Conclusion\n\nUsing Pusher,  we’ve built out an application using the pub/sub pattern without having to set up a WebSocket server. This shows how powerful Pusher is and how easy it is to set up. You can find the demo for this article on [Github](https://github.com/christiannwamba/angular-pusher-polls).","metaTitle":"Build a realtime poll using Angular","metaDescription":"This tutorial will show you how to build a polling web application with Angular and Node. You will use Chart.js to display the voting results in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7uX6yQQt3iUUAkEIKaMS6o","type":"Entry","createdAt":"2018-05-06T17:30:54.796Z","updatedAt":"2018-05-06T18:00:35.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Realtime data visualization using Next.js and Chart.js","url":"realtime-data-visualization-nextjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/gladchinda/realtime-visualization-react-demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N8l3o0yD6QK2ooI2ME8wW","type":"Entry","createdAt":"2018-02-12T15:09:06.190Z","updatedAt":"2018-02-26T12:31:10.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Polls","url":"live-polls","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-05-06","description":"Use Next.js and Chart.js to build a web app that receives user votes, presents the results as a graph, and updates the graph in realtime as more votes come in.","prerequisite":"You will need Node and npm or Yarn installed on your machine.","content":"When we talk about data visualization, what immediately comes to mind is analytics or some kind of statistical charts that help present data in a pictorial form. Using realtime technologies, it becomes possible to update the visualization as the data changes. This is no longer something new since virtually every data analytics service provides data visualization in realtime. However, as new technologies roll out, newer ways of creating realtime data visualization experiences emerge.\n\nIn this tutorial, we’ll build a very simple realtime data visualization application based on the data we get from a poll. \n\nHere is a screenshot of what we will end up building in this tutorial.\n\n![nextjs-data-visualization-demo](//images.ctfassets.net/1es3ne0caaid/lOph60Mu3ecem0Ecuam2G/d708e90fb2fbd8076c70fdc4559c3091/nextjs-data-visualization-demo.png)\n\n## Prerequisites\n\nBefore you begin, ensure that you have Node and npm or Yarn installed on your machine. Here is a run-down of the core technologies we will be using.\n\n\n1. [**Next.js**](https://learnnextjs.com/) - A framework for building server-side rendered(SSR) React applications with ease. It handles most of the challenges that come with building SSR React apps.\n\n\n2. [**Pusher**](https://pusher.com/) - Pusher is a technology for building apps with varying realtime needs like push notifications and pub/sub messaging. It is the engine behind the realtime ability of our data visualization app.\n\n\n3. [**Chart.js**](http://www.chartjs.org/) - Chart.js is a simple yet flexible JavaScript charting library that makes it possible to create different types of data visualization charts via a programmable interface.\n\n\n4. [**React**](https://reactjs.org/) - A very popular JavaScript DOM rendering framework for building scalable web applications using a component-based architecture.\n\nA few other libraries will be used as we will see in a moment. Also ensure that you have [Node](https://nodejs.org/) installed on your machine.\n\n\n### Installing dependencies\n\nCreate a new directory for the application and run the following command to install the required dependencies for the app.\n\n```\n    # Create a new directory\n    mkdir realtime-visualization-app\n    \n    # cd into the new directory\n    cd realtime-visualization-app\n    \n    # Initiate a new package and install app dependencies\n    npm init -y\n    \n    npm install react react-dom next pusher pusher-js chart.js react-chartjs-2\n    npm install express body-parser cors dotenv axios\n    npm install --save-dev cross-env npm-run-all\n```\n\n### Setting environment variables\n\nCreate a new application on your [Pusher Dashboard](https://dashboard.pusher.com/) to get your application credentials. Create a `.env` file in the root directory of your application and add your application credentials as follows. \n\n```\n    PUSHER_APP_ID=YOUR_APP_ID\n    PUSHER_APP_KEY=YOUR_APP_KEY\n    PUSHER_APP_SECRET=YOUR_APP_SECRET\n    PUSHER_APP_CLUSTER=YOUR_APP_CLUSTER\n```\n\nEnsure that you use the same variable names as specified in the above snippet. We will refer to them at several points in our code.\n\nNext create a `Next` configuration file named `next.config.js` in the root directory of your application with the following content:\n\n``` javascript\n    /* next.config.js */\n    \n    const webpack = require('webpack');\n    require('dotenv').config();\n    \n    module.exports = {\n      webpack: config =\u003e {\n        const env = Object.keys(process.env).reduce((acc, curr) =\u003e {\n          acc[`process.env.${curr}`] = JSON.stringify(process.env[curr]);\n          return acc;\n        }, {});\n        \n        config.plugins.push(new webpack.DefinePlugin(env));\n        \n        return config;\n      }\n    };\n```\n\nSince `Next.js` uses [Webpack](https://webpack.js.org/) in the background for module loading and bundling, we are simply configuring `Webpack` to be able to provide the environment variables we have defined and make them available to our React components by accessing the `process.env` object.\n\n\n## Getting started\n\n### Setting up the server\n\nWe will go ahead to setup a simple server using `Next.js` to wrap an [Express](https://expressjs.com/) application server. We will also load the necessary middlewares for the `Express` server and then we will configure Pusher using the credentials we added to our environment variables.\n\nCreate a `server.js` file in the root directory of your application and add the following code snippet to setup the server:\n\n``` javascript\n    /* server.js */\n    \n    const cors = require('cors');\n    const next = require('next');\n    const Pusher = require('pusher');\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const dotenv = require('dotenv').config();\n    \n    const dev = process.env.NODE_ENV !== 'production';\n    const port = process.env.PORT || 3000;\n    \n    const app = next({ dev });\n    const handler = app.getRequestHandler();\n    \n    // Ensure that your pusher credentials are properly set in the .env file\n    // Using the specified variables\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true\n    });\n    \n    app.prepare()\n      .then(() =\u003e {\n      \n        const server = express();\n        \n        server.use(cors());\n        server.use(bodyParser.json());\n        server.use(bodyParser.urlencoded({ extended: true }));\n        \n        server.get('*', (req, res) =\u003e {\n          return handler(req, res);\n        });\n        \n        server.listen(port, err =\u003e {\n          if (err) throw err;\n          console.log(`\u003e Ready on http://localhost:${port}`);\n        });\n        \n      })\n      .catch(ex =\u003e {\n        console.error(ex.stack);\n        process.exit(1);\n      });\n```\n\n### Modify npm scripts\n\nFinally, we will modify the `\"scripts\"` section of the `package.json` file to look like the following snippet:\n\n``` json\n    /* package.json */\n    \n    \"scripts\": {\n      \"dev\": \"node server.js\",\n      \"build\": \"next build\",\n      \"prod:server\": \"cross-env NODE_ENV=production node server.js\",\n      \"start\": \"npm-run-all -s build prod:server\"\n    }\n```\n\nWe have gotten all we need to start building our app components. If you run the command `npm run dev` on your terminal now, it will start up the application server on port `3000` if it is available. However, nothing happens on the browser yet, because we have not built any index page component. Let's start building the app components.\n\n\n## Building the index page\n\n`Next.js` requires that you create the page components of your app in a `pages` directory. We will go ahead and create a `pages` directory in our app root directory and create a new `index.js` file inside it for the index page of our application.\n\nIt is considered a good practice to have a layout that can be reused across multiple pages. It gives you a form of boilerplate and saves you from unnecessary repetitions.\n\nBefore we add content to the index page, we will build a `Layout` component that can be used in our app pages as a boilerplate. Go ahead and create a `components` directory in your app root. Create a new `Layout.js` file inside the just created `components`  directory with the following content:\n\n``` javascript\n    /* components/Layout.js */\n    \n    import React, { Fragment } from 'react';\n    import Head from 'next/head';\n    \n    const Layout = props =\u003e (\n      \u003cFragment\u003e\n        \u003cHead\u003e\n          \u003cmeta charSet=\"utf-8\" /\u003e\n          \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" /\u003e\n          \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossOrigin=\"anonymous\" /\u003e\n          \u003ctitle\u003e{props.pageTitle || 'Realtime Data Visualization'}\u003c/title\u003e\n        \u003c/Head\u003e\n        {props.children}\n      \u003c/Fragment\u003e\n    );\n    \n    export default Layout;\n```\n\nHere, we try not to do so much. We are simply using the `next/head` component to add meta information to the `\u003chead\u003e` of our pages. We have also added a link to the Bootstrap CDN file to add some default styling to our app. We are also setting the page title dynamically from props and rendering the page contents using `{props.children}`.\n\nNow let's go ahead and add content to the `index.js` file we created earlier:\n\n``` javascript\n    /* pages/index.js */\n    \n    import React, { Component, Fragment } from 'react';\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    import Layout from '../components/Layout';\n    \n    class IndexPage extends Component {\n      \n      render() {\n        return (\n          \u003cLayout pageTitle=\"Realtime Data Visualization\"\u003e\n            \u003cmain className=\"container-fluid position-absolute h-100 bg-light\"\u003e\n              \u003cdiv className=\"row position-absolute w-100 h-100\"\u003e\n              \n                \u003csection className=\"col-md-7 d-flex flex-row flex-wrap align-items-center align-content-center px-5 border-right border-gray\"\u003e\u003c/section\u003e\n                \n                \u003csection className=\"col-md-5 position-relative d-flex flex-wrap h-100 align-items-start align-content-between bg-white px-0\"\u003e\u003c/section\u003e\n                \n              \u003c/div\u003e\n            \u003c/main\u003e\n          \u003c/Layout\u003e\n        );\n      }\n      \n    }\n    \n    export default () =\u003e (\n      \u003cFragment\u003e\n        \u003cIndexPage /\u003e\n      \u003c/Fragment\u003e\n    );\n```\n\nWe are simply rendering container elements to the DOM with some basic styling using built-in classes provided by  `Bootstrap`. If you view the app now on your browser, you will see a blank page with divisions for the two `\u003csection\u003e` tags.\n\nWe will need two components, one in each of the two `\u003csection\u003e` tags we just created. First, we will have a `Poll` component for the poll’s question and answers. And then a `Stats` component for the data visualization. Let’s go ahead and build the `Poll` component.\n\n\n## Building the poll component\n\nCreate a new `Poll.js` file inside the `components` directory and add the following content:\n\n``` javascript\n    /* components/Poll.js */\n    \n    import React, { Component, Fragment } from 'react';\n    import axios from 'axios';\n    \n    class Poll extends Component {\n    \n      state = { selected: null }\n      \n      handleSubmit = evt =\u003e {\n        axios.post('/answer', { choice: this.state.selected });\n        this.setState({ selected: null });\n      }\n      \n      render() {\n      \n        const { selected: selectedChoice } = this.state;\n        const { question = null, choices = [] } = this.props;\n        \n        return (\n          \u003cFragment\u003e\n          \n            \u003cspan className=\"d-block w-100 h5 text-uppercase text-primary font-weight-bold mb-4\" style={{ marginTop: -50 }}\u003ePoll for the Day\u003c/span\u003e\n            \n            \u003cspan className=\"d-block w-100 h1 text-dark\"\u003e{question}\u003c/span\u003e\n            \n            \u003cdiv className=\"my-5 pt-0 pb-5\"\u003e\n              {\n                choices.map((choice, index) =\u003e {\n                \n                  const handleClick = selected =\u003e evt =\u003e this.setState({ selected });\n                  \n                  const selected = selectedChoice \u0026\u0026 selectedChoice === choice;\n                  \n                  const labelClass = ['custom-control-label pl-5 position-relative', selected ? 'checked' : ''].join(' ');\n                  \n                  return (\n                    \u003cdiv key={index} className=\"custom-control custom-radio py-3 ml-2 d-flex align-items-center\"\u003e\n                      \u003cinput className=\"custom-control-input\" type=\"radio\" name=\"poll-response\" id={`poll-response--radio-${index + 1}`} value={choice} checked={selected} /\u003e\n                      \n                      \u003clabel className={labelClass} htmlFor={`poll-response--radio-${index + 1}`} onClick={handleClick(choice)}\u003e{ choice }\u003c/label\u003e\n                    \u003c/div\u003e\n                  );\n                  \n                })\n              }\n            \u003c/div\u003e\n            \n            \u003cbutton type=\"button\" className={`btn btn-primary text-uppercase my-5 ml-4 px-5 py-3 d-block ${selectedChoice ? '' : 'in'}visible`} disabled={!selectedChoice} onClick={this.handleSubmit}\u003eSubmit\u003c/button\u003e\n            \n          \u003c/Fragment\u003e\n        );\n      }\n      \n    }\n    \n    export default Poll;\n```\n\nHere in the `Poll` component, we first initialized the state of the component with a null  `selected` property. The `selected` property will contain the selected choice for the poll.\n\nIn the `render()` method, you will notice that two props, `question` and `choices` are required for the `Poll` component. We simply render the `question` and then loop through the `choices`, rendering each one with a custom `radio \u003cinput\u003e` for selection.\n\nSelecting a `choice` updates the state `selected` property to the `selectedChoice` using an `onClick()` event handler. It then reveals a `\u003cbutton\u003e`, which will be used to submit the selected choice.\n\nThe submit `\u003cbutton\u003e` when clicked, triggers the `handleSubmit()` event handler. The `handleSubmit()` method simply makes a `POST` HTTP request to an `/answer` endpoint (which we will implement later on the server). It also resets the state `selected` property to `null`.\n\nNext, we will add some global styles to the index page for additional styling of the `Poll` elements. Make the following changes to the `pages/index.js` file. The default export should look like the following snippet:\n\n``` javascript\n    /* pages/index.js */\n    \n    export default () =\u003e (\n      \u003cFragment\u003e\n        \u003cIndexPage /\u003e\n        \u003cstyle global jsx\u003e{`\n        \n          .custom-control-label {\n            background: transparent;\n            color: #999;\n            font-size: 2rem;\n            font-weight: 500;\n            cursor: pointer;\n            line-height: 2.25rem;\n          }\n          \n          .custom-control-label:before, .custom-control-label:after {\n            top: 0;\n            left: -10px;\n            height: 2.25rem;\n            width: 2.25rem;\n            cursor: pointer;\n            box-shadow: none !important;\n          }\n          \n          .custom-control-label.checked {\n            color: #007bff !important;\n          }\n          \n          button.btn {\n            letter-spacing: 1px;\n            font-size: 1rem;\n            font-weight: 600;\n          }\n          \n        `}\u003c/style\u003e\n      \u003c/Fragment\u003e\n    );\n```\n\nHere, we employed the [styled-jsx](https://github.com/zeit/styled-jsx) styling option bundled into `Next.js` to provide support for isolated scoped CSS. You can learn more about how it works [here](https://github.com/zeit/next.js#css).\n\n\n## Building the stats component\n\nCreate a new `Stats.js` file inside the `components` directory and add the following content:\n\n``` javascript\n    /* components/Stats.js */\n    \n    import React, { Fragment } from 'react';\n    import { Line } from 'react-chartjs-2';\n    \n    const Stats = props =\u003e {\n    \n      const { choices = [], stats = {} } = props;\n      const counts = choices.map(choice =\u003e stats[choice] || 0);\n      const totalCount = counts.reduce((total, count) =\u003e total + count, 0);\n      \n      const chartData = {\n        labels: choices,\n        datasets: [\n          {\n            lineTension: 0,\n            backgroundColor: 'rgba(68, 204, 153, 0.05)',\n            borderColor: 'rgba(68, 204, 153, 0.9)',\n            borderWidth: 2,\n            borderJoinStyle: 'round',\n            pointRadius: 5,\n            pointBorderColor: '#fff',\n            pointBackgroundColor: 'rgba(68, 204, 153, 0.9)',\n            pointBorderWidth: 3,\n            data: counts\n          }\n        ]\n      };\n      \n      const chartOptions = {\n        layout: { padding: { top: 25, bottom: 75, left: 75, right: 75 } },\n        maintainAspectRatio: false,\n        scales: {\n          yAxes: [{\n            ticks: { beginAtZero: true, display: false }\n          }]\n        },\n        legend: { display: false },\n        title: {\n          display: true,\n          text: 'POLL COUNTS',\n          padding: 10,\n          lineHeight: 4,\n          fontSize: 20,\n          fontColor: '#677'\n        }\n      };\n      \n      return \u003cFragment\u003e\u003c/Fragment\u003e\n      \n    };\n    \n    export default Stats;\n```\n\nThe `Stats` component is stateless. Notice that we imported the `Line` export from the `react-chartjs-2` module. This will enable us plot `line-charts` for data visualization. The `Stats` component requires two props:\n\n\n1. `choices`  - an array of poll choices passed from the parent component.\n\n\n2. `stats`  - an object of poll choices passed from the parent component. The object `keys` are the choices, while the `values` map to the number of times each choice has been selected.\n\nWe extract the `poll counts` to a separate array and also store the `total count` in a variable using the `.map()` and `.reduce()` array methods.\n\nNext, we construct the `data` and `options` objects for the line chart we want to create. Notice that we set the `choices` array as our chart labels and the `counts` array as our chart dataset. You can check the [Chart.js Docs](http://www.chartjs.org/docs/latest/) to learn more about the available chart types and the options.\n\nLet’s go ahead and add the nodes we want to render in the `Stats` component. Modify the `Stats` component you just created. The `return` statement should look like the following snippet:\n\n``` javascript\n    /* components/Stats.js */\n    \n    return (\n      \u003cFragment\u003e\n      \n        \u003cdiv className=\"position-relative h-50 w-100 d-flex align-items-center border-bottom border-gray\"\u003e\n          \u003cLine data={chartData} width={100} height={50} options={chartOptions} /\u003e\n        \u003c/div\u003e\n        \n        \u003cdiv className=\"position-relative h-50 w-100 d-flex flex-wrap align-items-start align-content-start\"\u003e\n        \n          \u003cdiv className=\"d-flex flex-wrap w-100 text-center justify-content-center align-items-center align-content-center\" style={{ height: 'calc(100% - 150px)' }}\u003e\n            \u003cspan className=\"d-block w-100 text-uppercase pb-2 font-weight-bold text-secondary\" style={{ fontSize: '1.25rem' }}\u003eTotal Count\u003c/span\u003e\n            \u003cspan className=\"d-block w-100 text-dark\" style={{ fontSize: '5rem' }}\u003e{totalCount}\u003c/span\u003e\n          \u003c/div\u003e\n          \n          \u003cdiv className=\"w-100 d-flex justify-content-between align-items-center text-center border-top border-gray\" style={{ height: 100 }}\u003e\n            {\n              counts.map((count, index) =\u003e {\n                const className = ['h-100 position-relative d-flex align-items-center', index \u003e 0 ? 'border-left border-gray' : ''].join(' ');\n                \n                return (\n                  \u003cdiv key={index} className={className} style={{ width: '20%', fontSize: '2rem' }}\u003e\n                    \u003cspan className=\"d-block w-100 p-3 text-dark\"\u003e{count}\u003c/span\u003e\n                  \u003c/div\u003e\n                );\n              })\n            }\n          \u003c/div\u003e\n          \n          \u003cdiv className=\"w-100 d-flex justify-content-between align-items-center text-center border-top border-gray bg-light\" style={{ height: 50 }}\u003e\n            {\n              choices.map((choice, index) =\u003e {\n              \n                const className = ['h-100 position-relative d-flex align-items-center', index \u003e 0 ? 'border-left border-gray' : ''].join(' ');\n                \n                return (\n                  \u003cdiv key={index} className={className} style={{ width: '20%', fontSize: '0.7rem' }}\u003e\n                    \u003cspan className=\"d-block w-100 text-uppercase p-3 font-weight-bold text-secondary\"\u003e{choice}\u003c/span\u003e\n                  \u003c/div\u003e\n                );\n                \n              })\n            }\n          \u003c/div\u003e\n          \n        \u003c/div\u003e\n        \n      \u003c/Fragment\u003e\n    );\n```\n\nWe are rendering a `Line` chart using the `chartData` and `chartOptions` we defined earlier. You can learn more about how to configure the chart by checking the `[react-chartjs-2](https://github.com/jerairrest/react-chartjs-2)` package.\n\nWe also render the `totalCount`, as well as the `counts` for each of the choices. This is all we need for our `Stats` component.\n\n\n## Completing the index page component\n\nIt’s time for us to complete the index page component. We will need to set up `Pusher` and bind to a  `channel`. We will also need to bring in the `Poll` and `Stats` components we just created. Edit the `pages/index.js` file, modifying the `IndexPage` component to contain the following code snippet:\n\n``` javascript\n    /* pages/index.js */\n    \n    class IndexPage extends Component {\n    \n      state = { answers: {} }\n      \n      componentDidMount() {\n      \n        this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n          cluster: process.env.PUSHER_APP_CLUSTER,\n          encrypted: true\n        });\n        \n        this.channel = this.pusher.subscribe('poll-board');\n        \n        this.channel.bind('new-answer', ({ choice, count }) =\u003e {\n          let { answers } = this.state;\n          answers = { ...answers, [choice]: count };\n          this.setState({ answers });\n        });\n        \n        this.pusher.connection.bind('connected', () =\u003e {\n          axios.post('/answers')\n            .then(response =\u003e {\n              const answers = response.data.answers;\n              this.setState({ answers });\n            });\n        });\n        \n      }\n      \n      componentWillUnmount() {\n        this.pusher.disconnect();\n      }\n      \n      // render() method here ...\n      \n    }\n```\n\nHere is a simple break down of what we've done:\n\n\n1. We first initialized the state to contain an empty `answers` object property. This `answers` property will be updated as new answers come in. When the component mounts, we set up a Pusher connection and a `channel` subscription inside the `componentDidMount()` lifecycle method.\n\n\n2. You can see that we are subscribing to a Pusher channel called `poll-board`. We are then binding to the `new-answer` event on the channel, which is triggered from the server when a new answer is received. Next, we simply update the state `answers` property using the updated stats we receive from the server.\n\n\n3. Also, on the `componentDidMount()` method, we are binding to the `connected` event on the Pusher client, when it is freshly connected, to fetch the current answers stats from the server by making a `POST /answers` HTTP request using the `axios` library. Afterwards, we update the state `answers` property using the updated stats we receive from the server.\n\nNext, we will import the `Poll` and `Stats` components we just created and attach them to the rendered DOM. Begin by importing the new components into the `pages/index.js` file:\n\n``` javascript\n    /* pages/index.js */\n    \n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    import Poll from '../components/Poll';\n    import Stats from '../components/Stats';\n```\n\nNext, add the new components to the `\u003csection\u003e` elements in the `render()` method. Your `render()` method should look like the following snippet:\n\n``` javascript\n    /* pages/index.js */\n    \n    render() {\n      const question = `Which is the largest continent in the world by population?`;\n      const choices = ['Africa', 'Asia', 'Europe', 'North America', 'South America'];\n      \n      return (\n        \u003cLayout pageTitle=\"Realtime Data Visualization\"\u003e\n          \u003cmain className=\"container-fluid position-absolute h-100 bg-light\"\u003e\n            \u003cdiv className=\"row position-absolute w-100 h-100\"\u003e\n            \n              \u003csection className=\"col-md-7 d-flex flex-row flex-wrap align-items-center align-content-center px-5 border-right border-gray\"\u003e\n                \u003cdiv className=\"px-5 mx-5\"\u003e\n                  \u003cPoll question={question} choices={choices} /\u003e\n                \u003c/div\u003e\n              \u003c/section\u003e\n              \n              \u003csection className=\"col-md-5 position-relative d-flex flex-wrap h-100 align-items-start align-content-between bg-white px-0\"\u003e\n                \u003cStats choices={choices} stats={this.state.answers} /\u003e\n              \u003c/section\u003e\n              \n            \u003c/div\u003e\n          \u003c/main\u003e\n        \u003c/Layout\u003e\n      );\n    }\n```\n\nHere, we added a `question` and the corresponding `choices` and pass them to the `Poll` component as props. We are also passing the `choices` array alongside `this.state.answers` to the `Stats` component.\n\nSo far, our index page is complete and everything is working perfectly, except one little bit. If you test the app in your browser, with `npm run dev`, you should see this screen:\n\n![nextjs-data-visualization-demo-zero-votes](//images.ctfassets.net/1es3ne0caaid/1ZsVMZbCJe4wes2GI2gAGA/4b2dbce9f51d43799bb6ca5952fea945/nextjs-data-visualization-demo-zero-votes.png)\n\n\n## Adding the answer routes\n\nAs you might have observed, trying to submit your answer didn’t change the data visualization. This is because we have not yet implemented the `/answer`  and `/answers` routes on the server. Let’s go ahead and do that.\n\nModify the `server.js` file and add the following just before the call to `server.listen()` inside the `then()` callback function.\n\n``` javascript\n    /* server.js */\n    \n    // server.get('*') is here ...\n    \n    let answers = {};\n    \n    server.post('/answer', (req, res, next) =\u003e {\n      const { choice = null } = req.body;\n      \n      if (choice) {\n        const hasChoice = choice in answers \u0026\u0026 typeof answers[choice] === 'number';\n        const count = ( hasChoice ? Math.max(0, answers[choice]) : 0 ) + 1;\n        \n        answers = { ...answers, [choice]: count };\n        \n        pusher.trigger('poll-board', 'new-answer', { choice, count });\n      }\n    });\n    \n    server.post('/answers', (req, res, next) =\u003e {\n      res.json({ answers, status: 'success' });\n    });\n    \n    // server.listen() is here ...\n```\n\nFirst, we created a kind of in-memory store for our `answers` stats, to keep track of the answer counts. This is useful for new clients that join the channel to see up-to-date stats. Whenever the Pusher client makes a `POST` request to the `/answers` endpoint on connection, it gets all the up-to-date answers stats in the returned response.\n\nOn the `POST /answer` route, we are fetching the selected choice from `req.body` through the help of the `body-parser` middleware we added earlier. Next, we fetch the count for the selected choice from the `answers` object and increment it by `1`.\n\nFinally, we update the `answers` stats to reflect the increment, and then trigger a `new-answer` event on the `poll-board` Pusher channel, passing the updated `answers` stats. **This does the** **realtime** **magic**.\n\n**Bravo**. If you made it to this point, then you have successfully built a realtime data visualization app using Next.js and Pusher. Test the app now in your browser to see that everything works.\n\n\n## Conclusion\n\nIn this tutorial, we have been able to build a very simple realtime data visualization application using [Next.js](https://learnnextjs.com/), [React](https://reactjs.org/), [Chart.js](http://www.chartjs.org/) and [Pusher](https://pusher.com/). You can check the source code of this tutorial on [GitHub](https://github.com/gladchinda/realtime-visualization-react-demo).\n\nIn the bid to keep this tutorial as simple as possible, we were only interested in the poll counts. In a real application, you may want to do stuff like time-based visualization, polling rate visualization and statistical analysis of results in realtime.\n\nDo check the documentation for each technology we used in this project to learn more about other ways of using them. I duly hope that this tutorial is of help to you.\n\n\n\n","metaTitle":"Realtime data visualization using Next.js and Chart.js","metaDescription":"This brief tutorial demonstrates how to build a web app with Next.js and Chart.js. The app receives user votes, presents the results as a graph, and updates the graph in realtime as more votes come in."}}],"defaultValue":"Node.js","queryType":"tag","pages":19,"route":"/tutorials","query":{"tag":"Node.js","page":"12"}}},"page":"/tutorials","query":{"tag":"Node.js","page":"12"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Node.js&page=12 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:51 GMT -->
</html>