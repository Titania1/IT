<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=iOS&page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:31:20 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">43</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; iOS</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials3aba.html?tag=iOS" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsb729.html?product=Beams&amp;tag=iOS" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials0e67.html?product=Channels" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#C223CE"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; iOS"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/pokemon-react-native-part-1.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a Pokemon battle game with React Native - Part 1: Practice mode</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">In this three part series, use React Native and Node.js to create a two-player Pokemon-like game. In part one, implement...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-sharing-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a photo sharing app with React Native</h3><p class="css-k12xad e5jrto45">Use React Native, Node.js and Imgur to create a photo sharing app. Users will be able to follow their friends and share ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/building-message-delivery-status-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Building a message delivery status in Swift</h3><p class="css-k12xad e5jrto45">In this tutorial, we will learn how to implement message delivery status notifications in an iOS application using Swift...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/memory-game-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a two-player memory game with React Native</h3><p class="css-k12xad e5jrto45">This tutorial will show you how to build a two-player memory game using React Native. Players sign in and are randomly a...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/workout-tracker-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1"> Create a live workout tracking app with React Native</h3><p class="css-k12xad e5jrto45">This tutorial takes you through building a workout tracking app in React Native, with a Node backend. Users will be able...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/stocks-push-notifications-ios.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a live stocks application with push notifications for iOS</h3><p class="css-k12xad e5jrto45">This tutorial will show you how to build an iOS app that tracks stock prices. It features realtime updates and push noti...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-app-framework7.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app using Framework7</h3><p class="css-k12xad e5jrto45">Build a chat app for iOS and Android using Framework7 and Vue.js, with a simple Node.js backend. Framework7 is a free an...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/cryptocurrency-tracking-swift-laravel-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a cryptocurrency tracking app with push notifications using Swift and Laravel - Part 1: The backend</h3><p class="css-k12xad e5jrto45">Build a cryptocurrency tracking app featuring push notifications. Use Swift to create an iOS app, powered by a Laravel b...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/cryptocurrency-tracking-swift-laravel-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a cryptocurrency tracking app with push notifications using Swift and Laravel - Part 2: The iOS app</h3><p class="css-k12xad e5jrto45">Build a cryptocurrency tracking app featuring push notifications. Use Swift to create an iOS app, powered by a Laravel b...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials9593.html?product=Channels&amp;tag=iOS&amp;page=2" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials5d28.html?product=Channels&amp;tag=iOS&amp;page=1" class="css-5s6711 edg0byb1">1</a><a href="tutorials9593.html?product=Channels&amp;tag=iOS&amp;page=2" class="css-5s6711 edg0byb1">2</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials1750.html?product=Channels&amp;tag=iOS&amp;page=3" class="css-2wakph edg0byb1">3</a><a href="tutorials9672.html?product=Channels&amp;tag=iOS&amp;page=4" class="css-5s6711 edg0byb1">4</a><a href="tutorialsfc3a.html?product=Channels&amp;tag=iOS&amp;page=5" class="css-5s6711 edg0byb1">5</a><a href="tutorials9672.html?product=Channels&amp;tag=iOS&amp;page=4" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":43,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"42CAPFNPAcOKwEqcEqCMKg","type":"Entry","createdAt":"2018-11-28T20:27:47.217Z","updatedAt":"2018-11-28T20:27:47.217Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a Pokemon battle game with React Native - Part 1: Practice mode","url":"pokemon-react-native-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNPokeBattle","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4IiTE4WzzyQkoeAoaOqgcu","type":"Entry","createdAt":"2018-02-12T15:10:28.101Z","updatedAt":"2018-02-26T12:31:12.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Multiplayer Game","url":"multiplayer-game","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-11-28","description":"In this three part series, use React Native and Node.js to create a two-player Pokemon-like game. In part one, implement a practice mode, allowing users to play against a random computer-generated team.","prerequisite":"You will need Node 8+, Expo and Yarn installed on your machine.","content":"In this tutorial, we’ll be building a Pokemon battle game with React Native and Pusher.\n\nThese are the topics that will be covered in this series:\n\n- Part one: Practice mode\n\nIn this part, we’ll be implementing the game’s practice mode. This is where we’ll be implementing the team selection and battle screen (login screen is already pre-coded in the starter project). First, the user logs in and selects six Pokemon that they want to use for the battle. Once the user has confirmed their team, an opponent Pokemon team will be randomly generated. The user gets to battle each Pokemon in the opponent team, but they won’t fight back. \n\n- Part two: Two-player mode\n\nIn part two, we’ll be implementing the two-player mode. This is where we will use Pusher channels, and a Node server to match users who are currently looking for an opponent. Additionally, we’ll also be showing messages to inform both users on the actual attack that was used and its effectiveness (for example, Pikachu used Thunderbolt! It’s super effective).\n\n- Part three: Animations and sounds\n\nIn part three, we’ll be adding animations and sounds to make the game more interactive and fun to play with. Specifically, we’ll animate the health bar when a Pokemon is attacked, animate a couple of attacks (for example, Fire Punch or Ice Punch), and animate when the user switches to a new Pokemon or their current one faints. As for the sounds, we’ll add background music in each of the screens, and play the specific Pokemon cry as they get switched to or when they faint.\n\n\n## Prerequisites\n\nBasic knowledge of React Native, React Navigation, Redux, and ES6 syntax is required. \n\nWe’ll be using the following package versions:\n\n\n- Node 8.3.0\n- Yarn 1.7.0\n- Expo CLI 2.2.0\n- Expo SDK 30.0.0\n- Pusher 4.3.1\n\nIt’s always recommended to use the most recent versions available to you, but those versions are there as a reference in case there’s a major change with those packages which causes the code used in this series to not work.\n\nWe’ll be using [Expo](https://expo.io/) in order to easily test the app on multiple devices. [Install Expo](https://expo.io/learn) on your computer, then download the Expo client app for your [iOS](https://itunes.apple.com/us/app/expo-client/id982107779?mt=8) or [Android](https://play.google.com/store/apps/details?id=host.exp.exponent\u0026hl=en) device.\n\n\n## App overview\n\nIf you’re not familiar with how Pokemon battles are done, there are usually two Pokemon trainers, each has six Pokemon in hand. Each trainer will select one Pokemon to battle the other trainer’s Pokemon. The goal is to make the other Pokemon lose all of its health points (HP) by using different moves (for example, Thunderbolt or Hydro Pump). Once the Pokemon loses all of its HP, they cannot be used again. \n\nThe trainer can also switch out their Pokemon. This is usually done to take advantage of type-effectiveness (for example, fire type Pokemon is effective on grass types, but is weak against water types). \n\nIn the middle of the battle, the trainer can also bring back the lost HP of their Pokemon by using healing items (for example, potion). There are also items for healing status conditions (for example, sleep or paralysis). These status conditions are invoked by using specific moves like Sleep Powder or Thunder Wave.\n\nThe first trainer who loses all of their Pokemon loses the game, while the trainer who still has Pokemon wins. \n\nFor this app, we’re going to simplify things a bit by omitting the following features:\n\n- Status conditions - no conditions such as frozen, burned, and poisoned.\n- Item usage - no items such as full heal, max potion, berries.\n\nNow that you’re familiar with the game mechanics, it’s time for a quick overview of the final output for the whole series:\n\n1. When the user opens the app, they first have to enter a username: \n\n![rn-pokemon-1-1](//images.ctfassets.net/1es3ne0caaid/4KX8UDT4N2iWqUqcwMYWSy/a587870109055dafa132651791ffd2be/rn-pokemon-1-1.png)\n\n2. Next, they will need to select their team, which composed of six Pokemon. Once they have selected all six, a button for confirming their selection will show up:\n\n![rn-pokemon-1-2](//images.ctfassets.net/1es3ne0caaid/6uOYPOHJPGaOwKMQQeceMO/d560d1857418cbc80d215d4cce8d3897/rn-pokemon-1-2.png)\n\n3. Next, the app will look for an opponent:\n\n![rn-pokemon-1-3](//images.ctfassets.net/1es3ne0caaid/G1eEr1C2WGmKicccQkgI/32bf02419a6c5444456d813a52f12753/rn-pokemon-1-3.png)\n\n4. Once an opponent is found, it will show the battle screen. The first turn will go to the user who confirmed their team first.\n\n5. From the battle screen, the first Pokemon picked by the user is pre-selected to battle the opponent’s first Pokemon:\n\n![rn-pokemon-1-4](//images.ctfassets.net/1es3ne0caaid/2Lk7qxVIbey4GUWAOk406w/4c204ca8645e7ff482f69db88f8d8eb0/rn-pokemon-1-4.png)\n\n6. The user can either pick another Pokemon from their team or use one of the four moves by their current Pokemon:\n\n![rn-pokemon-1-5](//images.ctfassets.net/1es3ne0caaid/3WBPC7kod2IaMAOoqKEOGa/95f495baf2c5be89ec4d05b1a2d598a0/rn-pokemon-1-5.png)\n\n7. Once a move is chosen (either attack or switch), the user can no longer make another move until their opponent has made their move. Each user just takes their turns until such time that someone has defeated the whole team of their opponent.\n\nHere’s a gif of the battle screen:\n\n![rn-pokemon-1-6](//images.ctfassets.net/1es3ne0caaid/5Ims6nO5sQi0o0SQIym04I/c72134444dcaf78369477dba9e29fac2/rn-pokemon-1-6.gif)\n\nIn this part, we won’t be implementing all the features yet. As mentioned in the introduction earlier, the first part will be the practice mode. This is where the user only gets to play the game by themselves. \n\n\n## Clone the starter project\n\nThe app that we’re building is pretty huge, that’s why I created a starter project which contains the Pokemon data, UI components, helper functions, and the bare-bones version of each screen. This way, we don’t have to code everything from scratch and we can focus on the more important parts of the app.\n\nGo ahead and clone the repo, switch to the `starter` branch, and install all the packages we need for this part:\n\n```\n    git clone http://github.com/anchetaWern/RNPokeBattle\n    cd RNPokeBattle\n    git checkout starter\n    yarn install\n```\n\n## Overview of the starter project\n\nBefore we proceed with writing some code, let’s first do a quick tour of the code we have on the `starter` branch.\n\n### data\n\nThe `src/data` folder contains the pokemon (`src/data/pokemon_data.js`) and moves data (`src/data/moves_data`). Open those files so you have an idea of what the data structure looks like. The `moves` array in each of the Pokemon object in the `src/data/pokemon_data.js` file contains the ID’s of the moves in the `src/data/moves_data.js` file. The app will pick four random ID’s from the `moves` array and get its details from the `src/data/moves_data.js` file.\n\n### assets\n\nThe `assets` folder contains app assets such as images, fonts, and later on, the sound files. We’re using three different images for each Pokemon: sprite, front animated, and back animated. I got the sprites from [pokemondb.net](https://pokemondb.net/sprites), while the front and back gifs are from [pokestadium.com](http://www.pokestadium.com/tools/sprites). \n\nFor the custom font, we’re using [Aldrich from Google Fonts](https://fonts.google.com/specimen/Aldrich).\n\n### components\n\nThe `src/components` folder contains all the UI components used in the app:\n\n- `ActionList` - for showing the actions that the user can do. In this case, there are only two: attack and switch.\n- `HealthBar` - for showing the current health of each Pokemon.\n- `MovesList` - for showing the list of Pokemon moves.\n- `PokemonFullSprite` - for showing the back and front animated gifs of each Pokemon.\n- `PokemonList` - for showing a list of Pokemon for the team selection and battle screen.\n- `PokemonOption` - for showing the individual clickable Pokemon in the `PokemonList`.\n- `CustomText` - allows us to use the custom font.\n\nNote that the UI for these components are already written, but we still need to turn a few of them into “connected components” so they can dispatch actions and have access to the app’s global store.\n\n### helpers\n\nThe `src/helpers` folder contains the following helper functions:\n\n- `getMoveEffectivenessAndDamage.js` - for calculating damage made to a Pokemon based on a specific attack and the attacked Pokemon’s type defenses. \n- `randomInt.js` - for generating a random integer between a specific range.\n- `shuffleArray.js` - for sorting arrays in random order. It’s used for sorting the moves data randomly so that random moves can be picked for each Pokemon.\n- `uniqid.js` - for generating a unique ID for each member of your Pokemon team. \n\n### screens\n\nThe `src/screens` folder contains all the screens of the app. Only a placeholder content and the screen’s final styles are pre-written in the starter project. The Login screen is already completed because all it does is pass the username to the team selection screen as a navigation prop. Navigation code is also set up for all the screens, so all you have to do is navigate between the screens.\n\nLastly, to make it easier to debug the app, the initialization code for [Reactotron](https://github.com/infinitered/reactotron) is also pre-written. All you have to do is update the value for the `host` with the internal IP address assigned by your router to your computer. This way, Reactotron can find your Expo app. You can find that code in the `Root.js` file.\n\n\n## Build the app\n\nNow that you know which part of the app is already pre-written, we’re ready to implement the functionality for each screen.\n\n### Team selection screen actions\n\nCreate a `src/actions/types.js` file. This is where we will add all the action types that can be performed in the app. First, let’s add the actions that can be performed in the team selection screen:\n\n``` javascript\n    export const SELECT_POKEMON = \"select_pokemon\"; // for marking Pokemon as selected\n    \n    export const SET_POKEMON = \"set_pokemon\"; // for setting a specific Pokemon as the current Pokemon used for battle\n    export const SET_TEAM = \"set_team\"; // for setting a Pokemon team\n```\n\nNext, create a `src/actions/index.js` file, this is where we will add all the action creators for the whole app. Start by adding the functions that will be dispatched when selecting a Pokemon in the team selection screen, and setting the user’s current Pokemon and Pokemon team:\n\n``` javascript\n    import {\n      SELECT_POKEMON,\n      SET_POKEMON,\n      SET_TEAM\n    } from \"./types\";\n    \n    export const selectPokemon = (id, pokemon_data, is_selected) =\u003e { // accepts the Pokemon ID, Pokemon object, and a boolean representing whether it's selected or not\n      return {\n        type: SELECT_POKEMON,\n        id,\n        pokemon_data,\n        is_selected\n      };\n    };\n    \n    export const setPokemon = pokemon =\u003e { // accepts a single Pokemon object\n      return {\n        type: SET_POKEMON,\n        pokemon\n      };\n    };\n    \n    export const setTeam = team =\u003e { // accepts an array of Pokemon object data (same as the ones you find in src/data/pokemon_data.js)\n      return {\n        type: SET_TEAM,\n        team\n      };\n    };\n```\n\n### Team selection screen reducer\n\nCreate a `src/reducers/TeamReducer.js` file. This reducer is responsible for specifying how the store will change when the action for selecting a Pokemon is dispatched. Specifically, it describes how the `selected_pokemon` array changes when it receives the `SELECT_POKEMON` action. It only processes the request further if less than six Pokemon are currently selected. From there, it pushes the selected Pokemon into the `selected_pokemon` array, and removes it if it’s deselected (when `action.is_selected` is `false`):\n\n``` javascript\n    import { SELECT_POKEMON } from \"../actions/types\";\n    \n    import pokemon_data from \"../data/pokemon_data\";\n    \n    const INITIAL_STATE = {\n      pokemon: pokemon_data,\n      selected_pokemon: [] // stores the currently selected Pokemon\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      switch (action.type) {\n        case SELECT_POKEMON:\n          let pokemon = [...state.pokemon];\n          let selected_pokemon = [...state.selected_pokemon];\n    \n          const is_selected = action.is_selected;\n    \n          if (state.selected_pokemon.length \u003c 6 || is_selected) { // there should only be six selected Pokemon\n            pokemon = pokemon.map(item =\u003e {\n              if (item.id == action.id) { // only modify the Pokemon specified in the action\n                item.is_selected = !is_selected; // flip the current is_selected value \n              }\n              return item;\n            });\n    \n            if (is_selected) {\n              const index_to_remove = selected_pokemon.findIndex(\n                item =\u003e item.id == action.id\n              );\n              selected_pokemon.splice(index_to_remove, 1);\n            } else {\n              selected_pokemon.push(action.pokemon_data);\n            }\n          }\n    \n          return { ...state, pokemon, selected_pokemon };\n    \n        default:\n          return state;\n      }\n    };\n```\n\nAs you noticed in the code above, we’re only processing the `SELECT_POKEMON` action type. This is because `SET_POKEMON` and `SET_TEAM` will be processed in the reducer for the battle screen related actions which we’ll add it shortly. We only added them in the action types and action creators file because they’re needed in the team selection screen.\n\n### Battle screen reducers for Team selection screen\n\nCreate a `src/reducers/BattleReducer.js` file, and add the reducers responsible for setting the user’s Pokemon team and current Pokemon:\n\n``` javascript\n    import {\n      SET_TEAM,\n      SET_POKEMON\n    } from \"../actions/types\";\n    \n    const INITIAL_STATE = {\n      team: [], // the user's Pokemon team\n      pokemon: null // currently selected pokemon by user (the one being shown in the UI)\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      switch (action.type) {\n        case SET_TEAM:\n          const { team } = action;\n          return { ...state, team };\n    \n        case SET_POKEMON:\n          const pokemon = action.pokemon;\n          return { ...state, pokemon };\n    \n        default:\n          return state;\n      }\n    };\n```\n\n### Bringing all the reducers together\n\nCreate a `src/reducers/index.js` file, and combine the two reducer files we created earlier. This allows us to import only this file when we need to include all the reducers that we need:\n\n``` javascript\n    import { combineReducers } from \"redux\";\n    import TeamReducer from \"./TeamReducer\";\n    import BattleReducer from \"./BattleReducer\";\n    \n    export default combineReducers({\n      team_selection: TeamReducer,\n      battle: BattleReducer\n    });\n```\n\n### Add the store to the app\n\nAt this point, we’re now ready to add the global app store:\n\n``` javascript\n    // Root.js\n    import { Provider } from \"react-redux\";\n    import { compose, createStore } from \"redux\";\n    import reducers from \"./src/reducers\";\n```\n\nTo make debugging the store easier, you may also add Reactotron Redux to your existing Reactotron configuration:\n\n``` javascript\n    import { reactotronRedux } from \"reactotron-redux\";\n    Reactotron.configure({ host: \"IP_ADDRESS_ASSIGNED_BY_YOUR_ROUTER\" })\n      .useReactNative()\n      .use(reactotronRedux()) // add this\n      .connect();\n```\n\nDon’t forget to add Reactotron Redux as your dev dependency:\n\n```\n    yarn add --dev reactotron-redux\n```\n\nLastly, update the `render` function so it wraps everything in the `Provider` component which uses the store:\n\n``` javascript\n    // Root.js\n    render() {\n      return (\n        \u003cProvider store={store}\u003e\n          \u003cRootStack /\u003e\n        \u003c/Provider\u003e\n      );\n    }\n```\n\n### Team selection screen\n\nThe team selection screen is where the user gets to pick the Pokemon they want to use to battle their opponent. Start by importing the action creators for setting the team and current Pokemon:\n\n``` javascript\n    // src/screens/TeamSelectionScreen.js\n    import { connect } from \"react-redux\";\n    \n    import { setTeam, setPokemon } from \"../actions\";\n    import moves_data from \"../data/moves_data\";\n```\n\nNext, scroll down to the part where the component is exported and add the function for mapping specific values in the store as props for this component. In this case, we only need values from the team reducer (`src/reducers/TeamReducer.js`). We gave it a name of `team_selection` in the `src/reducers/index.js` file, so that’s what we’re extracting:\n\n``` javascript\n    const mapStateToProps = ({ team_selection }) =\u003e {\n      const { pokemon, selected_pokemon } = team_selection;\n      \n      // return pokemon and selected_pokemon as props for this component\n      return {\n        pokemon, // all the Pokemon available for selection (a copy of src/data/pokemon_data.js)\n        selected_pokemon // array of selected Pokemon\n      };\n    };\n    \n    // next: add mapDispatchToProps\n```\n\nSince we want to set the team and current Pokemon from this screen, we create the function that allows us to dispatch the `setTeam` and `setPokemon` actions. This allows us to update the store with a new `team` and `pokemon` data by executing the similarly named `setTeam` and `setPokemon` functions returned from this function. Note that you don’t need to use the same name we used for the action creators. If it makes sense to use a different name, then do it (for example, if you get confused whether a specific function is referring to the function returned from `mapDispatchToProps` or the action creator itself):\n\n``` javascript\n    const mapDispatchToProps = dispatch =\u003e {\n      // for updating the value of team and pokemon in src/reducers/BattleReducer.js\n      return {\n        setTeam: team =\u003e {\n          dispatch(setTeam(team));\n        },\n        setPokemon: pokemon =\u003e {\n          dispatch(setPokemon(pokemon));\n        }\n      };\n    };\n    \n    // next: convert component into a connected one\n```\n\nNext, convert the component into a connected component. This gives us access to the specific values we returned earlier on `mapStateToProps` as props, and call the functions we returned in `mapDispatchToProps` earlier:\n\n``` javascript\n    export default connect(\n      mapStateToProps,\n      mapDispatchToProps\n    )(TeamSelectionScreen);\n```\n\nAt this point, we’re now ready to update the `render` method of the team selection screen. By default, we only display the `PokemonList`. As mentioned in the **overview of the starter project** section earlier, the `PokemonList` function is responsible for rendering a list of Pokemon. All you have to do is supply an array of Pokemon data to its `data` prop. The `pokemon` data is available in the store and it’s made available as a prop via the `mapStateToProps` function. The same is true of the `selected_pokemon`. We’re using it to determine whether to show the button to confirm the team. Once the user clicks on it, the `ActivityIndicator` will be shown to indicate that the app is looking for an opponent:\n\n``` javascript\n    render() {\n      const { selected_pokemon } = this.props;\n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cCustomText styles={[styles.headerText]}\u003eSelect your team\u003c/CustomText\u003e\n    \n          {selected_pokemon.length == 6 \u0026\u0026 (\n            \u003cView\u003e\n              {this.state.is_loading \u0026\u0026 (\n                \u003cView style={styles.loadingContainer}\u003e\n                  \u003cActivityIndicator size=\"large\" color=\"#ffbf5a\" /\u003e\n                  \u003cCustomText styles={styles.messageText}\u003e\n                    Waiting for opponent..\n                  \u003c/CustomText\u003e\n                \u003c/View\u003e\n              )}\n    \n              {!this.state.is_loading \u0026\u0026 (\n                \u003cTouchableOpacity\n                  style={styles.confirmButton}\n                  onPress={this.confirmTeam}\n                \u003e\n                  \u003cCustomText\u003eConfirm Selection\u003c/CustomText\u003e\n                \u003c/TouchableOpacity\u003e\n              )}\n            \u003c/View\u003e\n          )}\n          \u003cPokemonList\n            data={this.props.pokemon}\n            numColumns={1}\n            action_type={\"select-pokemon\"}\n          /\u003e\n        \u003c/View\u003e\n      );\n    }\n    \n    // next: add confirmTeam function\n```\n\nNext, add the code for the function that gets executed when the button for confirming the team is clicked. This adds some of the required data for the battle screen. This includes the health points, the unique team member ID, and the random Pokemon moves data for each Pokemon in the team:\n\n``` javascript\n    // src/screens/TeamSelectionScreen.js\n    \n    confirmTeam = () =\u003e {\n      const { selected_pokemon, setTeam, setPokemon, navigation } = this.props;\n    \n      let team = [...selected_pokemon]; // the array which stores the data for the Pokemon team selected by the user\n      \n      team = team.map(item =\u003e {\n        let hp = 500; // the total health points given to each Pokemon\n    \n        let shuffled_moves = shuffleArray(item.moves);\n        let selected_moves = shuffled_moves.slice(0, 4);\n    \n        let moves = moves_data.filter(item =\u003e {\n          return selected_moves.indexOf(item.id) !== -1;\n        });\n    \n        let member_id = uniqid();\n    \n        return {\n          ...item,\n          team_member_id: member_id, // unique ID for identifying each Pokemon in the team\n          current_hp: hp, // current HP. This gets updated when an opponent Pokemon attacks\n          total_hp: hp,\n          moves: moves,\n          is_selected: false // no longer needed\n        };\n      });\n      \n      // update the store with the new team and Pokemon data\n      setTeam(team);\n      setPokemon(team[0]);\n      \n      // next: set is_loading to true in state and navigate to Battle screen\n    };\n```\n\nNext, we want to emulate that the app is actually trying to find an opponent for the user, so we’ll trigger the `ActivityIndicator` to be visible for 2.5 seconds before we navigate to the battle screen:\n\n``` javascript\n    this.setState({\n      is_loading: true // show activity indicator\n    });\n    \n    setTimeout(() =\u003e {\n      const username = navigation.getParam(\"username\");\n    \n      this.setState({\n        is_loading: false\n      });\n    \n      navigation.navigate(\"Battle\", {\n        username: username\n      });\n    }, 2500); // 2.5 seconds\n```\n\nWe will update the above code in part two, so it actually tries to find a real opponent for the user.\n\n### Dispatch the action for selecting a Pokemon\n\nWe haven’t actually added the code that actually selects or deselects a specific Pokemon to be added to the team, so let’s go ahead and add it. If you open the `src/components/PokemonList/PokemonList.js` file, you will see that it uses the `PokemonOption` component to render each of the Pokemon items that you see in the team selection screen. We’re not really passing any functions in there so the actual function should be declared in the `PokemonOption` itself. Start by importing the action for selecting a Pokemon:\n\n``` javascript\n    // src/components/PokemonOption/PokemonOption.js\n    \n    import { connect } from \"react-redux\";\n    \n    import { selectPokemon } from \"../../actions\";\n```\n\nNext, use `mapDispatchToProps` so you can dispatch the action via a `togglePokemon` function which you can call inside the component’s body. This expects the `id` of the Pokemon, an object containing the Pokemon data, and a boolean that indicates whether it’s currently selected or not:\n\n``` javascript\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        togglePokemon: (id, pokemon_data, is_selected) =\u003e {\n          dispatch(selectPokemon(id, pokemon_data, is_selected));\n        }\n      };\n    };\n    \n    export default connect(\n      null,\n      mapDispatchToProps\n    )(PokemonOption);\n```\n\nNext, extract the `togglePokemon` function from the props:\n\n``` javascript\n    const PokemonOption = ({\n       // previously added code here..\n       \n      // add this:\n      togglePokemon\n    }) =\u003e {\n      // existing code here...\n    });\n```\n\nWhen the user clicks on the component, the `action_type` is first determined. This component is used for both team selection and Pokemon selection (in the battle screen later), so we need to determine the context in which it was called. An `action_type` of `select-pokemon` means that it was called from the team selection screen, thus we call the `togglePokemon` function to select or deselect it. The `action_type` prop is passed to the `PokemonList` component and down to the `PokemonOption`:\n\n``` javascript\n    onPress={() =\u003e {\n      if (action_type == \"select-pokemon\") {\n        togglePokemon(id, pokemon_data, is_selected);\n      } \n    }}\n```\n\n### Battle screen actions\n\nNow that we’ve implemented the team selection screen, let’s proceed with adding the code for the battle screen. Start by updating the action types file to include the actions that can be performed in the battle screen:\n\n``` javascript\n    // src/actions/types.js\n    \n    // existing code here...\n    \n    // add these:\n    export const SET_OPPONENT_TEAM = \"set_opponent_team\";\n    \n    export const SET_MOVE = \"set_move\";\n    \n    export const SET_OPPONENT_POKEMON = \"set_opponent_pokemon\";\n    export const SET_OPPONENT_POKEMON_HEALTH = \"set_opponent_pokemon_health\";\n    \n    export const REMOVE_POKEMON_FROM_OPPONENT_TEAM =\n      \"remove_pokemon_from_opponent_team\";\n```\n\nNext, create an action creator for the action types we just added:\n\n``` javascript\n    // src/actions/index.js\n    \n    import {\n      // existing action types here...\n      \n      // add these:\n      SET_OPPONENT_TEAM,\n      SET_MOVE,\n      SET_OPPONENT_POKEMON,\n      SET_OPPONENT_POKEMON_HEALTH,\n      REMOVE_POKEMON_FROM_OPPONENT_TEAM\n    } from \"./types\";\n    \n    // add these after the last function:\n    export const setOpponentTeam = team =\u003e { // accepts an array that contains the Pokemon data of the team selected by the user\n      return {\n        type: SET_OPPONENT_TEAM,\n        team \n      };\n    };\n    \n    export const setMove = move =\u003e { // accepts an object containing the move data (same as what you see in src/data/moves_data.js)\n      return {\n        type: SET_MOVE,\n        move\n      };\n    };\n    \n    export const setOpponentPokemon = pokemon =\u003e { // accepts an object containing the data of the Pokemon selected by the opponent\n      return {\n        type: SET_OPPONENT_POKEMON,\n        pokemon\n      };\n    };\n    \n    export const setOpponentPokemonHealth = (team_member_id, health) =\u003e { // accepts the team_member_id of the opponent's Pokemon, and the new health points to be assigned\n      return {\n        type: SET_OPPONENT_POKEMON_HEALTH,\n        team_member_id,\n        health\n      };\n    };\n    \n    export const removePokemonFromOpponentTeam = team_member_id =\u003e { // accepts the team_member_id of the Pokemon to be removed from the opponent's team\n      return {\n        type: REMOVE_POKEMON_FROM_OPPONENT_TEAM,\n        team_member_id\n      };\n    };\n```\n\n### Battle screen reducers for Battle screen\n\nNext, let’s add the reducers for the Battle screen:\n\n``` javascript\n    // src/reducers/BattleReducer.js\n    \n    import {\n      // existing code here...\n      \n      // add these:\n      SET_OPPONENT_TEAM,\n      SET_MOVE,\n      SET_OPPONENT_POKEMON,\n      SET_OPPONENT_POKEMON_HEALTH,\n      REMOVE_POKEMON_FROM_OPPONENT_TEAM\n    } from \"../actions/types\";\n```\n\nNext, include the additional state that we will manage in this reducer. This includes the user’s current `move`. It controls what the user sees in the bottom part of the screen. By default, it’s set to `select-move`, this allows the user to either attack with their current Pokemon or switch to another one from their team. The user also needs to access the data for their opponent’s team so we have the `opponent_team` and `opponent_pokemon` (the opponent’s current Pokemon) as well:\n\n``` javascript\n    const move_display_text = {\n      \"select-move\": \"Select your move\", // main menu (choose whether to attack or switch)\n      \"select-pokemon\": \"Which Pokemon will you use?\", // choose another Pokemon from team\n      \"select-pokemon-move\": \"Which attack will you use?\" // choose a move by their current Pokemon\n    };\n    \n    const default_move = \"select-move\";\n    \n    const INITIAL_STATE = {\n      // existing code here..\n      \n      // add these:\n      move: default_move,\n      move_display_text: move_display_text[default_move],\n      opponent_team: [],\n      opponent_pokemon: null // currently selected pokemon by opponent \n    };\n```\n\nNext, add the reducers that will process the actions. Add these before the default condition of the switch statement:\n\n``` javascript\n    case SET_OPPONENT_TEAM: // for setting the opponent's team\n      return { ...state, opponent_team: action.team };\n    \n    case SET_MOVE: // for setting the controls currently displayed in the user's screen\n      const { move } = action; \n      return { ...state, move, move_display_text: move_display_text[move] };\n    \n    case SET_OPPONENT_POKEMON: // for setting the opponent's current Pokemon\n      const opponent_pokemon = action.pokemon\n        ? action.pokemon\n        : state.opponent_team[0]; // if the action didn't pass a Pokemon, use the first Pokemon in the opponent's team instead\n      return { ...state, opponent_pokemon };\n    \n    case SET_OPPONENT_POKEMON_HEALTH: // for updating the opponent's current Pokemon's health\n      let opponent_team = [...state.opponent_team];\n      opponent_team = opponent_team.map(item =\u003e {\n        if (item.team_member_id == action.team_member_id) {\n          item.current_hp = action.health;\n        }\n        return item;\n      });\n    \n      return { ...state, opponent_team };\n    \n    case REMOVE_POKEMON_FROM_OPPONENT_TEAM: // for removing a specific Pokemon from opponent's team after it faints (when its HP goes below 1)\n      const diminished_opponent_team = [...state.opponent_team].filter(item =\u003e {\n        return item.team_member_id != action.team_member_id;\n      });\n    \n      return { ...state, opponent_team: diminished_opponent_team };\n```\n\n### Battle screen\n\nThe battle screen is where the user battles a random opponent. As mentioned earlier, we’re only going to generate a random Pokemon team and let the user attack each Pokemon in the opponent team one by one. Start by importing all the necessary packages, data, actions, and helper functions:\n\n``` javascript\n    // src/screens/BattleScreen.js\n    \n    import { connect } from \"react-redux\";\n    import pokemon_data from \"../data/pokemon_data.js\";\n    import moves_data from \"../data/moves_data\";\n    \n    import uniqid from \"../helpers/uniqid\";\n    import randomInt from \"../helpers/randomInt\";\n    import shuffleArray from \"../helpers/shuffleArray\";\n    \n    import { setOpponentTeam, setOpponentPokemon, setMove } from \"../actions\";\n```\n\nNext, scroll down to the part where the component class is exported and add the following code before it. These are the data from the store that we’re going to need:\n\n``` javascript\n    const mapStateToProps = ({ battle }) =\u003e {\n      const {\n        team,\n        move,\n        move_display_text,\n        pokemon,\n        opponent_team,\n        opponent_pokemon\n      } = battle;\n      return {\n        team,\n        move,\n        move_display_text,\n        pokemon,\n        opponent_team,\n        opponent_pokemon\n      };\n    };\n```\n\nNext, add the functions that will dispatch the actions for setting what the user sees in their controls UI, setting the opponent team, and setting the opponent Pokemon:\n\n``` javascript\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        backToMove: () =\u003e {\n          dispatch(setMove(\"select-move\"));\n        },\n        setOpponentTeam: team =\u003e {\n          dispatch(setOpponentTeam(team));\n        },\n        setOpponentPokemon: pokemon =\u003e {\n          dispatch(setOpponentPokemon(pokemon));\n        }\n      };\n    };\n```\n\nDon’t forget to pass those functions when exporting the component:\n\n``` javascript\n    export default connect(\n      mapStateToProps,\n      mapDispatchToProps\n    )(BattleScreen);\n```\n\nOnce the component is mounted, this is where we generate the data for the random team:\n\n``` javascript\n    componentDidMount() {\n    \n      const { setOpponentTeam, setOpponentPokemon } = this.props;\n    \n      let random_pokemon_ids = [];\n      for (let x = 0; x \u003c= 5; x++) {\n        random_pokemon_ids.push(randomInt(1, 54));\n      }\n    \n      let opposing_team = pokemon_data.filter(item =\u003e {\n        return random_pokemon_ids.indexOf(item.id) !== -1;\n      });\n    \n      opposing_team = opposing_team.map(item =\u003e {\n        let hp = 500;\n    \n        let shuffled_moves = shuffleArray(item.moves);\n        let selected_moves = shuffled_moves.slice(0, 4);\n    \n        let moves = moves_data.filter(item =\u003e {\n          return selected_moves.indexOf(item.id) !== -1;\n        });\n    \n        let member_id = uniqid();\n    \n        return {\n          ...item,\n          team_member_id: member_id,\n          current_hp: hp,\n          total_hp: hp,\n          moves: moves,\n          is_selected: false\n        };\n      });\n      \n      // update the store with the opponent team and current opponent Pokemon\n      setOpponentTeam(opposing_team);\n      setOpponentPokemon(opposing_team[0]);\n      \n    }\n```\n\nNext, we render the UI for the battle screen. Start by extracting all the data and functions that we need from the store:\n\n``` javascript\n    render() {\n      const {\n        team,\n        move,\n        move_display_text,\n        pokemon,\n        opponent_pokemon,\n        backToMove\n      } = this.props;\n      \n      // next: add code for returning the Battle screen UI\n    }\n```\n\nNext, return the UI. The battle screen is divided into two sections: battleground and controls:\n\n``` javascript\n    return (\n      \u003cView style={styles.container}\u003e\n        \u003cCustomText styles={[styles.headerText]}\u003eFight!\u003c/CustomText\u003e\n    \n        \u003cView style={styles.battleGround}\u003e\n          // next: render Pokemon and opponent Pokemon UI\n        \u003c/View\u003e\n        \n        \u003cView style={styles.controls}\u003e\n          // next: add battle controls UI\n        \u003c/View\u003e\n      \u003c/View\u003e\n    );\n```\n\nThe battleground section displays both the user’s and their opponent’s current Pokemon, along with their health points. This uses the pre-created `HealthBar` and `PokemonFullSprite` components:\n\n``` javascript\n    {opponent_pokemon \u0026\u0026 (\n      \u003cView style={styles.opponent}\u003e\n        \u003cHealthBar\n          currentHealth={opponent_pokemon.current_hp}\n          totalHealth={opponent_pokemon.total_hp}\n          label={opponent_pokemon.label}\n        /\u003e\n        \u003cPokemonFullSprite\n          pokemon={opponent_pokemon.label}\n          spriteFront={opponent_pokemon.front}\n          spriteBack={opponent_pokemon.back}\n          orientation={\"front\"}\n        /\u003e\n      \u003c/View\u003e\n    )}\n    \n    {pokemon \u0026\u0026 (\n      \u003cView style={styles.currentPlayer}\u003e\n        \u003cHealthBar\n          currentHealth={pokemon.current_hp}\n          totalHealth={pokemon.total_hp}\n          label={pokemon.label}\n        /\u003e\n    \n        \u003cPokemonFullSprite\n          pokemon={pokemon.label}\n          spriteFront={pokemon.front}\n          spriteBack={pokemon.back}\n          orientation={\"back\"}\n        /\u003e\n      \u003c/View\u003e\n    )}\n```\n\nThe controls section displays the options that the user can select to control what their move is going to be (either attack with their current Pokemon or switch to another one from their team). These are the default controls that the user is going to see. As you’ve seen in the battle reducer file earlier, this is controlled by the current value of `move`. By default, it is set to `select-move` which renders the main menu. If the user chose to attack, the value of `move` is updated to `select-pokemon-move`, thus displaying the `MovesList` component. On the other hand, if the user chose to switch Pokemon, the value of `move` is updated to `select-pokemon`, which displays the `PokemonList` component. Lastly, if `move` is either `select-pokemon` or `select-pokemon-move`, a back button is displayed. If the user clicks on it, it calls the `backToMove` function which dispatches an action to update the value of `move` back to `select-move`. This basically brings the user back to the control UI’s main menu:\n\n``` javascript\n    \u003cView style={styles.controlsHeader}\u003e\n      {(move == \"select-pokemon\" || move == \"select-pokemon-move\") \u0026\u0026 (\n        \u003cTouchableOpacity\n          style={styles.backButton}\n          onPress={() =\u003e {\n            backToMove();\n          }}\n        \u003e\n          \u003cIonicons name=\"md-arrow-round-back\" size={20} color=\"#333\" /\u003e\n        \u003c/TouchableOpacity\u003e\n      )}\n    \n      \u003cCustomText styles={styles.controlsHeaderText}\u003e\n        {move_display_text}\n      \u003c/CustomText\u003e\n    \u003c/View\u003e\n    \n    {move == \"select-move\" \u0026\u0026 \u003cActionList /\u003e}\n    \n    {move == \"select-pokemon\" \u0026\u0026 (\n      \u003cPokemonList\n        data={team}\n        scrollEnabled={false}\n        numColumns={2}\n        action_type={\"switch-pokemon\"}\n      /\u003e\n    )}\n    \n    {pokemon \u0026\u0026\n      move == \"select-pokemon-move\" \u0026\u0026 (\n        \u003cMovesList moves={pokemon.moves} /\u003e\n      )}\n```\n\n### Dispatch actions for fighting and switching Pokemon \n\nNext, we need to update the `ActionList` component so it dispatches the relevant actions that will update the controls UI. Start by importing `connect` from `react-redux` and the `setMove` action:\n\n``` javascript\n    // src/components/ActionList/ActionList.js\n    \n    import { connect } from \"react-redux\";\n    import { setMove } from \"../../actions\";\n```\n\nNext, add the `setMove` function so you can dispatch the similarly named action:\n\n``` javascript\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        setMove: move =\u003e {\n          dispatch(setMove(move));\n        }\n      };\n    };\n    \n    export default connect(\n      null,\n      mapDispatchToProps\n    )(ActionList);\n```\n\nLastly, call the `setMove` function on each of the `action` function. Pass the value you want the `move` to be: \n\n``` javascript\n    const data = [\n      {\n        label: \"Fight\",\n        action: () =\u003e { // function to execute when the fight button is clicked\n          setMove(\"select-pokemon-move\"); // add this\n        }\n      },\n      {\n        label: \"Switch\",\n        action: () =\u003e { // function to execute when the switch button is clicked\n          setMove(\"select-pokemon\"); // add this\n        }\n      }\n    ];\n```\n\n### Dispatch the action for switching to a specific Pokemon\n\nAt this point, the user can now view the attacks of the current Pokemon, as well as the list of Pokemon in their team. This time, we need to add the code that will update the UI when an attack is made, or when the user switches to another Pokemon. Start by importing the actions: \n\n``` javascript\n    // src/components/PokemonOption/PokemonOption.js\n    \n    import { selectPokemon, setPokemon, setMove } from \"../../actions\";\n```\n\nNext, update `mapDispatchToProps` to include the functions that will set the current Pokemon, and going back to the initial UI of the controls section:\n\n``` javascript\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        // existing code here..\n        \n        // add these:\n        setPokemon: pokemon =\u003e {\n          dispatch(setPokemon(pokemon)); // for setting the current Pokemon\n        },\n        backToMove: () =\u003e {\n          dispatch(setMove(\"select-move\")); // for showing the initial controls UI (the Fight or Switch buttons)\n        }\n      }\n    }\n```\n\nLastly, update the `onPress` handler to include the `switch-pokemon` condition:\n\n``` javascript\n    onPress={() =\u003e {\n      if (action_type == \"select-pokemon\") {\n        // existing code here...\n      } else if (action_type == \"switch-pokemon\") { // add these\n        setPokemon(pokemon_data); // use the pokemon data passed from the PokemonList component\n        backToMove();\n      }\n    }}\n```\n\n### Dispatch action for updating opponent Pokemon’s health\n\nThe final step is for us to update the opponent Pokemon’s health when the user chooses a move to attack with. Import the following actions, and the helper function for getting the move effectiveness and the actual damage:\n\n``` javascript\n    // src/components/MovesList/MovesList.js\n    \n    import { connect } from \"react-redux\";\n    import {\n      setOpponentPokemonHealth, // for setting the current opponent Pokemon's health\n      removePokemonFromOpponentTeam, // for removing the current opponent Pokemon from the opponent team\n      setOpponentPokemon, // for setting the current opponent Pokemon after the previous one has fainted\n      setMove // for going back to the initial controls UI after the opponent Pokemon has fainted\n    } from \"../../actions\";\n    \n    import getMoveEffectivenessAndDamage from \"../../helpers/getMoveEffectivenessAndDamage\";\n```\n\nNext, map the current `opponent_pokemon` as a prop. This gives us access to the opponent Pokemon’s current health points, type defenses, and team member ID. This allows us to calculate the damage made by the attack by passing those data to the `getMoveEffectivenessAndDamage` function:\n\n``` javascript\n    const mapStateToProps = ({ battle }) =\u003e {\n      const { opponent_pokemon } = battle;\n    \n      return {\n        opponent_pokemon\n      };\n    };\n```\n\nNext, add the functions that will dispatch the actions that we imported earlier:\n\n``` javascript\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        setOpponentPokemonHealth: (team_member_id, health) =\u003e {\n          dispatch(setOpponentPokemonHealth(team_member_id, health));\n        },\n    \n        removePokemonFromOpponentTeam: team_member_id =\u003e {\n          dispatch(removePokemonFromOpponentTeam(team_member_id));\n        },\n    \n        setOpponentPokemon: () =\u003e {\n          dispatch(setOpponentPokemon());\n        },\n        setMove: move =\u003e {\n          dispatch(setMove(move));\n        }\n      };\n    };\n```\n\nFinally, update the `onPress` function so it calculates the damage done by an attack, as well as return a description of how effective the attack is (examples: no effect, not very effective, super effective):\n\n``` javascript\n    onPress={() =\u003e {\n      let { damage } = getMoveEffectivenessAndDamage(\n        item,\n        opponent_pokemon\n      );\n      let health = opponent_pokemon.current_hp - damage;\n    \n      setOpponentPokemonHealth(opponent_pokemon.team_member_id, health); // update the opponent Pokemon's health\n    \n      if (health \u003c 1) { // opponent Pokemon has fainted\n        removePokemonFromOpponentTeam(opponent_pokemon.team_member_id);\n    \n        setMove(\"select-move\"); // go back to the initial controls UI\n        setOpponentPokemon(); // set the opponent Pokemon (if there's still one left)\n      }\n      \n    }}\n```\n\n## Conclusion\n\nIn this tutorial, we’ve created a Pokemon battle game app using React Native and Redux. Along the way, you’ve strengthened your basic Redux knowledge by building an app that makes use of all the basic Redux concepts.\n\nStay tuned for the second part where we will implement the two-player mode, so the users actually get to battle another human.\n\nYou can find the full source code of the app on this [GitHub repo](https://github.com/anchetaWern/RNPokeBattle). The code added to this specific part of the series is on the `practice` branch.","metaTitle":"Create a Pokemon battle game with React Native - Part 1","metaDescription":" In part one, implement a practice mode, allowing users to play against a random computer-generated team.\nThis three-part tutorial series, we will be using React Native and Node.js to create a two-player Pokemon-like game."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"xmvFyFo8GyCU6acuyo2My","type":"Entry","createdAt":"2018-10-15T18:24:47.488Z","updatedAt":"2018-11-12T17:12:56.801Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a photo sharing app with React Native","url":"photo-sharing-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNPhotoShare","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-11-12","description":"Use React Native, Node.js and Imgur to create a photo sharing app. Users will be able to follow their friends and share their own photos with their followers. New photos will be published and shared in realtime.","prerequisite":"You will need Node 8+ and the Expo CLI and SDK installed on your machine. Some knowledge of React Native development will be helpful.","content":"In this tutorial, we’ll be creating a realtime photo-sharing app with React Native and Pusher Channels. \n\n## Prerequisites\n\nBasic knowledge of React Native is required is in order to follow along. We’ll also be using [Redux](https://redux.js.org/) in some parts of the app so basic knowledge of it will be helpful as well.\n\nWe’ll be using [Expo](https://expo.io/) in order to easily test the app on multiple devices. Download the Expo client app for your [iOS](https://itunes.apple.com/us/app/expo-client/id982107779?mt=8) or [Android](https://play.google.com/store/apps/details?id=host.exp.exponent\u0026hl=en) device.\n\nThese are the package versions used in creating the app:\n\n\n- Node 8.3.0\n- Yarn 1.7.0\n- Expo CLI 2.0.0\n- Expo SDK 30.0.0\n- Pusher 4.3.1\n- React Navigation 2.14.0\n\nYou don’t necessarily have to use the versions above, but if you encounter problems when using other versions, I recommend you to use the ones above instead. For other packages used in the app, be sure to check out the `package.json` file found in the [GitHub repo](https://github.com/anchetaWern/RNPhotoShare).\n\nWe’ll be using Pusher and Imgur in this tutorial so you need to have an account on both of those services:\n\n\n- [Pusher](http://pusher.com/)\n- [Imgur](https://imgur.com/register)\n\n\n## App overview\n\nWhen the user first opens the app, they’ll be greeted by the following screen. From here, they can either choose to share photos or view them by subscribing to another user who chose to share their photo:\n\n![react-native-photo-share-homepage](//images.ctfassets.net/1es3ne0caaid/3HcHtirrO0uwwgwa8gAQQw/8403a2f60c25d96dd5a27a52ce808cd1/react-native-photo-share-homepage.png)\n\nWhen a user chooses **Share**, they’ll be assigned a unique username, which they can share with anyone. This sharing mechanism will be entirely outside the app, so it can be anything (For example, email or SMS):\n\n![react-native-photo-share-share-screen](//images.ctfassets.net/1es3ne0caaid/5djOaJHu7SEmUEeEYqyKQK/5606ea888ba1d2c57977f323024421c4/react-native-photo-share-share-screen.png)\n\nHere’s what it looks like when someone chooses **View**. On this screen, they have to enter the username assigned to the user they want to follow:\n\n![react-native-photo-share-follow](//images.ctfassets.net/1es3ne0caaid/36VjMRTrAQyCkmWSumYYk8/86034cb4c4f690912d53e6d00f32422b/react-native-photo-share-follow.png)\n\nGoing back to the user who selected **Share**, here’s what their screen will look like when they click on the camera icon from earlier. This will allow the user to take a photo, flip the camera, or close it:\n\n![react-native-photo-share-camera](//images.ctfassets.net/1es3ne0caaid/7GUgMyZVKMCAs0m4m4uACc/4bb3ae4b6ef1b91385dc067196f3f73c/react-native-photo-share-camera.png)\n\nOnce they take a snap, the camera UI will close and the photo will be previewed. At this point, the photo should have already started uploading in the background using the Imgur API:\n\n![react-native-photo-share-preview](//images.ctfassets.net/1es3ne0caaid/67D4M5ttYcKsyo0wuIgwq0/86a3b74cf8aba2e8a895ad2418849f20/react-native-photo-share-preview.png)\n\nSwitching back to the follower (the user who clicked on **View**), once the upload is finished, the Imgur API should return the image URL and its unique ID. Those data are then sent to the Pusher channel which the follower has subscribed to. This allows them to also see the shared photo:\n\n![react-native-photo-share-photo-received](//images.ctfassets.net/1es3ne0caaid/3QWCIyl3w4kuUIysMgoymA/7db155610e74f1d47095cb3f3c7e594e/react-native-photo-share-photo-received.png)\n\nIt’s not shown in the screenshot above, but everytime a new photo is received, it will automatically be appended to the top of the list.\n\nYou can find the app’s source code in this [GitHub repo](https://github.com/anchetaWern/RNPhotoShare).\n\n\n## Create Pusher and Imgur apps\n\nOn your [Pusher dashboard](https://dashboard.pusher.com/), create a new app and name it **RNPhotoShare**. Once it’s created, go to app settings and enable client events. This will allow us to directly trigger events from the app:\n\n![react-native-photo-share-enable-client-events](//images.ctfassets.net/1es3ne0caaid/1PhoIFNEOQKA0AoaKqqoMW/856f0fe856a794e95700342da0fa917b/react-native-photo-share-enable-client-events.png)\n\nNext, after logging in to your Imgur account, go to [this page](https://api.imgur.com/oauth2/addclient) and register an app. The most important setting here is the **Authorization type**. Select **Anonymous usage without user authorization** as we will only be uploading images anonymously. **Authorization callback URL** can be any value because we won’t really be using it. Other than that, you can enter any value for the other fields:\n\n![react-native-photo-share-imgur-app](//images.ctfassets.net/1es3ne0caaid/74FnQEJcdyAqaWgq8qugiK/59e01a1269e38c32cf9494ad3e62ecd3/react-native-photo-share-imgur-app.png)\n\nClick **Submit** to create the app. This will show you the app ID and app secret. We’re only going to need the app ID so take note of that. In case you lose the app ID, you can view all the Imgur apps you created [here](https://imgur.com/account/settings/apps).\n\n\n## Building the app\n\nStart by cloning the project repo and switch to the `starter` branch:\n\n```\n    git clone https://github.com/anchetaWern/RNPhotoShare.git\n    cd RNPhotoShare\n    git checkout starter\n```\n\nThe `starter` branch contains the bare-bones app template, navigation, components, and all of the relevant styles which we will be using later on. Having all of those in the starter allows us to focus on the main meat of the app.\n\nInstall the packages using [Yarn](https://yarnpkg.com/):\n\n```\n    yarn install\n```\n\nHere’s a quick overview of what each package does:\n\n\n- `expo` - the Expo SDK. This includes the Camera API and the icons that we will be using in the app.\n- `random-animal-name-generator` - for generating the unique usernames for users who want to share photos.\n- `pusher-js` - the JavaScript library for working with Pusher.\n- `react-navigation` - for implementing navigation within the app.\n- `prop-types` - for validating the props added to components on runtime.\n- `whatwg-fetch` - there’s a [recent issue](https://forums.expo.io/t/cant-find-variable-self/13547) with the latest version of the `whatwg-fetch` package that Expo uses, so we need to install a lower version through the main project in order to fix the issue.\n- `redux` - for adding and managing global app state.\n- `react-redux` - for working with Redux within the React environment.\n\n### Home screen\n\nLet’s first start with the Home screen by importing all the necessary packages:\n\n``` javascript\n    // src/screens/HomeScreen.js\n    import React, { Component } from \"react\";\n    import { View, Text, Button } from \"react-native\";\n    \n    import Pusher from \"pusher-js/react-native\";\n```\n\nBy default, React Navigation will display a header on every page, we don’t want that in this page so we disable it. In the constructor, we initialize the value of the Pusher client. We will be using this to connect to Pusher and trigger and subscribe to events:\n\n``` javascript\n    export default class HomeScreen extends Component {\n      static navigationOptions = {\n        header: null // don't display header\n      };\n    \n      constructor(props) {\n        super(props);\n        this.pusher = null;\n      }\n      \n      // next: add componentDidMount\n    }\n```\n\nOnce the component is mounted, we initialize the Pusher client using the app key and app cluster from your app settings. As for the `authEndpoint`, retain the value below for now, we will be updating it later before we run the app:\n\n``` javascript\n    componentDidMount() {\n      this.pusher = new Pusher(\"YOUR PUSHER APP KEY\", {\n        authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n        cluster: \"YOUR PUSHER APP CLUSTER\",\n        encrypted: true // false doesn't work, you need to always use https for the authEndpoint\n      });\n    }\n    \n    // next: add render method\n```\n\nNext, we render the UI for the Home screen. This contains two buttons that allow the user to navigate to either the Share screen or the View screen. In both cases, we pass in the reference to the Pusher client as a navigation param. This allows us to use Pusher on both pages:\n\n``` javascript\n    render() {\n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cText style={styles.mainText}\u003eWhat to do?\u003c/Text\u003e\n    \n          \u003cView style={styles.buttonContainer}\u003e\n            \u003cButton\n              title=\"Share\"\n              color=\"#1083bb\"\n              onPress={() =\u003e {\n                this.props.navigation.navigate(\"Share\", {\n                  pusher: this.pusher\n                });\n              }}\n            /\u003e\n          \u003c/View\u003e\n    \n          \u003cView style={styles.buttonContainer}\u003e\n            \u003cButton\n              title=\"View\"\n              color=\"#2f9c0a\"\n              onPress={() =\u003e {\n                this.props.navigation.navigate(\"View\", {\n                  pusher: this.pusher\n                });\n              }}\n            /\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\n### Share screen\n\nNext is the Share screen. This is where the user can take pictures with the in-app camera and share it on realtime to people who have followed their username. \n\nStart by importing all the packages we’ll need. Most of these should look familiar, except for `Clipboard`. We’ll be using it to copy the user’s username to the clipboard so they can easily share it on another app:\n\n``` javascript\n    // src/screens/ShareScreen.js\n    import React, { Component } from \"react\";\n    import {\n      View,\n      Text,\n      TouchableOpacity,\n      Clipboard,\n      Alert,\n      Image,\n      Dimensions,\n      Button,\n      ScrollView\n    } from \"react-native\";\n```\n\nNext are the Expo packages and the random animal name generator. For Expo, we need the `Camera` for rendering a bare-bones camera UI and the `Permissions` to ask the user to access the camera:\n\n``` javascript\n    import { MaterialIcons } from \"@expo/vector-icons\";\n    import { Camera, Permissions } from \"expo\";\n    import generateRandomAnimalName from \"random-animal-name-generator\"; // for generating unique usernames\n```\n\nNext, add a button in the header. This will allow the user to stop sharing their photos. When this button is clicked, all users who are currently subscribed to this user will stop receiving updates:\n\n``` javascript\n    export default class ShareScreen extends Component {\n      static navigationOptions = ({ navigation }) =\u003e {\n        const { params } = navigation.state;\n        return {\n          title: \"Share Photos\",\n          headerTransparent: true,\n          headerRight: (\n            \u003cButton\n              title=\"Finish\"\n              color=\"#333\"\n              onPress={() =\u003e params.finishSharing()}\n            /\u003e\n          ),\n          headerTintColor: \"#333\"\n        };\n      };\n      \n      // next: initialize state\n    }\n```\n\nNext, initialize the state:\n\n``` javascript\n    state = {\n      hasCameraPermission: null, // whether the user has allowed the app to access the device's camera\n      cameraType: Camera.Constants.Type.front, // which camera to use? front or back?\n      isCameraVisible: false, // whether the camera UI is currently visible or not\n      latestImage: null // the last photo taken by the user\n    };\n    \n    // next: add constructor\n```\n\nIn the constructor, we generate a unique username for the user. This is composed of the funny animal name from the `random-animal-name-generator` library and a random number. Here, we also initialize the value for the Pusher client (we’ll get it from the navigation params shortly) and the `user_channel` where we will emit the event for sharing photos. Since this screen is where the Camera UI will be rendered, we also want the user to be able to change the screen orientation. That way, they can capture both portrait and landscape photos:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      // generate unique username\n      const animalName = generateRandomAnimalName()\n        .replace(\" \", \"_\")\n        .toLowerCase();\n      const min = 10;\n      const max = 99;\n      const number = Math.floor(Math.random() * (max - min + 1)) + min;\n      const username = animalName + number;\n      this.username = username;\n      \n      // initialize pusher\n      this.pusher = null;\n      this.user_channel = null;\n      \n      // allow changing of screen orientation\n      Expo.ScreenOrientation.allow(\n        Expo.ScreenOrientation.Orientation.ALL_BUT_UPSIDE_DOWN // enable all screen orientations except upside-down/reverse portrait\n      );\n    }\n    \n    // next: add componentDidMount\n```\n\nOnce the component is mounted, we set the `finishSharing` method as a navigation param. We’ll define this method later, but for now, know that this is used for unsubscribing the user from their own channel. We’re subscribing to that channel right below that code. This allows us to listen to or trigger messages from this channel. Lastly, we ask for permission from the user to access the camera:\n\n``` javascript\n    async componentDidMount() {\n      const { navigation } = this.props;\n    \n      navigation.setParams({\n        finishSharing: this.finishSharing\n      });\n    \n      // subscribe to channel\n      this.pusher = navigation.getParam(\"pusher\");\n      this.user_channel = this.pusher.subscribe(`private-user-${this.username}`);\n    \n      // ask user to access device camera\n      const { status } = await Permissions.askAsync(Permissions.CAMERA);\n      this.setState({ hasCameraPermission: status === \"granted\" });\n    }\n    // next: add render method\n```\n\nFor those who are working with Pusher for the first time, the way it works is that you first have to subscribe the users to a channel. Anyone who is subscribed to this channel will be able to trigger and listen for messages sent through that channel by means of “events”. Not all users who are subscribed to the channel need to know all about the events being sent through that channel, that’s why users can selectively bind to specific events only.\n\nNext, we render the contents of the Share screen. In this case, there are only two possible contents: one where only the camera UI is visible, and the other where only the box containing the username and a button (for opening the camera) is visible:\n\n``` javascript\n    render() {\n      return (\n        \u003cView style={styles.container}\u003e\n          {!this.state.isCameraVisible \u0026\u0026 (\n            \u003cScrollView contentContainerStyle={styles.scroll}\u003e\n              \u003cView style={styles.mainContent}\u003e\n                \u003cTouchableOpacity onPress={this.copyUsernameToClipboard}\u003e\n                  \u003cView style={styles.textBox}\u003e\n                    \u003cText style={styles.textBoxText}\u003e{this.username}\u003c/Text\u003e\n                  \u003c/View\u003e\n                \u003c/TouchableOpacity\u003e\n                \u003cView style={styles.buttonContainer}\u003e\n                  \u003cTouchableOpacity onPress={this.openCamera}\u003e\n                    \u003cMaterialIcons name=\"camera-alt\" size={40} color=\"#1083bb\" /\u003e\n                  \u003c/TouchableOpacity\u003e\n                \u003c/View\u003e\n    \n                {this.state.latestImage \u0026\u0026 (\n                  \u003cImage\n                    style={styles.latestImage}\n                    resizeMode={\"cover\"}\n                    source={{ uri: this.state.latestImage }}\n                  /\u003e\n                )}\n              \u003c/View\u003e\n            \u003c/ScrollView\u003e\n          )}\n    \n          {this.state.isCameraVisible \u0026\u0026 (\n            \u003cCamera\n              style={styles.camera}\n              type={this.state.cameraType}\n              ref={ref =\u003e {\n                this.camera = ref;\n              }}\n            \u003e\n              \u003cView style={styles.cameraFiller} /\u003e\n              \u003cView style={styles.cameraContent}\u003e\n                \u003cTouchableOpacity\n                  style={styles.buttonFlipCamera}\n                  onPress={this.flipCamera}\n                \u003e\n                  \u003cMaterialIcons name=\"flip\" size={25} color=\"#e8e827\" /\u003e\n                \u003c/TouchableOpacity\u003e\n    \n                \u003cTouchableOpacity\n                  style={styles.buttonCamera}\n                  onPress={this.takePicture}\n                \u003e\n                  \u003cMaterialIcons name=\"camera\" size={50} color=\"#e8e827\" /\u003e\n                \u003c/TouchableOpacity\u003e\n    \n                \u003cTouchableOpacity\n                  style={styles.buttonCloseCamera}\n                  onPress={this.closeCamera}\n                \u003e\n                  \u003cMaterialIcons name=\"close\" size={25} color=\"#e8e827\" /\u003e\n                \u003c/TouchableOpacity\u003e\n              \u003c/View\u003e\n            \u003c/Camera\u003e\n          )}\n        \u003c/View\u003e\n      );\n    }\n    \n    // next: add copyUsernameToClipboard\n```\n\nIf you’ve read the app overview earlier, you should already have a general idea on what’s going on in the code above so I’ll no longer elaborate. Take note of the `ref` prop we’ve passed to the `Camera` component though. This allows us to get a reference to that instance of the `Camera` component and assign it to a local variable called `this.camera`. We will be using it later to take a picture using that camera instance.\n\nWhen the user clicks on the box containing the user’s username, this method is called and it sets the username to the clipboard:\n\n``` javascript\n    copyUsernameToClipboard = () =\u003e {\n      Clipboard.setString(this.username);\n      Alert.alert(\"Copied!\", \"Username was copied clipboard\");\n    };\n    \n    // next: add openCamera\n```\n\nNext, are the methods for opening the camera UI, flipping it (use either back or front camera), and closing it:\n\n``` javascript\n    openCamera = () =\u003e {\n      const { hasCameraPermission } = this.state;\n      if (!hasCameraPermission) {\n        Alert.alert(\"Error\", \"No access to camera\");\n      } else {\n        this.setState({ isCameraVisible: true });\n      }\n    };\n    \n    flipCamera = () =\u003e {\n      this.setState({\n        cameraType:\n          this.state.cameraType === Camera.Constants.Type.back\n            ? Camera.Constants.Type.front\n            : Camera.Constants.Type.back\n      });\n    };\n    \n    closeCamera = () =\u003e {\n      this.setState({\n        isCameraVisible: false\n      });\n    };\n    \n    // next: add takePicture\n```\n\nNext is the method for taking pictures. This is where we use the camera reference from earlier (`this.camera`) to call the `takePictureAsync` method from the Camera API. By default, the `takePictureAsync` method only returns an object containing the `width`, `height` and `uri` of the photo that was taken. That’s why we’re passing in an object containing the options we want to use. In this case, `base64` allows us to return the base64 representation of the image. This is what we set in the request body of the request we send to the Imgur API. Once we receive a response from the Imgur API, we extract the data that we need from the response body and trigger the `client-posted-photo` event so any subscriber who is currently listening to that event will receive the image data:\n\n``` javascript\n    takePicture = async () =\u003e {\n      if (this.camera) {\n        let photo = await this.camera.takePictureAsync({ base64: true }); // take a snap, and return base64 representation\n        \n        // construct\n        let formData = new FormData();\n        formData.append(\"image\", photo.base64); \n        formData.append(\"type\", \"base64\");\n    \n        this.setState({\n          latestImage: photo.uri, // preview the photo that was taken\n          isCameraVisible: false // close the camera UI after taking the photo\n        });\n    \n        const response = await fetch(\"https://api.imgur.com/3/image\", {\n          method: \"POST\",\n          headers: {\n            Authorization: \"Client-ID YOUR_IMGUR_APP_ID\" // add your Imgur App ID here\n          },\n          body: formData\n        });\n    \n        let response_body = await response.json(); // get the response body\n        \n        // send data to all subscribers who are listening to the client-posted-photo event\n        this.user_channel.trigger(\"client-posted-photo\", {\n          id: response_body.data.id, // unique ID assigned to the image\n          url: response_body.data.link // Imgur link pointing to the actual image\n        });\n      }\n    };\n    \n    // next: add finishSharing\n```\n\nNote that the name of the event has to have `client-` as its prefix, just like what we did above. This is because we’re triggering this event from the client side. It’s a naming convention used by Pusher so your event won’t work if you don’t follow it. Check out the [docs](https://pusher.com/docs/client_api_guide/client_events#trigger-events) for more information about this.\n\nOnce the user clicks on the **Finish** button, we unsubscribe them from their own channel. This effectively cuts off all communication between this user and all their followers:\n\n``` javascript\n    finishSharing = () =\u003e {\n      this.pusher.unsubscribe(`private-user-${this.username}`);\n      this.props.navigation.goBack(); // go back to home screen\n    };\n```\n\nFor production apps, it’s a good practice to first trigger an “ending” event right before the main user (the one who mainly triggers events) unsubscribes from their own channel. This way, all the other users will get notified and they’ll be able to clean up their connection before their source gets completely shut off.\n\n\n### View screen\n\nThe View screen is where users who want to follow another user go. Again, start by importing all the packages we need:\n\n``` javascript\n    // src/screens/ViewScreen.js\n    import React, { Component } from \"react\";\n    import {\n      View,\n      Text,\n      TextInput,\n      ScrollView,\n      Dimensions,\n      Button,\n      Alert\n    } from \"react-native\";\n    \n    import CardList from \"../components/CardList\";\n```\n\nNothing really new in the code above, except for the `CardList` component. This component is already included in the starter project so we don’t have to create it separately. What it does is render all the images that were sent by the user followed by the current user.\n\nNext, import all the Redux-related packages:\n\n``` javascript\n    // src/screens/ViewScreen.js\n    import { Provider } from \"react-redux\";\n    import { createStore } from \"redux\";\n    import reducers from \"../reducers\";\n    \n    import { addedCard } from \"../actions\";\n    \n    const store = createStore(reducers);\n```\n\nNext, we also add a button in the header. This time, to unfollow the user. We’re also passing in the function used here (`params.unfollow`) as a navigation param later inside the `componentDidMount` method:\n\n``` javascript\n    export default class ViewScreen extends Component {\n    \n      static navigationOptions = ({ navigation }) =\u003e {\n        const { params } = navigation.state;\n        return {\n          title: \"View Photos\",\n          headerTransparent: true,\n          headerTintColor: \"#333\",\n          headerRight: (\n            \u003cButton\n              title=\"Unfollow\"\n              color=\"#333\"\n              onPress={() =\u003e params.unFollow()}\n            /\u003e\n          )\n        };\n      };\n      \n      // next: initialize state\n    }\n```\n\nNext, initialize the state:\n\n``` javascript\n    state = {\n      subscribedToUsername: \"\", // the username of the user the current user is subscribed to\n      isSubscribed: false // is the user currently subscribed to another user?\n    };\n```\n\nIn the constructor, we also set the default value for the Pusher client and the user channel. In this case, the user channel will be whoever the current user is subscribed to. The current user doesn’t really need to trigger any events in the user channel, so we don’t have to generate a unique username and subscribe them to their own channel as we did in the Share screen earlier:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      this.pusher = null;\n      this.user_channel = null;\n    }\n    // next: add componentDidMount\n```\n\nOnce the component is mounted, we set the `unFollow` function as a navigation param and initialize the Pusher client:\n\n``` javascript\n    componentDidMount() {\n      const { navigation } = this.props;\n      navigation.setParams({ unFollow: this.unFollow }); // set the unFollow function as a navigation param\n    \n      this.pusher = navigation.getParam(\"pusher\");\n    }\n    \n    // next: add render\n```\n\nNext, we render the UI of the of the View screen. Here, we wrap everything in the `Provider` component provided by `react-redux`. This allows us to pass down the `store` so we could use it inside the `followUser` to dispatch the action for adding a new Card to the CardList:\n\n``` javascript\n    render() {\n      return (\n        \u003cProvider store={store}\u003e\n          \u003cView style={styles.container}\u003e\n            {!this.state.isSubscribed \u0026\u0026 (\n              \u003cView style={styles.initialContent}\u003e\n                \u003cText style={styles.mainText}\u003eUser to follow\u003c/Text\u003e\n                \u003cTextInput\n                  style={styles.textInput}\n                  onChangeText={subscribedToUsername =\u003e\n                    this.setState({ subscribedToUsername })\n                  }\n                \u003e\n                  \u003cText style={styles.textInputText}\u003e\n                    {this.state.subscribedToUsername}\n                  \u003c/Text\u003e\n                \u003c/TextInput\u003e\n    \n                \u003cView style={styles.buttonContainer}\u003e\n                  \u003cButton\n                    title=\"Follow\"\n                    color=\"#1083bb\"\n                    onPress={this.followUser}\n                  /\u003e\n                \u003c/View\u003e\n              \u003c/View\u003e\n            )}\n    \n            {this.state.isSubscribed \u0026\u0026 (\n              \u003cScrollView\u003e\n                \u003cView style={styles.mainContent}\u003e\n                  \u003cCardList /\u003e\n                \u003c/View\u003e\n              \u003c/ScrollView\u003e\n            )}\n          \u003c/View\u003e\n        \u003c/Provider\u003e\n      );\n    }\n    // next: add followUser\n```\n\nThe `followUser` method is where we add the code for subscribing to the username entered by the user in the text field. Once the subscription succeeds, only then can we listen for the `client-posted-photo` event. When we receive this event, we expect the `id` and `url` of the image to be present. We then use those to dispatch the action for adding a new Card on top of the CardList:\n\n``` javascript\n    followUser = () =\u003e {\n      this.setState({\n        isSubscribed: true\n      });\n      \n      // subscribe to the username entered in the text field\n      this.user_channel = this.pusher.subscribe(\n        `private-user-${this.state.subscribedToUsername}`\n      );\n      \n      // alert the user if there's an error in subscribing\n      this.user_channel.bind(\"pusher:subscription_error\", status =\u003e {\n        Alert.alert(\n          \"Error occured\",\n          \"Cannot connect to Pusher. Please restart the app.\"\n        );\n      });\n    \n      this.user_channel.bind(\"pusher:subscription_succeeded\", () =\u003e { // subscription successful\n        this.user_channel.bind(\"client-posted-photo\", data =\u003e { // listen for the client-posted-photo event to be triggered from the channel\n          store.dispatch(addedCard(data.id, data.url)); // dispatch the action for adding a new card to the list\n        });\n      });\n    };\n    \n    // next: add unFollow\n```\n\nLastly, add the `unFollow` method. This gets called when the user clicks on the **Unfollow** button in the header. This allows us to unsubscribe from the user we subscribed to earlier inside the `followUser` method:\n\n``` javascript\n    unFollow = () =\u003e {\n      this.pusher.unsubscribe(`private-user-${this.state.subscribedToUsername}`);\n      this.props.navigation.goBack(); // go back to the home page\n    };\n```\n\nUnsubscribing from a channel automatically unbinds the user from all the events they’ve previously bound to. This means they’ll no longer receive any new photos.\n\n### Adding the action and reducer\n\nEarlier in the `followUser` method of the `src/screens/ViewScreen.js` file, we dispatched the `addedCard` action. We haven’t really defined it yet so let’s go ahead and do so. Create an `actions` and `reducers` folder inside the `src` directory to house the files we’re going to create.\n\nTo have a single place where we define all the action types in this app, create a `src/actions/types.js` file and add the following:\n\n``` javascript\n    export const ADDED_CARD = \"added_card\";\n```\n\nIn the code above, all we do is export a constant which describes the action type. Nothing really mind-blowing, but this allows us to import and use this constant every time we need to use this specific action. This prevents us from making any typo when using this action.\n\nNext, create a `src/actions/index.js` file, this is where we define and export the action. We pass in the `ADDED_CARD` constant as a type along with the `id` and `url`. These are the unique ID and URL of the image which is received by the reducer everytime this action is dispatched:\n\n``` javascript\n    // src/actions/index.js\n    import { ADDED_CARD } from \"./types\";\n    \n    export const addedCard = (id, url) =\u003e {\n      return {\n        type: ADDED_CARD,\n        id: id,\n        url: url\n      };\n    };\n```\n\nNext, create a `src/``reducers/CardsReducer.js` file, this is where we add the reducer responsible for modifying the value of the `cards` array in the state. This gets executed every time we dispatch the `addedCard` action. When that happens, we simply return a new array containing the existing card objects and the new card object:\n\n``` javascript\n    // src/reducers/CardsReducer.js\n    import { ADDED_CARD } from \"../actions/types\";\n    \n    const INITIAL_STATE = {\n      cards: []\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      switch (action.type) {\n        case ADDED_CARD:\n          const cards = [...state.cards, { id: action.id, url: action.url }]; // return a new array containing the existing card objects and the new card object\n          return { ...state, cards };\n    \n        default:\n          return state;\n      }\n    };\n```\n\nNote that we’re adding it to the end of the new array instead of in the beginning. This is because the `FlatList` component which is responsible for rendering this data is `inverted`. This means that the items are rendered from bottom to top.\n\nLastly, combine all the reducers in a single file:\n\n``` javascript\n    // src/reducers/index.js\n    import { combineReducers } from \"redux\";\n    import CardsReducer from \"./CardsReducer\";\n    \n    export default combineReducers({\n      cards: CardsReducer\n    });\n```\n\nThe code above enabled us to import only a single file to include the reducers and use it for creating the store. Don't add this, as it was already added earlier:\n\n``` javascript\n    // src/screens/ViewScreen.js (don't add as it was already added earlier)\n    import reducers from \"../reducers\"; \n    const store = createStore(reducers);\n```\n\n### Update the CardList component\n\nIf you saw the `CardList` component from the codes of the View screen earlier, you might have noticed that we haven’t really passed any props to it. So how will it have any data to render?\n\n``` javascript\n    // src/screens/ViewScreen.js\n    {this.state.isSubscribed \u0026\u0026 (\n      \u003cScrollView\u003e\n        \u003cView style={styles.mainContent}\u003e\n          \u003cCardList /\u003e\n        \u003c/View\u003e\n      \u003c/ScrollView\u003e\n    )}\n```\n\nThe answer is it doesn’t. Currently, the `CardList` component doesn’t really have the ability to render cards, so we have to update it. Start by importing the `connect` method from the `react-redux` library. This will allow us to create a “connected” component:\n\n``` javascript\n    // src/components/CardList.js\n    import { connect } from \"react-redux\";\n```\n\nAfter the `CardList` prop types, add a `mapStateToProps` method. This allows us to map out any value in the store as a prop for this component. In this case, we only want the `cards` array:\n\n``` javascript\n    CardList.propTypes = {\n      // previous CardList propTypes code here...\n    };\n    \n    // add this:\n    const mapStateToProps = ({ cards }) =\u003e { // extract the cards array from the store\n      return cards; // make it available as props\n    };\n    \n    // replace export default CardList with this:\n    export default connect(mapStateToProps)(CardList);\n```\n\nNow, every time the `addedCard` action is dispatch, the value of `this.props.cards` inside this component will always be in sync with the value of the `cards` array in the store.\n\n\n## Creating the server\n\nThe server is mainly used for authenticating a user who tries to connect to Pusher. If you open the file for the Home screen, we’ve added this code earlier:\n\n``` javascript\n    // src/screens/HomeScreen.js\n    componentDidMount() {\n      this.pusher = new Pusher(\"YOUR PUSHER APP KEY\", {\n        authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n        cluster: \"YOUR PUSHER APP CLUSTER\",\n        encrypted: true\n      });\n    }\n```\n\nThis is where we establish the connection to Pusher’s servers. The `authEndpoint` is responsible for authenticating the user to verify that they’re really a user of your app. So the app hits the server every time the code above is executed.\n\nNow that you know what the server is used for, we’re ready to add its code. Start by navigating inside the `server` directory and install all the packages:\n\n```\n    cd server\n    npm install\n```\n\nImport all the libraries we need and intialize them. This includes Express and a couple of middlewares (JSON and URL encoded body parser), and `dotenv` which allows us to load values from the `.env` file:\n\n``` javascript\n    var express = require(\"express\");\n    var bodyParser = require(\"body-parser\");\n    var Pusher = require(\"pusher\");\n    \n    var app = express(); // Express server\n    app.use(bodyParser.json()); // for parsing the request body into JSON object\n    app.use(bodyParser.urlencoded({ extended: false })); // for parsing URL encoded request body\n    \n    require(\"dotenv\").config(); // initialize dotenv\n```\n\nNext, initialize the Pusher server component using the values from the `.env` file inside your `server` directory:\n\n``` javascript\n    var pusher = new Pusher({\n      // connect to pusher\n      appId: process.env.APP_ID,\n      key: process.env.APP_KEY,\n      secret: process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER\n    });\n```\n\nNext, add the route for testing if the server is working correctly:\n\n``` javascript\n    app.get(\"/\", function(req, res) {\n      res.send(\"all green...\");\n    });\n```\n\nNext, add the route for authenticating user requests:\n\n``` javascript\n    app.post(\"/pusher/auth\", function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    });\n```\n\nNote that in the code above, we haven’t really added any form of authentication. All we’re really doing is authenticating the user as they hit this route. This is not what you want to do for production apps. For production apps, you will most likely have some sort of user authentication before a user can use your app. That’s what you need to integrate into this code so you can ensure that the users who are making requests to your Pusher app are real users of your app.\n\nNext, make the server listen to the port indicated in the `.env` file:\n\n``` javascript\n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\nLastly, update the `.env` file and update it with your Pusher app details:\n\n``` javascript\n    APP_ID=YOUR_PUSHER_APP_ID\n    APP_KEY=YOUR_PUSHER_APP_KEY\n    APP_SECRET=YOUR_PUSHER_APP_SECRET\n    APP_CLUSTER=YOUR_PUSHER_APP_CLUSTER\n    PORT=3000\n```\n\n## Running the app\n\nTo run the app, you need to create an account on [ngrok.com](https://ngrok.com/). Once you have an account, go to your [account dashboard](https://dashboard.ngrok.com/get-started) and download the ngrok binary for your operating system. Extract the zip file and you’ll see an `ngrok` file. Execute that file from the terminal (Note: you’ll probably need to add [execution permissions](https://askubuntu.com/questions/484718/how-to-make-a-file-executable) to it if you’re on Linux) to add your auth token:\n\n```\n    ./ngrok authToken YOUR_NGROK_AUTH_TOKEN\n```\n\nOnce that’s done, run the server and expose port 3000 using ngrok:\n\n```\n    node server.js\n    ./ngrok http 3000\n```\n\nNgrok will provide you with an https URL. Use that as the value for the `authEndpoint` in the `src/screens/HomeScreen.js` file:\n\n``` javascript\n    componentDidMount() {\n      this.pusher = new Pusher(\"YOUR PUSHER APP KEY\", {\n        authEndpoint: \"YOUR_NGROK_HTTPS_URL/pusher/auth\",\n      });\n    }\n```\n\nLastly, navigate inside the root directory of the app and start it:\n\n```\n    expo start\n```\n\nYou can test the app on your machine using the emulator if you have a powerful machine. Personally, I tested it on my iOS and Android device so you might have better luck when running it on your device also.\n\n\n## Conclusion\n\nThat’s it! In this tutorial, you learned how to create a realtime photo-sharing app with React Native and Pusher. Along the way, you learned how to use Expo’s Camera API, Imgur API to anonymously upload images, and Pusher to send and receive data in realtime.\n\nYou can find the app’s source code in this [GitHub repo](https://github.com/anchetaWern/RNPhotoShare).","metaTitle":"Creating a photo sharing app with React Native","metaDescription":"Create a live photo sharing app using Node.js, React Native and Imgur. Users will be able to follow their friends and broadcast their own photos to their followers."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7yjvUBFTrysqqic6OQQMGe","type":"Entry","createdAt":"2018-11-07T09:49:38.592Z","updatedAt":"2018-11-07T09:49:38.592Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Building a message delivery status in Swift","url":"building-message-delivery-status-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5xPFDNiTZY0Sa02SmmiWqc","type":"Entry","createdAt":"2018-11-07T09:48:14.186Z","updatedAt":"2018-11-07T09:48:14.186Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"José Maria Cunha","url":"jose-maria-cunha","email":"jose@pusher.com","twitter":"https://twitter.com/zemcunha","github":"https://github.com/josemcunha","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/message-delivery-status-ios","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2018-11-07","description":"In this tutorial, we will learn how to implement message delivery status notifications in an iOS application using Swift.","prerequisite":"Knowledge of iOS development with Swift and XCode\nPusher Channels App","content":"When building an application it's often useful to know when certain events take place. This enables your application to respond in realtime and can be used in a number of ways. In this article, we will focus on how to implement message delivery status in an iOS application.\n\nThis tutorial assumes you already have knowledge of Swift and Xcode, and does not go into too much detail on how to use Xcode or the Swift syntax.\n\n## What our application will do\n\nThe application will be an iOS chat application, and the application will allow you to post messages and see the delivery status of the message once it has been sent. This feature is similar to what you can find in chat applications like WhatsApp, Facebook Messenger, BBM and others.\n\n![How to build message delivery status in iOS using Pusher](https://dl.dropbox.com/s/qrml2une712my9f/message-delivery-status-on-ios-using-pusher-2.gif)\n\n\u003e Note: You will need a Pusher account to work with this tutorial. You can create one for free by [clicking here](https://pusher.com). Create a new application and note your cluster, app ID, secret and key; they will all be needed for this tutorial.\n\n### Getting started with our iOS application\n\nTo get started you will need XCode installed on your machine and you will also need Cocoapods package manager installed. If you have not installed Cocoapods, here's how to do so:\n\n``` language-shell\n$ gem install cocoapods\n```\nNow that you have that installed, launch Xcode and create a new project. We are calling ours Anonchat.\n\nNow close Xcode and then `cd` to the root of your project and run the command `pod init`. This should generate a `Podfile` for you. Change the contents of the `Podfile`:\n\n``` \n# Uncomment the next line to define a global platform for your project\nplatform :ios, '9.0'\n\ntarget 'anonchat' do\n  # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\n  use_frameworks!\n\n  # Pods for anonchat\n  pod 'Alamofire'\n  pod 'PusherSwift'\n  pod 'JSQMessagesViewController'\nend\n```\nNow run the command `pod install` so the Cocoapods package manager can pull in the necessary dependencies. When this is complete, close XCode (if open) and then open the `.xcworkspace` file that is in the root of your project folder.\n\n## Creating the views for our iOS application\n\nWe are going to be creating a couple of views that we will need for the chat application to function properly. The views will look something like the screenshot below:\n\n![Message delivery status for iOS using Pusher](https://dl.dropbox.com/s/8551jebu1vava4k/message-delivery-status-on-ios-using-pusher-3.png)\n\nWhat we have done above is create a the first ViewController which will serve as our welcome ViewController, and we have added a button which triggers navigation to the next controller which is a `Navigation Controller`. This Navigation Controller in turn has a View Controller set as the root controller.\n\n### Coding the message delivery status for our iOS application\n\nNow that we have set up the views using the interface builder on the `MainStoryboard`, let's add some functionality. The first thing we will do is create a `WelcomeViewController` and associate it with the first view on the left. This will be the logic house for that view; we won't add much to it for now though:\n\n``` language-swift\nimport UIKit\n\nclass WelcomeViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n}\n```\nNow that we have created that, we create another controller called the `ChatViewController`, which will be the main power house and where everything will be happening. The controller will extend the `JSQMessagesViewController` so that we automatically get a nice chat interface to work with out of the box, then we have to work on customising this chat interface to work for us.\n\n``` language-swift\nimport UIKit\nimport Alamofire\nimport PusherSwift\nimport JSQMessagesViewController\n\nclass ChatViewController: JSQMessagesViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        let n = Int(arc4random_uniform(1000))\n\n        senderId = \"anonymous\" + String(n)\n        senderDisplayName = senderId\n    }\n}\n```\nIf you notice on the `viewDidLoad` method, we are generating a random username and setting that to be the `senderId` and `senderDisplayName` on the controller. This extends the properties set in the parent controller and is required.\n\nBefore we continue working on the chat controller, we want to create a last class called the `AnonMessage` class. This will extend the `JSQMessage` class and we will be using this to extend the default functionality of the class.\n\n``` language-swift\nimport UIKit\nimport JSQMessagesViewController\n\nenum AnonMessageStatus {\n    case sending\n    case delivered\n}\n\nclass AnonMessage: JSQMessage {\n    var status : AnonMessageStatus\n    var id : Int\n\n    public init!(senderId: String, status: AnonMessageStatus, displayName: String, text: String, id: Int) {\n        self.status = status\n        self.id = id\n        super.init(senderId: senderId, senderDisplayName: displayName, date: Date.init(), text: text)\n    }\n\n    public required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n```\nIn the class above we have extended the `JSQMessage` class and we have also added some new properties to track; the `id` and the `status`. We also added an initialization method so we can specify the new properties before instantiating the `JSQMessage` class properly. We also added an `enum` that contains all the statuses the message could possibly have.\n\nNow returning to the `ChatViewController` let's add a few properties to the class that will be needed:\n\n``` language-swift\nstatic let API_ENDPOINT = \"http://localhost:4000\";\n\nvar messages = [AnonMessage]()\nvar pusher: Pusher!\n\nvar incomingBubble: JSQMessagesBubbleImage!\nvar outgoingBubble: JSQMessagesBubbleImage!\n```\nNow that it's done, we will start customizing the controller to suit our needs. First, we will add some logic to the `viewDidLoad` method:\n\n``` language-swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    let n = Int(arc4random_uniform(1000))\n\n    senderId = \"anonymous\" + String(n)\n    senderDisplayName = senderId\n\n    inputToolbar.contentView.leftBarButtonItem = nil\n\n    incomingBubble = JSQMessagesBubbleImageFactory().incomingMessagesBubbleImage(with: UIColor.jsq_messageBubbleBlue())\n    outgoingBubble = JSQMessagesBubbleImageFactory().outgoingMessagesBubbleImage(with: UIColor.jsq_messageBubbleGreen())\n\n    collectionView!.collectionViewLayout.incomingAvatarViewSize = CGSize.zero\n    collectionView!.collectionViewLayout.outgoingAvatarViewSize = CGSize.zero\n\n    automaticallyScrollsToMostRecentMessage = true\n\n    collectionView?.reloadData()\n    collectionView?.layoutIfNeeded()\n}\n```\nIn the above code, we started customizing the way our chat interface will look, using the parent class that has these properties already set. For instance, we are setting the `incomingBubble` to blue, and the `outgoingBubble` to green. We have also eliminated the avatar display because we do not need it right now.\n\nThe next thing we are going to do is override some of the methods that come with the parent controller so that we can display messages, customize the feel and more:\n\n``` language-swift\noverride func collectionView(_ collectionView: JSQMessagesCollectionView!, messageDataForItemAt indexPath: IndexPath!) -\u003e JSQMessageData! {\n    return messages[indexPath.item]\n}\n\noverride func collectionView(_ collectionView: JSQMessagesCollectionView!, attributedTextForCellBottomLabelAt indexPath: IndexPath!) -\u003e NSAttributedString! {\n    if !isAnOutgoingMessage(indexPath) {\n        return nil\n    }\n\n    let message = messages[indexPath.row]\n\n    switch (message.status) {\n    case .sending:\n        return NSAttributedString(string: \"Sending...\")\n    case .delivered:\n        return NSAttributedString(string: \"Delivered\")\n    }\n}\n\noverride func collectionView(_ collectionView: JSQMessagesCollectionView!, layout collectionViewLayout: JSQMessagesCollectionViewFlowLayout!, heightForCellBottomLabelAt indexPath: IndexPath!) -\u003e CGFloat {\n    return CGFloat(15.0)\n}\n\noverride func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -\u003e Int {\n    return messages.count\n}\n\noverride func collectionView(_ collectionView: JSQMessagesCollectionView!, messageBubbleImageDataForItemAt indexPath: IndexPath!) -\u003e JSQMessageBubbleImageDataSource! {\n    let message = messages[indexPath.item]\n    if message.senderId == senderId {\n        return outgoingBubble\n    } else {\n        return incomingBubble\n    }\n}\n\noverride func collectionView(_ collectionView: JSQMessagesCollectionView!, avatarImageDataForItemAt indexPath: IndexPath!) -\u003e JSQMessageAvatarImageDataSource! {\n    return nil\n}\n\noverride func didPressSend(_ button: UIButton, withMessageText text: String, senderId: String, senderDisplayName: String, date: Date) {\n    let message = addMessage(senderId: senderId, name: senderId, text: text) as! AnonMessage\n\n    postMessage(message: message)\n    finishSendingMessage(animated: true)\n}\n\nprivate func isAnOutgoingMessage(_ indexPath: IndexPath!) -\u003e Bool {\n    return messages[indexPath.row].senderId == senderId\n}\n```\nThe next thing we are going to do is create some new methods on the controller that will help us, post a new message, then another to hit the remote endpoint to send the message, then a last one to append the new message sent (or received) to the messages array:\n\n``` language-swift\nprivate func postMessage(message: AnonMessage) {\n    let params: Parameters = [\"sender\": message.senderId, \"text\": message.text]\n    hitEndpoint(url: ChatViewController.API_ENDPOINT + \"/messages\", parameters: params, message: message)\n}\n\nprivate func hitEndpoint(url: String, parameters: Parameters, message: AnonMessage? = nil) {\n    Alamofire.request(url, method: .post, parameters: parameters).validate().responseJSON { response in\n        switch response.result {\n        case .success:\n            if message != nil {\n                message?.status = .delivered\n                self.collectionView.reloadData()\n            }\n\n        case .failure(let error):\n            print(error)\n        }\n    }\n}\n\nprivate func addMessage(senderId: String, name: String, text: String) -\u003e Any? {\n    let leStatus = senderId == self.senderId\n        ? AnonMessageStatus.sending\n        : AnonMessageStatus.delivered\n\n    let message = AnonMessage(senderId: senderId, status: leStatus, displayName: name, text: text, id: messages.count)\n\n    if (message != nil) {\n        messages.append(message as AnonMessage!)\n    }\n\n    return message\n}\n```\nGreat. Now every time we send a new message, the `didPressSend` method will be triggered and all the other ones will fall into place nicely!\n\nFor the last piece of the puzzle, we want to create the method that listens for Pusher events and fires a callback when an event trigger is received.\n\n``` language-swift\nprivate func listenForNewMessages() {\n    let options = PusherClientOptions(\n        host: .cluster(\"PUSHER_CLUSTER\")\n    )\n\n    pusher = Pusher(key: \"PUSHER_KEY\", options: options)\n\n    let channel = pusher.subscribe(\"chatroom\")\n\n    channel.bind(eventName: \"new_message\", callback: { (data: Any?) -\u003e Void in\n        if let data = data as? [String: AnyObject] {\n            let author = data[\"sender\"] as! String\n\n            if author != self.senderId {\n                let text = data[\"text\"] as! String\n\n                let message = self.addMessage(senderId: author, name: author, text: text) as! AnonMessage?\n                message?.status = .delivered\n\n                self.finishReceivingMessage(animated: true)\n            }\n        }\n    })\n\n    pusher.connect()\n}\n```\nSo in this method, we have created a `Pusher` instance, we have set the cluster and the key. We attach the instance to a `chatroom` channel and then bind to the `new_message` event on the channel. **Remember to replace the key and cluster with the actual value you have gotten from your Pusher dashboard**.\n\nNow we should be done with the application and as it stands, it should work but no messages can be sent just yet as we need a backend application for it to work properly.\n\n### Building the backend Node application\n\nNow that we are done with the iOS and Xcode parts, we can create the NodeJS back end for the application. We are going to be using Express so that we can quickly whip something up.\n\nCreate a directory for the web application and then create two new files:\n\n``` language-javascript\n// index.js\nvar path = require('path');\nvar Pusher = require('pusher');\nvar express = require('express');\nvar bodyParser = require('body-parser');\n\nvar app = express();\n\nvar pusher = new Pusher({\n  appId: 'PUSHER_ID',\n  key: 'PUSHER_KEY',\n  secret: 'PUSHER_SECRET',\n  cluster: 'PUSHER_CLUSTER',\n  encrypted: true\n});\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n\napp.post('/messages', function(req, res){\n  var message = {\n    text: req.body.text,\n    sender: req.body.sender\n  }\n  pusher.trigger('chatroom', 'new_message', message);\n  res.json({success: 200});\n});\n\napp.use(function(req, res, next) {\n    var err = new Error('Not Found');\n    err.status = 404;\n    next(err);\n});\n\nmodule.exports = app;\n\napp.listen(4000, function(){\n  console.log('App listening on port 4000!')\n})\n```\nand **packages.json**\n\n``` json\n{\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"body-parser\": \"^1.16.0\",\n    \"express\": \"^4.14.1\",\n    \"path\": \"^0.12.7\",\n    \"pusher\": \"^1.5.1\"\n  }\n}\n```\nNow run `npm install` on the directory and then `node index.js` once the npm installation is complete. You should see *App listening on port 4000!* message.\n\n![How to build message delivery status in iOS using Pusher](https://dl.dropbox.com/s/cvwccr7x358r7to/message-delivery-status-on-ios-using-pusher-5.png)\n\n## Testing the application\n\nOnce you have your local node web server running, you will need to make some changes so your application can talk to the local web server.\n\nIn the `info.plist` file, make the following changes:\n\n![How to build message delivery status in iOS using Pusher](https://dl.dropbox.com/s/f9mwlct0eswxt14/message-delivery-status-on-ios-using-pusher-4.png)\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\n## Conclusion\n\nIn this tutorial, we have explored how to create an iOS chat application with a message delivery status message after the message is sent to other users. For practice, you can expand the statuses to support more instances.\n\nHave a question or feedback on the tutorial? Please ask below in the comment section. The repository for the application and the Node backend is available [here](https://github.com/neoighodaro/message-delivery-status-ios).","metaTitle":"Building a message delivery status in Swift","metaDescription":"In this tutorial we will learn how to implement message delivery status notifications in an iOS application using Swift."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5tl7of1DKEgoi2oqIUWScS","type":"Entry","createdAt":"2018-11-06T11:45:11.893Z","updatedAt":"2018-11-06T11:45:11.893Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a two-player memory game with React Native","url":"memory-game-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNMemory","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4IiTE4WzzyQkoeAoaOqgcu","type":"Entry","createdAt":"2018-02-12T15:10:28.101Z","updatedAt":"2018-02-26T12:31:12.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Multiplayer Game","url":"multiplayer-game","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-11-06","description":"This tutorial will show you how to build a two-player memory game using React Native. Players sign in and are randomly assigned an opponent. The game then involves searching for image pairs. The game board and score update in realtime.","prerequisite":"You will need Node, Yarn, ngrok and Expo installed on your machine. Some knowledge of React Native development is required.","content":"In this tutorial, we’ll build a realtime memory game app with React Native and Pusher Channels. \n\n\n## Prerequisites\n\nBasic knowledge of React Native is required.\n\nTo easily test the app on multiple devices, we’ll be using [Expo](https://expo.io/) to create it. Be sure to install their [Android](https://play.google.com/store/apps/details?id=host.exp.exponent\u0026hl=en) or [iOS](https://itunes.apple.com/us/app/expo-client/id982107779?mt=8) client apps. Log in to your Expo account on both the CLI and client apps. [Create one](https://expo.io/signup) if you don’t have it already.\n\nThese are the package versions used in creating the app:\n\n\n- Node 8.3.0\n- Yarn 1.7.0\n- Expo CLI 2.1.2\n- Expo SDK 30.0.0\n- Pusher 4.3.1\n\nLastly, you also need a [Pusher](https://pusher.com/) and [ngrok](https://ngrok.com/) account. We’ll use it to create a Pusher app instance and expose the local Pusher server to the internet.\n\n\n## App overview\n\nWe’re going to build a two-player memory game app. \n\nWhen they open the app, users will be greeted by a login screen where they have to enter their username:\n\n![rn-memory-demo-1](//images.ctfassets.net/1es3ne0caaid/7C8jOMvjDU4Su66c6qi4M2/cb7b88b8cf276fb80527cb7df91b0013/rn-memory-demo-1.png)\n\nWhen a user logs in, the app’s server component will pick two random users and they’re the ones who will play.\n\nOnce an opponent is found, both users are automatically navigated to the Game screen. By default, there will be a lot of question mark icons, these represent the cards that haven’t been opened yet:\n\n![rn-memory-demo-2](//images.ctfassets.net/1es3ne0caaid/45tgSa5DUA868yMSIsGyA8/4a35bfedcacbdae5e9de64f1e55e0e33/rn-memory-demo-2.png)\n\nTo play the game, users have to click on each one to reveal its content. Users can reveal the content of up to two cards before both of them closes. Once a user has selected a pair, they will stay open for the rest of the game.\n\nHere’s what the screen looks like while the two players are playing the game:\n\n![rn-memory-demo-3](//images.ctfassets.net/1es3ne0caaid/4osnUhZMPKyas6CmUCk4Mu/6e4c9a7c4fc29a95f2dec9eeef225bc6/rn-memory-demo-3.png)\n\nWhen one of the players accumulates the maximum score (in this case it’s 12), both players are notified that one of them already won and the UI is reset:\n\n![rn-memory-demo-4](//images.ctfassets.net/1es3ne0caaid/3UbXAG3a6s06k808Q4yIiM/a65c3ec37bfe970e1b4bbb2b548d5148/rn-memory-demo-4.png)\n\nYou can view the app’s source code in this [GitHub repo](https://github.com/anchetaWern/RNMemory).\n\n\n## Create a Pusher app\n\nYou need to create a Pusher app instance so you can use Pusher’s services.\n\nOn your Pusher account dashboard, create a new Pusher app and check the **Enable client events** in the app settings. This allows us to emit events directly from the app:\n\n![rn-memory-enable-client-events](//images.ctfassets.net/1es3ne0caaid/6pEk3EZMOc2m0aCsKO2yE4/90724fb8ba79aa2ca0e6504a594a27e6/rn-memory-enable-client-events.png)\n\n## Clone the starter project\n\nSo that we can focus on the main parts of the app, clone the app’s GitHub repo and switch to the `starter` branch:\n\n```\n    git clone https://github.com/anchetaWern/RNMemory\n    cd RNMemory\n    git checkout starter\n```\n\nThe `starter` branch contains all the screens of the app (Login and Game screen), helper functions, and the UI components that we will be using. The app screens and the server component are where we will do most of the work.\n\nNext, install all the packages the app and the server depend on:\n\n```\n    yarn install\n    cd server\n    npm install\n```\n\n## Starter project tour\n\nBefore we proceed to actually code the app, let’s first take a quick look at the files and folders that are already available in the starter project:\n\n\n- `app/screens` - this is where the app’s screens are stored. We only have two screens: Login and Game. Only a starter template with minimum output is available in the starter branch.\n- `app/helpers` - this is where the app’s helper functions are stored. In this case, we only have the `shuffleArray.js` file. It’s used to arrange the items in the array in random order. This is very useful for changing the location of the cards that need to be guessed in the screen.\n- `app/data` - this is where hard-coded data is stored. In this case, we only have the `cards.js` file which contains the definition for the unique cards that the app uses. We’re using [Expo’s vector icons](https://expo.github.io/vector-icons/) so the file contains the `name` of the icon, the `src` (for example, FontAwesome), and the `color` we want to apply to it.\n- `app/components` - this is where the UI components of the app are stored. In this case, we only have the `Card.js` which renders the individual cards, and `Score.js` which renders the score and name of the user.\n- `server` - this is where we will add the code for the server component of the app. Currently, it only has the `.env` file which contains the placeholder for Pusher app credentials.\n\n\n## Build the app\n\nWe’re now ready to start building the app. I encourage you to start running the app even if the code is still not complete. This allows you to visualize what the code does as we’re adding it:\n\n```\n    expo start\n```\n\n### Login screen\n\nIn the Login screen, start by importing all the packages we need:\n\n``` javascript\n    // app/screens/Login.js\n    import React, { Component } from \"react\";\n    import {\n      View,\n      Text,\n      TextInput,\n      Button,\n      Alert,\n      ActivityIndicator\n    } from \"react-native\";\n    \n    import Pusher from \"pusher-js/react-native\";\n    \n    // next: initialize state\n```\n\nNext, initialize the state and the user’s channel:\n\n``` javascript\n    state = {\n      username: \"\",\n      is_loading: false\n    };\n    \n    constructor(props) {\n      super(props);\n      this.pusher = null; // variable for storing the Pusher reference\n      this.my_channel = null; // variable for storing the channel assigned to this user\n    }\n    \n    // next: add render function\n```\n\nInside the `render` function, return the UI for the Login screen. In this case, we’re only asking the user’s username. The login button is visible by default, but it gets hidden in place of the activity indicator when the user clicks on it. It stays that way until such time that an opponent is found:\n\n``` javascript\n    render() {\n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cView style={styles.topContent}\u003e\n            \u003cText style={styles.bigText}\u003eRNMemory\u003c/Text\u003e\n          \u003c/View\u003e\n    \n          \u003cView style={styles.mainContent}\u003e\n            \u003cText style={styles.label}\u003eUsername\u003c/Text\u003e\n            \u003cTextInput\n              style={styles.text_field}\n              onChangeText={username =\u003e {\n                this.setState({ username });\n              }}\n              value={this.state.username}\n              placeholder=\"Enter your username\"\n            /\u003e\n    \n            {!this.state.is_loading \u0026\u0026 (\n              \u003cButton onPress={this.login} title=\"Enter\" color=\"#0064e1\" /\u003e\n            )}\n    \n            {this.state.is_loading \u0026\u0026 (\n              \u003cActivityIndicator size=\"large\" color=\"#0000ff\" /\u003e\n            )}\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nWhen the login button is clicked, the `login` function gets executed. This will connect the user to Pusher and subscribe them in their own unique channel. Subscribing the user to their own channel allows us to:\n\n\n- Send data to them once an opponent is found. \n- While the game is ongoing, we use it to receive updates of the opponent’s score.\n- When the current user wins, we use it to send an update to the opponent that they lose.\n\nHere’s the code:\n\n``` javascript\n    login = () =\u003e {\n      let username = this.state.username;\n      \n      if (username) {\n        this.setState({\n          is_loading: true // hide's login button and shows activity indicator\n        });\n        \n        // connect to Pusher:\n        this.pusher = new Pusher(\"YOUR_PUSHER_API_KEY\", {\n          authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n          cluster: \"YOUR_PUSHER_APP_CLUSTER\",\n          encrypted: true,\n          auth: {\n            params: { username: username }\n          }\n        });\n      \n        this.my_channel = this.pusher.subscribe(`private-user-${username}`); // subscribe to user's unique channel\n        \n        // subscription error occurred\n        this.my_channel.bind(\"pusher:subscription_error\", status =\u003e {\n          Alert.alert('Error', 'Subscription error occurred. Please restart the app');\n        });\n        \n        // subscription to their own channel succeeded\n        this.my_channel.bind(\"pusher:subscription_succeeded\", data =\u003e {\n          console.log(\"subscription ok: \", data);\n      \n          // next: add code for listening when opponent is found    \n        });\n      }\n    };\n```\n\nDon’t forget to add your Pusher App ID when connecting to Pusher. As for the `authEndpoint`, we’ll add it later once we run ngrok.\n\nNext, add the code for listening for the `opponent-found` event. This event is emitted from the server once two random users are matched. Both players are notified when that happens, and it will automatically navigate the user to Game screen:\n\n``` javascript\n    this.my_channel.bind(\"opponent-found\", data =\u003e {\n      console.log(\"opponent found: \", data);\n      \n      // determine who the opponent is, player one or player two?\n      let opponent =\n        username == data.player_one ? data.player_two : data.player_one;\n    \n      Alert.alert(\"Opponent found!\", `${opponent} will take you on!`);\n    \n      this.setState({\n        is_loading: false,\n        username: \"\"\n      });\n      \n      // navigate to the game screen\n      this.props.navigation.navigate(\"Game\", {\n        pusher: this.pusher, // Pusher connection\n        username: username, // current user's username\n        opponent: opponent, // opponent's username\n        my_channel: this.my_channel // current user's channel\n      });\n    });\n```\n\n### Game screen\n\nWe now move on to the Game screen. Start by importing the packages, helpers, data, and components we need:\n\n``` javascript\n    // app/screens/Game.js\n    import React, { Component } from \"react\";\n    import { View, Text, Button, FlatList, Alert } from \"react-native\";\n    import { FontAwesome, Entypo } from \"@expo/vector-icons\"; // the icon sources that the cards will use\n    \n    import Score from \"../components/Score\";\n    import Card from \"../components/Card\";\n    \n    import shuffleArray from \"../helpers/shuffleArray\"; // function for re-ordering the cards to be guessed\n    \n    import cards_data from \"../data/cards\"; // the unique card config\n    \n    // next: initialize state\n```\n\nNext, initialize the state:\n\n``` javascript\n    state = {\n      current_selection: [], // for storing the currently selected pairs. This always resets back to zero once two are selected \n      selected_pairs: [], // the pairs that had already been opened \n      score: 0, // current user's score\n      opponent_score: 0 // opponent's score\n    };\n    \n    // next: add the constructor\n```\n\nNext, add the `constructor`. This is where we add initial values for the Pusher channels and generate the cards, which will be rendered on the screen:\n\n``` javascript\n    constructor(props) {\n      super(props);\n    \n      this.pusher = null; // Pusher connection\n      this.my_channel = null; // current user's Pusher channel\n      this.opponent_channel = null; // opponent's Pusher channel\n      this.username = null; // current user's username\n      this.opponent = null; // opponent's username\n    \n      let sources = {\n        fontawesome: FontAwesome,\n        entypo: Entypo\n      };\n    \n      let clone = JSON.parse(JSON.stringify(cards_data)); // create a copy of the cards data\n    \n      this.cards = cards_data.concat(clone); // append the copy to its original\n      \n      // add a unique ID to each of the card\n      this.cards.map(obj =\u003e {\n        let id = Math.random()\n          .toString(36)\n          .substring(7);\n        obj.id = id;\n        obj.src = sources[obj.src];\n        obj.is_open = false;\n      });\n    \n      this.cards = shuffleArray(this.cards); // arrange the cards in random order\n    }\n    \n    // next: add componentDidMount\n```\n\nOnce the component is mounted, we pick up the navigation params that were passed from the Login screen earlier. This allows us to listen for events emitted by the opponent, and emit events from our own channel:\n\n``` javascript\n    componentDidMount() {\n      const { navigation } = this.props;\n      \n      // get Pusher connection and user's channel from the navigation param\n      this.pusher = navigation.getParam(\"pusher\");\n      this.my_channel = navigation.getParam(\"my_channel\");\n    \n      this.username = navigation.getParam(\"username\");\n      this.opponent = navigation.getParam(\"opponent\");\n      \n      // update the state with the cards generated inside the constructor earlier\n      this.setState({\n        cards: this.cards\n      });\n    \n      if (this.opponent) {\n        // subscribe to the opponent's channel\n        this.opponent_channel = this.pusher.subscribe(\n          `private-user-${this.opponent}`\n        );\n        this.opponent_channel.bind(\"pusher:subscription_error\", status =\u003e {\n          Alert.alert('Subscription error', 'Please restart the app');\n        });\n    \n        this.opponent_channel.bind(\"pusher:subscription_succeeded\", data =\u003e {\n          console.log(\"opponent subscription ok: \", data);\n          \n          // opponent's score is incremented\n          this.opponent_channel.bind(\"client-opponent-scored\", data =\u003e {\n            this.setState({\n              opponent_score: data.score\n            });\n          });\n          \n          // opponent won the game\n          this.opponent_channel.bind(\"client-opponent-won\", data =\u003e {\n            Alert.alert(\"You lose\", `${data.username} won the game`);\n            this.resetCards(); // close all the cards and reset the score\n          });\n        });\n      }\n    }\n```\n\nIn the code above, we’re listening for the `client-opponent-scored` event and the `client-opponent-won` event. The former allows the user to get updated of their opponent’s score. This is emitted by their opponent every time they open a matching pair.  The latter allows the user to get updated when their opponent wins the game. When this happens, we call the `resetCards` method to reset the UI. This allows both users to restart the game if they want. \n\nNext, we render the Game screen. Here, we use a FlatList to render all the cards. Below it, we use the Score component to render the username and score for both users:\n\n``` javascript\n    render() {\n      let contents = this.state.cards;\n    \n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cView style={styles.body}\u003e\n            \u003cFlatList\n              data={contents}\n              renderItem={this.renderCard}\n              numColumns={4}\n              keyExtractor={item =\u003e item.id}\n              columnWrapperStyle={styles.flatlistRow}\n            /\u003e\n          \u003c/View\u003e\n          \u003cView style={styles.bottomContent}\u003e\n            \u003cScore score={this.state.score} username={this.username} /\u003e\n            \u003cScore score={this.state.opponent_score} username={this.opponent} /\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nThe `renderCard` function renders each individual card. This is where we use the Card component to render each card. We pass in the data which determines how the card will look like as props. The `clickCard` prop is where we pass the function to be executed when the card is clicked:\n\n``` javascript\n    renderCard = ({ item }) =\u003e {\n      return (\n        \u003cCard\n          key={item.id}\n          src={item.src}\n          name={item.name}\n          color={item.color}\n          is_open={item.is_open}\n          clickCard={this.clickCard.bind(this, item.id)}\n        /\u003e\n      );\n    };\n```\n\nHere’s the `clickCard` function. This is where we process the card opened by the user. We only process cards that aren’t already guessed by the user and is not already opened. If both conditions are `true`, we add the card to the array of currently selected cards (`selected_pairs`):\n\n``` javascript\n    clickCard = id =\u003e {\n      let selected_pairs = [...this.state.selected_pairs]; // array containing the card pairs that had already been guessed by the user\n      let current_selection = this.state.current_selection; // array containing the currently selected cards\n      let score = this.state.score; // the user's current score\n      \n      // get the index of the card clicked by the user\n      let index = this.state.cards.findIndex(card =\u003e {\n        return card.id == id;\n      });\n    \n      let cards = [...this.state.cards]; // an array containing the cards rendered on the screen\n      \n      if (\n        cards[index].is_open == false \u0026\u0026\n        selected_pairs.indexOf(cards[index].name) === -1\n      ) { // only process the cards that isn't currently open and is not a part of the one's that have already been guessed by the user\n        cards[index].is_open = true; // open the card\n        \n        // add the card in the current selection\n        current_selection.push({\n          index: index,\n          name: cards[index].name\n        });\n    \n        // next: add code for checking if there are already two cards opened        \n      }\n    };\n    \n    // next: add code for resetting cards\n```\n\nOnce the user has already picked a pair of cards, we check whether their names are the same. If it does, we increment the user’s score by one and notify the opponent by emitting an event in the current user’s channel. This works because we’ve set up the current user to listen for events emitted from their opponent’s channel. So anytime we trigger an event on our own channel, the opponent gets notified. Once the current user accumulates the maximum score, we reset the UI and notify the opponent. On the other hand, if the pair selected by the user isn’t the same, we update the state to close the cards:\n\n``` javascript\n    if (current_selection.length == 2) {\n      if (current_selection[0].name == current_selection[1].name) {\n        score += 1;\n        selected_pairs.push(cards[index].name);\n        \n        // notify the opponent that their opponent have scored\n        this.my_channel.trigger(\"client-opponent-scored\", {\n          username: this.username,\n          score: score\n        });\n        \n        // all pairs have been opened\n        if (score == 12) {\n          // notify the user that they won\n          score = 0;\n          Alert.alert(\"Awesome!\", \"You won the game\");\n          // notify the opponent that they lose\n          this.my_channel.trigger(\"client-opponent-won\", {\n            username: this.username\n          });\n    \n          this.resetCards(); // reset the UI\n        }\n      } else {\n        cards[current_selection[0].index].is_open = false; // close the first card from the selected pair\n        \n        // close the second card from the selected pair after half a second\n        setTimeout(() =\u003e {\n          cards[index].is_open = false;\n          this.setState({\n            cards: cards\n          });\n        }, 500);\n      }\n    \n      current_selection = []; // reset the current selection\n    }\n    \n    // update the state\n    this.setState({\n      score: score,\n      cards: cards,\n      current_selection: current_selection\n    });\n```\n\nLastly, the `resetCards` function is where we reset the UI so the users can resume the game if they want to:\n\n``` javascript\n    resetCards = () =\u003e {\n      // close all cards\n      let cards = this.cards.map(obj =\u003e {\n        obj.is_open = false;\n        return obj;\n      });\n      \n      // re-shuffle the cards\n      cards = shuffleArray(cards);\n    \n      // update the state to reset the UI\n      this.setState({\n        current_selection: [],\n        selected_pairs: [],\n        cards: cards,\n        score: 0,\n        opponent_score: 0\n      });\n    };\n```\n\n## Server component\n\nNow we’re ready to add the server component. This is where we add the code for authenticating users as well as matching them so they can start playing the game.\n\nCreate a `server.js`  file inside the `server` folder and start importing the packages we need and initialize them:\n\n``` javascript\n    var express = require(\"express\");\n    var bodyParser = require(\"body-parser\");\n    var Pusher = require(\"pusher\"); // for authenticating users and emitting events from this server\n    \n    var app = express(); // for setting up the server\n    app.use(bodyParser.json()); // for parsing request body into JSON\n    app.use(bodyParser.urlencoded({ extended: false })); // for parsing URL encoded data in the request body\n    \n    require(\"dotenv\").config(); // for getting the environment variables\n```\n\nNext, initialize the array of users. This is where we will store the usernames of the users who log in to the app:\n\n``` javascript\n    var users = [];\n```\n\nNext, initialize the Pusher connection using the credentials from the `.env` file:\n\n``` javascript\n    var pusher = new Pusher({\n      appId: process.env.APP_ID,\n      key: process.env.APP_KEY,\n      secret: process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER\n    });\n```\n\nIf you haven’t done so already, this is a good chance to update the `server/.env` file with your Pusher app instance credentials:\n\n``` javascript\n    APP_ID=YOUR_PUSHER_APP_ID\n    APP_KEY=YOUR_PUSHER_APP_KEY\n    APP_SECRET=YOUR_PUSHER_APP_SECRET\n    APP_CLUSTER=YOUR_PUSHER_APP_CLUSTER\n    PORT=3000\n```\n\nNext, add a route for checking if the server is running. Try to access this later at `http://localhost:3000` on your browser once the server is running:\n\n``` javascript\n    app.get(\"/\", function(req, res) {\n      res.send(\"all green...\");\n    });\n```\n\nNext, add the function for returning a random integer (from zero) that’s not greater than the `max` passed as an argument:\n\n``` javascript\n    function randomArrayIndex(max) {\n      return Math.floor(Math.random() * max);\n    }\n```\n\nNext, add the route which receives the Pusher authentication request. From the login code of the `app/screens/Login.js` file earlier, we added the `username` in `auth.params`. This is what we’re accessing in the request body. A username should be unique so we first check if it already exists before processing the request further. If it doesn’t yet exist, we push it to the `users` array. Once there are at least two users, we pick two random users from there. Those two users will be the ones who will partake in the game. We trigger the `opponent-found` event on each of the user’s channel. The event contains the username of the two users. This allowed us to determine which of the users is the opponent and which is the current user from the `app/screens/Game.js` file earlier. Once that’s done, we authenticate the two users and return the authentication token as the response:\n\n``` javascript\n    app.post(\"/pusher/auth\", function(req, res) {\n      var username = req.body.username; // get the username passed as an additional param\n    \n      if (users.indexOf(username) === -1) {\n        users.push(username);\n    \n        if (users.length \u003e= 2) {\n          var player_one_index = randomArrayIndex(users.length);\n          var player_one = users.splice(player_one_index, 1)[0]; // pick a random user and remove them from the array\n    \n          var player_two_index = randomArrayIndex(users.length);\n          var player_two = users.splice(player_two_index, 1)[0]; // pick a random user and remove them from the array\n    \n          // trigger a message to player one and player two on their own channels\n          pusher.trigger(\n            [\"private-user-\" + player_one, \"private-user-\" + player_two],\n            \"opponent-found\",\n            {\n              player_one: player_one,\n              player_two: player_two\n            }\n          );\n        }\n        \n        // authenticate the user\n        var socketId = req.body.socket_id;\n        var channel = req.body.channel_name;\n        var auth = pusher.authenticate(socketId, channel);\n      \n        res.send(auth); // return the auth token\n      } else {\n        res.status(400);\n      }\n    });\n```\n\nLastly, serve it on the port you’ve specified in your `server/.env` file:\n\n``` javascript\n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\n## Run the app\n\nAt this point, we should be ready to run the server and expose it to the internet. \n\nExecute the following inside the `server` directory to run the server:\n\n```\n    node server.js\n```\n\nNext, navigate to where you downloaded the ngrok executable file and execute the following:\n\n```\n    ./ngrok http 3000\n```\n\nTry if the server is running correctly by accessing the https URL returned by ngrok on your browser. If it says “all green…”, the next step is to add the ngrok URL to your `app/screens/Login.js` file:\n\n``` javascript\n    this.pusher = new Pusher(\"YOUR PUSHER APP ID\", {\n      authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n      cluster: \"YOUR PUSHER APP CLUSTER\",\n      encrypted: true,\n      auth: {\n        params: { username: username }\n      }\n    });\n```\n\nOnce that’s done, the app should work fully:\n\n```\n    expo start\n```\n\n## Conclusion\n\nThat’s it! In this tutorial, we created a two-player memory game with React Native and Pusher. Along the way, you learned how to use Pusher in React Native. Specifically, you learned how to emit events from both the server and the client side.\n\nYou can view the app’s source code in this [GitHub repo](https://github.com/anchetaWern/RNMemory).","metaTitle":"Create a two-player memory game with React Native","metaDescription":"This tutorial will show you how to build a two-player memory game using React Native. Players sign in and are randomly assigned an opponent. The game then involves searching for image pairs. The game board and score update in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3pLXeMQWY8QSgC2IYeK0a0","type":"Entry","createdAt":"2018-10-23T12:42:44.772Z","updatedAt":"2018-10-23T12:50:54.968Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":" Create a live workout tracking app with React Native","url":"workout-tracker-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNWorkout","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-10-22","description":"This tutorial takes you through building a workout tracking app in React Native, with a Node backend. Users will be able to log and share their exercise updates and follow each other's progress. New workout logs are shared in realtime.","prerequisite":"You will need git, Node and Expo installed on your machine. Some knowledge of React Native is required.","content":"In this tutorial, we’ll be creating a realtime workout tracking app with React Native and Pusher.\n\n## Prerequisites\n\nBasic knowledge of React Native, React Navigation, and ES6 syntax is required. \n\nWe’ll also be using Redux. I’ll add as much detail as I can on what’s going on with all the Redux code, but you should at least be familiar with how Redux works.\n\nWe’ll be using [Expo](https://expo.io/) in order to easily test the app on multiple devices. [Install Expo](https://expo.io/learn) on your computer, then download the Expo client app for your [iOS](https://itunes.apple.com/us/app/expo-client/id982107779?mt=8) or [Android](https://play.google.com/store/apps/details?id=host.exp.exponent\u0026hl=en) device.\n\nThese are the package versions used in creating the app:\n\n\n- Node 8.3.0\n- Yarn 1.7.0\n- Expo CLI 2.1.2\n- Expo SDK 30.0.0\n- Pusher 4.3.1\n\nIt’s always recommended to use the most recent stable versions, but in case the app doesn’t work for you, you can use the versions above to ensure we have the same environment.\n\nLastly, you must have a [Pusher](https://pusher.com/) and an [ngrok account](https://ngrok.com/).\n\n\n## App overview\n\nThe app that we will be creating is for gym buddies who are working out in a different gym. They can use it to keep track of their buddy’s workout even if they are away from each other.\n\nThe app has two tabs: one for logging their own workout, and another for tracking the workout of their buddy. Users can both log and track at the same time. This makes it possible for users to compete on who can make the most number of sets and reps for each exercise they choose.\n\nUpon opening the app, users will be greeted with the logging tab. This is where they can log their workouts. They’ll be automatically assigned a unique username. When they click on their username, it will be copied to the clipboard so they can easily share it with their buddy:\n\n![react-native-workout-username](//images.ctfassets.net/1es3ne0caaid/ACLwrF7dq80gc200WyUqs/808f6ea8ef582568f0173eab7a198e1e/react-native-workout-username.png)\n\nThis is how it looks like when their buddy subscribes. Subscription can be done in the tracking tab. All they have to do is enter their buddy’s username and click on the right arrow:\n\n![react-native-workout-subscribe](//images.ctfassets.net/1es3ne0caaid/60HPwDIL3aIys8IC2UaYg6/6941f614198dfae33899d8ed0a4b2b00/react-native-workout-subscribe.png)\n\nThis is how it looks like when a user adds an exercise and a set:\n\n![react-native-workout-log](//images.ctfassets.net/1es3ne0caaid/3n6MvWp0FauOyYCUCAY8me/da2899d353559fce2c9e9a968d889153/react-native-workout-log.png)\n\nOnce an exercise or set has been added, it will show in the list below the username. The number at the top of the circle is the weight, and the number inside it is the number of reps for that set. When the user clicks on the circle, the reps is incremented by one:\n\n![react-native-workout-display-log](//images.ctfassets.net/1es3ne0caaid/2lCAJDKLgYOoEqM80IoqaG/ee4b47deb4093fa3ea816cf90e177a1f/react-native-workout-display-log.png)\n\nThe tracking tab in their buddy’s screen is automatically synced with the exercise and sets the user has added:\n\n![react-native-workout-share-log](//images.ctfassets.net/1es3ne0caaid/XdBJMLHT6mSWI8iy8KaeG/5ef729c2cd4c802545e3b17444316b04/react-native-workout-share-log.png)\n\nYou can view the source code of this app on this [GitHub repo](https://github.com/anchetaWern/RNWorkout). \n\n## Creating a Pusher app\n\nOn your [Pusher dashboard](https://dashboard.pusher.com/), create a new app and name it **RNWorkout**. Once created, enable the client events in the **App Settings** tab:\n\n![react-native-workout-client-events](//images.ctfassets.net/1es3ne0caaid/13zBdyDKoi2iO08CYcwkUw/5673c2595a00fd0aeba21cca9d815f32/react-native-workout-client-events.png)\n\nClient events allow us to emit messages directly from the app. Because normally, messages are only emitted from the server. This time, we’ll only be using the server to authenticate the user. This authentication process allows us to make requests directly from the app.\n\n## Clone the app\n\nStart by cloning the repo:\n\n```\n    git clone https://github.com/anchetaWern/RNWorkout.git\n```\n\nSwitch to the `starter` branch and install both the app and server dependencies:\n\n```\n    cd RNWorkout\n    git checkout starter\n    yarn install\n    cd server\n    npm install\n```\n\nThe `starter` branch contains a minimal version of the app where the screens, components, helper functions, styles, and the server code has already been added. This makes it easy for us to focus on the main subject of this tutorial, and that is how to work with Redux and Pusher Channels.\n\n## Starter code tour\n\nBefore we proceed with writing some code, let’s first do a quick tour of the code we have on the `starter` branch.\n\n### Helpers\n\nThe `app/helpers` folder contains two helper files for generating unique ID’s (`uniqid.js`) and usernames (`uniqname.js`). The unique ID’s are used as a unique identifier for the exercises and sets.\n\n### Server\n\nThe `server` folder contains the code for the server component of the app. This server is for authenticating the user when they initialize a new Pusher connection. No further updates are required inside this folder except for the `server/.env` file. We’ll update it later once we run the app.\n\n### Modals\n\nThe `app/modals` folder contains the code for the add exercise and add set modals. These modals are used for logging a new exercise and adding a set to a specific exercise. We will be updating the `AddExerciseModal.js` and `AddSetModal.js` later. This is to add the code for dispatching actions that will modify the store.\n\n### Components\n\nThe `app/components` folder contains all the components that the app is using. This includes the following:\n\n\n- **AlertBox** - for showing messages enclosed inside a box. \n- **IconButton** - for showing buttons with an icon in them.\n- **SetContainer** - for showing the individual sets (the gray circles with a number inside and below them).\n- **List** - serves as a container list for the SetContainer component.\n- **ConnectedFlatList** - for showing all the workout data (exercises and sets).\n\nAmong the components above, we’re only going to update the ConnectedFlatList (`app/components/ConnectedFlatList/ConnectedFlatList.js`). As it is right now, it won’t really render anything. We have to turn it into a “connected” component so it will automatically re-render once the relevant data in the store is updated.\n\n### Screens\n\nWe only have one screen because the logging and tracking features are too similar to have their own screen. If you open the `Root.js` file, you’ll see that we’re only using the LogWorkout screen:\n\n``` javascript\n    import LogWorkoutScreen from \"./app/screens/LogWorkout\";\n    \n    const LogStack = createStackNavigator(\n      {\n        Log: LogWorkoutScreen\n      },\n      { initialRouteName: \"Log\" }\n    );\n    \n    const TrackStack = createStackNavigator(\n      {\n        Track: LogWorkoutScreen\n      },\n      { initialRouteName: \"Track\" }\n    );\n```\n\nWe will be updating the `app/screens/LogWorkout.js` file later because that’s where we need to link everything up.\n\n## Build the app\n\nNow we’re ready to build the app. Here’s what we’ll be doing through the rest of the tutorial:\n\n- Add the actions.\n- Add the reducers.\n- Dispatch an action for adding a new exercise to the store when the user adds a new exercise. \n- Dispatch an action for adding a new set to the store when the user adds a new set.\n- Initialize Pusher.\n- Subscribe user to their own channel so they can emit client events.\n- Subscribe to another user so they can listen for client events emitted by that user.\n- Emit a client event on the channel when a new exercise or set is added by the user.\n- Listen for client events so the tracking tabs UI is synced to that of the user being followed.\n\nThe steps above aren’t ordered in a specific way. Most likely, you’ll have to switch between each of them as you’re testing the app. For this tutorial, I recommend you to start the app even if it’s not fully working yet. This allows you to easily see the effects of the code you’re adding, and not simply copy-pasting it:\n\n```\n    expo start\n```\n\nLet’s make this as hands-on as possible. I’ll first mention what needs to be done so you can try on your own, and then you can peak at the code either here or in the GitHub repo if you’re not sure what to do. I’ve also added “todo” comments in the starter code as a guide on where you should put a specific code. Feel free to browse around the code whenever you see “our task is to…” or “next, we need to..” as that’s the cue for when we’ll start adding the code. Try to figure out on your own first before you proceed.\n\nWe’ll work on the functionality for logging workouts first. That will be the first screen that you see when you run the app. Right now, we only have the following:\n\n![react-native-workout-starter-screen](//images.ctfassets.net/1es3ne0caaid/3MsKX00SNG0Ia6AAqa6Sq2/d08bbe7051266638499d81368acb4477/react-native-workout-starter-screen.png)\n\nThe username is generated, and it can be copied to clipboard, but that’s it. Nothing you can really do in this tab (logging tab) right now.\n\n### Add the actions\n\nOur first task is to figure out how to make the add exercise modal visible so we can enter the exercise we want to add.\n\nMy usual workflow when working with Redux is to first figure out what the global app state will look like. But before we can do that, we first need to determine the actions that can be done throughout the app in relation to how it affects the UI:\n\n- Open or close modals.\n- Add an exercise.\n- Set the current exercise.\n- Add a set.\n- Increment set.\n\nNote that I’ve excluded actions that are only applicable to a specific component. Here’s a good rule of thumb to determine if something is an action or not:\n\n\u003e If the rest of the app’s UI isn’t affected if the value of a specific piece of data is updated, then it’s not an action. \n\nFor this app, non-actions include:\n\n- Entering the name of the exercise.\n- Entering the weight of a set.\n\nBoth instances don’t update the app’s UI in a way that affects the whole app, so the state for those can be managed within the component level.\n\nGo ahead and create an `app/actions` folder. Inside it, create a `types.js` file and define all the actions that we came up with. This will help us avoid typos when working with [actions](https://redux.js.org/basics/actions):\n\n``` javascript\n    // app/actions/types.js\n    export const ADDED_EXERCISE = \"added_exercise\";\n    \n    export const ADDED_SET = \"added_set\";\n    export const INCREMENTED_SET = \"incremented_set\";\n    \n    export const MODAL_TOGGLED = \"modal_toggled\";\n    export const SET_EXERCISE = \"set_exercise\";\n```\n\nNext, define the [action creators](https://redux.js.org/basics/reducers). These are functions that will return the data needed by each action. Each action type will have its own function, which returns it as the `type` property:\n\n``` javascript\n    // app/actions/index.js\n    import {\n      ADDED_EXERCISE,\n      ADDED_SET,\n      INCREMENTED_SET,\n      MODAL_TOGGLED,\n      SET_EXERCISE\n    } from \"./types\";\n    \n    export const addedExercise = (exerciseID, exerciseName, user = \"me\") =\u003e {\n      return {\n        type: ADDED_EXERCISE,\n        id: exerciseID, // a machine-friendly version of the exercise name\n        exercise: exerciseName, // name of the exercise (e.g. front squat)\n        user: user \n      };\n    };\n    \n    export const addedSet = (setID, exerciseID, weight, user = \"me\") =\u003e {\n      return {\n        type: ADDED_SET,\n        id: setID, // unique ID for the set\n        exercise_id: exerciseID, // used for determining which exercise to put the set under\n        weight: weight, // how heavy is the weight being lifted (usually in lbs)\n        reps: 1, // default number of repetitions for a new set\n        user: user\n      };\n    };\n    \n    export const incrementedSet = (setID, reps, user = \"me\") =\u003e {\n      return {\n        type: INCREMENTED_SET,\n        id: setID, // unique ID for the set\n        reps: reps, // repetitions performed for this set\n        user: user\n      };\n    };\n    \n    export const modalToggled = (modalName, visibility) =\u003e {\n      return {\n        type: MODAL_TOGGLED, \n        modal: modalName, // addExerciseModal or addSetModal\n        visibility: visibility // true (visible) or false (not visible)\n      };\n    };\n    \n    // for setting the exercise in which to add a set\n    export const setExercise = id =\u003e {\n      return {\n        type: SET_EXERCISE,\n        exercise_id: id\n      };\n    };\n```\n\nNote that the `addedExercise`, `addedSet`, and `incrementedSet` functions have a `user` parameter which is set to `me` by default. This allows us to specify which specific app state will the data go. The value of this parameter can either be `me` or `others`. `me` is for the data displayed in the logging tab, while `others` is for the data displayed on the tracking tab. \n\n### Add the reducers\n\nNext, we need to create the [reducers](https://redux.js.org/basics/reducers). These are responsible for describing how a specific portion of the app state will change. Personally, I create a separate reducer based on the data they’re modifying. In this app, that would be:\n\n- Exercise reducer (`ExerciseReducer.js`) - for exercise-related data.\n- Set reducer (`SetReducer.js`) - for set-related data.\n- UI reducer (`UIReducer.js`) - for UI-related data. These are usually booleans which hide or show what is seen on the screen (for example, modals and progress loaders).\n\nWhen it comes to figuring out which reducers to create, anything really goes if you’re only working on a throw-away project to learn a specific technology. But be sure to read about Redux best practices when working in a production app.\n\nCreate an `app/reducers` folder and create the files mentioned above inside it. \n\nLet’s first start with the exercise reducer:\n\n``` javascript\n    // app/reducers/ExerciseReducer.js\n    import { ADDED_EXERCISE } from \"../actions/types\";\n    \n    import uniqid from \"../helpers/uniqid\";\n    \n    const INITIAL_STATE = {\n      exercises: [],\n      others_exercises: []\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      switch (action.type) {\n        case ADDED_EXERCISE:\n          const key = uniqid();\n          const id = action.id;\n          const exercise = action.exercise;\n          \n          // determine which specific array to update\n          const exercises =\n            action.user == \"me\" ? state.exercises : state.others_exercises;\n          \n          // create a new array with the new exercise appended to the end of it\n          const updated_exercises = exercises.concat({\n            key: key,\n            exercise_id: id, // machine-friendly version of the exercise name\n            exercise_name: exercise\n          });\n          \n          // return the new state based on which user performed the action\n          if (action.user == \"me\") {\n            return { ...state, exercises: updated_exercises };\n          }\n    \n          return { ...state, others_exercises: updated_exercises };\n    \n        default:\n          return state;\n      }\n    };\n```\n\nFrom the code above, the first step is to define the `INITIAL_STATE`. Note that this isn’t the initial value for the whole app state. This should only be for the specific data modified by this reducer. In this case, it’s only the `exercises` (the exercises logged by the current user), and `others_exercises` (the exercises logged by the user followed by the current user). \n\nBased on the `user` passed from the action, we get and re-create either the `exercises` or `others_exercises` array. Take note of the word “re-create” as we’re not really supposed to modify the state directly, we only replace it with a different value. Redux handles the calculation needed to determine whether the UI should be re-rendered or not. And if you modify the state directly, then it won’t be ensured that that process will work correctly. That’s why we’re using the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) and [concat method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) to avoid updating the state directly. \n\nNext is the set reducer. Again, we’re updating two arrays, one for each user. But this time, our reducer handles two actions, one for when the set is added, and another for when it’s incremented:\n\n``` javascript\n    // app/reducers/SetReducer.js\n    import { ADDED_SET, INCREMENTED_SET } from \"../actions/types\";\n    \n    const INITIAL_STATE = {\n      sets: [],\n      others_sets: []\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      let sets = [];\n      let index = 0;\n      let reps = 0;\n    \n      let set_name = \"sets\";\n      let current_sets = [];\n    \n      switch (action.type) {\n        case ADDED_SET:\n          current_sets = action.user == \"me\" ? state.sets : state.others_sets;\n          sets = current_sets.concat({\n            key: action.id,\n            exercise_id: action.exercise_id,\n            weight: action.weight,\n            reps: action.reps\n          });\n    \n          const updated_state =\n            action.user == \"me\"\n              ? { ...state, sets }\n              : { ...state, others_sets: sets };\n          return updated_state;\n    \n        case INCREMENTED_SET:\n          current_sets = action.user == \"me\" ? state.sets : state.others_sets;\n          sets = [...current_sets];\n          index = sets.findIndex(itm =\u003e {\n            return itm.key == action.id;\n          });\n    \n          reps = action.reps;\n          sets[index] = { ...sets[index], reps: reps + 1 }; // add 1 to the current rep\n    \n          if (action.user == \"others\") {\n            return { ...state, others_sets: sets };\n          }\n    \n          return { ...state, sets };\n    \n        default:\n          return state;\n      }\n    };\n```\n\nNext is the UI reducer. This is responsible for processing the actions for showing or hiding the modals, and setting the current exercise:\n\n``` javascript\n    // app/reducers/UIReducer.js\n    import { MODAL_TOGGLED, SET_EXERCISE } from \"../actions/types\";\n    \n    const INITIAL_STATE = {\n      ui: {\n        current_exercise: \"\",\n        addExerciseModalIsOpen: false,\n        addSetModalIsOpen: false\n      }\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      let ui = {};\n      switch (action.type) {\n        case SET_EXERCISE:\n          ui = { ...state.ui };\n          ui[\"current_exercise\"] = action.exercise_id;\n    \n          return {\n            ...state,\n            ui\n          };\n    \n        case MODAL_TOGGLED:\n          ui = { ...state.ui };\n          ui[`${action.modal}IsOpen`] = action.visibility;\n    \n          const new_state = {\n            ...state,\n            ui\n          };\n    \n          return new_state;\n    \n        default:\n          return state;\n      }\n    };\n```\n\nThe final step is to combine all the reducers into a single file. This allows us to easily supply it when we create the store later:\n\n``` javascript\n    // app/reducers/index.js\n    import { combineReducers } from \"redux\";\n    import ExerciseReducer from \"./ExerciseReducer\";\n    import SetReducer from \"./SetReducer\";\n    import UIReducer from \"./UIReducer\";\n    \n    export default combineReducers({\n      exercises: ExerciseReducer,\n      sets: SetReducer,\n      ui: UIReducer\n    });\n```\n\n### Connect the LogWorkout screen to the store\n\nNow that we’ve defined our actions, action creators, and reducers, the next step is to link the LogWorkout screen to the store.\n\nOpen `app/screens/LogWorkout.js` and add the following:\n\n``` javascript\n    import { MaterialIcons } from \"@expo/vector-icons\"; // already added\n    \n    // add these\n    import { createStore } from \"redux\";\n    import { Provider } from \"react-redux\";\n```\n\nIn the code above, `createStore` is used for [creating the store](https://redux.js.org/api/createstore). Consider the store as the global app state, while the `Provider` is a helper component that allows us to pass down the store to the component level. This gives us the ability to dispatch actions within this component and allow its child components to also connect to the store.\n\nNext, import the actions and reducers. To create a store we need to pass the combined reducers as an argument. This makes the store aware of which reducers it should use when a specific action is dispatched from the app:\n\n``` javascript\n    import {\n      modalToggled,\n      incrementedSet,\n      addedExercise,\n      addedSet\n    } from \"../actions\";\n    \n    import reducers from \"../reducers\";\n    const store = createStore(reducers);\n```\n\nNext, wrap the whole screen in the `Provider` component and pass the `store` as a value for the `store` prop:\n\n``` javascript\n    render() {\n      return (\n        \u003cProvider store={store}\u003e\n          ...\n        \u003c/Provider\u003e\n      );\n    }\n```\n\nOnce that’s done, we should be able to dispatch actions inside this component’s methods. In this case, we dispatch the action for opening the add exercise modal:\n\n``` javascript\n    showAddExerciseModal = () =\u003e {\n      store.dispatch(modalToggled(\"addExerciseModal\", true));\n    };\n```\n\nAs the button for opening the modal is inside the header, we need to set the `showAddExerciseModal` function as a navigation param. That way, we can access it as such from the header:\n\n``` javascript\n    componentDidMount() {\n      this.props.navigation.setParams({\n        showAddExerciseModal: this.showAddExerciseModal\n      });\n    }\n```\n\nIn the `navigationOptions`, you can now execute the `showAddExerciseModal` function:\n\n``` javascript\n    return {\n      headerTitle: `Log Workout`,\n      headerRight: (\n        \u003cIconButton\n          onPress={() =\u003e {\n            if (routeName == \"Log\") {\n              params.showAddExerciseModal(); // add this\n            }\n          }}\n        /\u003e\n      ),\n    }\n```\n\nWhen the button is clicked, it should execute the exercise reducer and the app’s state will be modified. Currently, the add exercise modal isn’t really aware of the changes that happen in the store yet, so it won’t really become visible when the button is clicked.\n\n### Open the add exercise modal\n\nThe next step is to make the add exercise modal into a connected component. That way, it will become aware of the state changes so it can re-render itself when a data it depends on changes.\n\nOpen the `app/modals/AddExerciseModal.js` file. To turn a component into a connected component, we need to use the `connect` method from `react-redux`. This allows us to add the functions for mapping specific data in the store as a prop for this component. It also allows us to define functions that we can use inside the component to dispatch actions, as you’ll see later:\n\n``` javascript\n    import { connect } from \"react-redux\";\n```\n\nNext, import the actions for toggling the visibility of the modal, and adding a new exercise:\n\n``` javascript\n    import { modalToggled, addedExercise } from \"../actions\";\n```\n\nNext, scroll to the bottom of the file (right before `export default AddExerciseModal`) and define the `mapStateToProps` function. This is used for mapping whichever data we have on the store as a prop for this component. In this case, we only need the `ui` object from the UI reducer. We use [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to extract it, and the spread syntax to extract the properties that are inside the `ui` object:\n\n``` javascript\n    const mapStateToProps = ({ ui }) =\u003e ({\n      ...ui\n    });\n```\n\nEarlier, in the UI reducer, we defined the following initial state:\n\n``` javascript\n    // app/reducers/UIReducer.js\n    const INITIAL_STATE = {  \n      ui: {\n        current_exercise: \"\",\n        addExerciseModalIsOpen: false,\n        addSetModalIsOpen: false\n      }\n    };\n```\n\n`mapStateToProps` gives us access to those specific properties in the `ui` object as if it were a prop that’s passed to the component (add exercise modal). To access the current visibility value of the add exercise modal, all we have to do is supply `this.props.ui.addExerciseModalIsOpen` to the `visible` prop of the `Modal` component:\n\n``` javascript\n    // app/modals/AddExerciseModal.js\n    \u003cModal\n      animationType=\"slide\"\n      visible={this.props.ui.addExerciseModalIsOpen}\n    \u003e\n      ...\n    \u003c/Modal\u003e\n```\n\nBut before we can do that, we first have to connect the component to the store. We can do that with the following code. This returns a “connected” version of the component, one that’s subscribed to the updates made in the store. `mapStateToProps` gets executed every time there’s an update to the store. If a relevant value is updated, the component is re-rendered because the prop it depends on is directly mapped to a value in the store:\n\n``` javascript\n    // app/modals/AddExerciseModal.js\n    export default connect(\n      mapStateToProps\n    )(AddExerciseModal);\n    \n    // export default AddExerciseModal; // replace this with the one above\n```\n\nOnce that’s done, clicking on the button in the header should make the add exercise modal visible.\n\nIf you’re wondering why we used `this.props.ui.addExerciseModalIsOpen` instead of `this.props.addExerciseModalIsOpen`, that’s because the data inside the UI reducer lives inside the `ui` object. We’ve defined this earlier in the reducer’s index file:\n\n``` javascript\n    // app/reducers/index.js\n    export default combineReducers({\n      // ...\n      ui: UIReducer\n    });\n```\n\nAnd in the UI reducer, everything lives inside another `ui` object:\n\n``` javascript\n    // app/reducers/UIReducer.js\n    const INITIAL_STATE = {\n      ui: {\n        // ...\n        addSetModalIsOpen: false\n      }\n    };\n```\n\nSo to access `addSetModalIsOpen`, we have to access `ui.ui.addSetModalIsOpen` from the store. Object destructuring gave us access to the `ui` object we’ve defined inside `app/reducers/index.js` file, while the spread syntax gave us access to the `ui` object defined inside `app/reducers/UIReducer.js` but not the properties inside of it:\n\n``` javascript\n    const mapStateToProps = ({ ui }) =\u003e ({\n      ...ui // note: spreads the ui object defined in the app/reducers/index.js file. not the ui object in the app/reducers/UIReducer.js\n    });\n```\n\nThis is why we still had to use `this.props.ui.addExerciseModalIsOpen`.\n\n### Add a new exercise\n\nThe next step is to add a new exercise when the add button in the add exercise modal is clicked. Earlier, you learned that to dispatch an action, you first have to import the action creator so you can dispatch it using the `dispatch` method from the `store`:\n\n``` javascript\n    // app/screens/LogWorkout.js\n    store.dispatch(modalToggled(\"addExerciseModal\", true));\n```\n\nThe problem we have now is that we have no access to the `store` or its `dispatch` method when inside the add exercise modal. The solution for that is the `mapDispatchToProps` method. It allows us to return functions that are also mapped as props for the component. The `dispatch` function is automatically passed as an argument to the `mapDispatchToProps` function, and we can use it to dispatch the action. In this case, we only need the action for toggling the visibility of the modal and adding the exercise:\n\n``` javascript\n    // app/modals/AddExerciseModal.js\n    // add this right below mapStateToProps\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        closeModal: () =\u003e {\n          dispatch(modalToggled(\"addExerciseModal\", false));\n        },\n        addExercise: (id, name) =\u003e {\n          dispatch(addedExercise(id, name));\n        }\n      };\n    };\n```\n\nTo use `mapDispatchToProps`, pass it as the second argument for the `connect` function:\n\n``` javascript\n    export default connect(\n      mapStateToProps,\n      mapDispatchToProps\n    )(AddExerciseModal);\n```\n\nThe next step is to call the two functions (`closeModal` and `addExercise`) we just mapped as props:\n \n``` javascript\n    addExercise = () =\u003e {\n      // add these\n      if (this.state.exercise_name) {\n        const name = this.state.exercise_name;\n        const id = name.replace(\" \", \"_\");\n        this.props.addExercise(id, name); \n        \n        // already added\n        this.setState({\n          exercise_name: \"\"\n        });\n      \n        this.props.closeModal(); \n      }\n    };\n```\n\nOnce that’s done, a new exercise should be added to the store every time you click on the add button in the add exercise modal. The modal should also automatically close after that.\n\nDon’t forget to close the modal when the close button is clicked:\n\n``` javascript\n    \u003cIconButton\n      icon=\"close\"\n      color=\"#FFF\"\n      size={18}\n      onPress={() =\u003e {\n        this.props.closeModal(); // add this\n      }}\n    /\u003e\n```\n\n### Show the exercises\n\nNow that we’ve added the code for creating a new exercise, the next step is to show the exercises that were added. That’s the job of the ConnectedFlatList component. \n\nWhat we need to do is very similar to what we did in the add exercise modal, so we’ll just breeze through the code. Start by importing all the things we need:\n\n``` javascript\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    import { connect } from \"react-redux\";\n    import uniqid from \"../../helpers/uniqid\";\n    \n    import {\n      modalToggled,\n      setExercise,\n      incrementedSet,\n      addedExercise,\n      addedSet\n    } from \"../../actions\";\n```\n\nNext, scroll to the bottom of the file and add the `mapStateToProps` function. While we’re here, let’s also add the data related to the sets:\n\n``` javascript\n    const mapStateToProps = state =\u003e {\n      return {\n        exercises: state.exercises.exercises,\n        sets: state.sets.sets,\n        others_exercises: state.exercises.others_exercises,\n        others_sets: state.sets.others_sets\n      };\n    };\n    \n    export default connect(\n      mapStateToProps\n    )(ConnectedFlatList);\n```\n\nNext, get the relevant exercise data from the props. While we’re here, let’s also extract the sets data:\n\n``` javascript\n    render() {\n      // add these\n      const exercises =\n        this.props.user == \"me\"\n          ? this.props.exercises\n          : this.props.others_exercises;\n      const sets =\n        this.props.user == \"me\" ? this.props.sets : this.props.others_sets;\n      \n      // already added\n      if (exercises.length) {\n        return (\n          \u003cFlatList\n            data={exercises}\n            extraData={sets}\n            renderItem={this.renderItem}\n            contentContainerStyle={{ paddingBottom: 50, backgroundColor: \"#FFF\" }}\n          /\u003e\n        );\n      }\n    }\n```\n\nTake note of the `extraData` prop that we’ve supplied for the FlatList. We’ve supplied `sets` to it because the sets data isn’t nested under the `exercises` array. That means that if we add a new set or increment an existing one, this FlatList won’t really get re-rendered. Supplying `sets` as an `extraData` allows us to re-render the main FlatList when the sets data is updated.\n\nOnce that’s done, you should now see the exercises being listed as you add them through the add exercise modal.\n\n\n### Open the add set modal\n\nNow that we can add and show exercises, the next step is to show the add set modal. \n\nWhen the plus button to the right of the exercise name is clicked, it should show the add set modal. To implement that, we need to dispatch the action for toggling the visibility of the add set modal.\n\nJust like what we did earlier in the add exercise modal, we need to use `mapDispatchToProps` so we can dispatch actions by calling functions that are mapped as a prop:\n\n``` javascript\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    // add these\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        openAddSetModal: () =\u003e {\n          dispatch(modalToggled(\"addSetModal\", true));\n        },\n        setExercise: exercise_id =\u003e {\n          dispatch(setExercise(exercise_id));\n        }\n      };\n    };\n    \n    export default connect(\n      mapStateToProps,\n      mapDispatchToProps // add this\n    )(ConnectedFlatList);\n```\n\nNote that aside from the `modalToggled` action, we also have `setExercise`. This is for updating the value of the `current_exercise` property in the UI reducer so that by the time the user hits the button for adding the set, we can extract this value from the props and supply it as one of the properties for the set to be created.\n\nNext, inside the `renderItem` method, call the relevant functions you returned in `mapDispatchToProps`:\n\n``` javascript\n    renderItem = ({ item }) =\u003e {\n      return (\n        \u003cView key={item.key} listKey={item.key}\u003e\n          \u003cView style={styles.list_item_header}\u003e\n            \u003cText style={styles.list_item_header_text}\u003e{item.exercise_name}\u003c/Text\u003e\n            \u003cIconButton\n              icon=\"add\"\n              size={20}\n              color=\"#333\"\n              onPress={() =\u003e {\n                if (this.props.user == \"me\") {\n                  // add these:\n                  this.props.openAddSetModal(); \n                  this.props.setExercise(item.exercise_id);\n                }\n              }}\n            /\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nThe next step is to turn the add set modal into a connected component. You should already know how to do this so let’s just look at the code:\n\n``` javascript\n    // app/modals/AddSetModal.js\n    import { connect } from \"react-redux\";\n    import { modalToggled, addedSet } from \"../actions\";\n    import uniqid from \"../helpers/uniqid\";\n\n\n    const mapStateToProps = ({ ui }) =\u003e ({\n      ...ui\n    });\n    \n    export default connect(\n      mapStateToProps\n    )(AddSetModal);\n\n\n    render() {\n      return (\n        \u003cModal\n          animationType=\"slide\"\n          visible={this.props.ui.addSetModalIsOpen}\n          ...\n        \u003e\n        \u003c/Modal\u003e\n      );\n    }\n```\n\nOnce that’s done, the add set modal should become visible when the plus button to the right of the exercise name is clicked.\n\n### Add a new set\n\nAdding a new set is very similar to how we added an exercise:\n\n``` javascript\n    // app/modals/AddSetModal.js\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        closeModal: () =\u003e {\n          dispatch(modalToggled(\"addSetModal\", false));\n        },\n        addSet: (setID, exerciseID, weight) =\u003e {\n          dispatch(addedSet(setID, exerciseID, weight));\n        }\n      };\n    };\n    \n    export default connect(\n      mapStateToProps,\n      mapDispatchToProps // add this\n    )(AddSetModal);\n```\n\nTake note of how we’re extracting the `current_exercise` from the props. Earlier, in the ConnectedFlatList, we’ve set the value for this property when the user clicks on the plus button to the right of the exercise name. That’s the purpose of the `setExercise` action, so we always have the correct value for the `exercise_id` when we add a new set:\n\n``` javascript\n    addSet = () =\u003e {\n      // add these\n      if (this.state.weight) {\n        const id = uniqid();\n        const exercise_id = this.props.ui.current_exercise;\n        const weight = this.state.weight;\n      \n        this.props.addSet(id, exercise_id, weight);\n        this.props.closeModal();\n        \n        // previously added code..\n      }\n    };\n```\n\nDon’t forget to close the modal when its close button is clicked:\n\n``` javascript\n    \u003cIconButton\n      icon=\"close\"\n      color=\"#FFF\"\n      size={18}\n      onPress={() =\u003e {\n        this.props.closeModal(); // add this\n      }}\n    /\u003e\n```\n\n### Show the sets\n\nThe next step is to show the sets added for a specific exercise. Earlier, we already mapped the current values of the `sets` and `others_sets` array in the store over to this component via `mapStateToProps`. All we have to do now is extract the relevant sets data from the props:\n\n``` javascript\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    renderSets = (exercise_id, key) =\u003e {\n      const id = uniqid();\n      const l_key = exercise_id + \":\" + key + \":\" + id;\n      \n      const sets_data =\n        this.props.user == \"me\" ? this.props.sets : this.props.others_sets;\n      const sets = sets_data.filter(item =\u003e {\n        return item.exercise_id == exercise_id;\n      });\n      \n      // already added:\n      if (sets.length) {\n        // ...\n      }\n    }\n```\n\nNote that the value of `this.props.users` in the code above is passed as a prop via the standard means (through the component). This is used to determine which specific set data to use (the current user or the user they’re following). The `l_key` is used as the value for the `listKey` for the FlatList that will contain each set. [We need to supply this](https://stackoverflow.com/questions/49276526/nested-flat-list-invariant-violation-a-virtualizedlist-contains-a-cell-which-it) because we’re nesting a FlatList within a FlatList. The `listKey` prop allows React to differentiate between sibling flatlists.\n\nAt this point, you should be able to see the sets being listed below a specific exercise when you add them.\n\n### Increment a set\n\nThe final thing we need to implement when it comes to the logging functionality is incrementing the value of a specific set. \n\nWe called it “increment set”, but what we really want to do is to increment the number of reps for a specific set. \n\nStart by adding it in the `mapDispatchToProps`:\n\n``` javascript\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        // added previously\n        setExercise: exercise_id =\u003e {\n          ...\n        },\n        // add this\n        incrementSet: (set_id, reps) =\u003e {\n          dispatch(incrementedSet(set_id, reps));\n        }\n      };\n    };\n```\n\nOnce that’s done, you should be able to call the method within the `onPress` method of the SetContainer:\n\n``` javascript\n    \u003cSetContainer\n      ...\n      onPress={() =\u003e {\n        if (this.props.user == \"me\") {\n          this.props.incrementSet(item.key, item.reps); // add this\n        }\n      }}\n    /\u003e\n```\n\nAt this point, clicking on a set should increment the number inside it.\n\n### Emit client events\n\nNow we’re ready to implement the tracking tab. \n\nStart by importing Pusher:\n\n``` javascript\n    // app/screens/LogWorkout.js\n    import Pusher from \"pusher-js/react-native\";\n```\n\nNext, initialize the class variables that we’re going to use:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      this.pusher = null;\n      this.my_channel = null; // the channel of the current user\n      this.followed_channel = null; // the channel of the user they followed\n    }\n```\n\nInside `componentDidMount`, add the code for initializing Pusher. Supply the credentials found in your Pusher app instance’s settings page. Leave the `authEndpoint` for now, we will supply it later once we run the server. Once that’s done, subscribe the user to their own channel (the unique `username` generated for them). In this case, we’re prefixing the channel name with `private-` to specify that this is a [private channel](https://pusher.com/docs/client_api_guide/client_private_channels). This specific channel type allows us to emit events directly from the app. Since it’s private, we have to authenticate through a server (the one inside the `server` directory of the project), that’s what the `authEndpoint` is for:\n\n``` javascript\n    componentDidMount() {\n      // previous code here\n    \n      // add these:\n      this.pusher = new Pusher(\"YOUR PUSHER APP KEY\", {\n        authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n        cluster: \"YOUR_PUSHER_APP_CLUSTER\",\n        encrypted: true\n      });\n    \n      this.my_channel = this.pusher.subscribe(`private-user-${username}`);\n      this.my_channel.bind(\"pusher:subscription_error\", status =\u003e {\n        Alert.alert(\n          \"Error occured\",\n          \"Cannot connect to Pusher. Please restart the app.\"\n        );\n      });\n    \n      this.my_channel.bind(\"pusher:subscription_succeeded\", () =\u003e {\n        console.log(\"subscription to my channel ok!\");\n      });\n    }\n```\n\nNext, inside the `render` method, we need to check whether `my_channel` is initialized before we render anything. This allows us to supply it as a prop to AddExerciseModal, AddSetModal, and ConnectedFlatList:\n\n``` javascript\n    render() {\n      return (\n        \u003cProvider store={store}\u003e\n          \u003cView\u003e\n          {\n            this.props.navigation.state.routeName == \"Log\" \u0026\u0026 this.my_channel \u0026\u0026 (\n              \u003cView style={styles.log_content}\u003e\n                \u003cView style={styles.top_content}\u003e\n                  ...\n                \u003c/View\u003e\n                \u003cAddExerciseModal channel={this.my_channel} /\u003e\n                \u003cAddSetModal channel={this.my_channel} /\u003e\n                \n                \u003cConnectedFlatList user={\"me\"} channel={this.my_channel} /\u003e\n              \u003c/View\u003e  \n            )\n          }\n          \u003c/View\u003e\n        \u003c/Provider\u003e\n      );\n    }\n```\n\nWhy do we need to add `my_channel` as a prop to those three components you ask? That’s because we need to trigger client events when a specific action happens. In this case, the actions are:\n\n- Adding a new exercise.\n- Adding a new set.\n- Incrementing a set.\n\nLet’s quickly run through all the places which needs updating:\n\n``` javascript\n    // app/modals/AddExerciseModal.js\n    addExercise = () =\u003e {\n      if (this.state.exercise_name) {\n        this.props.addExercise(id, name); // already added\n        \n        // add this\n        this.props.channel.trigger(\"client-added-exercise\", {\n          id,\n          name\n        });\n        \n        // rest of the code\n      }\n    };\n\n\n    // app/models/AddSetModal.js\n    addSet = () =\u003e {\n      if (this.state.weight) {\n        this.props.addSet(id, exercise_id, weight); // already added\n        // add this\n        this.props.channel.trigger(\"client-added-set\", {\n          id,\n          exercise_id,\n          weight\n        });\n        \n        // rest of the code\n      }    \n    };\n\n\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    \n    \u003cSetContainer\n      ...\n      onPress={() =\u003e {\n        if (this.props.user == \"me\") {\n          this.props.incrementSet(item.key, item.reps); // already added\n          // add this\n          this.props.channel.trigger(\"client-incremented-set\", {\n            set_id: item.key,\n            reps: item.reps\n          });\n        }\n      }}\n    /\u003e\n```\n\nThe codes we’ve added above should be fairly easy to understand. We’re emitting a [client event](https://pusher.com/docs/client_api_guide/client_events) via the `channel` prop we’ve passed from the LogWorkout screen. The `trigger` method accepts the name of the event as its first argument, and an object containing the data we want to emit as its second.\n\nNote that client events should always be prefixed with `client-`. This allows Pusher to determine that this event is sent from the client.\n\n### Listen for client events\n\nThe final step is to add the code for subscribing to the user entered in the tracking tab and listening to events as they get fired. We execute the code below when the user clicks on the button with a right arrow in the tracking tab:\n\n``` javascript\n    // app/screens/LogWorkout.js\n    \n    subscribe = () =\u003e {\n      this.followed_channel = this.pusher.subscribe(\n        `private-user-${this.state.subscribedToUsername}`\n      );\n    \n      this.followed_channel.bind(\"pusher:subscription_error\", status =\u003e {\n        Alert.alert(\n          \"Error occured\",\n          \"Cannot connect to Pusher. Please restart the app.\"\n        );\n      });\n    \n      this.followed_channel.bind(\"pusher:subscription_succeeded\", () =\u003e {\n        Alert.alert(\"Success\", \"You are now subscribed!\"); // let the user know that the subscription succeeded\n        \n        // listen for the events that we've emitted earlier\n        this.followed_channel.bind(\"client-added-exercise\", data =\u003e {\n          store.dispatch(addedExercise(data.id, data.name, \"others\")); // dispatch the action to update the UI for the tracking tab\n        });\n    \n        this.followed_channel.bind(\"client-added-set\", data =\u003e {\n          store.dispatch(\n            addedSet(data.id, data.exercise_id, data.weight, \"others\")\n          );\n        });\n    \n        this.followed_channel.bind(\"client-incremented-set\", data =\u003e {\n          store.dispatch(incrementedSet(data.set_id, data.reps, \"others\"));\n        });\n      });\n    };\n```\n\n## Running the app\n\nNow that we’ve added all of the relevant code, the app should work after we’ve added all the config and linked it to its server component.\n\nStart by adding your Pusher app credentials to the `server/.env` file:\n\n```\n    APP_ID=YOUR_PUSHER_APP_ID\n    APP_KEY=YOUR_PUSHER_APP_KEY\n    APP_SECRET=YOUR_PUSHER_APP_SECRET\n    APP_CLUSTER=YOUR_PUSHER_APP_CLUSTER\n    PORT=3000\n```\n\nOnce that’s done, run the server:\n\n```\n    node server.js\n```\n\nNext, add your ngrok auth token and expose port 3000 to the internet:\n\n```\n    ./ngrok authToken YOUR_NGROK_AUTH_TOKEN\n    ./ngrok http 3000\n```\n\nNgrok should show the https URL for the server. Copy it to your Pusher `authEndpoint` in the LogWorkout screen:\n\n``` javascript\n    // app/screens/LogWorkout.js\n    this.pusher = new Pusher(\"YOUR_PUSHER_APP_KEY\", {\n      authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n      cluster: \"YOUR_PUSHER_APP_CLUSTER\",\n      encrypted: true\n    });\n```\n\nOnce that’s done, the app should be fully functional. Try running it on two devices:\n\n```\n    expo start\n```\n\n## Conclusion\n\nIn this tutorial, you learned how to use Pusher within a React Native app to create a realtime workout tracking app. Along the way, you’ve solidified your experience with basic Redux concepts and Pusher Channels.\n\nYou can view the source code of this app on this [GitHub repo](https://github.com/anchetaWern/RNWorkout).","metaTitle":" Create a live workout tracking app with React Native","metaDescription":"Use React Native and Node to build a workout tracking app. Users will log and share workouts and follow each other's progress."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6I6zL6laFOeMuuWyQAGWqo","type":"Entry","createdAt":"2018-09-07T15:16:38.025Z","updatedAt":"2018-09-07T15:16:38.025Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a live stocks application with push notifications for iOS","url":"stocks-push-notifications-ios","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro-articles/stocks-app-ios","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kOTcNAC12gwWEyE6MimMY","type":"Entry","createdAt":"2018-02-12T15:08:28.581Z","updatedAt":"2018-02-26T12:31:12.766Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Trading","url":"trading","type":"use case"}}],"reviewDate":"2018-09-05","description":"This tutorial will show you how to build an iOS app that tracks stock prices. It features realtime updates and push notifications. You will build the frontend app in Swift, and the backend in Node.js.","prerequisite":"You will need Xcode, Cocoapods and Node.js installed on your machine. Some knowledge of iOS development will be helpful.","content":"In this article, we will see how you can build a stock market application using iOS and Swift. The prices will update in realtime as the changes to the prices occur. More importantly, though, you will be able to activate push notifications on certain stocks so you get notified when the prices of the stock changes.\n\nWhen we are done, we will have an application that functions like this:\n\n![ios-stocks-demo](//images.ctfassets.net/1es3ne0caaid/4oR4dRIkTCEMEK2iOMcoMQ/c7f74457e5e4529929a84f960ef0faaf/ios-stocks-demo.gif)\n\n## Prerequisites\n\nTo follow along in this tutorial you need the following things:\n\n- Xcode installed on your machine. Download [here](https://developer.apple.com/xcode).\n- Know your way around the Xcode IDE.\n- Basic knowledge of the Swift programming language.\n- Basic knowledge of JavaScript.\n- Node.js installed on your machine. Download [here](https://nodejs.org/en/download/).\n- Cocoapods installed on your machine. Install [here](https://guides.cocoapods.org/using/getting-started.html).\n- A Pusher account. Create one [here](https://pusher.com).\n\nLet’s get started.\n\n\n## Creating your iOS project\n\nThe first thing we need to do is create the project in Xcode. Launch Xcode and click **Create a new Xcode project**.\n\n![ios-stocks-welcome-xcode](//images.ctfassets.net/1es3ne0caaid/U17iFrhgC4GKEKaUqAI0i/158f59671b9340e854de759f1a1b495a/ios-stocks-welcome-xcode.png)\n\nFrom the next screen, select **Single View App \u003e Next** then give the project a name. Let’s name it something really creative, like **Stocks.**\n\n![ios-stocks-new-app](//images.ctfassets.net/1es3ne0caaid/5CEuleMypUI6MGKK6IeIo6/89863680adb2722700e0687d0cc0fd40/ios-stocks-new-app.png)\n\n### Installing dependencies using Cocoapods\n\nNow that we have our project set up, we need to add some external libraries to the project. These libraries will be used for various functions like push notifications and HTTP requests.\n\nFirst close Xcode. Next, create a new `Podfile` in the root of your project and paste the following code:\n\n```\n    # File: ./Podfile\n    platform :ios, '11.0'\n    \n    target 'Stocks' do\n      use_frameworks!\n      pod 'Alamofire', '~\u003e 4.7.3'\n      pod 'PusherSwift', '~\u003e 6.1.0'\n      pod 'PushNotifications', '~\u003e 1.0.1'\n      pod 'NotificationBannerSwift', '~\u003e 1.6.3'\n    end\n```\n\nAbove, we are using the `Podfile` to define the libraries our project will be depending on to work. Here are the libraries we have:\n\n\n- [Alamofire](https://github.com/Alamofire/Alamofire) - an HTTP networking library written in Swift.\n- [PusherSwift](https://github.com/pusher/pusher-websocket-swift) - the iOS library for Pusher.\n- [PushNotifications](https://github.com/pusher/push-notifications-swift) - Swift SDK for Pusher Beams.\n- [NotificationBannerSwift](https://github.com/Daltron/NotificationBanner) - easy way to display app notification banners in iOS apps.\n\nNow that we have defined the dependencies, let’s install them. Open your terminal and `cd` to the project root and run this command:\n\n```\n    $ pod update\n```\n\nThis will install all the dependencies listed in the `Podfile`. We are using the `update` command because we want the latest versions of the libraries, which may have changed since writing this article.\n\nWhen the installation is complete, we will have a new `Stocks.xcworkspace` file in the root of the project. Going forward, we will have to open our iOS project using this Xcode workspace file.\n\n\n## Building the iOS application\n\nThe first thing we want to do is consider how the entire service will work. We will build two applications. One will be the iOS application and the other will be a backend, which will be built with JavaScript (Node.js). \n\nIn this section, we will start with the iOS application. Open the `Stocks.xcworkspace` file in Xcode and let’s start building the iOS app.\n\n### Creating the settings class\n\nThe first thing we are going to do is create a notification settings class. This will be responsible for storing the notification settings for a device. When you subscribe for push notifications on a certain stock, we will store the setting using this class so that the application is aware of the stocks you turned on notifications for.\n\nCreate a new Swift class named `STNotificationSettings` and paste the following code:\n\n``` swift\n    // File: ./Stocks/STNotificationSettings.swift\n    import Foundation\n    \n    class STNotificationSettings: NSObject {\n        static let KEY = \"ST_NOTIFICATIONS\"\n        static let shared = STNotificationSettings()\n        \n        private override init() {}\n        \n        private var settings: [String: Bool] {\n            get {\n                let key = STNotificationSettings.KEY\n                \n                if let settings = UserDefaults.standard.object(forKey: key) as? [String: Bool] {\n                    return settings\n                }\n                \n                return [:]\n            }\n            set(newValue) {\n                var settings: [String: Bool] = [:]\n                \n                for (k, v) in newValue {\n                    settings[k.uppercased()] = v\n                }\n                \n                UserDefaults.standard.set(settings, forKey: STNotificationSettings.KEY)\n            }\n        }\n        \n        func enabled(for stock: String) -\u003e Bool {\n            if let stock = settings.first(where: { $0.key == stock.uppercased() }) {\n                return stock.value\n            }\n            \n            return false\n        }\n        \n        func save(stock: String, enabled: Bool) {\n            settings[stock.uppercased()] = enabled\n        }\n    }\n```\n\nIn the class above, we have a static property, `key`, that is just used as the key for the preference that will hold all our settings. This key will be used for lookup and storage of the settings in the iOS file system. \n\nWe also have a `shared` static property, which holds an instance of the class. We want this class to be instantiated once. This is also why we have made our `init` method private. \n\nNext, we have the `settings` property. This is a [computed property](https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID259) that provides a getter and a setter to retrieve and set other properties and values indirectly. The getter just retrieves the settings data from the filesystem, while the setter saves the settings to the filesystem.\n\nWe have two methods in the class, `enabled(for:)` and `save(stock:enabled:)`. The first one checks if push notifications are enabled for a stock, while the second saves the setting for a stock.\n\nThat’s all for the settings class.\n\n### Creating our view controller\n\nThe next thing we want to do is create the view controller. We will start by creating a view controller class, then we will create a view controller in the storyboard. We will then connect the class to the storyboard.\n\nCreate a new table view controller named `StocksTableViewController` and replace the contents with this:\n\n``` swift\n    // File: ./Stocks/StocksTableViewController.swift\n    import UIKit\n    import Alamofire\n    import PusherSwift\n    import PushNotifications\n    import NotificationBannerSwift\n    \n    class StocksTableViewController: UITableViewController {\n    }\n```\n\nWe will get back to this class, but for now, leave it and open the `Main.storyboard` file. In the storyboard, drag a new table view controller to the canvas. Next, drag the arrow from the old view controller that was in the storyboard to the new table view controller and then delete the old view controller.\n\n![ios-stocks-tableview](//images.ctfassets.net/1es3ne0caaid/1osRvlJkvaackYIc82seis/6b7fd1aca66a446c06137d1003d54574/ios-stocks-tableview.png)\n\nNext, open the **Identity Inspector** and set the custom class for the table view controller to `StocksTableViewController`. This will connect the class we created earlier to this table view controller we have on the storyboard.\n\n![ios-stocks-identity-inspector](//images.ctfassets.net/1es3ne0caaid/1DSUBk4DZamggSwwSIKI20/c2453f16afbd30b9c8a11568e019709e/ios-stocks-identity-inspector.png)\n\nFinally, set the reuse **Identifier** on the cell to ‘default’. We will not be using the cells that come with this table view controller, but we still need to set the identifier so Swift does not whine about it.\n\n![ios-stocks-identifier-default](//images.ctfassets.net/1es3ne0caaid/6G5pxC76us4IWKugGOKUUc/aa262d59135adedd281a2931dd8df26f/ios-stocks-identifier-default.png)\n\nNext, open the `StocksTableViewController` class and let's start adding logic to it. Update the class as seen below:\n\n``` swift\n    // [...]\n    \n    class StocksTableViewController: UITableViewController {\n        var stocks: [Stock] = []\n        \n        var pusher: Pusher!\n        let pushNotifications = PushNotifications.shared\n        let notificationSettings = STNotificationSettings.shared\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n        }\n        \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return stocks.count\n        }\n        \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"stock\", for: indexPath) as! StockCell\n            cell.stock = stocks[indexPath.row]\n            return cell\n        }\n    }\n```\n\nAbove we have a few properties we have defined:\n\n- `stocks` - this holds an array of `Stock` items. This is the data that will be displayed on each table cell. The `Stock` is a model we have not created but will later on.\n- `pusher` - this holds the `PusherSwift` library instance. We will use it to connect to Pusher and update the cells in realtime.\n- `pushNotifications` - this holds a singleton of the `PushNotifications` library. We will use this to subscribe and unsubscribe from [interests](https://docs.pusher.com/beams/concepts/interests).\n- `notificationSettings` - this holds a singleton of the `STNotificationSettings` class. We will use this to get the setting for each stock when necessary.\n\nThe methods we have defined above are standard with iOS development and should not need explanation. \n\nHowever, in the `tableView(_:cellForRowAt:)` method, we do something a little different. We get an instance of `StockCell`, which we have not created, and then assign a `Stock` item to the cell. Later on, we will see how we can use the `didSet` [property observer](https://medium.com/the-andela-way/property-observers-didset-and-willset-in-swift-4-c3730f26b1e9) to neatly populate the cell.\n\nIn the same class, add the following methods:\n\n``` swift\n    // [...]\n    \n    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        let cell = tableView.cellForRow(at: indexPath) as! StockCell\n        if let stock = cell.stock {\n            showNotificationSettingAlert(for: stock)\n        }\n    }\n    \n    private func showNotificationSettingAlert(for stock: Stock) {\n        let enabled = notificationSettings.enabled(for: stock.name)\n        let title = \"Notification settings\"\n        let message = \"Change the notification settings for this stock. What would you like to do?\"\n        \n        let alert = UIAlertController(title: title, message: message, preferredStyle: .actionSheet)\n        \n        let onTitle = enabled ? \"Keep on\" : \"Turn on notifications\"\n        alert.addAction(UIAlertAction(title: onTitle, style: .default) { [unowned self] action in\n            guard enabled == false else { return }\n            self.notificationSettings.save(stock: stock.name, enabled: true)\n            \n            let feedback = \"Notfications turned on for \\(stock.name)\"\n            StatusBarNotificationBanner(title: feedback, style: .success).show()\n    \n            try? self.pushNotifications.subscribe(interest: stock.name.uppercased())\n        })\n        \n        let offTitle = enabled ? \"Turn off notifications\" : \"Leave off\"\n        let offStyle: UIAlertActionStyle = enabled ? .destructive : .cancel\n        alert.addAction(UIAlertAction(title: offTitle, style: offStyle) { [unowned self] action in\n            guard enabled else { return }\n            self.notificationSettings.save(stock: stock.name, enabled: false)\n            \n            let feedback = \"Notfications turned off for \\(stock.name)\"\n            StatusBarNotificationBanner(title: feedback, style: .success).show()\n            \n            try? self.pushNotifications.unsubscribe(interest: stock.name.uppercased())\n        })\n        \n        present(alert, animated: true, completion: nil)\n    }\n    \n    // [...]\n```\n\nAbove, we added two new methods:\n\n\n- `tableView(_:didSelectRowAt:)` - this is a default table view controller method that is fired when a row is selected in the table. In this method, we get the row that was tapped, and then show an alert that we can use to configure the push notification setting for that stock.\n- `showNotificationSettingAlert` - this is invoked from the method above. It contains all the actual logic required to display the notification settings alert. The alert will look like this when the application is ready:\n\n![ios-stocks-alert-demo](//images.ctfassets.net/1es3ne0caaid/27JECNw00wuUqMo6m4eKiE/529b48f741ee6992a4db70f5f45a04b4/ios-stocks-alert-demo.gif)\n\nNext, let’s update the `viewDidLoad()` method. Replace the `viewDidLoad()` method with the following code:\n\n``` swift\n    // [...]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        fetchStockPrices()\n        \n        tableView.separatorInset.left = 0\n        tableView.backgroundColor = UIColor.black\n        \n        let customCell = UINib(nibName: \"StockCell\", bundle: nil)\n        tableView.register(customCell, forCellReuseIdentifier: \"stock\")\n        \n        pusher = Pusher(\n            key: AppConstants.PUSHER_APP_KEY,\n            options: PusherClientOptions(host: .cluster(AppConstants.PUSHER_APP_CLUSTER))\n        )\n        \n        let channel = pusher.subscribe(\"stocks\")\n        let _ = channel.bind(eventName: \"update\") { [unowned self] data in\n            if let data = data as? [[String: AnyObject]] {\n                if let encoded = try? JSONSerialization.data(withJSONObject: data, options: .prettyPrinted) {\n                    if let stocks = try? JSONDecoder().decode([Stock].self, from: encoded) {\n                        self.stocks = stocks\n                        self.tableView.reloadData()\n                    }\n                }\n            }\n        }\n        \n        pusher.connect()\n    }\n    \n    // [...]\n```\n\nAbove, we do a couple of things. First, we call the `fetchStockPrices()` method, which we will define later, to fetch all the stock prices from a backend API. Then we changed the background color of the table view to black. \n\nWe registered the non-existent custom cell, `StockCell`, which we referenced earlier in the article. We finally used the `pusher` instance to connect to a Pusher channel, `stock`, and also bind to the `update`  event on that channel. When the event is fired, we decode the data into the `stocks` property using Codable and reload the table to show the new changes.\n\n**Related:** [**Swift 4 decoding JSON using Codable**](https://blog.pusher.com/swift-4-decoding-json-codable/)\n\nBelow the `showNotificationSettingAlert(for:)` method in the same class, add the following method:\n\n``` swift\n    // [...]\n    \n    private func fetchStockPrices() {\n        Alamofire.request(AppConstants.ENDPOINT + \"/stocks\")\n            .validate()\n            .responseJSON { [unowned self] resp in\n                guard let data = resp.data, resp.result.isSuccess else {\n                    let msg = \"Error fetching prices\"\n                    return StatusBarNotificationBanner(title: msg, style: .danger).show()\n                }\n                \n                if let stocks = try? JSONDecoder().decode([Stock].self, from: data) {\n                    self.stocks = stocks\n                    self.tableView.reloadData()\n                }\n            }\n    }\n    \n    // [...]\n```\n\nThe method above was invoked in the `viewDidLoad()` method above. It fetches all the stocks from the API using the Alamofire library and then decodes the response to the `stocks` property using Codable. After this, the table view is reloaded to show the updated stocks data.\n\nThat’s all for this class. \n\nWe referenced a few non-existent classes in the `StocksTableViewController` though, let’s create them.\n\n### Creating supporting classes\n\nCreate a new `AppConstants` Swift file and paste the following code:\n\n``` swift\n    import Foundation\n    \n    struct AppConstants {\n        static let ENDPOINT = \"http://127.0.0.1:5000\" // Or use your ngrok HTTPS URL\n        static let PUSHER_APP_KEY = \"PASTE_PUSHER_APP_KEY_HERE\"\n        static let PUSHER_APP_CLUSTER = \"PASTE_PUSHER_APP_CLUSTER_HERE\"\n        static let BEAMS_INSTANCE_ID = \"PASTE_PUSHER_BEAMS_INSTANCE_ID_HERE\"\n    }\n```\n\nThe struct above serves as our configuration file. It allows us to define one true source of configuration values that we need for the application. At this point, you should create your [Pusher Channels](https://dashboard.pusher.com) and [Pusher Beams](https://dash.pusher.com) application if you haven’t already and paste the credentials above.\n\nNext, let’s define the `Stock` model. Create a new `Stock` Swift file and paste the following code:\n\n``` swift\n    import Foundation\n    \n    struct Stock: Codable {\n        let name: String\n        let price: Float\n        let percentage: String\n    }\n```\n\nAbove we have our `Stock` model which extends the Codable protocol. You can read more about it Codable [here](https://blog.pusher.com/swift-4-decoding-json-codable/).\n\n### Creating our custom cell\n\nWe referenced the `StockCell` several times above, so let’s create our custom cell now. We are creating this separately so it is easy to manage and everything is modular.\n\nFirst, create a new **Empty** view in Xcode as seen below:\n\n![ios-stocks-empty-view](//images.ctfassets.net/1es3ne0caaid/6DGSWQS7vi888q8sSGkww2/c49f48159ec3a4321def1d9e5e98bc9c/ios-stocks-empty-view.png)\n\nNext, drag a new table view cell into the empty canvas. We will be using this as our custom cell. Next, create a new Swift file named `StockCell` and paste the following code into it:\n\n``` swift\n    import UIKit\n    \n    class StockCell: UITableViewCell {\n    \n        var stock: Stock? {\n            didSet {\n                if let stock = stock {\n                    stockName.text = stock.name\n                    stockPrice.text = \"\\(stock.price)\"\n                    stockPercentageChange.text = \"\\(stock.percentage)\"\n                    percentageWrapper.backgroundColor = stock.percentage.first == \"+\"\n                        ? UIColor.green.withAlphaComponent(0.7)\n                        : UIColor.red\n                }\n            }\n        }\n        \n        @IBOutlet private weak var stockName: UILabel!\n        @IBOutlet private weak var stockPrice: UILabel!\n        @IBOutlet private weak var percentageWrapper: UIView!\n        @IBOutlet private weak var stockPercentageChange: UILabel!\n        \n        override func awakeFromNib() {\n            super.awakeFromNib()\n            percentageWrapper.layer.cornerRadius = 5\n        }\n    }\n```\n\nIn the cell class above, we have the `stock` property which holds a `Stock` model. The property has the `didSet` [property observer](https://medium.com/the-andela-way/property-observers-didset-and-willset-in-swift-4-c3730f26b1e9). So anytime the `stock` property is set, the code in the observer is run. In the observer, we set the private `@IBOutlet` properties. \n\nThis makes our code neat and organized because the `StockTableViewController` does not have to care about how the `stock` is handled, it just sets the `Stock` model to the `StockCell` and the cell handles the rest.\n\nWe have an `awakeFromNib()` method which is called when the cell is created. We use this to set a corner radius to the view holding the percentage change text.\n\nNext, open the `StockCell.xib` view, and set the **custom class** of the view to `StockCell`. Then design the cell as seen below:\n\n![ios-stocks-stockcell](//images.ctfassets.net/1es3ne0caaid/5gWw79b0HuYWem0GsoEMWG/3b1f763d173196e8349652a3d56c3f5e/ios-stocks-stockcell.png)\n\nWe have used constraints to make sure each item stays in place. You can decide to do the same if you wish.\n\nWhen you are done designing, connect the labels and views to your `StockCell` class using the **Assistant Editor**. This will establish the link between the items in the view and the `StockCell`'s `@IBOutlet`s.\n\n![ios-stocks-link-stockcell](//images.ctfassets.net/1es3ne0caaid/3uiTevTlcQa64A6sWKQug8/042265249736981fb7cb8cf7bf121012/ios-stocks-link-stockcell.png)\n\n\n### Updating the AppDelegate and turning on push notifications\n\nOpen the `AppDelegate` file and replace the contents with the following:\n\n``` swift\n    import UIKit\n    import PushNotifications\n    \n    @UIApplicationMain\n    class AppDelegate: UIResponder, UIApplicationDelegate {\n        var window: UIWindow?\n        let pushNotifications = PushNotifications.shared\n    \n        func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n            pushNotifications.start(instanceId: AppConstants.BEAMS_INSTANCE_ID)\n            pushNotifications.registerForRemoteNotifications()\n            return true\n        }\n        \n        func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n            pushNotifications.registerDeviceToken(deviceToken)\n        }\n    }\n```\n\nIn the `application(_:didFinishLaunchingWithOptions:)` method, we start the `PushNotifications` library and then we register the device for remote notifications. In the `application(_:didRegisterForRemoteNotificationsWithDeviceToken:)` method, we register the device token with Pusher Beams.\n\nNext, turn on the **Push Notification** capability for our application as seen below:\n\n![ios-stocks-enable-push-notifications](//images.ctfassets.net/1es3ne0caaid/9MNOUcCNWw8mMmCwAwyeA/b030fbae83c929289c2de367b754a07b/ios-stocks-enable-push-notifications.png)\n\nThis will add a `Stocks.entitlement` file in your project root.\n\nOne last thing we need to do before we are done with the iOS application is allowing the application load data from arbitrary URLs. By default, iOS does not allow this, and it should not. However, since we are going to be testing locally, we need this turned on temporarily. Open the `info.plist` file and update it as seen below:\n\n![ios-stocks-enable-app-transport](//images.ctfassets.net/1es3ne0caaid/61AnDSwfleaswuGGcGCuEI/1d19d8a391787c846841c2815b2ae656/ios-stocks-enable-app-transport.png)\n\nNow, our app is ready, but we still need to create the backend in order for it to work. Let’s do just that.\n\n\n## Building the backend API\n\nOur API will be built using Node.js. The backend will be responsible for providing the available stocks and also sending push notifications when there are changes. It will also push changes to Pusher Channels when there are changes in the stock price. We will be simulating the stock prices for instant results, but you can choose to use a live API.\n\nCreate a new directory for your backend application. Inside this project directory, create a new `package.json` file and paste the following code:\n\n``` json\n    {\n      \"name\": \"webapi\",\n      \"version\": \"1.0.0\",\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.18.3\",\n        \"express\": \"^4.16.3\",\n        \"pusher\": \"^2.1.3\",\n        \"@pusher/push-notifications-server\": \"1.0.0\"\n      }\n    }\n```\n\nNext, open a terminal window, `cd` to the application directory and run the command below:\n\n```\n    $ npm install\n```\n\nThis will install the dependencies in the `package.json` file. Next, create a new `config.js` file, and paste the following code:\n\n``` javascript\n    module.exports = {\n      appId: 'PASTE_PUSHER_CHANNELS_APPID',\n      key: 'PASTE_PUSHER_CHANNELS_KEY',\n      secret: 'PASTE_PUSHER_CHANNELS_SECRET',\n      cluster: 'PASTE_PUSHER_CHANNELS_CLUSTER',\n      secretKey: 'PASTE_PUSHER_BEAMS_SECRET',\n      instanceId: 'PASTE_PUSHER_BEAMS_INSTANCEID'\n    };\n```\n\nAbove, we have the configuration values for our Pusher instances. Replace the placeholders above with the keys from your Pusher dashboard.\n\nFinally, create a new file, `index.js` and paste the following code:\n\n``` javascript\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const path = require('path');\n    const Pusher = require('pusher');\n    const PushNotifications = require('@pusher/push-notifications-server');\n    \n    const app = express();\n    const pusher = new Pusher(require('./config.js'));\n    const pushNotifications = new PushNotifications(require('./config.js'));\n    \n    function generateRandomFloat(min, max) {\n      return parseFloat((Math.random() * (max - min) + min).toFixed(2));\n    }\n    \n    function getPercentageString(percentage) {\n      let operator = percentage \u003c 0 ? '' : '+';\n      return `${operator}${percentage}%`;\n    }\n    \n    function loadStockDataFor(stock) {\n      return {\n        name: stock,\n        price: generateRandomFloat(0, 1000),\n        percentage: getPercentageString(generateRandomFloat(-10, 10))\n      };\n    }\n    \n    app.get('/stocks', (req, res) =\u003e {\n      let stocks = [\n        loadStockDataFor('AAPL'),\n        loadStockDataFor('GOOG'),\n        loadStockDataFor('AMZN'),\n        loadStockDataFor('MSFT'),\n        loadStockDataFor('NFLX'),\n        loadStockDataFor('TSLA')\n      ];\n      \n      stocks.forEach(stock =\u003e {\n        let name = stock.name;\n        let percentage = stock.percentage.substr(1);\n        let verb = stock.percentage.charAt(0) === '+' ? 'up' : 'down';\n    \n        pushNotifications.publish([stock.name], {\n          apns: {\n            aps: {\n              alert: {\n                title: `Stock price change: \"${name}\"`,\n                body: `The stock price of \"${name}\" has gone ${verb} by ${percentage}.`\n              }\n            }\n          }\n        });\n      });\n      \n      pusher.trigger('stocks', 'update', stocks);\n    \n      res.json(stocks);\n    });\n    \n    app.listen(5000, () =\u003e console.log('Server is running'));\n```\n\nAbove, we have a simple Express application. We have three helper functions:\n\n\n- `generateRandomFloat` - generates a random float between two numbers.\n- `getPercentageString` - uses a passed number to generate a string that will be shown on the table cell, for example, +8.0%. \n- `loadStockDataFor` - loads random stock data for a stock passed to it.\n\nAfter the helpers, we have the `/stocks` route. In here we generate a list of stocks, and for each stock, we send a push notification about the change in price. The stocks name serves as the interest for each stock. This means that subscribing to the AAPL interest, for instance, will subscribe to receiving push notifications for the AAPL stock.\n\nNext, we trigger an event, `update`, on the `stocks` channel, so all other devices can pick up the recent changes. Lastly, we return the generated list of stocks and we add the code that starts the server on port 5000.\n\nTo get the server started, run the following command on your terminal:\n\n```\n    $ node index\n```\n\n![ios-stocks-node](//images.ctfassets.net/1es3ne0caaid/775RfIfVHqoMg88wgKYcqG/0a0871547d6c395efa9950916d08d22f/ios-stocks-node.png)\n\n## Testing the application\n\nNow that we have built the backend and started the Node.js server, you can now run the iOS application. Your stocks will be displayed on the screen. However, if you want to test push notifications, you will need a real iOS device, and you will need to follow the following instructions.\n\nFirst, you will need to install [ngrok](https://ngrok.com/). This tool is used to expose local running web servers to the internet. Follow [the instructions](https://ngrok.com/download) on their website to download and install ngrok.\n\nOnce you have it installed, run the following command in another terminal window:\n\n```\n    $ ngrok http 8000\n```\n\n![ios-stocks-ngrok](//images.ctfassets.net/1es3ne0caaid/5bh8fTsXxuOQgyIgkCUsm0/87caf9152990a1c6cbc56288122fb6f5/ios-stocks-ngrok.png)\n\n\u003e Make sure your Node.js server is still running before executing the command above.\n\nNow we have a **Forwarding** URL we can use in our application. Copy the HTTPS forwarding URL and replace the `ENDPOINT` value in `AppConstants.swift` with the URL.\n\nNow, run the application on your device. Once it has loaded, tap on a stock and turn on notification for that stock then minimize the application and visit http://localhost:5000/stocks on your web browser. This will simulate a change in the stock prices and you should get a push notification for the stock you subscribed to.\n\n![ios-stocks-demo](//images.ctfassets.net/1es3ne0caaid/4oR4dRIkTCEMEK2iOMcoMQ/c7f74457e5e4529929a84f960ef0faaf/ios-stocks-demo.gif)\n\n\n## Conclusion\n\nIn this article, we have been able to create a stocks application with push notification using Pusher Channels and Pusher Beams.\n\nThe source code to the entire application is available on [GitHub](https://github.com/neoighodaro-articles/stocks-app-ios). ","metaTitle":"Create a stocks application with push notifications for iOS","metaDescription":"Use Swift and Node.js to build a realtime stock price tracker. The app features live updates and push notifications."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5iJKA5uH6oMMw8GSGM2ko8","type":"Entry","createdAt":"2018-07-12T21:02:54.294Z","updatedAt":"2020-06-19T13:46:49.924Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app using Framework7","url":"chat-app-framework7","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/Kennypee/pusher-framework7-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-07-09","description":"Build a chat app for iOS and Android using Framework7 and Vue.js, with a simple Node.js backend. Framework7 is a free and open source mobile HTML framework to develop hybrid mobile apps or web apps with iOS \u0026 Android native look and feel.","prerequisite":"You will need Node and npm or Yarn installed on your machine.","content":"## Introduction\n\nRealtime chat functionality has revitalized the way we communicate over the years. In recent times, customers can speak directly with business owners from their mobile applications and websites. This is a huge plus in technology considering how difficult it was in the past.\n\nFramework7 is a free and open source mobile HTML framework to develop hybrid mobile apps with iOS and Android native look and feel. In this tutorial, we'll build a realtime chat application with Framework7 using Pusher channels. Here’s a preview of what we’ll be building. \n\n![framework7-chat-app-demo](//images.ctfassets.net/1es3ne0caaid/5ksbxBpdDyueuymA0OMEae/45c761be2e92c8b19f8eb55ca8a3a9d9/framework7-chat-app-demo.jpeg)\n\n## Prerequisites\n\nBefore you begin, ensure that you have Node and npm or Yarn installed on your machine. Here is a run-down of the core technologies we will be using.\n\n\n1. [**Framework7**](http://framework7.io) ****- a framework for building native-like mobile applications with HTML\n\n\n2. [**Pusher**](https://pusher.com/) - Pusher is a technology for building apps with varying realtime needs like push notifications and pub/sub messaging. It is the engine behind the realtime ability of our chat app.\n\n\n3. [**Vue.js**](https://vuejs.org/) - an open-source JavaScript framework for building user interfaces\n\n\n4. [**Phonegap**](http://phonegap.com/) - an application framework that enables you to build natively installed applications using HTML and JavaScript. \n\n\n## Setting up the project\n\nThe simplest way to set up a Phonegap project is through the command line interface (CLI). Before we create a Phonegap project, ensure that you have Phonegap installed on your machine. To install Phonegap, run:\n\n```\n    $ npm install -g phonegap\n```\n\nThis will install phonegap on your machine and you can confirm the installation by running the command:\n\n```\n    $ phonegap -v\n```\n\nThis should print the version of the currently installed Phonegap. Now that we have that installed let’s create a Phonegap project. Run:\n\n\n```    \n    // create a phonegap project with the framework7 vue template\n    $ phonegap create pusher-chat --template https://github.com/hollyschinsky/phonegap-template-framework7-vue\n    $ cd pusher-chat\n    //start the server\n    $ phonegap serve\n```\n\n\nIf you get any prompts in the process, it is always safe to say yes within the scope of this demo. The `phonegap serve` command will start your project on `localhost:3000`. If you navigate to it on your browser, you should see this.\n\n![framework7-default-page](//images.ctfassets.net/1es3ne0caaid/6peL2Lzl7imkwesSOiAKuM/3d2898faf0d1debba50b40bd9c0ae337/framework7-default-page.jpeg)\n\n## Setting up Pusher\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). \n\n![framework7-create-pusher](//images.ctfassets.net/1es3ne0caaid/2X2s4DWEt2cQEmAG6iui4k/a4bd9f45baaa63a44ea6c85c8f2cf22f/framework7-create-pusher.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![framework7-create-channels](//images.ctfassets.net/1es3ne0caaid/2reyE709jys2EO6eOIQKgw/12d2a1d82bd74a28a017eba7a441a6cc/framework7-create-channels.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with to be provided with some boilerplate code:\n\n![framework7-pusher-app-config](//images.ctfassets.net/1es3ne0caaid/55C390SQikyEYaY8uwW4Uc/3ddd7e19bd5134635da595a617e22cf1/framework7-pusher-app-config.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![framework7-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/3zxbKtLyysGEWyko8I2MOq/292dc1a265982eee46b7236043cfb6cb/framework7-pusher-app-keys.png)\n\nSave your Pusher credentials somewhere in your editor where you can quickly retrieve it as we’ll be needing it soon.\n\n\n## Server configurations\n\nWe’ll be using a local Node server to establish communications with the client so as to render messages in realtime. Before we create our server, let’s install the packages it’ll need to run effectively. Back in your project root, run:\n\n```\n    $ npm install --save axios body-parser cors express pusher pusher-js\n```\n\nThen in your code editor, create a new file `server.js` and set it up like so:\n\n``` javascript\n        //server.js\n        const Pusher = require('pusher');\n        const express = require('express');\n        const bodyParser = require('body-parser');\n        const cors = require('cors');\n        const app = express();\n        app.use(cors());\n        app.use(bodyParser.urlencoded({extended: false}));\n        app.use(bodyParser.json());\n        \n        var pusher = new Pusher({\n            appId: 'Your-app-Id',\n            key: 'Your-app-Key',\n            secret: 'Your-app-secret',\n            cluster: 'Your-app-cluster',\n            encrypted: true\n          });\n        app.set('PORT', process.env.PORT || 6000);\n        app.post('/message', (req, res) =\u003e {\n          const message = req.body;\n          pusher.trigger('chat', 'message', message);\n          res.send(message)\n      \n        });\n        app.listen(app.get('PORT'), () =\u003e \n          console.log('Listening at ' + app.get('PORT')))\n```\n\n\u003e Do not forget to replace the placeholder values here with your unique keys from Pusher.\n\nHere we loaded all the necessary middlewares for the Express server and then configured Pusher using the credentials we got from our Pusher dashboard.\n\nWe also created the `/``message` endpoint that will receive and process messages sent in from our app. Finally, we trigger an event named `message` to Pusher Channels on a channel called `chat`. The `chat` channel holds a message payload that contains the `message` sent by the user.\n\nTo start the server, run:\n\n```\n    $ node server\n```\n\nThe above command should output this message in your terminal:\n\n\n```    \n    Listening on port 6000\n``` \n\n## Application layout\n\nNow let’s open the `index.html` file and set it up. This is the entrance to our app and we’ll place a form to collect the user’s name and a button to take them to the chat page. Open the `index.html` file, delete all the code in it and update it with this:\n\n``` html\n    // www/index.html\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e \n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui\"\u003e\n      \u003cmeta name=\"apple-mobile-web-app-capable\" content=\"yes\"\u003e\n      \u003cmeta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\"\u003e\n      \u003ctitle\u003eMy App\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" href=\"css/framework7.ios.min.css\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"css/framework7.ios.colors.min.css\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"css/app.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cf7-statusbar\u003e\u003c/f7-statusbar\u003e\n        \u003cf7-views\u003e\n          \u003cf7-view id=\"main-view\" navbar-through :dynamic-navbar=\"true\" main\u003e\n            \u003cf7-navbar back-link=\"Back\" sliding\u003e\n              \u003cf7-nav-center sliding\u003ePusher-Framework7 App \u003c/f7-nav-center\u003e\n            \u003c/f7-navbar\u003e\n      \n            \u003cf7-pages\u003e\n              \u003cf7-page\u003e\n                \u003cf7-list\u003e\n                  \u003c/f7-list-item\u003e\n                        \u003cf7-list-item\u003e    \n                          \u003cf7-input type=\"text\" v-model:value=\"name\" placeholder=\"Your name\" clear-button\u003e\u003c/f7-input\u003e\n                        \u003c/f7-list-item\u003e\n                  \u003c/f7-list-item\u003e\n                  \u003cf7-list-button v-on:click=\"enterChat\"\u003eEnter Chat\u003c/f7-list-button\u003e\n                \u003c/f7-list\u003e\n              \u003c/f7-page\u003e\n            \u003c/f7-pages\u003e\n          \u003c/f7-view\u003e\n        \u003c/f7-views\u003e\n      \u003c/div\u003e\n      \u003ctemplate id=\"page-chat\"\u003e\n        \u003cf7-page\u003e\n    \u003c!-- chat page goes here ... --\u003e\n        \u003c/f7-page\u003e\n      \u003c/template\u003e\n      \n    \u003c!-- Add CDN for Pusher and Axios --\u003e\n      \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e \n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \n      \u003cscript src=\"cordova.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/framework7.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/vue.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/framework7-vue.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/app.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNotice we added the CDN for both Pusher and Axios in the scripts above. Next, open the `app.js` file and  replace the code there in it with this:\n\n``` javascript\n    // www/js/app.js\n    \n    (function(){\n    function init(){\n    Vue.use(Framework7Vue)\n    Vue.component('page-chat', {\n      template: '#page-chat',\n    \n    });\n      // Init App\n    new Vue({\n      el: '#app',\n      methods: {\n        enterChat: function(){\n          if(this.name.trim().length === 0 ){\n            alert(\" Enter your name ...\")\n            return false;\n          }\n        }\n      },\n      framework7: {\n        root: '#app',\n        // material: true,\n        routes: [\n          {\n            path: '/chat/',\n            component: 'page-chat'\n          }\n        ],\n      }\n    });\n    }  \n    // Handle device ready event\n    document.addEventListener('deviceready', init, false)\n    })();\n```    \n    \n\nAt this point, if you save both edited files and check back on your browser, you should now get this look:\n\n![framework7-chat-app-stage-1](//images.ctfassets.net/1es3ne0caaid/3CjVXRcJT2Q268I2QyiwCG/4da71e4c5139bcf6a0c6470879a578b5/framework7-chat-app-stage-1.jpeg)\n\nHere we can supply a name and click the **Enter Chat** button to enter the chat page, but at this point it won’t work. That is expected, given that we’ve not defined a function to handle the button click event. To fix that, let’s go ahead and do some data binding between our component and our states. Update the `app.js` file like so:\n\n``` javascript\n    // www/js/app.js\n    \n    // init states\n    var states = {\n        name: '',\n        msgs: []\n    };\n      \n    (function(){\n    function init(){\n    \n    Vue.use(Framework7Vue)\n    \n    Vue.component('page-chat', {\n      template: '#page-chat',\n      data: function(){\n        return states;\n      },\n      // handle onSend\n      methods: {\n        onSend: function(text, clear){\n             console.log(\"clicked\") \n          if( typeof clear == 'function' ) clear()\n        }\n      }\n    });\n      // Init App\n    new Vue({\n      el: '#app',\n      data: function(){\n        return states;\n      },\n      // handle enterChat button\n      methods: {\n        enterChat: function(){\n          if(this.name.trim().length === 0 ){\n            alert(\" Enter your name ...\")\n            return false;\n          }\n          this.msgs.length = 0;\n          this.$f7.mainView.router.load({url:'/chat/'});\n        }\n      },\n      framework7: {\n        root: '#app',\n        /* Uncomment to enable Material theme: */\n        // material: true,\n        routes: [\n          {\n            path: '/chat/',\n            component: 'page-chat'\n          }\n        ],\n      }\n    });\n    }  \n    // Handle device ready event\n    \n    document.addEventListener('deviceready', init, false)\n    })();\n```\n\nHere we defined a states object to hold the name of the user and an array of messages. Then we added the missing callbacks that we defined in our HTML file to handle the click events on the buttons. \n\nIf the user supplies a name and clicks the **Enter Chat** button, it’ll open up the chat page, but if that is not the case, it’ll alert the user to a name. Update your `app.js` file with the snippet above and save. Now go back to the browser, enter a name and click **Enter Chat.** This should now open up the empty chat page.\n\nNext, we’ll set up the chat page to have a simple chat form with an input to collect the message and a button to send it. Open the `index.html` file and update the chat page template section with this code:\n\n``` html\n    // www/index.html\n    // ...\n    \u003cf7-messages\u003e\n      \u003cf7-message v-for=\"msg in msgs\" :name=\"msg.name\" :text=\"msg.text\" :type=\"msg.type\"\u003e\n    \u003c/f7-message\u003e\n    \u003c/f7-messages\u003e\n      \u003cf7-messagebar placeholder=\"type message\" send-link=\"Send\" v-on:submit=\"onSend\" \u003e\n    \u003c/f7-messagebar\u003e\n    // ...\n```    \n\nAdd this code in the section where we left a comment to add chat page. Save the `index.html` file and check back on your browser. The chat page should look like this:\n\n![framework7-chat-app-stage-2](//images.ctfassets.net/1es3ne0caaid/5hX0MmKXSEE2KYKo20kUoM/6a2fb2c3fbf42ac5aef29d016d50e115/framework7-chat-app-stage-2.jpeg)\n\n## Realtime updates\n\nAt this point, we can type messages, but nothing happens when you try to send. This is because we haven’t integrated Pusher. At the beginning we set up Pusher and retrieved our app keys, we’ll now use it to configure our project. Open the `app.js`  file and add this code:\n\n``` javascript\n      // www/js/app.js\n      \n       const pusher = new Pusher('YOUR_PUSHER_KEY', {\n        cluster: 'YOUR_CLUSTER',\n        encrypted: true,\n      });\n      const channel = pusher.subscribe('chat');\n      channel.bind('message', data =\u003e {\n          console.log(data)\n        var type = data.name == states.name ? 'sent':'received'\n        var name = type == 'sent'? states.name : data.name;\n        states.msgs.push({name:name, text:data.text, type:type});\n      });\n      \n      // ...\n```\n\nThis sets up Pusher in our client with the credentials from our dashboard. We subscribe to the `chat` channel we defined on the server and bind our response data to the appropriate view objects to display them on screen.\n\nNow to send the chat to the server when the user clicks the **Send button**, let’s update the onSend function in the `app.js`  file:\n\n``` javascript\n      // www/js/app.js\n      ...\n      \n      // Init Page Components\n    Vue.component('page-chat', {\n      template: '#page-chat',\n      data: function(){\n        return states;\n      },\n      \n      methods: {\n        onSend: function(text, clear){\n             console.log(\"clicked\") \n            var message = {\n                name: this.name,\n                text: text \n            }\n            axios.post('http://localhost:6000/message', message);\n          if( typeof clear == 'function' ) clear()\n          }\n        }\n      });\n      \n      // Init App\n    new Vue({\n      el: '#app',\n      data: function(){\n        return states;\n      },\n      methods: {\n        enterChat: function(){\n          if(this.name.trim().length === 0 ){\n            alert(\" Enter your name ...\")\n            return false;\n          }\n          this.msgs.length = 0;\n          this.$f7.mainView.router.load({url:'/chat/'});\n          \n        }\n      },\n      ...\n```\n\nHere we define a message object that takes the name of the user and text message to send. Then we use Axios to post the message object to the `/messages` endpoint we defined on the server.\n\n\n## Testing\n\nTo test out the application, ensure that both Phonegap server and the Node server is running. If that’s not the case, you can start the Phonegap server in project root with `phonegap serve` and the Node server with `node server`. \n\nBefore testing your application, I recommend you compare your codes with mine to ensure that you did everything right so as not to encounter any blockers. Compare your `index.html`, `server.js` and `app.js`. If everything looks alright, now go ahead and test the application.\n\nOpen two browser windows to `localhost:3000` and send messages:\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/8xB4rlOXW-A?rel=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen\u003e\u003c/iframe\u003e\n\n\n\n## Conclusion\n\nThe importance of realtime engagement of users on any platform cannot be overemphasized. As seen in this tutorial, we were able to implement a realtime chat system with Framework7 and Pusher. I hope you found this tutorial helpful.\n\nFeel free to explore the code for this tutorial on [GitHub](https://github.com/Kennypee/pusher-framework7-chat) and add more features as you deem fit.  ","metaTitle":"Build a chat app using Framework7","metaDescription":"Use Framework7, Vue.js and Node.js to build a simple chat app for Android and iOS. Framework7 is a free and open source mobile HTML framework to develop hybrid mobile apps or web apps with iOS \u0026 Android native look and feel."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rJUFHakQgGc6A0WQyyMcA","type":"Entry","createdAt":"2018-07-03T09:11:14.166Z","updatedAt":"2018-07-03T09:14:45.775Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a cryptocurrency tracking app with push notifications using Swift and Laravel - Part 1: The backend","url":"cryptocurrency-tracking-swift-laravel-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/cryptocurrency-alert-ios-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2018-07-02","description":"Build a cryptocurrency tracking app featuring push notifications. Use Swift to create an iOS app, powered by a Laravel backend. User will receive alerts when currency prices change. In part one, create the backend with Laravel.","prerequisite":"You will need the following installed on your machine: Xcode, the Laravel CLI, SQLite and Cocoapods. Familiarity with the Xcode IDE will be helpful.","content":"## Introduction\n\nCryptocurrency has been and is still one of the biggest trends this year. With currencies like Bitcoin reaching record highs and new companies creating tokens and offerings, it’s showing just how much potential cryptocurrencies have. However, cryptocurrency prices are erratic and can fall or climb at a moments notice, so it’s always a good idea to keep tabs on the changes.\n\nIn this article, we will be building an application that keeps tabs on changes to the crypto market. The application will focus on BTC and ETH and will allow users of the application to set minimum and maximum amounts when they would like to be notified about the coins current price. The application will be built using Swift, Laravel, Pusher Channels, and Pusher Beams.\n\n## Prerequisites\n\nTo follow along you need the following requirements:\n\n\n- [Xcode](https://developer.apple.com/xcode) installed on your machine.\n- Knowledge of the Xcode IDE.\n- Basic knowledge using the [Laravel framework](https://laravel.com/).\n- Basic knowledge of the [Swift programming language](http://developer.apple.com/swift).\n- [Laravel CLI](https://laravel.com/docs/5.6/installation) installed on your machine.\n- SQLite installed on your machine. [Installation guide](https://www.tutorialspoint.com/sqlite/sqlite_installation.htm).\n- [Cocoapods](https://guides.cocoapods.org/using/getting-started.html) installed on your machine.\n- [Pusher Beams](https://pusher.com/beams) and [Channels](https://pusher.com/channels) application.\n\n\n## What we will be building\n\nWe will start out by building the backend of the application using Laravel. Then we will build the iOS application using Swift. If you want to test the push notifications then you will need to run the application on a live device.\n\n### How the client application will work\n\nFor the client app, the iOS application, we will create a simple list that will display the available currencies and the current prices to the dollar. Whenever the price of the cryptocurrency changes, we will trigger an event using Pusher Channels so the prices are updated.\n\nFrom the application, you will be able to set a minimum and maximum price change when you want to be alerted. For instance, you can configure the application to send a push notification to the application when the price of one Etherium (ETH) goes below $500. You can also configure the application to receive a notification when the price of Bitcoin goes above $5000.\n\n### How the backend application will work\n\nFor the backend application, we will be using Laravel and we will create endpoints that allow a user update the settings and load the settings for a device. The API will be responsible for checking the current prices of the cryptocurrency and sending both a Channels update and a Beams notification when the price changes. \n\nHowever, because the prices don’t change very predictably, we will be simulating the currency changes so we can preview the application in action. We will also be using [task scheduling](https://laravel.com/docs/5.6/scheduling) in Laravel to trigger the checks for the current currency prices. \n\nIn a production environment we will set the scheduler as a cronjob, but because we are in development, we will manually run the command to trigger price changes.\n\n### How the application will look\n\nWhen we are done with the application, here's how the application will look:\n\n![ios-cryptocurrency-part-1-demo](//images.ctfassets.net/1es3ne0caaid/1K08NTSdaoIIqWQ2YAyOqo/4efdb4fa01a2ee599bf5b71561a717a4/ios-cryptocurrency-part-1-demo.gif)\n\nLet’s get started.\n\n## Setting up Pusher Beams and Channels\n\n### Setting up Pusher Channels\n\nLog in to your [Pusher dashboard](https://dashboard.pusher.com). If you don’t have an account, create one. Your dashboard should look like this:\n\n![ios-cryptocurrency-part-1-keys](//images.ctfassets.net/1es3ne0caaid/47FA7jeU0w62siO8G6iCQi/aeda1c00644c75e4d327dbe6725694d7/ios-cryptocurrency-part-1-keys.png)\n\nCreate a new Channels app. You can easily do this by clicking the big **Create new Channels app** card at the bottom right. When you create a new app, you are provided with keys. Keep them safe as you will soon need them.\n\n### Setting up Pusher Beams\n\nNext, log in to the new [Pusher dashboard](https://dash.pusher.com/), in here we will create a Pusher Beams instance. You should sign up if you don’t have an account yet. Click on the **Beams** button on the sidebar then click **Create**, this will launch a pop up to **Create a new Beams instance**. Name it `cryptoalat`.\n\n![ios-cryptocurrency-part-1-new-beams](//images.ctfassets.net/1es3ne0caaid/4xKD0goX606gGqUSQW2EcC/3dcd7757df87351ddc54cb62397ce2e7/ios-cryptocurrency-part-1-new-beams.png)\n\nAs soon as you create the instance, you will be presented with a quickstart guide. Select the **IOS** quickstart and follow through the wizard.\n\n![ios-cryptocurrency-part-1-beams-quickstart](//images.ctfassets.net/1es3ne0caaid/27fmUEHf64Qc0KcIQo0KAw/265bde6f67ea031f5d5495a10273e678/ios-cryptocurrency-part-1-beams-quickstart.png)\n\nWhen you are done creating the Beams application, you will be provided with an instance ID and a secret key, we will need these later.\n\n## Setting up your backend application\n\nIn your terminal, run the command below to create a new Laravel project:\n\n```\n    $ laravel new cryptoapi\n```\n\nThis command will create a new Laravel project and install all the required Laravel dependencies. \n\nNext, let’s install some of the project specific dependencies. Open the `composer.json` file and in the `require` property, add the following dependencies:\n\n``` json\n    // File: composer.json\n    \"require\": {\n        [...]\n        \n        \"neo/pusher-beams\": \"^1.0\",\n        \"pusher/pusher-php-server\": \"~3.0\"\n    },\n```\n\nNow run the command below to install these dependencies.\n\n```\n    $ composer update\n```\n\nWhen the installation is complete, open the project in a text editor of your choice. [Visual Studio Code](https://code.visualstudio.com/) is pretty nice. \n\n### Setting up our Pusher Beams library\n\nThe first thing we want to do is set up the [Pusher Beams library](https://github.com/neoighodaro/pusher-beams) we just pulled in using composer. To set up, open the `.env` file and add the following keys:\n\n```\n    PUSHER_BEAMS_SECRET_KEY=\"PUSHER_BEAMS_SECRET_KEY\"\n    PUSHER_BEAMS_INSTANCE_ID=\"PUSHER_BEAMS_INSTANCE_ID\"\n```\n\nYou should replace the `PUSHER_BEAMS_*` placeholders with the keys you got when setting up your Beams application.\n\nNext, open the `config/broadcasting.php` file and scroll until you see the `connections` key. In there, you’ll have the `pusher` settings, add the following to the `pusher` configuration:\n\n``` php\n    'pusher' =\u003e [\n        // [...]\n    \n        'beams' =\u003e [\n            'secret_key' =\u003e env('PUSHER_BEAMS_SECRET_KEY'),\n            'instance_id' =\u003e env('PUSHER_BEAMS_INSTANCE_ID'),\n        ],\n    ],\n```\n\n### Setting up our Pusher Channels library\n\nThe next step is to set up Pusher Channels. Laravel comes with native support for Pusher Channels so we do not need to do much to set it up.\n\nOpen the `.env` file and update the following keys below:\n\n```\n    BROADCAST_DRIVER=pusher\n    \n    // [...]\n    \n    PUSHER_APP_ID=\"PUSHER_APP_ID\"\n    PUSHER_APP_KEY=\"PUSHER_APP_KEY\"\n    PUSHER_APP_SECRET=\"PUSHER_APP_SECRET\"\n    PUSHER_APP_CLUSTER=\"PUSHER_APP_CLUSTER\"\n```\n\nAbove you set the `BROADCAST_DRIVER` to `pusher` and then for the other `PUSHER_APP_*` keys, replace the placeholders with the keys gotten from your Pusher dashboard. That’s all we need to do to set up Pusher Channels for this application.\n\n\n## Building the backend application\n\nNow that we have set up all the dependencies, we can start building the application. We will start by creating the routes. However, instead of creating controllers to hook into the routes, we will be adding the logic directly to the routes.\n\n### Setting up the database, migration, and model\n\nSince we will be working with a database, we need to set up the database we are going to be working with. To make things easy we will be using SQLite. Create an empty  `database.sqlite` file in the `database` directory.\n\nOpen the `.env` file and replace:\n\n```\n    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_DATABASE=homestead\n    DB_USERNAME=homestead\n    DB_PASSWORD=secret\n```\n\nWith\n\n```\n    DB_CONNECTION=sqlite\n    DB_DATABASE=/full/path/to/your/database.sqlite\n```\n\nNext, let’s create a migration for the `devices` table. We will use this table to store devices and their notification settings. This will help us know what devices to send push notifications to.\n\nRun the command below to create the migration and model:\n\n```\n    $ php artisan make:model Device -m\n```\n\n\u003e The `-m` flag will instruct artisan to create a migration alongside the model.\n\nThis command will generate two files, the migration file in the `database/migrations` and the model in the `app` directory. Let’s edit the migration file first.\n\nOpen the `*_create_devices_table.php` migration file in the `database/migrations`  directory and replace the contents with the following:\n\n``` php\n    \u003c?php\n    \n    use Illuminate\\Support\\Facades\\Schema;\n    use Illuminate\\Database\\Schema\\Blueprint;\n    use Illuminate\\Database\\Migrations\\Migration;\n    \n    class CreateDevicesTable extends Migration\n    {\n        /**\n         * Run the migrations.\n         *\n         * @return void\n         */\n        public function up()\n        {\n            Schema::create('devices', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003estring('uuid')-\u003eunique();\n                $table-\u003efloat('btc_min_notify')-\u003edefault(0);\n                $table-\u003efloat('btc_max_notify')-\u003edefault(0);\n                $table-\u003efloat('eth_min_notify')-\u003edefault(0);\n                $table-\u003efloat('eth_max_notify')-\u003edefault(0);\n            });\n        }\n        \n        /**\n         * Reverse the migrations.\n         *\n         * @return void\n         */\n        public function down()\n        {\n            Schema::dropIfExists('devices');\n        }\n    }\n```\n\nIn the `up` method, we have defined the structure of the `devices` table. We have the `uuid` field which will be a unique string for each device registered. We have two `btc_notify` fields which are there to save the minimum and maximum prices of BTC at which point the device should be notified. Same applies to the* `eth_*_notify`  fields.\n\nTo run the migration, run the command below:\n\n```\n    $ php artisan migrate\n```\n\nOpen the `app/Device.php` model and replace the contents with the code below:\n\n``` php\n    \u003c?php\n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    use Illuminate\\Notifications\\Notifiable;\n    \n    class Device extends Model\n    {\n        use Notifiable;\n    \n        public $timestamps = false;\n        \n        protected $fillable = [\n            'uuid', \n            'btc_min_notify', \n            'btc_max_notify', \n            'eth_min_notify', \n            'eth_max_notify',\n        ];\n        \n        protected $cast = [\n            'btc_min_notify' =\u003e 'float',\n            'btc_max_notify' =\u003e 'float',\n            'eth_min_notify' =\u003e 'float',\n            'eth_max_notify' =\u003e 'float'\n        ];\n        \n        public function scopeAffected($query, string $currency, $currentPrice)\n        {\n            return $query-\u003ewhere(function ($q) use ($currency, $currentPrice) {\n                $q-\u003ewhere(\"${currency}_min_notify\", '\u003e', 0)\n                  -\u003ewhere(\"${currency}_min_notify\", '\u003e', $currentPrice);\n            })-\u003eorWhere(function ($q) use ($currency, $currentPrice) {\n                $q-\u003ewhere(\"${currency}_max_notify\", '\u003e', 0)\n                  -\u003ewhere(\"${currency}_max_notify\", '\u003c', $currentPrice);\n            });\n        }\n    }\n```\n\nIn the model above, we have set the `$timestamps` property to `false` to make sure that Eloquent does not try to update the `created_at` and `updated_at` fields, which is the normal behavior.\n\nWe also have the `scopeAffected` method which is an example of an [Eloquent scope](https://laravel.com/docs/5.6/eloquent#local-scopes). We use this to get the affected devices after a price change has occurred on a currency. So if, for instance, BTC’s price drops, this method will check the devices and the settings to see the devices that need to be notified of this change.\n\n\n\u003e Local scopes allow you to define common sets of constraints that you may easily re-use throughout your application. For example, you may need to frequently retrieve all users that are considered \"popular\". To define a scope, prefix an Eloquent model method with `scope`. - [Laravel documentation](https://laravel.com/docs/5.6/eloquent#local-scopes).\n\nWe will use this scope later in our application when we need to know what devices to send push notifications to.\n\n### Creating the routes\n\nOpen the `routes/api.php` file and replace the contents of the file with the following code:\n\n``` php\n    // File: routes/api.php\n    \u003c?php\n    \n    use App\\Device;\n    use Illuminate\\Http\\Request;\n```\n \nNext, let’s add the first route. Append the code below to the routes file:\n\n``` php\n    // File: routes/api.php\n    Route::get('/settings', function (Request $request) {\n        return Device::whereUuid($request-\u003equery('u'))-\u003efirstOrFail()['settings'];\n    });\n```\n\nIn the route above, we are returning the settings for the device supplied in the `u` query parameter. This means if a registered device hits the `/settings` endpoint and passes the device UUID through the `u` parameter, the settings for that device will be returned. \n\nNext, in the same routes file, paste the following at the bottom of the file:\n\n``` php\n    Route::post('/settings', function (Request $request) {\n        $settings = $request-\u003evalidate([\n            'btc_min_notify' =\u003e 'int|min:0',\n            'btc_max_notify' =\u003e 'int|min:0',\n            'eth_min_notify' =\u003e 'int|min:0',\n            'eth_max_notify' =\u003e 'int|min:0',\n        ]);\n    \n        $settings = array_filter($settings, function ($value) { return $value \u003e 0; });\n    \n        $device = Device::firstOrNew(['uuid' =\u003e $request-\u003equery('u')]);\n        $device-\u003efill($settings);\n        $saved = $device-\u003esave();\n        \n        return response()-\u003ejson([\n            'status' =\u003e $saved ? 'success' : 'failure'\n        ], $saved ? 200 : 400);\n    });\n```\n\nAbove, we have defined the route for the `POST /settings`  route. This route saves settings to the database. It will create a new entry if the setting does not already exist or will update the existing one if it does.\n\nThat’s all for the routes.\n\n### Creating the jobs, events, and notifiers\n\nNext, we need to create the [Laravel job](https://laravel.com/docs/5.6/queues#creating-jobs) that will run at intervals to check if there is a change in the currency price. \n\nRun the command below to create a new Laravel job:\n\n```\n    $ php artisan make:job CheckPrices\n```\n\nThis will create a new `CheckPrices` class in the `app` directory. Open that class and replace the contents with the following:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Jobs;\n    \n    use App\\Device;\n    use Illuminate\\Bus\\Queueable;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Queue\\InteractsWithQueue;\n    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n    use Illuminate\\Foundation\\Bus\\Dispatchable;\n    use App\\Events\\CurrencyUpdated;\n    use App\\Notifications\\CoinPriceChanged;\n    \n    class CheckPrices implements ShouldQueue\n    {\n        use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;\n        \n        protected $supportedCurrencies = ['ETH', 'BTC'];\n    \n        /**\n         * Execute the job.\n         *\n         * @return void\n         */\n        public function handle()\n        {\n            $payload = $this-\u003egetPricesForSupportedCurrencies();\n    \n            if (!empty($payload)) {\n                $this-\u003etriggerPusherUpdate($payload);\n                $this-\u003etriggerPossiblePushNotification($payload);\n            }\n        }\n        \n        private function triggerPusherUpdate($payload)\n        {\n            event(new CurrencyUpdated($payload));\n        }\n        \n        private function triggerPossiblePushNotification($payload)\n        {\n            foreach ($this-\u003esupportedCurrencies as $currency) {\n                $currentPrice = $payload[$currency]['current'];\n                \n                $currency = strtolower($currency);\n    \n                foreach (Device::affected($currency, $currentPrice)-\u003eget() as $device) {\n                    $device-\u003enotify(new CoinPriceChanged($currency, $device, $payload));\n                }\n            }\n        }\n        \n        public function getPricesForSupportedCurrencies(): array\n        {\n            $payload = [];\n    \n            foreach ($this-\u003esupportedCurrencies as $currency) {\n                if (config('app.debug') === true) {\n                    $response = [\n                        $currency =\u003e [\n                            'USD' =\u003e (float) rand(100, 15000)\n                        ]\n                    ];\n                } else {\n                    $url = \"https://min-api.cryptocompare.com/data/pricehistorical?fsym={$currency}\u0026tsyms=USD\u0026ts={$timestamp}\";\n                    \n                    $response = json_decode(file_get_contents($url), true);\n                }\n    \n                if (json_last_error() === JSON_ERROR_NONE) {\n                    $currentPrice = $response[$currency]['USD'];\n    \n                    $previousPrice = cache()-\u003eget(\"PRICE_${currency}\", false);\n    \n                    if ($previousPrice == false or $previousPrice !== $currentPrice) {\n                        $payload[$currency] = [\n                            'current' =\u003e $currentPrice,\n                            'previous' =\u003e $previousPrice,\n                        ];\n                    }\n    \n                    cache()-\u003eput(\"PRICE_${currency}\", $currentPrice, (24 * 60 * 60));\n                }\n            }\n    \n            return $payload;\n        }\n    }\n```\n\nIn the class above, we implement the `ShouldQueue` interface. This makes it so that the job can and will be queued. In a production server, queueing jobs makes your application faster as it queues jobs that might take a while to execute for later execution. \n\nWe have four methods in this class. The first one is the `handle` method. This one is called automatically when the job is executed. In this method, we fetch the prices for the available currencies and then check if the price has changed. If it has, we publish a Pusher Channel event and then check if there are any devices that need to be notified based on the user’s settings. If there are any, we send a push notification to that device. \n\nWe have the `triggerPusherUpdate` method which triggers a `CurrencyUpdated` event. We will create this event in the next section. We also have a `triggerPossiblePushNotification` method which gets the list of devices which should be notified of the currency change and then notifies the user using the `CoinPriceChanged` class, which we will create in the next section.\n\nLastly, we have the `getPricesForSupportedCurrencies` method which just fetches the current price of a currency. In this method, we have a debug mode that simulates the current price of a currency.\n\nTo make sure this class we just created is scheduled properly, open the `app/Console/Kernel.php` file and in the `schedule` method, add the following code to the `schedule` method:\n\n``` php\n    $schedule-\u003ejob(new \\App\\Jobs\\CheckPrices)-\u003eeveryMinute();\n```\n\nNow every time we run the command `php artisan schedule:run` all the jobs in this `schedule` method will be run. Normally, in a production environment, we will need to add the schedule command as a cronjob, however, we will run this command manually.\n\nThe next thing to do will be to create the notifiers and events. In your terminal, run the following commands:\n\n```\n    $ php artisan make:event CurrencyUpdated\n    $ php artisan make:notification CoinPriceChanged\n```\n\nThis will create a class in the `Events` and `Notifications` directories.\n\n In the [event](https://laravel.com/docs/5.6/events) class, `CurrencyUpdated` paste the following code:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Events;\n    \n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n    \n    class CurrencyUpdated implements ShouldBroadcast\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n    \n        public $payload;\n        \n        public function __construct($payload)\n        {\n            $this-\u003epayload = $payload;\n        }\n    \n        public function broadcastOn()\n        {\n            return new Channel('currency-update');\n        }\n        \n        public function broadcastAs()\n        {\n            return 'currency.updated';\n        }\n    }\n```\n\nIn the event class above, we have the `broadcastOn` method that specifies the Pusher channel we want to broadcast an event on. We also have the `broadcastAs` method which specifies the name of the event we want to broadcast to the channel.\n\nIn the `CoinPriceChanged` [notification](https://laravel.com/docs/5.6/notifications) class, replace the contents with the following code:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Notifications;\n    \n    use App\\Device;\n    use Illuminate\\Bus\\Queueable;\n    use Neo\\PusherBeams\\PusherBeams;\n    use Neo\\PusherBeams\\PusherMessage;\n    use Illuminate\\Notifications\\Notification;\n    \n    class CoinPriceChanged extends Notification\n    {\n        use Queueable;\n        \n        private $currency;\n        private $device;\n        private $payload;\n        \n        public function __construct(string $currency, Device $device, array $payload)\n        {\n            $this-\u003ecurrency = $currency;\n            $this-\u003edevice = $device;\n            $this-\u003epayload = $payload;\n        }\n        \n        public function via($notifiable)\n        {\n            return [PusherBeams::class];\n        }\n        \n        public function toPushNotification($notifiable)\n        {\n            $currentPrice = $this-\u003epayload[strtoupper($this-\u003ecurrency)]['current'];\n            \n            $previousPrice = $this-\u003epayload[strtoupper($this-\u003ecurrency)]['current'];\n    \n            $direction = $currentPrice \u003e $previousPrice ? 'climbed' : 'dropped';\n    \n            $currentPriceFormatted = number_format($currentPrice);\n    \n            return PusherMessage::create()\n                    -\u003eiOS()\n                    -\u003esound('success')\n                    -\u003etitle(\"Price of {$this-\u003ecurrency} has {$direction}\")\n                    -\u003ebody(\"The price of {$this-\u003ecurrency} has {$direction} and is now \\${$currentPriceFormatted}\");\n        }\n        \n        public function pushNotificationInterest()\n        {\n            $uuid = strtolower(str_replace('-', '_', $this-\u003edevice-\u003euuid));\n            \n            return \"{$uuid}_{$this-\u003ecurrency}_changed\";\n        }\n    } \n```\n\nIn the class above we have the `toPushNotification` class which prepares the push notification using the Pusher Beams library. We also have the `pushNotificationInterest` method which sets the name for the interest of the push notification depending on the currency and device ID.\n\nThat’s all for the backend, now just run the command below to start the server:\n\n```\n    $ php artisan serve\n```\n\nThis will start a PHP server with our application running. Also if you need to manually trigger a currency change, run the command below:\n\n```\n    $ php artisan schedule:run\n```\n\nNow that we are done with the backend, we can create the application using Swift and Xcode.\n\n## Conclusion\n\nIn this part of the article, we have created the backend for our cryptocurrency alert application. [In the next part](https://pusher.com/tutorials/cryptocurrency-tracking-swift-laravel-part-2), we will be seeing how we can create the application that will consume the API we just created in this part.\n\nThe source code to this application is available on [GitHub](https://github.com/neoighodaro/cryptocurrency-alert-ios-app).","metaTitle":"Create a cryptocurrency tracking app - Part 1: The backend","metaDescription":"Use Swift and Laravel to create an iOS app for tracking cryptocurrency price changes. Users will receive alerts as prices go beyond set limits.  In part one, create the backend with Laravel."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1DwFvg2XSM0e0KAWSkq6MQ","type":"Entry","createdAt":"2018-07-03T09:11:22.597Z","updatedAt":"2020-06-19T10:55:11.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a cryptocurrency tracking app with push notifications using Swift and Laravel - Part 2: The iOS app","url":"cryptocurrency-tracking-swift-laravel-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/cryptocurrency-alert-ios-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2018-07-02","description":"Build a cryptocurrency tracking app featuring push notifications. Use Swift to create an iOS app, powered by a Laravel backend. User will receive alerts when currency prices change. In part two, create the iOS app.","prerequisite":"You will need the following installed on your machine: Xcode, the Laravel CLI, SQLite and Cocoapods. Familiarity with the Xcode IDE will be helpful. You should have completed part one of the series.","content":"In the [first part](http://http://https://pusher.com/tutorials/cryptocurrency-tracking-swift-laravel-part-1) of this article, we started developing our cryptocurrency alert application. We developed the backend of the application that will power the iOS application. As it stands, our backend application can return settings for a device based on its UUID, save the settings for a device based on its UUID and also it can figure out what devices to send push notifications to when the currencies update.\n\nIn this part, we will focus on creating the iOS application using Swift and Xcode.\n\n## Prerequisites\n\nTo follow along you need the following requirements:\n\n\n- Completed the [part one](http://#) of this article.\n- [Xcode](https://developer.apple.com/xcode) installed on your machine.\n- Knowledge of the Xcode IDE.\n- Basic knowledge using the [Laravel framework](https://laravel.com/).\n- Basic knowledge of the [Swift programming language](http://developer.apple.com/swift).\n- [Laravel CLI](https://laravel.com/docs/5.6/installation) installed on your machine.\n- SQLite installed on your machine. [Installation guide](http://www.sqlitetutorial.net).\n- [Cocoapods](https://guides.cocoapods.org/using/getting-started.html) installed on your machine.\n- [Pusher Beams](https://pusher.com/beams) and [Channels](https://pusher.com/channels) application.\n\n\n## What we will be building\n\nWe already started out by building the backend of the application using Laravel. So next, we will build the iOS application using Swift. If you want to test the push notifications then you will need to run the application on a live device.\n\n### How the client application will work\n\nFor the client app, the iOS application, we will create a simple list that will display the available currencies and the current prices to the dollar. Whenever the price of the cryptocurrency changes, we will trigger an event using Pusher Channels so the prices are updated.\n\nFrom the application, you will be able to set a minimum and maximum price change when you want to be alerted. For instance, you can configure the application to send a push notification to the application when the price of one Etherium (ETH) goes below $500. You can also configure the application to receive a notification when the price of Bitcoin goes above $5000.\n\n### How the application will look\n\nWhen we are done with the application, here's how the application will look:\n\n![ios-cryptocurrency-part-1-demo](//images.ctfassets.net/1es3ne0caaid/1K08NTSdaoIIqWQ2YAyOqo/4efdb4fa01a2ee599bf5b71561a717a4/ios-cryptocurrency-part-1-demo.gif)\n\nLet’s get started.\n\n\n## Setting up your client application\n\nLaunch Xcode and click **Create a new Xcode project**. Select **Single View App** and click **Next**. Enter your **Product Name**, we will call our project *cryptoalat*, and select **Swift** from the **Language** options. You can also change any other detail you wish to on the screen then click **Next**.\n\n### Installing dependencies\n\nNow you have your Xcode project. Close Xcode and open a terminal window. `cd` to the iOS project directory in terminal and run the command below to create a Podfile:\n\n```\n    $ pod init\n```\n\n\u003e The Podfile is a specification that describes the dependencies of the targets of one or more Xcode projects. The file should simply be named Podfile. All the examples in the guides are based on CocoaPods version 1.0 and onwards. - [Cocoapods Guides](https://guides.cocoapods.org/using/the-podfile.html)\n\nThis will generate a new file called `Podfile` in the root of your project. Open this file in any editor and update the file as seen below:\n\n```\n    // File: Podfile\n    platform :ios, '11.0'\n    \n    target 'cryptoalat' do\n      use_frameworks!\n    \n      pod 'Alamofire', '~\u003e 4.7.2'\n      pod 'PushNotifications', '~\u003e 0.10.8'\n      pod 'PusherSwift', '~\u003e 6.1.0'\n      pod 'NotificationBannerSwift', '~\u003e 1.6.3'\n    end\n```\n\n\u003e If you used a project name other than cryptoalat, then change it in the Podfile to match your project’s target name. \n\nGo to terminal and run the command below to install your dependencies:\n\n```\n    $ pod install\n```\n\nWhen the installation is complete, you will have a  `*.xcworkspace` file in the root of your project. Open this file in Xcode and let’s start developing our cryptocurrency alert application.\n\n\n## Building the iOS application\n\n### Creating our storyboard\n\nThe first thing we need to do is design our storyboard for the application. This is what we want the storyboard to look like when we are done.\n\n![ios-cryptocurrency-part-2-storyboard](//images.ctfassets.net/1es3ne0caaid/3CgFeKuZnyMkQ0Kseaw2Gk/9e4a0a12e87fe5685f30c563d9f3ea8d/ios-cryptocurrency-part-2-storyboard.png)\n\nOpen the `Main.storyboard` file and design as seen above.\n\nAbove we have three scenes. The first scene, which is the entry point, is the launch scene. We then draw a manual segue with an identifier called **Main**. Then we set the segue **Kind** to **Present Modally**. This will present the next scene which is a navigation view controller. Navigation controllers already have an attached root view controller by default.\n\nWe will use this attached view controller, which is a `TableViewController`, as the main view for our application. It’ll list the available currencies and show us a text field that allows us to change the setting for that currency when it is tapped.\n\nOn the third scene, we set the reuse identifier of the cells to **coin** and we drag two labels to the prototype cell. The first label will be for the coin name and the second label will be for the price.\n\nNow that we have the scenes, let’s create some controllers and view classes and connect them to our storyboard scenes.\n\n### Creating your controllers\n\nIn Xcode, create a new class `LaunchViewController` and paste the contents of the file below into it:\n\n``` swift\n    import UIKit\n    \n    class LaunchViewController: UIViewController {\n        \n        override func viewDidAppear(_ animated: Bool) {\n            super.viewDidAppear(animated)\n            \n            SettingsService.shared.loadSettings {\n                self.routeToMainController()\n            }\n        }\n    \n        fileprivate func routeToMainController() {\n            performSegue(withIdentifier: \"Main\", sender: self)\n        }\n    }\n```\n\n\u003e Set the controller as the custom class for the first scene in the `Main.storyboard` file.\n\nIn the code, we load the settings using a `SettingsService` class we will create later. When the settings are loaded for the device, we then call the `routeToMainController` method, which routes the application to the main controller using the **Main** segue we created earlier.\n\nThe next controller we will be creating will be the `CoinsTableViewController`. This will be the controller that will be tied to the third scene which is the main scene. \n\nCreate the `CoinsTableViewController` and replace the contents with the following code;\n\n``` swift\n    import UIKit\n    import PusherSwift\n    import NotificationBannerSwift\n    \n    struct Coin {\n        let name: String\n        let rate: Float\n    }\n    \n    class CoinsTableViewController: UITableViewController {\n    \n        var coins: [Coin] = []\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n        }\n        \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return coins.count\n        }\n    \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let coin = coins[indexPath.row]\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"coin\", for: indexPath) as! CoinTableViewCell\n    \n            cell.name.text = \"1 \\(coin.name) =\"\n            cell.amount.text = \"$\\(String(coin.rate))\"\n    \n            return cell\n        }\n    }\n```\n\n\u003e Set the controller as the custom class for the first scene in the `Main.storyboard` file.\n\nAbove we have defined the `Coin` struct and it has a `name` and `rate` property. We have the controller which we define the `coins` property as an array of `Coin`s. We then have some boilerplate code that comes with creating a table view controller.\n\nThe `numberOfSections` method specifies how many sections the table will have. In the first `tableView` method, we return the number of `coins` available and in the second `tableView` method, we define how we want each row to be handled.\n\n### Creating other supporting classes\n\nIf you noticed in the code above, we referenced a `CoinTableViewCell` as the class for each row in the last `tableView` method. Let’s create that.\n\nCreate a `CoinTableViewCell` class and paste the following code into it:\n\n``` swift\n    class CoinTableViewCell: UITableViewCell {\n        @IBOutlet weak var name: UILabel!    \n        @IBOutlet weak var amount: UILabel!\n    }\n```\n\nOpen the `Main.storyboard` file and set the class as the custom class for the prototype cell in the third scene of the `Main.storyboard` file. When you have set the class, connect the `@IBOutlet`s as specified in the cell class above.\n\nThe next class we need to create is the `SettingsService`. This class will be responsible for updating and fetching the settings for the device.\n\nCreate a new `SettingsService` class and replace the contents with the following code:\n\n``` swift\n    import Foundation\n    import Alamofire\n    import NotificationBannerSwift\n    \n    class SettingsService {\n        static let key = \"CryptoAlat\"\n        static let shared = SettingsService()\n        \n        var settings: Settings? {\n            get {\n                return self.getCachedSettings()\n            }\n            set(settings) {\n                if let settings = settings {\n                    self.updateCachedSettings(settings)\n                }\n            }\n        }\n        \n        private init() {}\n        \n        func loadSettings(completion: @escaping() -\u003e Void) {\n            fetchRemoteSettings { settings in\n                guard let settings = settings else {\n                    return self.saveSettings(self.defaultSettings()) { _ in\n                        completion()\n                    }\n                }\n                \n                self.updateCachedSettings(settings)\n                completion()\n            }\n        }\n        \n        fileprivate func defaultSettings() -\u003e Settings {\n            return Settings(\n                btc_min_notify: 0, \n                btc_max_notify: 0, \n                eth_min_notify: 0, \n                eth_max_notify: 0\n            )\n        }\n        \n        func saveSettings(_ settings: Settings, completion: @escaping(Bool) -\u003e Void) {\n            updateRemoteSettings(settings, completion: { saved in\n                if saved {\n                    self.updateCachedSettings(settings)\n                }\n                \n                completion(saved)\n            })\n        }\n        \n        fileprivate func fetchRemoteSettings(completion: @escaping (Settings?) -\u003e Void) {\n            guard let deviceID = AppConstants.deviceIDFormatted else {\n                return completion(nil)\n            }\n    \n            let url = \"\\(AppConstants.API_URL)?u=\\(deviceID)\"\n            Alamofire.request(url).validate().responseJSON { resp in\n                if let data = resp.data, resp.result.isSuccess {\n                    let decoder = JSONDecoder()\n                    if let settings = try? decoder.decode(Settings.self, from: data) {\n                        return completion(settings)\n                    }\n                }\n                \n                completion(nil)\n            }\n        }\n        \n        fileprivate func updateRemoteSettings(_ settings: Settings, completion: @escaping(Bool) -\u003e Void) {\n            guard let deviceID = AppConstants.deviceIDFormatted else {\n                return completion(false)\n            }\n            \n            let params = settings.toParams()\n            let url = \"\\(AppConstants.API_URL)?u=\\(deviceID)\"\n            Alamofire.request(url, method: .post, parameters: params).validate().responseJSON { resp in\n                guard resp.result.isSuccess, let res = resp.result.value as? [String: String] else {\n                    return StatusBarNotificationBanner(title: \"Failed to update settings.\", style: .danger).show()\n                }\n                \n                completion((res[\"status\"] == \"success\"))\n            }\n        }\n        \n        fileprivate func updateCachedSettings(_ settings: Settings) {\n            if let encodedSettings = try? JSONEncoder().encode(settings) {\n                UserDefaults.standard.set(encodedSettings, forKey: SettingsService.key)\n            }\n        }\n        \n        fileprivate func getCachedSettings() -\u003e Settings? {\n            let defaults = UserDefaults.standard\n            if let data = defaults.object(forKey: SettingsService.key) as? Data {\n                let decoder = JSONDecoder()\n                if let decodedSettings = try? decoder.decode(Settings.self, from: data) {\n                    return decodedSettings\n                }\n            }\n            \n            return nil\n        }\n    }\n```\n\nAbove we have the `SettingsService`. The first method `loadSettings` loads the settings from the API and then saves it locally. If there is no setting remotely, it calls the `defaultSettings` method and saves the response to the API.\n\nThe `saveSettings` method saves the `Settings` remotely using `updateRemoteSettings` and then locally using `updateCachedSettings`. The `fetchRemoteSettings` gets the settings from the API and decodes the response using the [Swift decodable API](https://blog.pusher.com/swift-4-decoding-json-codable/).\n\nNext, let’s define the `Settings` struct and have it extend `Codable`. In the same file for the `SettingsService`, add this above the `SettingsService` class definition:\n\n``` swift\n    struct Settings: Codable {\n        var btc_min_notify: Int?\n        var btc_max_notify: Int?\n        var eth_min_notify: Int?\n        var eth_max_notify: Int?\n        \n        func toParams() -\u003e Parameters {\n            var params: Parameters = [:]\n            \n            if let btcMin = btc_min_notify { params[\"btc_min_notify\"] = btcMin }\n            if let btcMax = btc_max_notify { params[\"btc_max_notify\"] = btcMax }\n            if let ethMin = eth_min_notify { params[\"eth_min_notify\"] = ethMin }\n            if let ethMax = eth_max_notify { params[\"eth_max_notify\"] = ethMax }\n    \n            return params\n        }\n    }\n```\n\nAbove we have a simple `Settings` struct that conforms to `Codable`. We also have a `toParams` method that converts the properties to a `Parameters` type so we can use it with [Alamofire](https://github.com/Alamofire/Alamofire) when making requests.\n\nOne last class we need to create is  `AppConstants`. We will use this class to keep all the data that we expect to remain constant and unchanged throughout the lifetime of the application.\n\nCreate a `AppConstants` file and paste the following code:\n\n``` swift\n    import UIKit\n    \n    struct AppConstants {\n        static let API_URL = \"http://127.0.0.1:8000/api/settings\"\n        static let deviceID = UIDevice.current.identifierForVendor?.uuidString\n        static let deviceIDFormatted = AppConstants.deviceID?.replacingOccurrences(of: \"-\", with: \"_\").lowercased()\n        static let PUSHER_INSTANCE_ID = \"PUSHER_BEAMS_INSTANCE_ID\"\n        static let PUSHER_APP_KEY = \"PUSHER_APP_KEY\"\n        static let PUSHER_APP_CLUSTER = \"PUSHER_APP_CLUSTER\"\n    }\n```\n\n\u003e Replace the `PUSHER_*` keys with the values gotten from the Pusher Channels and Beams dashboard.\n\n### Updating the settings for the device\n\nNow that we have defined the settings service, let’s update our controller so the user can set the minimum and maximum prices for each currency.\n\nOpen the `CoinsTableViewController` class and add the following method:\n\n``` swift\n    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        let coin = coins[indexPath.row]\n    \n        var minTextField: UITextField?\n        var maxTextField: UITextField?\n    \n        let title = \"Manage \\(coin.name) alerts\"\n        let message = \"Notification will be sent to you when price exceeds or goes below minimum and maximum price. Set to zero to turn off notification.\"\n    \n        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n        alert.addTextField { textfield in\n            minTextField = textfield\n            textfield.placeholder = \"Alert when price is below\"\n        }\n    \n        alert.addTextField { textfield in\n            maxTextField = textfield\n            textfield.placeholder = \"Alert when price is above\"\n        }\n    \n        alert.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))\n    \n        alert.addAction(UIAlertAction(title: \"Save\", style: .default, handler: { action in\n            guard let minPrice = minTextField?.text, let maxPrice = maxTextField?.text else {\n                return StatusBarNotificationBanner(title: \"Invalid min or max price\", style: .danger).show()\n            }\n    \n            var btcMin: Int?, btcMax: Int?, ethMin: Int?, ethMax: Int?\n    \n            switch coin.name {\n            case \"BTC\":\n                btcMin = Int(minPrice)\n                btcMax = Int(maxPrice)\n            case \"ETH\":\n                ethMin = Int(minPrice)\n                ethMax = Int(maxPrice)\n            default:\n                return\n            }\n    \n            let settings = Settings(\n                btc_min_notify: btcMin,\n                btc_max_notify: btcMax,\n                eth_min_notify: ethMin,\n                eth_max_notify: ethMax\n            )\n    \n            SettingsService.shared.saveSettings(settings, completion: { saved in\n                if saved {\n                    StatusBarNotificationBanner(title: \"Saved successfully\").show()\n                }\n            })\n        }))\n    \n        present(alert, animated: true, completion: nil)\n    }\n```\n\nThe method above is automatically called when a row is selected. In this method, we display a `UIAlertController` with two text fields for the minimum price and the maximum price. When the prices are submitted, the `SettingsService`  we created earlier takes care of updating the values both locally and remotely.\n\n### Adding realtime cryptocurrency update support\n\nOpen the `CoinsTableViewController` and add the `pusher` property to the class as seen below:\n\n``` swift\n    var pusher: Pusher!\n```\n\nThen replace the `viewDidLoad` method with the following code:\n\n``` swift\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    \n        pusher = Pusher(\n            key: AppConstants.PUSHER_APP_KEY, \n            options: PusherClientOptions(host: .cluster(AppConstants.PUSHER_APP_CLUSTER))\n        )\n    \n        let channel = pusher.subscribe(\"currency-update\")\n    \n        let _ = channel.bind(eventName: \"currency.updated\") { data in\n            if let data = data as? [String: [String: [String: Float]]] {\n                guard let payload = data[\"payload\"] else { return }\n    \n                self.coins = []\n    \n                for (coin, deets) in payload {\n                    guard let currentPrice = deets[\"current\"] else { return }\n                    self.coins.append(Coin(name: coin, rate: currentPrice))\n                }\n    \n                Dispatch.main.async {\n                    self.tableView.reloadData()\n                }\n            }\n        }\n    \n        pusher.connect()\n    }\n```\n\nIn the code above, we are using the [Pusher Swift SDK](https://pusher.com/docs/ios_quick_start) to subscribe to our `currency-update` Pusher Channel. We then subscribe to the `currency.updated` event on that channel. Whenever that event is triggered, we refresh the price of the cryptocurrency in realtime.\n\n### Adding push notifications to our iOS new application\n\nTo add push notification support, open the `AppDelegate` class and replace the contents with the following:\n\n``` swift\n    import UIKit\n    import PushNotifications\n    \n    @UIApplicationMain\n    class AppDelegate: UIResponder, UIApplicationDelegate {\n    \n        var window: UIWindow?\n        \n        func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n            PushNotifications.shared.start(instanceId: AppConstants.PUSHER_INSTANCE_ID)\n            PushNotifications.shared.registerForRemoteNotifications()\n            return true\n        }\n    \n        func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n            PushNotifications.shared.registerDeviceToken(deviceToken) {\n                if let deviceID = AppConstants.deviceIDFormatted {\n                    try? PushNotifications.shared.subscribe(interest: \"\\(deviceID)_eth_changed\")\n                    try? PushNotifications.shared.subscribe(interest: \"\\(deviceID)_btc_changed\")\n                }\n            }\n        }\n    }\n```\n\nIn the class above, we use the [Pusher Beams Swift SDK](https://docs.pusher.com/push-notifications/reference/ios) to register the device for push notifications. We then subscribe to the `*_eth_changed` and `*_btc_changed` interests, where `*` is the device’s unique UUID.\n\nNow that we have completed the logic for the application, let’s enable push notifications on the application in Xcode. \n\nIn the project navigator, select your project, and click on the **Capabilities** tab. [Enable Push Notifications](http://help.apple.com/xcode/mac/current/#/devdfd3d04a1) by turning the switch ON.\n\n![ios-cryptocurrency-part-2-enable-push](//images.ctfassets.net/1es3ne0caaid/7wLtGQ4Y00EUWiKgw6oQoE/8eb22b60c3271e6d0e47646c6423a7ad/ios-cryptocurrency-part-2-enable-push.png)\n\nThis will create an entitlements file in the root of your project. With that, you have provisioned your application to fully receive push notifications.\n\n### Allowing our application to connect locally\n\nIf you are going to be testing the app’s backend using a local server, then there is one last thing we need to do. Open the `info.plist` file and add an entry to the `plist` file to allow connection to our local server:\n\n![ios-cryptocurrency-part-2-local-connection](//images.ctfassets.net/1es3ne0caaid/5SXadC36VOcMs22Ooayw44/a7272c2b7126b3195878e1bcfad3e57b/ios-cryptocurrency-part-2-local-connection.png)\n\nThat’s all. We can run our application. However, **remember that to demo the push notifications, you will need an actual iOS device as simulators cannot receive push notifications.** If you are using a physical device, you’ll need to expose your local API using [Ngrok](https://ngrok.com) and then change the `API_URL`  **In** `AppConstants`.\n\nAnytime you want to update the currency prices, run the command below manually in your Laravel application:\n\n```\n    $ php artisan schedule:run\n```\n\nHere is a screen recording of the application in action:\n\n![ios-cryptocurrency-part-1-demo](//images.ctfassets.net/1es3ne0caaid/1K08NTSdaoIIqWQ2YAyOqo/4efdb4fa01a2ee599bf5b71561a717a4/ios-cryptocurrency-part-1-demo.gif)\n\n\n## Conclusion\n\nIn this article, we have been able to see how easy it is to create a cryptocurrency alert website using Laravel, Swift, Pusher Channels and Pusher Beams. The source code to the application built in this article is available on [GitHub](https://github.com/neoighodaro/cryptocurrency-alert-ios-app).","metaTitle":"Create a cryptocurrency tracking app - Part 2: The iOS app","metaDescription":"Use Swift and Laravel to create an iOS app for tracking cryptocurrency price changes. Users will receive alerts as prices go beyond set limits.  In part two, create the iOS app."}}],"defaultValue":"Channels \u0026 iOS","queryType":"tag","pages":5,"route":"/tutorials","query":{"product":"Channels","tag":"iOS","page":"3"}}},"page":"/tutorials","query":{"product":"Channels","tag":"iOS","page":"3"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=iOS&page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:31:22 GMT -->
</html>