<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Chat by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:37:35 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">33</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; Chat</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorialsd96d.html?tag=Chat" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsaa59.html?product=Beams&amp;tag=Chat" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; Chat"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/food-ordering-app-react-native-part-1.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a food ordering app in React Native - Part 1: Making an order</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Food ordering apps such as UberEats and FoodPanda are a popular way to order from your favorite local restaurant. In thi...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/food-ordering-app-react-native-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a food ordering app in React Native - Part 3: Adding push notifications</h3><p class="css-k12xad e5jrto45">Food ordering apps such as Uber Eats and FoodPanda are a popular way to order from your favorite local restaurant. In th...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/food-ordering-app-react-native-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a food ordering app in React Native - Part 2: Adding the driver app and chat functionality</h3><p class="css-k12xad e5jrto45">Food ordering apps such as Uber Eats and FoodPanda are a popular way to order from your favorite local restaurant. In th...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/whiteboard-electron-react-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Collaboration</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a whiteboard Electron app with React - Part 1: Adding the whiteboard</h3><p class="css-k12xad e5jrto45">In this two-part series, build a whiteboard app using Node, Electron and React. Users will be able to collaborate in rea...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chatbot-preact-witai.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to build a chatbot with Preact and Wit.ai</h3><p class="css-k12xad e5jrto45">Build a chatbot using Preact and Wit.ai, with a Node.js backend. Create custom entities, and implement realtime function...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-app-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app with Go</h3><p class="css-k12xad e5jrto45">This brief tutorial helps you create a simple chat application. You will build the backend in Go, and the frontend in va...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/android-messenger-presence-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an Android messenger app with online presence using Kotlin</h3><p class="css-k12xad e5jrto45">This tutorial shows how to build an Android messaging app featuring online presence functionality. Use Node and MongoDB ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-widget-python.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat widget with Python and JavaScript</h3><p class="css-k12xad e5jrto45">This tutorial will guide you through building a simple chat widget in Python and JavaScript. You will build two interfac...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-widget-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Building a chat widget with Go and JavaScript</h3><p class="css-k12xad e5jrto45">This brief tutorial shows you how to quickly create a chat widget with a backend powered by Go, and a frontend and admin...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Prev</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsbdae.html?product=Channels&amp;tag=Chat&amp;page=1" class="css-2wakph edg0byb1">1</a><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials3aa0.html?product=Channels&amp;tag=Chat&amp;page=2" class="css-5s6711 edg0byb1">2</a><a href="tutorials8ee7.html?product=Channels&amp;tag=Chat&amp;page=3" class="css-5s6711 edg0byb1">3</a><a href="tutorialsfeae.html?product=Channels&amp;tag=Chat&amp;page=4" class="css-5s6711 edg0byb1">4</a><a href="tutorials3aa0.html?product=Channels&amp;tag=Chat&amp;page=2" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":33,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1JovnLCE68G2ahOvlpH1bc","type":"Entry","createdAt":"2019-12-10T14:18:07.635Z","updatedAt":"2020-07-24T15:15:06.888Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a food ordering app in React Native - Part 1: Making an order","url":"food-ordering-app-react-native-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/React-Native-Food-Delivery","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"18J5ku8AMG7DNqxzvTy4tW","type":"Entry","createdAt":"2019-06-04T15:37:38.967Z","updatedAt":"2019-06-04T15:37:38.967Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Webhooks","url":"webhooks","type":"use case","featured":false}}],"reviewDate":"2019-10-23","description":"Food ordering apps such as UberEats and FoodPanda are a popular way to order from your favorite local restaurant. In this tutorial series, create both the food ordering app and the driving app. In part 1, create a simplified food ordering app using React Native.","prerequisite":"You will need Node 11.10+, Yarn 1.17+, React Native CLI 2+ and React Native 0.61+ installed on your machine.","content":"Food ordering apps such as Uber Eats and FoodPanda are popular these days as they allow you to conveniently order foods from your favorite local restaurant right from your phone.\n\nIn this tutorial, we’ll take a look at how to create a food ordering app in React Native. We will create the ordering app as well as the driver app.\n\nHere’s a breakdown of what we will be discussing throughout the series:\n\n- Part 1: Making an order\n- Part 2: Adding the driver app and chat functionality\n- Part 3: Adding push notifications\n\n\n## Prerequisites\n\nBasic knowledge of React Native and Node.js is required to follow this tutorial. \n\nWe will use the following package versions:\n\n- Node 11.10.1\n- Yarn 1.17.3\n- React Native CLI 2.0.1\n- React Native 0.61.1\n\nBe sure to use the versions indicated above if you encounter any issues getting the app to run.\n\nYou also need a [Pusher Channels account](https://pusher.com/channels) and an [ngrok account](https://ngrok.com/). We will use Channels to establish a connection between the customer and the driver, while ngrok is for exposing the server to the internet.\n\n\n## App overview\n\nWe will create a simplified version of a food ordering app. First, the user will be greeted with a food list. From here, they can click on any of the items to view the details:\n\n![food-ordering-app-react-native-order-img1](//images.ctfassets.net/1es3ne0caaid/4H5CxcxFowVTYhS7hgnB4d/35534e0b988c0161ab3cf6f7af45e018/food-ordering-app-react-native-order-img1.jpeg)\n\nHere’s what the details screen looks like. This is where they can select the quantity and add the item to the cart. Adding an existing item to the cart will result in incrementing the quantity of the item that’s already in the cart. Note that users can only order from one restaurant at a time:\n\n\n![food-ordering-app-react-native-order-img2](//images.ctfassets.net/1es3ne0caaid/7wdt8dCWjVldYMoJyvChf3/57a05c7b38aa2d174b5c4bbd6c534e39/food-ordering-app-react-native-order-img2.jpeg)\n\nOnce the user is done adding items to their cart, they can click on the **View Basket** button in the header. This will navigate them to the order summary screen. This screen is where all the items they added to their cart is listed along with the amount they need to pay. This is also where they can change their delivery location:\n\n![food-ordering-app-react-native-order-img3](//images.ctfassets.net/1es3ne0caaid/6Wb63IBDpYLsRZhPMNzLyJ/8d464fb1055ff9e55ac253caac122b8b/food-ordering-app-react-native-order-img3.jpeg)\n\nThough Geolocation is used by default to determine the user’s location, if it isn’t accurate then the user can also pick their location:\n\n\n![food-ordering-app-react-native-order-img4](//images.ctfassets.net/1es3ne0caaid/4OuT5La4ISB80WURWJTZ0i/21cb18c2a6b9f574b9012647b1826e00/food-ordering-app-react-native-order-img4.jpeg)\n\nOnce the user is ready, they can click on the **Place Order** button to trigger the app to send a request to a driver. \n\nOnce a driver has accepted their request, the driver’s location is displayed in realtime on the map. The path from the driver to the restaurant and from the restaurant to the user is also indicated on the map:\n\n![food-ordering-app-react-native-order-img5](//images.ctfassets.net/1es3ne0caaid/4IgPgD1jTUf2ShL3q8zaRo/3cdf9e3c0ed501a673d1ecdc837a2c0d/food-ordering-app-react-native-order-img5.jpeg)\n\nYou can find the app’s code on this [GitHub repo](https://github.com/anchetaWern/React-Native-Food-Delivery). The completed code for this part of the series is on the `food-ordering` branch.\n\n\n## Setting up Channels\n\nCreate a new Channels app instance if you haven’t already. Then under the **App Settings** tab, enable client events. This allows us to trigger events right from the app itself:\n\n\n![food-ordering-app-react-native-order-img6](//images.ctfassets.net/1es3ne0caaid/17LEaUfPJtGFb81Tn2FQXe/f24f282a0425361be103b821b0921e21/food-ordering-app-react-native-order-img6.png)\n\n\n## Setting up Google Maps\n\nIn order to use React Native Maps, you first need to set up the Google Maps Platform. Thankfully, this has been covered extensively in the official docs: [Get Started with Google Maps Platform](https://developers.google.com/maps/gmp-get-started).\n\nIf you’re new to it, a highly recommend following the [Quickstart](https://developers.google.com/maps/gmp-get-started#quickstart). This is the fastest way to get up and running because it will automatically configure everything for you. All you need to do is pick the specific Google Maps products that you’re going to need. In this case, we’ll only need Maps and Maps Places. Selecting these will automatically enable the Android, iOS, and Web API of Google Maps and Places for you:\n\n\n![food-ordering-app-react-native-order-img7](//images.ctfassets.net/1es3ne0caaid/2yrT5o9FbomK8xcorNTKTA/1e860c40dad49950b7cd48831614e9ed/food-ordering-app-react-native-order-img7.png)\n\nAfter that, you need to select a project. If you’re new to using any of the Google APIs, you will most likely have a project pre-created already. Just select that project or [follow the instructions on how to create a new one](https://developers.google.com/maps/gmp-get-started#create-project):\n\n\n![food-ordering-app-react-native-order-img8](//images.ctfassets.net/1es3ne0caaid/ZXQWKE4j4iLOJ5U0eL9r6/ababd9a735a7967262ee063d0bc38a96/food-ordering-app-react-native-order-img8.png)\n\nAfter that, the final step is for you to [setup billing](https://developers.google.com/maps/gmp-get-started#create-billing-account).\n\nOnce that’s done, you should be able to view your API keys from the Google Cloud Platform console by clicking on the hamburger icon at the top left of the screen. Then select **APIs \u0026 Services \u003e Credentials**. This will list out all the API keys that you can use for connecting to the Google Maps and Google Maps Places API. Here’s how it looks like:\n\n![food-ordering-app-react-native-order-img9](//images.ctfassets.net/1es3ne0caaid/6eoJQEZ2yiiPHOX3aHMRLk/0b7c78339c45debb08be582a7bba2ea0/food-ordering-app-react-native-order-img9.png)\n\n\n## Bootstrapping the app\n\nThe next step is for us to bootstrap the app. I’ve already prepared a `starter` branch to make it easy for us to proceed with the important parts of the app. This branch contains the code for setting up the navigation as well as the code for the components and styles. \n\nClone the repo and switch to the `starter` branch:\n\n```\n    git clone https://github.com/anchetaWern/React-Native-Food-Delivery.git RNFoodDelivery\n    cd RNFoodDelivery\n    git checkout starter\n```\n\nAfter that, install all the dependencies. Note that this will only install the dependencies for this part of the series. We’ll install the dependencies for each part as we go:\n\n```\n    yarn install\n```\n\nHere’s a what each of the packages are used for:\n\n\n- [**axios**](https://github.com/axios/axios) - for making requests for the list of foods to the server.\n- [**pusher-js**](https://github.com/pusher/pusher-js) - the JavaScript client library for Pusher. We use it as a realtime communication channel between the customer and the driver. This depends on `@react-native-community/netinfo` to determine the network status.\n- [**react-native-config**](https://github.com/luggit/react-native-config) - for reading config in the `.env` files.\n- [**react-navigation**](https://reactnavigation.org/) - for implementing navigation in the app. This depends on `react-navigation-stack`, `react-native-gesture-handler`,  `react-native-reanimated`, and `react-native-gesture-handler`.\n- [**react-native-simple-stepper**](https://github.com/testshallpass/react-native-simple-stepper) - used for rendering a stepper component for selecting the quantity for a specific order item.\n- [**react-native-permissions**](https://github.com/react-native-community/react-native-permissions) - for requesting for permission to access geolocation data.\n- [**react-native-geocoding**](https://github.com/marlove/react-native-geocoding) - for converting coordinates to an actual place name.\n- [**react-native-google-places**](https://github.com/tolu360/react-native-google-places) - for rendering a place picker modal powered by Google Maps Places. \n- [**react-native-geolocation-service**](https://github.com/Agontuk/react-native-geolocation-service) - for getting the geolocation data.\n- [**react-native-maps**](https://github.com/react-native-community/react-native-maps) - for rendering maps and markers.\n- [**react-native-maps-directions**](https://github.com/bramus/react-native-maps-directions) - for drawing a path between two coordinates.\n\nNext, update the `.env` file at the roof of the project directory with your Channels and Google Maps API credentials:\n\n```\n    CHANNELS_APP_KEY=\"YOUR CHANNELS APP KEY\"\n    CHANNELS_APP_CLUSTER=\"YOUR CHANNELS APP CLUSTER\"\n    \n    GOOGLE_API_KEY=\"YOUR GOOGLE API KEY\"\n    \n    NGROK_HTTPS_URL=\"YOUR NGROK HTTPS URL\"\n```\n\nNext, update the  `android/settings.gradle` file to include the native files for the packages that we’re using. We’re not including all of them because most of the packages that we’re using doesn’t have native code and a few others already supports [Autolinking](https://github.com/react-native-community/cli/blob/master/docs/autolinking.md):\n\n```javascript\n    rootProject.name = 'RNFoodDelivery'\n    \n    // add these:\n    include ':react-native-permissions'\n    project(':react-native-permissions').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-permissions/android')\n    \n    include ':react-native-config'\n    project(':react-native-config').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-config/android')\n    include ':react-native-google-places'\n    project(':react-native-google-places').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-google-places/android')\n```\n\nNext, update the `android/app/build.gradle` file:\n\n```javascript\n    apply plugin: \"com.android.application\"\n    \n    apply from: project(':react-native-config').projectDir.getPath() + \"/dotenv.gradle\" // add this\n```\n\nStill on the same file, look for the `dependencies` and add the following:\n\n```javascript\n    dependencies {\n      implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\n      implementation \"com.facebook.react:react-native:+\"  // From node_modules\n      \n      // add these (for various dependencies)\n      implementation project(':react-native-config')\n      implementation project(':react-native-google-places')\n      implementation project(':react-native-permissions')\n    \n      // add these (for react-navigation):\n      implementation 'androidx.appcompat:appcompat:1.1.0-rc01'\n      implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0-alpha02'\n      \n    }\n```\n\nNext, update the `android/app/src/main/AndroidManifest.xml` file and include the permissions that we need. `ACCESS_NETWORK_STATE` is used by Channels to determine if the user is currently connected to the internet. While `ACCESS_FINE_LOCATION` is used for getting the user’s current location:\n\n```xml\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      package=\"com.rnfooddelivery\"\u003e\n      \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n    \n      \u003c!-- add these --\u003e\n      \u003cuses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/\u003e\n      \u003cuses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /\u003e\n      ...\n    \u003c/manifest\u003e\n```\n\nStill on the same file, under `\u003capplication\u003e`, add your Google API key config. This is required by React Native Maps in order to use Google Maps:\n\n```xml\n    \u003capplication\u003e\n      \u003cmeta-data\n        android:name=\"com.google.android.geo.API_KEY\"\n        android:value=\"YOUR GOOGLE API KEY\" /\u003e\n    \u003c/application\u003e\n```\n\n## Coding the ordering app\n\nAt this point, we’re now ready to start coding the app. As mentioned earlier, the navigation and styles have already been pre-coded. All we have to do now is add the code for the individual screens.\n\n### FoodList screen\nFirst, we’ll go through the code for the FoodList screen. This screen displays the list of foods that are available for order from each of the restaurants that uses the app. Nothing too complex here. All we do is request the data from the server. As you’ll see later, the list of foods is also hard-coded.\n\nOpen the `src/screens/FoodList.js` file and add the following. If you’ve used React Native for a while, you should feel right at home. Basically, we’re just creating a list using the `FlatList` component and then filtering it by whatever the user has entered in the `TextInput`. The `navigationOptions` allows us to specify the settings for the navigation header for the current page. In this case, we include the `title` and a `Button` in the header for navigating to the **OrderSummary** screen. The React Navigation library takes care of these for us:\n\n```javascript\n    // src/screens/FoodList.js\n    import React, {Component} from 'react';\n    import {View, Text, Button, TextInput, FlatList, StyleSheet} from 'react-native';\n    import axios from 'axios';\n    import Config from 'react-native-config';\n    \n    import NavHeaderRight from '../components/NavHeaderRight';\n    import ListCard from '../components/ListCard';\n    \n    const BASE_URL = Config.NGROK_HTTPS_URL;\n    \n    class FoodList extends Component {\n      static navigationOptions = ({navigation}) =\u003e {\n        return {\n          title: 'Hungry?',\n          headerRight: \u003cNavHeaderRight /\u003e,\n        };\n      };\n    \n      state = {\n        foods: [], // list of foods to be rendered on the screen\n        query: '',\n      };\n    \n      async componentDidMount() {\n        // fetch the array of foods from the server\n        const foods_response = await axios.get('${BASE_URL}/foods');\n        this.setState({\n          foods: foods_response.data.foods,\n        });\n      }\n    \n      render() {\n        const {foods, query} = this.state;\n        return (\n          \u003cView style={styles.wrapper}\u003e\n            \u003cView style={styles.topWrapper}\u003e\n              \u003cView style={styles.textInputWrapper}\u003e\n                \u003cTextInput\n                  style={styles.textInput}\n                  onChangeText={this.onChangeQuery}\n                  value={query}\n                  placeholder={'What are you craving for?'}\n                /\u003e\n              \u003c/View\u003e\n    \n              \u003cView style={styles.buttonWrapper}\u003e\n                \u003cButton\n                  onPress={() =\u003e this.filterList()}\n                  title=\"Go\"\n                  color=\"#c53c3c\"\n                /\u003e\n              \u003c/View\u003e\n            \u003c/View\u003e\n    \n            \u003cFlatList\n              data={foods}\n              renderItem={this.renderFood}\n              contentContainerStyle={styles.list}\n              keyExtractor={item =\u003e item.id.toString()}\n            /\u003e\n          \u003c/View\u003e\n        );\n      }\n    \n      onChangeQuery = text =\u003e {\n        this.setState({\n          query: text,\n        });\n      };\n    \n      filterList = async () =\u003e {\n        // filter the list of foods by supplying a query\n        const {query} = this.state;\n        const foods_response = await axios.get(`${BASE_URL}/foods?query=${query}`);\n    \n        this.setState({\n          foods: foods_response.data.foods,\n          query: '',\n        });\n      };\n    \n      viewItem = item =\u003e {\n        // navigate to the FoodDetails screen\n        this.props.navigation.navigate('FoodDetails', {\n          item,\n        });\n      };\n    \n      renderFood = ({item}) =\u003e {\n        return \u003cListCard item={item} viewItem={this.viewItem} /\u003e;\n      };\n    }\n    \n    // \u003cpre-coded styles here..\u003e\n    \n    export default FoodList;\n```\n\n### FoodDetails screen\nNext, let’s go through the code for the FoodDetails screen. This screen shows all the details for a specific food. It also allows the user to select the quantity to be ordered and add them to the cart. The `PageCard` component is used for rendering the entirety of the screen. All we do is supply it with the necessary props. The most relevant function here is the function for adding the item to the cart. This implements the rule that the user can only order foods from a single restaurant for each order. But the `addToCart()` method from `this.context` is the one that actually adds it to the cart. We’ll walk through what this context is shortly. For now, know that this uses [React’s Context API](https://reactjs.org/docs/context.html) to create a global app context for storing data and function that we need throughout the app:\n\n```javascript\n    // src/screens/FoodDetails.js\n    import React, {Component} from 'react';\n    import {View, Button, Alert} from 'react-native';\n    \n    import NavHeaderRight from '../components/NavHeaderRight';\n    import PageCard from '../components/PageCard';\n    \n    import {AppContext} from '../../GlobalContext';\n    \n    class FoodDetails extends Component {\n      static navigationOptions = ({navigation}) =\u003e {\n        return {\n          title: navigation.getParam('item').name.substr(0, 12) + '...',\n          headerRight: \u003cNavHeaderRight /\u003e,\n        };\n      };\n    \n      static contextType = AppContext; // set this.context to the global app context\n    \n      state = {\n        qty: 1,\n      };\n    \n      constructor(props) {\n        super(props);\n        const {navigation} = this.props;\n        this.item = navigation.getParam('item'); // get the item passed from the FoodList screen\n      }\n    \n      qtyChanged = value =\u003e {\n        const nextValue = Number(value);\n        this.setState({qty: nextValue});\n      };\n    \n      addToCart = (item, qty) =\u003e {\n        // prevent the user from adding items with different restaurant ids\n        const item_id = this.context.cart_items.findIndex(\n          el =\u003e el.restaurant.id !== item.restaurant.id,\n        );\n        if (item_id === -1) {\n          Alert.alert(\n            'Added to basket',\n            `${qty} ${item.name} was added to the basket.`,\n          );\n          this.context.addToCart(item, qty); // call addToCart method from global app context\n        } else {\n          Alert.alert(\n            'Cannot add to basket',\n            'You can only order from one restaurant for each order.',\n          );\n        }\n      };\n    \n      render() {\n        const {qty} = this.state;\n        return (\n          \u003cPageCard\n            item={this.item}\n            qty={qty}\n            qtyChanged={this.qtyChanged}\n            addToCart={this.addToCart}\n          /\u003e\n        );\n      }\n    }\n    \n    export default FoodDetails;\n```\n\n### GlobalContext\nAs mentioned earlier, we’re using the React Context API to create a global context in which we store data and function that we need throughout the app. This allows us to avoid common problems when working with state such as [prop drilling](https://kentcdodds.com/blog/prop-drilling/). All without having to use full-on state management libraries like Redux or MobX. \n\nIn this case, we need to make the cart items as well as the function for adding items available in the global app context. To do that, we create a context and export it. Then we create an `AppContextProvider` component. This will serve as a wrapper for the higher-order component that we’re going to create shortly. Thus, it is where we initialize the global state and include the function for adding items to the cart. The `addToCart()` method contains the logic that checks whether an item has already been added to the cart. If it is, then it will simply add the supplied quantity to the existing item:\n\n```javascript\n    // GlobalContext.js\n    import React from 'react';\n    import {withNavigation} from 'react-navigation';\n    export const AppContext = React.createContext({}); // create a context\n    \n    export class AppContextProvider extends React.Component {\n      state = {\n        cart_items: [],\n    \n        user_id: 'wernancheta',\n        user_name: 'Wern Ancheta',\n      };\n    \n      constructor(props) {\n        super(props);\n      }\n    \n      addToCart = (item, qty) =\u003e {\n        let found = this.state.cart_items.filter(el =\u003e el.id === item.id);\n        if (found.length == 0) {\n          this.setState(prevState =\u003e {\n            return {cart_items: prevState.cart_items.concat({...item, qty})};\n          });\n        } else {\n          this.setState(prevState =\u003e {\n            const other_items = prevState.cart_items.filter(\n              el =\u003e el.id !== item.id,\n            );\n            return {\n              cart_items: [...other_items, {...found[0], qty: found[0].qty + qty}],\n            };\n          });\n        }\n      };\n    \n      // next: add render()\n    }\n    \n    // last: export components\n```\n\nHere’s the `render()` method. This is where we use the [Context Provider](https://reactjs.org/docs/context.html#contextprovider) component to allow consuming components to subscribe to context value changes. The value is specified via the `value` prop. Using the Context Provider allows us to automatically re-render the consuming components everytime the value changes. In this case, we’re destructuring whatever is in the state and add the `addToCart()` method:\n\n```javascript\n    render() {\n      return (\n        \u003cAppContext.Provider\n          value={{\n            ...this.state,\n            addToCart: this.addToCart,\n          }}\u003e\n          {this.props.children}\n        \u003c/AppContext.Provider\u003e\n      );\n    }\n```\n\nOnce that’s done, we can now create the actual [higher-order component](https://reactjs.org/docs/higher-order-components.html) and use the `AppContextProvider` to wrap whatever component will be passed to it:\n\n```javascript\n    export const withAppContextProvider = ChildComponent =\u003e props =\u003e (\n      \u003cAppContextProvider\u003e\n        \u003cChildComponent {...props} /\u003e\n      \u003c/AppContextProvider\u003e\n    );\n```\n\n\u003e If you’re having difficulty wrapping your head around higher-order components in React. Be sure to check out this article: [How to develop your React superpowers with the HOC Pattern](https://www.freecodecamp.org/news/how-to-develop-your-react-superpowers-with-the-hoc-pattern-61293651d59/).\n\n### index.js\nTo use the higher-order component that we just created, open the `index.js` file at the root of the project directory then wrap the main `App` component with the `withAppContextProvider`:\n\n```javascript\n    // index.js\n    import {AppRegistry} from 'react-native';\n    import App from './App';\n    import {name as appName} from './app.json';\n    import {withAppContextProvider} from './GlobalContext'; // add this\n    \n    AppRegistry.registerComponent(appName, () =\u003e withAppContextProvider(App)); // wrap App withAppContextProvider\n```\n\nNote that this doesn’t automatically provide us with whatever state is in the `AppContextProvider` component. As you’ve seen in the `src/screens/FoodDetails.js` file earlier, we had to include the `AppContext`:\n\n```javascript\n    import {AppContext} from '../../GlobalContext';\n```\n\nThen inside the component class, we had to set the `contextType` to the `AppContext`:\n\n```javascript\n    class FoodDetails extends Component {\n      static contextType = AppContext; \n      // ...\n    }\n```\n\nThis allowed us to access any of the values that were passed in the Context Provider component via `this.context`:\n\n```javascript\n    this.context.cart_items;\n    this.context.addToCart(item, qty);\n```\n\n### OrderSummary screen\nNext, let’s proceed with the OrderSummary screen. This screen displays the items added to the cart and the payment breakdown. It also allows the user to change their delivery location. \n\nStart by importing and initializing the packages we need:\n\n```javascript\n    // src/screens/OrderSummary.js\n    import React, {Component} from 'react';\n    import {\n      View,\n      Text,\n      Button,\n      TouchableOpacity,\n      FlatList,\n      StyleSheet,\n    } from 'react-native';\n    import MapView from 'react-native-maps';\n    import RNGooglePlaces from 'react-native-google-places';\n    import {check, request, PERMISSIONS, RESULTS} from 'react-native-permissions';\n    \n    import Geolocation from 'react-native-geolocation-service';\n    import Geocoder from 'react-native-geocoding';\n    import Config from 'react-native-config';\n    \n    import {AppContext} from '../../GlobalContext';\n    \n    import getSubTotal from '../helpers/getSubTotal';\n    \n    import {regionFrom} from '../helpers/location';\n    \n    const GOOGLE_API_KEY = Config.GOOGLE_API_KEY;\n    \n    Geocoder.init(GOOGLE_API_KEY);\n```\n\nNext, create the component class and initialize the state:\n\n```javascript\n    class OrderSummary extends Component {\n      static navigationOptions = {\n        title: 'Order Summary',\n      };\n    \n      static contextType = AppContext;\n    \n      state = {\n        customer_address: '',\n        customer_location: null,\n        restaurant_address: '',\n        restaurant_location: null,\n      };\n    \n      // next: add componentDidMount\n    }\n```\n\nOnce the component is mounted, we check for the location permissions using the \n[React Native Permissions library](https://github.com/react-native-community/react-native-permissions). If the permission is `denied`, it means that it has not been requested (or is denied but still requestable) so we request for it from the user. If the user agrees, the permission becomes `granted`. From there, we get the user’s current location using the [React Native Geolocation Services library](https://github.com/Agontuk/react-native-geolocation-service). To get the name of the place, we use the [React Native Geocoding library](https://github.com/marlove/react-native-geocoding) to transform the coordinates that we got back. The `regionFrom()` function gives us an object which we can supply to React Native Maps to render the location in the map. This function is included in the `starter` branch:\n\n```javascript\n    let location_permission = await check(\n      PERMISSIONS.ANDROID.ACCESS_FINE_LOCATION,\n    );\n    \n    if (location_permission === 'denied') {\n      location_permission = await request(\n        PERMISSIONS.ANDROID.ACCESS_FINE_LOCATION,\n      );\n    }\n    \n    if (location_permission == 'granted') {\n      Geolocation.getCurrentPosition(\n        async position =\u003e {\n          const geocoded_location = await Geocoder.from(\n            position.coords.latitude,\n            position.coords.longitude,\n          );\n    \n          let customer_location = regionFrom(\n            position.coords.latitude,\n            position.coords.longitude,\n            position.coords.accuracy,\n          );\n    \n          this.setState({\n            customer_address: geocoded_location.results[0].formatted_address,\n            customer_location,\n          });\n        },\n        error =\u003e {\n          console.log(error.code, error.message);\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: 15000,\n          maximumAge: 10000,\n        },\n      );\n    }\n    \n    // next: add render()\n```\n\nHere’s the `render()` method:\n\n```javascript\n    render() {\n      const subtotal = getSubTotal(this.context.cart_items);\n      const {customer_address, customer_location} = this.state;\n    \n      return (\n        \u003cView style={styles.wrapper}\u003e\n          \u003cView style={styles.addressSummaryContainer}\u003e\n            {customer_location \u0026\u0026 (\n              \u003cView style={styles.mapContainer}\u003e\n                \u003cMapView style={styles.map} initialRegion={customer_location} /\u003e\n              \u003c/View\u003e\n            )}\n    \n            \u003cView style={styles.addressContainer}\u003e\n              {customer_address != '' \u0026\u0026\n                this.renderAddressParts(customer_address)}\n    \n              \u003cTouchableOpacity\n                onPress={() =\u003e {\n                  this.openPlacesSearchModal();\n                }}\u003e\n                \u003cView style={styles.linkButtonContainer}\u003e\n                  \u003cText style={styles.linkButton}\u003eChange location\u003c/Text\u003e\n                \u003c/View\u003e\n              \u003c/TouchableOpacity\u003e\n            \u003c/View\u003e\n          \u003c/View\u003e\n          \u003cView style={styles.cartItemsContainer}\u003e\n            \u003cFlatList\n              data={this.context.cart_items}\n              renderItem={this.renderCartItem}\n              keyExtractor={item =\u003e item.id.toString()}\n            /\u003e\n          \u003c/View\u003e\n    \n          \u003cView style={styles.lowerContainer}\u003e\n            \u003cView style={styles.spacerBox} /\u003e\n    \n            {subtotal \u003e 0 \u0026\u0026 (\n              \u003cView style={styles.paymentSummaryContainer}\u003e\n                \u003cView style={styles.endLabelContainer}\u003e\n                  \u003cText style={styles.priceLabel}\u003eSubtotal\u003c/Text\u003e\n                  \u003cText style={styles.priceLabel}\u003eBooking fee\u003c/Text\u003e\n                  \u003cText style={styles.priceLabel}\u003eTotal\u003c/Text\u003e\n                \u003c/View\u003e\n    \n                \u003cView\u003e\n                  \u003cText style={styles.price}\u003e${subtotal}\u003c/Text\u003e\n                  \u003cText style={styles.price}\u003e$5\u003c/Text\u003e\n                  \u003cText style={styles.price}\u003e${subtotal + 5}\u003c/Text\u003e\n                \u003c/View\u003e\n              \u003c/View\u003e\n            )}\n          \u003c/View\u003e\n    \n          {subtotal == 0 \u0026\u0026 (\n            \u003cView style={styles.messageBox}\u003e\n              \u003cText style={styles.messageBoxText}\u003eYour cart is empty\u003c/Text\u003e\n            \u003c/View\u003e\n          )}\n    \n          {subtotal \u003e 0 \u0026\u0026 (\n            \u003cView style={styles.buttonContainer}\u003e\n              \u003cButton\n                onPress={() =\u003e this.placeOrder()}\n                title=\"Place Order\"\n                color=\"#c53c3c\"\n              /\u003e\n            \u003c/View\u003e\n          )}\n        \u003c/View\u003e\n      );\n    }\n```\n\nHere’s the `renderAddressParts()` method. All it does is render the individual parts of the address (street address, town name, etc.):\n\n```javascript\n    renderAddressParts = customer_address =\u003e {\n      return customer_address.split(',').map((addr_part, index) =\u003e {\n        return (\n          \u003cText key={index} style={styles.addressText}\u003e\n            {addr_part}\n          \u003c/Text\u003e\n        );\n      });\n    };\n```\n\nWhen the user clicks on the **Change location** button link, we use the [React Native Google Places library](https://github.com/tolu360/react-native-google-places) to open a model which allows the user to pick a place. Note that this already gives us the actual name of the place so we don’t need to use the Geocoding library again:\n\n```javascript\n    openPlacesSearchModal = async () =\u003e {\n      try {\n        const place = await RNGooglePlaces.openAutocompleteModal(); // open modal for picking a place\n    \n        const customer_location = regionFrom(\n          place.location.latitude,\n          place.location.longitude,\n          16, // accuracy\n        );\n    \n        this.setState({\n          customer_address: place.address,\n          customer_location,\n        });\n      } catch (err) {\n        console.log('err: ', err);\n      }\n    };\n```\n\nHere’s the `renderCartItem()` method:\n\n```javascript\n    renderCartItem = ({item}) =\u003e {\n      return (\n        \u003cView style={styles.cartItemContainer}\u003e\n          \u003cView\u003e\n            \u003cText style={styles.priceLabel}\u003e\n              {item.qty}x {item.name}\n            \u003c/Text\u003e\n          \u003c/View\u003e\n          \u003cView\u003e\n            \u003cText style={styles.price}\u003e${item.price}\u003c/Text\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    };\n```\n\nHere’s the `placeOrder()` method. This extracts the customer location (coordinates) and address from the state, as well as the restaurant location and address from the context. We know that the user can only order from one restaurant, so we can simply get the first item and be assured that it’s the same for all the other items in the cart. Once we have all the required data, we simply pass it as a navigation param to the TrackOrder screen:\n\n```javascript\n    placeOrder = () =\u003e {\n      const {customer_location, customer_address} = this.state;\n    \n      const {\n        address: restaurant_address,\n        location: restaurant_location,\n      } = this.context.cart_items[0].restaurant; // get the address and location of the restaurant\n    \n      this.props.navigation.navigate('TrackOrder', {\n        customer_location,\n        restaurant_location,\n        customer_address,\n        restaurant_address,\n      });\n    };\n```\n\n### TrackOrder screen\nNext, we now proceed to the TrackOrder screen. This is where the user can keep track of the progress of their order via a map interface. The map displays markers for their location, the restaurant’s location, and the driver’s location. It also displays the path between those locations.\n\nStart by importing the packages we need:\n\n```javascript\n    // src/screens/TrackOrder.js\n    import React, {Component} from 'react';\n    import {View, Text, Button, Alert, StyleSheet} from 'react-native';\n    \n    import MapView from 'react-native-maps';\n    import Geolocation from 'react-native-geolocation-service';\n    import MapViewDirections from 'react-native-maps-directions';\n    import Pusher from 'pusher-js/react-native';\n    \n    import Config from 'react-native-config';\n    \n    const CHANNELS_APP_KEY = Config.CHANNELS_APP_KEY;\n    const CHANNELS_APP_CLUSTER = Config.CHANNELS_APP_CLUSTER;\n    const CHANNELS_AUTH_SERVER = 'YOUR NGROK HTTPS URL/pusher/auth';\n    \n    const GOOGLE_API_KEY = Config.GOOGLE_API_KEY;\n    \n    import {regionFrom} from '../helpers/location';\n    import {AppContext} from '../../GlobalContext';\n```\n\nNext, add the array which contains the status messages for the order. Each of these items will be displayed as the driver updates the order status on their side:\n\n```javascript\n    const orderSteps = [\n      'Finding a driver',\n      'Driver is on the way to pick up your order',\n      'Driver has picked up your order and is on the way to deliver it',\n      'Driver has delivered your order',\n    ];\n```\n\nNext, create the component class and initialize the state:\n\n```javascript\n    class TrackOrder extends Component {\n      static navigationOptions = ({navigation}) =\u003e {\n        return {\n          title: 'Track Order',\n        };\n      };\n    \n      static contextType = AppContext;\n    \n      state = {\n        isSearching: true, // whether the app is still searching for a driver\n        hasDriver: false, // whether there's already a driver assigned to the order\n        driverLocation: null, // the coordinates of the driver's location\n        orderStatusText: orderSteps[0], // display the first message by default\n      };\n    \n      // next: add the constructor()\n    }\n```\n\nIn the constructor, get the navigation params that we passed earlier from the OrderSummary screen. After that, initialize the instance variables that we will be using:\n\n```javascript\n    constructor(props) {\n      super(props);\n    \n      this.customer_location = this.props.navigation.getParam(\n        'customer_location',\n      ); // customer's location\n      this.restaurant_location = this.props.navigation.getParam(\n        'restaurant_location',\n      );\n    \n      this.customer_address = this.props.navigation.getParam('customer_address');\n      this.restaurant_address = this.props.navigation.getParam(\n        'restaurant_address',\n      );\n    \n      this.available_drivers_channel = null; // the pusher channel where all drivers and customers are subscribed to\n      this.user_ride_channel = null; // the pusher channel exclusive to the customer and driver in a given order\n      this.pusher = null; // pusher client\n    }\n    \n    // next: add componentDidMount()\n```\n\nOn `componentDidMount()` is where we initialize the Pusher client and subscribe to the channel where we can look for available drivers. Once subscribed, we trigger an event to request for a driver. We’re putting it inside `setTimeout()` to ensure that the connection has really been initialized properly. The event contains all the relevant information that we got from the previous screen:\n\n```javascript\n    componentDidMount() {\n      this.setState({\n        isSearching: true, \n      });\n    \n      this.pusher = new Pusher(CHANNELS_APP_KEY, {\n        authEndpoint: CHANNELS_AUTH_SERVER,\n        cluster: CHANNELS_APP_CLUSTER,\n        encrypted: true,\n      });\n    \n      this.available_drivers_channel = this.pusher.subscribe(\n        'private-available-drivers',\n      );\n    \n      this.available_drivers_channel.bind('pusher:subscription_succeeded', () =\u003e {\n        // make a request to all drivers\n        setTimeout(() =\u003e {\n          this.available_drivers_channel.trigger('client-driver-request', {\n            customer: {username: this.context.user_id},\n            restaurant_location: this.restaurant_location,\n            customer_location: this.customer_location,\n            restaurant_address: this.restaurant_address,\n            customer_address: this.customer_address,\n          });\n        }, 2000);\n      });\n    \n      // next: subscribe to user-ride channel\n    }\n```\n\n\u003e **Note**: This is an overly simplified driver request logic. In a production app, you will need to filter the drivers so that the only one’s who receives the request are the one’s that are nearby the restaurant and the customer. The code above basically sends a request to all of the drivers.\n\nNext, we subscribe to the current user’s own channel. This will be the means of communication between the driver (the one who responded to their request) and the customer. We listen for the `client-driver-response` event to be triggered from the driver’s side. When this happens, we send back a `yes` or `no` response. If the customer hasn’t found a driver yet, then we send a `yes`, otherwise `no`. Once the driver receives a `yes` response, they trigger the `client-found-driver` event on their side. This is then received by the customer and uses it to update the state with the driver’s location:\n\n```javascript\n    this.user_ride_channel = this.pusher.subscribe(\n      'private-ride-' + this.context.user_id,\n    );\n    \n    this.user_ride_channel.bind('client-driver-response', data =\u003e {\n      // customer responds to driver's response\n      this.user_ride_channel.trigger('client-driver-response', {\n        response: this.state.hasDriver ? 'no' : 'yes',\n      });\n    });\n    \n    this.user_ride_channel.bind('client-found-driver', data =\u003e {\n      // found driver, the customer has no say about this.\n      const driverLocation = regionFrom(\n        data.location.latitude,\n        data.location.longitude,\n        data.location.accuracy,\n      );\n    \n      this.setState({\n        hasDriver: true,\n        isSearching: false,\n        driverLocation,\n      });\n    \n      Alert.alert(\n        'Driver found',\n        \"We found you a driver. They're on their way to pick up your order.\",\n      );\n    });\n    \n    // next: subscribe to driver location change\n```\n\nAs the driver goes to process the order, their location is constantly watched and sent to the customer via the `client-driver-location` event. We use this to update the marker on the map which represents the driver’s location:\n\n```javascript\n    this.user_ride_channel.bind('client-driver-location', data =\u003e {\n      // driver location received\n      let driverLocation = regionFrom(\n        data.latitude,\n        data.longitude,\n        data.accuracy,\n      );\n      \n      // update the marker representing the driver's current location\n      this.setState({\n        driverLocation,\n      });\n    });\n```\n\nNext, listen for the `client-order-update` event. This uses the `step` value to update the order status. When the driver accepts an order, step `1` is sent. When the driver receives the order from the restaurant, they need to click a button to trigger step `2` to be sent, and so on:\n\n```javascript\n    this.user_ride_channel.bind('client-order-update', data =\u003e {\n      this.setState({\n        orderStatusText: orderSteps[data.step],\n      });\n    });\n```\n\nHere’s the `render()` method:\n\n```javascript\n    render() {\n      const {driverLocation, orderStatusText} = this.state;\n    \n      return (\n        \u003cView style={styles.wrapper}\u003e\n          \u003cView style={styles.infoContainer}\u003e\n            \u003cText style={styles.infoText}\u003e{orderStatusText}\u003c/Text\u003e\n    \n            \u003cButton\n              onPress={() =\u003e this.contactDriver()}\n              title=\"Contact driver\"\n              color=\"#c53c3c\"\n            /\u003e\n          \u003c/View\u003e\n    \n          \u003cView style={styles.mapContainer}\u003e\n            \u003cMapView\n              style={styles.map}\n              zoomControlEnabled={true}\n              initialRegion={this.customer_location}\u003e\n              \u003cMapView.Marker\n                coordinate={{\n                  latitude: this.customer_location.latitude,\n                  longitude: this.customer_location.longitude,\n                }}\n                title={'Your location'}\n              /\u003e\n    \n              {driverLocation \u0026\u0026 (\n                \u003cMapView.Marker\n                  coordinate={driverLocation}\n                  title={'Driver location'}\n                  pinColor={'#6f42c1'}\n                /\u003e\n              )}\n    \n              \u003cMapView.Marker\n                coordinate={{\n                  latitude: this.restaurant_location[0],\n                  longitude: this.restaurant_location[1],\n                }}\n                title={'Restaurant location'}\n                pinColor={'#4CDB00'}\n              /\u003e\n    \n              {driverLocation \u0026\u0026 (\n                \u003cMapViewDirections\n                  origin={driverLocation}\n                  destination={{\n                    latitude: this.restaurant_location[0],\n                    longitude: this.restaurant_location[1],\n                  }}\n                  apikey={GOOGLE_API_KEY}\n                  strokeWidth={3}\n                  strokeColor=\"hotpink\"\n                /\u003e\n              )}\n    \n              \u003cMapViewDirections\n                origin={{\n                  latitude: this.restaurant_location[0],\n                  longitude: this.restaurant_location[1],\n                }}\n                destination={{\n                  latitude: this.customer_location.latitude,\n                  longitude: this.customer_location.longitude,\n                }}\n                apikey={GOOGLE_API_KEY}\n                strokeWidth={3}\n                strokeColor=\"#1b77fb\"\n              /\u003e\n            \u003c/MapView\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\n### Channels authentication server\nNow let’s proceed with the authentication server.  Start by updating the `server/.env` file with your Channels app instance credentials:\n\n```\n    PUSHER_APP_ID=\"YOUR PUSHER APP ID\"\n    PUSHER_APP_KEY=\"YOUR PUSHER APP KEY\"\n    PUSHER_APP_SECRET=\"YOUR PUSHER APP SECRET\"\n    PUSHER_APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n```\n\nNext, import the packages we need:\n\n```javascript\n    // server/index.js\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    \n    const Pusher = require('pusher');\n```\n\nInitialize the Node.js client for Channels:\n\n```javascript\n    var pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n    });\n```\n\nImport the [foods data](https://github.com/anchetaWern/React-Native-Food-Delivery/blob/master/server/data/foods.js). This contains all of the data about a specific food that we’re going to need:\n\n```javascript\n    const {foods} = require('./data/foods.js');\n```\n\nNext, initialize the Express server with the request body parsers and CORS plugin. Also, set the static files location to the `images` folder. This allows us to serve the images from the `/images` path:\n\n```javascript\n    const app = express();\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use(bodyParser.json());\n    app.use(cors());\n    app.use('/images', express.static('images'));\n```\n\nNext, add the route for authenticating the users. The Channels client on the app makes a request to this route when it initializes the connection. This allows the user to trigger events directly from the client side. Note that this will authenticate the users immediately. This is only to simplify things. On a production app, you have to include your authentication code to check if the user who made the request is really a user of your app:\n\n```javascript\n    app.post('/pusher/auth', function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel); // authenticate the request\n      res.send(auth);\n    });\n```\n\nLastly, expose the server:\n\n```javascript\n    const PORT = 5000;\n    app.listen(PORT, err =\u003e {\n      if (err) {\n        console.error(err);\n      } else {\n        console.log(`Running on ports ${PORT}`);\n      }\n    });\n```\n\n## Running the app\n\nAt this point we’re now ready to run the app. Start by running the server and exposing it via ngrok:\n\n```\n    node server/index.js\n    ~/Downloads/ngrok http 5000\n```\n\nThen update the `.env` file with your HTTPS URL.\n\nFinally, run the app:\n\n```\n    react-native run-android\n```\n\nAs we haven’t created the driver app yet, you’ll only be able to test out the first three screens. The TrackOrder screen can only be tested once we create the driver app on the second part of this series.\n\n\n## Conclusion\n\nThat’s it for the first part of this series. In this part, you learned how to create a very simple food ordering app using React Native. Specifically, you learned how to use various packages for easily implementing such app. We used React Native Maps to indicate the user’s, restaurant’s, and driver’s location on the map. Then we used React Native Maps Directions to indicate the path between those points.\n\nStay tuned for part two where we will add the code for the driver app and feature for contacting the driver.\n\nYou can find the app’s code on this [GitHub repo](https://github.com/anchetaWern/React-Native-Food-Delivery).","metaTitle":"Create a food ordering app in React Native - Part 1","metaDescription":"Food ordering apps such as Uber Eats and FoodPanda are a popular way to order from your favorite local restaurant. In this tutorial series, create both the food ordering app and the driving app. In part 1, create a simplified food ordering app using React Native."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2HS3BwSUHK0s0eHLxRZjDa","type":"Entry","createdAt":"2019-12-10T14:18:07.594Z","updatedAt":"2020-07-24T15:26:49.380Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a food ordering app in React Native - Part 3: Adding push notifications","url":"food-ordering-app-react-native-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/React-Native-Food-Delivery","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"18J5ku8AMG7DNqxzvTy4tW","type":"Entry","createdAt":"2019-06-04T15:37:38.967Z","updatedAt":"2019-06-04T15:37:38.967Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Webhooks","url":"webhooks","type":"use case","featured":false}}],"reviewDate":"2019-10-23","description":"Food ordering apps such as Uber Eats and FoodPanda are a popular way to order from your favorite local restaurant. In this tutorial series, create both the food ordering app and the driving app using React Native. In the third and final part, add push notifications to inform both the customer and the driver of various events throughout the ordering process.","prerequisite":"You will need Node 11.10+, Yarn 1.17+, React Native CLI 2+ and React Native 0.61+ installed on your machine.","content":"This is the final part of a three-part series on creating a food ordering app in React Native. In the [first part](http://pusher.com/tutorials/food-ordering-app-react-native-part-1) we created a very simple food ordering app, and in the [second part](http://pusher.com/tutorials/food-ordering-app-react-native-part-2) we created a driver app with chat functionality. In this part, we’re going to add push notifications to inform both the customer and the driver of various events throughout the ordering process.\n\n\n## Prerequisites\n\nThis part has the same prerequisites as the [first](http://pusher.com/tutorials/food-ordering-app-react-native-part-1) and [second](http://pusher.com/tutorials/food-ordering-app-react-native-part-2) part.\n\nYou’ll need a [Firebase account](https://firebase.google.com/) and a [Beams account](https://pusher.com/beams) for implementing push notifications.\n\n\n## Feature overview\n\nWe will be adding push notifications for the following events:\n\n- Driver accepted the order.\n- Driver picked the order from the restaurant.\n- Driver delivered the order to the customer.\n- Driver sent a message to the customer.\n- Customer confirmed to let the driver handle the order.\n- Customer sent a message to the driver.\n\nHere are a couple of screenshots. The first one is when the driver has accepted an order, and the second one is when the customer confirmed:\n\n![food-ordering-app-react-native-push-img1](//images.ctfassets.net/1es3ne0caaid/7BkJf3rfl5cwRpkQmMz516/8ba9b90133d9876c68abdf8e34e397a0/food-ordering-app-react-native-push-img1.png)\n\n![food-ordering-app-react-native-push-img2](//images.ctfassets.net/1es3ne0caaid/1TnmFc0nTGZHzyovByTDja/6b6e204ef3298967abde4371b16b29b6/food-ordering-app-react-native-push-img2.png)\n\nYou can find the code on this [GitHub repo](https://github.com/anchetaWern/React-Native-Food-Delivery). The completed code for this part is on the `push-notifications` branch.\n\n\n## Setting up a Firebase project\n\nBeams depends on [Firebase Cloud Messaging](https://firebase.google.com/docs/cloud-messaging) (FCM) to send push notifications in Android so we need to set up a Firebase project. \n\nThe official documentation on how to create a Firebase project is available [here](https://firebase.google.com/docs/android/setup#create-firebase-project). You can also follow the [visual walkthrough](https://pusher.com/docs/beams/getting-started/android/configure-fcm#visual-walkthrough) in the Beams documentation site. \n\nCreate a separate Firebase project for each of the apps that we created because each one uses a different package name.\n\nOnce the project is created, click on the **Cloud Messaging** menu on the sidebar and you’ll see this screen. Click on the Android icon to view the form wizard for setting up Firebase on an Android app:\n\n\n![food-ordering-app-react-native-push-img3](//images.ctfassets.net/1es3ne0caaid/3dWzXotEy5P6smSC6nUuaJ/845d29b58c051bc92db073ca1a733c26/food-ordering-app-react-native-push-img3.png)\n\nOn the screen that follows, enter the package name. Note that you have to do this twice (one for each Firebase project). The first one is the driver app (`com.rnfooddeliverydriver`), and the second one is for the ordering app (`com.rnfooddelivery`):\n\n\n![food-ordering-app-react-native-push-img5](//images.ctfassets.net/1es3ne0caaid/4TdX8nrE8cAVcbuCYZniGd/6cb4086a3d44aefae2717f9a10e0f3cf/food-ordering-app-react-native-push-img5.png)\n\nOnce you clicked on the **Register app**, it will ask you to download the config file. Download it and copy it over to the `android/app` directory for the corresponding app.\n\nRemember to repeat the same process for the ordering app.\n\n\n## Setting up Beams\n\nOn your Beams account, you also need to create two app instances. Each corresponds to the Firebase projects you just created.\n\nOn your Beams dashboard, click on the **+ CREATE** button and enter the name of the app:\n\n\n![food-ordering-app-react-native-push-img5](//images.ctfassets.net/1es3ne0caaid/1yaV7KSQQ8iElwJZ13AU3i/b23056c3de02d355aa2bcc843181d20f/food-ordering-app-react-native-push-img5.png)\n\nOnce the instance created, it walks you through the quickstart. Select **ANDROID**:\n\n\n![food-ordering-app-react-native-push-img6](//images.ctfassets.net/1es3ne0caaid/4GqMxv9OMtIdNl2N6cGoJA/92e4d072bf84ab0f96d32847190d728b/food-ordering-app-react-native-push-img6.png)\n\nNext, it will ask you to enter the FCM server key. Documentation on how to get it is available [here](https://pusher.com/docs/beams/getting-started/android/configure-fcm#get-your-fcm-server-key):\n\n\n![food-ordering-app-react-native-push-img7](//images.ctfassets.net/1es3ne0caaid/aCzjrSv3la1LJrqHErudw/998af5b6454b5aec8263577150355368/food-ordering-app-react-native-push-img7.png)\n\nOnce that’s done, it will give you instructions on how to add Beams on your app. Some of these apply to React Native, but I’ll just walk you through how to set it up in the **Setting up the ordering and driver app** section so just skip this one:\n\n\n![food-ordering-app-react-native-push-img8](//images.ctfassets.net/1es3ne0caaid/3DTgcJtCQ9rMCEU1As32u9/07ec26b408ea3830d6628ec65c8165b5/food-ordering-app-react-native-push-img8.png)\n\nRemember to repeat the same process for the ordering app and add the FCM server key from the corresponding Firebase project.\n\n\n## Setting up Chatkit webhooks\n\nNext, we configure Chatkit webhooks. This allows us to get notified when new messages are sent by any of the users of the app. That’s where we’ll add push notification code to notify the receiving user that somebody has sent them a message. This is especially useful in cases where the receiver is not yet in the chat screen when the message is sent.\n\nYou can choose to do this now or later when you run the app. Just know that you can actually execute ngrok at this point and add the target URL using this format: `https://YOUR_NGROK_URL/notify`. Add a webhook secret as well. Just take note of it because we’re going to add it to the `server/.env` file:\n\n\n![food-ordering-app-react-native-push-img9](//images.ctfassets.net/1es3ne0caaid/1P8utSg5bPL8RQ1P4fWeK8/c913e674404b66435b23a5262a735156/food-ordering-app-react-native-push-img9.png)\n\n\n## Setting up the ordering and driver app\n\nThe next step is to install and configure the React Native package for implementing push notifications. There’s no official React Native package for Beams yet so we’re using the [React Native Push Notifications](https://github.com/b8ne/react-native-pusher-push-notifications) package. But because this package is already outdated, we’re using a [fork](https://github.com/ZeptInc/react-native-pusher-push-notifications) instead.\n\nThe following instructions should be applied to both the ordering and driver app.\n\nUpdate your `package.json` file to add the push notifications package:\n\n```json\n    \"dependencies\": {\n      // ...\n      \"react-native-pusher-push-notifications\": \"git+http://git@github.com/ZeptInc/react-native-pusher-push-notifications#v.2.4.0-zept-master\",\n    }\n```\n\nAfter that, install the package:\n\n```\n    yarn install\n```\n\nNext, update the `android/settings.gradle` file, `android/build.gradle`, and `android/app/build.gradle` files to include the necessary configuration:\n\n```javascript\n    // android/settings.gradle\n    rootProject.name = 'RNFoodDelivery'\n    \n    include ':app'\n    \n    // add these:\n    include ':react-native-pusher-push-notifications'\n    project(':react-native-pusher-push-notifications').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-pusher-push-notifications/android')\n\n\n    // android/build.gradle\n    buildscript {\n      ext {\n        // ...\n      }\n      repositories {\n        // ...\n      }\n      dependencies {\n        classpath(\"com.android.tools.build:gradle:3.4.2\")\n        classpath 'com.google.gms:google-services:4.2.0' // add this\n      }\n    }\n    \n    allprojects {\n      repositories {\n        mavenLocal()\n        maven {\n          // ..\n        }\n        maven {\n          // ..\n        }\n    \n        google()\n        jcenter()\n      }\n    }\n\n\n    // android/app/build.gradle\n    dependencies {\n      implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\n      implementation \"com.facebook.react:react-native:+\"  \n      \n      // add these:\n      compile project(':react-native-pusher-push-notifications')\n      implementation 'com.github.ZeptInc:push-notifications-android:1.5.0-alpha'\n    }\n    \n    // ...\n    \n    apply from: file(\"../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle\"); applyNativeModulesAppBuildGradle(project)\n    \n    apply plugin: 'com.google.gms.google-services' // add this\n```\n\nLastly, update your `.env` file for the ordering app to include the Beams instance ID for the ordering app:\n\n```\n    BEAMS_INSTANCE_ID=\"YOUR BEAMS INSTANCE ID FOR THE ORDERING APP\"\n```\n\nDo the same for the driver app:\n\n```\n    BEAMS_INSTANCE_ID=\"YOUR BEAMS INSTANCE ID FOR THE DRIVER APP\"\n```\n\n## Setting up the server\n\nSince the push notifications will be triggered from the server, we need to install the [Beams Server SDK for Node.js](https://github.com/pusher/push-notifications-node). Add the following to your server’s `package.json` file:\n\n```json\n    \"dependencies\": {\n      // ...\n      \"@pusher/push-notifications-server\": \"^1.2.0\",\n    }\n```\n\nAfter that, execute the following:\n\n```\n    yarn install\n```\n\nLastly, update your `server/.env` file with your Chatkit webhook secret and the instance and secret key for both Beams app instances:\n\n```\n    CHATKIT_WEBHOOK_SECRET=\"YOUR CHATKIT WEBHOOK SECRET\"\n    \n    BEAMS_INSTANCE_ID_DRIVER=\"YOUR BEAMS INSTANCE ID FOR THE DRIVER APP\"\n    BEAMS_SECRET_KEY_DRIVER=\"YOUR BEAMS SECRET KEY FOR THE DRIVER APP\"\n    \n    BEAMS_INSTANCE_ID_CUSTOMER=\"YOUR BEAMS INSTANCE ID FOR THE ORDERING APP\"\n    BEAMS_SECRET_KEY_CUSTOMER=\"YOUR BEAMS SECRET KEY FOR THE ORDERING APP\"\n```\n\n## Updating the ordering app\n\nAt this point, we’re now ready to start updating the apps. First we’ll start with the ordering app.\n\n### GlobalContext\nOpen the `GlobalContext.js` file and add a `user_type`. This allows us to specify which type of user triggered the push notification. Which in turn allows us to determine which Beams app instance to use for sending the push notification. If it’s the customer who triggered it then it means the receiver is the driver so we use the Beams app instance for the driver app. Otherwise, we use the Beams app instance for the ordering app. You’ll see this in action in the server code later on: \n\n```javascript\n    export class AppContextProvider extends React.Component {\n      state = {\n        cart_items: [],\n        user_id: 'wernancheta',\n        user_name: 'Wern Ancheta',\n        user_type: 'customer', // add this\n        room_id: '',\n        room_name: '',\n      };\n      // ...\n    }\n```\n\n### OrderSummary\nNext we update the Chatkit login code so it uses the `user_type` that we just added:\n\n```javascript\n    // src/screens/OrderSummary.js\n    placeOrder = async () =\u003e {\n      // ...\n    \n      const {\n        address: restaurant_address,\n        location: restaurant_location,\n      } = this.context.cart_items[0].restaurant;\n    \n      try {\n        await axios.post(`${BASE_URL}/login`, {\n          user_id: this.context.user_id,\n          user_name: this.context.user_name,\n          user_type: this.context.user_type, // add this\n        });\n      } catch (err) {\n        // ...\n      }\n    \n      // ...\n    }\n```\n\n### TrackOrder screen\nThe TrackOrder screen is where we put the code for implementing push notifications. Start by importing the `react-native-pusher-push-notifications` package:\n\n```javascript\n    // src/screens/TrackOrder.js\n    import RNPusherPushNotifications from 'react-native-pusher-push-notifications';\n```\n\nNext, set the Beams app instance and create the function for subscribing to a specific device interest. In this case, we’re using the name `subscribeToRoom()` because we’re using the room ID as the device interest name:\n\n```javascript\n    RNPusherPushNotifications.setInstanceId(Config.BEAMS_INSTANCE_ID);\n    \n    const subscribeToRoom = room_id =\u003e {\n      RNPusherPushNotifications.subscribe(\n        room_id,\n        (statusCode, response) =\u003e {\n          console.error(statusCode, response);\n        },\n        () =\u003e {\n          console.log('Success');\n        },\n      );\n    };\n```\n\nWe’re using the concept of [device interests](https://pusher.com/docs/beams/concepts/device-interests) in order to subscribe users to a specific push notification channel. Later on in the server, we publish to the same device interest so that the devices which are subscribed to it can receive the notification.\n\nNext, in your `componentDidMount()`, add the code for triggering a push notification to be sent to the driver. This is sent when the customer confirms that the driver can proceed with processing the order after the driver has accepted their request. The way this works is that we add a specific route to the server later on to handle the triggering of push notifications. All we have to do from the frontend is supply the `room_id`, `push_type`, and `data` and it will deliver the push notification to the recipient:\n\n```javascript\n    componentDidMount() {\n      // ...\n      this.user_ride_channel.bind('client-driver-response', data =\u003e {\n        const {hasDriver} = this.state;\n        this.user_ride_channel.trigger('client-driver-response', {\n          response: hasDriver ? 'no' : 'yes',\n          room_id: hasDriver ? '0' : this.context.room_id,\n          room_name: hasDriver ? '' : this.context.room_name,\n        });\n        \n        // add this\n        if (!hasDriver) {\n          setTimeout(async () =\u003e {\n            const res = await axios.post(\n              `${BASE_URL}/push/${this.context.room_id}`,\n              {\n                push_type: 'customer_confirmed',\n                data: this.context.user_name,\n              },\n            );\n          }, 5000);\n        }\n    \n      });\n    }\n```\n\nStill inside `componentDidMount()`, right before the function’s closing curly brace, add the code to subscribe to the room and listen for notifications. In this case, we simply alert the user. This is only triggered when the app is in the foreground. If the app is in the background then the default behavior is to add a new item in the notification panel: \n\n```javascript\n    this.user_ride_channel.bind('client-order-update', data =\u003e {\n      this.setState({\n        orderStatusText: orderSteps[data.step],\n      });\n    });\n    \n    // add these:\n    subscribeToRoom(this.context.room_id); // subscribe to device interest\n    \n    RNPusherPushNotifications.on('notification', noty =\u003e { // listen for notifications\n      Alert.alert(noty.title, noty.body);\n    });\n```\n\n## Updating the driver app\n\nWe now proceed to the driver app. What we need to do is pretty much the same thing we did in the ordering app. Only this time, we’re triggering a lot more notifications.\n\n### OrderMap screen\nFirst, update the OrderMap screen:\n\n```javascript\n    // src/screens/OrderMap.js\n    import axios from 'axios';\n    import RNPusherPushNotifications from 'react-native-pusher-push-notifications'; // add this\n    \n    // ..\n    const GOOGLE_API_KEY = Config.GOOGLE_API_KEY;\n    \n    // add these\n    RNPusherPushNotifications.setInstanceId(Config.BEAMS_INSTANCE_ID);\n    \n    const subscribeToRoom = room_id =\u003e {\n      RNPusherPushNotifications.subscribe(\n        room_id,\n        (statusCode, response) =\u003e {\n          console.error(statusCode, response);\n        },\n        () =\u003e {\n          console.log('Success');\n        },\n      );\n    };\n    // next: add triggerNotification()\n```\n\nBecause we now have to trigger multiple notifications, we also need to add a function to encapsulate the functionality so we don’t repeat ourselves. You’ll see how the arguments we’re passing here will be utilized in the server later on. For now, know that the `push_type` is the key that decides which user type the notification will be sent to as well as the title and body of the notification:\n\n```javascript\n    triggerNotification = async (room_id, push_type, data) =\u003e {\n      try {\n        await axios.post(`${BASE_URL}/push/${room_id}`, {\n          push_type,\n          data,\n        });\n      } catch (err) {\n        console.log('error triggering notification: ', err);\n      }\n    }\n```\n\nNext, in the `constructor()`, add the `user_type`:\n\n```javascript\n    constructor(props) {\n      super(props);\n    \n      this.user_id = 'johndoe';\n      this.user_name = 'John Doe';\n      this.user_type = 'driver'; // add this\n    \n      // ...\n    }\n```\n\nUpdate `componentDidMount()` to add the code for listening to notifications. Also, update the Chatkit login code to include the `user_type`:\n\n```javascript\n    componentDidMount() {\n      \n      // ...\n      this.setState({\n        locationPermission: location_permission,\n      });\n      \n      RNPusherPushNotifications.on('notification', noty =\u003e {\n        Alert.alert(noty.title, noty.body);\n      });\n    \n      try {\n        await axios.post(`${BASE_URL}/login`, {\n          user_id: this.user_id,\n          user_name: this.user_name,\n          user_type: this.user_type, // add this\n        });\n      } catch (err) {\n        console.log('error creating user: ', err);\n      }\n    }\n```\n\nWhen the driver accepts an order, we want to notify the customer that somebody has accepted their order. Before triggering the notification though, we subscribe to the room first so that the driver will also receive notifications that are triggered by the customer:\n\n```javascript\n    _acceptOrder = () =\u003e {\n      // ...\n      this.ride_channel.bind('pusher:subscription_succeeded', () =\u003e {\n        // ..\n    \n        this.ride_channel.bind(\n          'client-driver-response',\n          async customer_response =\u003e {\n            if (customer_response.response == 'yes') {\n              // ..\n    \n              this.room_id = room_id; \n              this.room_name = room_name;\n    \n              // add these\n              subscribeToRoom(room_id);\n              await triggerNotification(\n                room_id,\n                'driver_accepted_order',\n                this.username,\n              );\n              \n              // ..\n            }\n          }\n        );\n    \n      });\n    }\n```\n\nWhen an order is picked, trigger a notification:\n\n```javascript\n    _pickedOrder = async () =\u003e {\n      // ...\n      await triggerNotification(\n        this.room_id,\n        'driver_picked_order',\n        this.username,\n      );\n    }\n```\n\nAnd lastly, when an order is delivered:\n\n```javascript\n    _deliveredOrder = async () =\u003e {\n      // ...\n    \n      await triggerNotification(\n        this.room_id,\n        'driver_delivered_order',\n        this.user_name,\n      );\n    }\n```\n\n## Updating the server\n\nThe final step is to update the server code to send out those push notifications. \n\nFirst, include the additional packages that we need:\n\n```javascript\n    // server/index.js\n    const PushNotifications = require('@pusher/push-notifications-server');\n    const crypto = require('crypto');\n```\n\n\u003e `crypto` is a built-in module in Node.js so all we have to do is import it. We’re using it to calculate the signature to verify if the requests are indeed coming from Chatkit’s servers.\n\nNext, add the Chatkit webhook secret and initialize the Beams client for each app:\n\n```javascript\n    const CHATKIT_WEBHOOK_SECRET = process.env.CHATKIT_WEBHOOK_SECRET;\n    \n    // for sending notifications for the driver app\n    const beamsClientDriver = new PushNotifications({\n      instanceId: process.env.BEAMS_INSTANCE_ID_DRIVER,\n      secretKey: process.env.BEAMS_SECRET_KEY_DRIVER,\n    });\n    \n    // for sending notifications for the ordering app\n    const beamsClientCustomer = new PushNotifications({\n      instanceId: process.env.BEAMS_INSTANCE_ID_CUSTOMER,\n      secretKey: process.env.BEAMS_SECRET_KEY_CUSTOMER,\n    });\n```\n\nAfter that, add the `push_types`. These are the notification types that the server will handle. As you can see, it’s just a map of the `title` and `body` to be used for each notification type. The `[data]` is replaced with the `data` supplied for each notification request:\n\n```javascript\n    const push_types = {\n      driver_accepted_order: {\n        title: 'Order accepted',\n        body: '[data] has accepted your order',\n      },\n      driver_picked_order: {\n        title: 'Picked up order',\n        body: '[data] has picked up your order from the restaurant',\n      },\n      driver_delivered_order: {\n        title: 'Order delivered',\n        body: '[data] has delivered your order',\n      },\n      driver_sent_message: {\n        title: 'New message',\n        body: '[data]',\n      },\n    \n      customer_confirmed: {\n        title: 'Customer confirmed',\n        body: '[data] has confirmed',\n      },\n      customer_sent_message: {\n        title: 'New message',\n        body: '[data]',\n      },\n    };\n```\n\nNext, determine which body parser to use depending on the content type. Chatkit webhooks needs to be processed as plain text so we use `bodyParser.text()` if the `content-type` is `application/json`. This is the content type used by Chatkit’s servers. For the rest of the requests, we’re not really specifying the content type so it’s basically `application/text`. In those cases, we use the `bodyParser.json()`:\n\n```javascript\n    // app.use(bodyParser.json()); // remove\n    app.use(\n      bodyParser.text({\n        type: req =\u003e {\n          const contype = req.headers['content-type'];\n          if (contype === 'application/json') {\n            return true;\n          }\n          return false;\n        },\n      }),\n    );\n    \n    app.use(\n      bodyParser.json({\n        type: req =\u003e {\n          const contype = req.headers['content-type'];\n          if (contype !== 'application/json') {\n            return true;\n          }\n          return false;\n        },\n      }),\n    );\n```\n\nNext, add the function for verifying if the requests came from Chatkit:\n\n```javascript\n    const verifyRequest = req =\u003e {\n      const signature = crypto\n        .createHmac('sha1', CHATKIT_WEBHOOK_SECRET)\n        .update(req.body)\n        .digest('hex');\n    \n      return signature === req.get('webhook-signature');\n    };\n```\n\n\u003e If you want to learn more about implementing Chatkit webhooks in a React Native app, check out this tutorial: [Integrate Chatkit Webhooks in a React Native Chat App](https://pusher.com/tutorials/webhooks-react-native-chat).\n\nNext, add a function for getting a Chatkit user. We’re already using the same functionality in the `/login` route. But since we’re also going to need it to get the data of the user who sent a message, we’re adding it as well so we can use it for both instances:\n\n```javascript\n    const getUser = async user_id =\u003e {\n      try {\n        const user = await chatkit.getUser({\n          id: user_id,\n        });\n        return user;\n      } catch (err) {\n        console.log('error getting user: ', err);\n        return false;\n      }\n    };\n```\n\nNext, add the function for sending push notifications. This determines which Beams app instance to use depending on the `user_type`. If the driver is the one who sent it then the recipient is the customer, thus we use the `beamsClientCustomer`. Otherwise, we use the `beamsClientDriver`:\n\n```javascript\n    const publishNotification = async (user_type, order_id, title, body) =\u003e {\n      const beamsClient =\n        user_type == 'driver' ? beamsClientCustomer : beamsClientDriver;\n    \n      try {\n        await beamsClient.publishToInterests([order_id], {\n          fcm: {\n            notification: {\n              title,\n              body,\n            },\n          },\n        });\n      } catch (err) {\n        console.log('error publishing push notification: ', err);\n      }\n    };\n```\n\nNext, add the function for handling Chatkit webhooks. This handles the “message created” [event](https://pusher.com/docs/chatkit/webhooks#messages-created). This is where we use the custom user data `user_type` to determine which push notification to send. The `room_id` is the same as the device interest so we can simply use it as the value for the `order_id` required by the `publishNotification()` function:\n\n```javascript\n    const notifyUser = async ({payload}) =\u003e {\n      try {\n        const msg = payload.messages[0];\n        const sender_id = msg.user_id;\n        const sender = await getUser(sender_id);\n    \n        const message = msg.parts[0].content.substr(0, 37) + '...';\n        const order_id = msg.room_id;\n    \n        const user_type = sender.custom_data.user_type;\n    \n        const push_data = push_types[`${user_type}_sent_message`];\n        const title = push_data.title;\n        const body = push_data.body.replace('[data]', message);\n    \n        await publishNotification(user_type, order_id, title, body);\n      } catch (err) {\n        console.log('notify user err: ', err);\n      }\n    };\n```\n\nBefore we proceed to the routes which triggers the notifications, let’s first update the `/login` route to include the `user_type`:\n\n```javascript\n    app.post('/login', async (req, res) =\u003e {\n      const {user_id, user_name, user_type} = req.body; // add user_type\n      const user = await getUser(user_id);\n    \n      if (!user) {\n        await chatkit.createUser({\n          id: user_id,\n          name: user_name,\n          // add this\n          customData: {\n            user_type,\n          },\n        });\n      }\n    \n      return res.send('ok');\n    });\n```\n\nNext, add the route that allows us to trigger push notifications from the app:\n\n```javascript\n    app.post('/room', async (req, res) =\u003e {\n      // ...\n    });\n    \n    app.post('/push/:order_id', async (req, res) =\u003e {\n      const {data, push_type} = req.body;\n      const {order_id} = req.params;\n    \n      const user_type = push_type.split('_')[0];\n    \n      const push_data = push_types[push_type];\n      const title = push_data.title;\n      const body = push_data.body.replace('[data]', data);\n    \n      await publishNotification(user_type, order_id, title, body);\n    \n      return res.send('ok);\n    });\n```\n\nLastly, add the route which handles the Chatkit webhook for new messages:\n\n```javascript\n    app.post('/notify', (req, res) =\u003e {\n      if (verifyRequest(req)) {\n        const data = JSON.parse(req.body);\n        const type = data.metadata.event_type;\n        if (type == 'v1.messages_created') {\n          notifyUser(data);\n        }\n        return res.sendStatus(200);\n      } else {\n        console.log('Unverified request');\n        return res.sendStatus(401); // unauthorized\n      }\n    });\n```\n\n## Running the app\n\nAt this point, you’re now ready to run the app.\n\nReplace the `NGROK_HTTPS_URL` on the `.env` file on both apps then run the app. You can use the same technique we used on part two to run two apps from the same machine.\n\nDon’t forget to update your Chatkit webhook with the ngrok HTTPS URL and the same webhook secret that you added on your `server/.env` file. Also, clear out all existing Chatkit users because they don’t have the `user_type` custom data yet.\n\n\n## Conclusion and next steps\n\nThat’s it! In this series, we created a food ordering app with React Native, Channels, Chatkit, and Beams. Along the way, you learned how to use various React Native packages for implementing maps, realtime location tracking, chat, and push notifications.\n\nAs for the next steps, here are a few ideas for improving the app further:\n\n- **Add authentication** - currently, the usernames are just hard coded. It would be good to have an authentication in place. You can check out this tutorial as a guide: [Using Auth0 for authenticating users in a React Native chat app](https://pusher.com/tutorials/auth0-react-native-chat).\n- **Add a restaurant app** - you might have noticed that there’s really no way for the restaurant to know that someone has ordered a meal from them. You can either create a separate React Native app or simply create a web interface which gets notified everytime an order is received from the app.\n- **Hande order declines** - we’ve only handled the “happy path” in this tutorial. It would be good to handle instances wherein the driver declines an order.\n- **Notify only nearby drivers** - it would be good for the drivers to have a location database which constantly gets updated so that when an order is made, the app will query from this database only the drivers within a certain radius from the customer.\n- **Improve security** - currently, anyone can just have access to the Channels and push notifications route. It would be good to put those behind an authentication.\n\nYou can find the full source code on this [GitHub repo](https://github.com/anchetaWern/React-Native-Food-Delivery).","metaTitle":"Create a food ordering app in React Native - Part 3","metaDescription":"Food ordering apps such as Uber Eats and FoodPanda are a popular way to order from your favorite local restaurant. In this tutorial series, create both the food ordering app and the driving app in React Native. In the third and final part, add push notifications for both the customer and the driver."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"23VeJDgcKuDMVJ4XmZDBxx","type":"Entry","createdAt":"2019-12-10T14:18:07.649Z","updatedAt":"2020-07-24T15:31:04.644Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a food ordering app in React Native - Part 2: Adding the driver app and chat functionality","url":"food-ordering-app-react-native-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/React-Native-Food-Delivery","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"18J5ku8AMG7DNqxzvTy4tW","type":"Entry","createdAt":"2019-06-04T15:37:38.967Z","updatedAt":"2019-06-04T15:37:38.967Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Webhooks","url":"webhooks","type":"use case","featured":false}}],"reviewDate":"2019-10-23","description":"Food ordering apps such as Uber Eats and FoodPanda are a popular way to order from your favorite local restaurant. In this tutorial series, create both the food ordering app and the driving app using React Native. In part 2, create the driver app and implement a chat functionality between the customer and the driver.","prerequisite":"You will need Node 11.10+, Yarn 1.17+, React Native CLI 2+ and React Native 0.61+ installed on your machine.","content":"This is part two of a three-part series on creating a food delivery app with React Native.\n\nIn this part, we’ll be going through the code for the driver app. After that, we’ll be adding the chat functionality so that the customer and the driver can contact each other.\n\n\n## Prerequisites\n\nThis part has the same prerequisites as the [first part](http://pusher.com/tutorials/food-ordering-app-react-native-part-1).\n\nYou’ll need a [Chatkit account](https://pusher.com/chatkit) for implementing the chat functionality.\n\n\n## Feature overview\n\nWe will be creating the driver app in this part of the series. Here’s what the driver will see by default when they open the app. Basically, it’s just showing a map of where the driver currently is. In the header, there’s a button that the driver can click to update the status of the order. By default, there will be no button in there. But once the driver has accepted an order, it will say **PICKED ORDER**. The driver can click on this button to send an update to the customer that they have picked their order from the restaurant. It will then turn to **DELIVERED ORDER** and the driver can click on it once they have delivered the order to the customer:\n\n\n![food-ordering-app-react-native-driver-img1](//images.ctfassets.net/1es3ne0caaid/5mEMuRafvYYoXdn7FMTTWG/33896533b56aa0d777d0da3609731c8e/food-ordering-app-react-native-driver-img1.png)\n\nWhen a driver receives an order, a modal which displays the pick up (restaurant’s location) and drop off (customer’s location) will show up. From here, the driver can either accept or decline:\n\n![food-ordering-app-react-native-driver-img2](//images.ctfassets.net/1es3ne0caaid/683L44idNiZNcQZdhmYye4/7655110f507fce853db7eb29f6b52ffe/food-ordering-app-react-native-driver-img2.png)\n\nOnce the driver agrees, the restaurant’s and customer’s location is plotted on the map along with the route between the two. The map is updated in realtime as the driver drives to their destination:\n\n![food-ordering-app-react-native-driver-img3](//images.ctfassets.net/1es3ne0caaid/j0AZcb6jB3kAnajEtdjgE/642645eb246a44b8f3285656bcb677fa/food-ordering-app-react-native-driver-img3.png)\n\nOnce the driver has picked the order, a new button will be overlayed on top of the map. This will allow the driver to contact the customer. This will be useful in cases wherein the address is in a subdivision or a building:\n\n\n![food-ordering-app-react-native-driver-img4](//images.ctfassets.net/1es3ne0caaid/30Y7fZ2oVgdKzTYctrNs5s/ed9a3f324854c320b41b2e64b9bf003e/food-ordering-app-react-native-driver-img4.png)\n\nHere’s what the chat interface looks like:\n\n\n![food-ordering-app-react-native-driver-img5](//images.ctfassets.net/1es3ne0caaid/3hfMZMl1gMYGsG8nfvVVAz/3de9a1d645ae1e38ca33e585c699c07e/food-ordering-app-react-native-driver-img5.png)\n\nYou can find the code on this [GitHub repo](https://github.com/anchetaWern/React-Native-Food-Delivery). The completed code for this part of the series is on the `driver-app` branch.\n\n\n## Setting up Chatkit\n\nOn your Chatkit dashboard, click on the + **CREATE** button to create a new Chatkit app instance:\n\n\n![food-ordering-app-react-native-driver-img6](//images.ctfassets.net/1es3ne0caaid/3Uk7DzUbh3hDnoZ1YYz6an/a211020ebd1518c7648336abc41c06df/food-ordering-app-react-native-driver-img6.png)\n\nUnder the **Credentials** tab, enable the test token provider. This allows us to use Pusher’s servers for authenticating users of our app. Note that this is only for testing purposes. If you’re going to use this for production, be sure to check out the [Authentication docs](https://pusher.com/docs/chatkit/authentication) so you can create your own authentication server.\n\n\n## Bootstrapping the driver app\n\nIf you’ve followed [part one](http://pusher.com/tutorials/food-ordering-app-react-native-part-1) of this series, there’s really no starter code for the driver app so you’ll have to create everything from scratch. Start by generating a new React Native project:\n\n```\n    react-native init RNFoodDeliveryDriver\n```\n\nOnce that’s done, open the `package.json` file and replace the `dependencies` with the following:\n\n```json\n    \"dependencies\": {\n      \"@pusher/chatkit-client\": \"^1.13.1\",\n      \"@react-native-community/netinfo\": \"^4.4.0\",\n      \"axios\": \"^0.19.0\",\n      \"pusher-js\": \"^5.0.2\",\n      \"react\": \"16.9.0\",\n      \"react-native\": \"0.61.2\",\n      \"react-native-config\": \"^0.11.7\",\n      \"react-native-geocoding\": \"^0.4.0\",\n      \"react-native-geolocation-service\": \"^3.1.0\",\n      \"react-native-gesture-handler\": \"^1.4.1\",\n      \"react-native-gifted-chat\": \"^0.11.0\",\n      \"react-native-maps\": \"0.25.0\",\n      \"react-native-maps-directions\": \"^1.7.3\",\n      \"react-native-modal\": \"^11.4.0\",\n      \"react-native-permissions\": \"^2.0.2\",\n      \"react-native-reanimated\": \"^1.3.0\",\n      \"react-native-screens\": \"^1.0.0-alpha.23\",\n      \"react-navigation\": \"^4.0.10\",\n      \"react-navigation-stack\": \"^1.9.4\"\n    },\n```\n\nInstall the dependencies:\n\n```\n    yarn install\n```\n\nThe driver app depends on the same packages as the ordering app so you can go ahead and re-visit the **Bootstrapping the app** section of part one for the instructions on how to configure the packages.\n\nNext, copy over the `src/helpers/location.js` file [from the ordering app](https://github.com/anchetaWern/React-Native-Food-Delivery/tree/food-ordering/src/helpers) to the root directory of the driver app as we’re going to use the same helper function.\n\nLastly, create a `.env` file at the root of the project directory and add your Channels, Chatkit, and Google API credentials. We’ll add the ngrok URL later:\n\n```\n    CHANNELS_APP_KEY=\"YOUR CHANNELS APP KEY\"\n    CHANNELS_APP_CLUSTER=\"YOUR CHANNELS APP CLUSTER\"\n    \n    CHATKIT_INSTANCE_LOCATOR_ID=\"YOUR CHATKIT INSTANCE LOCATOR ID\"\n    CHATKIT_SECRET_KEY=\"YOUR CHATKIT SECRET KEY\"\n    CHATKIT_TOKEN_PROVIDER_ENDPOINT=\"YOUR CHATKIT TOKEN PROVIDER ENDPOINT\"\n    \n    GOOGLE_API_KEY=\"YOUR GOOGLE API KEY\"\n    \n    NGROK_HTTPS_URL=\"YOUR NGROK HTTPS URL\"\n```\n\n## Setting up the ordering app\n\nIf you’ve followed part one of this series, the only thing you need to do is include the additional packages that we need:\n\n```javascript\n    \"dependencies\": {\n      // ...\n      \"@pusher/chatkit-client\": \"^1.13.1\",\n      \"react-native-gifted-chat\": \"^0.11.0\",\n      \"string-random\": \"^0.1.3\"\n    }\n```\n\nHere’s a brief overview of each:\n\n- **@pusher/chatkit-client** - the client-side library of Chatkit. We use this for easily implementing chat functionality.\n- **react-native-gifted-chat** - used for easily building chat UI.\n- **string-random** - used for generating random room IDs for chat rooms.\n\nInstall them once added:\n\n```\n    yarn install\n```\n\n## Setting up the server\n\nTo set up the server, all you need is install the Chatkit server SDK for Node.js:\n\n```\n    yarn add @pusher/chatkit-server\n```\n\n## Creating the driver app\n\nNow we’re ready to build the driver app. Start by updating the `App.js` file with the following:\n\n```javascript\n    import React, {Fragment} from 'react';\n    import {SafeAreaView, StatusBar, View, StyleSheet} from 'react-native';\n    \n    import Root from './Root';\n    \n    const App = () =\u003e {\n      return (\n        \u003cFragment\u003e\n          \u003cStatusBar barStyle=\"light-content\" /\u003e\n          \u003cSafeAreaView style={styles.container}\u003e\n            \u003cRoot /\u003e\n          \u003c/SafeAreaView\u003e\n        \u003c/Fragment\u003e\n      );\n    };\n    \n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n      },\n    });\n    \n    export default App;\n```\n\nThen create a `Root.js` file at the root of the project directory. This is where we use React Navigation to build a stack navigator (navigates by pushing and popping screens from a stack):\n\n```javascript\n    import React, {Component} from 'react';\n    import {YellowBox} from 'react-native';\n    \n    import {createAppContainer} from 'react-navigation';\n    import {createStackNavigator} from 'react-navigation-stack';\n    \n    import OrderMap from './src/screens/OrderMap';\n    \n    YellowBox.ignoreWarnings(['Setting a timer']);\n    \n    const RootStack = createStackNavigator(\n      {\n        OrderMap,\n      },\n      {\n        initialRouteName: 'OrderMap',\n      },\n    );\n    \n    const AppContainer = createAppContainer(RootStack);\n    \n    class Router extends Component {\n      render() {\n        return \u003cAppContainer /\u003e;\n      }\n    }\n    \n    export default Router;\n```\n\nNext, create the `src/screens/OrderMap.js` file. This will serve as the main screen for the driver. As you’ve seen in the feature overview earlier, this is where the driver can wait for orders and either accept or decline them. Start by importing the packages we need:\n\n```javascript\n    import React, {Component} from 'react';\n    import {\n      View,\n      Text,\n      Button,\n      TouchableOpacity,\n      Alert,\n      StyleSheet,\n    } from 'react-native';\n    \n    import MapView from 'react-native-maps';\n    import Pusher from 'pusher-js/react-native';\n    \n    import {check, request, PERMISSIONS, RESULTS} from 'react-native-permissions';\n    \n    import Geolocation from 'react-native-geolocation-service';\n    import Modal from 'react-native-modal';\n    import Config from 'react-native-config';\n    \n    import MapViewDirections from 'react-native-maps-directions';\n    import axios from 'axios';\n    \n    import {regionFrom} from '../helpers/location';\n    \n    const CHANNELS_APP_KEY = Config.CHANNELS_APP_KEY;\n    const CHANNELS_APP_CLUSTER = Config.CHANNELS_APP_CLUSTER;\n    const BASE_URL = Config.NGROK_HTTPS_URL; \n    \n    const GOOGLE_API_KEY = Config.GOOGLE_API_KEY;\n```\n\nNext, add the navigation header. This is where we optionally render the main action button for the driver. The action it performs depends on which step of the order process they currently are. So we use a navigation param to store the `title` and the `onPress` action: \n\n```javascript\n    class OrderMap extends Component {\n      static navigationOptions = ({navigation}) =\u003e {\n        const showHeaderButton = navigation.getParam('showHeaderButton');\n        return {\n          title: 'Order Map',\n          headerRight: showHeaderButton ? (\n            \u003cView style={styles.navHeaderRight}\u003e\n              \u003cButton\n                onPress={navigation.getParam('headerButtonAction')}\n                title={navigation.getParam('headerButtonLabel')}\n                color=\"#e19400\"\n              /\u003e\n            \u003c/View\u003e\n          ) : null,\n        };\n      };\n    \n      // next: initialize state\n    }\n```\n\nNext, initialize the state:\n\n```javascript\n    state = {\n      locationPermission: 'undetermined',\n      isOrderDetailsModalVisible: false,\n      customer: null, // customer info\n      currentLocation: null, // driver's current location\n      hasOrder: false, // whether the driver is currently handling an order or not\n      restaurantAddress: '',\n      customerAddress: '',\n    };\n    // next: add constructor()\n```\n\nInside the constructor, initialize the communication channels. This uses pretty much the same channels as the ordering app so I’ll no longer elaborate on it:\n\n```javascript\n    constructor(props) {\n      super(props);\n      this.available_drivers_channel = null; // this is where customer will send a request to any available driver\n    \n      this.ride_channel = null; // the channel used for communicating the current location\n      // for a specific order. Channel name is the customer's username\n    \n      this.pusher = null; // the pusher client\n    }\n```\n\nInside `componentDidMount()`, we set the default navigation params for the main action button. By default, the action is to set the order as “picked”. Note that the button wouldn’t be visible until the driver accepts an order:\n\n```javascript\n    async componentDidMount() {\n      this.props.navigation.setParams({\n        headerButtonLabel: 'Picked Order',\n        headerButtonAction: this._pickedOrder,\n      });\n    \n      // next: subscribe to channels\n    }\n```\n\nNext, subscribe to the same channel as the one we subscribed to earlier in part one with the ordering app. This time, we’re implementing the receiving end of the order request. When the driver receives an order request, we update the state with the order details and show the order details modal:\n\n```javascript\n    this.pusher = new Pusher(CHANNELS_APP_KEY, {\n      authEndpoint: `${BASE_URL}/pusher/auth`,\n      cluster: CHANNELS_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    this.available_drivers_channel = this.pusher.subscribe(\n      'private-available-drivers',\n    ); // subscribe to \"available-drivers\" channel\n    \n    this.available_drivers_channel.bind('pusher:subscription_succeeded', () =\u003e {\n      this.available_drivers_channel.bind(\n        'client-driver-request',\n        order_data =\u003e {\n          if (!this.state.hasOrder) {\n            // if the driver has currently no order\n            this.setState({\n              isOrderDetailsModalVisible: true,\n              customer: order_data.customer,\n              restaurantLocation: {\n                latitude: order_data.restaurant_location[0],\n                longitude: order_data.restaurant_location[1],\n              },\n              customerLocation: order_data.customer_location,\n    \n              restaurantAddress: order_data.restaurant_address,\n              customerAddress: order_data.customer_address,\n            });\n          }\n        },\n      );\n    });\n    \n    // next: add code for getting driver's current location\n```\n\nNext, we request for the location permission and get the current location. We use it for setting the initial location to be displayed on the map. After that, we start watching for location changes and trigger the event for updating the location on the customer’s side when an order is already accepted by the driver:\n\n```javascript\n    let location_permission = await check(\n      PERMISSIONS.ANDROID.ACCESS_FINE_LOCATION,\n    );\n    \n    if (location_permission === 'denied') {\n      location_permission = await request(\n        PERMISSIONS.ANDROID.ACCESS_FINE_LOCATION,\n      );\n    }\n    \n    if (location_permission === 'granted') {\n      Geolocation.getCurrentPosition(\n        position =\u003e {\n          const {latitude, longitude, accuracy} = position.coords;\n          const initialRegion = regionFrom(latitude, longitude, accuracy);\n    \n          this.setState({\n            initialRegion,\n          });\n        },\n        error =\u003e {\n          console.log(error.code, error.message);\n        },\n        {enableHighAccuracy: true, timeout: 15000, maximumAge: 10000},\n      );\n    \n      this.watch_location_id = Geolocation.watchPosition(\n        position =\u003e {\n          this.setState({\n            currentLocation: position.coords,\n          });\n    \n          if (this.state.hasOrder) {\n            this.ride_channel.trigger('client-driver-location', {\n              latitude: position.coords.latitude,\n              longitude: position.coords.longitude,\n              accuracy: position.coords.accuracy,\n            });\n          }\n        },\n        error =\u003e {\n          console.log(error.code, error.message);\n        },\n        {enableHighAccuracy: true},\n      );\n    }\n```\n\nHere’s the `render()` method. This has pretty much the same code as the TrackOrder screen screen in the ordering app. The only difference is the order details modal. We also have the button for contacting the customer which is overlayed on top of the map:\n\n```javascript\n    render() {\n      const {\n        isOrderDetailsModalVisible,\n        restaurantAddress,\n        customerAddress,\n    \n        currentLocation, // driver's current location\n        restaurantLocation,\n        customerLocation,\n        initialRegion,\n      } = this.state;\n    \n      return (\n        \u003cView style={styles.wrapper}\u003e\n          \u003cMapView initialRegion={initialRegion} style={styles.map}\u003e\n            {currentLocation \u0026\u0026 (\n              \u003cMapView.Marker\n                coordinate={{\n                  latitude: currentLocation.latitude,\n                  longitude: currentLocation.longitude,\n                }}\n                title={\"You're here\"}\n              /\u003e\n            )}\n    \n            {currentLocation \u0026\u0026 restaurantLocation \u0026\u0026 (\n              \u003cMapViewDirections\n                origin={currentLocation}\n                destination={restaurantLocation}\n                apikey={GOOGLE_API_KEY}\n                strokeWidth={3}\n                strokeColor=\"hotpink\"\n              /\u003e\n            )}\n    \n            {restaurantLocation \u0026\u0026 customerLocation \u0026\u0026 (\n              \u003cMapViewDirections\n                origin={restaurantLocation}\n                destination={customerLocation}\n                apikey={GOOGLE_API_KEY}\n                strokeWidth={3}\n                strokeColor=\"#1b77fb\"\n              /\u003e\n            )}\n    \n            {restaurantLocation \u0026\u0026 (\n              \u003cMapView.Marker\n                coordinate={{\n                  latitude: restaurantLocation.latitude,\n                  longitude: restaurantLocation.longitude,\n                }}\n                title={'Restaurant is here'}\n                pinColor={'#4CDB00'}\n              /\u003e\n            )}\n    \n            {customerLocation \u0026\u0026 (\n              \u003cMapView.Marker\n                coordinate={{\n                  latitude: customerLocation.latitude,\n                  longitude: customerLocation.longitude,\n                }}\n                title={'Your customer is here'}\n                pinColor={'#6f42c1'}\n              /\u003e\n            )}\n          \u003c/MapView\u003e\n    \n          \u003cView style={styles.floatingButtonContainer}\u003e\n            \u003cButton\n              onPress={this._contactCustomer}\n              title={'Contact customer'}\n              color=\"#c53c3c\"\n            /\u003e\n          \u003c/View\u003e\n    \n          \u003cModal isVisible={isOrderDetailsModalVisible}\u003e\n            {restaurantAddress \u0026\u0026 (\n              \u003cView style={styles.modal}\u003e\n                \u003cTouchableOpacity onPress={this._hideOrderDetailsModal}\u003e\n                  \u003cText style={styles.close}\u003eClose\u003c/Text\u003e\n                \u003c/TouchableOpacity\u003e\n                \u003cView style={styles.modalBody}\u003e\n                  \u003cView style={styles.addressContainer}\u003e\n                    \u003cText style={styles.labelText}\u003ePick up\u003c/Text\u003e\n                    \u003cText style={styles.valueText}\u003e\n                      {restaurantAddress.replace(',', '\\n')}\n                    \u003c/Text\u003e\n                  \u003c/View\u003e\n    \n                  \u003cView style={styles.addressContainer}\u003e\n                    \u003cText style={styles.labelText}\u003eDrop off\u003c/Text\u003e\n                    \u003cText style={styles.valueText}\u003e\n                      {customerAddress.replace(',', '\\n')}\n                    \u003c/Text\u003e\n                  \u003c/View\u003e\n    \n                  \u003cView style={styles.buttonContainer}\u003e\n                    \u003cButton\n                      onPress={this._acceptOrder}\n                      title={'Accept order'}\n                      color=\"#28a745\"\n                    /\u003e\n                  \u003c/View\u003e\n    \n                  \u003cView style={styles.buttonContainer}\u003e\n                    \u003cButton\n                      onPress={this._declineOrder}\n                      title={'Decline order'}\n                      color=\"#c53c3c\"\n                    /\u003e\n                  \u003c/View\u003e\n                \u003c/View\u003e\n              \u003c/View\u003e\n            )}\n          \u003c/Modal\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nNext, add the code for accepting an order. When this happens, we subscribe to the customer’s channel then trigger an event that tells them they’re available. This is the part where the customer then triggers the `client-driver-response` on their side to confirm that they still haven’t found another driver. When this happens, the driver triggers the `client-found-driver` event to the customer to inform them that they accepted their request. We also trigger a `client-order-update` event to update the order status:\n\n```javascript\n    _acceptOrder = () =\u003e {\n      const {customer, currentLocation} = this.state;\n    \n      this.setState({\n        isOrderDetailsModalVisible: false,\n      });\n    \n      this.ride_channel = this.pusher.subscribe(\n        'private-ride-' + customer.username,\n      );\n    \n      this.ride_channel.bind('pusher:subscription_succeeded', () =\u003e {\n        this.ride_channel.trigger('client-driver-response', {\n          response: 'yes', // yes, I'm available\n        });\n    \n        // listen for the acknowledgement from the customer\n        this.ride_channel.bind('client-driver-response', customer_response =\u003e {\n          \n          if (customer_response.response == 'yes') {\n            this.setState({\n              hasOrder: true,\n            });\n    \n            this.props.navigation.setParams({\n              showHeaderButton: true, // show the main action button\n            });\n    \n            this.ride_channel.trigger('client-found-driver', {\n              driver: {\n                name: this.user_name,\n              },\n              location: {\n                latitude: currentLocation.latitude,\n                longitude: currentLocation.longitude,\n                accuracy: currentLocation.accuracy,\n              },\n            });\n    \n            setTimeout(() =\u003e {\n              // update order status\n              this.ride_channel.trigger('client-order-update', {\n                step: 1,\n              });\n            }, 2000);\n          } else {\n            Alert.alert(\n              'Order no longer available',\n              'Someone else already took the order. Or the customer cancelled.',\n              [\n                {\n                  text: 'Ok',\n                },\n              ],\n              {cancelable: false},\n            );\n          }\n        });\n      });\n    };\n```\n\nHere’s the method for handling the `onPress` event on the close button of the order details modal. This is equivalent to declining the order, but I’ll leave that to you to implement. It will have the same code as the `_declineOrder()` method:\n\n```javascript\n    _hideOrderDetailsModal = () =\u003e {\n      this.setState({\n        isOrderDetailsModalVisible: false,\n      });\n      // homework: add code for declining order\n    };\n    \n    _declineOrder = () =\u003e {\n      // homework: add code for declining order\n    };\n```\n\nHere’s the first action for the main action button. This will update the customer that the driver has picked their order from the restaurant. This will also change the action of the main action button to that of setting the order as delivered:\n\n```javascript\n    _pickedOrder = async () =\u003e {\n      this.props.navigation.setParams({\n        headerButtonLabel: 'Delivered Order',\n        headerButtonAction: this._deliveredOrder,\n      });\n    \n      this.ride_channel.trigger('client-order-update', {\n        step: 2,\n      });\n    };\n```\n\nHere’s the `_deliveredOrder()` method. This updates the customer that their order has been delivered at their doorstep. Having completed the delivery means that the order has been completely processed so we reset the UI as well:\n\n```javascript\n    _deliveredOrder = () =\u003e {\n      this.ride_channel.unbind('client-driver-response'); // unbind from passenger event\n      this.pusher.unsubscribe('private-ride-' + this.state.customer.username); // unsubscribe from passenger channel\n    \n      this.setState({\n        hasOrder: false,\n        customer: null,\n        restaurantLocation: null,\n        customerLocation: null,\n        restaurantAddress: null,\n        customerAddress: null,\n      });\n    \n      this.props.navigation.setParams({\n        headerButtonLabel: 'Picked Order',\n        headerButtonAction: this._pickedOrder,\n      });\n    \n      this.ride_channel.trigger('client-order-update', {\n        step: 3,\n      });\n    };\n```\n\nBefore the component is unmounted, we clean up after ourselves by stopping the app from watching the driver’s location:\n\n```javascript\n    componentWillUnmount() {\n      Geolocation.clearWatch(this.watch_location_id);\n    }\n```\n\nLastly, add the styles and export the component:\n\n```javascript\n    class OrderMap extends Component {\n      // ..\n    }\n    \n    const styles = StyleSheet.create({\n      navHeaderRight: {\n        marginRight: 10,\n      },\n      wrapper: {\n        flex: 1,\n      },\n      map: {\n        ...StyleSheet.absoluteFillObject,\n      },\n      floatingButtonContainer: {\n        position: 'absolute',\n        bottom: '2%',\n        left: '2%',\n        alignSelf: 'flex-end',\n      },\n      modal: {\n        flex: 1,\n        backgroundColor: '#FFF',\n        padding: 20,\n      },\n      close: {\n        alignSelf: 'flex-end',\n        marginBottom: 10,\n        color: '#0366d6',\n      },\n      modalBody: {\n        marginTop: 20,\n      },\n      addressContainer: {\n        marginBottom: 20,\n      },\n      labelText: {\n        fontSize: 18,\n        fontWeight: 'bold',\n      },\n      valueText: {\n        fontSize: 16,\n        color: '#333',\n      },\n      buttonContainer: {\n        marginBottom: 10,\n      },\n    });\n    \n    export default OrderMap;\n```\n\n## Adding the chat functionality\n\nNow that we’ve created the driver app, it’s time to implement the chat functionality on both apps. We’ll first implement the chat for the driver app.\n\n### Driver app: OrderMap screen\nFirst, open the `src/screens/OrderMap.js` file and import `axios`:\n\n```javascript\n    import MapViewDirections from 'react-native-maps-directions';\n    import axios from 'axios'; // add this\n```\n\nThen in the constructor, add the `user_id`. This will serve as the unique ID for the user in Chatkit:\n\n```javascript\n    constructor(props) {\n      // ..\n      this.pusher = null; \n      \n      // add these:\n      this.user_name = 'John Doe';\n      this.user_id = 'johndoe'; // add this\n    }\n```\n\nNext, update `componentDidMount()` to make a request to the server to log in the user in Chatkit. Note that this doesn’t actually log in the user. It’s purpose is to create a corresponding Chatkit user for the driver if it doesn’t already exists. You’ll see this in the server code later on:\n\n```javascript\n    async componentDidMount() {\n      // ...\n      if (location_permission === 'granted') {\n        // ...\n      }\n      \n      // add these\n      try {\n        await axios.post(`${BASE_URL}/login`, {\n          user_id: this.user_id,\n          user_name: this.user_name,\n        });\n      } catch (err) {\n        console.log('error creating user: ', err);\n      }\n    }\n```\n\nNext, update the code for accepting orders so that it extracts the `room_id` and `room_name` for the chat room. We will add this on the code for the ordering app later on:\n\n```javascript\n    _acceptOrder = () =\u003e {\n      // ...\n      this.props.navigation.setParams({\n        showHeaderButton: true,\n      });\n      \n      this.ride_channel.bind('pusher:subscription_succeeded', () =\u003e {\n        // ..\n    \n        this.ride_channel.bind('client-driver-response', customer_response =\u003e {\n          if (customer_response.response == 'yes') {\n            // ..\n            \n            // add these:\n            const {room_id, room_name} = customer_response;\n            \n            this.room_id = room_id; \n            this.room_name = room_name;\n            // end add\n    \n            this.ride_channel.trigger('client-found-driver', { \n              // ...\n            });\n            \n            // ...\n          } else {\n            // ...\n          }\n        }\n      }\n      \n      // ..\n    \n    }\n```\n\nNext update the code for setting the order as “picked” so that it makes a request to let the driver join the chat room. We’ll add the code for this later on once we get to the server part:\n\n```javascript\n    _pickedOrder = () =\u003e {\n      // ...\n    \n      this.ride_channel.trigger('client-order-update', {\n        step: 2,\n      });\n      \n      // add these:\n      try {\n        await axios.post(`${BASE_URL}/room`, {\n          room_id: this.room_id,\n          room_name: this.room_name,\n          user_id: this.user_id,\n        });\n      } catch (room_err) {\n        console.log('room error: ', room_err);\n      }\n    }\n```\n\nWhen the contact customer button is clicked, we navigate to the `ContactCustomer` screen. We pass along the `user_id` and `room_id` as navigation params because we’ll need it to subscribe to the chat room:\n\n```javascript\n    _contactCustomer = () =\u003e {\n      this.props.navigation.navigate('ContactCustomer', {\n        user_id: this.user_id,\n        room_id: this.room_id,\n      });\n    };\n```\n\n### Driver app: ContactCustomer screen\nNow we proceed to implementing the actual chat functionality. Create a `src/screens/ContactCustomer.js` file and add the following. We’re using Chatkit and Gifted Chat to easily implement the chat functionality:\n\n```javascript\n    import React, {Component} from 'react';\n    import {View, StyleSheet} from 'react-native';\n    \n    import {GiftedChat} from 'react-native-gifted-chat';\n    import {ChatManager, TokenProvider} from '@pusher/chatkit-client';\n    \n    import Config from 'react-native-config';\n    \n    const CHATKIT_INSTANCE_LOCATOR_ID = Config.CHATKIT_INSTANCE_LOCATOR_ID;\n    const CHATKIT_SECRET_KEY = Config.CHATKIT_SECRET_KEY;\n    const CHATKIT_TOKEN_PROVIDER_ENDPOINT = Config.CHATKIT_TOKEN_PROVIDER_ENDPOINT;\n```\n\nNext, create the component class. Initialize the `messages` state and extract the navigation params that were passed from the `OrderMap` screen earlier:\n\n```javascript\n    class ContactCustomer extends Component {\n      static navigationOptions = ({navigation}) =\u003e {\n        return {\n          title: 'Contact Customer',\n        };\n      };\n    \n      state = {\n        messages: [], // array of messages that are sent in the room\n      };\n    \n      constructor(props) {\n        super(props);\n        this.user_id = this.props.navigation.getParam('user_id');\n        this.room_id = this.props.navigation.getParam('room_id');\n      }\n    \n      // next: add componentDidMount()\n    }\n```\n\nNext, connect to Chatkit and subscribe to the room that was specifically created for this order. This allows us to attach to the `onMessage` [hook](https://pusher.com/docs/chatkit/reference/javascript#subscriptions) which gets called everytime a new message is sent in the room (including the one’s sent by the current user):\n\n```javascript\n    async componentDidMount() {\n      try {\n        const chatManager = new ChatManager({\n          instanceLocator: CHATKIT_INSTANCE_LOCATOR_ID,\n          userId: this.user_id,\n          tokenProvider: new TokenProvider({\n            url: CHATKIT_TOKEN_PROVIDER_ENDPOINT,\n          }),\n        });\n    \n        let currentUser = await chatManager.connect();\n        this.currentUser = currentUser;\n    \n        await this.currentUser.subscribeToRoomMultipart({\n          roomId: this.room_id,\n          hooks: {\n            onMessage: this._onMessage,\n          },\n          messageLimit: 30,\n        });\n      } catch (err) {\n        console.log('chatkit error: ', err);\n      }\n    }\n```\n\nHere’s the `render()` method. This uses Gifted Chat to render a chat UI. All it requires us to supply is the array of `messages`, the function to execute when a message is sent, and the user ID of the current user. This is what Gifted Chat uses to determine which side of the chat UI a specific message will be rendered. If the message contains the same user ID specified here, then it will be rendered on the right side to indicate that it’s the current user:\n\n```javascript\n    render() {\n      const {messages} = this.state;\n      return (\n        \u003cView style={styles.wrapper}\u003e\n          \u003cGiftedChat\n            messages={messages}\n            onSend={messages =\u003e this._onSend(messages)}\n            showUserAvatar={true}\n            user={{\n              _id: this.user_id,\n            }}\n          /\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nHere’s the `onSend()` method. This gets executed when the user clicks on the **send** button in the chat UI. This uses Chatkit’s `sendSimpleMessage()` [method](https://pusher.com/docs/chatkit/quick_start/javascript#send-your-own-message) to send a simple text message. You can also send multipart messages if you want to attach photos or other media to the message:\n\n```javascript\n    _onSend = async ([message]) =\u003e {\n      try {\n        await this.currentUser.sendSimpleMessage({\n          roomId: this.room_id,\n          text: message.text,\n        });\n      } catch (send_msg_err) {\n        console.log('error sending message: ', send_msg_err);\n      }\n    };\n```\n\nHere’s the function that gets executed whenever a new message is received. This will create a new array consisting of the current messages with the new message appended at the end:\n\n```javascript\n    _onMessage = data =\u003e {\n      const {message} = this._getMessage(data);\n      this.setState(previousState =\u003e ({\n        messages: GiftedChat.append(previousState.messages, message),\n      }));\n    };\n```\n\nHere’s the `_getMessage()` function. This creates a new object consisting only of the data required by Gifted Chat in order to render a message. Note that even though we’re only sending simple text messages, we still have to extract the `inline` part to get the actual text as messages still follow the same multi-part structure regardless of whether they’re sent as a simple message or multi-part:\n\n```javascript\n    _getMessage = ({id, sender, parts, createdAt}) =\u003e {\n      const text = parts.find(part =\u003e part.partType === 'inline').payload.content;\n    \n      const msg_data = {\n        _id: id,\n        text: text,\n        createdAt: new Date(createdAt),\n        user: {\n          _id: sender.id.toString(),\n          name: sender.name,\n          avatar: `https://na.ui-avatars.com/api/?name=${sender.name}`,\n        },\n      };\n    \n      return {\n        message: msg_data,\n      };\n    };\n```\n\nLastly, in your `Root.js` file, add the `ContactCustomer` screen:\n\n```javascript\n    import OrderMap from './src/screens/OrderMap';\n    import ContactCustomer from './src/screens/ContactCustomer';\n    \n    const RootStack = createStackNavigator(\n      {\n        OrderMap,\n        ContactCustomer,\n      },\n      {\n        initialRouteName: 'OrderMap',\n      },\n    );\n```\n\n### Ordering app: OrderSummary screen\nNext, we now proceed to the ordering app. Open the `src/screens/OrderSummary.js` file and import the two additional packages that we need:\n\n```javascript\n    Geocoder.init(GOOGLE_API_KEY);\n    \n    // add these\n    const random = require('string-random'); \n    import axios from 'axios'; \n```\n\nNext, update the `placeOrder()` method so it generates a random room ID for the chat room. We’ll be needing this along with the room name later so we store it in the global app state. We’ll update the `GlobalContext.js` file later to add this method. After that, make a request to log in the user and create the chat room:\n\n```javascript\n    placeOrder = async () =\u003e {\n      const {customer_location, customer_address} = this.state;\n      \n      // add these\n      const room_id = random();\n      const room_name = `Order ${room_id}`;\n      this.context.setRoom(room_id, room_name);\n      // end  \n    \n      const {\n        address: restaurant_address,\n        location: restaurant_location,\n      } = this.context.cart_items[0].restaurant;\n      \n      // add these\n      try {\n        // creates the Chatkit user if it doesn't already exists\n        await axios.post(`${BASE_URL}/login`, {\n          user_id: this.context.user_id,\n          user_name: this.context.user_name,\n        });\n        \n        // create the Chatkit room\n        await axios.post(`${BASE_URL}/room`, {\n          room_id,\n          room_name: room_name,\n          user_id: this.context.user_id,\n        });\n      } catch (err) {\n        console.log('login err: ', err);\n      }\n    }\n```\n\n### Ordering app: TrackOrder screen\nOpen the `src/screens/TrackOrder.js` file and update the `client-driver-response` event to include the `room_id` and `room_name`. Since we saved it in the global app state earlier, we can now access it via `this.context`:\n\n```javascript\n    componentDidMount() {\n      // ...\n      this.user_ride_channel = this.pusher.subscribe(\n        'private-ride-' + this.context.user_id,\n      );\n      \n      // update this:\n      this.user_ride_channel.bind('client-driver-response', data =\u003e {\n        const {hasDriver} = this.state;\n        this.user_ride_channel.trigger('client-driver-response', {\n          response: hasDriver ? 'no' : 'yes',\n          \n          // add these\n          room_id: hasDriver ? '0' : this.context.room_id,\n          room_name: hasDriver ? '' : this.context.room_name,\n        });\n      });\n    }\n```\n\nAfter that, add the code for navigating to the `ContactDriver` screen:\n\n```javascript\n    contactDriver = () =\u003e {\n      this.props.navigation.navigate('ContactDriver');\n    };\n```\n\n### Ordering app: GlobalContext\nOpen the `GlobalContext.js` file and add the initial value for the `room_id` and `room_name`:\n\n```javascript\n    export class AppContextProvider extends React.Component {\n      state = {\n        cart_items: [],\n        user_id: 'wernancheta',\n        user_name: 'Wern Ancheta',\n    \n        // add these:\n        room_id: '',\n        room_name: '',\n      };\n    }\n```\n\nThen add the method for updating them:\n\n```javascript\n    setRoom = (id, name) =\u003e {\n      this.setState({\n        room_id: id,\n        room_name: name,\n      });\n    };\n```\n\nDon’t forget to add `setRoom()` method as a value:\n\n```javascript\n    render() {\n      return (\n        \u003cAppContext.Provider\n          value={{\n            ...this.state,\n            addToCart: this.addToCart,\n            setRoom: this.setRoom,\n          }}\u003e\n          {this.props.children}\n        \u003c/AppContext.Provider\u003e\n      );\n    }\n```\n\n### Ordering app: ContactDriver screen\nCreate a `src/screens/ContactDriver.js` file and add the following. This has pretty much the same code as the `src/screens/ContactCustomer.js` file from the driver app earlier. The only difference is that we’re using the `user_id` and `room_id` from the context and not from the navigation params:\n\n```javascript\n    import React, {Component} from 'react';\n    import {View, StyleSheet} from 'react-native';\n    \n    import {GiftedChat} from 'react-native-gifted-chat';\n    import {ChatManager, TokenProvider} from '@pusher/chatkit-client';\n    \n    import Config from 'react-native-config';\n    \n    const CHATKIT_INSTANCE_LOCATOR_ID = Config.CHATKIT_INSTANCE_LOCATOR_ID;\n    const CHATKIT_SECRET_KEY = Config.CHATKIT_SECRET_KEY;\n    const CHATKIT_TOKEN_PROVIDER_ENDPOINT = Config.CHATKIT_TOKEN_PROVIDER_ENDPOINT;\n    \n    import {AppContext} from '../../GlobalContext';\n    \n    class ContactDriver extends Component {\n      static navigationOptions = ({navigation}) =\u003e {\n        return {\n          title: 'Contact Driver'\n        };\n      };\n    \n      static contextType = AppContext;\n    \n      state = {\n        messages: [],\n      };\n    \n      async componentDidMount() {\n        try {\n          const chatManager = new ChatManager({\n            instanceLocator: CHATKIT_INSTANCE_LOCATOR_ID,\n            userId: this.context.user_id, \n            tokenProvider: new TokenProvider({\n              url: CHATKIT_TOKEN_PROVIDER_ENDPOINT,\n            }),\n          });\n    \n          let currentUser = await chatManager.connect();\n          this.currentUser = currentUser;\n    \n          await this.currentUser.subscribeToRoomMultipart({\n            roomId: this.context.room_id,\n            hooks: {\n              onMessage: this._onMessage,\n            },\n            messageLimit: 30,\n          });\n        } catch (err) {\n          console.log('chatkit error: ', err);\n        }\n      }\n    \n      _onMessage = data =\u003e {\n        const {message} = this._getMessage(data);\n    \n        this.setState(previousState =\u003e ({\n          messages: GiftedChat.append(previousState.messages, message),\n        }));\n      };\n    \n      _getMessage = ({id, sender, parts, createdAt}) =\u003e {\n        const text = parts.find(part =\u003e part.partType === 'inline').payload.content;\n    \n        const msg_data = {\n          _id: id,\n          text: text,\n          createdAt: new Date(createdAt),\n          user: {\n            _id: sender.id.toString(),\n            name: sender.name,\n            avatar: `https://na.ui-avatars.com/api/?name=${sender.name}`,\n          },\n        };\n    \n        return {\n          message: msg_data,\n        };\n      };\n    \n      render() {\n        const {messages} = this.state;\n        return (\n          \u003cView style={styles.wrapper}\u003e\n            \u003cGiftedChat\n              messages={messages}\n              onSend={messages =\u003e this._onSend(messages)}\n              showUserAvatar={true}\n              user={{\n                _id: this.context.user_id,\n              }}\n            /\u003e\n          \u003c/View\u003e\n        );\n      }\n    \n      _onSend = async ([message]) =\u003e {\n        try {\n          await this.currentUser.sendSimpleMessage({\n            roomId: this.context.room_id,\n            text: message.text,\n          });\n        } catch (send_msg_err) {\n          console.log('error sending message: ', send_msg_err);\n        }\n      };\n    }\n    \n    const styles = StyleSheet.create({\n      wrapper: {\n        flex: 1,\n      },\n    });\n    \n    export default ContactDriver;\n```\n\nLastly, in your `Root.js` file, add the `ContactDriver` screen:\n\n```javascript\n    import TrackOrder from './src/screens/TrackOrder';\n    import ContactDriver from './src/screens/ContactDriver';\n    \n    const RootStack = createStackNavigator(\n      {\n        FoodList,\n        FoodDetails,\n        OrderSummary,\n        TrackOrder,\n        ContactDriver,\n      },\n      {\n        initialRouteName: 'FoodList',\n      },\n    );\n```\n\n## Chatkit server\n\nNow we proceed with the server code. Start by importing the Chatkit server SDK:\n\n```javascript\n    const cors = require('cors');\n    const Chatkit = require('@pusher/chatkit-server'); // add this\n```\n\nInitialize Chatkit:\n\n```javascript\n    const app = express();\n    \n    // add these:\n    const CHATKIT_INSTANCE_LOCATOR_ID = process.env.CHATKIT_INSTANCE_LOCATOR_ID;\n    const CHATKIT_SECRET_KEY = process.env.CHATKIT_SECRET_KEY;\n    \n    const chatkit = new Chatkit.default({\n      instanceLocator: CHATKIT_INSTANCE_LOCATOR_ID,\n      key: CHATKIT_SECRET_KEY,\n    });\n```\n\nAdd the `/login` route. As mentioned earlier, all this does is create a corresponding Chatkit user for the `user_id` and `user_name` provided if it doesn’t already exists:\n\n```javascript\n    app.post('/login', async (req, res) =\u003e {\n      const {user_id, user_name} = req.body;\n      try {\n        const user = await chatkit.getUser({\n          id: user_id,\n        });\n      } catch (err) {\n        if (err.error == 'services/chatkit/not_found/user_not_found') {\n          await chatkit.createUser({\n            id: user_id,\n            name: user_name,\n          });\n        }\n      }\n    \n      return res.send('ok');\n    });\n```\n\nThe `/room` route works the same way. It will create a Chatkit room if it doesn’t already exists. But if it already does then it will add the user to the room. As you’ve seen earlier, the first time this gets called is when the customer places their order so the room is created at that point. The second time is when the driver marks the order as “picked”. At that point, the driver is added to the room:\n\n```javascript\n    app.post('/room', async (req, res) =\u003e {\n      const {room_id, room_name, user_id} = req.body;\n      \n      try {\n        const room = await chatkit.getRoom({\n          roomId: room_id,\n          includePrivate: true,\n        });\n    \n        if (room) {\n          const user_rooms = await chatkit.getUserRooms({\n            userId: user_id,\n          });\n    \n          const room_index = user_rooms.findIndex(item =\u003e item.id == room_id);\n          if (room_index == -1) {\n            await chatkit.addUsersToRoom({\n              roomId: room_id,\n              userIds: [user_id],\n            });\n          }\n        }\n      } catch (err) {\n        if (err.error == 'services/chatkit/not_found/room_not_found') {\n          const created_room = await chatkit.createRoom({\n            id: room_id,\n            creatorId: user_id,\n            name: room_name,\n            isPrivate: true,\n          });\n        }\n      }\n    \n      return res.send('ok');\n    });\n```\n\n## Running the app\n\nAt this point, you can now run the app. Start by running the server and exposing it via ngrok:\n\n```\n    cd RNFoodDelivery\n    node server/index.js\n    ~/Downloads/ngrok http 5000\n```\n\nReplace the `NGROK_HTTPS_URL` on the `.env` file then run the app. If you want to test on the same machine, you need to start the metro bundler first on a different port (default is port 8081):\n\n```\n    react-native start --port=8080\n```\n\nThen run the ordering app:\n\n```\n    react-native run-android\n```\n\nAfter that, update the server host and port under the debug server host \u0026 port settings (you can access the settings by shaking the device):\n\n![food-ordering-app-react-native-driver-img7](//images.ctfassets.net/1es3ne0caaid/5j04egpbIHEFXJypADl9Tg/e58d0371e45db0d3b0a94336538cfcca/food-ordering-app-react-native-driver-img7.png)\n\nOnce that’s done, disconnect the first device and connect the second device (or launch the emulator) then run the driver app. This will now run using the default port so there’s no need to separately run the metro bundler. Don’t forget to update the `.env` file with the ngrok HTTPS URL before doing so:\n\n```\n    react-native run-android\n```\n\nIf you want to easily test the changing of locations, you can run the driver app using the [Genymotion emulator](https://www.genymotion.com/fun-zone/). It has a feature for changing the location via a Mapbox UI:\n\n![food-ordering-app-react-native-driver-img8](//images.ctfassets.net/1es3ne0caaid/4jBUxfS4XHF8jxQIzuZnVi/74de44bcba1bd60c4e876fdb2bc7f836/food-ordering-app-react-native-driver-img8.png)\n\n## Conclusion\n\nThat’s it! In this part of the series, you learned how to create the driver side of the app. You also learned how to implement chat functionality using Chatkit.\n\nStay tuned for the final part wherein we will implement Push Notifications using Pusher Beams.\n\nYou can find the app’s code on this [GitHub repo](https://github.com/anchetaWern/React-Native-Food-Delivery).","metaTitle":"Create a food ordering app in React Native - Part 2","metaDescription":"Food ordering apps such as Uber Eats and FoodPanda are a popular way to order from your favorite local restaurant. In this tutorial series, create the food ordering and driving apps in React Native. In part 2, create the driver app and implement a chat functionality."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"vvcxCOBUSHPTCIhFirmU5","type":"Entry","createdAt":"2019-03-25T17:17:58.561Z","updatedAt":"2020-06-19T13:31:54.155Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a whiteboard Electron app with React - Part 1: Adding the whiteboard","url":"whiteboard-electron-react-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/ElectronWhiteboard","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Od9rZziIoMG4yaQ4EAeok","type":"Entry","createdAt":"2018-02-13T11:31:10.435Z","updatedAt":"2018-02-26T12:31:10.730Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":16,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live UX","url":"live-ux","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2019-03-25","description":"In this two-part series, build a whiteboard app using Node, Electron and React. Users will be able to collaborate in realtime, drawing on a simple canvas. The app also features chat functionality. In part one, create the whiteboard.","prerequisite":"You will need Node and Yarn installed on your machine.","content":"In this tutorial, we’ll take a look at how we can build a whiteboard app using React.\n\n## Prerequisites\n\nBasic knowledge of React is required. We’ll also be using Electron, but you don’t even need to know it since we’re only using it as a container.\n\nYou need [Node](https://nodejs.org/en/) and [Yarn](https://yarnpkg.com/en/) to install packages.\n\nYou’ll also need a [Pusher app instance](https://pusher.com/channels). Enable client events on its settings because we will be triggering events directly from the client side.\n\nOptionally, you need an Ngrok account if you want to test the app with someone outside your network.\n\n\n## App overview\n\nThe whiteboard app will allow the users to communicate their ideas via a canvas similar to a physical whiteboard. Thus, it will have the following tools:\n\n- **Select** - for selecting objects in the canvas so they can be modified or removed.\n- **Pen** - for free-hand drawing.\n- **Rectangle** - for drawing rectangle shapes.\n- **Circle** - for drawing circle shapes.\n- **Text** - for adding text.\n\nHere’s what the final output for this part will look like:\n\n![electron-whiteboard-1-1](//images.ctfassets.net/1es3ne0caaid/5Im2J04E3NEn3FCzt0BXuj/38a72bd337ed43a6f761f797bcf6d98e/electron-whiteboard-1-1.gif)\n\nYou can find the code for this tutorial on its [GitHub repo](https://github.com/anchetaWern/ElectronWhiteboard).\n\nNote that I’ll be using the terms “canvas” and “whiteboard” interchangeably throughout the article, but they will mean the same thing. \n\n\n## Choosing the tool\n\nThe main challenge with building a whiteboard is the implementation of canvas. With plain JavaScript, we have a bunch of options, but only [FabricJS](http://fabricjs.com/) and [Konva](https://konvajs.github.io/) seem to fit the bill. \n\nThe next step is to find out if any of these libraries have decent React integration. Of the two, only Konva meets the requirement with its [React Konva](https://github.com/konvajs/react-konva) library. \n\nThe only problem is I don’t have prior Konva experience and the various elements (for example, rectangle and circle) are actually rendered using components. There’s also no free-drawing tool which is often the most important. \n\nFinally, I found this [React Sketch](https://github.com/tbolis/react-sketch) package from [Thomas](https://github.com/tbolis). It’s exactly what we need to quickly create a whiteboard app. And it uses FabricJS behind the scenes so I know that it’s going to be good since I previously used FabricJS on another project.\n\n\n## Bootstrapping the app\n\nNow that you know why we ended up using React Sketch, it’s time to start building the app. I’ve already created a starter project which has navigation and all the styles already set up. This will serve as the starting point for this tutorial. Go ahead and clone it on your working directory:\n\n```\n    git clone https://github.com/anchetaWern/ElectronWhiteboard\n```\n\nSwitch to the `starter` branch and install the dependencies:\n\n```\n    git checkout starter\n    yarn\n```\n\n## Extending the React Sketch package\n\nIn this section, we’ll extend the React Sketch package in order for it to be able to trigger client events when a whiteboard object is created, updated, or removed. \n\nThis is an optional section since I’ve already included the compiled version of the updated package in the `node_modules/react-sketch/dist` folder of the [part1 branch](https://github.com/anchetaWern/ElectronWhiteboard/blob/part1/node_modules/react-sketch/dist). \n\nIf you’re planning to make use of the same package in the future or you want to learn how the package works, I encourage you to follow along. Otherwise, simply skip to the next section.\n\nIf you decide to skip this section, you need to copy [this file](https://github.com/anchetaWern/ElectronWhiteboard/blob/part1/node_modules/react-sketch/dist/index.js) over to the `node_modules/react-sketch/dist` directory of the project. \n\n### Installing the dependencies\n\nIf you’re still here, the next step is to clone the React Sketch package so we can update it accordingly:\n\n```\n    git clone https://github.com/tbolis/react-sketch.git\n```\n\nIf you’re on Mac, you need to install [Macports](https://guide.macports.org/chunked/installing.macports.html). This software allows you to install various open source software that’s required to compile FabricJS. Go ahead and download the [installer file from this page](https://guide.macports.org/chunked/installing.macports.html) and install it on your machine. Once it’s installed, you need to install the following packages via Macports:\n\n```\n    sudo port install pkgconfig cairo pango libpng jpeg giflib libsrvg\n```\n\nThese are all required to compile FabricJS.\n\nIf you’re on Ubuntu or any other Linux distribution, you won’t have any problem because these open-source tools are native to Linux. But if you don’t have it, you can simply install it via your default way of installing software.\n\nFor Windows, you need to install Node 8.11 because it’s required by [windows-build-tools](https://www.npmjs.com/package/windows-build-tools). This will install Python 2.7 and Visual Studio build tools on your machine:\n\n```\n    npm install -g windows-build-tools\n```\n\nYou also need [node-gyp](https://github.com/nodejs/node-gyp):\n\n```\n    npm install -g node-gyp\n```\n\n### Updating the code\n\nWe’re now ready to update the code. Start by declaring the additional props that we will be supplying to this component:\n\n```javascript\n    // react-sketch/src/SketchField.jsx\n    static propTypes = {\n      // \u003cexisting code\u003e\n      style: PropTypes.object,\n      \n      // add these:\n      onUpdate: PropTypes.func, // function to execute when an object is modified\n      username: PropTypes.string, // username of the current user\n      shortid: PropTypes.func // helper for generating random unique IDs for objects\n    }\n```\n\nNext, update the `_onObjectAdded` function to add a unique ID for an object that was created. Then execute the `onUpdate` function that we will pass as props later on:\n\n```javascript\n    _onObjectAdded = (e) =\u003e {\n      // \u003cexisting code\u003e\n      this._history.keep([obj, state, state])\n      \n      // add these:\n      if (!obj.sender) { \n        const id = this.props.shortid.generate(); \n        Object.assign(obj, { id });\n        this.props.onUpdate(JSON.stringify(obj), 'add', this.props.username, id); \n      }\n    }\n```\n\nThe above function is automatically triggered whenever a new object is added to the canvas. That’s why it’s the perfect place to execute the function that will update the UI of all the other users in the channel. \n\nNote that we’re checking for the non-existence of the `sender` property (username of the user who added the object) in the object before we trigger the function for updating the UI of the other users because it will be a catastrophe if we don’t. \n\nWe already know that the `_onObjectAdded` function is automatically executed every time a new object is added. So if we’re not checking for the existence of the `sender` property, `this.props.onUpdate` will basically ping-pong between the users in the channel. \n\nAs you’ll see in the `src/screens/Whiteboard.js` file later, the `sender` property is being added to the object when the event for updating the canvas (`client-whiteboard-updated`) is received. This effectively prevents the receiver from triggering the same event to all the other users. \n\nDo the same for the `_onObjectModified` function. This function is automatically executed every time an object is updated:\n\n```javascript\n    _onObjectModified = (e) =\u003e {\n      // \u003cexisting code\u003e  \n      this._history.keep([obj, prevState, currState]);\n      // add these:\n      if (!obj.sender) {\n        let strObj = JSON.stringify(obj);\n        this.props.onUpdate(strObj, 'update', this.props.username, obj.id);\n      }\n    }\n```\n\nNext, add a function for getting the currently selected object. This will get called from the `src/screens/Whiteboard.js` file later to get the `id` of the currently selected object for removal. \n\nAs you’ve seen in the `_onObjectAdded` function earlier, this is a unique ID assigned to the object. By using it, all the other users can find the object so they can also remove it from their canvas:\n\n```javascript\n    getSelected = () =\u003e {\n      let canvas = this._fc;\n      let activeObj = canvas.getActiveObject();\n      return activeObj;\n    }\n```\n\nThe `setSelected` function is used for programmatically setting an active (currently selected) object in the canvas. We will call it when the other users in the channel receive the event for updating the whiteboard. \n\nIf the event has a type of `remove`, this function sets the object with the `id` passed in the event as active. From there, we simply use the existing `removeSelected` function to remove the object from the canvas:\n\n```javascript\n    setSelected = (id) =\u003e {\n      let canvas = this._fc;\n      var objToSelect = canvas.getObjects().find((o) =\u003e {\n        return id == o.id;\n      });\n      canvas.setActiveObject(objToSelect);\n      canvas.requestRenderAll();\n    }\n```\n\nNext, add a function for programmatically adding an object to the canvas. This gets fired on all the other users in the channel every time a user adds a new object. Note that each object type has a different way of initialization:\n\n```javascript\n    addObject = (obj) =\u003e {\n    \n      let canvas = this._fc;\n      let shapeData = JSON.parse(obj);\n      \n      let shape = null;\n      const type = this._capsFirstLetter(shapeData.type);\n      if (type == 'Path') {\n        let string_path = '';\n        shapeData.path.forEach((x) =\u003e {\n          string_path += x.join(' ');\n        });\n      \n        shape = new fabric.Path(string_path);\n        delete shapeData.path;\n        shape.set(shapeData);\n      } else if (type == 'I-text') {\n        shape = new fabric.Text(shapeData.text); \n        delete shapeData.text;\n        shape.set(shapeData);\n      } else {\n        // for Rectangle and Circle objects\n        shape = new fabric\\[type\\](shapeData);\n      }\n       \n      canvas.add(shape);\n    }\n```\n\nHere’s the `_capsFirstLetter` function. It’s used to convert the first letter of a string to uppercase so it matches an actual [FabricJS object type](http://fabricjs.com/fabric-intro-part-1#objects):\n\n```javascript\n    _capsFirstLetter = (str) =\u003e {\n      return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n```\n\nNext, add the function for modifying existing objects. This gets called every time an existing object is updated by another user in the channel:\n\n```javascript\n    modifyObject = (obj) =\u003e {\n      \n      let objData = JSON.parse(obj);\n      let canvas = this._fc;\n    \n      var objToModify = canvas.getObjects().find((o) =\u003e {\n        return objData.id == o.id;\n      });\n      objToModify.set(objData); // update the object\n      objToModify.setCoords(); // useful if the object's coordinates in the canvas also changed (usually by moving)\n      canvas.requestRenderAll(); // refresh the canvas so changes will appear\n    }\n```\n\nNext, update the `addText` function to include the `id` to the object. This `id` will be passed from the `src/screens/Whiteboard.js` file later:\n\n```javascript\n    addText = (text, options = {}) =\u003e {\n      // \u003cexisting code\u003e\n      Object.assign(options, opts);\n      iText.set({\n        'id': options.id, // add this\n        // \u003cexisting code\u003e\n      });\n    }\n```\n\n### Building the package\n\nNow we’re ready to install all the dependencies and build the package:\n\n```\n    yarn\n    yarn prebuild\n    yarn build\n```\n\nThis generates a `dist/index.js` file. Copy that file and replace the `node_modules/react-sketch/dist/index.js` file inside the `ElectronWhiteboard` folder with it to update React Sketch in your project. \n\nRemember to do this before you compile the ElectronWhiteboard project using `yarn start` or `yarn build` so it uses the updated version of the package instead of the original one. You can also add a build script to automatically do that if you want.\n\n\n## Login screen\n\nCreate a  `src/screens/Login.js` file and add the following: \n\n```javascript\n    import React, { Component } from \"react\";\n    import { Container, Row, Col, Button, Input } from 'reactstrap';\n    import Pusher from \"pusher-js\";\n    \n    import uniquename from \"../helpers/uniquename\";\n    \n    const channel_name = uniquename();\n    \n    const PUSHER_APP_KEY = process.env.REACT_APP_PUSHER_APP_KEY;\n    const PUSHER_APP_CLUSTER = process.env.REACT_APP_PUSHER_APP_CLUSTER;\n    const BASE_URL = \"http://localhost:5000\";\n    \n    class LoginScreen extends Component {\n    \n      state = {\n        myUsername: \"\",\n        channelName: channel_name,\n        isLoading: false\n      }\n    \n      constructor(props) {\n        super(props);\n        this.pusher = null;\n        this.group_channel = null; // channel for communicating changes to the canvas\n      }\n    \n      // next: add render function\n    \n    }\n```\n\nNext, render the login UI. This will ask for the user’s username and channel they want to enter. Note that when logging in, the channel doesn’t already need to exist:\n\n```javascript\n    render() {\n      return (\n        \u003cContainer\u003e\n          \u003cRow\u003e\n            \u003cCol lg={12}\u003e\n              \u003cdiv className=\"centered\"\u003e\n                \u003cdiv className=\"textInputContainer\"\u003e\n                  \u003cInput \n                    type=\"text\"\n                    placeholder=\"myUsername\"\n                    onChange={this.onUpdateText}\n                    value={this.state.myUsername} /\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv className=\"textInputContainer\"\u003e\n                  \u003cInput \n                    type=\"text\"\n                    placeholder=\"channelName\"\n                    onChange={this.onUpdateText}\n                    value={this.state.channelName} /\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv className=\"buttonContainer\"\u003e\n                  \u003cButton \n                    type=\"button\" \n                    color=\"primary\" \n                    onClick={this.login} \n                    disabled={this.state.isLoading} \n                    block\u003e\n                      {this.state.isLoading ? \"Logging in…\" : \"Login\"}\n                  \u003c/Button\u003e\n                \u003c/div\u003e\n    \n              \u003c/div\u003e\n            \u003c/Col\u003e\n          \u003c/Row\u003e\n        \u003c/Container\u003e\n      );\n    }\n```\n\nHere’s the function for updating the value of the text fields:\n\n```javascript\n    onUpdateText = (evt) =\u003e {\n      const field = evt.target.getAttribute(\"placeholder\");\n      this.setState({\n        [field]: evt.target.value\n      });\n    };\n```\n\nWhen the user logs in, we authenticate them with Pusher so they can trigger events from the client side. Once authenticated, we subscribe them to a common channel where all the changes in the whiteboard will be communicated:\n\n```javascript\n    login = () =\u003e {\n    \n      const { myUsername, channelName } = this.state;\n    \n      this.setState({\n        isLoading: true\n      });\n    \n      this.pusher = new Pusher(PUSHER_APP_KEY, {\n        authEndpoint: `${BASE_URL}/pusher/auth`,\n        cluster: PUSHER_APP_CLUSTER,\n        encrypted: true\n      });\n    \n      this.group_channel = this.pusher.subscribe(`private-group-${channelName}`);\n      this.group_channel.bind(\"pusher:subscription_error\", (status) =\u003e {\n        console.log(\"error subscribing to group channel: \", status);\n      });\n    \n      this.group_channel.bind(\"pusher:subscription_succeeded\", () =\u003e {\n        console.log(\"subscription to group succeeded\");\n        \n        // navigate to the whiteboard screen\n        this.props.navigation.navigate(\"Whiteboard\", {\n          myUsername,\n          pusher: this.pusher,\n          group_channel: this.group_channel\n        });\n    \n      });\n    \n    }\n```\n\nDon’t forget to add a `.env` file at the project root. This contains your Pusher app credentials:\n\n```\n    REACT_APP_PUSHER_APP_KEY=\"YOUR PUSHER APP KEY\"\n    REACT_APP_PUSHER_APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n```\n\n### Unique name helper\n\nHere’s the code for the unique name helper:\n\n```javascript\n    // src/helpers/uniquename.js\n    var generateName = require(\"sillyname\");\n    \n    const generateUsername = () =\u003e {\n      const min = 10;\n      const max = 99;\n      const number = Math.floor(Math.random() * (max - min + 1)) + min;\n      const username = generateName().replace(\" \", \"_\") + number;\n      return username;\n    };\n    \n    export default generateUsername;\n```\n\n## Whiteboard screen\n\nNow we’re ready to add the code for the Whiteboard screen. Create a `src/screens/Whiteboard.js` file and add the following:\n\n```javascript\n    import React, { Component } from \"react\";\n    import { Container, Row, Col, Button, Input } from 'reactstrap';\n    import { SketchField, Tools } from 'react-sketch';\n    \n    import { FaMousePointer, FaPen, FaCircle, FaSquare, FaTrash } from 'react-icons/fa';\n    \n    import shortid from 'shortid'; // for generating unique IDs\n```\n\nNext, initialize the state and the instance variables. `this.tools` contains the tools that the users can use to draw objects in the whiteboard. This corresponds to the [object types](http://fabricjs.com/fabric-intro-part-1#objects) available in FabricJS:\n\n```javascript\n    class WhiteboardScreen extends Component {\n    \n      state = {\n        text: '',\n        myUsername: '',\n        tool: Tools.Pencil\n      }\n      \n      constructor(props) {\n        super(props);\n      \n        this.tools = [\n          {\n            name: 'select',\n            icon: \u003cFaMousePointer /\u003e,\n            tool: Tools.Select\n          },\n          {\n            name: 'pencil', \n            icon: \u003cFaPen /\u003e,\n            tool: Tools.Pencil\n          },\n          {\n            name: 'rect',\n            icon: \u003cFaSquare /\u003e,\n            tool: Tools.Rectangle\n          },\n          {\n            name: 'circle',\n            icon: \u003cFaCircle /\u003e,\n            tool: Tools.Circle\n          }\n        ];\n      \n        this.auto_create_tools = ['circle', 'rect']; // tools that will automatically create their corresponding object when selected\n      \n        // next: add settings for auto-created objects\n      }\n    \n      // next: add componentDidMount\n    }\n```\n\nNext, add the default settings for the objects that will be automatically created upon selection. Note that the user can always modify the object afterward so it’s safe to create them with some default settings:\n\n```javascript\n    this.initial_objects = {\n      'circle': { \n        radius: 75, \n        fill: 'transparent', \n        stroke: '#000', \n        strokeWidth: 3, \n        top: 60, \n        left: 500 \n      },\n      \n      'rect': { \n        width: 100, \n        height: 50, \n        fill: 'transparent', \n        stroke: '#000', \n        strokeWidth: 3, \n        top: 100, \n        left: 330 \n      }\n    }\n```\n\nOnce the component is mounted, we get the navigation params that were passed from the login screen earlier:\n\n```javascript\n    componentDidMount() {\n    \n      const { navigation } = this.props;\n      this.myUsername = navigation.getParam(\"myUsername\");\n      this.pusher = navigation.getParam(\"pusher\");\n      this.group_channel = navigation.getParam(\"group_channel\");\n    \n      this.setState({\n        myUsername: this.myUsername\n      });\n    \n      // next: add code for listening for canvas updates\n    }\n```\n\nNext, we listen for the event triggered by the user who updates the canvas. Every time this gets fired, we call the `textGatherer` function. This is a [JavaScript closure](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) that allows us to create an internal scope for storing payload data. \n\nWe’re doing this because not all messages contain all the data we need in order to update the canvas. A single object update or creation may require the use of five or more messages in order to send its full data. This is necessary because of Pusher’s 10KB per message limit which we’ll talk about later. \n\nGoing back to the code below, we check for the `is_final` property in the `payload` before we can start processing the message. Having this property in the message means that this is the last part of the message. Only then can we get the contents accumulated by the closure and convert it to an object. \n\nThat way, we can assign additional properties to it before we convert it back to a JSON string so we can pass it to the `addObject` and `modifyObject` functions:\n\n```javascript\n    let textGatherer = this._gatherText();\n    \n    this.group_channel.bind('client-whiteboard-updated', (payload) =\u003e {\n      textGatherer(payload.data);\n    \n      if (payload.is_final) {\n        const full_payload = textGatherer(); // get the gathered text\n        let obj = '';\n        if (full_payload) {\n          obj = JSON.parse(full_payload);\n    \n          if (payload.id) {\n            Object.assign(obj, { id: payload.id, sender: payload.sender });\n          } else {\n            Object.assign(obj, { sender: payload.sender });\n          }\n        }\n        \n        if (payload.action === 'add') {\n          this._sketch.addObject(JSON.stringify(obj));\n        } else if(payload.action === 'update') {\n          this._sketch.modifyObject(JSON.stringify(obj));\n        } else if(payload.action === 'remove') {\n          this._sketch.setSelected(payload.id);\n          this._sketch.removeSelected();\n        }\n    \n        textGatherer = this._gatherText(); // reset to an empty string\n      }\n    \n    });\n```\n\nHere’s the code for the `_gatherText` function:\n\n```javascript\n    _gatherText = () =\u003e {\n      let sentence = '';\n      return (txt = '') =\u003e {\n       return sentence += txt;\n      }\n    }\n```\n\nNext, render the UI. This is where we make use of the `SketchField` component that we updated earlier (if you followed along). `this._sketch` contains the reference to the component itself, it allows us to use methods from within the component class. `tool` is the tool that’s used to draw something on the canvas. `onUpdate`, `username`, and `shortid` are the custom ones (they’re not from the original library) we added earlier. Additionally, we have a tool for removing objects and adding text:\n\n```javascript\n    render() {\n      return (\n        \u003cContainer fluid\u003e\n          \u003cRow\u003e\n            \u003cCol lg={9}\u003e\n              {\n                this.state.myUsername \u0026\u0026\n                \u003cSketchField\n                  className=\"canvas\"\n                  ref={c =\u003e (this._sketch = c)}\n                  width='1024px'\n                  height='768px'\n                  tool={this.state.tool}\n                  lineColor='black'\n                  lineWidth={3}\n                  onUpdate={this.sketchUpdated}\n                  username={this.state.myUsername}\n                  shortid={shortid} /\u003e\n              }\n            \u003c/Col\u003e\n    \n            \u003cCol lg={3} className=\"Sidebar\"\u003e\n              \u003cdiv className=\"tools\"\u003e\n    \n                {this.renderTools()}\n    \n                \u003cdiv className=\"tool\"\u003e\n                  \u003cButton \n                    color=\"danger\" \n                    size=\"lg\" \n                    onClick={this.removeSelected} \n                  \u003e\n                    \u003cFaTrash /\u003e\n                  \u003c/Button\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \n              \u003cdiv\u003e\n                \u003cdiv className=\"textInputContainer\"\u003e\n                  \u003cInput \n                    type=\"textarea\" \n                    name=\"text_to_add\" \n                    id=\"text_to_add\" \n                    placeholder=\"Enter text here\" \n                    value={this.state.text}\n                    onChange={this.onUpdateText} /\u003e\n                  \u003cdiv className=\"buttonContainer\"\u003e\n                    \u003cButton type=\"button\" color=\"primary\" onClick={this.addText} block\u003eAdd Text\u003c/Button\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n    \n            \u003c/Col\u003e  \n          \u003c/Row\u003e\n        \u003c/Container\u003e\n      );\n    }\n```\n\nHere’s the function for rendering the buttons for picking the tools:\n\n```javascript\n    renderTools = () =\u003e {\n      return this.tools.map((tool) =\u003e {\n        return (\n          \u003cdiv className=\"tool\" key={tool.name}\u003e\n            \u003cButton \n              color=\"secondary\" \n              size=\"lg\" \n              onClick={this.pickTool} \n              data-name={tool.name}\n              data-tool={tool.tool}\n            \u003e\n              {tool.icon}\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        );\n      });\n    }\n```\n\nThe `pickTool` function is executed when any of the buttons is clicked. This will simply update the value of `tool` in the state. But if the selected tool is one of those “auto-create” ones, we generate a unique ID and add it as a property to the default object settings (`this.initial_objects`) before we add it to the canvas. \n\nWe also change the tool back to the select tool so the user can select the object and start modifying it to their liking:\n\n```javascript\n    pickTool = (event) =\u003e {\n      const button = event.target.closest('button');\n      const tool = button.getAttribute('data-tool');\n      const tool_name = button.getAttribute('data-name');\n    \n      this.setState({\n        tool\n      }, () =\u003e {\n        if (this.auto_create_tools.indexOf(tool_name) !== -1) {\n         \n          const obj = this.initial_objects[tool_name]; // get the initial object settings\n          const id = shortid.generate(); // generate a random unique ID\n          Object.assign(obj, { id: id, type: tool_name }); // add the ID to the object\n          \n          this._sketch.addObject(JSON.stringify(obj)); // add the object to the canvas\n        \n          // change the tool back to select\n          setTimeout(() =\u003e {\n            this.setState({\n              tool: Tools.Select \n            });\n          }, 500);\n    \n        }\n    \n      });\n    }\n    \n    // next: add onUpdateText\n```\n\nNext, add the function for updating the value of the text field for entering the text to be added to the canvas:\n\n```javascript\n    onUpdateText = (event) =\u003e {\n      this.setState({\n        text: event.target.value\n      });\n    }\n    \n    // next: add addText\n```\n\nWhen the button for adding a text is clicked, we call the `addText` method from inside the `SketchField` component. This accepts the text value to be added, and an optional object containing additional options for the text. In this case, we’re simply using it to pass the unique object ID:\n\n```javascript\n    addText = () =\u003e {\n      if (this.state.text) {\n        const id = shortid.generate();\n        this._sketch.addText(this.state.text, { id }); // add a text object to the canvas\n      \n        this.setState({\n          text: ''\n        });\n      }\n    }\n    \n    // next: add sketchUpdated function\n```\n\nNext is the `sketchUpdated` function. This function is called every time an object is added, modified, or removed from the canvas. It uses the `updateOtherUsers` function to publish the changes to all the other users on the channel. But before doing so, it first splits up the object based on a specific length. \n\nAs mentioned earlier, Pusher has a [10KB limit for publishing messages](https://support.pusher.com/hc/en-us/articles/202046553-What-is-the-message-size-limit-when-publishing-a-message-). This is plenty for the Circle, Rectangle, and Text objects but not for the path (free-drawing) object. \n\nIt’s considered a complex shape so it takes a lot more data to describe it. Which means that the 10KB limit is not enough. So the solution is to split up the `obj` into multiple parts. \n\nEach part contains a specific number of characters. In this case, we’re using 8,000 because 10KB is roughly 10,000 characters. The extra 2,000 is for all the other data that we’re publishing. For the final part, we simply add an `is_final` property to the `payload` to signal the receiver that the message is ready to be assembled:\n\n```javascript\n    sketchUpdated = (obj, action, sender, id = null) =\u003e {\n      if (this.state.myUsername) {\n        \n        let length_per_part = 8000; // maximum number of characters that can be alloted to a FabricJS object\n        let loop_count = Math.ceil(obj.length / length_per_part);\n    \n        let from_str_index = 0;\n        for (let x = 0; x \u003c loop_count; x++) {\n          const str_part = obj.substr(from_str_index, length_per_part);\n    \n          const payload = {\n            action: action,\n            id: id,\n            data: str_part,\n            sender: this.state.myUsername\n          };\n    \n          if (x + 1 === loop_count) { // if this is the final part\n            Object.assign(payload, { is_final: true });\n          }\n          \n          this.updateOtherUsers(payload);\n          from_str_index += length_per_part;\n        }\n      }\n    }\n```\n\nHere’s the `updateOtherUsers` function:\n\n```javascript\n    updateOtherUsers = (payload) =\u003e {\n      this.group_channel.trigger('client-whiteboard-updated', payload);\n    }\n```\n\nLastly, we have the `removeSelected` function. This is where we get the currently selected object and publish its `id` to all the other users in the channel:\n\n```javascript\n    removeSelected = () =\u003e {\n      const activeObj = this._sketch.getSelected();\n      \n      const payload = {\n        action: 'remove',\n        is_final: true,\n        id: activeObj.id,\n        sender: this.state.myUsername\n      };\n    \n      this.updateOtherUsers(payload);\n      this._sketch.removeSelected(); // remove the object from the user's canvas\n    }\n```\n\n## Server code\n\nHere’s the server code. Right now, we’re simply using it to authenticate the user with Pusher so they can send client events:\n\n```javascript\n    // server/server.js\n    var express = require(\"express\");\n    var bodyParser = require(\"body-parser\");\n    var Pusher = require(\"pusher\");\n    const cors = require(\"cors\");\n    \n    require(\"dotenv\").config();\n    \n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(cors());\n    \n    var pusher = new Pusher({\n      appId: process.env.APP_ID,\n      key: process.env.APP_KEY,\n      secret: process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER\n    });\n    \n    // for checking if the server works\n    app.get(\"/\", (req, res) =\u003e {\n      res.send(\"all good...\");\n    });\n    \n    app.post(\"/pusher/auth\", (req, res) =\u003e {\n      const socketId = req.body.socket_id;\n      const channel = req.body.channel_name;\n      console.log(\"authing...\");\n      var auth = pusher.authenticate(socketId, channel);\n      return res.send(auth);\n    });\n    \n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\nDon’t forget to update the `server/.env` file to include your Pusher app credentials:\n\n```\n    APP_ID=\"YOUR PUSHER APP ID\"\n    APP_KEY=\"YOUR PUSHER APP KEY\"\n    APP_SECRET=\"YOUR PUSHER APP SECRET\"\n    APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n```\n\n## Running the app\n\nAt this point, you can now run the app. Start by running the server:\n\n```\n    cd server\n    node server.js\n```\n\nOptionally, you can use ngrok so you can test the app with someone outside your network. Don’t forget to update the base URL in the login screen if you do so:\n\n```javascript\n    // src/screens/Login.js\n    const BASE_URL = \"http://localhost:5000\";\n```\n\nFinally, run the app itself:\n\n```\n    yarn start\n    yarn electron-dev\n```\n\n## Conclusion\n\nIn this tutorial, we learned how to use FabricJS and React Sketch library to create a whiteboard app in React. Stay tuned for [part two](https://pusher.com/tutorials/whiteboard-electron-react-part-2) where we add a group chat to the whiteboard so the users can talk about what they’re trying to sketch. \n\nYou can find the code for this tutorial on its [GitHub repo](https://github.com/anchetaWern/ElectronWhiteboard).","metaTitle":"Create a whiteboard Electron app with React - Part 1","metaDescription":"In this two-part series, build a whiteboard app using Node, Electron and React. Users will be able to collaborate in realtime, drawing on a simple canvas. The app also features chat functionality. In part one, create the whiteboard."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2XflDszQXuWmUW82mC0KWs","type":"Entry","createdAt":"2018-08-16T18:40:59.286Z","updatedAt":"2018-08-16T18:40:59.286Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to build a chatbot with Preact and Wit.ai","url":"chatbot-preact-witai","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/preact-chatbot","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-08-16","description":"Build a chatbot using Preact and Wit.ai, with a Node.js backend. Create custom entities, and implement realtime functionality to allow users to interact with the bot instantly.","prerequisite":"You will need a recent version of Node and npm installed on your machine. A basic understanding of React or Preact will be helpful.","content":"In this tutorial, we will consider how to build a realtime chatbot that incorporates NLP using [Preact](https://preactjs.com), [Wit.ai](https://wit.ai) and [Pusher Channels](https://pusher.com/docs). You can find the entire source code of the application in this [GitHub](https://github.com/ayoisaiah/preact-chatbot) [repository](https://github.com/ayoisaiah/preact-chatbot).\n\nChatbots have become more and more prevalent over the past few years, with several businesses taking advantage of them to serve their customers better.\n\nMany chatbots integrate natural language processing (NLP) which adds a more human touch to conversations, and helps them understand a wider variety of inputs.\n\n## Prerequisites\n\nBefore you continue, make sure  you have [Node.js](https://nodejs.org/en/), [npm](https://www.npmjs.com/) and `curl` installed on your computer. [You can find out how to install Node.js and npm here](https://docs.npmjs.com/getting-started/installing-node).  \n\nThe versions I used while creating this tutorial are as follows:\n\n- Node.js v10.4.1\n- npm v6.3.0\n\nYou can view the version of Node and `npm` you have installed by running the following commands in your terminal:\n\n```\n    node -v\n    npm -v\n```\n\nI believe the code will still work even if you’re on an older version of Node, but if you have any trouble completing the tutorial, try upgrading to the versions I used to see if it fixes your problem.\n\nAlso investigate how to install `curl` on your favorite operating system, or use [this website](https://onlinecurl.com/).\n\nFinally, you need to have a basic understanding of JavaScript and Preact or React, but no prior experience with Pusher or Wit.ai is required.\n\n## Getting started\n\nLet's bootstrap our project using the [preact-cli](https://github.com/developit/preact-cli) tool which allows us to quickly get a Preact application up and running.\n\nOpen up your terminal, and run the following command to install `preact-cli` on your machine:\n\n```\n    npm install -g preact-cli\n```\n\nOnce the installation completes, you'll have access to the `preact` command that will be used to setup the project. Run the following command in the terminal to create your Preact app:\n\n```\n    preact create simple preact-chatbot\n```\n\nThe above command will create a new directory called `preact-chatbot` and install `preact` as well as its accompanying dependencies. It may take a while to complete, so sit tight and wait. Once it’s done, you should see a some information in the terminal informing you of what you can do next.\n\n![preact-new-project](//images.ctfassets.net/1es3ne0caaid/1mPFykN3V2A4MO0asuwEgm/4b6dcebf806b0e17d8290c72be1e61fd/preact-new-project.png)\n\nNext, change into the newly created directory and run `npm run start` to start the development server.\n\nOnce the application compiles, you will be able to view it at http://localhost:8080. When you open up that URL in your browser, you should see a page on your screen that looks like this:\n\n![preact-hello-world](//images.ctfassets.net/1es3ne0caaid/4edVeotl7WI2kU4IAgoAq2/1d6982ab1a8a55ed299fee2ff931a5d3/preact-hello-world.png)\n\n## Create your application frontend with Preact\n\nOpen up `index.js` in your text editor, and change its contents to look like this:\n\n``` javascript\n    // index.js\n    \n    import './style';\n    import { Component } from 'preact';\n    \n    export default class App extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          userMessage: '',\n          conversation: [],\n        };\n    \n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n      }\n    \n      handleChange(event) {\n        this.setState({ userMessage: event.target.value });\n      }\n    \n      handleSubmit(event) {\n        event.preventDefault();\n        const msg = {\n          text: this.state.userMessage,\n          user: 'user',\n        };\n    \n        this.setState({\n          conversation: [...this.state.conversation, msg],\n        });\n    \n        fetch('http://localhost:7777/chat', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            message: this.state.userMessage,\n          }),\n        });\n    \n        this.setState({ userMessage: '' });\n      }\n    \n      render() {\n        const ChatBubble = (text, i, className) =\u003e {\n          const classes = `${className} chat-bubble`;\n          return (\n            \u003cdiv key={`${className}-${i}`} class={`${className} chat-bubble`}\u003e\n              \u003cspan class=\"chat-content\"\u003e{text}\u003c/span\u003e\n            \u003c/div\u003e\n          );\n        };\n    \n        const chat = this.state.conversation.map((e, index) =\u003e\n          ChatBubble(e.text, index, e.user)\n        );\n    \n        return (\n          \u003cdiv\u003e\n            \u003ch1\u003eRealtime Preact Chatbot\u003c/h1\u003e\n            \u003cdiv class=\"chat-window\"\u003e\n              \u003cdiv class=\"conversation-view\"\u003e{chat}\u003c/div\u003e\n              \u003cdiv class=\"message-box\"\u003e\n                \u003cform onSubmit={this.handleSubmit}\u003e\n                  \u003cinput\n                    value={this.state.userMessage}\n                    onInput={this.handleChange}\n                    class=\"text-input\"\n                    type=\"text\"\n                    autofocus\n                    placeholder=\"Type your message and hit Enter to send\"\n                  /\u003e\n                \u003c/form\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n```\n\nIf you have some experience with Preact or React, the above code should be straightforward to understand. The state of the application is initialized with two values:  `userMessage` which contains the value of whatever the user types into the input field, and `conversation` which is an array that will hold each message in the conversation.\n\nThe `handleChange` function runs on every keystroke to update `userMessage` which allows the displayed value to update as the user types. When the user hits the `Enter` button the form will be submitted and `handleSubmit` will be invoked. \n\n`handleSubmit` updates the  `conversation` state with the contents of the user's message and sends the message in a `POST` request to the `/chat` endpoint which we will soon setup in our app’s server component, before clearing the input field by setting `userMessage` to an empty string.\n\n## Add the styles for the application\n\nLet's add the styles for the app’s frontend. Open up `style.css` in your editor and replace its contents with the following styles:\n\n``` css\n    // style.css\n    \n    html, body {\n      font: 14px/1.21 'Helvetica Neue', arial, sans-serif;\n      font-weight: 400;\n      box-sizing: border-box;\n    }\n    \n    *, *::before, *::after {\n      box-sizing: inherit;\n      margin: 0;\n      padding: 0;\n    }\n    \n    h1 {\n      text-align: center;\n      margin-bottom: 40px;\n    }\n    \n    .chat-window {\n      width: 750px;\n      margin: auto;\n      border: 1px solid #eee;\n    }\n    \n    .conversation-view {\n      width: 100%;\n      min-height: 300px;\n      padding: 20px 40px;\n    }\n    \n    .message-box {\n      width: 100%;\n      background-color: #d5d5d5;\n      padding: 10px 20px;\n    }\n    \n    .text-input {\n      width: 100%;\n      border-radius: 4px;\n      border: 1px solid #999;\n      padding: 5px;\n    }\n    \n    .chat-bubble {\n      font-size: 20px;\n      margin-bottom: 20px;\n      width: 100%;\n      display: flex;\n    }\n    \n    .chat-bubble.ai {\n      justify-content: flex-end;\n    }\n    \n    .chat-bubble.ai .chat-content {\n      background-color: #eec799;\n    }\n    \n    .chat-content {\n      display: inline-block;\n      padding: 8px 15px;\n      background-color: #bada55;\n      border-radius: 10px;\n    }\n```\n\nNow, the application should look like this:\n\n![preact-demo-1](//images.ctfassets.net/1es3ne0caaid/3E3qH2JZlKokeCwCeqC2e8/427d30a0046bf3fc09ea865372edbcf5/preact-demo-1.png)\n\n\n## Setup your Wit.ai application\n\nHead over to the [Wit.ai website](https://wit.ai) and create a free account.\n\nOnce you are signed in, hit the **+** icon at the top right of the page to create a new application. Enter your app name and click the **+Create App** button at the bottom.\n\n![witai-create-app](//images.ctfassets.net/1es3ne0caaid/3pNYuoHdgkwcom6AeeMmKa/331b33fab6db187d4bb2b3ff51ae15d1/witai-create-app.png)\n\nYou should see the following page once your app has been created.\n\n![witai-new-app](//images.ctfassets.net/1es3ne0caaid/34M4WfEdWwswGAWQi0U4u0/157b5b6650b5ad9b1f9f53fc5549f3f3/witai-new-app.png)\n\n## Create your first entity\n\nWit.ai uses entities to help you understand user queries and extract meaningful information from them. Let's setup an entity that will enable our bot to understand common greetings like \"Hi\" or \"Hello\". \n\nType the word \"Hello\" in the \"User says…\" input field, then select the “wit/greetings” entity in the **Add a new entity** field. Use the dropdown on the right to set the value of the entity to **true**.\n\n![witai-new-entity](//images.ctfassets.net/1es3ne0caaid/3cpWaboPnO4Q8a2y0QMkYS/d6eeec27f83db214a5fc8789a4948263/witai-new-entity.png)\n\nOnce done, hit the **Validate** button to add the entity to your application. You can repeat the steps for other greetings such as \"Hi\", \"Hey\", \"Good morning\" etc.\n\n![witai-entity-validate](//images.ctfassets.net/1es3ne0caaid/35NxRkXs40uWu6CQM4we8q/5572518f63a427f90a7b52b047e4c66a/witai-entity-validate.png)\n\nIf you click on the **wit/greetings** entry at the bottom, you will be directed to the entity page that contains all the expressions under that entity.\n\n![witai-expressions](//images.ctfassets.net/1es3ne0caaid/2flNrPZj0kgYeq2mCMo0eE/5560609feebdf8e0c65eb352248a7e49/witai-expressions.png)\n\n## Create a custom entity\n\n`wit/greetings` is an example of a [built-in entity.](https://wit.ai/docs/built-in-entities/20180601) These built-in entities are prefixed by `wit/`, and are defined to extract common expressions from messages. Things like age, money, email address, location and the likes are all covered by Wit.ai’s built-in entities.\n\nYou can train our bot to understand other things that the built-in entities do not cover. For example, let's add an entity that allows our bot to understand a request for a joke.\n\nType \"Tell me a joke\" in the **User says...** input field, and add a new entity called \"getJoke\". As before, use the dropdown on the right to set the value of the entity to **true** and hit the **Validate** button.\n\n![witai-custom-entity](//images.ctfassets.net/1es3ne0caaid/v3wP6YwgGkyuMugQgKkIg/4df89a482c1591f9c01b30a1776a4bc1/witai-custom-entity.png)\n\n## Test your Wit.ai chatbot with curl\n\nGo to the settings page, and type \"Hello\" in the input field that says **Type something to cURL**, then copy the command to your clipboard using the copy icon on the right.\n\n![witai-curl-test-1](//images.ctfassets.net/1es3ne0caaid/l8yw7etu6WKkEAmmy2GAw/f606daeb4dd84584905e900604cca448/witai-curl-test-1.png)\n\nOpen a terminal window and paste in the command, then press Enter. This would produce some output in your terminal that shows the entity that your query matches.\n\n![witai-curl-test-2](//images.ctfassets.net/1es3ne0caaid/6xRWJ4lpOoooMc8aAyYcAO/b68aaf6d165bb588ba538613525b88d1/witai-curl-test-2.png)\n\n## Set up the server component\n\nWe need to setup a server component so that we can pass messages sent through the frontend of the app to Wit.ai for processing.\n\nRun the following command to install the dependencies we’ll be needing on the server side:\n\n```\n    npm install --save express body-parser cors node-wit dotenv\n```\n\nNext, create a new file called `server.js` in the root of your project directory and paste in the following code to set up a simple express server:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    const { Wit } = require('node-wit');\n    \n    const client = new Wit({\n      accessToken: process.env.WIT_ACCESS_TOKEN,\n    });\n    \n    const app = express();\n    \n    app.use(cors());\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    \n    app.post('/chat', (req, res) =\u003e {\n      const { message } = req.body;\n      \n      client\n        .message(message)\n        .then(data =\u003e {\n          console.log(data);\n        })\n        .catch(error =\u003e console.log(error));\n    });\n    \n    app.set('port', process.env.PORT || 7777);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nWe've also set up a `/chat` endpoint that receives messages from the frontend of our app and sends it off to the [Wit message API](https://wit.ai/docs/http/20160330#get-intent-via-text-link). Whatever response is received is then logged to the console.\n\nBefore you start the server, create a `variables.env` file in the root of your project directory. You should add this file to your `.gitignore` so that you do not commit it into your repository by accident.\n\nHere’s how your `variables.env` file should look like:\n\n```\n    // variables.env\n    \n    PORT=7777\n    WIT_ACCESS_TOKEN=\u003cyour server access token\u003e\n```\n\nYou can grab your Wit.ai server access token by heading to the settings under API Details.\n\n![witai-server-key](//images.ctfassets.net/1es3ne0caaid/5mNVf378PuCw0a24YOQUiW/1b0b95da1db1be193ed6defa609011ec/witai-server-key.png)\n\nSave the file and run `node server.js` from the root of your project directory to start the server.\n\nNow, send a few messages in the chat window, and watch the terminal where your Node server is running. You should see some output in your terminal that shows the entity that your query matches.\n\n![preact-demo-2](//images.ctfassets.net/1es3ne0caaid/18JOCTILrK8qGWgKu0qowY/b01a7693713d12707214e54209ebb4e2/preact-demo-2.png)\n\n\n![preact-demo-cli](//images.ctfassets.net/1es3ne0caaid/4eAIENajO8yaesgqIom2kK/e3832f087d3fd84f79e31626e1c8c337/preact-demo-cli.png)\n\n## Set up responses for your chatbot\n\nNow that user messages are being passed on to Wit.ai successfully, we need to add a way to detect which entity was matched and send an appropriate response to the user.\n\nWe'll achieve that by setting up a `responses` object that contains a variety of responses for each entity that we defined, and then send a random message when the appropriate entity is matched.\n\nInside the `/chat` route and under the `message` variable, paste in the following code:\n\n``` javascript\n    // server.js\n    \n    const responses = {\n      greetings: [\"Hey, how's it going?\", \"What's good with you?\"],\n    \n      jokes: [\n        'Do I lose when the police officer says papers and I say scissors?',\n        'I have clean conscience. I haven’t used it once till now.',\n        'Did you hear about the crook who stole a calendar? He got twelve months.',\n      ],\n    };\n    \n    const firstEntityValue = (entities, entity) =\u003e {\n      const val =\n        entities \u0026\u0026\n        entities[entity] \u0026\u0026\n        Array.isArray(entities[entity]) \u0026\u0026\n        entities[entity].length \u003e 0 \u0026\u0026\n        entities[entity][0].value;\n        \n      if (!val) {\n        return null;\n      }\n      \n      return val;\n    };\n    \n    const handleMessage = ({ entities }) =\u003e {\n      const greetings = firstEntityValue(entities, 'greetings');\n      const jokes = firstEntityValue(entities, 'getJoke');\n    \n      if (greetings) {\n        return console.log(responses.greetings[\n          Math.floor(Math.random() * responses.greetings.length)\n        ]);\n      }\n    \n      if (jokes) {\n        return console.log(responses.jokes[\n          Math.floor(Math.random() * responses.jokes.length)\n        ]);\n      }\n    \n      return console.log('I can tell jokes! Say \\'tell me a joke\\'')\n    };\n```\n\nThen change the line that says `console.log(data)` to `handleMessage(data)`:\n\n``` javascript\n    // server.js\n    \n    client\n      .message(message)\n      .then(data =\u003e {\n        handleMessage(data);\n      })\n      .catch(error =\u003e console.log(error));\n```\n\nOnce we find an entity that matches, a random message from the appropriate property in the `responses` object is logged to the console. Otherwise the default response is logged.\n\n\n## Set up Pusher Channels for realtime responses\n\nNow, let's integrate Pusher into the app so that our bot can respond to the user in realtime. Head over to the Pusher website and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). Select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app.\n\nOnce your app is created, retrieve your credentials from the API Keys tab, then add the following to your `variables.env` file:\n\n```\n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\n## Integrate Pusher Channels into your Preact application\n\nFirst, install the Pusher Channels client library by running the command below:\n\n```\n    npm install pusher-js\n```\n\nThen import it at the top of `index.js`:\n\n``` javascript\n    import Pusher from 'pusher-js';\n```\n\nNext, we’ll open a connection to Channels and use the  `subscribe()` method from Pusher to subscribe to a new channel called `bot`. Finally, we’ll listen for the `bot-response` on the `bot` channel using the `bind` method and update the application state once we receive a message.\n\nDon’t forget to replace the `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e` placeholder with the appropriate details from your Pusher account dashboard.\n\n``` javascript\n    // index.js\n    \n    componentDidMount() {\n      const pusher = new Pusher('\u003cyour app key\u003e', {\n        cluster: '\u003cyour app cluster\u003e',\n        encrypted: true,\n      });\n    \n      const channel = pusher.subscribe('bot');\n      channel.bind('bot-response', data =\u003e {\n        const msg = {\n          text: data.message,\n          user: 'ai',\n        };\n        this.setState({\n          conversation: [...this.state.conversation, msg],\n        });\n      });\n    }\n```\n\n## Trigger events from the server\n\nAdd the Pusher server library though npm:\n\n```\n    npm install pusher\n```\n\nThen import it at the top of `server.js`:\n\n``` javascript\n    // server.js\n    \n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n```\n\nChange the `handleMessage` function to look like this:\n\n``` javascript\n    // server.js\n    \n    onst handleMessage = ({ entities }) =\u003e {\n      const greetings = firstEntityValue(entities, 'greetings');\n      const jokes = firstEntityValue(entities, 'getJoke');\n      \n      if (greetings) {\n        return pusher.trigger('bot', 'bot-response', {\n          message:\n            responses.greetings[\n              Math.floor(Math.random() * responses.greetings.length)\n            ],\n        });\n      }\n    \n      if (jokes) {\n        return pusher.trigger('bot', 'bot-response', {\n          message:\n            responses.jokes[\n              Math.floor(Math.random() * responses.jokes.length)\n            ],\n        });\n      }\n    \n      return pusher.trigger('bot', 'bot-response', {\n        message: 'I can tell jokes! Say \\'tell me a joke\\'',\n      });\n    };\n```\n\nStop the node server if it is currently running by pressing `Ctrl + C` in the terminal and restart it with `node server.js`. Now you can go ahead and test your bot! Send messages like “hey”, or “Tell me a joke” and you will get replies from the bot.\n\n![preact-demo-3](//images.ctfassets.net/1es3ne0caaid/47YtBeZqT6QUakm8cACS8a/ffaed43b52eeed12e87420590f04f7cc/preact-demo-3.png)\n\n## Conclusion\n\nYou have now learned how easy it is to create a chatbot that incorporates natural language processing with Wit.ai and how to respond in realtime with Pusher Channels.\n\nThanks for reading! Remember that you can find the source code of this app in this [GitHub repository](https://github.com/ayoisaiah/preact-chatbot).","metaTitle":"How to build a chatbot with Preact and Wit.ai","metaDescription":"This tutorial shows how to create a simple chatbot using Preact, Node.js and Wit.ai. The bot will respond to queries in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"53e34Sergc88IA8e4AE2aK","type":"Entry","createdAt":"2018-07-26T07:40:42.110Z","updatedAt":"2018-07-26T07:40:42.110Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app with Go","url":"chat-app-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/go-pusher-chat-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-07-25","description":"This brief tutorial helps you create a simple chat application. You will build the backend in Go, and the frontend in vanilla JavaScript. Users will be able to message in realtime.","prerequisite":"You will need Go 0.10.0+ installed on your machine. A basic knowledge of Go and JavaScript will be helpful.","content":"Communication is an important part of the society we live in. Over the years, the forms of communication available have changed and have been refined to be both far-reaching and fast. With communication today, we can talk to people who are on the other side of the globe in an instant.\n\nTo power this sort of communication, there are some platforms that allow instant messaging such as Facebook, Twitter, Slack.\n\nIn this application, we will consider how to build a realtime chat application using [Go](https://golang.org/doc/install), JavaScript and [Pusher](http://pusher.com/). \n\nHere’s a demo of the final application:\n\n![go-chat-app-demo](//images.ctfassets.net/1es3ne0caaid/4VfVpdecD6ackgA08yAwkc/7150bd3d5e452232f7b8839c13c342ed/go-chat-app-demo.gif)\n\n## Prerequisites\n\nTo follow along with this article, you will need the following:\n\n\n- An IDE of your choice like Visual Studio Code.\n- Go (version \u003e= 0.10.x) installed on your computer. Here’s how you can install [Go.](https://golang.org/doc/install)\n- Basic knowledge of the Go programming language.\n- Basic knowledge of JavaScript.\n\nOnce you have all the above requirements, we can proceed.\n\n\n\u003e Skip the next section if you have already signed up with Pusher and created an application.\n\n\n## Setting up Pusher\n\nThe realtime feature of this chat app will depend on Pusher Channels so you need to create an account [here](https://dashboard.pusher.com/accounts/sign_up) if you don’t already have one. After signing up, you will be asked to create a new application. Do so.\n\n### Enabling client events\n\nWe need to enable the Pusher application to trigger events from the client-side (browser) of the chat app. This is important because it is with this feature that users will be able to send private messages without hitting the backend server. Follow the steps below to activate client events from the [dashboard](https://dashboard.pusher.com):\n\n\n- Select the Channel application.\n- Click on **App Setting** from the horizontal options list.\n- Check the **Enable client events** option.\n![chat-app-go-enable-client-events](//images.ctfassets.net/1es3ne0caaid/r2p5Sr6hLq4eeWMoII8YE/78f08355870ee274ed621530d5fd9f16/chat-app-go-enable-client-events.png)\n- Click on the **Update** button.\n\n\n## Setting up the codebase\n\nLet’s write the terminal commands to create a new folder in the `src` directory that is located in the `$GOPATH`, this folder will be the root directory for this project:\n\n```\n    $ cd $GOPATH/src\n    $ mkdir go-pusher-chat-app\n    $ cd go-pusher-chat-app\n```\n\nIn this folder, we will create the main Go file which will be the entry point for the application and call it `chat.go`. We also need to install the Go Pusher library that we will reference in the `chat.go` file.\n\nRun the following code in the terminal to pull in the Go Pusher package:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\n\u003e ⚠️ If you use Windows and you encounter the error ‘cc.exe: sorry, unimplemented: 64-bit mode not compiled in ‘, then you need a Windows gcc port, such as https://sourceforge.net/projects/mingw-w64/. Also, see this GitHub issue.\n\nOpen the `chat.go` file in your IDE and paste the following code:\n\n``` go\n    // File: ./chat.go\n    package main\n    \n    import (\n        \"encoding/json\"\n        \"fmt\"\n        \"io/ioutil\"\n        \"log\"\n        \"net/http\"\n    \n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n    \n    type user struct {\n        Name  string `json:\"name\" xml:\"name\" form:\"name\" query:\"name\"`\n        Email string `json:\"email\" xml:\"email\" form:\"email\" query:\"email\"`\n    }\n    \n    func main() {\n        http.Handle(\"/\", http.FileServer(http.Dir(\"./public\")))\n    \n        http.HandleFunc(\"/new/user\", registerNewUser)\n        http.HandleFunc(\"/pusher/auth\", pusherAuth)\n    \n        log.Fatal(http.ListenAndServe(\":8090\", nil))\n    }\n```\n\n\u003e ⚠️ Replace `PUSHER_APP_*` keys with the app credentials found on your Pusher dashboard.\n\nIn the code above, we first imported a list of packages then registered a new Pusher client with the credentials from the app we created earlier on the dashboard.\n\nNext, we defined a user struct and included extra definitions to its properties so that Go knows how to handle incoming payloads and bind their various structures with a new instance of the user struct.\n\nLastly, in the main function, we registered three endpoints:\n\n\n- `/` — returns the static files that define the view of the chat app. The static files will be served from a `public` directory.\n- `/new/user` — creates a new user.\n- `/pusher/auth` — authorizes users from the client-side so they can subscribe to private channels and trigger client events.\n\nEach of the last two endpoints has an associated handler function that we will define below. Add the following code to the `chat.go` file before the `main` function:\n\n``` go\n    // File: ./chat.go\n    \n    // [...]\n    \n    func registerNewUser(rw http.ResponseWriter, req *http.Request) {\n        body, err := ioutil.ReadAll(req.Body)\n        if err != nil {\n            panic(err)\n        }\n        \n        var newUser user\n        \n        err = json.Unmarshal(body, \u0026newUser)\n        if err != nil {\n            panic(err)\n        }\n        \n        client.Trigger(\"update\", \"new-user\", newUser)\n        \n        json.NewEncoder(rw).Encode(newUser)\n    }\n    \n    func pusherAuth(res http.ResponseWriter, req *http.Request) {\n        params, _ := ioutil.ReadAll(req.Body)\n        response, err := client.AuthenticatePrivateChannel(params)\n        if err != nil {\n            panic(err)\n        }\n        \n        fmt.Fprintf(res, string(response))\n    }\n    \n    // [...]\n```\n\nIn the `registerNewUser` function, we trigger a Pusher event, `new-user`, on the public channel `update`, so that the new user’s details are sent to the subscribed clients.\n\nThe syntax for triggering a Pusher event over a public channel in Go is:\n\n```\n    client.Trigger(channel, event, data)\n```\n\n## Building the frontend\n\nLet’s create the `public` folder in the root directory of our project because this is where all of the static files will live:\n\n```\n    $ mkdir public\n```\n\nNext, we will navigate into the `public` folder and create two sub-folders to hold our CSS and JavaScript files:\n\n```\n    $ cd public\n    $ mkdir css js\n```\n\nLastly, create an `index.html` file in the root of the `public` folder. This is where we will write the markup for our application.\n\nOpen the `index.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./public/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003eChat with friends in realtime\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"./css/app.css\" \u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cheader\u003e\n            \u003cnav class=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\"\u003e\n                \u003ca class=\"navbar-brand\" href=\"#\"\u003eWelcome\u003c/a\u003e\n            \u003c/nav\u003e\n        \u003c/header\u003e\n        \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"row\" id=\"mainrow\"\u003e\n                \u003cnav class=\"col-sm-3 col-md-2 d-none d-sm-block bg-light sidebar\"\u003e\n                    \u003cul class=\"nav nav-pills flex-column\" id=\"rooms\"\u003e\n                    \u003c/ul\u003e\n                \u003c/nav\u003e\n                \u003cmain role=\"main\" class=\"col-sm-9 ml-sm-auto col-md-10 pt-3\" id=\"registerScreen\"\u003e\n                    \u003ch3 style=\"text-align: center\"\u003eType in your details to chat\u003c/h3\u003e\n                    \u003chr/\u003e\n                    \u003cdiv class=\"chat\" style=\"margin-bottom:150px\"\u003e\n                        \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                        \u003cform id=\"loginScreenForm\"\u003e\n                            \u003cdiv class=\"form-group\"\u003e\n                              \u003cinput type=\"text\" class=\"form-control\" id=\"fullname\" placeholder=\"Name\" required\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"form-group\"\u003e\n                              \u003cinput type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email Address\" required\u003e\n                            \u003c/div\u003e\n                            \u003cbutton type=\"submit\" class=\"btn btn-block btn-primary\"\u003eSubmit\u003c/button\u003e\n                          \u003c/form\u003e\n                      \u003c/div\u003e\n                \u003c/main\u003e\n    \n                \u003cmain role=\"main\" class=\"col-sm-9 ml-sm-auto col-md-10 pt-3\" style=\"display: none\" id=\"main\"\u003e\n                    \u003ch1\u003eChats\u003c/h1\u003e\n                    \u003cp\u003e👈 Select a chat to load the messages\u003c/p\u003e\n                    \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                    \u003cdiv class=\"chat\" style=\"margin-bottom:150px\"\u003e\n                        \u003ch5 id=\"room-title\"\u003e\u003c/h5\u003e\n                        \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                        \u003cdiv class=\"response\"\u003e\n                            \u003cform id=\"replyMessage\"\u003e\n                                \u003cdiv class=\"form-group\"\u003e\n                                    \u003cinput type=\"text\" placeholder=\"Enter Message\" class=\"form-control\" name=\"message\" /\u003e\n                                \u003c/div\u003e\n                            \u003c/form\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"table-responsive\"\u003e\n                          \u003ctable class=\"table table-striped\"\u003e\n                            \u003ctbody id=\"chat-msgs\"\u003e\n                            \u003c/tbody\u003e\n                        \u003c/table\u003e\n                    \u003c/div\u003e\n                \u003c/main\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript type=\"text/javascript\" src=\"./js/app.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nAbove we have the HTML for the home page. Let’s add some styling. Create a new file `app.css` in the `public/css` directory and add the following code:\n\n``` css\n    /* File: ./public/css.app.css */\n    body {\n        padding-top: 3.5rem;\n    }\n    h1 {\n        padding-bottom: 9px;\n        margin-bottom: 20px;\n        border-bottom: 1px solid #eee;\n    }\n    .chat {\n        max-width: 80%;\n        margin: 0 auto;\n    }\n    .sidebar {\n        position: fixed;\n        top: 51px;\n        bottom: 0;\n        left: 0;\n        z-index: 1000;\n        padding: 20px 0;\n        overflow-x: hidden;\n        overflow-y: auto;\n        border-right: 1px solid #eee;\n    }\n    .sidebar .nav {\n        margin-bottom: 20px;\n    }\n    .sidebar .nav-item {\n        width: 100%;\n    }\n    .sidebar .nav-item + .nav-item {\n        margin-left: 0;\n    }\n    .sidebar .nav-link {\n        border-radius: 0;\n    }\n    .placeholders {\n        padding-bottom: 3rem;\n    }\n    .placeholder img {\n        padding-top: 1.5rem;\n        padding-bottom: 1.5rem;\n    }\n    tr .sender {\n        font-size: 12px;\n        font-weight: 600;\n    }\n    tr .sender span {\n        color: #676767;\n    }\n    .response {\n        display: none;\n    }\n```\n\nNext, let’s write the JavaScript for the application. Create a new `app.js` file in the `public/js` directory and add the following code:\n\n``` javascript\n    // File: ./public/js/app.js\n    (function () {\n        var pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: '/pusher/auth',\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n    \n        let chat = {\n            name: undefined,\n            email: undefined,\n            endUserName: undefined,\n            currentRoom: undefined,\n            currentChannel: undefined,\n            subscribedChannels: [],\n            subscribedUsers: []\n        }\n    \n        var publicChannel = pusher.subscribe('update');\n    \n        const chatBody = $(document)\n        const chatRoomsList = $('#rooms')\n        const chatReplyMessage = $('#replyMessage')\n    \n        const helpers = {\n            clearChatMessages: () =\u003e {\n                $('#chat-msgs').html('')\n            },\n            \n            displayChatMessage: (message) =\u003e {\n                if (message.email === chat.email) {\n                    $('#chat-msgs').prepend(\n                        `\u003ctr\u003e\n                            \u003ctd\u003e\n                                \u003cdiv class=\"sender\"\u003e${message.sender} @ \u003cspan class=\"date\"\u003e${message.createdAt}\u003c/span\u003e\u003c/div\u003e\n                                \u003cdiv class=\"message\"\u003e${message.text}\u003c/div\u003e\n                            \u003c/td\u003e\n                        \u003c/tr\u003e`\n                    )\n                }\n            },\n    \n            loadChatRoom: evt =\u003e {\n                chat.currentRoom = evt.target.dataset.roomId\n                chat.currentChannel = evt.target.dataset.channelId\n                chat.endUserName =  evt.target.dataset.userName\n                if (chat.currentRoom !== undefined) {\n                    $('.response').show()\n                    $('#room-title').text('Write a message to ' + evt.target.dataset.userName+ '.')\n                }\n    \n                evt.preventDefault()\n                helpers.clearChatMessages()\n            },\n    \n            replyMessage: evt =\u003e {\n                evt.preventDefault()\n                \n                let createdAt = new Date().toLocaleString()            \n                let message = $('#replyMessage input').val().trim()\n                let event = 'client-' + chat.currentRoom\n                \n                chat.subscribedChannels[chat.currentChannel].trigger(event, {\n                    'sender': chat.name,\n                    'email': chat.currentRoom,\n                    'text': message, \n                    'createdAt': createdAt \n                });\n                \n                $('#chat-msgs').prepend(\n                    `\u003ctr\u003e\n                        \u003ctd\u003e\n                            \u003cdiv class=\"sender\"\u003e\n                                ${chat.name} @ \u003cspan class=\"date\"\u003e${createdAt}\u003c/span\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"message\"\u003e${message}\u003c/div\u003e\n                        \u003c/td\u003e\n                    \u003c/tr\u003e`\n                )\n                \n                $('#replyMessage input').val('')\n            },\n    \n            LogIntoChatSession: function (evt) {\n                const name  = $('#fullname').val().trim()\n                const email = $('#email').val().trim().toLowerCase()\n                \n                chat.name = name;\n                chat.email = email;\n    \n                chatBody.find('#loginScreenForm input, #loginScreenForm button').attr('disabled', true)\n                \n                let validName = (name !== '' \u0026\u0026 name.length \u003e= 3)\n                let validEmail = (email !== '' \u0026\u0026 email.length \u003e= 5)\n                \n                if (validName \u0026\u0026 validEmail) {\n                    axios.post('/new/user', {name, email}).then(res =\u003e {\n                        chatBody.find('#registerScreen').css(\"display\", \"none\");\n                        chatBody.find('#main').css(\"display\", \"block\");\n                        \n                        chat.myChannel = pusher.subscribe('private-' + res.data.email)\n                        chat.myChannel.bind('client-' + chat.email, data =\u003e {\n                            helpers.displayChatMessage(data)\n                        })\n                    })\n                } else {\n                    alert('Enter a valid name and email.')\n                }\n                \n                evt.preventDefault()\n            }\n        }\n    \n    \n        publicChannel.bind('new-user', function(data) {\n            if (data.email != chat.email){\n                chat.subscribedChannels.push(pusher.subscribe('private-' + data.email));\n                chat.subscribedUsers.push(data);\n                \n                $('#rooms').html(\"\");\n        \n                chat.subscribedUsers.forEach((user, index) =\u003e {\n                    $('#rooms').append(\n                        `\u003cli class=\"nav-item\"\u003e\u003ca data-room-id=\"${user.email}\" data-user-name=\"${user.name}\" data-channel-id=\"${index}\" class=\"nav-link\" href=\"#\"\u003e${user.name}\u003c/a\u003e\u003c/li\u003e`\n                    )\n                })\n            }\n        })\n    \n        chatReplyMessage.on('submit', helpers.replyMessage)\n        chatRoomsList.on('click', 'li', helpers.loadChatRoom)\n        chatBody.find('#loginScreenForm').on('submit', helpers.LogIntoChatSession)\n    }());\n```\n\nIn the script above, we instantiated the Pusher object (replace the `PUSHER_APP_*` keys with the credentials on your Pusher dashboard). \n\nNext, we define some helper methods that will help us interact with the chat window and with the backend API. Some of the methods defined in the `helpers` object are:\n\n\n- `clearChatMessages` - clears the chat message window.\n- `displayChatMessage` - displays a new chat message in the current window.\n- `loadChatRoom` - shows a users chat messages in the general chat window after a room is selected.\n- `replyMessage` - sends a chat message to the current room.\n- `LogIntoChatSession` - creates a new chat session.\n\nAfter defining the `helpers` object, we bind to the `new-user` event on the `publicChannel`. In the callback, we subscribe to private channels so the communication is secure. \n\nAt the bottom of the script, we register all the event listeners and start the chat session.\n\n\n## Running the application\n\nTo test the chat app, we can start the Go backend server with this command:\n\n```\n    $ go run chat.go\n```\n\nTo see the app in action, we will visit this address, http://127.0.0.1:8090, on a web browser in multiple windows and test the instant messaging features. \n\nHere’s a demo of the chat app:\n\n![go-chat-app-demo](//images.ctfassets.net/1es3ne0caaid/4VfVpdecD6ackgA08yAwkc/7150bd3d5e452232f7b8839c13c342ed/go-chat-app-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have learned how to leverage the Pusher SDK in creating a chat application powered by a Go backend server. \n\nThe source code for this tutorial is available on [GitHub](https://github.com/neoighodaro/go-pusher-chat-app).","metaTitle":"Build a chat app with Go","metaDescription":"Use Go and JavaScript to create a simple realtime messenger application."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2R3OOdRWOcK8gi8mkcom8i","type":"Entry","createdAt":"2018-07-29T20:22:52.067Z","updatedAt":"2018-07-29T20:22:52.067Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an Android messenger app with online presence using Kotlin","url":"android-messenger-presence-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/kotlin-messenger-app-with-online-presence-status","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}}],"reviewDate":"2018-07-25","description":"This tutorial shows how to build an Android messaging app featuring online presence functionality. Use Node and MongoDB to create a simple backend, and Kotlin to program the app. Users will be able to log in and see who is online.","prerequisite":"You will need Android Studio 3+, Node, npm and MongoDB installed on your machine. Some familiarity with Android development is required.","content":"When building a chat application, it is essential to have an online presence feature. It is essential because your users will like to know when their friends are online and are more likely to respond to their messages.\n\nIn this article, we will be building a messenger app with online presence using Pusher Channels, Kotlin and Node.js. \n\nHere is a demo of what we will build:\n\n![android-messenger-presence-demo](//images.ctfassets.net/1es3ne0caaid/mmdMFfq7WoYsk26cIKocs/486ce2b458e45a41cfeb01ab4441f3b4/android-messenger-presence-demo.gif)\n\n# Prerequisites\n\nTo follow along you need the following requirements:\n\n\n- A Pusher Channel app. You can create one [here](https://pusher.com/channels).\n- Android Studio installed on your machine. You can check [here](https://developer.android.com/studio/index.html) for the latest stable version. A minimum of version 3.0 is recommended.\n- Basic knowledge of Android development and the Android Studio IDE.\n- Basic knowledge of Kotlin. Here are the [official docs](https://kotlinlang.org/docs/reference/).\n- Node.js and NPM (Node Package Manager) installed on your machine. Download [here](https://nodejs.org/en/).\n- Mongo DB installed on your machine. You can install it following the instructions [here](https://docs.mongodb.com/manual/installation/).\n\n\n## Building the backend server\n\nOur server will be built using Node.js. To start, create a new project directory:\n\n```\n    $ mkdir backend-server\n```\n\nNext, create a new `index.js` file inside the project directory and paste the following code:\n\n``` javascript\n    // File: ./index.js\n    var express = require('express');\n    var bodyParser = require('body-parser');\n    const mongoose = require('mongoose');\n    var Pusher = require('pusher');\n    \n    var app = express();\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    var pusher = new Pusher({\n      appId: 'PUSHER_APP_ID',\n      key: 'PUSHER_APP_KEY',\n      secret: 'PUSHER_APP_SECRET',\n      cluster: 'PUSHER_APP_CLUSTER'\n    });\n    \n    mongoose.connect('mongodb://127.0.0.1/db');\n    \n    const Schema = mongoose.Schema;\n    const userSchema = new Schema({\n        name: { type: String, required: true, },\n        count: {type: Number}\n    });\n    \n    var User = mongoose.model('User', userSchema);\n    userSchema.pre('save', function(next) {\n        if (this.isNew) {\n            User.count().then(res =\u003e {\n              this.count = res; // Increment count\n              next();\n            });\n          } else {\n            next();\n          }\n    });\n    \n    module.exports = User;\n    \n    var currentUser;\n    \n    /* \n    =================================\n    We will add our endpoints here!!!\n    =================================\n    */\n    \n    var port = process.env.PORT || 5000;\n    \n    app.listen(port);\n```\n\nIn the snippet above, we initialized Pusher, Express, and MongoDB. We are using [Moongose](http://mongoosejs.com/) to connect to our MongoDB instance.\n\n\n\u003e Replace the `PUSHER_APP_*` keys with the ones on your Pusher dashboard.\n  \n\nNow let’s add our endpoints. The first endpoint we will add will be to log a user in. Paste the code below in your `index.js` file below the `currentUser` declaration:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/login', (req,res) =\u003e {\n        User.findOne({name: req.body.name}, (err, user) =\u003e {\n            if (err) {\n                res.send(\"Error connecting to database\");\n            }\n            \n            // User exists\n            if (user) {\n                currentUser = user;\n                return res.status(200).send(user)\n            }\n            \n            let newuser = new User({name: req.body.name});\n    \n            newuser.save(function(err) {\n                if (err) throw err;\n            });\n            \n            currentUser = newuser;\n            res.status(200).send(newuser)\n        });\n    })\n    \n    // [...]\n```\n\nThis endpoint receives a `username` with the request, and either create a new user or returns the data of the existing user. \n\nLet’s add the next endpoint below the one above:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.get('/users', (req,res) =\u003e {\n        User.find({}, (err, users) =\u003e {\n            if (err) throw err;\n            res.send(users);\n        });\n    })\n    \n    // [...]\n```\n\nThis endpoint above fetches all the users from the database and returns them. \n\nSince we will be using a Pusher presence channel, we need an endpoint to authenticate the user. In the same file, paste this code below the endpoint above:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/pusher/auth/presence', (req, res) =\u003e {\n        let socketId = req.body.socket_id;\n        let channel = req.body.channel_name;\n      \n        let presenceData = {\n            user_id: currentUser._id,\n            user_info: {count: currentUser.count, name: currentUser.name}\n        };\n      \n        let auth = pusher.authenticate(socketId, channel, presenceData);\n    \n        res.send(auth);\n    });\n    \n    // [...]\n```\n\nSince we are going to be using private channels, we need an endpoint for authentication. Add the following endpoint below the endpoint above:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/pusher/auth/private', (req, res) =\u003e {\n        res.send(pusher.authenticate(req.body.socket_id, req.body.channel_name));\n    });\n    \n    // [...]\n\nFinally, the last endpoint will be to trigger an event `new-message` to a channel. Add the endpoint below the last one:\n\n\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/send-message', (req, res) =\u003e {\n        let payload = {message: req.body.message, sender_id: req.body.sender_id}\n        pusher.trigger(req.body.channel_name, 'new-message', payload);\n        res.send(200);\n    });\n    \n    // [...]\n```\n\nAfter adding all the endpoints, install the necessary NPM packages by running this command:\n\n```\n    $ npm install express body-parser mongoose pusher\n```\n\nBefore you run your application, make sure MongoDB is running already using this command:\n\n```\n    $ mongod --dbpath C:\\MongoDB\\data\\db # Windows\n    $ mongod --dbpath=/path/to/db/directory # Mac or Linux\n```\n\nNow you can run your application using the command below:\n\n```\n    $ node index.js\n```\n\nYour app will be available here: http://localhost:5000.\n\n\n## Building our Android application\n\nCreate your Android project. In the wizard, enter your project name, let’s say **MessengerApp.**  Next, enter your package name. You can use a minimum SDK of 19 then choose an **Empty Activity**. On the next page, change the **Activity Name** to `LoginActivity`. After this, Android Studio will build your project for you.\n\nNow that we have the project, let’s add the required dependencies for our app. Open your app module `build.gradle` file and add these:\n\n```\n    // File ../app/build.gradle\n    dependencies {\n      // [...]\n      \n      implementation 'com.android.support:design:28+'\n      implementation 'com.pusher:pusher-java-client:1.6.0'\n      implementation \"com.squareup.retrofit2:retrofit:2.4.0\"\n      implementation \"com.squareup.retrofit2:converter-scalars:2.4.0\"\n      implementation 'com.squareup.retrofit2:converter-gson:2.3.0'\n    }\n```\n\nNotably, we added the dependencies for [Retrofit](http://square.github.io/retrofit/) and Pusher. Retrofit is an HTTP client library used for network calls. We added the design library dependency too as we want to use some classes from it. Sync your gradle files to pull in the dependencies.\n\nNext, let’s prepare our app to make network calls. Retrofit requires an interface to know the endpoints to be accessed. \n\nCreate a new interface named `ApiService` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ApiService.kt\n    import okhttp3.RequestBody\n    import retrofit2.Call\n    import retrofit2.http.Body\n    import retrofit2.http.GET\n    import retrofit2.http.POST\n    \n    interface ApiService {\n    \n      @POST(\"/login\")\n      fun login(@Body body:RequestBody): Call\u003cUserModel\u003e\n    \n      @POST(\"/send-message\")\n      fun sendMessage(@Body body:RequestBody): Call\u003cString\u003e\n    \n      @GET(\"/users\")\n      fun getUsers(): Call\u003cList\u003cUserModel\u003e\u003e\n    }\n```\n\nHere, we have declared three endpoints. They are for logging in, sending messages and fetching users. Notice that in some of our responses, we return `Call\u003cUserModel\u003e`. Let’s create the `UserModel`. Create a new class called `UserModel` and paste the following:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/UserModel.kt\n    import com.google.gson.annotations.Expose\n    import com.google.gson.annotations.SerializedName\n    \n    data class UserModel(@SerializedName(\"_id\") @Expose var id: String,\n                         @SerializedName(\"name\") @Expose var name: String,\n                         @SerializedName(\"count\") @Expose var count: Int,\n                         var online:Boolean = false)\n```\n\nAbove, we used a data class so that some other functions required for model classes such as `toString`, `hashCode` are added to the class by default. \n\nWe are expecting only the values for the `id` and `name` from the server. We added the `online` property so we can update later on. \n\nNext, create a new class named `RetrofitInstance` and paste the following code:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/RetrofitInstance.kt\n    import okhttp3.OkHttpClient\n    import retrofit2.Retrofit\n    import retrofit2.converter.gson.GsonConverterFactory\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    \n    class RetrofitInstance {\n    \n      companion object {\n        val retrofit: ApiService by lazy {\n          val httpClient = OkHttpClient.Builder()\n          val builder = Retrofit.Builder()\n              .baseUrl(\"http://10.0.2.2:5000/\")\n              .addConverterFactory(ScalarsConverterFactory.create())\n              .addConverterFactory(GsonConverterFactory.create())\n    \n          val retrofit = builder\n              .client(httpClient.build())\n              .build()\n          retrofit.create(ApiService::class.java)\n        }\n      }\n    }\n```\n\nThis class contains a class variable called `retrofit`. It provides us with an instance for Retrofit that we will reference in more than one class.\n\nFinally, to request for the internet access permission update the `AndroidManifest.xml` file like so:\n\n``` kotlin\n    // File: ./app/src/main/ApiService.kt\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      package=\"com.example.messengerapp\"\u003e\n    \n      \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n      [...]\n    \n    \u003c/manifest\u003e\n```\n\nNow we can make requests using Retrofit. \n\nThe next feature we will implement is login. Open the already created `LoginActivity` layout file `activity_login.xml` file and paste this:\n\n``` xml\n    // File: ./app/src/main/res/layout/activity_login.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      android:layout_margin=\"20dp\"\n      tools:context=\".LoginActivity\"\u003e\n    \n      \u003cEditText\n        android:id=\"@+id/editTextUsername\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n      \u003cButton\n        android:id=\"@+id/loginButton\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Login\"\n        app:layout_constraintTop_toBottomOf=\"@+id/editTextUsername\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nThis layout contains an input field to take the username and a button to make a login request. \n\nNext, open the `LoginActivity.Kt` file and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/LoginActivity.kt\n    import android.content.Intent\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.util.Log\n    import kotlinx.android.synthetic.main.activity_login.*\n    import okhttp3.MediaType\n    import okhttp3.RequestBody\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class LoginActivity : AppCompatActivity() {\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_login)\n        loginButton.setOnClickListener {\n          if (editTextUsername.text.isNotEmpty()) {\n            loginFunction(editTextUsername.text.toString())\n          }\n        }\n      }\n    \n      private fun loginFunction(name:String) {\n        val jsonObject = JSONObject()\n        jsonObject.put(\"name\", name)\n        \n        val jsonBody = RequestBody.create(\n            MediaType.parse(\"application/json; charset=utf-8\"), \n            jsonObject.toString()\n        )\n    \n        RetrofitInstance.retrofit.login(jsonBody).enqueue(object:Callback\u003cUserModel\u003e {\n          override fun onFailure(call: Call\u003cUserModel\u003e?, t: Throwable?) {\n            Log.i(\"LoginActivity\",t!!.localizedMessage)\n          }\n    \n          override fun onResponse(call: Call\u003cUserModel\u003e?, response: Response\u003cUserModel\u003e?) {\n            if (response!!.code() == 200) {\n              Singleton.getInstance().currentUser = response.body()!!\n              startActivity(Intent(this@LoginActivity,ContactListActivity::class.java))\n              finish()\n            }\n          }\n        })\n      }\n    }\n```\n\nIn the file, we set up a listener for our login button so that when it is clicked, we can send the text to the server for authentication. We also stored the logged in user in a singleton class so that we can access the user’s details later. \n\nCreate a new class called `Singleton` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/RetrofitInstance.kt\n    class Singleton {\n      companion object {\n        private val ourInstance = Singleton()\n        fun getInstance(): Singleton {\n          return ourInstance\n        }\n      }\n      lateinit var currentUser: UserModel\n    }\n```\n\n\nWith this class, we will have access to the `currentUser`, which is the logged in user.\n\nNext, let’s create a new activity named `ContactListActivity`. For now, leave the class empty and open the corresponding layout file named `activity_contact_list` and paste the following:\n\n``` xml\n    // File: ./app/src/main/res/layout/activity_contact_list.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      tools:context=\".ContactListActivity\"\u003e\n    \n      \u003candroid.support.v7.widget.RecyclerView\n        android:layout_width=\"match_parent\"\n        android:id=\"@+id/recyclerViewUserList\"\n        android:layout_height=\"match_parent\"/\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\n\nThe layout contains a recycler view, which will give us all the list of our contacts fetched from the database. Since we are displaying items in a list, we will need an adapter class to manage how items are inflated to the layout. \n\nCreate a new class named `ContactRecyclerAdapter` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ContactRecyclerAdapter.kt\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.ImageView\n    import android.widget.TextView\n    import java.util.*\n    \n    class ContactRecyclerAdapter(private var list: ArrayList\u003cUserModel\u003e, private var listener: UserClickListener)\n      : RecyclerView.Adapter\u003cContactRecyclerAdapter.ViewHolder\u003e() {\n      \n      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        return ViewHolder(LayoutInflater.from(parent.context)\n            .inflate(R.layout.user_list_row, parent, false))\n      }\n    \n      override fun onBindViewHolder(holder: ViewHolder, position: Int) = holder.bind(list[position])\n    \n      override fun getItemCount(): Int = list.size\n    \n      fun showUserOnline(updatedUser: UserModel) {\n        list.forEachIndexed { index, element -\u003e\n          if (updatedUser.id == element.id) {\n            updatedUser.online = true\n            list[index] = updatedUser\n            notifyItemChanged(index)\n          }\n    \n        }\n      }\n    \n      fun showUserOffline(updatedUser: UserModel) {\n        list.forEachIndexed { index, element -\u003e\n          if (updatedUser.id == element.id) {\n            updatedUser.online = false\n            list[index] = updatedUser\n            notifyItemChanged(index)\n          }\n        }\n      }\n    \n      fun add(user: UserModel) {\n        list.add(user)\n        notifyDataSetChanged()\n      }\n    \n      inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        private val nameTextView: TextView = itemView.findViewById(R.id.usernameTextView)\n        private val presenceImageView: ImageView = itemView.findViewById(R.id.presenceImageView)\n    \n        fun bind(currentValue: UserModel) = with(itemView) {\n          this.setOnClickListener {\n            listener.onUserClicked(currentValue)\n          }\n          nameTextView.text = currentValue.name\n          if (currentValue.online){\n            presenceImageView.setImageDrawable(this.context.resources.getDrawable(R.drawable.presence_icon_online))\n          } else {\n            presenceImageView.setImageDrawable(this.context.resources.getDrawable(R.drawable.presence_icon))\n    \n          }\n    \n        }\n      }\n    \n      interface UserClickListener {\n        fun onUserClicked(user: UserModel)\n      }\n    }\n```\n\nThis adapter has some overridden methods and some custom methods. \n\nThe `onCreateViewHolder` inflates how each row will look like. `onBindViewHolder` binds the data to each item by calling the `bind` method in the inner `ViewHolder` class. The `getItemCount` gives the size of the list. \n\nFor our custom methods, `showUserOffline` updates the user and shows when they are offline. While `showUserOnline` does the opposite. Finally, we have the `add` method, which adds a new contact to the list and refreshes it.\n\nIn the adapter class above, we used a new layout named `user_list_row`. Create a new layout `user_list_row` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/layout/user_list_row.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout\n      android:orientation=\"horizontal\"\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      android:layout_margin=\"20dp\"\n      android:gravity=\"center\"\n      tools:context=\".LoginActivity\"\u003e\n    \n      \u003cImageView\n        android:id=\"@+id/presenceImageView\"\n        android:layout_width=\"15dp\"\n        android:layout_height=\"15dp\"\n        app:srcCompat=\"@drawable/presence_icon\" /\u003e\n    \n      \u003cTextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        tools:text=\"Neo\"\n        android:textSize=\"20sp\"\n        android:layout_marginStart=\"10dp\"\n        android:id=\"@+id/usernameTextView\"\n        app:layout_constraintTop_toBottomOf=\"@+id/editTextUsername\"\n        /\u003e\n    \n    \u003c/LinearLayout\u003e\n```\n\nThis layout is the visual representation of how each item on the layout will look like. The layout has an image view that shows the users online status. The layout also has a textview that shows the name of the contact beside the icon. The icons are vector drawables. Let’s create the files. \n\nCreate a new drawable named `presence_icon_online` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/drawable/presence_icon_online.xml\n    \u003cvector android:height=\"24dp\" android:tint=\"#3FFC3C\"\n        android:viewportHeight=\"24.0\" android:viewportWidth=\"24.0\"\n        android:width=\"24dp\" xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e\n        \u003cpath android:fillColor=\"#FF000000\" android:pathData=\"M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2z\"/\u003e\n    \u003c/vector\u003e\n```\n\n\nCreate another drawable named `presence_icon` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/drawable/presence_icon.xml\n    \u003cvector android:height=\"24dp\" android:tint=\"#C0C0C6\"\n        android:viewportHeight=\"24.0\" android:viewportWidth=\"24.0\"\n        android:width=\"24dp\" xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e\n        \u003cpath android:fillColor=\"#FF000000\" android:pathData=\"M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2z\"/\u003e\n    \u003c/vector\u003e\n```\n\nNext, open the `ContactListActivity` class and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ContactListActivity.kt\n    import android.content.Intent\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import com.pusher.client.channel.PresenceChannelEventListener\n    import com.pusher.client.channel.User\n    import com.pusher.client.util.HttpAuthorizer\n    import kotlinx.android.synthetic.main.activity_contact_list.*\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class ContactListActivity : AppCompatActivity(),\n        ContactRecyclerAdapter.UserClickListener {\n    \n      private val mAdapter = ContactRecyclerAdapter(ArrayList(), this)\n      \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_contact_list)\n        setupRecyclerView()\n        fetchUsers()\n        subscribeToChannel()\n      }\n    \n    }\n```\n\nIn this class, we initialized the `ContactRecyclerAdapter`, then called three functions in the `onCreate` method. Let’s create these new functions. \n\nIn the same class, add the following methods:\n\n``` kotlin\n    private fun setupRecyclerView() {\n      with(recyclerViewUserList) {\n        layoutManager = LinearLayoutManager(this@ContactListActivity)\n        adapter = mAdapter\n      }\n    }\n    \n    private fun fetchUsers() {\n      RetrofitInstance.retrofit.getUsers().enqueue(object : Callback\u003cList\u003cUserModel\u003e\u003e {\n        override fun onFailure(call: Call\u003cList\u003cUserModel\u003e\u003e?, t: Throwable?) {}\n        override fun onResponse(call: Call\u003cList\u003cUserModel\u003e\u003e?, response: Response\u003cList\u003cUserModel\u003e\u003e?) {\n          for (user in response!!.body()!!) {\n            if (user.id != Singleton.getInstance().currentUser.id) {\n              mAdapter.add(user)\n            }\n          }\n        }\n      })\n    }\n    \n    private fun subscribeToChannel() {\n    \n      val authorizer = HttpAuthorizer(\"http://10.0.2.2:5000/pusher/auth/presence\")\n      val options = PusherOptions().setAuthorizer(authorizer)\n      options.setCluster(\"PUSHER_APP_CLUSTER\")\n    \n      val pusher = Pusher(\"PUSHER_APP_KEY\", options)\n      pusher.connect()\n    \n      pusher.subscribePresence(\"presence-channel\", object : PresenceChannelEventListener {\n        override fun onUsersInformationReceived(p0: String?, users: MutableSet\u003cUser\u003e?) {\n          for (user in users!!) {\n            if (user.id!=Singleton.getInstance().currentUser.id){\n              runOnUiThread {\n                mAdapter.showUserOnline(user.toUserModel())\n              }\n            }\n          }\n        }\n    \n        override fun onEvent(p0: String?, p1: String?, p2: String?) {}\n        override fun onAuthenticationFailure(p0: String?, p1: Exception?) {}\n        override fun onSubscriptionSucceeded(p0: String?) {}\n    \n        override fun userSubscribed(channelName: String, user: User) {\n          runOnUiThread {\n            mAdapter.showUserOnline(user.toUserModel())\n          }\n        }\n    \n        override fun userUnsubscribed(channelName: String, user: User) {\n          runOnUiThread {\n            mAdapter.showUserOffline(user.toUserModel())\n          }\n        }\n      })\n    }\n    \n    override fun onUserClicked(user: UserModel) {\n      val intent = Intent(this, ChatRoom::class.java)\n      intent.putExtra(ChatRoom.EXTRA_ID,user.id)\n      intent.putExtra(ChatRoom.EXTRA_NAME,user.name)\n      intent.putExtra(ChatRoom.EXTRA_COUNT,user.count)\n      startActivity(intent)\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*`  keys with the values on your dashboard.\n\n\n- `setupRecyclerView` assigns a layout manager and an adapter to the recycler view. For a recycler view to work, you need these two things. \n- `fetchUsers` fetches all the users from the server and displays on the list. It exempts the current user logged in.\n- `subcribeToChannel` subscribes to a presence channel. When you subscribe to one, the `onUsersInformationReceived` gives you all the users subscribed to the channel including the current user. So, in that callback, we call the `showUserOnline` method in the adapter class so that the icon beside the user can be changed to signify that the user is online.\n- `onUserClicked` is called when a contact is selected. We pass the details of the user to the next activity called `ChatRoom`.\n\nIn the previous snippet, we used an extension function to transform the `User` object we receive from Pusher to our own `UserModel` object. Let’s define this extension.\n\nCreate a new class called `Utils` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/Utils.kt\n    import com.pusher.client.channel.User\n    import org.json.JSONObject\n    \n    fun User.toUserModel():UserModel{\n      val jsonObject = JSONObject(this.info)\n      val name = jsonObject.getString(\"name\")\n      val numb = jsonObject.getInt(\"count\")\n      return UserModel(this.id, name, numb)\n    }\n```\n\nNow, since we referenced a `ChatRoom` activity earlier in the `onUserClicked` method, let’s create it. \n\nCreate a new activity called `ChatRoom`. The activity comes with a layout file `activity_chat_room`, paste this in the layout file:\n\n``` xml\n    // File: ./app/src/main/res/layout/activity_chat_room.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      tools:context=\".ChatRoom\"\u003e\n    \n      \u003candroid.support.v7.widget.RecyclerView\n        android:id=\"@+id/recyclerViewChat\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" /\u003e\n    \n      \u003cEditText\n        android:id=\"@+id/editText\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"16dp\"\n        android:hint=\"Enter a message\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toStartOf=\"@+id/sendButton\"\n        app:layout_constraintStart_toStartOf=\"parent\" /\u003e\n    \n      \u003candroid.support.design.widget.FloatingActionButton\n        android:id=\"@+id/sendButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"end|bottom\"\n        android:layout_margin=\"16dp\"\n        android:src=\"@android:drawable/ic_menu_send\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nThe layout above contains a recycler view for the chat messages, an edit text to collect new messages, and a floating action button to send the message. \n\nNext, create a new class called `ChatRoomAdapter` and paste the following:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ChatRoomAdapter.kt\n    import android.support.v7.widget.CardView\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.RelativeLayout\n    import android.widget.TextView\n    import java.util.*\n    \n    class ChatRoomAdapter (private var list: ArrayList\u003cMessageModel\u003e)\n      : RecyclerView.Adapter\u003cChatRoomAdapter.ViewHolder\u003e() {\n    \n      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        return ViewHolder(LayoutInflater.from(parent.context)\n            .inflate(R.layout.chat_item, parent, false))\n      }\n    \n      override fun onBindViewHolder(holder: ViewHolder, position: Int) = holder.bind(list[position])\n    \n      override fun getItemCount(): Int = list.size\n    \n      fun add(message: MessageModel) {\n        list.add(message)\n        notifyDataSetChanged()\n      }\n    \n      inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        private val messageTextView: TextView = itemView.findViewById(R.id.text)\n        private val cardView: CardView = itemView.findViewById(R.id.cardView)\n    \n        fun bind(message: MessageModel) = with(itemView) {\n          messageTextView.text = message.message\n          val params = cardView.layoutParams as RelativeLayout.LayoutParams\n          if (message.senderId==Singleton.getInstance().currentUser.id) {\n            params.addRule(RelativeLayout.ALIGN_PARENT_RIGHT)\n          }\n        }\n      }\n    }\n```\n\nThis adapter works in a similar fashion as the one we created earlier. One difference though is that the show online and offline methods are not needed here.\n\nNext, create another class named `MessageModel` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/MessageModel.kt\n    data class MessageModel(val message: String, val senderId: String)\n```\n\nThe `chat_item` layout used in the `onCreateViewHolder` method of the adapter class represents how each layout will look like. Create a new layout called `chat_item` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/layout/chat_item.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      android:layout_margin=\"16dp\"\n      android:orientation=\"vertical\"\u003e\n    \n      \u003candroid.support.v7.widget.CardView\n        android:id=\"@+id/cardView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"start\"\n        app:cardCornerRadius=\"8dp\"\n        app:cardUseCompatPadding=\"true\"\u003e\n    \n        \u003cLinearLayout\n          android:layout_width=\"wrap_content\"\n          android:layout_height=\"wrap_content\"\n          android:gravity=\"start\"\n          android:orientation=\"vertical\"\n          android:padding=\"8dp\"\u003e\n    \n          \u003cTextView\n            android:id=\"@+id/text\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center_vertical|start\"\n            android:layout_marginBottom=\"4dp\"\n            android:textStyle=\"bold\" /\u003e\n    \n        \u003c/LinearLayout\u003e\n    \n      \u003c/android.support.v7.widget.CardView\u003e\n    \n    \u003c/RelativeLayout\u003e\n```\n\nFinally, open the `ChatRoom` activity class and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ChatRoom.kt\n    import android.app.Activity\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import android.view.View\n    import android.view.inputmethod.InputMethodManager\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import com.pusher.client.channel.PrivateChannelEventListener\n    import com.pusher.client.util.HttpAuthorizer\n    import kotlinx.android.synthetic.main.activity_chat_room.*\n    import okhttp3.MediaType\n    import okhttp3.RequestBody\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    import java.lang.Exception\n    import java.util.*\n    \n    class ChatRoom : AppCompatActivity() {\n    \n      companion object {\n        const val EXTRA_ID = \"id\"\n        const val EXTRA_NAME = \"name\"\n        const val EXTRA_COUNT = \"numb\"\n      }\n    \n      private lateinit var contactName: String\n      private lateinit var contactId: String\n      private var contactNumb: Int = -1\n      lateinit var nameOfChannel: String\n      val mAdapter = ChatRoomAdapter(ArrayList())\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_chat_room)\n        fetchExtras()\n        setupRecyclerView()\n        subscribeToChannel()\n        setupClickListener()\n      }\n    }\n```\n\nIn this file, we declared constants used to send data to the activity through intents. We also initialized variables we will use later like the adapter the contact details. We then called some additional methods in the `onCreate` method. Let’s add them to the class.\n\nAdd the `fetchExtras` method defined below to the class. The method gets the extras sent from the chatroom activity.\n\n``` kotlin\n    private fun fetchExtras() {\n      contactName = intent.extras.getString(ChatRoom.EXTRA_NAME)\n      contactId = intent.extras.getString(ChatRoom.EXTRA_ID)\n      contactNumb = intent.extras.getInt(ChatRoom.EXTRA_COUNT)\n    }\n```\n\nThe next method is the `setupRecyclerView` method. This initializes the recycler view with an adapter and a layout manager. Paste the function in the same class as before:\n\n``` kotlin\n    private fun setupRecyclerView() {\n      with(recyclerViewChat) {\n        layoutManager = LinearLayoutManager(this@ChatRoom)\n        adapter = mAdapter\n      }\n    }\n```\n\nThe next method is the `subscribeToChannel` method. This method subscribes the user to a private channel with the selected contact. Paste the following code to the same class as before:\n\n``` kotlin\n    private fun subscribeToChannel() {\n      val authorizer = HttpAuthorizer(\"http://10.0.2.2:5000/pusher/auth/private\")\n      val options = PusherOptions().setAuthorizer(authorizer)\n      options.setCluster(\"PUSHER_APP_CLUSTER\")\n    \n      val pusher = Pusher(\"PUSHER_APP_KEY\", options)\n      pusher.connect()\n    \n      nameOfChannel = if (Singleton.getInstance().currentUser.count \u003e contactNumb) {\n        \"private-\" + Singleton.getInstance().currentUser.id + \"-\" + contactId\n      } else {\n        \"private-\" + contactId + \"-\" + Singleton.getInstance().currentUser.id\n      }\n    \n      Log.i(\"ChatRoom\", nameOfChannel)\n    \n      pusher.subscribePrivate(nameOfChannel, object : PrivateChannelEventListener {\n        override fun onEvent(channelName: String?, eventName: String?, data: String?) {\n          val obj = JSONObject(data)\n          val messageModel = MessageModel(obj.getString(\"message\"), obj.getString(\"sender_id\"))\n    \n          runOnUiThread {\n            mAdapter.add(messageModel)\n          }\n        }\n    \n        override fun onAuthenticationFailure(p0: String?, p1: Exception?) {}\n        override fun onSubscriptionSucceeded(p0: String?) {}\n      }, \"new-message\")\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*`  keys with the values on your dashboard.\n\nThe code above allows a user to subscribe to a private channel. A private channel requires authorization like the presence channel. However, it does not expose a callback that is triggered when other users subscribe. \n\nNext method to be added is the `setupClickListener`. Paste the method to the same class as before:\n\n``` kotlin\n    private fun setupClickListener() {\n      sendButton.setOnClickListener{\n        if (editText.text.isNotEmpty()) {\n          val jsonObject = JSONObject()\n          jsonObject.put(\"message\",editText.text.toString())\n          jsonObject.put(\"channel_name\",nameOfChannel)\n          jsonObject.put(\"sender_id\",Singleton.getInstance().currentUser.id)\n          \n          val jsonBody = RequestBody.create(\n              MediaType.parse(\"application/json; charset=utf-8\"), \n              jsonObject.toString()\n          )\n    \n          RetrofitInstance.retrofit.sendMessage(jsonBody).enqueue(object: Callback\u003cString\u003e{\n            override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {}\n            override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {}\n          })\n          \n          editText.text.clear()\n          hideKeyBoard()\n        }\n    \n      }\n    }\n```\n\nThe method above assigns a click listener to the floating action button to send the message to the server.  After the message is sent, we clear the text view and hide the keyboard. \n\nAdd a method to the same class for hiding the keyboard like this:\n\n``` kotlin\n    private fun hideKeyBoard() {\n      val imm = getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager\n      var view = currentFocus\n      \n      if (view == null) {\n        view = View(this)\n      }\n      \n      imm.hideSoftInputFromWindow(view.windowToken, 0)\n    }\n```\n\nThat’s all for the application. Now you can run your application in Android Studio and you should see the application in action.\n\n\n\u003e Make sure the Node.js API we built earlier is running before running the Android application.\n\n\n![android-messenger-presence-demo](//images.ctfassets.net/1es3ne0caaid/mmdMFfq7WoYsk26cIKocs/486ce2b458e45a41cfeb01ab4441f3b4/android-messenger-presence-demo.gif)\n\n\n## Conclusion\n\nIn this article, you have been introduced yet again to some Pusher’s capabilities such as the private and presence channel. We learned how to authenticate our users for the various channels. We used these channels to implement a private chat between two persons and an online notification for a contact. \n\nThe source code to the application built in this article is available on [GitHub](https://github.com/neoighodaro/kotlin-messenger-app-with-online-presence-status).","metaTitle":"Build an Android messenger app with online presence","metaDescription":"Use Kotlin, Node.js and MongoDB to build an Android messaging app, featuring online presence. Users are able to log in and see who else is online."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1L0QNgAgZqYoGSmmmqWM4c","type":"Entry","createdAt":"2018-07-25T07:37:09.419Z","updatedAt":"2018-07-25T07:37:09.419Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat widget with Python and JavaScript","url":"chat-widget-python","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/python-pusher-chat-widget","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}}],"reviewDate":"2018-07-23","description":"This tutorial will guide you through building a simple chat widget in Python and JavaScript. You will build two interfaces: a user window where website visitors can initiate chat, and an admin panel where admins can see open chats and choose one to join.","prerequisite":"You will need Python 3+ installed on your machine.","content":"Building quality digital products is a requirement toward acquiring long-term customers, but inefficient communication is an efficient way to lose them just as quickly as you gain them. The internet is currently the world’s largest marketplace and everyone is building something for an online audience to consume, however, it would be a shame if there isn’t a way to receive feedback or interact with customers in realtime.\n\nIn this tutorial, we will look at how we can create a realtime chat widget using Pusher, Python, and JavaScript. When we are done building, the final application will look and work like this:\n\n![python-chat-widget-demo](//images.ctfassets.net/1es3ne0caaid/1SVxOwhxqMKyqcAwY4OS6s/c5663259670daaa2e4737f70f70e1bcd/python-chat-widget-demo.gif)\n\nIn the image above, we can see a digital product called “SPIN” and it has a chat widget option for visiting customers to interact with. On the left browser window, a customer visits this website and fills in his/her details before submitting the form. \n\nThere is an admin on the right browser window who can see all connected customers and respond to all their messages accordingly, providing effective and realtime support.\n\n## Prerequisites\n\nTo follow along with this tutorial, a basic knowledge of Python, Flask, JavaScript (ES6 syntax) and jQuery is required. You will also need the following installed:\n\n\n1. [Python](https://www.python.org/) (\u003e= v3.x)\n2. [Virtualenv](https://virtualenv.pypa.io/en/stable/)\n3. [Flask](http://flask.pocoo.org/)\n\nVirtualenv is great for creating isolated Python environments, so we can install dependencies in an isolated environment, and not pollute our global packages directory.\n\nLet’s install `virtualenv` with this command:\n\n```\n    $ pip install virtualenv\n```\n\n\u003e ⚠️ Virtualenv comes preinstalled with Python 3 so you may not need to install it if you are on this version.\n\n\n## Setting up the app environment\n\nLet’s create our project folder, and activate a virtual environment within it:\n\n```\n    $ mkdir python-pusher-chat-widget\n    $ cd python-pusher-chat-widget\n    $ virtualenv .venv\n    $ source .venv/bin/activate # Linux based systems\n    $ \\path\\to\\env\\Scripts\\activate # Windows users\n```\n\nNow that we have the virtual environment setup, we can install [Flask](http://flask.pocoo.org/) and the remaining dependencies with this command:\n\n```\n    $ pip install flask flask-cors simplejson\n```\n\nWe need to install the Pusher library as we will need that for realtime updates.\n\n## Setting up Pusher\n\nThe first step here will be to get a Pusher Channels application. We need the application credentials for our realtime messaging to work.\n\nGo to the [Pusher website](https://pusher.com/) and create an account. After creating an account, you should create a new application. Follow the application creation wizard and then you should be given your application credentials, we will use this later in the article:\n\n![python-chat-widget-app-keys](//images.ctfassets.net/1es3ne0caaid/6E2f10XxIWuMgyG0gygMUO/b1786e85e89bcf2412eb7c9c3a13c75c/python-chat-widget-app-keys.png)\n\nThere’s one more thing we need to do here on this dashboard; because we will directly be triggering the message events on the client side of the application, we need to turn on a special feature that is turned off by default for security reasons. To learn more about triggering events on the client side, you can read the documentation [here.](https://pusher.com/docs/client_api_guide/client_events#trigger-events)\n\nOn the dashboard, click on **App settings** and scroll to the bottom of the page then select the option that says **Enable client events**:\n\n![python-chat-widget-enable-client-events](//images.ctfassets.net/1es3ne0caaid/3wWPgt2CbSKaU8q2swqcGY/778bb6e7512b5160b621789f76fbe743/python-chat-widget-enable-client-events.png)\n\nGreat, now let’s install the Pusher Python library,  so that we can use Pusher in the application:\n\n```\n    $ pip install pusher\n```\n\n## File and folder structure\n\nHere’s a representation of the file/folder structure for this app:\n\n```\n    ├── python-pusher-chat-widget\n           ├── app.py\n           ├── static\n           └── templates\n```\n\nThe `static` folder will contain the static files to be used as is defined by [Flask standards.](http://flask.pocoo.org/docs/0.12/tutorial/folders/) The `templates` folder will hold the HTML templates. In our application, `app.py` is the main entry point and will contain our server-side code.\n\nLet’s create the `app.py` file and then the `static` and `templates` folders.\n\n\n## Building the backend\n\nBefore we start writing code to determine how the frontend of our application will be rendered, let’s fully develop the backend and all of its endpoints so that the frontend has something to communicate with when we build it.\n\nLet’s open the `app.py` file and paste the following code:\n\n``` python\n    // File: ./app.py\n    \n    from flask import Flask, render_template, request, jsonify, make_response, json\n    from flask_cors import CORS\n    from pusher import pusher\n    import simplejson\n    \n    app = Flask(__name__)\n    cors = CORS(app)\n    app.config['CORS_HEADERS'] = 'Content-Type'\n    \n    # configure pusher object\n    pusher = pusher.Pusher(\n    app_id='PUSHER_APP_ID',\n    key='PUSHER_APP_KEY',\n    secret='PUSHER_APP_SECRET',\n    cluster='PUSHER_APP_CLUSTER',\n    ssl=True)\n    \n    @app.route('/')\n    def index():\n        return render_template('index.html')\n    \n    @app.route('/admin')\n    def admin():\n        return render_template('admin.html')\n    \n    @app.route('/new/guest', methods=['POST'])\n    def guestUser():\n        data = request.json\n        pusher.trigger(u'general-channel', u'new-guest-details', { \n            'name' : data['name'], \n            'email' : data['email']\n            })\n        return json.dumps(data)\n    \n    @app.route(\"/pusher/auth\", methods=['POST'])\n    def pusher_authentication():\n        auth = pusher.authenticate(channel=request.form['channel_name'],socket_id=request.form['socket_id'])\n        return json.dumps(auth)\n    \n    if __name__ == '__main__':\n        app.run(host='0.0.0.0', port=5000, debug=True)\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the values on your Pusher dashboard.\n\nThe logic for this application is simple, we will require a Pusher public channel so that whenever a new customer connects with the chat widget, their details are sent over to the admin (using that public channel) and the admin can subscribe to a private channel (the customer will have to subscribe to this private channel too) using the customer’s email as a unique ID. The admin and that customer can further engage in one to one messaging over that private channel.\n\nLet’s go over the code in the `app.py` file to see how it satisfies the logic we just discussed. We first imported all the required packages, then registered a new Pusher instance. Next, we declared four endpoints:\n\n\n- `/` - This endpoint returns the static HTML template that defines the homepage of this app.\n- `/admin` - This endpoint returns the static HTML template that defines the admin dashboard.\n- `/new/guest/` - This endpoint receives a POST request containing the details of a new customer and pushes it to the public channel — general-channel — in a “new-guest-details” event. The admin on the other side responds to this event by subscribing to a private channel using the user’s email as the unique ID.\n\n\n  We used the trigger method on the Pusher instance here, the trigger method has the following syntax: `pusher.trigger(\"a_channel\", \"an_event\", {key: \"data\"})`. You can find the docs for the Pusher Python library [here](https://github.com/pusher/pusher-http-python) to get more information on configuring and using Pusher in Python.\n- `/pusher/auth` - This endpoint is responsible for enabling our applications to connect to private channels. Without this `auth` endpoint, we will not be authorized to send client events over private channels. You can learn more about private channels [here](https://pusher.com/docs/client_api_guide/client_private_channels) and about how to authorize users [here.](https://pusher.com/docs/authenticating_users)\n\n\n## Building the frontend\n\nIn this section, we are going to do the following things:\n\n\n- Create two new files, `index.html` and `admin.html` in the `templates` directory.\n- Create an `img` directory in the `static` directory and add a background image called `bg.jpg` inside it. You can find and download free images [here](http://pexels.com).\n- Create a `css` and `js` directory within the `static` directory. In the `css` directory, create a new `admin.css` and `app.css` file. In the `js` directory, create a new `admin.js` and `app.js` file.\n\nWe will be using [Bootstrap](https://getbootstrap.com/docs/4.0/getting-started/introduction/) as a base style for the application. We will also be using other third-party libraries so let’s fetch the source and place them in the appropriate directory inside the `static` directory.\n\nAdd these files in the `static/js` directory:\n\n\n1. `axios.js` - download the source code [here](http://cdn.jsdelivr.net/npm/axios@0.17.0/dist/axios.min.js).\n2. `bootstrap.js` - download the source code [here](https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js).\n3. `jquery.js` - download the source code [here](https://code.jquery.com/jquery-3.2.1.slim.min.js).\n4. `popper.js` - download the source code [here](https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/popper.min.js).\n\nAdd this file in the `static/css` directory:\n\n\n1. `bootstrap.css` - download the source code [here](https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css).\n\nThe new folder structure should be:\n\n```\n    ├── python-pusher-chat-widget\n      ├── app.py\n      ├── static\n        ├── css\n          ├── admin.css\n          ├── app.css\n          ├── bootstrap.css\n        ├── img\n          ├── bg.jpg\n        ├── js\n          ├── admin.js\n          ├── app.js\n          ├── axios.js\n          ├── bootstrap.js\n          ├── jquery.js\n          ├── popper.js\n      ├── templates\n        ├── admin.html\n        ├── index.html\n```\n\nIf you currently have this folder structure then you are good to go!\n\n### Setting up the homepage view\n\nIn the `templates/index.html` file, paste the following code:\n\n``` html\n    \u003c!-- File: ./templates/index.html --\u003e\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003ctitle\u003eSpin Spinner Spinnest!\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/bootstrap.css') }}\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/app.css') }}\"\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cdiv class=\"site-wrapper\"\u003e\n          \u003cdiv class=\"site-wrapper-inner\"\u003e\n            \u003cdiv class=\"cover-container\"\u003e\n    \n              \u003cheader class=\"masthead clearfix\"\u003e\n                \u003cdiv class=\"inner\"\u003e\n                  \u003ch3 class=\"masthead-brand\"\u003eSPIN\u003c/h3\u003e\n                  \u003cnav class=\"nav nav-masthead\"\u003e\n                    \u003ca class=\"nav-link active\" href=\"#\"\u003eHome\u003c/a\u003e\n                    \u003ca class=\"nav-link\" href=\"#\"\u003eFeatures\u003c/a\u003e\n                    \u003ca class=\"nav-link\" href=\"#\"\u003eContact\u003c/a\u003e\n                  \u003c/nav\u003e\n                \u003c/div\u003e\n              \u003c/header\u003e\n    \n              \u003cmain role=\"main\" class=\"inner cover\"\u003e\n                \u003ch1 class=\"cover-heading\"\u003eSPIN\u003c/h1\u003e\n                \u003cp class=\"lead\"\u003eSPIN is a simple realtime chat widget powered by Pusher.\u003c/p\u003e\n                \u003cp class=\"lead\"\u003e\n                  \u003ca href=\"#\" class=\"btn btn-lg btn-secondary\"\u003eGO for a SPIN?\u003c/a\u003e\n                \u003c/p\u003e\n              \u003c/main\u003e\n    \n              \u003cfooter class=\"mastfoot\"\u003e\n              \u003c/footer\u003e\n    \n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \n        \u003cdiv class=\"chatbubble\"\u003e\n            \u003cdiv class=\"unexpanded\"\u003e\n                \u003cdiv class=\"title\"\u003eChat with Support\u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"expanded chat-window\"\u003e\n              \u003cdiv class=\"login-screen container\"\u003e\n                \u003cform id=\"loginScreenForm\"\u003e\n                  \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput type=\"text\" class=\"form-control\" id=\"fullname\" placeholder=\"Name*\" required\u003e\n                  \u003c/div\u003e\n                  \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email Address*\" required\u003e\n                  \u003c/div\u003e\n                  \u003cbutton type=\"submit\" class=\"btn btn-block btn-primary\"\u003eStart Chat\u003c/button\u003e\n                \u003c/form\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"chats\"\u003e\n                \u003cdiv class=\"loader-wrapper\"\u003e\n                  \u003cdiv class=\"loader\"\u003e\n                    \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cul class=\"messages clearfix\"\u003e\n                \u003c/ul\u003e\n                \u003cdiv class=\"input\"\u003e\n                  \u003cform class=\"form-inline\" id=\"messageSupport\"\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                      \u003cinput type=\"text\" autocomplete=\"off\" class=\"form-control\" id=\"newMessage\" placeholder=\"Enter Message\"\u003e\n                    \u003c/div\u003e\n                    \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003eSend\u003c/button\u003e\n                  \u003c/form\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e    \n    \n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/jquery.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/popper.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/bootstrap.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/axios.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/app.js') }}\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn this file, we have the HTML for the homepage. We also used Flask’s `url_for` function to dynamically link to all the local scripts and styles that we created. \n\nBecause we require our application to send and receive messages in realtime, we imported the official Pusher JavaScript library with this line of code:\n\n```\n    \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n```\n\nWe included some custom classes within the HTML elements, however, these classes will be useless if we do not define them in the matching CSS file, open the `static/css/app.css` file and paste the following code:\n\n``` css\n    /* File: static/css/app.css */\n    a,\n    a:focus,\n    a:hover {\n      color: #fff;\n    }\n    \n    .btn-secondary,\n    .btn-secondary:hover,\n    .btn-secondary:focus {\n      color: #333;\n      text-shadow: none;\n      background-color: #fff;\n      border: .05rem solid #fff;\n    }\n    \n    html,\n    body {\n      height: 100%;\n      background-color: #333;\n    }\n    \n    body {\n      color: #fff;\n      text-align: center;\n      text-shadow: 0 .05rem .1rem rgba(0,0,0,.5);\n    }\n    \n    .site-wrapper {\n      display: table;\n      width: 100%;\n      height: 100%; /* For at least Firefox */\n      min-height: 100%;\n      box-shadow: inset 0 0 5rem rgba(0,0,0,.5);\n      background: url(../img/bg.jpg);\n      background-size: cover;\n      background-repeat: no-repeat;\n      background-position: center;\n    }\n    \n    .site-wrapper-inner {\n      display: table-cell;\n      vertical-align: top;\n    }\n    \n    .cover-container {\n      margin-right: auto;\n      margin-left: auto;\n    }\n    \n    .inner {\n      padding: 2rem;\n    }\n    \n    .masthead {\n      margin-bottom: 2rem;\n    }\n    \n    .masthead-brand {\n      margin-bottom: 0;\n    }\n    \n    .nav-masthead .nav-link {\n      padding: .25rem 0;\n      font-weight: 700;\n      color: rgba(255,255,255,.5);\n      background-color: transparent;\n      border-bottom: .25rem solid transparent;\n    }\n    \n    .nav-masthead .nav-link:hover,\n    .nav-masthead .nav-link:focus {\n      border-bottom-color: rgba(255,255,255,.25);\n    }\n    \n    .nav-masthead .nav-link + .nav-link {\n      margin-left: 1rem;\n    }\n    \n    .nav-masthead .active {\n      color: #fff;\n      border-bottom-color: #fff;\n    }\n    \n    @media (min-width: 48em) {\n      .masthead-brand {\n        float: left;\n      }\n    \n      .nav-masthead {\n        float: right;\n      }\n    }\n    \n    .cover {\n      padding: 0 1.5rem;\n    }\n    \n    .cover .btn-lg {\n      padding: .75rem 1.25rem;\n      font-weight: 700;\n    }\n    \n    .mastfoot {\n      color: rgba(255,255,255,.5);\n    }\n    \n    @media (min-width: 40em) {\n      .masthead {\n        position: fixed;\n        top: 0;\n      }\n    \n      .mastfoot {\n        position: fixed;\n        bottom: 0;\n      }\n    \n      .site-wrapper-inner {\n        vertical-align: middle;\n      }\n    \n      .masthead,\n      .mastfoot,\n      .cover-container {\n        width: 100%;\n      }\n    }\n    \n    @media (min-width: 62em) {\n      .masthead,\n      .mastfoot,\n      .cover-container {\n        width: 42rem;\n      }\n    }\n    \n    .chatbubble {\n        position: fixed;\n        bottom: 0;\n        right: 30px;\n        transform: translateY(300px);\n        transition: transform .3s ease-in-out;\n    }\n    \n    .chatbubble.opened {\n        transform: translateY(0)\n    }\n    \n    .chatbubble .unexpanded {\n        display: block;\n        background-color: #e23e3e;\n        padding: 10px 15px 10px;\n        position: relative;\n        cursor: pointer;\n        width: 350px;\n        border-radius: 10px 10px 0 0;\n    }\n    \n    .chatbubble .expanded {\n        height: 300px;\n        width: 350px;\n        background-color: #fff;\n        text-align: left;\n        padding: 10px;\n        color: #333;\n        text-shadow: none;\n        font-size: 14px;\n    }\n    \n    .chatbubble .chat-window {\n      overflow: auto;\n    }\n    \n    .chatbubble .loader-wrapper {\n        margin-top: 50px;\n        text-align: center;\n    }\n    \n    .chatbubble .messages {\n        display: none;\n        list-style: none;\n        margin: 0 0 50px;\n        padding: 0;\n    }\n    \n    .chatbubble .messages li {\n        width: 85%;\n        float: left;\n        padding: 10px;\n        border-radius: 5px 5px 5px 0;\n        font-size: 14px;\n        background: #c9f1e6;\n        margin-bottom: 10px;\n    }\n    \n    .chatbubble .messages li .sender {\n        font-weight: 600;\n    }\n    \n    .chatbubble .messages li.support {\n        float: right;\n        text-align: right;\n        color: #fff;\n        background-color: #e33d3d;\n        border-radius: 5px 5px 0 5px;\n    }\n    \n    .chatbubble .chats .input {\n        position: absolute;\n        bottom: 0;\n        padding: 10px;\n        left: 0;\n        width: 100%;\n        background: #f0f0f0;\n        display: none;\n    }\n    \n    .chatbubble .chats .input .form-group {\n        width: 80%;\n    }\n    \n    .chatbubble .chats .input input {\n        width: 100%;\n    }\n    \n    .chatbubble .chats .input button {\n        width: 20%;\n    }\n    \n    .chatbubble .chats {\n      display: none;\n    }\n    \n    .chatbubble .login-screen {\n      margin-top: 20px;\n      display: none;\n    }\n    \n    .chatbubble .chats.active,\n    .chatbubble .login-screen.active {\n      display: block;\n    }\n    \n    /* Loader Credit: https://codepen.io/ashmind/pen/zqaqpB */\n    .chatbubble .loader {\n      color: #e23e3e;\n      font-family: Consolas, Menlo, Monaco, monospace;\n      font-weight: bold;\n      font-size: 10vh;\n      opacity: 0.8;\n    }\n    \n    .chatbubble .loader span {\n      display: inline-block;\n      -webkit-animation: pulse 0.4s alternate infinite ease-in-out;\n              animation: pulse 0.4s alternate infinite ease-in-out;\n    }\n    \n    .chatbubble .loader span:nth-child(odd) {\n      -webkit-animation-delay: 0.4s;\n              animation-delay: 0.4s;\n    }\n    \n    @-webkit-keyframes pulse {\n      to {\n        -webkit-transform: scale(0.8);\n                transform: scale(0.8);\n        opacity: 0.5;\n      }\n    }\n    \n    @keyframes pulse {\n      to {\n        -webkit-transform: scale(0.8);\n                transform: scale(0.8);\n        opacity: 0.5;\n      }\n    }\n```\n### Setting up the admin dashboard view\n\nIn the `templates/admin.html` file, paste the following code:\n\n``` html\n    \u003c!-- File: templates/admin.html --\u003e\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003ctitle\u003eAdmin\u003c/title\u003e\n        \u003clink href=\"{{ url_for('static', filename='css/bootstrap.css') }}\" rel=\"stylesheet\"\u003e\n        \u003clink href=\"{{ url_for('static', filename='css/admin.css') }}\" rel=\"stylesheet\"\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cheader\u003e\n            \u003cnav class=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\"\u003e\n                \u003ca class=\"navbar-brand\" href=\"#\"\u003eDashboard\u003c/a\u003e\n            \u003c/nav\u003e\n        \u003c/header\u003e\n    \n        \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"row\" id=\"mainrow\"\u003e\n                \u003cnav class=\"col-sm-3 col-md-2 d-none d-sm-block bg-light sidebar\"\u003e\n                    \u003cul class=\"nav nav-pills flex-column\" id=\"rooms\"\u003e\n                    \u003c/ul\u003e\n                \u003c/nav\u003e\n                \u003cmain role=\"main\" class=\"col-sm-9 ml-sm-auto col-md-10 pt-3\" id=\"main\"\u003e\n                    \u003ch1\u003eChats\u003c/h1\u003e\n                    \u003cp\u003e👈 Select a chat to load the messages\u003c/p\u003e\n                    \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                    \u003cdiv class=\"chat\" style=\"margin-bottom:150px\"\u003e\n                        \u003ch5 id=\"room-title\"\u003e\u003c/h5\u003e\n                        \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                        \u003cdiv class=\"response\"\u003e\n                            \u003cform id=\"replyMessage\"\u003e\n                                \u003cdiv class=\"form-group\"\u003e\n                                    \u003cinput type=\"text\" placeholder=\"Enter Message\" class=\"form-control\" name=\"message\" /\u003e\n                                \u003c/div\u003e\n                            \u003c/form\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"table-responsive\"\u003e\n                          \u003ctable class=\"table table-striped\"\u003e\n                            \u003ctbody id=\"chat-msgs\"\u003e\n                            \u003c/tbody\u003e\n                        \u003c/table\u003e\n                    \u003c/div\u003e\n                \u003c/main\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/jquery.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/popper.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/bootstrap.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/axios.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/admin.js') }}\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nOpen the `static/css/admin.css` file and paste the following code:\n\n``` css\n    /* File: static/css/admin.css */\n    body {\n        padding-top: 3.5rem;\n    }\n    \n    h1 {\n        padding-bottom: 9px;\n        margin-bottom: 20px;\n        border-bottom: 1px solid #eee;\n    }\n    \n    .sidebar {\n        position: fixed;\n        top: 51px;\n        bottom: 0;\n        left: 0;\n        z-index: 1000;\n        padding: 20px 0;\n        overflow-x: hidden;\n        overflow-y: auto;\n        border-right: 1px solid #eee;\n    }\n    \n    .sidebar .nav {\n        margin-bottom: 20px;\n    }\n    \n    .sidebar .nav-item {\n        width: 100%;\n    }\n    \n    .sidebar .nav-item + .nav-item {\n        margin-left: 0;\n    }\n    \n    .sidebar .nav-link {\n        border-radius: 0;\n    }\n    \n    .placeholders {\n        padding-bottom: 3rem;\n    }\n    \n    .placeholder img {\n        padding-top: 1.5rem;\n        padding-bottom: 1.5rem;\n    }\n    \n    tr .sender {\n        font-size: 12px;\n        font-weight: 600;\n    }\n    \n    tr .sender span {\n        color: #676767;\n    }\n    \n    .response {\n        display: none;\n    }\n```\n\n### Writing the app.js script\n\nIn this section, we will write the script that works with the homepage and supports the customers’ functions. This script will define the logic that will enable a customer to submit the form after filling in his/her details and everything else.\n\nWe will define some helper functions within an [IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE) and these functions will run on the occurrence of several DOM events and possibly pass on the execution to other helper functions.\n\nOpen the `app.js` file and paste the following:\n\n``` javascript\n    // File: static/js/app.js\n    (function() {\n        'use strict';\n    \n        var pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: '/pusher/auth',\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n          \n        // ----------------------------------------------------\n        // Chat Details\n        // ----------------------------------------------------\n    \n        let chat = {\n            name:  undefined,\n            email: undefined,\n            myChannel: undefined,\n        }\n    \n    \n        // ----------------------------------------------------\n        // Targeted Elements\n        // ----------------------------------------------------\n    \n        const chatPage   = $(document)\n        const chatWindow = $('.chatbubble')\n        const chatHeader = chatWindow.find('.unexpanded')\n        const chatBody   = chatWindow.find('.chat-window')\n    \n    \n        // ----------------------------------------------------\n        // Register helpers\n        // ----------------------------------------------------\n    \n        let helpers = {\n    \n            // ----------------------------------------------------\n            // Toggles the display of the chat window.\n            // ----------------------------------------------------\n        \n            ToggleChatWindow: function () {\n                chatWindow.toggleClass('opened')\n                chatHeader.find('.title').text(\n                    chatWindow.hasClass('opened') ? 'Minimize Chat Window' : 'Chat with Support'\n                )\n            },\n                \n            // --------------------------------------------------------------------\n            // Show the appropriate display screen. Login screen or Chat screen.\n            // --------------------------------------------------------------------\n        \n            ShowAppropriateChatDisplay: function () {\n                (chat.name) ? helpers.ShowChatRoomDisplay() : helpers.ShowChatInitiationDisplay()\n            },\n    \n            // ----------------------------------------------------\n            // Show the enter details form.\n            // ----------------------------------------------------\n        \n            ShowChatInitiationDisplay: function () {\n                chatBody.find('.chats').removeClass('active')\n                chatBody.find('.login-screen').addClass('active')\n            },\n    \n            // ----------------------------------------------------\n            // Show the chat room messages display.\n            // ----------------------------------------------------\n        \n            ShowChatRoomDisplay: function () {\n                chatBody.find('.chats').addClass('active')\n                chatBody.find('.login-screen').removeClass('active')\n    \n                setTimeout(function(){\n                    chatBody.find('.loader-wrapper').hide()\n                    chatBody.find('.input, .messages').show()\n                }, 2000)\n            },\n    \n            // ----------------------------------------------------\n            // Append a message to the chat messages UI.\n            // ----------------------------------------------------\n        \n            NewChatMessage: function (message) {\n                if (message !== undefined) {\n                    const messageClass = message.sender !== chat.email ? 'support' : 'user'\n    \n                    chatBody.find('ul.messages').append(\n                        `\u003cli class=\"clearfix message ${messageClass}\"\u003e\n                            \u003cdiv class=\"sender\"\u003e${message.name}\u003c/div\u003e\n                            \u003cdiv class=\"message\"\u003e${message.text}\u003c/div\u003e\n                        \u003c/li\u003e`\n                    )\n    \n    \n                    chatBody.scrollTop(chatBody[0].scrollHeight)\n                }\n            },\n    \n            // ----------------------------------------------------\n            // Send a message to the chat channel.\n            // ----------------------------------------------------\n        \n            SendMessageToSupport: function (evt) {\n                \n                evt.preventDefault()\n    \n                let createdAt = new Date()\n                createdAt = createdAt.toLocaleString()\n    \n                const message = $('#newMessage').val().trim()\n    \n                chat.myChannel.trigger('client-guest-new-message', {\n                    'sender': chat.name,\n                    'email': chat.email,\n                    'text': message,\n                    'createdAt': createdAt \n                });\n                \n                helpers.NewChatMessage({\n                    'text': message,\n                    'name': chat.name,\n                    'sender': chat.email\n                })\n                \n                console.log(\"Message added!\")\n    \n                $('#newMessage').val('')\n            },\n    \n            // ----------------------------------------------------\n            // Logs user into a chat session.\n            // ----------------------------------------------------\n        \n            LogIntoChatSession: function (evt) {\n                const name  = $('#fullname').val().trim()\n                const email = $('#email').val().trim().toLowerCase()\n    \n                // Disable the form\n                chatBody.find('#loginScreenForm input, #loginScreenForm button').attr('disabled', true)\n    \n                if ((name !== '' \u0026\u0026 name.length \u003e= 3) \u0026\u0026 (email !== '' \u0026\u0026 email.length \u003e= 5)) {\n                    axios.post('/new/guest', {name, email}).then(response =\u003e {\n                        chat.name = name\n                        chat.email = email\n                        chat.myChannel = pusher.subscribe('private-' + response.data.email);\n                        helpers.ShowAppropriateChatDisplay()\n                    })\n                } else {\n                    alert('Enter a valid name and email.')\n                }\n    \n                evt.preventDefault()\n            }\n        }\n    \n        // ------------------------------------------------------------------\n        // Listen for a new message event from the admin\n        // ------------------------------------------------------------------\n    \n        pusher.bind('client-support-new-message', function(data){\n            helpers.NewChatMessage(data)\n        })\n    \n    \n        // ----------------------------------------------------\n        // Register page event listeners\n        // ----------------------------------------------------\n    \n        chatPage.ready(helpers.ShowAppropriateChatDisplay)\n        chatHeader.on('click', helpers.ToggleChatWindow)\n        chatBody.find('#loginScreenForm').on('submit', helpers.LogIntoChatSession)\n        chatBody.find('#messageSupport').on('submit', helpers.SendMessageToSupport)\n    }())\n```\n\nAbove we have the JavaScript that powers the clients chat widget. In the code, we start by instantiating Pusher (remember to replace the `PUSHER_*` keys with the keys in your Pusher dashboard).\n\nWe have a `helpers` property that has a few functions attached to it. Each function has a comment explaining what it does right before it is defined. At the bottom of the script is where we register all the events and listeners that make the widget function as expected.\n\n**Writing the admin.js script**\nThe code in the `admin.js` is similar to the `app.js` and functions in a similat manner. Open the `admin.js` add paste the following code:\n\n``` javascript\n    // File: static/js/admin.js\n    (function () {\n        'use strict';\n    \n        // ----------------------------------------------------\n        // Configure Pusher instance\n        // ----------------------------------------------------\n    \n        var pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: '/pusher/auth',\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n          });\n    \n        // ----------------------------------------------------\n        // Chat Details\n        // ----------------------------------------------------\n    \n        let chat = {\n            messages: [],\n            currentRoom: '',\n            currentChannel: '',\n            subscribedChannels: [],\n            subscribedUsers: []\n        }\n    \n        // ----------------------------------------------------\n        // Subscribe to the generalChannel\n        // ----------------------------------------------------\n    \n        var generalChannel = pusher.subscribe('general-channel');\n    \n        // ----------------------------------------------------\n        // Targeted Elements\n        // ----------------------------------------------------\n    \n        const chatBody = $(document)\n        const chatRoomsList = $('#rooms')\n        const chatReplyMessage = $('#replyMessage')\n    \n        // ----------------------------------------------------\n        // Register helpers\n        // ----------------------------------------------------\n    \n        const helpers = {\n    \n            // ------------------------------------------------------------------\n            // Clear the chat messages UI\n            // ------------------------------------------------------------------\n    \n            clearChatMessages: () =\u003e $('#chat-msgs').html(''),\n        \n            // ------------------------------------------------------------------\n            // Add a new chat message to the chat window.\n            // ------------------------------------------------------------------\n        \n            displayChatMessage: (message) =\u003e {\n                if (message.email === chat.currentRoom) {\n    \n                    $('#chat-msgs').prepend(\n                        `\u003ctr\u003e\n                            \u003ctd\u003e\n                                \u003cdiv class=\"sender\"\u003e${message.sender} @ \u003cspan class=\"date\"\u003e${message.createdAt}\u003c/span\u003e\u003c/div\u003e\n                                \u003cdiv class=\"message\"\u003e${message.text}\u003c/div\u003e\n                            \u003c/td\u003e\n                        \u003c/tr\u003e`\n                    )\n                }\n            },\n        \n            // ------------------------------------------------------------------\n            // Select a new guest chatroom\n            // ------------------------------------------------------------------\n        \n            loadChatRoom: evt =\u003e {\n                chat.currentRoom = evt.target.dataset.roomId\n                chat.currentChannel = evt.target.dataset.channelId\n    \n                if (chat.currentRoom !== undefined) {\n                    $('.response').show()\n                    $('#room-title').text(evt.target.dataset.roomId)\n                }\n    \n                evt.preventDefault()\n                helpers.clearChatMessages()\n            },\n        \n            // ------------------------------------------------------------------\n            // Reply a message\n            // ------------------------------------------------------------------\n            replyMessage: evt =\u003e {\n                evt.preventDefault()\n    \n                let createdAt = new Date()\n                createdAt = createdAt.toLocaleString()\n    \n                const message = $('#replyMessage input').val().trim()\n    \n                chat.subscribedChannels[chat.currentChannel].trigger('client-support-new-message', {\n                    'name': 'Admin',\n                    'email': chat.currentRoom,\n                    'text': message, \n                    'createdAt': createdAt \n                });\n    \n                helpers.displayChatMessage({\n                    'email': chat.currentRoom,\n                    'sender': 'Support',\n                    'text': message, \n                    'createdAt': createdAt\n                })\n    \n    \n                $('#replyMessage input').val('')\n            },\n        }\n    \n    \n          // ------------------------------------------------------------------\n          // Listen to the event that returns the details of a new guest user\n          // ------------------------------------------------------------------\n          \n          generalChannel.bind('new-guest-details', function(data) {\n              \n            chat.subscribedChannels.push(pusher.subscribe('private-' + data.email));\n    \n            chat.subscribedUsers.push(data);\n    \n            // render the new list of subscribed users and clear the former\n            $('#rooms').html(\"\");\n            chat.subscribedUsers.forEach(function (user, index) {\n    \n                    $('#rooms').append(\n                        `\u003cli class=\"nav-item\"\u003e\u003ca data-room-id=\"${user.email}\" data-channel-id=\"${index}\" class=\"nav-link\" href=\"#\"\u003e${user.name}\u003c/a\u003e\u003c/li\u003e`\n                    )\n            })\n    \n          })\n    \n      \n          // ------------------------------------------------------------------\n          // Listen for a new message event from a guest\n          // ------------------------------------------------------------------\n          \n          pusher.bind('client-guest-new-message', function(data){\n              helpers.displayChatMessage(data)\n          })\n    \n    \n        // ----------------------------------------------------\n        // Register page event listeners\n        // ----------------------------------------------------\n        \n        chatReplyMessage.on('submit', helpers.replyMessage)\n        chatRoomsList.on('click', 'li', helpers.loadChatRoom)\n    }())\n```\n\nJust like in the `app.js` we have the `helpers` object that holds the meat of the script and towards the bottom, the listeners and events are called and registered.\n\n\n\u003e Replace the `PUSHER_APP_*` keys with the keys on your Pusher dashboard.\n  \n## Running the application\n\nWe can test the application using this command:\n\n```\n    $ flask run\n```\n\nNow if we visit [127.0.0.1:5000](http://127.0.0.1:5000/) and [127.0.0.1:5000/admin](http://127.0.0.1:5000/admin) we should test the application:\n\n![python-chat-widget-demo](//images.ctfassets.net/1es3ne0caaid/1SVxOwhxqMKyqcAwY4OS6s/c5663259670daaa2e4737f70f70e1bcd/python-chat-widget-demo.gif)\n\n## Conclusion\n\nIn this article, we have learned how we can leverage the power of Pusher in creating a chat widget powered by a Python backend. The entire code for this tutorial is available on [GitHub.](https://github.com/neoighodaro/python-pusher-chat-widget)","metaTitle":"Build a chat widget with Python and JavaScript","metaDescription":"Use Python and JavaScript to create a simple chat widget and admin panel. Users will be able to initiate chat sessions, and admins will be able to view all sessions and choose one to join."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"181jJdMSpuCIwIE8yaY2YI","type":"Entry","createdAt":"2018-07-25T07:36:17.016Z","updatedAt":"2018-07-25T07:36:17.016Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Building a chat widget with Go and JavaScript","url":"chat-widget-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/go-pusher-chat-widget","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}}],"reviewDate":"2018-07-23","description":"This brief tutorial shows you how to quickly create a chat widget with a backend powered by Go, and a frontend and admin dashboard in JavaScript. Users can initiate chat, and admins can see waiting chats and choose which to join.","prerequisite":"You will need Go 0.10.x+ installed. A basic knowledge of Go and JavaScript (ES6 syntax) will be helpful.","content":"## Introduction\n\nThe process of building products for an online demographic should be thorough and follow modern-day trends. One of such trend is making it possible for the customers and support agents to have realtime discussions over some form of two-way message channel. This would ensure that customers do not click away in confusion and switch to competitors in times of frustration.\n\nIn this tutorial, we will see how to build a realtime chat widget with Go, Pusher, and JavaScript. Here’s a demo of the application:\n\n![go-chat-widget-demo](//images.ctfassets.net/1es3ne0caaid/3qN7ML2VMcqaMyMaSGWsiw/3bb18095d1042c0708925e2b35667789/go-chat-widget-demo.gif)\n\nIn the above image, we built a website that sells motorcycles and integrates a chat widget. A customer is able to sign up to speak with a support agent and the agent on the other end can manage communication among a number of connected customers.\n\n## Prerequisites\n\nTo follow along with this article, you will need the following:\n\n\n- An IDE of your choice like Visual Studio Code.\n- Go (version \u003e= 0.10.x) installed on your computer. Here’s how you can install [Go.](https://golang.org/doc/install)\n- Basic knowledge of the Go programming language.\n- Basic knowledge of JavaScript (ES6) and jQuery.\n- Once you have all the above requirements, we can proceed.\n\n\n\u003e Skip the next section if you have already signed up with Pusher and created an application.\n\n## Setting up Pusher\n\nThe realtime feature of the chat widget is dependent on Pusher so you need to create an account [here](https://dashboard.pusher.com/accounts/sign_up) if you don’t already have one, after the signup process, you will be asked to create a new application. Let’s keep the app credentials nearby because we will need it to integrate Pusher within the cat widget.\n\n### Enabling client events\n\nThe final thing we will do is enable the Pusher application to trigger events from the client (browser) over a private channel. We need this feature because it is what will make it possible for a support agent to securely chat with a customer without having to send the message through the backend server first. Follow the steps below to activate client events from the [dashboard](https://dashboard.pusher.com):\n\n\n- Select the channel application.\n- Click on **App Settings** from the horizontal options list.\n- Check the **Enable client events** option.\n![go-chat-widget-enable-client-events](//images.ctfassets.net/1es3ne0caaid/24nRrulxAEScAs2aScYKAs/c162fb0a4ecaafeb7cad264880b1cbc3/go-chat-widget-enable-client-events.png)\n- Click on the **Update** button.\n\nThat’s all we need to do here.\n\n## Setting up the codebase\n\nLet’s begin by navigating into the `src` directory that is located in the `$GOPATH` and creating a new directory for our app. This will be the root directory for this project:\n\n```\n    $ cd $GOPATH/src\n    $ mkdir go-pusher-chat-widget\n    $ cd go-pusher-chat-widget\n```\n\nLet’s create the main Go file (this is the entry point of the application) here and call it `chat.go`.\nNext, we will install the Go Pusher library that we will reference within the code for the backend server. Run the following code in the terminal to pull in the package:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\n\u003e ⚠️ If you use Windows and you encounter the error ‘cc.exe: sorry, unimplemented: 64-bit mode not compiled in ‘, then you need a Windows gcc port, such as https://sourceforge.net/projects/mingw-w64/. Also, see this GitHub issue.\n\nOpen the `chat.go` file in your favorite IDE and update it with the following code:\n\n``` go\n    // File: ./chat.go\n    package main\n    \n    // Here, we import the required packages (including Pusher)\n    import (\n        \"encoding/json\"\n        \"fmt\"\n        \"io/ioutil\"\n        \"log\"\n        \"net/http\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    // Here, we register the Pusher client\n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n    \n    // Here, we define a customer as a struct\n    type customer struct {\n        Name  string `json:\"name\" xml:\"name\" form:\"name\" query:\"name\"`\n        Email string `json:\"email\" xml:\"email\" form:\"email\" query:\"email\"`\n    }\n    \n    func main() {\n    \n        // Serve the static files and templates from the public directory\n        http.Handle(\"/\", http.FileServer(http.Dir(\"./public\")))\n    \n        // -------------------------------------------------------\n        // Listen on these routes for new customer registration and User authorization,\n        // thereafter, handle each request using the matching handler function.\n        // -------------------------------------------------------\n        http.HandleFunc(\"/new/customer\", broadcastCustomerDetails)\n        http.HandleFunc(\"/pusher/auth\", pusherAuth)\n    \n        // Start executing the application on port 8070\n        log.Fatal(http.ListenAndServe(\":8070\", nil))\n    }\n```\n\nIn the code above, we registered a new Pusher client with the credentials from the app we created earlier on the dashboard.\n\n\n\u003e ⚠️ Replace `PUSHER_*` keys with your app credentials.\n\nIn the main function, we defined two endpoints, `/new/customer` and `/pusher/auth`. The first will be hit when a new customer signs up and the last will authorize the users so they can subscribe to private channels. \n\nWe will be serving all static files from a `public` directory that we will create shortly.\n\n\n\u003e Note that we did not pull in the `ioutil` and `http` packages because they are already among Go’s standard packages.\n\nWe also defined `customer` as a struct and attached extra definitions to its properties so that Go knows how to handle incoming payloads and bind their various structures with a new instance of the customer struct. \n\nLet’s create the handler functions for the endpoints, add this code to the `chat.go` file just before the main function:\n\n``` go\n    // File: ./chat.go\n    \n    // [...]\n    \n    func broadcastCustomerDetails(rw http.ResponseWriter, req *http.Request) {\n        body, err := ioutil.ReadAll(req.Body)\n        if err != nil {\n            panic(err)\n        }\n        var newCustomer customer\n        err = json.Unmarshal(body, \u0026newCustomer)\n        if err != nil {\n            panic(err)\n        }\n        client.Trigger(\"one-to-many\", \"new-customer\", newCustomer)\n        json.NewEncoder(rw).Encode(newCustomer)\n    }\n    \n    func pusherAuth(res http.ResponseWriter, req *http.Request) {\n        params, _ := ioutil.ReadAll(req.Body)\n        response, err := client.AuthenticatePrivateChannel(params)\n        if err != nil {\n            panic(err)\n        }\n        fmt.Fprintf(res, string(response))\n    }\n    \n    // [...]\n```\n\nAbove we have two functions. `broadcastCustomerDetails` receives a new customer's details and binds it to an instance of the `customer` struct. We then trigger the received details over to the admin dashboard in an event over the public channel. The `pusherAuth` authorizes users so they can subscribe to private channels.\n\nThis is all the code required for the backend server to work, let’s move on to the frontend.\n\n## Building the frontend\n\nIn this section, we will start building the frontend of the web application. We will create all the static files that are rendered when a browser is pointed to the address of our application. \n\nCreate a new folder in the project directory and call it `public`, this folder is the root directory for all of our frontend files. In this folder, create three folders `css`, `js` and `img`.\n\nNext, create two files in the root of the `public` directory named `index.html` and `support.html`.\n\n### Creating the homepage\n\nOpen the `index.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./public/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003ctitle\u003eX-Cycles\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"./css/app.css\" \u003e\n      \u003c/head\u003e\n    \n      \u003cbody\u003e\n        \u003cdiv class=\"site-wrapper\"\u003e\n          \u003cdiv class=\"site-wrapper-inner\"\u003e\n            \u003cdiv class=\"cover-container\"\u003e\n    \n              \u003cheader class=\"masthead clearfix\"\u003e\n                \u003cdiv class=\"inner\"\u003e\n                  \u003ch3 class=\"masthead-brand\"\u003eX-Cycles\u003c/h3\u003e\n                  \u003cnav class=\"nav nav-masthead\"\u003e\n                    \u003ca class=\"nav-link active\" href=\"#\"\u003eHome\u003c/a\u003e\n                    \u003ca class=\"nav-link\" href=\"#\"\u003eFeatures\u003c/a\u003e\n                    \u003ca class=\"nav-link\" href=\"#\"\u003eContact\u003c/a\u003e\n                  \u003c/nav\u003e\n                \u003c/div\u003e\n              \u003c/header\u003e\n    \n              \u003cmain role=\"main\" class=\"inner cover\"\u003e\n                \u003ch1 class=\"cover-heading\"\u003eX-cycles\u003c/h1\u003e\n                \u003cp class=\"lead\"\u003eWe sell the best motorcycles around.\u003c/p\u003e\n                \u003cp class=\"lead\"\u003e\n                  \u003ca href=\"#\" class=\"btn btn-lg btn-secondary\"\u003eGALLERY\u003c/a\u003e\n                \u003c/p\u003e\n              \u003c/main\u003e\n    \n              \u003cfooter class=\"mastfoot\"\u003e\n              \u003c/footer\u003e\n    \n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"chatbubble\"\u003e\n            \u003cdiv class=\"unexpanded\"\u003e\n                \u003cdiv class=\"title\"\u003eChat with Support\u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"expanded chat-window\"\u003e\n              \u003cdiv class=\"login-screen container\"\u003e\n    \n                \u003cform id=\"loginScreenForm\"\u003e\n                  \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput type=\"text\" class=\"form-control\" id=\"fullname\" placeholder=\"Name*\" required\u003e\n                  \u003c/div\u003e\n                  \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email Address*\" required\u003e\n                  \u003c/div\u003e\n                  \u003cbutton type=\"submit\" class=\"btn btn-block btn-primary\"\u003eStart Chat\u003c/button\u003e\n                \u003c/form\u003e\n    \n              \u003c/div\u003e\n              \u003cdiv class=\"chats\"\u003e\n                \u003cdiv class=\"loader-wrapper\"\u003e\n                  \u003cdiv class=\"loader\"\u003e\n                    \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cul class=\"messages clearfix\"\u003e\n                \u003c/ul\u003e\n                \u003cdiv class=\"input\"\u003e\n                  \u003cform class=\"form-inline\" id=\"messageSupport\"\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                      \u003cinput type=\"text\" autocomplete=\"off\" class=\"form-control\" id=\"newMessage\" placeholder=\"Enter Message\"\u003e\n                    \u003c/div\u003e\n                    \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003eSend\u003c/button\u003e\n                  \u003c/form\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e    \n    \n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript type=\"text/javascript\" src=\"./js/app.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the `css` directory, create an `app.css` file and update it with the following code:\n\n``` css\n    /* File: ./public/css/app.css */\n    a,\n    a:focus,\n    a:hover {\n      color: #fff;\n    }\n    .btn-secondary,\n    .btn-secondary:hover,\n    .btn-secondary:focus {\n      color: #333;\n      text-shadow: none;\n      background-color: #fff;\n      border: .05rem solid #fff;\n    }\n    html,\n    body {\n      height: 100%;\n      background-color: #333;\n    }\n    body {\n      color: #fff;\n      text-align: center;\n      text-shadow: 0 .05rem .1rem rgba(0,0,0,.5);\n    }\n    .site-wrapper {\n      display: table;\n      width: 100%;\n      height: 100%; /* For at least Firefox */\n      min-height: 100%;\n      box-shadow: inset 0 0 5rem rgba(0,0,0,.5);\n      background: url(../img/bg.jpg);\n      background-size: cover;\n      background-repeat: no-repeat;\n      background-position: center;\n    }\n    .site-wrapper-inner {\n      display: table-cell;\n      vertical-align: top;\n    }\n    .cover-container {\n      margin-right: auto;\n      margin-left: auto;\n    }\n    .inner {\n      padding: 2rem;\n    }\n    .masthead {\n      margin-bottom: 2rem;\n    }\n    .masthead-brand {\n      margin-bottom: 0;\n    }\n    .nav-masthead .nav-link {\n      padding: .25rem 0;\n      font-weight: 700;\n      color: rgba(255,255,255,.5);\n      background-color: transparent;\n      border-bottom: .25rem solid transparent;\n    }\n    .nav-masthead .nav-link:hover,\n    .nav-masthead .nav-link:focus {\n      border-bottom-color: rgba(255,255,255,.25);\n    }\n    .nav-masthead .nav-link + .nav-link {\n      margin-left: 1rem;\n    }\n    .nav-masthead .active {\n      color: #fff;\n      border-bottom-color: #fff;\n    }\n    @media (min-width: 48em) {\n      .masthead-brand {\n        float: left;\n      }\n    \n      .nav-masthead {\n        float: right;\n      }\n    \n    }\n    /*\n     * Cover\n     */\n    \n    .cover {\n      padding: 0 1.5rem;\n    }\n    .cover .btn-lg {\n      padding: .75rem 1.25rem;\n      font-weight: 700;\n    }\n    .mastfoot {\n      color: rgba(255,255,255,.5);\n    }\n    @media (min-width: 40em) {\n      .masthead {\n        position: fixed;\n        top: 0;\n      }\n    \n      .mastfoot {\n        position: fixed;\n        bottom: 0;\n      }\n      .site-wrapper-inner {\n        vertical-align: middle;\n      }\n    \n      /* Handle the widths */\n      .masthead,\n      .mastfoot,\n      .cover-container {\n        width: 100%;\n      }\n    \n    }\n    @media (min-width: 62em) {\n      .masthead,\n      .mastfoot,\n      .cover-container {\n        width: 42rem;\n      }\n    \n    }\n    .chatbubble {\n        position: fixed;\n        bottom: 0;\n        right: 30px;\n        transform: translateY(300px);\n        transition: transform .3s ease-in-out;\n    }\n    .chatbubble.opened {\n        transform: translateY(0)\n    }\n    .chatbubble .unexpanded {\n        display: block;\n        background-color: #e23e3e;\n        padding: 10px 15px 10px;\n        position: relative;\n        cursor: pointer;\n        width: 350px;\n        border-radius: 10px 10px 0 0;\n    }\n    .chatbubble .expanded {\n        height: 300px;\n        width: 350px;\n        background-color: #fff;\n        text-align: left;\n        padding: 10px;\n        color: #333;\n        text-shadow: none;\n        font-size: 14px;\n    }\n    .chatbubble .chat-window {\n      overflow: auto;\n    }\n    .chatbubble .loader-wrapper {\n        margin-top: 50px;\n        text-align: center;\n    }\n    .chatbubble .messages {\n        display: none;\n        list-style: none;\n        margin: 0 0 50px;\n        padding: 0;\n    }\n    .chatbubble .messages li {\n        width: 85%;\n        float: left;\n        padding: 10px;\n        border-radius: 5px 5px 5px 0;\n        font-size: 14px;\n        background: #c9f1e6;\n        margin-bottom: 10px;\n    }\n    .chatbubble .messages li .sender {\n        font-weight: 600;\n    }\n    .chatbubble .messages li.support {\n        float: right;\n        text-align: right;\n        color: #fff;\n        background-color: #e33d3d;\n        border-radius: 5px 5px 0 5px;\n    }\n    .chatbubble .chats .input {\n        position: absolute;\n        bottom: 0;\n        padding: 10px;\n        left: 0;\n        width: 100%;\n        background: #f0f0f0;\n        display: none;\n    }\n    .chatbubble .chats .input .form-group {\n        width: 80%;\n    }\n    .chatbubble .chats .input input {\n        width: 100%;\n    }\n    .chatbubble .chats .input button {\n        width: 20%;\n    }\n    .chatbubble .chats {\n      display: none;\n    }\n    .chatbubble .login-screen {\n      margin-top: 20px;\n      display: none;\n    }\n    .chatbubble .chats.active,\n    .chatbubble .login-screen.active {\n      display: block;\n    }\n    /* Loader Credit: https://codepen.io/ashmind/pen/zqaqpB */\n    .chatbubble .loader {\n      color: #e23e3e;\n      font-family: Consolas, Menlo, Monaco, monospace;\n      font-weight: bold;\n      font-size: 10vh;\n      opacity: 0.8;\n    }\n    .chatbubble .loader span {\n      display: inline-block;\n      -webkit-animation: pulse 0.4s alternate infinite ease-in-out;\n              animation: pulse 0.4s alternate infinite ease-in-out;\n    }\n    .chatbubble .loader span:nth-child(odd) {\n      -webkit-animation-delay: 0.4s;\n              animation-delay: 0.4s;\n    }\n    @-webkit-keyframes pulse {\n      to {\n        -webkit-transform: scale(0.8);\n                transform: scale(0.8);\n        opacity: 0.5;\n      }\n    \n    }\n    @keyframes pulse {\n      to {\n        -webkit-transform: scale(0.8);\n                transform: scale(0.8);\n        opacity: 0.5;\n      }\n    \n    }\n```\n\n\u003e Above we referenced a `bg.jpg` image. You can download a free picture [here](http://pexels.com) and place it in the `public/img` directory.\n\nNow let's include some JavaScript. In the `js` directory, create an `app.js` file and paste the following code:\n\n``` javascript\n    // File: ./public/js/app.js\n    (function() {\n        'use strict';\n    \n        var pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: '/pusher/auth',\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n    \n        let chat = {\n            name:  undefined,\n            email: undefined,\n            myChannel: undefined,\n        }\n    \n        const chatPage   = $(document)\n        const chatWindow = $('.chatbubble')\n        const chatHeader = chatWindow.find('.unexpanded')\n        const chatBody   = chatWindow.find('.chat-window')\n    \n        let helpers = {\n            ToggleChatWindow: function () {\n                chatWindow.toggleClass('opened')\n                chatHeader.find('.title').text(\n                    chatWindow.hasClass('opened') ? 'Minimize Chat Window' : 'Chat with Support'\n                )\n            },\n    \n            ShowAppropriateChatDisplay: function () {\n                (chat.name) ? helpers.ShowChatRoomDisplay() : helpers.ShowChatInitiationDisplay()\n            },\n    \n            ShowChatInitiationDisplay: function () {\n                chatBody.find('.chats').removeClass('active')\n                chatBody.find('.login-screen').addClass('active')\n            },\n    \n            ShowChatRoomDisplay: function () {\n                chatBody.find('.chats').addClass('active')\n                chatBody.find('.login-screen').removeClass('active')\n                setTimeout(function(){\n                    chatBody.find('.loader-wrapper').hide()\n                    chatBody.find('.input, .messages').show()\n                }, 2000)\n            },\n    \n            NewChatMessage: function (message) {\n                if (message !== undefined) {\n                    const messageClass = message.sender !== chat.email ? 'support' : 'user'\n                    chatBody.find('ul.messages').append(\n                        `\u003cli class=\"clearfix message ${messageClass}\"\u003e\n                            \u003cdiv class=\"sender\"\u003e${message.name}\u003c/div\u003e\n                            \u003cdiv class=\"message\"\u003e${message.text}\u003c/div\u003e\n                        \u003c/li\u003e`\n                    )\n                    chatBody.scrollTop(chatBody[0].scrollHeight)\n                }\n            },\n    \n            SendMessageToSupport: function (evt) {\n                evt.preventDefault()\n                let createdAt = new Date()\n                createdAt = createdAt.toLocaleString()\n                const message = $('#newMessage').val().trim()\n                \n                chat.myChannel.trigger('client-guest-new-message', {\n                    'sender': chat.name,\n                    'email': chat.email,\n                    'text': message,\n                    'createdAt': createdAt \n                });\n    \n                helpers.NewChatMessage({\n                    'text': message,\n                    'name': chat.name,\n                    'sender': chat.email\n                })\n    \n                $('#newMessage').val('')\n            },\n    \n            LogIntoChatSession: function (evt) {\n                const name  = $('#fullname').val().trim()\n                const email = $('#email').val().trim().toLowerCase()\n    \n                chatBody.find('#loginScreenForm input, #loginScreenForm button').attr('disabled', true)\n    \n                if ((name !== '' \u0026\u0026 name.length \u003e= 3) \u0026\u0026 (email !== '' \u0026\u0026 email.length \u003e= 5)) {\n                    axios.post('/new/customer', {\"name\":name, \"email\":email}).then(response =\u003e {\n                        chat.name = name\n                        chat.email = email\n                        console.log(response.data.email)\n                        chat.myChannel = pusher.subscribe('private-' + response.data.email);\n                        helpers.ShowAppropriateChatDisplay()\n                    })\n                } else {\n                    alert('Enter a valid name and email.')\n                }\n                \n                evt.preventDefault()\n            }\n        }\n    \n    \n        pusher.bind('client-support-new-message', function(data){\n            helpers.NewChatMessage(data)\n        })\n    \n    \n        chatPage.ready(helpers.ShowAppropriateChatDisplay)\n        chatHeader.on('click', helpers.ToggleChatWindow)\n        \n        chatBody.find('#loginScreenForm').on('submit', helpers.LogIntoChatSession)\n        chatBody.find('#messageSupport').on('submit', helpers.SendMessageToSupport)\n    }());\n```\n\nAbove, we instantiated a Pusher object instance and then we created a `helpers` object. In this object lies the meat of the script. In the `helpers` object we have a few methods that do specific tasks:\n\n\n- `ToggleChatWindow` - toggles the chat windows display.\n- `ShowAppropriateChatDisplay` - decides which chat display to show depending on the action of the user.\n- `ShowChatInitiationDisplay` - shows the initial display for the chat window for the user to initiate a chat session.\n- `ShowChatRoomDisplay` - shows the chat window after the user has instantiated a new chat session.\n- `NewChatMessage` - adds a new chat message to the chat window UI.\n- `SendMessageToSupport` - sends a chat message to the backend.\n- `LogIntoChatSession` - starts a new chat session.\n\n\n\u003e Replace the `PUSHER_*` keys with the one available on your Pusher dashboard.\n\n### Creating the support dashboard\n\nOpen the `support.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./public/support.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003ctitle\u003eX-Cycles | Support \u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"./css/support.css\" \u003e\n      \u003c/head\u003e\n    \n      \u003cbody\u003e\n        \u003cheader\u003e\n            \u003cnav class=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\"\u003e\n                \u003ca class=\"navbar-brand\" href=\"#\"\u003eDashboard\u003c/a\u003e\n            \u003c/nav\u003e\n        \u003c/header\u003e\n    \n        \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"row\" id=\"mainrow\"\u003e\n                \u003cnav class=\"col-sm-3 col-md-2 d-none d-sm-block bg-light sidebar\"\u003e\n                    \u003cul class=\"nav nav-pills flex-column\" id=\"rooms\"\u003e\n                    \u003c/ul\u003e\n                \u003c/nav\u003e\n                \u003cmain role=\"main\" class=\"col-sm-9 ml-sm-auto col-md-10 pt-3\" id=\"main\"\u003e\n                    \u003ch1\u003eChats\u003c/h1\u003e\n                    \u003cp\u003e👈 Select a chat to load the messages\u003c/p\u003e\n                    \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                    \u003cdiv class=\"chat\" style=\"margin-bottom:150px\"\u003e\n                        \u003ch5 id=\"room-title\"\u003e\u003c/h5\u003e\n                        \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                        \u003cdiv class=\"response\"\u003e\n                            \u003cform id=\"replyMessage\"\u003e\n                                \u003cdiv class=\"form-group\"\u003e\n                                    \u003cinput type=\"text\" placeholder=\"Enter Message\" class=\"form-control\" name=\"message\" /\u003e\n                                \u003c/div\u003e\n                            \u003c/form\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"table-responsive\"\u003e\n                          \u003ctable class=\"table table-striped\"\u003e\n                            \u003ctbody id=\"chat-msgs\"\u003e\n                            \u003c/tbody\u003e\n                        \u003c/table\u003e\n                    \u003c/div\u003e\n                \u003c/main\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript type=\"text/javascript\" src=\"./js/support.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nLet’s write the style for the support page. In the `css` directory, create a `support.css` file and paste the following code:\n\n``` css\n    /* File: ./public/css/support.css */\n    body {\n        padding-top: 3.5rem;\n    }\n    h1 {\n        padding-bottom: 9px;\n        margin-bottom: 20px;\n        border-bottom: 1px solid #eee;\n    }\n    .sidebar {\n        position: fixed;\n        top: 51px;\n        bottom: 0;\n        left: 0;\n        z-index: 1000;\n        padding: 20px 0;\n        overflow-x: hidden;\n        overflow-y: auto;\n        border-right: 1px solid #eee;\n    }\n    .sidebar .nav {\n        margin-bottom: 20px;\n    }\n    .sidebar .nav-item {\n        width: 100%;\n    }\n    .sidebar .nav-item + .nav-item {\n        margin-left: 0;\n    }\n    .sidebar .nav-link {\n        border-radius: 0;\n    }\n    .placeholders {\n        padding-bottom: 3rem;\n    }\n    .placeholder img {\n        padding-top: 1.5rem;\n        padding-bottom: 1.5rem;\n    }\n    tr .sender {\n        font-size: 12px;\n        font-weight: 600;\n    }\n    tr .sender span {\n        color: #676767;\n    }\n    .response {\n        display: none;\n    }\n```\n\nNow let's add the JavaScript for the page. In the `js` directory, create a `support.js` file and update it with the following code:\n\n``` javascript\n    // File: ./public/js/support.js\n    (function () {\n        var pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: '/pusher/auth',\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n    \n        let chat = {\n            messages: [],\n            currentRoom: '',\n            currentChannel: '',\n            subscribedChannels: [],\n            subscribedUsers: []\n        }\n    \n        var generalChannel = pusher.subscribe('one-to-many');\n    \n        const chatBody = $(document)\n        const chatRoomsList = $('#rooms')\n        const chatReplyMessage = $('#replyMessage')\n    \n        const helpers = {\n    \n            clearChatMessages: () =\u003e $('#chat-msgs').html(''),\n    \n            displayChatMessage: (message) =\u003e {\n                if (message.email === chat.currentRoom) {\n                    $('#chat-msgs').prepend(\n                        `\u003ctr\u003e\n                            \u003ctd\u003e\n                                \u003cdiv class=\"sender\"\u003e${message.sender} @ \u003cspan class=\"date\"\u003e${message.createdAt}\u003c/span\u003e\u003c/div\u003e\n                                \u003cdiv class=\"message\"\u003e${message.text}\u003c/div\u003e\n                            \u003c/td\u003e\n                        \u003c/tr\u003e`\n                    )\n                }\n            },\n    \n            loadChatRoom: evt =\u003e {\n                chat.currentRoom = evt.target.dataset.roomId\n                chat.currentChannel = evt.target.dataset.channelId\n                if (chat.currentRoom !== undefined) {\n                    $('.response').show()\n                    $('#room-title').text(evt.target.dataset.roomId)\n                }\n                evt.preventDefault()\n                helpers.clearChatMessages()\n            },\n    \n            replyMessage: evt =\u003e {\n                evt.preventDefault()\n                let createdAt = new Date()\n                createdAt = createdAt.toLocaleString()\n                const message = $('#replyMessage input').val().trim()\n                chat.subscribedChannels[chat.currentChannel].trigger('client-support-new-message', {\n                    'name': 'Admin',\n                    'email': chat.currentRoom,\n                    'text': message, \n                    'createdAt': createdAt \n                });\n                \n                helpers.displayChatMessage({\n                    'email': chat.currentRoom,\n                    'sender': 'Support',\n                    'text': message, \n                    'createdAt': createdAt\n                })\n    \n                $('#replyMessage input').val('')\n            },\n        }\n    \n        generalChannel.bind('new-customer', function(data) {\n            chat.subscribedChannels.push(pusher.subscribe('private-' + data.email));\n            chat.subscribedUsers.push(data);\n            // render the new list of subscribed users and clear the former\n            $('#rooms').html(\"\");\n            chat.subscribedUsers.forEach(function (user, index) {\n                    $('#rooms').append(\n                        `\u003cli class=\"nav-item\"\u003e\u003ca data-room-id=\"${user.email}\" data-channel-id=\"${index}\" class=\"nav-link\" href=\"#\"\u003e${user.name}\u003c/a\u003e\u003c/li\u003e`\n                    )\n            })\n        })\n    \n        pusher.bind('client-guest-new-message', function(data){\n            helpers.displayChatMessage(data)\n        })\n    \n        chatReplyMessage.on('submit', helpers.replyMessage)\n        chatRoomsList.on('click', 'li', helpers.loadChatRoom)\n    }())\n```\n\nAbove, the script looks almost similar to the `app.js` script. The `helpers` object contains the following functions:\n\n\n- `clearChatMessages` - clears the chat message window.\n- `displayChatMessage` - displays a new chat message in the current window.\n- `loadChatRoom` - shows a users chat messages in the general chat window after a room is selected.\n- `replyMessage` - sends a chat message to the current room.\n\nAfter declaring the helpers, we bind to the Pusher channel and register our listeners.\n\n\n\u003e Replace the `PUSHER_*` keys with the one available on your Pusher dashboard.\n\n\n## Running the application\n\nTo test the application, we will run the application by typing this command in the terminal:\n\n```\n    $ go run chat.go\n```\n\nWe can visit these addresses, http://127.0.0.1:8070 and http://127.0.0.1:8070/support.html, on a web browser using different windows to test that the application works correctly. Here’s what we should see:\n\n![go-chat-widget-demo](//images.ctfassets.net/1es3ne0caaid/3qN7ML2VMcqaMyMaSGWsiw/3bb18095d1042c0708925e2b35667789/go-chat-widget-demo.gif)\n\n\n## Conclusion\n\nIn this tutorial, we learned how to create a basic realtime web chat widget using Go and JavaScript. The source code for this project is available [here](https://github.com/neoighodaro/go-pusher-chat-widget) on GitHub.","metaTitle":"Building a chat widget with Go and JavaScript","metaDescription":"Use Go and JavaScript to create a simple chat widget. The app comprises a user panel and an admin panel. Users initiate chats, and admins can see a list of waiting users and choose to join a chat session."}}],"defaultValue":"Channels \u0026 Chat","queryType":"tag","pages":4,"route":"/tutorials","query":{"product":"Channels","tag":"Chat"}}},"page":"/tutorials","query":{"product":"Channels","tag":"Chat"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Chat by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:37:39 GMT -->
</html>