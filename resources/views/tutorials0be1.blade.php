<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=no%20pusher%20tech&tag=JavaScript by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:40:47 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dash.pusher.com/no pusher tech" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dash.pusher.com/authenticate/register?product=no%20pusher%20tech" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dash.pusher.com/no pusher tech" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dash.pusher.com/authenticate/register?product=no%20pusher%20tech" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="no pusher tech" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dash.pusher.com/no pusher tech" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dash.pusher.com/authenticate/register?product=no%20pusher%20tech" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">60</span> tutorials for “<span class="css-npldjc ehwuahf2">no pusher tech &amp; JavaScript</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials512c.html?product=Beams&amp;tag=JavaScript" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials78c7.html?product=no%20pusher%20tech" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#C223CE"></path></svg></a><a href="tutorials9f36.html?product=no%20pusher%20tech&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsdfdb.html?product=no%20pusher%20tech&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials0e4c.html?product=no%20pusher%20tech&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials01a4.html?product=no%20pusher%20tech&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorialsc43b.html?product=no%20pusher%20tech&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials7632.html?product=no%20pusher%20tech&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials8e84.html?product=no%20pusher%20tech&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials6f6a.html?product=no%20pusher%20tech&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="no pusher tech &amp; JavaScript"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/serverless-react-native-aws-amplify.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">React Native<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to build a serverless mobile app with React Native and AWS Amplify</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This tutorial is a step-by-step guide to connect AWS Amplify and AWS AppSync services with your React Native application...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/error-handling-angular-part-4.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">CSS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">TypeScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Introduction to error handling in Angular 7: Part 4 - Rollbar </h3><p class="css-k12xad e5jrto45">This tutorial series will introduce you to errors in Angular 7. In this final part, part four, learn about errors tracki...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/create-react-app-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">TypeScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">New features of Create-React-App version 3.0</h3><p class="css-k12xad e5jrto45">Create React App just released its third version (3.0.0). A tool to help you build React applications, it saves you from...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/error-handling-angular-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">CSS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Introduction to error handling in Angular 7: Part 3 - Sentry </h3><p class="css-k12xad e5jrto45">This tutorial series will introduce you to errors in Angular 7. In part three, learn about errors tracking in Angular 7 ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/error-handling-angular-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">CSS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Introduction to error handling in Angular 7: Part 2 - HTTP error handling</h3><p class="css-k12xad e5jrto45">This tutorial series will introduce you to errors in JavaScript. In part two, learn about HTTP errors, how to use the `H...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/game-device-sensors-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Gaming<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a game using device sensors in React Native</h3><p class="css-k12xad e5jrto45">Build a mobile game, taking advantage of React Native&#x27;s device sensors module. Use the gyroscope to detect the tilt of t...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/error-handling-angular-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">CSS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Introduction to error handling in Angular 7: Part 1 - Angular errorHandler</h3><p class="css-k12xad e5jrto45">This tutorial series will introduce you to errors in JavaScript and the try-catch concept. In part one, learn how the co...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/learning-graphql-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">GraphQL<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with GraphQL in React Native</h3><p class="css-k12xad e5jrto45">GraphQL makes it easier for developers to get the specific data we want with less code. In this tutorial you will learn ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/lifecycle-methods-react-16.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Lifecycle methods in React 16</h3><p class="css-k12xad e5jrto45">Gain an understanding of all the lifecycle methods in React Native 16, including the error boundaries methods. Learn whe...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Prev</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsd8cc.html?product=no%20pusher%20tech&amp;tag=JavaScript&amp;page=1" class="css-2wakph edg0byb1">1</a><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials5d0f.html?product=no%20pusher%20tech&amp;tag=JavaScript&amp;page=2" class="css-za1ua3 edg0byb1">2</a><a href="tutorials0f87.html?product=no%20pusher%20tech&amp;tag=JavaScript&amp;page=3" class="css-za1ua3 edg0byb1">3</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsb33b.html?product=no%20pusher%20tech&amp;tag=JavaScript&amp;page=7" class="css-5s6711 edg0byb1">7</a><a href="tutorials5d0f.html?product=no%20pusher%20tech&amp;tag=JavaScript&amp;page=2" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":60,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1Cf9pX8xJ3StD1AdFkys30","type":"Entry","createdAt":"2019-08-14T16:58:22.267Z","updatedAt":"2020-06-19T13:22:43.365Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to build a serverless mobile app with React Native and AWS Amplify","url":"serverless-react-native-aws-amplify","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6ac2UAo0ZUWeUYiMg2w8eK","type":"Entry","createdAt":"2018-10-03T18:51:52.293Z","updatedAt":"2018-10-03T18:51:52.293Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Aman Mittal","url":"aman-mittal","email":"amanmittal.work@gmail.com","twitter":"https://twitter.com/amanhimself","github":"https://github.com/amandeepmittal","guestWriter":true}}],"projectRepo":"https://github.com/amandeepmittal/tbrlist-amplify","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"NnKmQxhMC4UySeaEaK4K6","type":"Entry","createdAt":"2018-10-18T18:00:28.031Z","updatedAt":"2018-10-18T18:00:28.031Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Expo","url":"expo","type":"library"}}],"reviewDate":"2019-08-14","description":"This tutorial is a step-by-step guide to connect AWS Amplify and AWS AppSync services with your React Native application. Build a cross-platform mobile app by integrating frameworks like React Native and Expo CLI, with services AWS AppSync and Amplify.","prerequisite":"You will need Node 10+, npm, watchman, expo-cli 2.13+ and aws-amplify/cli 1+ installed on your machine.","content":"## Introduction\n\n[AWS Amplify](https://aws-amplify.github.io/) is a command line tool-chain that helps you to develop and connect AWS cloud services directly to any frontend environment, whether a library such as ReactJS or a mobile development framework, React Native. Building a full-stack mobile app in the real world requires a lot of basic requirements to be fulfilled. AWS Amplify tries to reduce the amount of time spent on building an application using it.\n\nThis tutorial is a step-by-step guide to connect AWS Amplify and AWS AppSync services with your React Native application. You are also going to use Expo CLI to scaffold a React Native app quickly.\n\n\n## Prerequisites\n\nYou are going to need the following installed on your local dev machine in order to follow this tutorial.\n\n- [Node.js/npm installed on your local machine](https://nodejs.org/) version \u003e= `10.x.x`\n- [watchman](https://facebook.github.io/watchman/) to watch file changes in a React Native app\n- `[expo-cli](https://www.npmjs.com/package/expo-cli)` version \u003e= `2.13.0`\n- [AWS account](https://aws.amazon.com/console/)\n- [@aws-amplify/cli version](https://www.npmjs.com/package/@aws-amplify/cli) \u003e= `1.1.18`\n\nYou should have some familiarity with React Native and mobile development, and be able to troubleshoot your own dev environment.\n\n\n\u003e **Note**: Working with development environments can be a bit tricky. Since, you are going to use Expo CLI for this tutorial.\n\n\n## What is AWS Amplify?\n\nAmazon Web Services is a well-known technology that provides cloud services. These services include hosting, storage, database technologies and managing serverless applications for both mobile and web. React Native already has an advantage by quickly and easily bootstrapping an app using tools like Expo (previously known as create-react-native-app). However, writing and managing a backend service for your app can be challenging. To help us JavaScript developers the AWS mobile team is exclusively managing a project called AWS Amplify that helps to embed cloud services and provide an infrastructure with features in the form of APIs as follows:\n\n- Authentication\n- GraphQL Client through an API, in most uses cases, AWS AppSync with offline and real-time features\n- Push Notifications\n- Interactions in the form of conversational bots\n- Cloud Storage\n- Internationalization\n\nTo install amplify CLI tool, run the following command.\n\n```\n    npm install -g @aws-amplify/cli\n```\n\n## Creating the Expo app\n\nTo create a new Expo application, run the following command from a terminal window.\n\n```\n    expo init tbrlist-amplify\n```\n\nThe Expo command line interface will prompt a few questions regarding the template of the project to be generated and the name and which package manager (*npm/yarn?*) to use to install npm dependencies. On initializing the new project it will ask you follow questions. Choose the below:\n\n- **Choose a template**: expo-template-blank\n- **Please enter a few initial configuration values**: “name”: “trblist Amplify”\n\nTake a look below for the first two questions and use npm to install app dependencies.\n\n\n![serverless-react-native-aws-amplifiy-img1](//images.ctfassets.net/1es3ne0caaid/11Tdi9VfeNgpFwxfJOgE4g/9f25e4dfee3b16c25155530aced1f51e/serverless-react-native-aws-amplifiy-img1.png)\n\nAfter scaffolding a new Expo project navigate inside the directory using `cd tbrlist-amplify`.\n\n\n## Configure AWS amplify app\n\nTo begin with configuration, it is important to have an AWS account signup. This will make it easier for you to follow the rest of the tutorial. After logging in your default browser into the AWS console, open up the command line window in the Expo app project’s root. Run the following command:\n\n```\n    amplify configure\n```\n\nPress enter to continue and it will ask you to login to AWS console account with your login credentials by opening a new browser window. Once logged in, go back to terminal window and press enter to continue, again. The CLI tool will now prompt you with a different set of questions in order to set up a cloud service and create a user in the cloud. Follow closely.\n\n\n- **Choose a region**: us-east-2\n- **Specify the username of the new IAM user**: tbrlist-amplify\n\nOn entering the username, press **enter** and it will open AWS console again in a browser window for you to add a user.\n\n\n![serverless-react-native-aws-amplifiy-img2](//images.ctfassets.net/1es3ne0caaid/2RbgoV6PexVcuPnmnlOdex/38c5c7720eb0f8d9897c0436efb4eb5c/serverless-react-native-aws-amplifiy-img2.png)\n\nMake sure in the above screen that **Programmatic access** is checked as shown. This allows you to add the user you are now creating to create resources in the form of different APIs and tools by providing you with an access key and secret key. Click on the button **Next: Permissions**.\n\n\n![serverless-react-native-aws-amplifiy-img3](//images.ctfassets.net/1es3ne0caaid/C1V9qA9mzIshk3cf660ef/23017a7dc992adeb58fe5078e7452c9e/serverless-react-native-aws-amplifiy-img3.png)\n\nOn the next page, you will see that policy has already been selected by default. This provides you the full access to AWS services by enabling your user to be as an administrator. Click **Next: Tags**. On the next page, leave it blank.\n\n\n![serverless-react-native-aws-amplifiy-img4](//images.ctfassets.net/1es3ne0caaid/1EtCiFt2dJUUDJwggPE4xR/e8aff678642fd01749e1c8248cdaa72a/serverless-react-native-aws-amplifiy-img4.png)\n\nNow, click **Next: Review**.\n\n\n![serverless-react-native-aws-amplifiy-img5](//images.ctfassets.net/1es3ne0caaid/4T9yN8gjRk06b76QqwbrsL/aafbf043e5f426b1ddb68ec365bc714b/serverless-react-native-aws-amplifiy-img5.png)\n\nEverything is good, now click **Create user**.\n\n\n![serverless-react-native-aws-amplifiy-img6](//images.ctfassets.net/1es3ne0caaid/SVooMFRmReMQTtcKOcQBE/89dc04c86c26001616e8f98cfd7f5a2d/serverless-react-native-aws-amplifiy-img6.png)\n\nYou will get an **Access key** and a **secret key**. Copy them and please enter these keys on your terminal.\n\n\n![serverless-react-native-aws-amplifiy-img7](//images.ctfassets.net/1es3ne0caaid/STxR4F1ktSHYXIFlJFzTY/90f30dcf53d94241ae0dcef8414cb6d0/serverless-react-native-aws-amplifiy-img7.png)\n\nFor **Profile Name**, we are going to enter the project name to keep things simple for now.\n\n\n![serverless-react-native-aws-amplifiy-img8](//images.ctfassets.net/1es3ne0caaid/28r9v1kZAQyJeAUyahiu2y/05540898362fe078014964582b7669a0/serverless-react-native-aws-amplifiy-img8.png)\n\nYou will get a success message that the new user has been setup and the command line prompt will exit as you can see this from the above image. The configuration of the AWS Amplify user is complete.\n\n\n## Initializing AWS Amplify\n\nIn this section, you will be initializing the Expo app in order to make it work with the AWS cloud services. The first step in this process is to run the below command from a terminal window inside the app directory.\n\n```\n    amplify init\n```\n\nThis command will you ask another set of questions in order to setup amplify SDK inside the Expo project. In the below screen you will find these questions and the answers you need to select. Most of them are default as prompted by the CLI tool. Except for the name of the environment and the default editor, you can choose the settings as default. \n\nFor the **name of the environment** you can either choose the name of the operating system you are working on or the environments such as `dev`, `local` or `production`. To choose a default editor, you are prompter with different options such as `Visual Studio Code`.\n\n\n\n![serverless-react-native-aws-amplifiy-img9](//images.ctfassets.net/1es3ne0caaid/61xEL6SqtihiutldI8WdGA/083125687393ad2d5a0c520f8afeaebd/serverless-react-native-aws-amplifiy-img9.png)\n\nWhen asked if you would like to use an AWS profile, choose **Yes**, using the user profile you created when configuring the CLI earlier: `tbrlist-amplify`.\n\n\n![serverless-react-native-aws-amplifiy-img10](//images.ctfassets.net/1es3ne0caaid/58o7L299GRNa33hAXz3ker/31843bff487e7405c5fb258355d881f0/serverless-react-native-aws-amplifiy-img10.png)\n\nAfter a few moments, it will create a new directory inside our Expo app called `amplify` that mostly contains configuration files. It will also edit `.gitignore` file so make sure you have that file at the root of your project.\n\n\n![serverless-react-native-aws-amplifiy-img11](//images.ctfassets.net/1es3ne0caaid/2cuNGI7XucVWgSZbsrOV6w/dcd96298303d5620b154fe641670f429/serverless-react-native-aws-amplifiy-img11.png)\n\nTo see if everything is connected and working, from the terminal, run `npm start` and then choose either `ios` or `android` simulator to run the React Native app.\n\n![serverless-react-native-aws-amplifiy-img12](//images.ctfassets.net/1es3ne0caaid/2qYzX9Qj5H6nlcMKFw6yjD/0cb327888c4a33fe8ccb4b1bdaad8a1b/serverless-react-native-aws-amplifiy-img12.png)\n\n\u003e **Note**: Android developers make sure that a virtual device (AVD) is already running or a device is connected to your dev machine in order to run the app. If everything runs successfully, you will get the following screen in your simulator or a real device.\n\n![serverless-react-native-aws-amplifiy-img13](//images.ctfassets.net/1es3ne0caaid/1UjxNzY4zwhiZcmWIco7Mc/5bec1b1e5c06a84a1ed72b540e1618aa/serverless-react-native-aws-amplifiy-img13.png)\n\n## Building the app\n\nIn this section, you are going to build the UI part of the React Native and Expo application. The idea behind the demo application for this tutorial is to create a \"To-be-read\" listing app such that if you read books (like me), you can track which books you want to read this year. In the application, you are going to provide two input fields. One to record the name of the book and the other one is for the author of the book. Open the `App.js` file and define an initial state.\n\n```javascript\n    // App.js\n    state = {\n      title: '',\n      author: '',\n      books: []\n    };\n```\n\nThe state in the App component contains three properties. The `title` is equivalent to the title of a book, `author` for a book's author name and last one is an array that keeps records of all whole list. Modify the App component further as below.\n\n```javascript\n    // App.js\n    import React from 'react';\n    import { StyleSheet, Text, TextInput, Button, View } from 'react-native';\n    export default class App extends React.Component {\n      state = {\n        title: '',\n        author: '',\n        books: []\n      };\n      onChangeText = (key, val) =\u003e {\n        this.setState({ [key]: val });\n      };\n      render() {\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cTextInput\n              style={styles.input}\n              value={this.state.title}\n              onChangeText={val =\u003e this.onChangeText('title', val)}\n              placeholder=\"What do you want to read?\"\n            /\u003e\n            \u003cTextInput\n              style={styles.input}\n              value={this.state.author}\n              onChangeText={val =\u003e this.onChangeText('author', val)}\n              placeholder=\"Who wrote it?\"\n            /\u003e\n            \u003cButton\n              onPress={() =\u003e alert('Success!')}\n              title=\"Add to TBR\"\n              color=\"#eeaa55\"\n            /\u003e\n          \u003c/View\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        paddingHorizontal: 10,\n        paddingTop: 50\n      },\n      input: {\n        height: 50,\n        borderBottomWidth: 2,\n        borderBottomColor: 'blue',\n        marginVertical: 10\n      }\n    });\n```\n\nThe above `App` component is a close version of how the app is going to behave in the future. So far you have both the input fields and a button. Each input field has an `onPress` method that will trigger the API to update the database later when making connections to the GraphQL API. The `Button` component above also displays a success alert message when clicked.\n\nOn running the command `npm start`, open the app on the desired simulator. You will get the following result.\n\n![serverless-react-native-aws-amplifiy-img14](//images.ctfassets.net/1es3ne0caaid/6Jfa6EgHbguj2h3LDl4xjl/6e03303a624801179e6f49936e4c9d76/serverless-react-native-aws-amplifiy-img14.png)\n\n## Adding a GraphQL API using AppSync\n\nTo add a GraphQL API to the current app, we are going to leverage AWS AppAsync. It uses GraphQL, an API query language solely focus on data-driven applications. You don’t have to write and hook a complete backend infrastructure. It offers realtime updates and built-in offline support along with first-class integration with ElasticSearch, DynamoDB, and AWS Lambda.\n\nFrom the terminal window, run the below command.\n\n```\n    amplify add api\n```\n\nOn the running the above command, the CLI tool prompts you whether to initiate a GraphQL API or a REST API. Note that any REST API created using this service will lead to the use of Lambda functions that require Node.js functions to be written. Choose the option GraphQL API here.\n\n\n![serverless-react-native-aws-amplifiy-img15](//images.ctfassets.net/1es3ne0caaid/2QNaDi9hIxJknBNqQDzS0J/e37ddbb37a9b1a959c5be3f4b9a35213/serverless-react-native-aws-amplifiy-img15.png)\n\nIt will continue to ask you a set of questions. Here is the recommended answer to each question that you need to fill in order to proceed with this tutorial.\n\n- **Provide API name**: tbrlist\n- **Choose an authorization type for the API**: API key\n- **Do you have an annotated GraphQL schema?** No\n- **Do you want a guided schema creation?** Yes\n- **What best describes your project**: Single object with fields (e.g., “Todo” with ID, name, description)\n- **Do you want to edit the schema now?** Yes\n\nAnswering **Yes** to the last question will open the default text editor on your local machine with a new file called `schema.graphql`. In this file, you can modify the default schema for your GraphQL API object. Since you choose a single object that can have multiple fields, edit the file as follows:\n\n```\n    type Book @model {\n      id: ID!\n      title: String!\n      author: String\n    }\n```\n\nThe `@model` is for storing types in Amazon DynamoDB. Yes, behind the scenes, the data passed through the GraphQL API to store will be stored in DynamoDB. Note that this schema represents a single model of how data is going to be saved. Also, you can completely change this schema or tweak a little according to your needs later from the AWS Console. Once you have edited the schema as above, save the file and go back to terminal window and press enter to continue. It will then complete the setup.\n\nThis step creates a local configuration for the AppSync API. If you need to modify anything, you can before executing the next command. Once the next command `amplify push` is executed, it will write all those changes you did in the cloud services in the real time. Now run the command.\n\n\n![serverless-react-native-aws-amplifiy-img16](//images.ctfassets.net/1es3ne0caaid/ORq6rygU1WLBQPHChNBiK/a4351e910bb41a95ac7448381650030a/serverless-react-native-aws-amplifiy-img16.png)\n\n \nYou will get a prompt, **Do you want to generate code for your newly created GraphQL API?** We are going to with the default and press **Y** for yes. Once the GraphQL schema compilation is done you will get a success message and a new configuration file in the project's root called `aws-export.js`. You are going to use this file to send queries and mutations.\n\nTo make sure that the API is created, visit **AWS Console** and in the AWS services section on the home page, search for AWS AppSync. You will be directed to a page where the GraphQL APIs are stored such as below.\n\n\n![serverless-react-native-aws-amplifiy-img17](//images.ctfassets.net/1es3ne0caaid/WbLCFiQb18EV1T1UeMYRW/e3f5ebc51f205bd866843a2ebc4b7c98/serverless-react-native-aws-amplifiy-img17.png)\n\n\n## Mutating the GraphQL API\n\nIn order to proceed, you are now required to install a dependency related to AWS Amplify. Open a terminal window and execute the following command.\n\n```\n    npm install --save aws-amplify\n```\n\nThis dependency will allow you to make API calls to the GraphQL service. Open up `App.js` file and let us first configure a little more to be able to communicate with the database API. Add the following just after you have imported everything.\n\n```javascript\n    import Amplify from '@aws-amplify/core';\n    import config from './aws-exports';\n    Amplify.configure(config);\n```\n\nNext, import `API` and `graphqlOperation` helpers from `@aws-amplify/api`. Using both of them will help you execute any query on performing an action, such as fetching books or any mutation such as creating a new record.\n\n```\n    import API, { graphqlOperation } from '@aws-amplify/api';\n```\n\nLet us create the first mutation to add a new book. Mutations in GraphQL are similar to modifying data in a REST API using either HTTP `POST` or `PUT`.\n\n```javascript\n    const AddBook = `\n    mutation ($title: String! $author: String) {\n      createBook(input: {\n        title: $title\n        author: $author\n      }) {\n        id title author\n      }\n    }\n    `;\n```\n\nThis mutation `AddBook` take a title and an author field of type String. In the end, it just returns the whole book object along with an `id` that is automatically created by the GraphQL API in the database. However, this mutation will be useful when it executes. In the next snippet of code, you are going to add a new asynchronous function called `addBook` just before the render function of the `App` component.\n\n```javascript\n    addBook = async () =\u003e {\n      if (this.state.title === '' || this.state.author === '') return;\n      const book = { title: this.state.title, author: this.state.author };\n      try {\n        const books = [...this.state.books, book];\n        this.setState({ books, title: '', author: '' });\n        await API.graphql(graphqlOperation(AddBook, book));\n        console.log('success');\n      } catch (err) {\n        console.log('error: ', err);\n      }\n    };\n```\n\nIn the above snippet, there is an `if` statement to check whether there is an empty field or not. If there is one, don’t mutate data to the database and just return in our case for this demo. You can, however, extend this and show an error to the user on the UI. Next, using `try/catch` syntax, `API.graphql` is executed to add the record to the database by running the mutation `AddBook`.\nAlso, add this function to the `onPress` prop on the `Button` component.\n\n```javascript\n    \u003cButton onPress={this.addBook} title=\"Add to TBR\" color=\"#eeaa55\" /\u003e\n```\n\nHere is result you get.\n\n\n![serverless-react-native-aws-amplifiy-img18](//images.ctfassets.net/1es3ne0caaid/1xPjsi5259llX76zvjNZ8F/29288d3f9a800606adafbf276a7a1635/serverless-react-native-aws-amplifiy-img18.gif)\n\nTo verify that the data has been stored there are two ways. First, since there is a `console.log` statement, in the Expo logs generated, on add the book, it should prompt the word **success**.\n\n\n![serverless-react-native-aws-amplifiy-img19](//images.ctfassets.net/1es3ne0caaid/3VFdXyBh2Wbrh9ZUcYECGz/b1270b091afd1131785b5ac04b657a0e/serverless-react-native-aws-amplifiy-img19.png)\n\nThe second way is to visit the API's data source. Select the API first, then from sidebar menu, select **Data Sources** and then click **Resource**.\n\n\n![serverless-react-native-aws-amplifiy-img20](//images.ctfassets.net/1es3ne0caaid/2OflHt2UwBxx7jNQ5B3hj5/b156f44bbab89c801aec456c0a4aa61a/serverless-react-native-aws-amplifiy-img20.png)\n\nYou will now be directed DynamoDB page associated with the API where data table is actually stored as you can see below.\n\n\n![serverless-react-native-aws-amplifiy-img21](//images.ctfassets.net/1es3ne0caaid/1GcgS77xuuslmYMOgDHGc9/307c59f16813d0c46f0345300b4145ad/serverless-react-native-aws-amplifiy-img21.png)\n\nIn the below image do notice that fields such as `_typename`, `id`, `createdAt` and `updatedAt` are automatically created the AppSync API.\n\n\n![serverless-react-native-aws-amplifiy-img22](//images.ctfassets.net/1es3ne0caaid/5BzLKZmJy2Bf0a0r9cFvFC/022d9f041c510b471e7f1f20db4e2baf/serverless-react-native-aws-amplifiy-img22.png)\n\nHere is the complete `App.js` code so far.\n\n```javascript\n    //App.js\n    import React from 'react';\n    import { StyleSheet, Text, TextInput, Button, View } from 'react-native';\n    import Amplify from 'aws-amplify';\n    import config from './aws-exports';\n    Amplify.configure(config);\n    import { API, graphqlOperation } from 'aws-amplify';\n    const AddBook = `\n    mutation ($title: String! $author: String) {\n      createBook(input: {\n        title: $title\n        author: $author\n      }) {\n        id title author\n      }\n    }\n    `;\n    export default class App extends React.Component {\n      state = {\n        title: '',\n        author: '',\n        books: []\n      };\n      onChangeText = (key, val) =\u003e {\n        this.setState({ [key]: val });\n      };\n      addBook = async () =\u003e {\n        if (this.state.title === '' || this.state.author === '') return;\n        const book = { title: this.state.title, author: this.state.author };\n        try {\n          const books = [...this.state.books, book];\n          this.setState({ books, title: '', author: '' });\n          console.log('books: ', books);\n          await API.graphql(graphqlOperation(AddBook, book));\n          console.log('success');\n        } catch (err) {\n          console.log('error: ', err);\n        }\n      };\n      render() {\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cTextInput\n              style={styles.input}\n              value={this.state.title}\n              onChangeText={val =\u003e this.onChangeText('title', val)}\n              placeholder=\"What do you want to read?\"\n            /\u003e\n            \u003cTextInput\n              style={styles.input}\n              value={this.state.author}\n              onChangeText={val =\u003e this.onChangeText('author', val)}\n              placeholder=\"Who wrote it?\"\n            /\u003e\n            \u003cButton onPress={this.addBook} title=\"Add to TBR\" color=\"#eeaa55\" /\u003e\n          \u003c/View\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        paddingHorizontal: 10,\n        paddingTop: 50\n      },\n      input: {\n        height: 50,\n        borderBottomWidth: 2,\n        borderBottomColor: 'blue',\n        marginVertical: 10\n      }\n    });\n```\n\n\n## Querying the data from the API\n\nNow, add a query to fetch the list of books and display them below the input fields in the app's UI. Open `App.js` file and add the below snippet just above the existing GraphQL mutation.\n\n```javascript\n    const Listbooks = `\n    query {\n      listBooks {\n        items {\n          id title author\n        }\n      }\n    }\n    `;\n```\n\nTo fetch the list of books from the data source, add a lifecycle method just below where you have initialized the state inside the `App` component.\n\n```javascript\n    async componentDidMount() {\n            try {\n                const books = await API.graphql(graphqlOperation(ListBooks));\n                console.log('books: ', books);\n                this.setState({ books: books.data.listBooks.items });\n            } catch (err) {\n                console.log('error: ', err);\n            }\n        }\n```\n\nFetching data using a query is simpler than sending a mutation. Here is the complete code of `App.js` file with a query and the list books rendered with its own styling after the `Button` component using JavaScript's map function.\n\n```javascript\n    // App.js\n    import React from 'react';\n    import { StyleSheet, Text, TextInput, Button, View } from 'react-native';\n    import Amplify from 'aws-amplify';\n    import config from './aws-exports';\n    Amplify.configure(config);\n    import { API, graphqlOperation } from 'aws-amplify';\n    const ListBooks = `\n    query {\n      listBooks {\n        items {\n          id title author\n        }\n      }\n    }\n    `;\n    const AddBook = `\n    mutation ($title: String! $author: String) {\n      createBook(input: {\n        title: $title\n        author: $author\n      }) {\n        id title author\n      }\n    }\n    `;\n    export default class App extends React.Component {\n      state = {\n        title: '',\n        author: '',\n        books: []\n      };\n      async componentDidMount() {\n        try {\n          const books = await API.graphql(graphqlOperation(ListBooks));\n          console.log('books: ', books);\n          this.setState({ books: books.data.listBooks.items });\n        } catch (err) {\n          console.log('error: ', err);\n        }\n      }\n      onChangeText = (key, val) =\u003e {\n        this.setState({ [key]: val });\n      };\n      addBook = async () =\u003e {\n        if (this.state.title === '' || this.state.author === '') return;\n        const book = { title: this.state.title, author: this.state.author };\n        try {\n          const books = [...this.state.books, book];\n          this.setState({ books, title: '', author: '' });\n          console.log('books: ', books);\n          await API.graphql(graphqlOperation(AddBook, book));\n          console.log('success');\n        } catch (err) {\n          console.log('error: ', err);\n        }\n      };\n      render() {\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cTextInput\n              style={styles.input}\n              value={this.state.title}\n              onChangeText={val =\u003e this.onChangeText('title', val)}\n              placeholder=\"What do you want to read?\"\n            /\u003e\n            \u003cTextInput\n              style={styles.input}\n              value={this.state.author}\n              onChangeText={val =\u003e this.onChangeText('author', val)}\n              placeholder=\"Who wrote it?\"\n            /\u003e\n            \u003cButton onPress={this.addBook} title=\"Add to TBR\" color=\"#eeaa55\" /\u003e\n            {this.state.books.map((book, index) =\u003e (\n              \u003cView key={index} style={styles.book}\u003e\n                \u003cText style={styles.title}\u003e{book.title}\u003c/Text\u003e\n                \u003cText style={styles.author}\u003e{book.author}\u003c/Text\u003e\n              \u003c/View\u003e\n            ))}\n          \u003c/View\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        paddingHorizontal: 10,\n        paddingTop: 50\n      },\n      input: {\n        height: 50,\n        borderBottomWidth: 2,\n        borderBottomColor: 'blue',\n        marginVertical: 10\n      },\n      book: {\n        borderBottomWidth: 1,\n        borderBottomColor: '#ddd',\n        paddingVertical: 10\n      },\n      title: { fontSize: 16 },\n      author: { color: 'rgba(0, 0, 0, .5)' }\n    });\n```\n\nBelow image is the final result of the application.\n\n\n![serverless-react-native-aws-amplifiy-img23](//images.ctfassets.net/1es3ne0caaid/3Qdia2Q9u4cfJ2flIUxct4/756f9e43395c91b8c3bb7672a476fae0/serverless-react-native-aws-amplifiy-img23.png)\n\n## Conclusion\n\n*Congratulations!* You have successfully built a cross-platform mobile app by integrating frameworks like React Native and Expo with services AWS AppSync and Amplify. If you want to dig deep, possibilities are endless for the serverless architecture. Refer to the [AWS Amplify community page](https://amplify.aws/community/) for more examples and use cases.\n\nYou can find the complete code for this tutorial in this [GitHub repository](https://github.com/amandeepmittal/tbrlist-amplify).","metaTitle":"Build a serverless app with React Native and AWS Amplify","metaDescription":"This tutorial is a step-by-step guide to connect AWS Amplify and AWS AppSync services with your React Native application. Build a cross-platform mobile app by integrating frameworks like React Native and Expo CLI, with services AWS AppSync and Amplify."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3NhAHeVaknPx5inQLcQKD0","type":"Entry","createdAt":"2019-08-12T18:17:58.498Z","updatedAt":"2019-08-12T18:17:58.498Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Introduction to error handling in Angular 7: Part 4 - Rollbar ","url":"error-handling-angular-part-4","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55Vy5qUc2Hc2NxBxWerK1T","type":"Entry","createdAt":"2019-03-16T13:13:19.673Z","updatedAt":"2019-03-16T13:13:19.673Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lotanna Nwose","url":"lotanna-nwose","email":"viclotana@gmail.com","twitter":"https://twitter.com/viclotana","github":"https://github.com/viclotana","guestWriter":true}}],"projectRepo":"https://github.com/viclotana/ng_errors","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2019-08-12","description":"This tutorial series will introduce you to errors in Angular 7. In this final part, part four, learn about errors tracking in Angular 7 using the errorHandler class and Rollbar. Rollbar is one of the best error tracking services around for web applications.","prerequisite":"You will need to have Node 11, Node Package Manager 6.7+, Angular CLI 7+ and Angular 7+ installed on your machine.","content":"In this turorial, you will be introduced to errors tracking in Angular 7 using the errorHandler class and Rollbar.\n\n![angular-errorhandler-rollbar-img1](//images.ctfassets.net/1es3ne0caaid/3yB85QZ84GXIMsJLPTe0ta/5a8a3b9a1972e2ba153ec581a3816684/angular-errorhandler-rollbar-img1.png)\n\nThis is the last part of the Angular 7 error handling series, you can refer to [the first part here](https://pusher.com/tutorials/error-handling-angular-part-1), and [the second here](https://pusher.com/tutorials/error-handling-angular-part-2) and [the third part here](https://pusher.com/tutorials/error-handling-angular-part-3).\n\n\n## Prerequisites\n\nTo be able to follow through in this article's demonstration you should have:\n\n- Node version 11.0 installed on your machine.\n- Node Package Manager version 6.7 (usually ships with Node installation).\n- [Angular CLI](https://cli.angular.io/) version 7.0\n- The latest version of Angular (version 7)\n\n```\n    // run the command in a terminal\n    ng version\n```\n\nConfirm that you are using version 7, and update to 7 if you are not.\nOther things that will be nice-to-haves are:\n\n\n- A working knowledge of the Angular framework at a beginner level.\n- Familiarity with Angular services will be a plus but not a requirement.\n\nIn this series, you have been introduced earlier to handling client side errors and then HTTP errors gracefully in Angular 7 with tools like errorHandlers, Interceptors and even RxJS operators. In this post you will be shown how to track these errors in a remote tracking environment.\n\n## The problem\n\nLet’s review the problems we face with testing and error tracking in production. You can skip this if you read part three.\n\n### Tracking errors\nWhen your Angular application is running in the development server with ng serve you can easily track errors in the application. The fastest way you can do this for JavaScript errors is with the errorHandler as it was illustrated in [this introductory post here](https://pusher.com/tutorials/error-handling-angular-part-1). The errorHandler logs this error for you, the developer, in the browser console you test your application with. This is standard procedure for the development environment.\n\n### ErrorHandler limitations\nWhen you build out the application in production and ship it to your users however, there is a big problem that should be obvious by now. Testing the shipped applications become an issue. If your application is in say beta stage, you might maybe send it to family and friends to use, you have to also be on those different devices to be able to spot the errors in their various browser consoles. This is of course not a scalable solution if you have many users who might not even be in the same location as you. \n\n### Leaving error reporting to users\nInitially, the solution to this problem will be to build a system in such a way that your users can report errors on the application. However, this is rarely the case as users have been reported to be really impatient and this is confirmed by the [statistics on the high churn rate of users](https://www.statista.com/statistics/384224/monthly-app-launches-churn/) with applications. The more likely situation that is more commonly seen in the place of error reporting is one-star ratings and high churn rate.\n\nA user is more likely not to use your application and even give a bad review of it than they are to report the error experienced while using the app. This is very practical and it shows an underlying question of responsibility. The responsibility of reporting errors should not be on the user but the developer of the application.\n\n### Remote error tracking\nWhat if there was a way you can still track errors in your application from all the users using the application in real time, remotely and in a centralized location. Thanks to advancement in code testing and monitoring services that has improved in web development over the years, you can now. There are a lot of services in the market right now that lets you do exactly that, some of which are Sentry, Rollbar, Airbrake, Raygun and a host of others.\n\nIn this article, you will be introduced to Rollbar and how it uses the Angular errorHandler class to remotely track and report errors in your Angular applications. \n\n## Introducing Rollbar\n\n[Rollbar](https://rollbar.com/) is a software as a service product that shows you exception and crash reports in real-time in one centralized dashboard so you can track and debug bugs in record time. In your dashboard, similar errors are automatically grouped using Rollbar's fingerprinting technology to reduce noise, and all errors include detailed data to help you assess impact and assign priority.\n\nRollbar automatically collects all the data you need to replicate and debug an error, presented in ways optimized for debugging speed and it works with JavaScript source maps. With [Telemetry](https://en.wikipedia.org/wiki/Telemetry), you can debug client-side JavaScript errors faster. It works like a black box recorder, but for errors.\n\n## Getting started\n\nTo get started using Rollbar, visit [the website here](https://rollbar.com) and click the **Sign Up** button to create an account. You will see options to sign up with GitHub, Google account or any email account. If successfully created, you will see this welcome screen displayed..\n\n![angular-errorhandler-rollbar-img2](//images.ctfassets.net/1es3ne0caaid/31qfrdmImEkqvr6yOJfs1Q/d45c5666167c9ee2539d60f7b37074d9/angular-errorhandler-rollbar-img2.png)\n\nThe next step is to click the **LET'S DO IT** button at the end of the page to open the new project creation page.\n\n## Creating your first project\n\nThe next page that appears on the interface will show you input elements where you can type in the name of the new project you want to create. \n\n![angular-errorhandler-rollbar-img3](//images.ctfassets.net/1es3ne0caaid/51Tp1s4UgzhbbISFQfgC2J/b6aef478577c38bbb2383207dacef491/angular-errorhandler-rollbar-img3.png)\n\nI call mine ng-errors, you can call it any name of your choice. After deciding on that, click **CONTINUE** and proceed to the next stage of the onboarding process, which is to choose the SDK. For Angular 7, choose the **Angular 2+** tab in the array of other languages and frameworks, then click **CONTINUE**.\n\nThe very next interface you will see is your Rollbar dashboard, which shows installation instructions along with the SDK configuration containing your unique private access token.\n\n## Using Rollbar\n\nIf you have followed this post from the start, you should have Angular 7 all setup in your machine, you have also now setup a Rollbar account and created a new project. Now download this demo project from our [introductory article here](https://github.com/viclotana/ng_errors). After unzipping it, open the project folder in VS Code and install Rollbar for browser use in a terminal inside the project with this command:\n\n```\n    npm install rollbar\n```\n\nThis installs the Rollbar SDK into the project, making the Angular API available for use. Now you have to make changes in two files, go into the `error.service.ts` file and copy in the code block below:\n\n```typescript\n    // src/app/error.service.ts\n    import * as Rollbar from 'rollbar';\n    import {\n    Injectable,\n    Inject,\n    InjectionToken,\n    ErrorHandler\n    } from '@angular/core';\n    const rollbarConfig = {\n    accessToken: 'COPY THIS FROM YOUR DASHBOARD',\n    captureUncaught: true,\n    captureUnhandledRejections: true,\n    };\n    export const RollbarService = new InjectionToken\u003cRollbar\u003e('rollbar');\n    @Injectable()\n    export class RollbarErrorHandler implements ErrorHandler {\n    constructor(@Inject(RollbarService) private rollbar: Rollbar) {}\n    handleError(err:any) : void {\n    this.rollbar.error(err.originalError || err);\n    console.log('error occured here brooo');\n    }\n    }\n    export function rollbarFactory() {\n    return new Rollbar(rollbarConfig);\n    }\n```\n\nThis code block comes directly from the Rollbar Angular API, you can now modify the error handler in any custom way you like so long as you do not change class names. I added a console log message just to see the number of times errors are logged. Also, if you copy the code exactly from here, you will get an invalid token error which will be fixed when you use your own unique token from your dashboard. \n\nThe next thing to do is to make sure to import and register the new error handler and the service in the `app.module.ts` file. Copy in the code below to do that:\n\n```typescript\n    // src/app/app.module.ts\n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule, ErrorHandler } from '@angular/core';\n    import { AppRoutingModule } from './app-routing.module';\n    import { AppComponent } from './app.component';\n    import { RollbarErrorHandler, RollbarService, rollbarFactory } from './error.service';\n    import { ErrorComponent } from './error/error.component';\n    @NgModule({\n    declarations: [\n    AppComponent,\n    ErrorComponent\n    ],\n    imports: [\n    BrowserModule,\n    AppRoutingModule\n    ],\n    providers: [\n    {\n    provide: ErrorHandler,\n    useClass: RollbarErrorHandler,\n    },\n    {\n    provide: RollbarService,\n    useFactory: rollbarFactory,\n    },\n    ],\n    bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n```\n\nTo test it, run your application in development environment:\n\n```\n    ng serve\n```\n\nThis displays our application below\n\n\n![angular-errorhandler-rollbar-img4](//images.ctfassets.net/1es3ne0caaid/1ZHkE0EbEomTmJCChfTEnp/ffb9ae432d68fcc1137d930dee854c49/angular-errorhandler-rollbar-img4.png)\n\nTo trigger an exception click the button with try catch, once you do that the app breaks. Now go to your Rollbar dashboard in your browser and you will see the error tracked in real time.\n\n\n![angular-errorhandler-rollbar-img5](//images.ctfassets.net/1es3ne0caaid/5BzksWQLBUp4CfGtHFJHAy/e18f3fe32985524e3eff5b8e48540e06/angular-errorhandler-rollbar-img5.png)\n\nIf you click on the error, you will see a very well detailed and comprehensive analysis of the said error. With a lot of important sections including tracebacks, occurrences, number of users experiencing the error and even possible community solutions to the error, based off a wide range of data already collected on similar errors by Rollbar.\n\n\n![angular-errorhandler-rollbar-img6](//images.ctfassets.net/1es3ne0caaid/3Odgeq9FzDtP7yWDKGjJcS/80968714ce0466cad81ef06bc6c4835e/angular-errorhandler-rollbar-img6.png)\n\n## Collaboration tool\n\nRollbar also provides a very significant feature that makes it seamless for you and your development team to be on top of your workflow with error tracking for your application. You can create a team, or be invited into one where you can all now get updates and email alerts on these errors as they occur and so you can work together towards fixing them.\n\n![angular-errorhandler-rollbar-img7](//images.ctfassets.net/1es3ne0caaid/1G25qFfPlI1opMfGRgUi4d/5b3a8edc90f14951fc2de5dfed8a13b2/angular-errorhandler-rollbar-img7.png)\n\n## Numerous integrations\n\nRollbar also has a very seamless platform to integrate your application with your core open source development environment, be it GitHub, GitLab or Bitbucket. This way, you will not only be able to track errors, but have a straightforward way of fixing them and running tests all in a painless approach. \n\n\n![angular-errorhandler-rollbar-img8](//images.ctfassets.net/1es3ne0caaid/3meP6gL59vIUu5Gb4sSGuz/56178887064152948a886423d85e3a07/angular-errorhandler-rollbar-img8.png)\n\n## Deploy tracking\n\nNot only is Rollbar great for source control integration, it is also great for tracking your application deployment and continuous integration. There a lot of ways you can deploy your Angular application and Rollbar integrates with most of them to ensure you have a pain-free workflow, be it Heroku, or MS Build or Powershell or Circle CI.\n\n\n![angular-errorhandler-rollbar-img9](//images.ctfassets.net/1es3ne0caaid/l1eWZCidF9wMRFAPkTp1e/d4a1db627000447a190a51c8805cfdfc/angular-errorhandler-rollbar-img9.png)\n\n## About security\n\nRollbar ensures the complete security of your application data. As part of this commitment,  they have a variety of industry-standard security technologies and procedures to protect your information from unauthorized access, use, or disclosure, strongly adhering to HIPAA and ISO 27001 compliance and meet industry best practices where applicable. Learn more about the security policy and their compliance [here](https://docs.rollbar.com/docs/security).\n\n## Conclusion\n\nRollbar is one of the best error tracking services around for web applications. In addition to the well laid out documentation, it has a good number of integrations with tools you might already be using in your workflow and that makes adopting it an attractive option. Try Rollbar today!","metaTitle":"Introduction to error handling in Angular 7 - Part 4","metaDescription":"This tutorial series will introduce you to errors in Angular 7. In this final part, part four, learn about errors tracking in Angular 7 using the errorHandler class and Rollbar. Rollbar is one of the best error tracking services around for web applications."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gmG7XpwjXXw6dBRFfmkCW","type":"Entry","createdAt":"2019-08-06T19:39:37.152Z","updatedAt":"2020-06-19T10:45:29.074Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"New features of Create-React-App version 3.0","url":"create-react-app-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55Vy5qUc2Hc2NxBxWerK1T","type":"Entry","createdAt":"2019-03-16T13:13:19.673Z","updatedAt":"2019-03-16T13:13:19.673Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lotanna Nwose","url":"lotanna-nwose","email":"viclotana@gmail.com","twitter":"https://twitter.com/viclotana","github":"https://github.com/viclotana","guestWriter":true}}],"projectRepo":"https://github.com/facebook/create-react-app/releases/tag/v3.0.0","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"18J5ku8AMG7DNqxzvTy4tW","type":"Entry","createdAt":"2019-06-04T15:37:38.967Z","updatedAt":"2019-06-04T15:37:38.967Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Webhooks","url":"webhooks","type":"use case","featured":false}}],"reviewDate":"2019-08-06","description":"Create React App just released its third version (3.0.0). A tool to help you build React applications, it saves you from time-consuming setup and configuration. This tutorial will explore all the new features of the React popular boilerplate, including the browserlist support.","content":"Finally the stable official support for React Hooks!\n\n![create-react-app-img (1)](//images.ctfassets.net/1es3ne0caaid/6b4BASUhPUTMEXKLEI6crg/a73e5830fb475f5ed85956e9a7d823df/create-react-app-img__1_.png)\n\n\u003e Create React App is a tool built by developers at Facebook to help you build React applications. It saves you from time-consuming setup and configuration. You simply run one command and create react app sets up the tools you need to start your React project.\n\nCreate-React-App which is arguably one of the most popular boilerplates of all times with 67,000 stars and used by over 5,000 projects on GitHub released its third [version (3.0.0)](https://github.com/facebook/create-react-app/releases/tag/v3.0.0) a few days ago; with a whole lot of improvements. Even though we all know React does not require build dependencies, it however depends on a lot of important tools to make the magic we see when we run npm start. \n\nSome of these tools include Babel, Webpack and Jest and a host of others which handle making code lighter for production, all kinds of testing and helping code to be modular and generally ease the way we code.\n\n\n\u003e Over time, these tools get updated to newer versions and it starts to become a pain to keep up with Create-React-App and the new versions of its supporting tools.\n\nSo the team of 167+ contributors who dedicated their lives to the maintenance of our lovely boilerplate came up with this very powerful version. In this article, we shall quickly look at the new features in [Create-React-App v 3.0.0](https://github.com/facebook/create-react-app/releases/tag/v3.0.0)\n\n## Support for React hooks\n\nReact introduced Hooks officially in [version 16.8](https://reactjs.org/blog/2019/02/06/react-v16.8.0.html) which allowed changes to the way components can be written introducing things like stateful logic in functional components usually meant for classes alone. This new development encourages writing purer components and more optimal React code. However, [there are rules](https://reactjs.org/docs/hooks-rules.html) set in place by the React team to prevent abuse of hooks and these rules are that:\n\n\n- Hooks cannot be called from regular functions but only from functional components.\n- Hooks are to be used only at the top level of your functional component and not inside nested functions or even conditional statement blocks.\n\nIn this new version, alongside the support of the use of Hooks, Create-React-App ships with an ESLint plugin called [eslint-plugin-react-hooks](https://github.com/facebook/react/tree/master/packages/eslint-plugin-react-hooks) that enforces these rules and other syntax conventions of hooks. This way, builds are sure to fail when any rule is broken. You can [learn more about this plugin here](https://github.com/facebook/create-react-app/tree/master/packages/eslint-config-react-app) and also [how to make your IDE display these linting output here](https://facebook.github.io/create-react-app/docs/setting-up-your-editor#displaying-lint-output-in-the-editor).\n\n## Linting support for TypeScript\n\nAside from the React hooks linting, this new version also ships with support to lint TypeScript code through the [typescript-eslint](https://github.com/typescript-eslint/typescript-eslint) plugin. You can see the list of rules enforced through this plugin in the link [here](https://github.com/facebook/create-react-app/blob/eee8491d57d67dd76f0806a7512eaba2ce9c36f0/packages/eslint-config-react-app/index.js#L89:L98) or setup your IDE to reflect them from [this guide](https://facebook.github.io/create-react-app/docs/setting-up-your-editor#displaying-lint-output-in-the-editor). You can easily use TypeScript in your React application with a line of command:\n\n```\n    yarn create-react-app my-typescript-app --typescript\n```\n\n## Browserlist support\n\nYou can now use the browserlist config in your React project’s `package.json` file to control the browser output of your JavaScript files. Another exciting thing is that one configuration can be used for the development environment and another entirely different one can be used for production. A typical example can be this:\n\n```json\n    \"browserslist\": {\n        \"production\": [\n          \"\u003e0.2%\",\n          \"not dead\",\n          \"not op_mini all\"\n        ],\n        \"development\": [\n          \"last 1 chrome version\",\n          \"last 1 firefox version\",\n          \"last 1 safari version\"\n        ]\n      }\n```\n\nHere, the production build will target all browsers that cover more than 0.2% of global usage which is almost every browser, while the development build will only target the last versions of Chrome, Firefox and Safari.\n\nWith this kind of clarity, you can install a babel polyfill as a project dependency and then import it in your root JavaScript file and browserlist will now include them when needed. By default, browserslist default targets a almost all browsers in production, you can change the default settings though from the [guide here](https://github.com/browserslist/browserslist#queries). \n\n## PostCSS Normalize support\n\nThis new version ships with support for Normalize.css so to handle a reset CSS, by default PostCSS Normalize will be used. It will use your browserlist settings to produce styles that fit each browser covered in the config. Remember to always add `@import-normalize`at the beginning of any of your CSS files to activate it. Read more about this change [here](https://facebook.github.io/create-react-app/docs/adding-css-reset).\n\n## Absolute imports with jsconfig.json and tsconfig.json\n\nSo in this new version, we can now have a less stressful way to access import paths for our Node path environments, we no longer have to be bothered about all the paths complexities with slashes that becomes clumsy at some point. We can now have absolute import paths for both JavaScript and TypeScript files alike, this makes for more presentable code. To set this up, create a `jsconfig.json` file for JavaScript (or `tsconfig.json` for TypeScript) in the root directory and copy in the code below:\n\n```json\n    {\n      \"compilerOptions\": {\n        \"baseUrl\": \"src\"\n      },\n      \"include\": [\"src\"]\n    }\n```\n\nWith this your import statement that was initially like this:\n\n```\n    import Sidebar from 'project_name/src/components/Sidebar';\n```\n\nCan be as simple as this:\n\n```\n    import Sidebar from 'components/Sidebar';\n```\n\n## Jest 24\n\nThis version also brings a Jest update to life. Jest is a unit testing framework that runs in a Node JS environment instead of a browser. From the old Jest version 23 to the new [version 24.7.1](https://jestjs.io/), this new Jest version ships with a lot of new features including improved asset messages and logs, support for TypeScript and a lot of bug fixes.\n\n## Breaking changes\n\nSome of these new features will introduce breaking changes to your project’s workflow and it is very important that you be aware.\n\n\n- The `--watchAll=false` from Jest replaces the `--no-watch` flag which is now removed from the start script.\n- Both the NODE_ENV and PUBLIC_URL status has now been changed into readonly.\n- Custom functions has now been added to generate asset manifest.\n- There are some differences in snapshot serialisation in Jest and it may lead to slight changes to your tests after upgrading.\n\nThe official changelog for this version can be found [here](https://github.com/facebook/create-react-app/releases/tag/v3.0.0).\n\n## Conclusion\n\nNow you have seen all the new features of the React popular boilerplate, my favorite is the browserlist support. Read the [breaking changes](https://github.com/facebook/create-react-app/releases/tag/v3.0.0) and upgrade your version today. Happy hacking!","metaTitle":"New features of Create-React-App version 3.0","metaDescription":"Create React App just released its third version (3.0.0). A tool to help you build React applications, it saves you from time-consuming setup and configuration. This tutorial will explore all the new features of the React popular boilerplate, including the browserlist support."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5FRM3EepbjPzCpuNwDVXRY","type":"Entry","createdAt":"2019-08-02T17:22:47.938Z","updatedAt":"2019-08-02T17:22:47.938Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Introduction to error handling in Angular 7: Part 3 - Sentry ","url":"error-handling-angular-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55Vy5qUc2Hc2NxBxWerK1T","type":"Entry","createdAt":"2019-03-16T13:13:19.673Z","updatedAt":"2019-03-16T13:13:19.673Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lotanna Nwose","url":"lotanna-nwose","email":"viclotana@gmail.com","twitter":"https://twitter.com/viclotana","github":"https://github.com/viclotana","guestWriter":true}}],"projectRepo":"https://github.com/viclotana/ng-sentry","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2019-08-02","description":"This tutorial series will introduce you to errors in Angular 7. In part three, learn about errors tracking in Angular 7 using the errorHandler class and Sentry, and how to track these errors in a remote tracking environment.","prerequisite":"You will need to have Node 11, Node Package Manager 6.7+, Angular CLI 7+ and Angular 7+ installed on your machine.","content":"# Remote error tracking in Angular 7 with Sentry\nIn this tutorial, you will be introduced to errors tracking in Angular7 using the errorHandler class and Sentry.\n\n![angular-errorhandler-sentry-img1](//images.ctfassets.net/1es3ne0caaid/3UzmU1I84iFV73uvgeriNc/d83ca1092f3e7f57d1cdc5da8bd9c272/angular-errorhandler-sentry-img1.png)\n\nThis is the third part of the Angular 7 error handling series, you can refer to [the first part here](https://pusher.com/tutorials/error-handling-angular-part-1), and [the second here](https://pusher.com/tutorials/error-handling-angular-part-2).\n\n## Prerequisites\n\nTo be able to follow through in this tutorial's demonstration you should have:\n\n- Node version 11.0 installed on your machine.\n- Node Package Manager version 6.7 (usually ships with Node installation).\n- [Angular CLI](https://cli.angular.io/) version 7.0\n- The latest version of Angular (version 7)\n\n```\n    // run the command in a terminal\n    ng version\n```\n\nConfirm that you are using version 7, and update to 7 if you are not.\nOther things that will be nice-to-haves are:\n\n\n- A working knowledge of the Angular framework at a beginner level.\n- Familiarity with Angular services will be a plus but not a requirement.\n\nIn this series, you have been introduced earlier to handling client side errors and then HTTP errors gracefully in Angular 7 with tools like errorHandlers, Interceptors and even RxJS operators. In this post you will be shown how to track these errors in a remote tracking environment.\n\n## Tracking errors\n\nWhen your Angular application is running in the development server with ng serve you can easily track errors in the application. The fastest way you can do this for JavaScript errors is with the errorHandler as it was illustrated in [this introductory post here](https://pusher.com/tutorials/error-handling-angular-part-1). The errorHandler logs this error for you, the developer, in the browser console you test your application with. This is the standard procedure for the development environment. \n\n## The problem\n\nWhen you build out the application in production and ship it to your users however, there is a big problem that should be obvious by now. Testing the shipped applications become an issue. If your application is in say beta stage, you might maybe send it to family and friends to use, you have to also be on those different devices to be able to spot the errors in their various browser consoles. This is of course not a scalable solution if you have many users who might not even be in the same location as you. \n\n## Error reporting by users\n\nInitially, the solution to this problem will be to build a system in such a way that your users can report errors on the application. However, this is rarely the case as users have been reported to be really impatient and this is confirmed by the [statistics on the high churn rate of users](https://www.statista.com/statistics/384224/monthly-app-launches-churn/) with applications. The situation that is more commonly seen in the place of error reporting is one-star ratings and high churn rate. \n\nA user is more likely not to use your application and even give a bad review of it than they are to report the error experienced while using the app. This is very practical and it shows an underlying question of responsibility. The responsibility of reporting errors should not be on the user but the developer of the application. Although as you will see, you can make it easier for users to report errors on your application but only as a secondary option.\n\n## Remote error tracking\n\nWhat if there was a way you can still track errors in your application from all the users using the application in real time, remotely and in a centralized location. Thanks to advancement in code testing and monitoring services that has improved in web development over the years, you can now. There are a lot of services in the market right now that lets you do exactly that, some of which are Sentry, Rollbar, Airbrake, Raygun and a host of others. \n\nIn this tutorial, you will be introduced to Sentry.io and how it uses the Angular errorHandler class to remotely track and report errors in your Angular applications.\n\n## Introducing Sentry\n\n[Sentry](http://sentry.io) is an open source software as a service that was built to track errors by providing visibility across your Angular application, providing you with details that you need to fix bugs and handle errors gracefully before the users encounter them. It has an extensive API that handles events from every popular language or application supporting JavaScript and all the frameworks including Angular, Vue and React. It also supports Python, Ruby on Rails, PHP, Go, Swift, Perl and a lot more others. It also perfectly integrates with a lot of developer services like Slack, Trello, GitHub, Twilio and a host of many others.\n\n## Getting started\n\nVisit the [Sentry page here](http://sentry.io) and click on **Get started.** You will see a page with a lot of sign up options including through your mail address, through GitHub or even through an Azure Devops account. The process will go through authentication with whichever option you choose. \n\n\n![angular-errorhandler-sentry-img2](//images.ctfassets.net/1es3ne0caaid/6KBwnaIfHDT8MWRgkLDuDP/0e1e430360b63d21696d1e9d83781931/angular-errorhandler-sentry-img2.png)\n\nWhen you see a similar screen (I used GitHub to sign up), click on **New Account** and then confirm that your name and email address are accurate. You are also to create an organisation at this point, you can call it your own name if it is a personal account. \n\n\n![angular-errorhandler-sentry-img3](//images.ctfassets.net/1es3ne0caaid/1TjSZL1qRcWXGrNWBWrrae/b91077c6dd122eeb35b8a1769ae9fa7b/angular-errorhandler-sentry-img3.png)\n\nNext thing is to create a new project, a dashboard displaying a wide range of languages you can run Sentry on. Projects allow you to scope events to a specific application in your already created organization. Select **Angular** and give the project a name of your choosing then click on create project.\n\nThe next stage is a small questionnaire you are to fill telling Sentry your developer role and how you heard about Sentry, this is purely a marketing and data collection phase to help developers of Sentry improve the service and get it in front of more developers like yourself. \n\nWhen you click submit, the final stage where the API specific to Angular projects is saved for you to configure your Angular application with. It is basically a quick getting started guide. \nTake note of the dsn code inside the component provided for you, it should look like this:\n\n```\n    Sentry.init({\n      dsn: \"https://bla-bla-bla\"\n    });\n```\n\nFor in-depth instructions on integrating Sentry with Angular, you can view [the complete documentation](https://docs.sentry.io/platforms/javascript/angular/).\n\n## Using Sentry\n\nIf you have followed this post from the start, you should have Angular 7 all setup in your machine, you have also now setup a Sentry account and created a new project. Now download this demo project from our [introductory article here](https://github.com/viclotana/ng_errors). After unzipping it, open the project folder in VS Code and install Sentry for browser use in a terminal inside the project with this command:\n\n```\n    npm install @sentry/browser \n```\n\nThis installs the Sentry JavaScript SDK into the project, making the Angular API available for use. Now you have to make changes in two files, go into the `error.service.ts` file and copy in the code block below:\n\n```typescript\n    // src/app/error.service.ts\n    import { Injectable, ErrorHandler, Injector } from '@angular/core';\n    import { Router } from '@angular/router';\n    import { HttpErrorResponse } from '@angular/common/http'\n    import * as Sentry from \"@sentry/browser\";\n    Sentry.init({\n    dsn: \"COPY FROM YOUR DASHBOARD\"\n    });\n    @Injectable({\n    providedIn: 'root'\n    })\n    export class SentryErrorHandler implements ErrorHandler{\n    constructor(private injector: Injector) { }\n    handleError(error: any) {\n    const router = this.injector.get(Router);\n    const eventId = Sentry.captureException(error.originalError || error);\n    if (Error instanceof HttpErrorResponse) {\n    console.log(error.status);\n    }\n    else {\n    console.error(\"an error occured here broo\");\n    Sentry.showReportDialog({ eventId });\n    }\n    router.navigate(['error']);\n    }\n    }\n```\n\nHere, you have imported the Sentry you earlier installed through npm, now copy the dns code, the one you took note of earlier and paste it inside the code block above. The part \"copy from your dashboard\" should be changed to the dns code from your dashboard. Now you are done with the error service file, open your `app.module.ts` file and copy in the code block below:\n\n```typescript\n    // src/app/app.module.ts\n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule, ErrorHandler } from '@angular/core';\n    import { AppRoutingModule } from './app-routing.module';\n    import { AppComponent } from './app.component';\n    import { SentryErrorHandler } from './error.service';\n    import { ErrorComponent } from './error/error.component';\n    @NgModule({\n    declarations: [\n    AppComponent,\n    ErrorComponent\n    ],\n    imports: [\n    BrowserModule,\n    AppRoutingModule\n    ],\n    providers: [\n    {\n    provide: ErrorHandler,\n    useClass: SentryErrorHandler,\n    },\n    ],\n    bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n```\n\nThis registers the new Sentry error service class so that when your application is ran, exceptions can now be captured by Sentry. To test it, run your application in development environment:\n\n```\n    ng serve\n```\n\nThis displays our application below\n\n\n![angular-errorhandler-sentry-img4](//images.ctfassets.net/1es3ne0caaid/3qs8XW0FulnRJ2v8AjDXl7/ef4253cecd9bb2af13f87acedb453456/angular-errorhandler-sentry-img4.png)\n\nTo trigger an exception click the button with try catch, once you do that it navigates to the error page. Now go to your sentry dashboard in your browser and you will see the error tracked in real time.\n\n\n![angular-errorhandler-sentry-img5](//images.ctfassets.net/1es3ne0caaid/lQXc5ChpKnXL0YtGitjv5/1d2e0f59eb78621744bdd3af52edc572/angular-errorhandler-sentry-img5.png)\n\nIf you go ahead to click on the issue, Sentry provides you with a very extensive dashboard and great looking visualization of the error tracked. Most of the information reported about the user's browser include: the operating system, the type of error flagged, the console logged message, the IDE error message, the data on the browser where the error came from, the SDK version. You can spot the exact error code block and then resolve it, you can merge the resolution and many other fancy things you can do.\n\n\n![angular-errorhandler-sentry-img6](//images.ctfassets.net/1es3ne0caaid/6IqnZNIN3NctRCnBCoTrYF/882d5d00a7fc8f2d106e4203840779d3/angular-errorhandler-sentry-img6.gif)\n\nThe Sentry documentation is very legible and straightforward and if you want more features you can easily lookup the docs. By default Sentry has a user crash report feedback modal form pop up for willing users to report the error for the developer to get access to more information to help fix it. \n\n\n![angular-errorhandler-sentry-img7](//images.ctfassets.net/1es3ne0caaid/61RzXMTraDJ5jITMtpwQVp/47ac77b518ee4d3fc9fb6ddc53f78dca/angular-errorhandler-sentry-img7.png)\n\nYou also get email alerts of these exceptions as they are caught, in real time too, this is a pretty amazing feature.\n\n## Is my data safe?\n\nThis is next question any developer will ask. Sentry is safe and it shows how safe your data is by ensuring that it gives every single account (even free accounts) on its platform the following services:\n\n\n- Two-factor authentication\n- Single Sign On support\n- Organization audit log\n- Privacy Shield certified\n- PII data scrubbing\n- SSL encryption\n\nYou can get the complete code for this tutorial on [here on GitHub](https://github.com/viclotana/ng-sentry), you can also [learn more about Sentry Security here](https://sentry.io/security/).\n\n## Conclusion\n\nSentry is a great option for developers who build out their applications to production phase and deploy to users. The docs are very extensive and the error reporting is top notch with everything you will need and in realtime. Have you considered using an error tracking service for your Angular application?","metaTitle":"Introduction to error handling in Angular 7 - Part 3","metaDescription":"This tutorial series will introduce you to errors in Angular 7. In part three, learn about errors tracking in Angular 7 using the errorHandler class and Sentry, and how to track these errors in a remote tracking environment."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6boiZJVOKS91Fx6f3YrzA7","type":"Entry","createdAt":"2019-07-31T20:33:18.444Z","updatedAt":"2019-07-31T20:33:18.444Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Introduction to error handling in Angular 7: Part 2 - HTTP error handling","url":"error-handling-angular-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55Vy5qUc2Hc2NxBxWerK1T","type":"Entry","createdAt":"2019-03-16T13:13:19.673Z","updatedAt":"2019-03-16T13:13:19.673Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lotanna Nwose","url":"lotanna-nwose","email":"viclotana@gmail.com","twitter":"https://twitter.com/viclotana","github":"https://github.com/viclotana","guestWriter":true}}],"projectRepo":"https://github.com/viclotana/ng_HTTP","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2019-07-31","description":"This tutorial series will introduce you to errors in JavaScript. In part two, learn about HTTP errors, how to use the `HttpClient` with RxJS error handling operators, and how to use interceptors. ","prerequisite":"You will need to have Node 11+, Node Package Manager version 6+, Angular CLI 7+ and Angular 7+  installed on your machine.\n","content":"In this tutorial, you will be introduced to HTTP errors in JavaScript, and how to use the `HttpClient` with RxJS error handling operators and finally how to use the `HttpInterceptor` \n\n![angular-error-handling-http-img1](//images.ctfassets.net/1es3ne0caaid/7JYFGKMlKOAwJQPINY193W/ec8e4bc1db6965765fad9924de9e7cb6/angular-error-handling-http-img1.jpeg)\n\nThis is a deep dive into HTTP error handling in Angular 7, you might want to check out the introductory post on error handling [here](https://pusher.com/tutorials/error-handling-angular-part-1).\n\n## Prerequisites\n\nTo be able to follow through in this tutorial's demonstration you should have:\n\n- Node version 11.0 installed on your machine.\n- Node Package Manager version 6.7 (usually ships with Node installation).\n- [Angular CLI](https://cli.angular.io/) version 7.0\n- The latest version of Angular (version 7)\n\n```\n    // run the command in a terminal\n    ng version\n```\n\nConfirm that you are using version 7, and update to 7 if you are not.\nOther things that will be nice-to-haves are:\n\n\n- A working knowledge of the Angular framework at a beginner level.\n- Familiarity with Angular services will be a plus but not a requirement.\n\n## Outsider errors\n\nThese are errors that we call server side errors because they mainly come from the outside the Angular application and an `HttpErrorResponse` is always returned anytime they occur. It has properties like:\n\n- **Error name**: this states the name of the error.\n- **Error message**: this tries to explain the error in simple terms for easier understanding.\n- **Error status:** each type of server side error has a code assigned to it to differentiate it from the rest. These codes are usually three digit codes like 400 which, signifies the request sent was unexpected or 500 which, signals internal server error and so on.\n\n## Error handler in Angular\n\nAngular has a global error handling class called errorHandler that provides a hook for centralized exception handling inside your application. It basically intercepts all the errors that happen in your application, and logs all of them to the console, and stops the app from crashing.\nThe syntax looks like this:\n\n```javascript\n    class MyErrorHandler implements ErrorHandler {\n      handleError(error) {\n        // do something with the exception\n      }\n    }\n    @NgModule({\n      providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n    })\n    class MyModule {}\n```\n\nThis is a great way to handle errors in Angular, particularly the insider errors.\n\n## The limitation of errorHandler\n\nIf you followed from the [introductory post here](https://pusher.com/tutorials/error-handling-angular-part-1), you will see how the Angular errorHandler class was the ultimate solution to centralizing the try/catch concept of errors in our application. However, when we want to focus on server side errors, we discover that the errorHandler class cannot work directly with HTTP requests in our application. Good news is Angular provides a kind of interface where you can use the concept of the errorHandler class to deal directly with HTTP requests.\n\n## Solution 1: Angular HttpClient\n\nThe `[HttpClient](https://angular.io/api/common/http/HttpClient)` in `@angular/common/``[http](https://angular.io/api/common/http)` offers a simplified client HTTP API for Angular applications that rests on the `XMLHttpRequest` interface exposed by browsers. Additional benefits of `[HttpClient](https://angular.io/api/common/http/HttpClient)`include testability features, typed request and response objects, request and response interception, `Observable` APIs, and streamlined error handling. So using this client with some RxJS operators we can get a kind of try/catch way of error handling but this time directly communicating with the HTTP requests through an Angular application in a service. You will understand it better in action.\n\n## Demo\n![angular-error-handling-http-img2](//images.ctfassets.net/1es3ne0caaid/46JdAaUd6jzIrxH2olwXZK/6aafdc26662fca6a0e73b5333d130442/angular-error-handling-http-img2.gif)\n\nThis is a demo [jsonplaceholder](http://jsonplaceholder.typicode.com/) application where parts of the available data on the [jsonplaceholder](http://jsonplaceholder.typicode.com/) is displayed on the user interface, a perfect service to demonstrate server related concepts. If you have all the prerequisites stated at the beginning of the post ready, you can [download the project from GitHub here](https://github.com/viclotana/jsonplaceholder-demo-app). \nUnzip and open the project in VS Code and use the terminal to initialize the node modules:\n\n```\n    npm install\n```\n\nNow that your application is up and running, you have to first and foremost ensure that the module required for Angular applications to use any server service is active in your application. Navigate to your `app.module.ts` file and confirm that there is an import statement like this:\n\n```javascript\n    import { HttpClientModule } from '@angular/common/http';\n```\n\nYour application has four components: posts, sidebar, details and users. It also has a service called data service where all the HTTP requests are made. Your `data.service.ts` file should look like this:\n\n```typescript\n    // src/app/services/data.service.ts\n    import { Injectable } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n    @Injectable({\n    providedIn: 'root'\n    })\n    export class DataService {\n     constructor(private http: HttpClient) { }\n     getUsers() {\n      return this.http.get('https://jsonplaceholder.typicode.com/users')\n     }\n     getUser(userId) {\n      return this.http.get('https://jsonplaceholder.typicode.com/users/'+userId)\n     }\n     getPosts() {\n      return this.http.get('https://jsonplaceholder.typicode.com/posts')\n     }\n    }\n```\n\nThree requests are being made to the server, now if you pick one of these requests, say `getUsers()` and you want to add error handling with the HttpClient then you will:\n\n- Import the catchError object from RxJS operators.\n- Import throwError from RxJS.\n- Use the pipe method to introduce it in the desired HTTP request.\n- Create a method to handle the error\n\nIf you follow these, your `data.service.ts` file will look like this:\n\n```typescript\n    // src/app/services/data.service.ts\n    import { Injectable } from '@angular/core';\n    import { HttpClient, HttpErrorResponse } from '@angular/common/http';\n    import { catchError } from 'rxjs/operators'\n    import { throwError } from 'rxjs';\n    @Injectable({\n    providedIn: 'root'\n    })\n    export class DataService {\n    constructor(private http: HttpClient) { }\n    getUsers() {\n    return this.http.get('https://jsonplaceholder.typicode.com/usssers')\n    .pipe(\n    catchError(this.handleError)\n    );\n    }\n    getUser(userId) {\n    return this.http.get('https://jsonplaceholder.typicode.com/users/'+userId)\n    }\n    getPosts() {\n    return this.http.get('https://jsonplaceholder.typicode.com/posts')\n    }\n    handleError(error: HttpErrorResponse){\n    console.log(\"lalalalalalalala\");\n    return throwError(error);\n    }\n    }\n```\n\nYou will see that the get request was deliberately tampered with to ensure an error occurs. When you run the application, you will see the error logged with the log message we want. \n\n\n![angular-error-handling-http-img3](//images.ctfassets.net/1es3ne0caaid/5gGxmNLgjopNqYOgmCGQAy/f36dd4974ac212b1883b52c672bfdc9c/angular-error-handling-http-img3.png)\n\n Sometimes when you send a request to a well known slow server, you know it might take a while to get response or take a few tries to actually get response from the server, you can resend the request a number of times before throwing the error. \nThis can be achieved with the retry method in RxJS, so you import the retry operator then you can use it inside the pipe like it is used below:\n\n```typescript\n    // src/app/services/data.service.ts\n    import { Injectable } from '@angular/core';\n    import { HttpClient, HttpErrorResponse } from '@angular/common/http';\n    import { catchError, retry } from 'rxjs/operators'\n    import { throwError } from 'rxjs';\n    @Injectable({\n    providedIn: 'root'\n    })\n    export class DataService {\n    constructor(private http: HttpClient) { }\n    getUsers() {\n    return this.http.get('https://jsonplaceholder.typicode.com/usssers')\n    .pipe(\n    retry(2),\n    catchError(this.handleError)\n    );\n    }\n    getUser(userId) {\n    return this.http.get('https://jsonplaceholder.typicode.com/users/'+userId)\n    }\n    getPosts() {\n    return this.http.get('https://jsonplaceholder.typicode.com/posts')\n    }\n    handleError(error: HttpErrorResponse){\n    console.log(\"lalalalalalalala\");\n    return throwError(error);\n    }\n    }\n```\n\nIf you run the application, the console should look like this:\n\n\n![angular-error-handling-http-img4](//images.ctfassets.net/1es3ne0caaid/4p0QHIp6NxxhET1UmfW0jk/9f5fef5ca2b7916ca558441100e0eff9/angular-error-handling-http-img4.gif)\n\nYou see it first tries to get the response, then retries it twice just as we specified before throwing the error log message. \n\n\n\u003e It is also very important that your retry comes before the catchError so that the error message is not logged after every trial.\n\nThis solution works perfectly so long as your application has one service and probably one get request, but when your application is big and has many services or a lot more requests per service it becomes an inefficient solution. This is because you have to always copy the handle error function across services and repeat code even within a service. Imagine the memory cost of debugging and maintaining the codebase.\n\n## The best option: Angular HttpInterceptor\n\nJust like the name says, Angular provides an interface called the `HttpInterceptor` that can intercept `[HttpRequest](https://angular.io/api/common/http/HttpRequest)` and `[HttpResponse](https://angular.io/api/common/http/HttpResponse)` and creates a platform to handle them. This means we get direct access to our server requests, what better place to deal with server errors than here!\nThe syntax looks like this:\n\n```javascript\n    interface HttpInterceptor {\n    intercept(req: HttpRequest\u003cany\u003e, next: HttpHandler):   Observable\u003cHttpEvent\u003cany\u003e\u003e\n    }\n```\n\nTo use the `HttpInterceptor` , create a new service where you want your interceptor logic to go in with the Angular CLI:\n\n```\n    ng generate service services/interceptor\n```\n\nNow you have generated an interceptor service, navigate to your `app.module.ts` file to register it accordingly, like this:\n\n```typescript\n    // src/app/app.module.ts\n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule } from '@angular/core';\n    import { AppRoutingModule } from './app-routing.module';\n    import { AppComponent } from './app.component';\n    import { UsersComponent } from './components/users/users.component';\n    import { DetailsComponent } from './components/details/details.component';\n    import { PostsComponent } from './components/posts/posts.component';\n    import { SidebarComponent } from './components/sidebar/sidebar.component';\n    import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n    import { BrowserAnimationsModule } from '@angular/platform-browser/animations'\n    import { InterceptorService } from './services/interceptor.service';\n    @NgModule({\n    declarations: [\n    AppComponent,\n    SidebarComponent,\n    PostsComponent,\n    DetailsComponent,\n    UsersComponent\n    ],\n    imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    BrowserAnimationsModule\n    ],\n    providers: [\n    {\n    provide: HTTP_INTERCEPTORS,\n    useClass: InterceptorService,\n    multi: true\n    }\n    ],\n    bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n```\n\nNext step is to get rid of all the error handling logic in the `data.service.ts` file, the file should look like this when you are done:\n\n```typescript\n    // src/app/services/data.service.ts\n    import { Injectable } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n    @Injectable({\n    providedIn: 'root'\n    })\n    export class DataService {\n    constructor(private http: HttpClient) { }\n    getUsers() {\n    return this.http.get('https://jsonplaceholder.typicode.com/usersss')\n    }\n    getUser(userId) {\n    return this.http.get('https://jsonplaceholder.typicode.com/users/'+userId)\n    }\n    getPosts() {\n    return this.http.get('https://jsonplaceholder.typicode.com/posts')\n    }\n    }\n```\n\nCopy the code below into the `interceptor.service.ts` file:\n\n```typescript\n    // src/app/services/interceptor.service.ts\n    import { Injectable } from '@angular/core';\n    import {\n    HttpInterceptor, HttpRequest,\n    HttpHandler, HttpEvent, HttpErrorResponse\n    } from '@angular/common/http';\n    import { Observable, throwError } from 'rxjs';\n    import { catchError } from 'rxjs/operators';\n    @Injectable({\n    providedIn: 'root'\n    })\n    export class InterceptorService implements HttpInterceptor{\n     constructor() { }\n     handleError(error: HttpErrorResponse){\n      console.log(\"lalalalalalalala\");\n      return throwError(error);\n     }\n    intercept(req: HttpRequest\u003cany\u003e, next: HttpHandler):\n    Observable\u003cHttpEvent\u003cany\u003e\u003e{\n     return next.handle(req)\n     .pipe(\n      catchError(this.handleError)\n     )\n     };\n    }\n```\n\nIf you run the application, you can see that it logs our error message and throws the error just as we expect. This is the best method of handling server errors in your Angular project. You can test all the three requests at once for errors by tampering with them. When you do, you will find out that the interceptor catches all of them and logs our message for each, it is really amazing to watch.\n\n## Conclusion\n\nYou have been introduced to various ways to handle server side errors in your Angular applications. You have also seen when to use and when not to use the `HttpClient` with the RxJS operators and how the best way is using interceptors. In the [next tutorial](https://pusher.com/tutorials/error-handling-angular-part-3) in this series, you will be introduced to error tracking. The complete code for this tutorial is on GitHub and can be [found here](https://github.com/viclotana/ng_HTTP). Happy coding!","metaTitle":"Introduction to error handling in Angular 7 - Part 2","metaDescription":"This tutorial series will introduce you to errors in JavaScript. In part two, learn about HTTP errors, how to use the `HttpClient` with RxJS error handling operators, and how to use interceptors. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6yL6067G9KWM8q9ua9XR9F","type":"Entry","createdAt":"2019-06-06T20:16:12.216Z","updatedAt":"2019-07-25T17:27:25.580Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a game using device sensors in React Native","url":"game-device-sensors-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNSensorDemo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6nDfV1cd5C6464wgCoOQii","type":"Entry","createdAt":"2018-02-12T15:08:13.901Z","updatedAt":"2018-02-26T12:31:12.764Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Gaming","url":"gaming","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2019-07-25","description":"Build a mobile game, taking advantage of React Native's device sensors module. Use the gyroscope to detect the tilt of the phone, allowing a player to manipulate objects on screen and dodge obstacles. The game includes a simple scoring system, and can be easily extended.","prerequisite":"You will need Node and React Native installed on your machine. Some knowledge of React Native development is expected.","content":"In this tutorial, we’ll take a look at how you can get the device’s accelerometer data to create a simple dodge game.\n\nMost modern smartphones are equipped with sensors such as the gyroscope, accelerometer, and magnetometer. These sensors are responsible for getting the data required for apps like the compass and your health app.\n\n## Prerequisites\n\nYou will need a good level of understanding of React Native, and familiarity with building and running apps in your development environment to follow this tutorial. \n\nThe following package versions are used to create the app:\n\n\n- Node 11.2\n- Yarn 1.13\n- React Native 0.59\n\nIf you have trouble running the app later on, try to use the versions above.\n\nYou will also need a real device for testing the app as you can’t really tilt in an emulator.\n\n\n## App overview\n\nThe app that we will create is a simple game of dodge. Blocks will be falling from the top part of the screen. The player will then have to slightly tilt their device to the left or to the right to move the ball so they can dodge the falling blocks. \n\nTilting the device to the right will make the ball go to the right, while tilting it to the left does the opposite. If the ball goes off all the way to the left or right where the player can’t see it, it automatically goes back to the middle part of the screen. The bottom part of the screen is where the floor is. \n\nOnce a block collides with the floor, it means that the player has successfully evaded it and their score will be incremented. At any point in the game, the player can also click on the **RESET** button to restart the game. We will be using [React Native Sensors](https://react-native-sensors.github.io/) to get the sensor data, [React Native Game Engine](https://github.com/bberak/react-native-game-engine) to implement the game, and [MatterJS](http://brm.io/matter-js/) as the physics engine.\n\nHere’s what the app will look like:\n\n![react-native-sensors-game-demo](//images.ctfassets.net/1es3ne0caaid/4iV6tUW5qvzeUHBuJ5mADH/bb1afbaf6a4c0cc1e8e056f316fe1340/react-native-sensors-game-demo.gif)\n\nYou can view the code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/RNSensorDemo).\n\n\n## Bootstrapping the app\n\nI’ve prepared a repo which you can clone in order to get the exact same package versions that I used for creating the app. Execute the following commands to bootstrap the app:\n\n```\n    git clone https://github.com/anchetaWern/RNSensorDemo.git\n    cd RNSensorDemo\n    git checkout starter\n    yarn\n    react-native eject\n```\n\nReact Native Sensors is a native module, so you have to follow the [additional steps in setting it up on their website](https://react-native-sensors.github.io/docs/Installation.html).\n\n\n## Building the app\n\nOnce you’ve bootstrapped the app, update the `App.js` file at the root of the project directory and add the following. This will import all the packages we’ve installed:\n\n```javascript\n    import React, { Component } from \"react\";\n    import { StyleSheet, Text, View, Dimensions, Button, Alert } from \"react-native\";\n    import {\n      accelerometer,\n      setUpdateIntervalForType,\n      SensorTypes\n    } from \"react-native-sensors\"; // for getting sensor data\n    \n    import { GameEngine } from \"react-native-game-engine\"; // for implementing the game\n    import Matter from \"matter-js\"; // for implementing game physics (gravity, collision)\n    \n    import randomInt from \"random-int\"; // for generating random integer\n    import randomColor from \"randomcolor\"; // for generating random hex color codes\n```\n\nNext, import the components for rendering the blocks and the ball. We will be creating these later:\n\n```javascript\n    import Circle from \"./src/components/Circle\";\n    import Box from \"./src/components/Box\";\n```\n\nEach of the blocks won’t be falling at the same rate, otherwise, it would be impossible for the player to dodge them all. MatterJS is responsible for implementing game physics. This way, all of the objects in the game (ball, blocks, and floor) will have their own physical attributes. One of the physical attributes which we can assign is the [frictionAir](http://brm.io/matter-js/docs/classes/Body.html#property_frictionAir). This allows us to define the air resistance of the object. The higher the value of this attribute, the faster it will travel through space. The `getRandomDecimal` helper allows us to generate a random value to make the blocks fall faster or slower. We will also create this later:\n\n```javascript\n    import getRandomDecimal from \"./src/helpers/getRandomDecimal\";\n```\n\nNext, get the device’s `height` and `width`. We will be using those to calculate either the position or the dimensions of each of the objects. Below, we also calculate for the middle part of the screen. We’ll use this later on as the initial position for the ball, as well as the position it goes back to if it goes out of the visible area:\n\n```javascript\n    const { height, width } = Dimensions.get('window');\n    \n    const BALL_SIZE = 20; // the ball's radius\n    const DEBRIS_HEIGHT = 70; // the block's height\n    const DEBRIS_WIDTH = 20; // the block's width\n    \n    const mid_point = (width / 2) - (BALL_SIZE / 2); // position of the middle part of the screen\n```\n\nNext, declare the physical attributes of the ball and blocks. The main difference between these two objects is that the ball is static. This means it cannot move on its own. It has to rely on the device’s accelerometer in order to calculate its new position. While the blocks are non-static, which means that they can be affected by physical phenomena such as gravity. This allows us to automatically make the blocks fall without actually doing anything:\n\n```javascript\n    const ballSettings = {\n      isStatic: true\n    };\n    \n    const debrisSettings = { // blocks physical settings\n      isStatic: false\n    };\n```\n\nNext, create the bodies to be used for each of the objects. For now, we’re only creating the bodies for the ball and the floor. Because the blocks needs to have varying physical attributes and positioning, we’ll generate their corresponding bodies when the component is mounted:\n\n```javascript\n    const ball = Matter.Bodies.circle(0, height - 30, BALL_SIZE, {\n      ...ballSettings, // spread the object\n      label: \"ball\" // add label as a property\n    });\n    \n    const floor = Matter.Bodies.rectangle(width / 2, height, width, 10, {\n      isStatic: true,\n      isSensor: true,\n      label: \"floor\"\n    });\n```\n\nThe code above uses the [Matter.Bodies.Circle](http://brm.io/matter-js/docs/classes/Bodies.html#method_circle) and [Matter.Bodies.Rectangle](http://brm.io/matter-js/docs/classes/Bodies.html#method_rectangle) methods from MatterJS to create a body with circular and rectangular frame. Both methods expect the `x` and `y` position of the body for the first and second arguments. While the third argument for the Circle is the radius, and the third and fourth argument for the Rectangle is the width and height of the body. The last argument is an object containing the object’s physical settings. A `label` is also added so we can easily tell each object apart when they collide.\n\nNext, set the update interval for a specific sensor type. In this case, we’re using the accelerometer and we want to update every 15 milliseconds. This means that the function for getting the accelerometer data will only fire off every 15 milliseconds:\n\n```javascript\n    setUpdateIntervalForType(SensorTypes.accelerometer, 15);\n```\n\n\u003e **Note**: For production apps, play around with the interval to come up with the best value to balance between the ball’s responsiveness and battery drain. 15 is just an arbitrary value I came up with during testing.\n\nNext, create the main app component and initialize the state. The state is mainly used for setting the ball’s position and keeping track of the score:\n\n```javascript\n    export default class App extends Component {\n      \n      state = {\n        x: 0, // the ball's initial X position\n        y: height - 30, // the ball's initial Y position\n        isGameReady: false, // game is not ready by default\n        score: 0 // the player's score\n      }\n      \n      // next: add constructor\n    \n    }\n```\n\nNext, add the constructor. This contains the code for initializing the objects (also called entities) in the game and setting up the collision handler:\n\n```javascript\n    constructor(props) {\n      super(props);\n    \n      this.debris = [];\n    \n      const { engine, world } = this._addObjectsToWorld(ball);\n      this.entities = this._getEntities(engine, world, ball);\n    \n      this._setupCollisionHandler(engine);\n    \n      this.physics = (entities, { time }) =\u003e {\n        let engine = entities[\"physics\"].engine; // get the reference to the physics engine\n        engine.world.gravity.y = 0.5; // set the gravity of Y axis\n        Matter.Engine.update(engine, time.delta); // move the game forward in time\n        return entities;\n      };\n    }\n    \n    // next: add componentDidMount\n```\n\nOnce the component is mounted, we subscribe to get the accelerometer data. In this case, we only need to get the data in the `x` axis because the ball is constrained to move only within the `x` axis. From there, we can set the ball’s current position by using the body’s `setPosition` method. All we have to do is add `x` to the current value of `x` in the state. This gives us the new position to be used for the ball:\n\n```javascript\n    componentDidMount() {\n      accelerometer.subscribe(({ x }) =\u003e {\n    \n        Matter.Body.setPosition(ball, {\n          x: this.state.x + x, \n          y: height - 30 // should be constant\n        });\n    \n        this.setState(state =\u003e ({\n          x: x + state.x\n        }), () =\u003e {\n          // next: add code for resetting the ball's position if it goes out of view\n        });\n    \n      });\n    \n      this.setState({\n        isGameReady: true\n      });\n    }\n    \n    // next: add componentWillUnmount\n```\n\nIf the ball goes off to the part of the screen which the user cannot see, we want to the\nbring it back to its initial position. That way, they can start controlling it again. `this.state.x` contains the current position of the ball, so we can simply check if its less than `0` (disappeared off to the left part of the screen) or greater than the device's width (disappeared off to the right part of the screen):\n\n```javascript\n    if (this.state.x \u003c 0 || this.state.x \u003e width) {\n      Matter.Body.setPosition(ball, {\n        x: mid_point,\n        y: height - 30\n      });\n    \n      this.setState({\n        x: mid_point\n      });\n    }\n```\n\nNext, unsubscribe from getting the accelerometer data once the component is unmounted. We don’t want to continuously drain the user’s battery if it’s no longer needed:\n\n```javascript\n    componentWillUnmount() {\n      this.accelerometer.stop();\n    }\n    \n    // next: _addObjectsToWorld\n```\n\nNext, add the code for adding the objects to the world. Earlier, we already created the objects for the ball and the floor. But we’re still yet to create the objects for the blocks. The physics engine is still unaware of the ball and floor object, so we have to add them to the world. Here’s the code for that:\n\n```javascript\n    _addObjectsToWorld = (ball) =\u003e {\n      const engine = Matter.Engine.create({ enableSleeping: true });\n      const world = engine.world;\n    \n      let objects = [\n        ball,\n        floor\n      ];\n      \n      // create the bodies for the blocks\n      for (let x = 0; x \u003c= 5; x++) {\n        const debris = Matter.Bodies.rectangle(\n          randomInt(1, width - 30), // x position\n          randomInt(0, 200), // y position\n          DEBRIS_WIDTH,\n          DEBRIS_HEIGHT,\n          {\n            frictionAir: getRandomDecimal(0.01, 0.5),\n            label: 'debris'\n          }\n        );\n    \n        this.debris.push(debris);\n      }\n    \n      objects = objects.concat(this.debris); // add the blocks to the array of objects \n      Matter.World.add(world, objects); // add the objects\n    \n      return {\n        engine,\n        world\n      }\n    }\n    \n    // next: add _getEntities\n```\n\nIn the above code, we’re using MatterJS to create the physics engine. `enableSleeping` is set to `true` so that the engine will stop updating and collision tracking objects that have come to rest. This setting is mostly used as a performance boost. Once the engine is created, we create six rectangle bodies. These are the blocks (or debris) that will fall from the top part of the screen. Their initial `y` position and `frictionAir` will vary depending on the random numeric value that’s generated. Once all the blocks are generated, we add it to the array of objects and add them to the world.\n\nNext, add the code for getting the entities to be rendered by React Native Game Engine. Note that each of these corresponds to a MatterJS object (ball, floor, and blocks). Each entity has a `body`, `size`, and `renderer`. The `color` we assigned to the `gameFloor` and `debris` is just passed to its renderer as a prop. As you’ll see in the code for the Box component later, the `color` is assigned as the background color:\n\n```javascript\n    _getEntities = (engine, world, ball) =\u003e {\n      const entities = {\n        physics: {\n          engine,\n          world\n        },\n    \n        playerBall: {\n          body: ball,\n          size: [BALL_SIZE, BALL_SIZE], // width, height\n          renderer: Circle\n        },\n    \n        gameFloor: {\n          body: floor,\n          size: [width, 10],\n          color: '#414448',\n          renderer: Box\n        }\n      };\n    \n      for (let x = 0; x \u003c= 5; x++) { // generate the entities for the blocks\n        Object.assign(entities, {\n          ['debris_' + x]: {\n            body: this.debris[x],\n            size: [DEBRIS_WIDTH, DEBRIS_HEIGHT],\n            color: randomColor({\n              luminosity: 'dark', // only generate dark colors so they can be easily seen\n            }),\n            renderer: Box\n          }\n        });\n      }\n    \n      return entities;\n    }\n    \n    // next: _setupCollisionHandler\n```\n\nNext, add the code for setting up the collision handler. In the code below, we listen for the [collisionStart event](http://brm.io/matter-js/docs/classes/Engine.html#event_collisionStart). This event is triggered when any of the objects in the world starts colliding. `event.pairs` stores the information on which objects have started colliding. If a block hits the floor, it means the player have successfully evaded it. We don’t really want to generate new objects as the game proceeds so we simply reuse the existing objects. We can do this by setting a new initial position, that way, it can start falling again. In the case that the ball hit a block, we loop through all the blocks and set them as a static object. This will have a similar effect to gravity being turned off, so the blocks are actually frozen in mid air. At this point, the game is considered over:\n\n```javascript\n    _setupCollisionHandler = (engine) =\u003e {\n      Matter.Events.on(engine, \"collisionStart\", (event) =\u003e {\n        var pairs = event.pairs;\n    \n        var objA = pairs[0].bodyA.label;\n        var objB = pairs[0].bodyB.label;\n    \n        if(objA === 'floor' \u0026\u0026 objB === 'debris') {\n          Matter.Body.setPosition(pairs[0].bodyB, { // set new initial position for the block\n            x: randomInt(1, width - 30),\n            y: randomInt(0, 200)\n          });\n          \n          // increment the player score\n          this.setState(state =\u003e ({\n            score: state.score + 1\n          }));\n        }\n    \n        if (objA === 'ball' \u0026\u0026 objB === 'debris') {\n          Alert.alert('Game Over', 'You lose...');\n          this.debris.forEach((debris) =\u003e {\n            Matter.Body.set(debris, {\n              isStatic: true\n            });\n          });\n        }\n      });\n    }\n    // next: add render\n```\n\nNext, render the UI. The GameEngine component from React Native Game Engine is used to render the entities that we’ve generated earlier. Inside it is the button for resetting the game, and a text for showing the player’s current score:\n\n```javascript\n    render() {\n      const { isGameReady, score } = this.state;\n    \n      if (isGameReady) {\n        return (\n          \u003cGameEngine\n            style={styles.container}\n            systems={[this.physics]}\n            entities={this.entities}\n          \u003e\n            \u003cView style={styles.header}\u003e\n              \u003cButton\n                onPress={this.reset}\n                title=\"Reset\"\n                color=\"#841584\"\n              /\u003e\n              \u003cText style={styles.scoreText}\u003e{score}\u003c/Text\u003e\n            \u003c/View\u003e\n          \u003c/GameEngine\u003e\n        );\n      }\n      return null;\n    }\n    \n    // next: add reset\n```\n\nHere’s the code for resetting the game:\n\n```javascript\n    reset = () =\u003e {\n      this.debris.forEach((debris) =\u003e { // loop through all the blocks\n        Matter.Body.set(debris, {\n          isStatic: false // make the block susceptible to gravity again\n        });\n        Matter.Body.setPosition(debris, { // set new position for the block\n          x: randomInt(1, width - 30),\n          y: randomInt(0, 200)\n        });\n      });\n    \n      this.setState({ \n        score: 0 // reset the player score\n      });\n    }\n```\n\nLastly, here are the styles:\n\n```javascript\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        backgroundColor: '#F5FCFF',\n      },\n      header: {\n        padding: 20,\n        alignItems: 'center'\n      },\n      scoreText: {\n        fontSize: 25,\n        fontWeight: 'bold'\n      }\n    });\n```\n\n### Box component\n\nHere’s the code for the Box component:\n\n```javascript\n    // src/components/Box.js\n    import React, { Component } from \"react\";\n    import { View } from \"react-native\";\n    \n    const Box = ({ body, size, color }) =\u003e {\n      const width = size[0];\n      const height = size[1];\n     \n      const x = body.position.x - width / 2;\n      const y = body.position.y - height / 2;\n    \n      return (\n        \u003cView\n          style={{\n            position: \"absolute\",\n            left: x,\n            top: y,\n            width: width,\n            height: height,\n            backgroundColor: color\n          }}\n        /\u003e\n      );\n    };\n    \n    export default Box;\n```\n\n### Circle component\n\nHere’s the code for the Circle component:\n\n```javascript\n    // src/components/Circle.js\n    import React, { Component } from \"react\";\n    import { View, StyleSheet, Dimensions } from \"react-native\";\n    \n    const { height, width } = Dimensions.get('window');\n    \n    const BODY_DIAMETER = Math.trunc(Math.max(width, height) * 0.05);\n    const BORDER_WIDTH = Math.trunc(BODY_DIAMETER * 0.1);\n    \n    const Circle = ({ body }) =\u003e {\n      const { position } = body;\n      const x = position.x - BODY_DIAMETER / 2;\n      const y = position.y - BODY_DIAMETER / 2;\n      return \u003cView style={[styles.head, { left: x, top: y }]} /\u003e;\n    };\n    \n    export default Circle;\n    \n    const styles = StyleSheet.create({\n      head: {\n        backgroundColor: \"#FF5877\",\n        borderColor: \"#FFC1C1\",\n        borderWidth: BORDER_WIDTH,\n        width: BODY_DIAMETER,\n        height: BODY_DIAMETER,\n        position: \"absolute\",\n        borderRadius: BODY_DIAMETER * 2\n      }\n    });\n```\n\n### Random decimal helper\n\nHere’s the code for generating a random decimal:\n\n```javascript\n    // src/helpers/getRandomDecimal.js\n    const getRandomDecimal = (min, max) =\u003e {\n      return Math.random() * (max - min) + min;\n    }\n    \n    export default getRandomDecimal;\n```\n\n## Running the app\n\nAt this point, you should be able to run the app and play the game:\n\n```\n    react-native run-android\n    react-native run-ios\n```\n\n## Conclusion\n\nIn this tutorial, you learned how to get the device’s accelerometer data from a React Native app and use it to control the ball. \n\nYou can view the code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/RNSensorDemo).","metaTitle":"Build a game using device sensors in React Native","metaDescription":"Build a mobile game, taking advantage of React Native's device sensors module. Use the gyroscope to detect the tilt of the phone, allowing a player to manipulate objects on screen and dodge obstacles. The game includes a simple scoring system, and can be easily extended."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3vtuHZ9yJZJSf1iAJF9jNj","type":"Entry","createdAt":"2019-07-21T22:15:24.110Z","updatedAt":"2019-07-31T20:34:30.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Introduction to error handling in Angular 7: Part 1 - Angular errorHandler","url":"error-handling-angular-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55Vy5qUc2Hc2NxBxWerK1T","type":"Entry","createdAt":"2019-03-16T13:13:19.673Z","updatedAt":"2019-03-16T13:13:19.673Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lotanna Nwose","url":"lotanna-nwose","email":"viclotana@gmail.com","twitter":"https://twitter.com/viclotana","github":"https://github.com/viclotana","guestWriter":true}}],"projectRepo":"https://github.com/viclotana/ng_errors","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2019-07-20","description":"This tutorial series will introduce you to errors in JavaScript and the try-catch concept. In part one, learn how the concept is used, and how to handle internal errors in Angular with the Angular errorHandler, with a focus on client side JavaScript errors.","prerequisite":"You will need to have Node 11+, Node Package Manager version 6+, Angular CLI 7+ and Angular 7+  installed on your machine.\n","content":"In this tutorial, you will be introduced to errors in JavaScript, the try-catch concept and how it is used and a little introduction to handling internal errors with the Angular errorHandler.\n\n![angular-errorhandler-javascript-img1](//images.ctfassets.net/1es3ne0caaid/5kTaLTwUl9i27ciBHr2CKR/d70a36ff76eb3068ca511a80831364c4/angular-errorhandler-javascript-img1.jpeg)\n\n## Errors\n\nOne of my favorite movie stars, Samuel L. Jackson, was the very first person I heard the phrase \"to err is human\" from, and although I cannot remember the title of the particular movie now you can agree with me that the same thing happens with errors when writing code. As an Angular developer, you already know errors can be caused by personal mistakes, like having an import statement with the file extension name in Angular 7 and it shows up in your browser if you fail to catch it.\n\n```\n    import { DataService } from 'src/app/services/data.service.ts';\n```\n\nErrors can arise from lack of testing, server communications, or even ambiguity of the Angular project you are working on. We are human beings and so are prone to errors, that is one reason a good editor like VS Code will always draw squeaky lines when you start derailing.\n\n## Prerequisites\n\nTo be able to follow through in this article's demonstration you should have:\n\n- Node version 11.0 installed on your machine.\n- Node Package Manager version 6.7 (usually ships with Node installation).\n- [Angular CLI](https://cli.angular.io/) version 7.0\n- The latest version of Angular (version 7)\n\n```\n    // run the command in a terminal\n    ng version\n```\n\nConfirm that you are using version 7, and update to 7 if you are not.\nOther things that will be nice-to-haves are:\n\n- A working knowledge of the Angular framework at a beginner level.\n- Familiarity with Angular services will be a plus but not a requirement.\n\n## Types of errors\n\nThere are many types of errors but I will be grouping them in two main categories: insider and outsider errors.\n\n- **Insider errors:** (also known as client side errors) These are the ones you can be held responsible for, the syntax errors, package manager errors, reference errors, type errors and all types of client side errors that can be fixed by the developer within the Angular application. \n- **Outsider errors:** (also known as server side errors) These ones can span from server errors, which mostly come with three digit status codes like 500 to internet network errors, to even browser specific errors. These are basically errors that are out of the reach of the Angular application hence the name outsider.\n\nThis article will focus on the insider errors and then a subsequent article will focus on the outsider errors.\n\n## Baby steps: throw and catch!\n\nWhen you run a function in JavaScript, that function joins a kind of function execution queue and as the application runs and gets to its turn it leaves the queue and gets executed. So, if an error occurs, JavaScript throws an exception, which will immediately remove all the operations in the queue until the exception is handled. \nOn a basic level, exceptions are handled with try/catch blocks, the whole application crashes if the compiler does not see this try/catch block. \nThe try/catch syntax looks like this:\n\n```javascript\n    try {\n     throw new Error('An error occurred');\n    }\n    catch (error) {\n     console.error('Here is the error message', error);\n    }\n    console.log('Execution continues');\n```\n\nYou will see the usefulness in a little demonstration. Create a new Angular project with the CLI, call it  `ngapp`\n\n```\n    ng new ngapp\n```\n\nAccept the router settings and choose plain CSS as the style sheet. Go to the `app.component.ts` file and copy in the code below:\n\n```typescript\n    // src/app/app.component.ts\n    import { Component } from '@angular/core';\n    @Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n    normalError() {\n     const babies = foo;\n     console.log(\"This is normal error without a try catch\");\n     }\n    }\n```\n\nCopy these into the `app.component.html`\n\n```html\n    \u003c!-- src/app/app.component.html --\u003e\n    \u003cbutton (click)=\"normalError()\"\u003e\n     Fire Normal Error\n    \u003c/button\u003e\n```\n\nThen copy these basic styling into the `app.component.css`\n```css\n    // src/app/app.component.css\n    button {\n    background-color: #4CAF50; /* Green */\n    border: none;\n    color: white;\n    padding: 15px 32px;\n    margin: 5px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    }\n```\n\nRun the application in development like this:\n\n```\n    ng serve\n```\n\nIn some cases it will fail to compile, when this happens re-run it and it will compile.\n\n![angular-errorhandler-javascript-img2](//images.ctfassets.net/1es3ne0caaid/fMFAgkZb8ThyXLPAMiOBE/995bcfcedc9db7f979796fdd1c956192/angular-errorhandler-javascript-img2.gif)\n\nThis shows in the console and most of the time, breaks the entire application immediately as you can see the message we logged did not show. The try/catch block handles these exceptions gracefully and the application continues running. So, if you had another button with a try catch block this time, you can spot the difference. Copy this in the `app.component.html file` :\n\n```html\n    \u003c!-- src/app/app.component.html --\u003e\n    \u003cbutton (click)=\"normalError()\"\u003e\n    Fire Normal Error\n    \u003c/button\u003e\n    \u003cbr\u003e\n    \u003cbutton (click)=\"errorWithCatch()\"\u003e\n    Fire Error With Try Catch\n    \u003c/button\u003e\n```\n\nCopy the code below in the `app.component.ts` file:\n\n```typescript\n    // src/app/app.component.ts\n    import { Component } from '@angular/core';\n    @Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n    normalError() {\n    const babies = foo;\n    console.log(\"This is normal error without a try catch\");\n    }\n    errorWithCatch() {\n    try {\n    const babies = foo;\n    } catch (error) {\n    console.log(' — Error is handled gracefully: ', error.name);\n    }\n    console.log(' — Execution continues without app breaking');\n    }\n    }\n```\n\nThe code in bold shows the same reference error instance, but this time around it is wrapped in a try-catch block so it can be handled gracefully. When you run the app again, it should look like this:\n\n![angular-errorhandler-javascript-img3](//images.ctfassets.net/1es3ne0caaid/6c3x7B8SDVuNtLoJ9gZO9d/2b561f215b8ca081fdcb36e30abb872b/angular-errorhandler-javascript-img3.gif)\n\n## Limitations of try/catch\n\nAs great as try/catch is, thinking about the application you already see how it is not sustainable. This is because you can not go about adding these try/catch blocks in every function in your application, that is not resource effective. The good news is, Angular has a kind of global try/catch that we can use in one centralized location to catch all exceptions.\n\n## Error handler\n\nAngular has a global error handling class called errorHandler that provides a hook for centralized exception handling inside your application. It basically intercepts all the errors that happen in your application, and logs all of them to the console, and stops the app from crashing (this was why your first button did not crash the app).\nThe syntax looks like this:\n\n```javascript\n    class MyErrorHandler implements ErrorHandler {\n      handleError(error) {\n        // do something with the exception\n      }\n    }\n    \n    @NgModule({\n      providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n    })\n    class MyModule {}\n```\n\nThis lets us modify the default behaviour of logging errors to the console to our own logic after we have added it to our providers list in our app module. Go to the the `app.component.ts` file and copy the code below in it:\n\n```typescript\n    // src/app/app.component.ts\n    import { Component } from '@angular/core';\n    @Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n     normalError() {\n      const babies = foo;\n    }\n    errorWithCatch() {\n     const babies = foo;\n     }\n    }\n```\n\nThe try catch block has been removed, so you should have two squeaky lines (or problems) in your code editor signifying two reference errors. Now to test the Angular global error handler, navigate to the `app.module.ts` file and copy the code below:\n\n```typescript\n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule, ErrorHandler } from '@angular/core';\n    import { AppRoutingModule } from './app-routing.module';\n    import { AppComponent } from './app.component';\n    export class MyErrorHandler implements ErrorHandler {\n     constructor() {}\n     handleError(error: Error) {\n      if (Error) {\n       console.log(\"hi\");\n      }\n      else console.log(\"hello\");\n      }\n     }\n    @NgModule({\n    declarations: [\n    AppComponent\n    ],\n    imports: [\n    BrowserModule,\n    AppRoutingModule\n    ],\n    providers: [\n     {\n      provide: ErrorHandler,\n      useClass: MyErrorHandler,\n     },\n    ],\n    bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n```\n\nThe changes made just like the syntax suggests we created a global error handler class that implements the Angular error handler and then registered it in the provider section.\nOur logic simply checks for errors and logs a message for any errors found. If you save this and run the application you will see the texts logged in the console for every error and the application working just like it was a try-catch. \n\n## Error service\n\nNow you can see all our error logic is inside the core app module, this is not the way Angular encourages us to write code. So in line with keeping everything modular, we use a service. you will call it error service and all the logic on how to handle your errors will be kept in it. \nFirst of all, generate an Angular service with the CLI:\n\n```\n    ng generate service error\n```\nor\n```\n    ng g s error\n```\n\nThen you have to remove the error handler logic in your `app.module.ts` file so that it will look like this:\n\n```typescript\n    // src/app/app.component.ts\n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule, ErrorHandler } from '@angular/core';\n    import { AppRoutingModule } from './app-routing.module';\n    import { AppComponent } from './app.component';\n    import { ErrorService } from './error.service';\n    import { ErrorComponent } from './error/error.component';\n    @NgModule({\n    declarations: [\n    AppComponent,\n    ErrorComponent\n    ],\n    imports: [\n    BrowserModule,\n    AppRoutingModule\n    ],\n    providers: [\n     {\n      provide: ErrorHandler,\n      useClass: ErrorService,\n     },\n    ],\n    bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n```\n\nAfter that use the CLI to generate an error component where the user can be redirected to if an error occurs.\n\n```\n    ng g c error\n```\n\nNow you have the error component you do no not need to modify it, navigate to the `error.service.ts` file and copy the code below in it:\n\n```typescript\n    // src/app/error.service.ts\n    import { Injectable, ErrorHandler, Injector } from '@angular/core';\n    import { Router } from '@angular/router';\n    import { HttpErrorResponse } from '@angular/common/http'\n    @Injectable({\n    providedIn: 'root'\n    })\n    export class ErrorService implements ErrorHandler{\n     constructor(private injector: Injector) { }\n     handleError(error: any) {\n      const router = this.injector.get(Router);\n      if (Error instanceof HttpErrorResponse) {\n       console.log(error.status);\n      }\n      else {\n       console.error(\"an error occurred here broo\");\n      }\n      router.navigate(['error']);\n      }\n    }\n```\n\nHere the logic is modified a bit to first check the kind of error it is, if it is an insider error then it navigates the user to an error page as the error occurs. So make sure your `app-routing.module.ts` file is updated with the route like this:\n\n```typescript\n    // src/app/app-routing.module.ts\n    import { NgModule } from '@angular/core';\n    import { Routes, RouterModule } from '@angular/router';\n    import { ErrorComponent } from './error/error.component';\n    const routes: Routes = [\n    { path: 'error', component: ErrorComponent}\n    ];\n    @NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule]\n    })\n    export class AppRoutingModule { }\n```\n\nFinally, your `app.component.html` file should look like this:\n\n```html\n    \u003cdiv\u003e\n    \u003cbutton (click)=\"normalError()\"\u003e\n    Fire Normal Error\n    \u003c/button\u003e\n    \u003cbr\u003e\n    \u003cbutton (click)=\"errorWithCatch()\"\u003e\n    Fire Error With Try Catch\n    \u003c/button\u003e\n    \u003c/div\u003e\n    \u003crouter-outlet\u003e\u003c/router-outlet\u003e\n```\n\nIf you followed the post to this point, you can run the application in development again, your errors will be gracefully handled as expected. \n\n## Conclusion\n\nYou have been introduced to errors and the concept behind handling them in Angular with the errorHandler class with focus on client side JavaScript errors. The [next tutorial](https://pusher.com/tutorials/error-handling-angular-part-2) will go deep into outsider errors, the HTTP interceptors and error tracking with a remote service building on all the concepts you have learnt in this post. The complete code for this tutorial is on GitHub and can be [found here.](https://github.com/viclotana/ng_errors) ","metaTitle":"Introduction to error handling in Angular 7 - Part 1","metaDescription":"This tutorial series will introduce you to errors in JavaScript and the try-catch concept. In part one, learn how the concept is used, and how to handle internal errors in Angular with the Angular errorHandler, with a focus on client side JavaScript errors."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6VOxUmjTarGnHon8rnsCga","type":"Entry","createdAt":"2019-06-24T17:02:16.009Z","updatedAt":"2019-06-24T17:02:16.009Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with GraphQL in React Native","url":"learning-graphql-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNGraphQL","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2019-06-24","description":"GraphQL makes it easier for developers to get the specific data we want with less code. In this tutorial you will learn how to implement a simple GraphQL server and query the data from a React Native app, by creating a simple app which fetches, inserts, updates, and deletes data from a GraphQL server. ","prerequisite":"You will need to have Node 11.2+, Yarn 1.13+, React Native CLI 2.0+ and React Native 0.59+ installed on your machine.","content":"GraphQL’s adoption is increasing, and for good reason. Many believe it’s the future for API’s, and big companies (GitHub,  Coursera, PayPal, Shopify) using it just sparks the developer interest even further. \n\nIt’s really an exciting time to learn GraphQL, especially for React Native developers because the apps that we create usually communicate with a server. GraphQL makes it easier for us to get the specific data we want with less code. Gone are the days where we have to hit multiple endpoints just to get the data we want from a REST API.\n\nIn this tutorial, you will learn how to implement a simple GraphQL server and query the data from a React Native app.\n\n\n## Prerequisites\n\nBasic knowledge of React Native and Node.js is required to follow this tutorial.\n\nThe following package versions are used in this tutorial:\n\n\n- Node 11.2.0\n- Yarn 1.13.0\n- React Native CLI 2.0.1\n- React Native 0.59.5\n\nIf you encounter any issues getting the app to work, try using the above versions instead.\n\n\n## App overview\n\nWe will build a Pokemon viewer app. This will pick a random Pokemon and display it on the screen. When the user taps on it, a new Pokemon will be fetched. It’s really simple but it’s still going to demonstrate how to implement the full GraphQL stack.\n\n![learning-graphql-react-native-img1](//images.ctfassets.net/1es3ne0caaid/3yxQ1dJNzxf7XTLzFFJxLm/54582a216270b922c901177eaa08d82e/learning-graphql-react-native-img1.gif)\n\nYou can view the source code of the app on this [GitHub repo](https://github.com/anchetaWern/RNGraphQL).\n\n\n## Bootstrapping the app\n\nTo ensure compatibility, clone the GitHub repo for this project:\n\n```\n    git clone https://github.com/anchetaWern/RNGraphQL\n```\n\nThis contains the `package.json` file for both the server and the React Native app. The `starter` branch contains the starting point for this tutorial:\n\n```\n    git checkout starter\n```\n\nOnce you’ve switched branches, you can go ahead and install the dependencies and re-create the `android` and `ios` folders for the app:\n\n```\n    yarn\n    react-native eject\n```\n\nThat will install all the GraphQL-related packages that we’re going to need in the app. Later on, you’ll learn what each one does once we proceed to code the client side.\n\nLastly, we also need to install the server dependencies:\n\n```\n    cd server\n    yarn\n```\n\n\n## Creating the GraphQL server\n\nIn this section, we will be creating the GraphQL server using [Apollo](https://www.apollographql.com/). As you might already know, GraphQL is only a [specification](https://graphql.github.io/graphql-spec/), not an [implementation](https://graphql.org/code/). That’s why we need something like Apollo to implement it. \n\nApollo is a platform which provides us with all the tools needed for implementing a GraphQL server. This includes both the server and the client. The server component is used for defining the schema and resolvers (provides instructions on how to turn a specific GraphQL operation into data). On the other hand, the client component is responsible for providing tools that we can use for querying the server and binding the results to the UI. \n\n### Defining the schema\nThe first step in creating a GraphQL server is for us to define the schema. This is where you strictly define what data your API is managing. In this case, we’re handling basic Pokemon data. \n\nIf you’ve seen the demo gif earlier, you know exactly which Pokemon data we’re working with:\n\n\n- Name\n- Image\n- Types\n- Description\n\nBut aside from that, we also need to define the queries that the server is going to handle. In this case, we’re using the [PokéAPI](https://pokeapi.co/) as our direct data source so our queries will be limited by the endpoints they’re exposing. We’re only going to need a few data from these endpoints so it’s fine if we use them directly:\n\n\n- `/pokemon/{id}` - used for getting the Pokemon data.\n- `/pokemon-species/{id}` - used for getting the description text.\n\nWith that in mind, we know that we can only have queries which accept the ID of the Pokemon as its argument. \n\n\n\u003e **Note**: We’re not really going to cover caching in this tutorial, but it’s important to implement it if you’re going to use an existing REST API as a direct data source. That way, you won’t get throttled from using the API too much. PokéAPI is actually limited to 100 API requests per IP address per minute.\n\nNow we’re ready to define the schema. Create a `server/schema.js` file and add the following code:\n\n```javascript\n    const { gql } = require('apollo-server');\n    \n    const typeDefs = gql`\n      type Query {\n        pokemon(id: ID!): Pokemon\n      }\n    \n      type Pokemon {\n        id: ID!\n        name: String\n        desc: String\n        pic: String\n        types: [PokemonType!]!\n      }\n    \n      type PokemonType {\n        id: Int!\n        name: String!\n      }\n    `;\n    \n    module.exports = typeDefs;\n```\n\nBreaking down the above code, we first imported the `apollo-server` package. This allows us to define the GraphQL schema. The schema includes the shape of the data we expect to return, as well as the shape of the queries. \n\nLet’s first start with the `Query` type which describes what data we can fetch. In this case, we only want the user to fetch Pokemon data so the query is named `pokemon`. To specify arguments, you need to put them inside the parentheses right after the name of the query. In this case, we want the users to supply the ID of the Pokemon. An exclamation is added after it to indicate that it is a required argument. After that, we specify the return data after the colon (`Pokemon`). This is a custom GraphQL object type which we’ll define next:\n\n```javascript\n    type Query {\n      pokemon(id: ID!): Pokemon\n    }\n```\n\nNext, we need to define the `Pokemon` object type. This is where we specify all the properties (and their data type) that are available for this particular type. Most of the properties that we need to expose are only scalar types (`ID` and `String`):\n \n\n- `ID` is a unique identifier for a specific object of this type. An exclamation is added after it which means it cannot have a value of `null`. \n- `String` is just your usual primitive type for storing string values.\n- `PokemonType` is yet another object type. The `types` property is used for storing an array of objects so we also have to break down the object to its expected properties:\n\n```javascript\n    type Pokemon {\n      id: ID!\n      name: String\n      desc: String\n      pic: String\n      types: [PokemonType]\n    }\n```\n\nHere’s the definition of the `PokemonType`:\n\n```javascript\n    type PokemonType {\n      id: Int\n      name: String\n    }\n```\n\n\u003e You can find more types on this [cheat sheet](https://devhints.io/graphql#schema).\n\n### Connect to a data source\nNow that we’ve defined our schema, the next step is to connect to a data source. Apollo comes with a data source API, which you could use to easily connect to an existing database or a REST API. As mentioned earlier, we will be using PokéAPI as our data source. This API provides Pokemon data from all of the Pokemon games so it’s perfect for our needs.\n\nCreate a `server/datasources/poke.js` file and add the following:\n\n```javascript\n    const { RESTDataSource } = require('apollo-datasource-rest');\n    \n    class PokeAPI extends RESTDataSource {\n      constructor() {\n        super();\n        this.baseURL = 'https://pokeapi.co/api/v2/';\n      }\n    \n      pokemonReducer(pokemon, pokemonSpecies) {\n        return {\n          id: pokemon.id || 0,\n          name: pokemon.name,\n          desc: this.getDescription(pokemonSpecies.flavor_text_entries),\n          pic: pokemon.sprites.front_default, // image URL of the front facing Pokemon\n          types: this.getTypes(pokemon.types)\n        };\n      }\n    \n      getDescription(entries) {\n        return entries.find(item =\u003e item.language.name === 'en').flavor_text;\n      }\n    \n      getTypes(types) {\n        return types.map(({ slot, type }) =\u003e {\n          return {\n            \"id\": slot, // the type's index\n            \"name\": type.name // the type's name (e.g. electric, leaf)\n          }\n        });\n      }\n    \n      async getPokemonById({ id }) {\n        const pokemonResponse = await this.get(`pokemon/${id}`);\n        const pokemonSpeciesResponse = await this.get(`pokemon-species/${id}`);\n        return this.pokemonReducer(pokemonResponse, pokemonSpeciesResponse);\n      }\n    }\n    \n    module.exports = PokeAPI;\n```\n\nIf you’ve consumed any sort of REST API before (and I assume you have), the code above should easily make sense to you. The `apollo-datasource-rest` package really makes this simple. This package exposes the `RESTDataSource` class which allows us to make a request to a REST API:\n\n```\n    const pokemonResponse = await this.get(`pokemon/${id}`); // this.post for POST requests\n    const pokemonSpeciesResponse = await this.get(`pokemon-species/${id}`);\n```\n\nFrom there, all we had to do was to extract the data that we need. The only thing you need to remember is that the data you’re extracting should correspond to the properties that you’ve defined earlier in your schema: `id`, `name`, `desc`, `pic`, and `types`:\n\n```javascript\n    pokemonReducer(pokemon, pokemonSpecies) {\n      return {\n        id: pokemon.id || 0,\n        name: pokemon.name,\n        desc: this.getDescription(pokemonSpecies.flavor_text_entries),\n        pic: pokemon.sprites.front_default, // image URL of the front facing Pokemon\n        types: this.getTypes(pokemon.types)\n      };\n    }\n```\n\n### Define the resolvers\nThe final piece of the puzzle is the resolvers. The resolvers allow us to define the mapping of the queries you’ve defined in your schema to the data source method which returns the data. It follows the format:\n\n```\n    fieldName: (parent, args, context, info) =\u003e data;\n```\n\nHere’s what each one does:\n\n\n- `parent` - an object that contains the result returned from the resolver on the parent type. This is always blank (`_`) because it refers to the root of the graph.\n- `args` - an object containing the arguments passed to the field. In this case, our query only accepts the `id` of the Pokemon. We then need to pass the `id` to the data source method (`getPokemonById()`) as an object property because that’s how we defined it earlier on the `server/datasources/poke.js` file.\n- `context` - this is where we can access our data sources. We can extract the data source from the `dataSources` property. \n- `info` - an object which contains information about the execution state of the operation. We don’t really need to use it in this case so we just won’t supply it at all.\n\nTo define the resolver, create a `server/resolvers.js` file and add the following:\n\n```javascript\n    module.exports = {\n      Query: {\n        pokemon: (_, { id }, { dataSources }) =\u003e\n          dataSources.pokeAPI.getPokemonById({ id })\n      }\n    };\n```\n\n### Creating the server\nThe final step in implementing the GraphQL server is to bring everything together. Create a `server/index.js` file and add the following:\n\n```javascript\n    const { ApolloServer } = require('apollo-server');\n    const typeDefs = require('./schema');\n    const resolvers = require('./resolvers');\n    \n    const PokeAPI = require('./datasources/poke');\n    \n    const server = new ApolloServer({\n      typeDefs,\n      resolvers,\n      dataSources: () =\u003e ({\n        pokeAPI: new PokeAPI()\n      })\n    });\n    \n    server.listen().then(({ url }) =\u003e {\n      console.log(`GraphQL Server is running at ${url}`);\n    });\n```\n\nIn the above code, we import the `ApolloServer` class from the `apollo-server` package. This allows us to fire up an Apollo server which accepts an object containing the schema, resolvers, and data sources we’ve defined earlier.\n\nAt this point, you can now run the server:\n\n```\n    cd server\n    yarn start\n```\n\nYou can play around with it by accessing `http://localhost:4000/` on your browser.\n\nIf you get a blank screen, delete the `node_modules` folder and `yarn.lock` file. After that, remove the `dependencies` property in the `package.json` file and re-install the dependencies with the following command:\n\n```\n    yarn add apollo-datasource-rest@0.4.0 apollo-server@2.5.0 graphql@14.3.0\n```\n\nFrom there, you can view the schema that we’ve defined earlier by clicking on the **SCHEMA** tab located on the right part of the screen:\n\n![learning-graphql-react-native-img2](//images.ctfassets.net/1es3ne0caaid/6AopF3xeN9RakYIRY9OuIt/f3b457ef658620f22c5f3ed37e75013a/learning-graphql-react-native-img2.png)\n\nBut this interface is mostly used for testing out your queries. In this case, we want to fetch the [Pokemon with the ID of 25](https://pokeapi.co/api/v2/pokemon/25):\n\n```javascript\n    query GetPokemonByName {\n      pokemon(id: 25) {\n        id,\n        name,\n        desc,\n        pic\n      }\n    }\n```\n\nThat will return the following result:\n\n```javascript\n    {\n      \"data\": {\n        \"pokemon\": {\n          \"id\": \"25\",\n          \"name\": \"pikachu\",\n          \"desc\": \"Its nature is to store up electricity. Forests\\nwhere nests of Pikachu live are dangerous,\\nsince the trees are so often struck by lightning.\",\n          \"pic\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/25.png\"\n        }\n      }\n    }\n```\n\n![learning-graphql-react-native-img3](//images.ctfassets.net/1es3ne0caaid/fYKS2ND5KabBCdlTXqIPA/ed9895bc2d6cd8fde64007244b1189c7/learning-graphql-react-native-img3.png)\n\nWhat if we also want to get the types of the Pokemon? Intuitively, we would just add `types` to the properties we’ve specified:\n\n```javascript\n    query GetPokemonByName {\n      pokemon(id: 25) {\n        id,\n        name,\n        desc,\n        pic,\n        types\n      }\n    }\n```\n\nBut that’s going to return an error:\n\n![learning-graphql-react-native-img4](//images.ctfassets.net/1es3ne0caaid/4OpuXXnRVLlPzTEcz61IaO/db2a34b74155ec997a3589a7c0ae21d2/learning-graphql-react-native-img4.png)\n\nThe error says:\n\n\n\u003e The field types of type [PokemonType] must have a selection of subfields.\n\nThis means that you also need to specify the subfields that you want to fetch like so:\n\n```javascript\n    query GetPokemonByName {\n      pokemon(id: 25) {\n        id,\n        name,\n        desc,\n        pic,\n        types {\n          id,\n          name\n        }\n      }\n    }\n```\n\nThat will return the following:\n\n```javascript\n    {\n      \"data\": {\n        \"pokemon\": {\n          \"id\": \"25\",\n          \"name\": \"pikachu\",\n          \"desc\": \"Its nature is to store up electricity. Forests\\nwhere nests of Pikachu live are dangerous,\\nsince the trees are so often struck by lightning.\",\n          \"pic\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/25.png\",\n          \"types\": [\n            {\n              \"id\": 1,\n              \"name\": \"electric\"\n            }\n          ]\n        }\n      }\n    }\n```\n\n## Building the app\n\nNow that we’re done implementing the server, it’s time for us to add the code for the React Native app. Open the `App.js` file and add the following:\n\n```javascript\n    import React, { Component } from \"react\";\n    import { View, Text, ActivityIndicator } from \"react-native\";\n    \n    import { ApolloProvider, Query } from \"react-apollo\";\n    import ApolloClient from \"apollo-boost\";\n    import gql from \"graphql-tag\";\n```\n\nHere’s what each package does:\n\n\n- `apollo-boost` - used for connecting to an Apollo server.\n- `react-apollo` - provides React components that allows us to fetch data from the Apollo server.\n- `graphql-tag` - used for parsing GraphQL queries into a format understood by the Apollo client.\n\nNext, connect to the server that we created earlier. Replace the placeholder with your machine’s internal IP address. Be sure that your machine and your device are connected to the same network when you do so. You can also use [ngrok](https://ngrok.com/) if you want:\n\n```\n    const client = new ApolloClient({ uri: 'http://YOUR_INTERNAL_IP_ADDRESS:4000/graphql' })\n```\n\nNext, import the component for rendering the Pokemon data as well as the helper function for generating random integers:\n\n```\n    import Pokemon from \"./src/components/Pokemon\";\n    import getRandomInt from \"./src/helpers/getRandomInt\";\n```\n\nNext, we’re going to use the [Context API](https://reactjs.org/docs/context.html) so we can pass the Pokemon data through the component tree without having to pass props needed by the `Pokemon` component down manually at every level:\n\n```\n    export const AppContext = React.createContext({ data: { pokemon: null } });\n```\n\nNext, create the component and declare its default state. The `query` contains the same query that we used earlier. We’re putting it in the state so the component will re-render every time we update it:\n\n```javascript\n    export default class App extends Component {\n    \n      state = {\n        query: null\n      }\n      \n      // next: add componentDidMount\n    }\n```\nOnce the component is mounted, we generate the query and update the state:\n\n```javascript\n    componentDidMount() {\n      const query = this.getQuery();\n      this.setState({\n        query\n      });\n    }\n```\n\nHere’s the `getQuery()` function. This generates a random ID and uses it for the query:\n\n```javascript\n    getQuery = () =\u003e {\n      const randomID = getRandomInt(1, 807);\n      return `\n        query GetPokemonById {\n          pokemon(id: ${randomID}) {\n            id,\n            name,\n            desc,\n            pic,\n            types {\n              id,\n              name\n            }\n          }\n        }\n      `\n    }\n```\n\nIn the `render()` method, the `\u003cApolloProvider\u003e` component is where we pass the client we created with the `ApolloClient` earlier. Then we add the `\u003cQuery\u003e` component as its child, this is where you pass the `query`. Don’t forget to parse the `query` with the `gql` module. By default, `loading` will have a value of `true`. In that case, we show a loading animation. Once the server responds, it can either be an `error` or `data`. The `data` contains the same data you saw earlier when we tried running some queries. From there, we just pass the Pokemon data and the function for fetching a new one to the app’s context:\n\n```javascript\n    render() {\n      const { query } = this.state;\n      if (!query) return null;\n    \n      return (\n        \u003cApolloProvider client={client}\u003e\n          \u003cQuery query={gql`${query}`} \u003e\n            {({ loading, error, data }) =\u003e {\n              if (loading || error) return \u003cActivityIndicator size=\"large\" color=\"#0000ff\" /\u003e\n              return (\n                \u003cAppContext.Provider value={{...data.pokemon, onPress: this.onGetNewPokemon}} style={styles.container}\u003e\n                  \u003cPokemon /\u003e\n                \u003c/AppContext.Provider\u003e\n              )\n            }}\n          \u003c/Query\u003e\n        \u003c/ApolloProvider\u003e\n      );\n    }\n```\n\nHere’s the `onGetNewPokemon()` function:\n\n```javascript\n    onGetNewPokemon = () =\u003e {\n      const query = this.getQuery();\n      this.setState({\n        query\n      });\n    }\n```\n\n### getRandomInt helper\nHere’s the helper for generating random integers. Create the `src/helpers` folder to house it:\n\n```javascript\n    // src/helpers/getRandomInt.js\n    const getRandomInt = (min, max) =\u003e {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    \n    export default getRandomInt;\n```\n\n### Pokemon component\nThe `Pokemon` component is used for displaying the Pokemon data. Create a `src/components` folder to house it.\n\nStart by importing the packages we need:\n\n```javascript\n    // src/components/Pokemon.js\n    import React from 'react';\n    import { View, Text, Image, FlatList, TouchableOpacity } from 'react-native';\n    import { AppContext } from '../../App'; // import the context we exported earlier on the App.js file\n```\n\nNext, render the component. Wrap it in `\u003cAppContext.Consumer\u003e` so you get access to the data and the `onPress` function that we passed to the context earlier. From there, it’s just a matter of displaying the data using the right components:\n\n```javascript\n    const Pokemon = () =\u003e {\n      return (\n        \u003cAppContext.Consumer\u003e\n          {\n            ({ name, pic, types, desc, onPress }) =\u003e\n            \u003cTouchableOpacity onPress={onPress}\u003e\n              \u003cView style={styles.mainDetails}\u003e\n                \u003cImage\n                  source={{uri: pic}}\n                  style={styles.image} resizeMode={\"contain\"} /\u003e\n                  \u003cText style={styles.mainText}\u003e{name}\u003c/Text\u003e\n    \n                  \u003cFlatList\n                    columnWrapperStyle={styles.types}\n                    data={types}\n                    numColumns={2}\n                    keyExtractor={(item) =\u003e item.id.toString()}\n                    renderItem={({item}) =\u003e {\n                      return (\n                        \u003cView style={[styles[item.name], styles.type]}\u003e\n                          \u003cText style={styles.typeText}\u003e{item.name}\u003c/Text\u003e\n                        \u003c/View\u003e\n                      )\n                    }}\n                  /\u003e\n    \n                  \u003cView style={styles.description}\u003e\n                    \u003cText\u003e{desc}\u003c/Text\u003e\n                  \u003c/View\u003e\n              \u003c/View\u003e\n            \u003c/TouchableOpacity\u003e\n          }\n        \u003c/AppContext.Consumer\u003e\n      );\n    }\n```\n\nLastly, add the styles and export the component. Most of these are just used to change the background color of the types container based on the Pokemon’s type:\n\n```javascript\n    const styles = {\n      mainDetails: {\n        padding: 30,\n        alignItems: 'center'\n      },\n      image: {\n        width: 100,\n        height: 100\n      },\n      mainText: {\n        fontSize: 25,\n        fontWeight: 'bold',\n        textAlign: 'center'\n      },\n      description: {\n        marginTop: 20\n      },\n      types: {\n        flexDirection: 'row',\n        marginTop: 20\n      },\n      type: {\n        padding: 5,\n        width: 100,\n        alignItems: 'center'\n      },\n      typeText: {\n        color: '#fff',\n      },\n      normal: {\n        backgroundColor: '#8a8a59'\n      },\n      fire: {\n        backgroundColor: '#f08030'\n      },\n      water: {\n        backgroundColor: '#6890f0'\n      },\n      electric: {\n        backgroundColor: '#f8d030'\n      },\n      grass: {\n        backgroundColor: '#78c850'\n      },\n      ice: {\n        backgroundColor: '#98d8d8'\n      },\n      fighting: {\n        backgroundColor: '#c03028'\n      },\n      poison: {\n        backgroundColor: '#a040a0'\n      },\n      ground: {\n        backgroundColor: '#e0c068'\n      },\n      flying: {\n        backgroundColor: '#a890f0'\n      },\n      psychic: {\n        backgroundColor: '#f85888'\n      },\n      bug: {\n        backgroundColor: '#a8b820'\n      },\n      rock: {\n        backgroundColor: '#b8a038'\n      },\n      ghost: {\n        backgroundColor: '#705898'\n      },\n      dragon: {\n        backgroundColor: '#7038f8'\n      },\n      dark: {\n        backgroundColor: '#705848'\n      },\n      steel: {\n        backgroundColor: '#b8b8d0'\n      },\n      fairy: {\n        backgroundColor: '#e898e8'\n      }\n    }\n    \n    export default Pokemon;\n```\n\n## Running the app\n\nAt this point, you can now run the app:\n\n```\n    react-native run-android\n    react-native run-ios\n```\n\n## Conclusion\n\nThat’s it! In this tutorial, you learned the basics of using GraphQL in a React Native app. Specifically, you learned how to set up your own GraphQL server using Apollo, use an existing REST API as its data source, consume the data from a React Native app, and display it to the user.\n\nEven though we’ve implemented the full stack on this tutorial, there’s still a lot more to learn. Be sure to check out the [GraphQL](https://graphql.org/learn/) and [Apollo](https://www.apollographql.com/docs/) docs to learn more.\n\nYou can view the source code of the app on this [GitHub repo](https://github.com/anchetaWern/RNGraphQL).","metaTitle":"Getting started with GraphQL in React Native","metaDescription":"In this tutorial you will learn how to implement a simple GraphQL server and query the data from a React Native app, by creating a simple app which fetches, inserts, updates, and deletes data from a GraphQL server. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4CNVZfnDQY8Hwcnaxt2WM4","type":"Entry","createdAt":"2019-06-06T19:32:13.885Z","updatedAt":"2019-06-06T19:32:13.885Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Lifecycle methods in React 16","url":"lifecycle-methods-react-16","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55Vy5qUc2Hc2NxBxWerK1T","type":"Entry","createdAt":"2019-03-16T13:13:19.673Z","updatedAt":"2019-03-16T13:13:19.673Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lotanna Nwose","url":"lotanna-nwose","email":"viclotana@gmail.com","twitter":"https://twitter.com/viclotana","github":"https://github.com/viclotana","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2019-06-06","description":"Gain an understanding of all the lifecycle methods in React Native 16, including the error boundaries methods. Learn when to use them, performance implications, and best practices.","prerequisite":"To run the code samples you will need React 16.","content":"\u003e TL;DR: this is an overview of all the lifecycle methods in React 16, what they are used for and how they can be used in your workflow.\n\n![react-16-lifecycle-1](//images.ctfassets.net/1es3ne0caaid/2ePb1rwBhaPA6YFsOtNjmL/a74f5c6ab1e03757da17403b4d6c0bad/react-16-lifecycle-1.jpeg)\n\n## Introduction \n\nReact is a JavaScript library by Facebook with over 110,000 stars on [GitHub](https://github.com/facebook/react). It is a declarative, efficient, and flexible framework for building user interfaces. It is really very painless to create interactive user interfaces, to build component-centric applications, which are both responsive and backward compatible. It is also currently arguably the most popular JavaScript framework out there [according to the state of JS survey](https://2018.stateofjs.com/).\n\nThis article is for developers with basic working knowledge of React. You will be introduced to the React components lifecycle methods, where they are called, how they are used and the thought process behind their implementation.\n\n## React component lifecycle methods\n\nReact components lifecycle methods can be described as events that take place from any component’s inception to the death of that same component. The lifecycle of a React component takes place within these events that are in four categories:\n\n1. **Mounting:** The methods and events that take place here happen as the component is mounted in the DOM. \n2. **Updating:** Here the methods and events take place after the React component has entered the DOM.\n3. **Un-mounting:** Here the methods and events take place as they React component leaves the DOM or is unmounted from the DOM.\n4. **Error Boundaries:** Here is a special category that deals with handling or gracefully catching errors in order not to totally break your React application render. \n\nIn this post, the React lifecycle methods will be explained in the order they are called by React in the DOM.\n\n## constructor()\n\nFor React class components that are not functional components, the constructor is the very first method that gets called to action in the application’s component presentation. The constructor takes in `props` as an object, and you have to call the parent class through `super` in order to set access `this.props` to `props` ``inside the class. The constructor looks like this:\n\n```javascript\n    class FirstComponent extends Component {\n      constructor(props) {\n        console.log(\"constructor is called here!\");\n        super(props);\n        this.state = {\n          counter: 0\n        };\n      }\n    }\n```\n\nThe `super` call is very important and it must have the `props` passed into it. It is also important to know that state can only be set inside constructors. You can also set state values, bind methods and even create refs inside the constructor. \n\n## getDerivedStateFromProps() \n\nThe very next method called after the constructor is the `getDerivedStateFromProps` method, it is a static method and so you cannot use `this` inside of it. It is also the last method called before the render method. It kind of has a specific use case, which is to return a state object on the initial props and set state, this can also be done with the constructor but the constructor does a lot more things aside from setting state. It is not a very frequently used method as many React developers just use the constructor instead. It takes two parameters, props and state and the syntax looks like this:\n\n```javascript\n    static getDerivedStateFromProps(props, state) {\n        console.log(\"getDerivedStateFromProps called here\");\n        return null;\n      }\n```\n\nIt is called on every render and it can be placed inside the constructor method. \n\n## render()\n\nThis is the most important method of any React class, the whole work that is going to appear in the DOM is done here as it outputs the JSX of your component. It is the most used React lifecycle method and it is the only required method in any React class.\n\n```javascript\n    render(){\n     console.log(\"render method is called here\");\n     return \u003cdiv\u003eHello world!\u003c/div\u003e\n    }\n```\n\nYou are not however allowed to set state inside the render method as it should be pure. Pure functions are functions without side effects, they must always return the same outputs when the same corresponding inputs are passed into them.\n\n## componentDidMount()\n\nThis method is called immediately after the render method call as soon as the component is mounted. Inside this method is where you are allowed to do all the behind the scenes work you need without the DOM. These things can range from setting state, initializing and loading data and even adding event listeners. The syntax looks like this:\n\n```javascript\n    componentDidMount() {\n     console.log(\"componentDidMount was called here\");\n    }\n```\n\nIf `setState` is called inside this method, the DOM is re-rendered to reflect the modification. This method is perfect for making AJAX calls.\n\n## shouldComponentUpdate()\n\nThis is the method that is called right after the `componentDidMount method`, this method does not allow you set state in it. It is useful for when you do not want your props or state changes re-rendered, it is like a bridge where you have to get permission if a component should be updated based on the props or state changes made. It returns a boolean, usually true by default. The syntax looks like this:\n\n```javascript\n    shouldComponentUpdate(nextProps, nextState) {\n      console.log(\"should component update is called here!\");\n      return nextState.cars.length \u003c this.state.cars.length;\n    }\n```\n\nIt takes in two arguments, `nextProps` and `nextState` and with those you can you can make your return conditions for the re-render. It is advised that this method be used with care and for optimization purposes keep in mind that it can trigger re-renders.\n\n## getSnapshotBeforeUpdate() \n\nThis method is a very frequently used method, it is called just between the period a component is rendered and when it is updated in the DOM. It is a kind of screenshot of what the previous state and props looks like before updating, a genius method by React. The syntax can look like this:\n\n```javascript\n    getSnapshotBeforeUpdate(prevProps, prevState){\n      console.log(\"getSnapshotBeforeUpdate was called here!\");\n      if (prevState.cars.length \u003c this.state.cars.length) {\n        return { lastVehicle };\n      }\n      return null;\n    }\n```\n\nIt takes two parameters, `prevProps` and `prevState` and it either returns a value from the conditional statement or null by default. The value returned is always passed down to the componentDidUpdate method.\n\n## componentDidUpdate()\n\nThis is the next method that gets called immediately after the `getSnapshotBeforeUpdate` method, right after a DOM update. Here some logic can be set up for actions on an updated DOM. The syntax is like this:\n\n```javascript\n    componentDidUpdate(prevProps, prevState, snapshot) {\n      console.log(\"componentDidUpdate was called here!\");\n    if (snapshot.lastVehicle) {\n        return \u003cdiv\u003e No cars left! \u003c/div\u003e\n      }\n    }\n```\n\nIt has three parameters, the `prevProps`, `prevState` and the `snapshot` . The `snapshot` is the value returned from the `getSnapshotBeforeUpdate` method. You can set state here but it should always be inside a conditional statement.\n\n## componentWillUnmount()\n\nThis method is called just before a component is unmounted from the DOM, it is the method called right after componentDidUpdate. Here is where your clean up logic should go, clearing counters and caches, cancel API requests or removing things like event listeners. It can look like this:\n\n```javascript\n    componentWillUnmount(){\n      console.log(\"componentWillUnmount was called here!\");\n      window.removeEventListener(\"restart\");\n    }\n```\n\nAs you might have guessed, you cannot set state in this method because that would automatically have to cause a re-render most times. After this, your component is gone, for good.\n\n## getDerivedStateFromError()\n\nThis is one of the two new lifecycle method used to gracefully handle errors called error boundaries. If a child component of a parent component has an error we can use this method to display an error screen. The syntax looks like this:\n\n```javascript\n    static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n      }\n    \n      render() {\n        if (this.state.hasError) {\n          // You can render any custom fallback UI\n          return \u003ch1\u003eSomething went wrong.\u003c/h1\u003e;\n        }\n    \n        return this.props.children; \n      }\n```\n\nHere we catch a child component error and we display an error message of choice to the client gracefully instead of breaking the application or displaying a blank screen.\n\n## componentDidCatch()\n\nThis is the second lifecycle method that is a React error boundary. It enhances the capability of the first error boundary above by allowing for logging errors. The syntax looks like this:\n\n```javascript\n    componentDidCatch(error, info) {\n        console.log(info.componentStack);\n      }\n```\n\nSo, in addition to showing your client a decent ‘something went wrong’ message in the user interface, you also get a platform to inform a developer inspecting the component of specific information about the error. It is mostly used in addition with the getDerivedStateFromError method.\n\n## Conclusion\n\nYou have seen [all the lifecycle methods in React 16](https://reactjs.org/docs/react-component.html?utm_source=caibaojian.com), their syntax and how they all work in the chronological order of method calls. The error boundaries are relatively new and you should make sue to incorporate them in your workflow, they have been found to be very helpful. You can see a [visual representation of these methods here](http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/). Happy coding!","metaTitle":"Lifecycle methods in React 16","metaDescription":"Gain an understanding of all the lifecycle methods in React Native 16, including the error boundaries methods. Learn when to use them, performance implications, and best practices."}}],"defaultValue":"no pusher tech \u0026 JavaScript","queryType":"tag","pages":7,"route":"/tutorials","query":{"product":"no pusher tech","tag":"JavaScript"}}},"page":"/tutorials","query":{"product":"no pusher tech","tag":"JavaScript"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=no%20pusher%20tech&tag=JavaScript by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:40:51 GMT -->
</html>