<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=no%20pusher%20tech&tag=JavaScript&page=5 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:49 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dash.pusher.com/no pusher tech" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dash.pusher.com/authenticate/register?product=no%20pusher%20tech" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dash.pusher.com/no pusher tech" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dash.pusher.com/authenticate/register?product=no%20pusher%20tech" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="no pusher tech" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dash.pusher.com/no pusher tech" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dash.pusher.com/authenticate/register?product=no%20pusher%20tech" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">60</span> tutorials for “<span class="css-npldjc ehwuahf2">no pusher tech &amp; JavaScript</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials512c.html?product=Beams&amp;tag=JavaScript" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials78c7.html?product=no%20pusher%20tech" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#C223CE"></path></svg></a><a href="tutorials9f36.html?product=no%20pusher%20tech&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsdfdb.html?product=no%20pusher%20tech&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials0e4c.html?product=no%20pusher%20tech&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials01a4.html?product=no%20pusher%20tech&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorialsc43b.html?product=no%20pusher%20tech&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials7632.html?product=no%20pusher%20tech&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials8e84.html?product=no%20pusher%20tech&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials6f6a.html?product=no%20pusher%20tech&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="no pusher tech &amp; JavaScript"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/react-hooks.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with React Hooks</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This tutorial takes a look at an upcoming React feature: React Hooks. It explains their purpose and how to use them and ...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/data-visualization-vue-chart.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a simple data visualization dashboard with Vue.js and Chart.js</h3><p class="css-k12xad e5jrto45">This brief tutorial will guide you through creating a simple one-page dashboard. The app is built with Vue, and uses moc...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/wordpress-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Linking WordPress and React Native</h3><p class="css-k12xad e5jrto45">This tutorial discusses the pros and cons of using WordPress and React Native together, before walking through a practic...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/api-authentication-adonis.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Adonis.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to build an API with authentication in Adonis</h3><p class="css-k12xad e5jrto45">This tutorial demonstrates how quick it is to add authentication to an API built with Adonis.js. You will create a simpl...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/http-response-codes-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Understanding HTTP response status codes in frontend applications - Part 2: Implementations</h3><p class="css-k12xad e5jrto45">This two part series provides an introduction to HTTP status codes. In part two, build a demo app with a Node.js backend...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/http-response-codes-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Understanding HTTP response status codes in frontend applications - Part 1: Status codes</h3><p class="css-k12xad e5jrto45">This two part series provides an introduction to HTTP status codes. In part one, get an overview of how the server and f...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/vuejs-mixins-custom-directives.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Advanced Vue.js: demystify mixins and custom directives </h3><p class="css-k12xad e5jrto45">This tutorial looks at some of the advanced features of Vue.js: mixing and custom directives. It provides a conceptual o...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/authorization-graphql.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">GraphQL</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Handling authorization in GraphQL</h3><p class="css-k12xad e5jrto45">This tutorial shows how to use GraphQL to manage authorization and user roles. You will build on a previous app to creat...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/authentication-vue-vuex.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Authentication in Vue using Vuex</h3><p class="css-k12xad e5jrto45">Learn how to implement authentication in a Vue app with Vuex and a Node backend. Create a simple demo with a login page ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsba68.html?product=no%20pusher%20tech&amp;tag=JavaScript&amp;page=4" class="css-5s6711 edg0byb1">Prev</a><a href="tutorialsd8cc.html?product=no%20pusher%20tech&amp;tag=JavaScript&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials0f87.html?product=no%20pusher%20tech&amp;tag=JavaScript&amp;page=3" class="css-za1ua3 edg0byb1">3</a><a href="tutorialsba68.html?product=no%20pusher%20tech&amp;tag=JavaScript&amp;page=4" class="css-za1ua3 edg0byb1">4</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials56a8.html?product=no%20pusher%20tech&amp;tag=JavaScript&amp;page=5" class="css-2wakph edg0byb1">5</a><a href="tutorials7356.html?product=no%20pusher%20tech&amp;tag=JavaScript&amp;page=6" class="css-5s6711 edg0byb1">6</a><a href="tutorialsb33b.html?product=no%20pusher%20tech&amp;tag=JavaScript&amp;page=7" class="css-5s6711 edg0byb1">7</a><a href="tutorials7356.html?product=no%20pusher%20tech&amp;tag=JavaScript&amp;page=6" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":60,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2Hrp4GxcXCSoI62G8GgGay","type":"Entry","createdAt":"2018-12-11T23:32:57.448Z","updatedAt":"2018-12-11T23:32:57.448Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with React Hooks","url":"react-hooks","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/react-hooks-samples","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-12-11","description":"This tutorial takes a look at an upcoming React feature: React Hooks. It explains their purpose and how to use them and offers an introduction to a few built-in Hooks.","prerequisite":"To try out React Hooks, you will need the alpha build of React (at time of publication)","content":"React Hooks is a new feature that is likely coming in React 16.7. If you have been on Twitter, you have likely seen the amount of buzz surrounding the announcement of React Hooks. A quick look at [Google Trends for the past 30 days](https://trends.google.com/trends/explore?date=2018-10-16%202018-11-16\u0026q=react%20hooks), reveals that there has been an increased interest in React hooks.\n\n![react-hooks-interest](//images.ctfassets.net/1es3ne0caaid/3k1vS9OVcsmuMqwo42MMke/e2584483878092a2e3cc5ced4916bd15/react-hooks-interest.png)\n\nSo what are React Hooks and how can you use them in your React code base? We will consider this in this article.\n\n\n## Prerequisites\n\nTo get the most out of this tutorial, you need knowledge of JavaScript and the React framework. If you want to play around with React Hooks, you will need the alpha build of React as this feature is still in alpha (as at the time of writing this article).\n\n\n## What are React Hooks?\n\nWhen you are creating a React application, you usually have to create components. Components are the building block of React applications. React components can be either stateful or stateless.\n\nWhen you create a component as a class that extends the `React.Component` class, you have access to state and React lifecycle methods: `componentDidUpdate`, `componentDidMount`, and the others.\n\nThis is a typical React component. It has access to state and lifecycle methods:\n\n``` javascript\n    import React from 'react';\n    \n    export default class extends React.Component {\n      state = {\n        name: 'Neo Ighodaro'\n      }\n      \n      componentDidUpdate() {\n        // [...]\n        \n        this.setState({ \n          name: 'Neo Not Ighodaro' \n        })    \n        \n        // [...]\n      }\n    }\n```\n\nHowever, when you create stateless components, you don’t have access to state of lifecycle hooks by default. \n\n``` javascript\n    import React from 'react'\n    \n    export default () =\u003e {\n      return (\n        \u003cdiv className=\"island\"\u003e\n          \u003ch1\u003eHi, I'm stateless :(\u003c/h1\u003e\n        \u003c/div\u003e\n      )\n    }\n```\n\nThis is where React Hooks come in. React Hooks allows you to access state and lifecycle hooks in a React function component.\n\n\n\u003e **Note**: React hooks are still in alpha and should probably not be used in a production environment as the API could still change before it reaches the stable build. You can follow the RFC [here](https://github.com/reactjs/rfcs/pull/68). You can also look at the [documentation](https://reactjs.org/docs/hooks-intro.html) and [FAQs](https://reactjs.org/docs/hooks-faq.html) here.\n\n\n## What about classes in React?\n\nThe React team has stated specifically that they do not intend to replace classes as the Facebook team uses them extensively. Hooks are just another arrow in the quiver of tools available. If anything, Hooks can make it easier to break down complex React components as seen in Dan Abramov’s ReactConf 2018 [demo code presentation](https://twitter.com/prchdk/status/1056960391543062528).\n\nWith React Hooks, you can extract complex components and break them down into smaller functions that are a lot more testable. \n\n\n## Some in-built React Hooks\n\n\u003e **Note:** At the time of writing, the hooks feature was still in alpha so some of the API might have changed in the stable version of React.\n\nNow that we have talked about what React Hooks are, let’s see some of the Hooks that come bundled with React and how we can use them in our React applications.\n\n### The useState hook\n\nLet’s look at a typical React component example:\n\n``` javascript\n    import React from \"react\";\n    import ReactDOM from \"react-dom\";\n    \n    import \"./styles.css\";\n    \n    export class DoStuffButton extends React.Component {\n      constructor(props) {\n        super(props);\n        this.state = { buttonText: \"Do something\" };\n        this.updateButtonText = this.updateButtonText.bind(this);\n      }\n    \n      updateButtonText() {\n        this.setState({ buttonText: \"Loading...\" });\n        window.setTimeout(\n          () =\u003e this.setState({ buttonText: \"Do something\" }),\n          2000\n        );\n      }\n    \n      render() {\n        return (\n          \u003cbutton onClick={this.updateButtonText}\u003e{this.state.buttonText}\u003c/button\u003e\n        );\n      }\n    }\n    \n    export class App extends React.Component {\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cDoStuffButton /\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    const rootElement = document.getElementById(\"root\");\n    ReactDOM.render(\u003cApp /\u003e, rootElement);\n```\n\n→ [**Edit on CodeSandbox**](https://codesandbox.io/s/61j6r8wo4r)\n\n\nIn the code above, we created a `DoStuffButton` component that changes the text when clicked using the state. Then we use the `App` component to render it. Simple stuff. Let’s see though how we can simplify the entire code with React hooks; `useState` specifically.\n\n``` javascript\n    import React, { useState } from \"react\";\n    import ReactDOM from \"react-dom\";\n    \n    import \"./styles.css\";\n    \n    function DoStuffButton() {\n      const [buttonText, setButtonText] = useState(\"Do something\");\n    \n      function updateButtonText() {\n        setButtonText(\"Loading...\");\n        window.setTimeout(() =\u003e setButtonText(\"Do something\"), 2000);\n      }\n    \n      return \u003cbutton onClick={updateButtonText}\u003e{buttonText}\u003c/button\u003e;\n    }\n    \n    function App() {\n      return (\n        \u003cdiv className=\"App\"\u003e\n          \u003cDoStuffButton /\u003e\n        \u003c/div\u003e\n      );\n    }\n    \n    const rootElement = document.getElementById(\"root\");\n    ReactDOM.render(\u003cApp /\u003e, rootElement);\n```\n\n→ [**Edit on CodeSandbox**](https://codesandbox.io/s/v040qpmpn3)\n\n\nWhile the example is not very practical, it does show how you can use the `useState` hook in a React function component. \n\nThe `useState` function returns an array with two elements. The first item being the current state value and the second being a function used to update the state. Logging the function to the console, we see this:\n\n![react-hooks-console](//images.ctfassets.net/1es3ne0caaid/5JQrInltvOioqeIaKA0y8Y/3fb605cb036d69461cce95354a365630/react-hooks-console.png)\n\n### The useEffect hook\n\nYou can read more about the `useState` hook in the [documentation here](https://reactjs.org/docs/hooks-effect.html). However, let’s see how `useState` can be used in code. We will use the same code as we used in the `useState` example with the slight addition of the `componentDidMount` lifecycle method:\n\n``` javascript\n    import React from \"react\";\n    import ReactDOM from \"react-dom\";\n    \n    import \"./styles.css\";\n    \n    export class DoStuffButton extends React.Component {\n      constructor(props) {\n        super(props);\n        this.state = { buttonText: \"Do something\" };\n        this.updateButtonText = this.updateButtonText.bind(this);\n      }\n    \n      // Added this...\n      componentDidMount() {\n        this.setState({ buttonText: 'Set this instead'})\n      }\n    \n      updateButtonText() {\n        this.setState({ buttonText: \"Loading...\" });\n        window.setTimeout(\n          () =\u003e this.setState({ buttonText: \"Do something\" }),\n          2000\n        );\n      }\n    \n      render() {\n        return (\n          \u003cbutton onClick={this.updateButtonText}\u003e{this.state.buttonText}\u003c/button\u003e\n        );\n      }\n    }\n    \n    export class App extends React.Component {\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cDoStuffButton /\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    const rootElement = document.getElementById(\"root\");\n    ReactDOM.render(\u003cApp /\u003e, rootElement);\n```\n\n→ [**Edit in CodeSandbox**](https://codesandbox.io/s/xom5r7jy3w)\n\n\nAbove, we added the `componentDidMount` lifecycle method to the `DoStuffButton` component. This method, as you probably know, will be fired when the component is mounted. So how can React hooks provide us this functionality in a React function component? The `useEffect` hook. Let’s see this in action:\n\n``` javascript\n    import React, { useState, useEffect } from \"react\";\n    import ReactDOM from \"react-dom\";\n    \n    import \"./styles.css\";\n    \n    function DoStuffButton() {\n      const [buttonText, setButtonText] = useState(\"Do something\");\n    \n      useEffect(() =\u003e setButtonText('Set this instead'))\n    \n      function updateButtonText() {\n        setButtonText(\"Loading...\");\n        window.setTimeout(() =\u003e setButtonText(\"Do something\"), 2000);\n      }\n    \n      return \u003cbutton onClick={updateButtonText}\u003e{buttonText}\u003c/button\u003e;\n    }\n    \n    function App() {\n      return (\n        \u003cdiv className=\"App\"\u003e\n          \u003cDoStuffButton /\u003e\n        \u003c/div\u003e\n      );\n    }\n    \n    const rootElement = document.getElementById(\"root\");\n    ReactDOM.render(\u003cApp /\u003e, rootElement);\n```\n\n→ [**Edit in CodeSandbox**](https://codesandbox.io/s/k2y6xpzq0o)\n\n\nAs seen in the example above, we have implemented the `useEffect` hook and it is running when the `DoStuffButton` component is mounted.\n\nAs said in the docs, “you can think of `useEffect` Hook as `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount` combined.”\n\n\n## Rules of React Hooks\n\nAs with most things in life, there are some [rules to consider](https://reactjs.org/docs/hooks-rules.html) when using hooks in your React application. The rules are as follows:\n\n1. Call Hooks exclusively at the top level of your function. Don’t put them in loops, conditionals, or nested functions.\n\n  \u003e By following this rule, you ensure that Hooks are called in the same order each time a component renders. That’s what allows React to correctly preserve the state of Hooks between multiple `useState` and `useEffect` calls. - [Rules of Hooks](https://reactjs.org/docs/hooks-rules.html)\n\n2. Only call Hooks from function components or custom Hooks. Don’t call them from outside a component.\n\n  \u003e By following this rule, you ensure that all stateful logic in a component is clearly visible from its source code. - [Rules of Hooks](https://reactjs.org/docs/hooks-rules.html)\n\n3. When writing custom Hooks, use the `use` keyword as a prefix to the name of the hook. This makes it easy to follow convention and makes it easy to spot Hooks when looking at the code.\n\nAs a side note, there is an [ESLint plugin](https://reactjs.org/docs/hooks-rules.html#eslint-plugin) that enforces these rules. To try it, you can run the following command in your terminal inside the project directory:\n\n```\n    $ npm install eslint-plugin-react-hooks@next \n```\n\n```\n    // Your ESLint configuration\n    {\n      \"plugins\": [\n        // ...\n        \"react-hooks\"\n      ],\n      \"rules\": {\n        // ...\n        \"react-hooks/rules-of-hooks\": \"error\"\n      }\n    }\n```\n\n\u003e The plugin will be added to the Create React App and other similar toolkits by default in the future.\n\n## Creating custom React Hooks\n\nOne more exciting thing about Hooks is custom Hooks. You can create custom Hooks that can be used all around your application. This will reduce duplicated code by a lot when used properly. Custom functions are regular JavaScript functions that have a name prefixed with the `use` keyword and have access to React Hooks.\n\nFor instance, we can have a custom hook defined like this:\n\n``` javascript\n    // File: FriendStatus.js\n    import { useState } from \"react\";\n    \n    export function useFriendStatus({ initialState }) {\n      const [friends, setFriends] = useState(initialState);\n    \n      const setOnlineStatus = (id, friend, online) =\u003e {\n        if (friend.id === id) friend.online = !!online;\n        return friend;\n      };\n    \n      const setFriendOnline = id =\u003e {\n        setFriends(friends.map(friend =\u003e setOnlineStatus(id, friend, true)));\n      };\n    \n      const setFriendOffline = id =\u003e {\n        setFriends(friends.map(friend =\u003e setOnlineStatus(id, friend, false)));\n      };\n    \n      return [friends, { setFriendOnline, setFriendOffline }];\n    }\n    \n    \n    // File: index.js\n    import React, { useState } from \"react\";\n    import ReactDOM from \"react-dom\";\n    \n    import { useFriendStatus } from \"./FriendStatus\";\n    \n    import \"./styles.css\";\n    \n    function FriendListItem() {\n      const [friends, { setFriendOnline, setFriendOffline }] = useFriendStatus({\n        initialState: [\n          { id: 1, name: \"Phoebe\", online: false },\n          { id: 2, name: \"Rachel\", online: false },\n          { id: 3, name: \"Ross\", online: false }\n        ]\n      });\n    \n      return (\n        \u003c\u003e\n          {friends.map(friend =\u003e (\n            \u003cli style={{ color: friend.online ? \"green\" : \"grey\" }} key={friend.id}\u003e\n              {friend.name} \u0026nbsp;\n              \u003cbutton onClick={() =\u003e setFriendOnline(friend.id)}\u003eSet Online\u003c/button\u003e\n              \u003cbutton onClick={() =\u003e setFriendOffline(friend.id)}\u003e\n                Set Offline\n              \u003c/button\u003e\n            \u003c/li\u003e\n          ))}\n        \u003c/\u003e\n      );\n    }\n    \n    const rootElement = document.getElementById(\"root\");\n    ReactDOM.render(\u003cFriendListItem /\u003e, rootElement);\n```\n\n→ [**Edit on CodeSandbox**](https://codesandbox.io/s/wy9jzjlr5w)\n\n\nAbove we have a simple example of how custom hooks can be used in an application. In the `FriendStatus.js` we defined the custom hook and in the `index.js` file, we used the custom hooks and the return value to make up the user interface.\n\n\n## Conclusion\n\nIn this tutorial, we have learned how to use the new React Hooks feature and how it can improve the readability and testability of complex React components. The introduction of React Hooks should not be seen as a reason to stop using classes but as a tool in your bag to make even better apps.\n\nThe source code to the code snippets in this tutorial is available on [GitHub](https://github.com/neoighodaro/react-hooks-samples).","metaTitle":"Getting started with React Hooks","metaDescription":"This tutorial takes a look at an upcoming React feature: React Hooks. It explains their purpose and how to use them and offers an introduction to a few built-in Hooks."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2d6sq13LCcGoS4WUgYEcWa","type":"Entry","createdAt":"2018-12-10T19:54:15.076Z","updatedAt":"2018-12-10T19:54:15.076Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a simple data visualization dashboard with Vue.js and Chart.js","url":"data-visualization-vue-chart","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/simple-chart-vue","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-12-10","description":"This brief tutorial will guide you through creating a simple one-page dashboard. The app is built with Vue, and uses mock data to generate a chart with Chart.js.","prerequisite":"You will need Node 8.9+ and the Vue CLI installed on your machine.","content":"## Introduction\n\nYou all know that data has become an important app of every single app, and even of our lives. Right?!  It’s not interesting to have data and not be able to visualize them in a proper way. That’s why in this tutorial we focus on building a simple but useful data visualization app using Vue.js and Chart.js\n\n\n## Demo \n\nHere is the final result of our app:\nNice isn’t it ?! 😁 \n\n![vue-chart-demo](//images.ctfassets.net/1es3ne0caaid/2tacM4m82QYgC04QQW0uay/8c87e68b0bdd4b50154454ee0944dcba/vue-chart-demo.png)\n\n## Prerequisites\n\nIn order to follow this tutorial, knowledge of JavaScript and Node.js is required. You should also have the following installed on your machine: \n\n- [Node.js (\u003e=8.9.0)](https://nodejs.org)\n- npm (bundled with Node.js installer) or [Yarn](https://yarnpkg.com/)\n- [Vue-CLI](https://cli.vuejs.org/)\n\n\n## Create the project\n\nIn this tutorial, we’ll use the new Vue CLI to scaffold our project. It is such a great tool that enhances the developer productivity. Head over to your terminal and type this command to create your project: `vue create your-project-name`. Feel free to name your project as you want 🙃 .\nYou will be prompted to pick a preset. You can either choose the default preset which comes with a basic Babel + ESLint setup, or select \"Manually select features\" to pick the features you need.\nFor the sake of the tutorial, we’ll choose the default preset as it best fits our needs.\n\n![vue-chart-cli-options](//images.ctfassets.net/1es3ne0caaid/496wKPEi4wo8S8uKssMcK0/ea0ffb818f24f90206ad3f62145da40a/vue-chart-cli-options.png)\n\nAt the end of the process, you should be left with a fresh project. But it’s not all, we also have to install some dependencies required to make our app work well. So run this command in your terminal to download them: \n\n`yarn add vue-chartjs chart.js` \n\nor \n\n`npm install vue-chartjs chart.js --save`\n\n\n## Build the app\n\nNow create a `Chart.js` file and paste this code inside:\n\n``` javascript\n    //../src/Chart.js\n    import {\n        Line,\n        mixins\n    } from 'vue-chartjs'\n    \n    export default {\n        extends: Line,\n        mixins: [mixins.reactiveProp],\n        props: ['chartData', 'options'],\n        data() {\n            return {\n                options: { //Chart.js options\n                    scales: {\n                        yAxes: [{\n                            ticks: {\n                                beginAtZero: true\n                            },\n                            gridLines: {\n                                display: true\n                            }\n                        }],\n                        xAxes: [{\n                            gridLines: {\n                                display: false\n                            }\n                        }]\n                    },\n                    legend: {\n                        display: true\n                    },\n                    responsive: true,\n                    maintainAspectRatio: false\n                }\n            }\n        },\n        mounted() {\n            this.renderChart(this.chartdata, this.options)\n        }\n        \n    }\n```\n\nLet’s have a look at what’s happening here.\nIn the code block above, we imported the Line Chart from vue-chartjs and the mixins module. Chart.js basically does not provide an option for an automatic update whenever a dataset changes but that can be done in vue-chartjs with the help of the following mixins:\n\n1. reactiveProp\n2. reactiveData\n\nThese mixins automatically create `chartData` as a prop or data and add a watcher. If data has changed, the chart will update. You can find more [here](https://github.com/apertureless/vue-chartjs).\n\nAlso, the `this.renderChart()` function inside the `mounted` hook function is responsible for rendering the chart. `this.chartData` is an object containing the dataset needed for the chart and we’ll get that by including it as a prop in the `Visualisation.vue` component we’ll create soon, `this.options` contains the options object that determines the appearance and configuration of the chart.\nNow create the `Visualisation.vue` file and paste this code inside:\n\n``` javascript\n    //../src/components/Visualisation.vue\n    \n    \u003ctemplate\u003e\n              \u003cchart :chart-data=\"datacollection\"\u003e\u003c/chart\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    import Chart from \"./../Chart.js\";\n    export default {\n      components: {\n        Chart\n      },\n      data() {\n        return {\n          datacollection: null\n        };\n      },\n      mounted() {\n        this.fillData();\n      },\n      methods: {\n        fillData() {\n          this.datacollection = {\n            labels: [\n              \"January\",\n              \"February\",\n              \"March\",\n              \"April\",\n              \"May\",\n              \"June\",\n              \"July\",\n              \"August\",\n              \"September\",\n              \"October\",\n              \"November\",\n              \"December\"\n            ],\n            datasets: [\n              {\n                label: \"GitHub Commits\",\n                backgroundColor: \"#f87979\",\n                data: [70, 20, 12, 39, 100, 40, 95, 80, 80, 20, 12, 101]\n              },\n              {\n                label: \"Monthly incomes\",\n                backgroundColor: \"#A5CC82\",\n                data: [205, 408, 188, 190, 58, 200, 190, 400, 164, 254, 290, 201]\n              }\n            ]\n          };\n        },\n      }\n    };\n    \u003c/script\u003e\n    \u003cstyle\u003e\n    \u003c/style\u003e\n```\n    \n\nIn this component, we import our `Chart.js` file; the `chart-data` property of our chart component permits us to provide it with some data to render in the form of a chart.The `datacollection` object is populated with some mock data within the `fillData` method, and as soon as the component is mounted we execute it. It’s that simple 🙃 .\n\nNow import your `Visualisation.vue` component inside the  `../src/App.vue` file and change the `msg` property to the following: *Simple data visualisation with Vue.js and Chart.js* or whatever you want, and comment the img line. After these changes your `App.vue` should look like the following: \n\n``` javascript\n    //../src/components/App.vue\n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003c!-- \u003cimg alt=\"Vue logo\" src=\"./assets/logo.png\"\u003e --\u003e\n        \u003cHelloWorld msg=\"Simple data visualisation with Vue.js and Chart.js\"/\u003e\n        \u003cvisualisation\u003e\u003c/visualisation\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    /* eslint-disable */\n    import Visualisation from './components/Visualisation.vue';\n    import HelloWorld from './components/HelloWorld.vue'\n    \n    export default {\n      name: 'app',\n      components: {\n        Visualisation,\n        HelloWorld\n      }\n    }\n    \u003c/script\u003e\n    \u003cstyle\u003e\n    \n    #app {\n      font-family: 'Avenir', Helvetica, Arial, sans-serif;\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n      text-align: center;\n      color: #2c3e50;\n      margin-top: 60px;\n    }\n    \u003c/style\u003e\n```\n\n\n## Run the app\n\nNow, you can run your app with the following command: \n`yarn run serve` \nor \n`npm run serve`\n\nIf you open your browser at the following location: `localhost:8080` you’ll get a nice working data visualization app like mine: \n\n![vue-chart-demo](//images.ctfassets.net/1es3ne0caaid/2tacM4m82QYgC04QQW0uay/8c87e68b0bdd4b50154454ee0944dcba/vue-chart-demo.png)\n\n\n## Conclusion\n\nI hope this tutorial has been useful to you and you’ll make use the knowledge you’ve acquired in an awesome app of yours. Feel free to grab the source code of the app [here](https://github.com/Ethiel97/simple-chart-vue).","metaTitle":"Build a data visualization page with Vue.js and Chart.js","metaDescription":"This brief tutorial will guide you through creating a simple one-page dashboard. The app is built with Vue, and uses mock data to generate a chart with Chart.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"laaErpOtnUaMO4Mmsu8Es","type":"Entry","createdAt":"2018-11-30T19:34:27.841Z","updatedAt":"2020-04-16T12:45:03.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Linking WordPress and React Native","url":"wordpress-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4j1ezB9yPmUYsSoSUG6eKK","type":"Entry","createdAt":"2018-03-05T16:21:11.688Z","updatedAt":"2018-11-16T09:41:40.564Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Pusher team","url":"pusher-team","email":"team@pusher.com","twitter":"https://twitter.com/pusher","github":"https://github.com/pusher","guestWriter":false}}],"projectRepo":"https://github.com/samuelayo/wordpress_react_by_example","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-11-30","description":"This tutorial discusses the pros and cons of using WordPress and React Native together, before walking through a practical build of a simple blogging app, supported by a WordPress API.","prerequisite":"You will need a WordPress install to work with. You will also need Node 8.3+ and the React Native CLI installed on your machine.","content":"In this tutorial we are going to be building a simple mobile app using React Native called ‘Music News’ which will pull posts from a WordPress website via the WP REST API and display them to the user every time they tap to read more about the news. We’ll start with this and you can dig more and do more by reading and understanding the documentation.\n\nAs mobile developers, integrating a data source is a very important aspect of building mobile apps. Having an organized data source ready for integration would make development easy and also reduce the time taken to build and develop mobile apps.\n\nWordPress as a backend can be very effective if you're building mobile applications that have a lot of consumable content such as a mobile application for a blog, e-commerce website, and so on.\n\nIt can provide standard endpoints to return the data you need and also provides standard documentation for all the endpoints you'll require.\n\n\n## Prerequisites\n\nTo follow through with this lesson, a basic understanding of the following are required:\n\n- WordPress\n- React Native\n\nYou also need to have the following installed:\n\n- PHP 5.6+\n- Node 8.3+\n- React Native CLI\n\n## Getting started\n\n### What is WordPress?\n\nWordPress is the easiest and fastest way to build your website. It's free and open source and it's based off two very popular technologies, PHP and MySQL.\n\nIt is stated that over 29% of websites on the internet are WordPress powered websites.\n\nWordPress is also a content management tool. It allows you to manage content posted on your website easily without the need for you to know anything technical and that's great because you don't have to be a programmer to be able to create and manage your website by yourself.\nThere's a wide variety of websites you can build using WordPress and some of them includes:\n\n- Blogs\n- Resumes\n- Creative portfolios\n- Forums\n- Brand or business websites\n- E-commerce or shopping websites\n\n\nWordPress can be an excellent tool to create your website because:\n\n- **It's free and open source:** that means you'll never need to pay for WordPress and if you're technical, you can also go ahead to add your own feature and functionality to it.\n- **It is easy to install:** you can easily install WordPress and get started as the installation process is fast, easy to understand and not technical so therefore can be done by anyone.\n- **It's extensible:** WordPress can be extended and customized by using themes to change how your website looks. There is a large plugin ecosystem to add custom functionality.\n- **Support:** finding help when you run into issues while setting up or managing your WordPress site is very easy. There's the official support and also so many other WordPress blogs, companies, and communities that provide free and premium support for websites using WordPress.\n\n### What is React Native?\n\nReact Native is a mobile JavaScript framework for building real native mobile applications for iOS and Android. It’s based on React made by Facebook's engineering team which is a JavaScript library for building user interfaces.\n\nUnlike a hybrid application that allows you to write your code in HTML and CSS and then renders it in a native web view container or component, React Native calls Objective-C and Java APIs respectively to render your JSX (a combination of JavaScript and XML-esque markup which is the standard way React applications are written) codes into user interface components on your device.\n\nSome of the known pros of React Native:\n\n- **Cross Platform:** React Native allows you to use the same codebase to compile and build for multiple platforms like Android and iOS. This also eventually saves development cost.\n- **Performance:** applications built using React Native have good performance on the device since they are rendered natively.\n- **Community**: the React and React Native community is solid despite it still being considered an emerging technology. There's a lot of communities and blogs that provide support for React Native issues.\n- **Fast Development:** because of its ability to build cross-platform, it saves time while developing application since you don't need to rewrite any special code for another platform and code re-usability is supported.\n\nSome of the known cons of React Native:\n\n- **It's new:** it's still considered as a new technology and therefore not stable as it comes with the caveats of using an unstable technology\n- **Future Plans**: React Native was built by the engineering team at Facebook and has since led to the concern of copyright and privacy issues and also its future because the project can be discontinued by the team.\n\n### What is an API?\n\nAPI stands for *Application Programming Interface.* It can be seen as a component that allows for interaction between two programming languages, software libraries, software tools, and so on. It also specifies a set of rules that should be followed in order to interact and communicate with underlying data.\n\nAn API could mean something else, depending on the context used and in this context, an API refers to a software component we will interact with to provide us with relevant raw data to be used inside our application.\n\n\n## Configuring WordPress to have an API\n\nTo get started, the first step would be to install the WordPress REST API plugin to our already existing WordPress installation. My WordPress site is on my local device so I'll be installing it there.\n\n- Go to **Plugins** \u003e **Add New** \u003e **Upload Plugin**.\n\n![rn-wordpress-upload-plugin](//images.ctfassets.net/1es3ne0caaid/99Ke8RRnhKIw4SwUqsWSs/e0f7015f349c71db8827ed86acf7956a/rn-wordpress-upload-plugin.png)\n\n- After uploading the plugin, make sure you activate it\n\n![rn-wordpress-install-plugin](//images.ctfassets.net/1es3ne0caaid/GZXGoUrek6qayeiCSeCas/cdeb68d495d4af433394acdf2a61c761/rn-wordpress-install-plugin.png)\n\n- Enable pretty permalinks under **Settings** \u003e **Permalinks** because the REST API uses custom rewrite rules.\n\n![rn-wordpress-permalinks](//images.ctfassets.net/1es3ne0caaid/1CUBJxRksEceAmgyayImiW/e96d507b8b289b8da3889424e6302b4d/rn-wordpress-permalinks.png)\n\n- Visit http://your-domain.com/wp-json/wp/v2/posts/ to make sure everything is working fine. In my own case, I have my WordPress instance installed locally on my device and in yours, visit the host you have your WordPress installed to confirm. You should see a page containing raw data of all your posts on the websites. In order to get the data in the best visual representation, you can install [Postman](https://www.getpostman.com) and use it for all API calls.\n\nWe can now proceed to make more Music News posts on our WordPress normally and then visit the endpoint to see it translated into raw data that can be used in our mobile app.\n\n![rn-wordpress-data](//images.ctfassets.net/1es3ne0caaid/5GlcPOUp3OsEgKIk6SQIIA/7b1d3bf3cd4b08dfe97179d01d33bca8/rn-wordpress-data.png)\n\n## Setting up our React Native app\n\nTo get started on this, you can follow the official docs on how to set up your React  Native environment on your computer. \n\nOnce that is done, we need to initiate and create our application project.\n\n```\n    $ react-native init MusicNews\n```\n\nOnce that is completed, we need to compile and build the application.\n\n```\n    $ react-native run-ios\n    # if using android, you can run the command below\n    $ react-native run-android\n```\n\n### Configuring routing in our app\n\nHow our users navigate around our mobile app is important as developers, we should make navigation as easy and smooth as possible. To configure navigation in our Music News app, we'll use the `react-native-router-flux` library to manage navigation between the screens of our app where all the music news posts are, to the screen where we'll read each individual post.\nReact-native-router-flux is an API on top of React Navigation and it allows you to define routes in one central place for easy management and configuration. To get started with `react-native-router-flux`\n\n```\n    $ npm install react-native-router-flux --save\n```\n\nNow that we have it installed, we go ahead and create our route file and configure all application routing. In the root directory of our Music News app, create a `Routes.js` file and the contents would look like:\n\n``` javascript\n    // Routes.js\n    import React, { Component } from 'react';\n    import {Platform} from 'react-native';\n    \n    // import components from react-native-router-flux\n    import {Router, Stack, Scene} from 'react-native-router-flux';\n    \n    // import our screens as components \n    import Home from './screens/Home';\n    import ViewNews from './screens/ViewNews';\n    \n    export default class Routes extends Component\u003c{}\u003e {\n    \n        render() {\n            return(\n                \u003cRouter\u003e\n                    \u003cStack key=\"root\" hideNavBar={true}\u003e\n                        \u003cScene key=\"home\" component={Home} title=\"Home\" /\u003e\n                        \u003cScene key=\"viewnews\" component={ViewNews} title=\"View News\"/\u003e\n                    \u003c/Stack\u003e\n                \u003c/Router\u003e\n                )\n        }\n    }\n```\n\n- Router is the main routing component.\n- A Stack is a group of Scenes with its own navigator, so you can have multiple stacks for navigating.\n- A Scene is the basic routing component for the main router and all Scene components require a key prop that must be unique.\n- A key prop is used to call the screen transition and must be unique to all screens.\n\nAlso, edit your `App.js` file to look like this:\n\n``` javascript\n    //App.js\n    import React, { Component } from 'react';\n    \n    import {\n      StyleSheet,\n      View,\n      StatusBar,\n    } from 'react-native';\n    \n    import Routes from './Routes';\n    \n    export default class App extends Component\u003c{}\u003e {\n    \n      render() {\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cStatusBar\n              backgroundColor=\"#fff\"\n              barStyle=\"dark-content\"\n            /\u003e\n            \u003cRoutes/\u003e\n          \u003c/View\u003e\n        );\n      }\n    }\n    \n    const styles = StyleSheet.create({\n      container : {\n        flex: 1,\n      }\n    }); \n```\n\n### Designing screens for our app\n\nReact Native offers inbuilt UI components like the `FlatList`, `Modal`, `Slider`, `Text`, and so on. For the design of our home page, we will be using the `Shoutem UI` and `react-native-render-html` to render all the posts fetched from our WordPress backend.\n\nNow that we've successfully configured routing, we need to create the screens as specified in the Routes file. \nWe'll create a screen folder and create the files as seen below:\n\n```\n    $ npm install --save react-native-render-html\n    $ npm install --save @shoutem/ui\n    $ react-native link\n    $ mkdir screens \u0026\u0026 cd screens\n    $ touch Home.js ViewNews.js\n```\n\nCopy the code below and paste into your `/screens/Home.js` \n\n``` javascript\n    //screens/Home.js\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      SafeAreaView,\n    } from 'react-native';\n    \n    import {\n      Subtitle,\n      Screen,\n      Divider,\n      View, \n      Row,\n      ListView,\n    } from '@shoutem/ui';\n    \n    import {Actions} from 'react-native-router-flux';\n    \n    export default class Home extends Component\u003c{}\u003e {\n    \n      home(){\n        Actions.home();\n      }\n    \n      viewNews(newspost){\n        Actions.viewnews({newspost: newspost});\n      }\n    \n      componentWillMount() {\n        this.fetchMusicNews();\n      }\n    \n      fetchMusicNews = async () =\u003e {\n        const response = await fetch(\"http://localhost/wordpress/wp-json/wp/v2/posts/\");\n        const json = await response.json();\n        this.setState({ musicNews: json, isLoadingMusicNews: false });\n      };\n    \n      constructor(props) {\n        super(props);\n        this.renderRow = this.renderRow.bind(this);\n        this.state = {\n          isLoadingMusicNews: true,\n          musicNews: [],\n        }\n      }  \n    \n      renderRow(post) {\n        const regex = /(\u003c([^\u003e]+)\u003e)/ig;\n        let newspost = {\n            postId: post.id,\n            postDate: post.date,\n            postLink: post.guid.rendered,\n            postTitle: post.title.rendered,\n            postExcerpt: post.excerpt.rendered,\n            postContent: post.content.rendered,\n            postCategory: post.categories,\n        }\n        return (\n          \u003cRow style={{height: 80}}\u003e\n            \u003cView styleName=\"vertical stretch space-between\"\u003e\n              \u003cSubtitle \n                numberOfLines={2} \n                newspost={newspost} \n                onPress={() =\u003e this.viewNews(newspost)}\u003e\n                {post.title.rendered.replace(regex, '').toUpperCase()}\n              \u003c/Subtitle\u003e\n            \u003c/View\u003e\n          \u003c/Row\u003e\n        );\n      }\n    \n      render() {\n        const regex = \"/(\u003c([^\u003e]+)\u003e)/ig\"\n        const musicNews = this.state.musicNews;\n        return (\n          \u003cSafeAreaView style={styles.safeArea}\u003e\n            \u003cScreen\u003e\n              \u003cView\u003e\n                  \u003cListView\n                    data={musicNews}\n                    renderRow={this.renderRow}\n                  /\u003e\n              \u003c/View\u003e\n            \u003c/Screen\u003e\n          \u003c/SafeAreaView\u003e\n        );\n      }\n    }\n    \n    const styles = StyleSheet.create({\n      container: {\n        flexDirection: 'column',\n        backgroundColor: '#fff'\n      },\n      safeArea: {\n        flex: 1,\n        backgroundColor: '#fff'\n      },\n    });\n```\n\nIn the `Home.js` file, we import all the necessary components to build our interface. We create routing functions so we can navigate from page to page. The `fetchMusicNews()` is an asynchronous function that allows us to fetch data from our API configured WordPress backend and the `componentWillMount()` allows us to fetch the async data after the screen is rendered. \nThe fetched data is stored in the musicNews state and will be passed to our component during rendering. \n\nIn the `renderRow()` we define a prop that holds data fetched from our WordPress API and we pass it to the `ViewNews` page so we don't have to do a network fetch to get the same data on the next screen. The data fetched is rendered as a list view using the `ListView` component imported from our UI library and the data is also rendered accordingly. \n\nOur `render()` function renders the screen and we use the `SafeAreaView` component to handle the screens of newer device screen like the ones of the iPhone X and higher so the screen doesn't overlap. Our styles are also defined for different components and the applied to style individual components based on the defined rules.\n\nCopy the code below and paste into your `/screens/ViewNews.js` \n\n``` javascript\n    // screens/ViewNews.js\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      SafeAreaView,\n      ScrollView,\n      Dimensions,\n    } from 'react-native';\n    \n    import {\n      Tile,\n      Title,\n      Screen,\n      Divider,\n      View, \n      Overlay\n    } from '@shoutem/ui';\n    \n    import {Actions} from 'react-native-router-flux';\n    import HTML from 'react-native-render-html';\n    \n    export default class ViewNews extends Component\u003c{}\u003e {\n    \n      home(){\n        Actions.reset('home');\n        Actions.home();\n      }\n    \n      constructor(props) {\n        super(props);\n        this.state = {\n          newspost: [],  \n        }\n      }\n      render() {\n        const news = this.state.newspost;\n        const regex = /[!@#$%^\u0026*\u003c\u003e0-9;]/g;\n        console.log(\"newspost: \"+this.props.newspost);\n        return (\n          \u003cSafeAreaView style={styles.safeArea}\u003e\n            \u003cScreen style={{ flex: 1 }}\u003e\n              \u003cScrollView\u003e\n              { \n                \u003cView\u003e\n                  \u003cTile\u003e\n                      \u003cOverlay styleName=\"image-overlay\"\u003e\n                        \u003cTitle style={{color: '#fff', fontWeight: '800'}} styleName=\"md-gutter-bottom\"\u003e{this.props.newspost.postTitle.replace(regex, \"\").toUpperCase()}\u003c/Title\u003e\n                        \u003c/Overlay\u003e\n                    \u003c/Tile\u003e\n                  \u003cScreen style={{paddingLeft: 15, paddingRight: 15, paddingTop: 15, paddingBottom: 15, width:375}} styleName=\"paper\"\u003e\n                    \u003cHTML \n                      tagsStyles={{ \n                        body: {fontSize: 20}, \n                        p: {fontSize: 20, fontWeight: \"normal\"}, \n                        strong: {fontSize: 20,}, \n                        blockquote: {fontSize: 20}, \n                        a: {fontSize: 20, color: \"#000\"}, \n                        em: {fontSize: 20,}, \n                        img: {height: 250, width: 350}, \n                      }}\n                      styleName=\"paper md-gutter multiline\" \n                      html={this.props.newspost.postContent} \n                      imagesMaxWidth={Dimensions.get('window').width} \n                      ignoredStyles={['width', 'height', 'video']}\n                      onLinkPress={(evt, href) =\u003e this.onLinkPress(href)}\n                    /\u003e\n                    \u003cDivider styleName=\"line\" /\u003e\n                  \u003c/Screen\u003e\n                \u003c/View\u003e\n              }  \n              \u003c/ScrollView\u003e\n            \u003c/Screen\u003e\n    \n          \u003c/SafeAreaView\u003e\n        );\n      }\n    };\n    \n    const styles = StyleSheet.create({\n      container: {\n        flex: 1, // 1:1\n        flexDirection: 'column',\n        backgroundColor: '#fff'\n      },\n      safeArea: {\n        flex: 1,\n        backgroundColor: '#fff'\n      },\n    });\n```\n\nIn the `ViewNews.js` file, we also import all the necessary components to build our interface. We create routing functions so we can navigate from page to page. The regex variable is a regular expression. We use it to remove some unwanted characters and symbols from our WordPress data.\n\nIn the `render()` function, we go ahead to fetch the data we stored in props from our `Home.js` and render it using our HTML component. The HTML component is used to render the data because the news item body sent from our WordPress API is sent with an HTML format and we can perform some extra functions like setting image size and dimensions, ignore styles, etc.\n\n## Using WordPress data\n\nTo build and compile our code:\n\n```\n    $ react-native run-ios\n    # If you want to build for android,you can use the command below\n    $ react-native run-android\n```\n\n\u003e If you are running this on your local host, chances are that you would get a network error. This is because `localhost` and `127.0.0.1`  would refer to the internal React native app. You should replace them with the public IP of your machine or tunnel your localhost via [ngrok](http://ngrok.io)\n\nIf you want to tunnel your WordPress app via ngrok, you can take the following steps:\n\n- Update ngrok (Ctrl+u when ngrok is running)\n- Adding the following two lines to `wp-config`:\n    define('WP_SITEURL', 'http://' . $_SERVER['HTTP_HOST']);\n    define('WP_HOME', 'http://' . $_SERVER['HTTP_HOST']);\n- Installing [https://wordpress.org/plugins/relative-url/](https://wordpress.org/plugins/relative-url/) in WordPress\n\nAfter the build is successful, your application should look like\n\n- Home Screen\n\n![rn-wordpress-home-screen](//images.ctfassets.net/1es3ne0caaid/5pGUcRLT20Gu0oAwE2UGgG/495aa971b6e8b3751dc15e6ab458bf70/rn-wordpress-home-screen.png)\n\n- Post Screen\n\n![rn-wordpress-post-screen](//images.ctfassets.net/1es3ne0caaid/QInEIkVm0MwcCeo2eSCiI/96fc05a31128c9fc16d54f7304aa73e1/rn-wordpress-post-screen.png)\n\n## Conclusion\n\nWe can see how easy it is to use our WordPress data in our mobile application using the WP REST API Plugin. Our data can be integrated with any mobile development framework and web development framework also.\n\nOur Music News app is simple right now, but you can go ahead to add some more styling and explore the Plugin documentation more to be able to build complex and robust applications on top of your WordPress data.\n\nThe code base to this tutorial is available in a publicly hosted [GitHub](https://github.com/samuelayo/wordpress_react_by_example) repository. Feel free to experiment around with it.","metaTitle":"Linking WordPress and React Native","metaDescription":"This tutorial discusses the pros and cons of using WordPress and React Native together, before walking through a practical build of a simple blogging app, supported by a WordPress API."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4RlSnfGfXiQIUMMAqGgSaC","type":"Entry","createdAt":"2018-11-28T18:35:16.185Z","updatedAt":"2018-11-28T18:35:16.185Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to build an API with authentication in Adonis","url":"api-authentication-adonis","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/adonis_auth-api","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2AjUjeRuA4oUAcYYI6ck6i","type":"Entry","createdAt":"2018-09-28T17:24:15.392Z","updatedAt":"2018-09-28T17:24:15.392Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Adonis.js","url":"adonis-js","type":"library","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2018-11-28","description":"This tutorial demonstrates how quick it is to add authentication to an API built with Adonis.js. You will create a simple API for a blog site, featuring registration and login functionality.","prerequisite":"You will need Node 8+ and Postman installed on your machine.","content":"## Introduction\nIn this tutorial, we will be building a simple API, and we will add authentication to it. Thanks to Adonis.js this can be handled easily for this awesome framework comes with JWT authentication out of the box. If you don't know what I mean by JWT, you can head over to [this link](https://jwt.io/introduction/) to grasp more info about it. Now it's time to jump into this tutorial. We'll build an API for a blog posts and so only authenticated users can perform some defined operations over posts.\n\n## Prerequisites\n\nIn order to follow this tutorial, knowledge of JavaScript and Node.js is required. You should also have the following installed on your machine: \n\n- [Node.js(\u003e=8.0.0)](https://nodejs.org)\n- NPM(bundled with Node.js installer) or [Yarn](https://yarnpkg.com/)\n\n## Set up the Adonis project\n\nFirst open your terminal and type this command to install the Adonis CLI and create a new Adonis app:  \n\n```\n    # if you don't have Adonis CLI installed on your machine. \n      npm install -g @adonisjs/cli\n      \n    # Create a new adonis app and move into the app directory\n    $ adonis new adonis_auth-api \u0026\u0026 cd adonis_auth-api\n```\n\nNow start the server and test if everything is working fine: \n\n```\n    adonis serve --dev\n    \n    2018-09-23T12:25:30.326Z - info: serving app on http://127.0.0.1:3333\n```\n\nOpen your browser and make a request to: http://127.0.0.1:3333. You should see the following:\n\n![adonis-default](//images.ctfassets.net/1es3ne0caaid/39Ys5rxeDmc20kAi60osSG/8d8e345481c3da07b0b55cb40e8b5301/adonis-default.png)\n\n## Set up the database and create the migration\n\nCreate a database.sqlite file in the database directory, and amend the .env file like this:\n\n```\n    DB_CONNECTION=sqlite\n    DB_DATABASE=/absolute/path/to/database.sqlite\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_USER=your_database_user\n    DB_PASSWORD=your_dtabase_password\n```\n\nOpen your terminal and run this command to generate our `Post` model as well as its corresponding controller and migration file which will be used to build the schema of our posts table: \n\n```\n    adonis make:model Post -mc\n```\n\nInside your post migration file copy and paste this code:\n\n``` javascript\n    //../database/migrations/*_.user.js\n    'use strict'\n    \n    const Schema = use('Schema')\n    \n    class PostSchema extends Schema {\n        up() {\n            this.create('posts', (table) =\u003e {\n                table.increments()\n                table.string('title')\n                table.string('description')\n                table.integer('user_id').unsigned();\n                table.foreign('user_id').references('Users.id').onDelete('cascade');\n                table.timestamps()\n            })\n        }\n    \n        down() {\n            this.drop('posts')\n        }\n    }\n    \n    module.exports = PostSchema\n```\n\nThis code is pretty similar to what we are accustomed to in Laravel migration. You can see we defined our PostSchema table fields as: \n\n- title\n- price\n- description\n- user_id\n\nThe `increments()`  will create an `id` field with `Auto Increment` and set it as `Primary key`. The `timestamps()` will create the `created_at` and `updated_at` fields respectively. We also set a foreign key on the `user_id` field to ensure that the user submitting post does exist.\n\nNow if you run this command:  `adonis migration:run` in your terminal it will create the posts, and users (which migration is defined by default) tables in your database.\nWe need to define some relations on our models to make things easier for us to handle. Let's say a user can have one or many posts, and a single post belongs to a particular user. Let's translate that into code:\n\nAdd this function to your post model\n\n``` javascript\n    //../app/Models/Post.js\n        user() {\n            return this.belongsTo('App/Models/User');\n        }\n```\n\nand this one to your user model\n\n``` javascript\n        //../app/Models/User.js\n        posts() {\n            return this.hasMany('App/Models/Post')\n        }\n```\n\nThis has been very simple to achieve :). We're done with that.\n\n\n## Build our authentication workflow\n\nOur users need to register and to get authenticated in order to perform any sensible operation on our data. When they register, our API will generate an authorization token which he can append to his future requests to manipulate our posts data. Basically we'll build a register and a login function, so we need to create our authentication controller.\n\nFirst make this change in your `auth.js` file to tell our app to use `jwt` as our authenticator.\n\n``` javascript\n    //../config/auth.js\n    authenticator: 'jwt',\n```\n\nThen head over to your terminal and type this command to create your controller:\n\n```\n    adonis make:controller --type http AuthController\n```\n\nThe flag `--type` is to specify the type of controller we want to create, in our case it is an HTTP controller.\nNow copy and paste this code inside your  `AuthController`  file.  \n\n``` javascript\n    //../app/Controllers/Http/AuthController.js\n    \n    'use strict'\n    const User = use('App/Models/User');\n    \n    class AuthController {\n    \n      async register({request, auth, response}) {\n    \n        let user = await User.create(request.all())\n    \n        //generate token for user;\n        let token = await auth.generate(user)\n    \n        Object.assign(user, token)\n    \n        return response.json(user)\n      }\n    \n      async login({request, auth, response}) {\n    \n        let {email, password} = request.all();\n    \n        try {\n          if (await auth.attempt(email, password)) {\n            let user = await User.findBy('email', email)\n            let token = await auth.generate(user)\n    \n            Object.assign(user, token)\n            return response.json(user)\n          }\n    \n    \n        }\n        catch (e) {\n          console.log(e)\n          return response.json({message: 'You are not registered!'})\n        }\n      }\n      async getPosts({request, response}) {\n        let posts = await Post.query().with('user').fetch()\n    \n        return response.json(posts)\n      }\n      \n    }\n    \n    module.exports = AuthController\n```\n\nAs expected we have our two functions. \nThe `register` function creates a new user with the data sent in the request and generates an authorization token for that user, and returns the fresh created user as the response.\n\nOur second function `login` checks first if the user information is valid, then it grasps all their data and also generate an authorization token for them, and returns the logged in user.\n\nNote that the generated token will be appended to our future requests as I said above to help authenticate the user and help them perform the intended action on our data only if they are authenticated and recognized by our API system.\n\nNow let's set up our routes. Go to your `routes.js`  file and paste the following code inside:\n\n``` javascript\n    //../start/routes.js\n    const Route = use('Route')\n    \n    Route.post('/register', 'AuthController.register')\n    Route.post('/login', 'AuthController.login')\n    \n    Route.put('/posts/:id', 'PostController.update').middleware('auth')\n    Route.delete('posts/id', 'PostController.delete').middleware('auth')\n    Route.post('/posts', 'PostController.store').middleware('auth')\n    Route.get('/posts', 'PostController.getPosts');\n```\n\nOur two first routes are for authentication purposes, one for user registration and the other for the user signin. \nThen we define some routes our users can make requests to in order to manipulate our posts’ data as you can notice :). We add the `auth`  middleware to some our routes that require user authentication because the operation intended is quite sensible, and we need to ensure that the user is authorized by the system to perform that operation.\n\n## Define our PostController\n\nThis controller will be responsible of handling requests over our posts’ data. In your terminal, type this command to create your controller:\n\n```\n    adonis make:controller --type http PostController\n```\n\nThe `PostController` is now generated. It’s time to define its functions, open the file and paste the following block of code inside the body of your controller class:\n\n``` javascript\n    //../app/Controllers/Http/PostController.js\n    'use strict'\n    const Post = use('App/Models/Post');\n    \n    class PostController {\n      async getPosts({request, response}) {\n        let posts = await Post.query().with('user').fetch()\n    \n        return response.json(posts)\n      }\n    \n      async create() {\n      }\n    \n      async store({request, auth, response}) {\n    \n        try {\n          // if (await auth.check()) {\n          let post = await auth.user.posts().create(request.all())\n          await post.load('user');\n          return response.json(post)\n          // }\n    \n        } catch (e) {\n          console.log(e)\n          return response.json({message: 'You are not authorized to perform this action'})\n        }\n    \n      }\n    \n      async update({auth, params, response}) {\n    \n        let post = await Post.find(params.id)\n        post.title = request.input('title')\n        post.description = request.input('description');\n    \n        await post.save()\n        await post.load('user');\n    \n        return response.json(post)\n      }\n    \n      async delete({auth, params, response}) {\n    \n        await Post.find(params.id).delete()\n    \n        return response.json({message: 'Post has been deleted'})\n      }\n    \n    }\n    \n    module.exports = PostController\n```\n\nLet’s explain those four functions defined above:\n\n- `getPosts` fetches all posts from database and returns them as the response\n\n\n- `store` pulls the requests data to create a new post, associates the current authenticated user as the author, and returs the fresh created post with its associated user.\n\n\n- `update` updates a post by fetching its `id` with info pulled from the request’ object and returns it\n\n\n- `delete` at last, finds a post by given its `id` and deletes from the data, then it returns a message.\n\n## Test your API with Postman\n\nNow let's test the API with Postman. If you don't have Postman, you can get it [here](https://www.getpostman.com/apps). No don't thank me, it's free 😉 .\n\nFirst, you have disable the CSRF protection in order to send API requests without problem. Head over to the `shield.js` file, and make this change:\n\n``` javascript\n    //../config/shield.js\n    ...,\n    csrf: {\n        enable: false,\n       ...\n      }\n    } \n```\n\nIf you don’t know at all how to use Postman, head over to [this link](https://learning.getpostman.com/docs/postman/launching_postman/sending_the_first_request) to get more insights, and then come back to the tutorial.\n\nSay we want to get posts from our database, we type  `localhost:3000/posts` to fetch all our posts and select the **GET** method on the postman UI, and hit the **Send** button to send your request. You’ll get your posts if they are or an empty array if the database is empty.\n\nIf you want to register to the system, select the **POST** method and enter your credentials(username,email,password) in the body tab, check them to take them into account, and hit the **Send** button to send the request. The response should be a user object containing your authentication token.\n\nAs you can see in the images below, we've tested some of our routes, let's say the important ones `register`, `login`, `posts`. And you can see in the images below that our API is working fine and token is generated on user registration and login.\n\n![adonis-auth-postman-1](//images.ctfassets.net/1es3ne0caaid/61H3wmxVTyKaE4CeYMMW4e/47ade56fb2b583dfa82e72275416388b/adonis-auth-postman-1.png)\n![adonis-auth-postman-2](//images.ctfassets.net/1es3ne0caaid/2QpDDNAzLGmUisaUg6w6w0/d2b8df2e06bcf8b0f3a84b299e926a3e/adonis-auth-postman-2.png)\n![adonis-auth-postman-3](//images.ctfassets.net/1es3ne0caaid/4fnJR2OpiEEeOoYEMAwmOc/92bfd977fcb3694d537f0a47f4c2577e/adonis-auth-postman-3.png)\n\n\n## Conclusion \n\nThrough this tutorial you've learnt how you can build an API with authentication for your users. I hope this has been useful to you and will help you understand how you can integrate this kind of system into an existing application of yours. Feel free to get the source code of the project on [GitHub.](https://github.com/Ethiel97/adonis_auth-api)","metaTitle":"How to build an API with authentication in Adonis","metaDescription":"This tutorial demonstrates how quick it is to add authentication to an API built with Adonis.js. You will create a simple API for a blog site, featuring registration and login functionality."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2n1TsVYmkoOIaKuKcU2omC","type":"Entry","createdAt":"2018-11-27T21:13:58.814Z","updatedAt":"2018-11-27T21:13:58.814Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Understanding HTTP response status codes in frontend applications - Part 2: Implementations","url":"http-response-codes-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6MrlBAzD6oCY8M2kauU6uS","type":"Entry","createdAt":"2018-09-28T18:57:54.184Z","updatedAt":"2018-11-01T14:55:35.762Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Abati Adewale","url":"abati-adewale","email":"acekyd01@gmail.com","twitter":"https://twitter.com/ace_kyd","github":"https://github.com/acekyd","guestWriter":true}}],"projectRepo":"https://github.com/acekyd/http-status-codes","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-11-27","description":"This two part series provides an introduction to HTTP status codes. In part two, build a demo app with a Node.js backend, and test the different status codes using a basic HTML frontend and Postman.","prerequisite":"You will need Node 8+ and Postman installed on your machine.","content":"In this tutorial, we will do three things to illustrate how these status codes work: \n\n1. Build a simple Node.js backend using Express to send data.\n2. Write simple HTML pages and make API calls using JavaScripts fetch API.\n3. Use [Postman](https://www.getpostman.com/) for some of our tests\n\nIf you are not familiar with Node.js, do not worry. We are not building anything complex.\n\nIn the [last tutorial](https://pusher.com/tutorials/http-response-codes-part-1) of this series, we did an extensive deep dive into HTTP status codes and what they mean. If you are a backend developer, it is likely to alter how you build applications that other people will interact with. If you are a frontend developer, you will now understand how best to use the data sent to you from an API or even the backend of the application you are building (say you are not using APIs).\n\n\n## Prerequisites\n1. You have read the first part of this tutorial\n2. You understand HTML and JavaScript\n\n\n## The Node.js backend\n\nWe are going to specify simple one liners on our Node backend so we can keep this guide simple. \nFirst, we are going to create a new folder for our project called `http-response-codes` and navigate into the created folder. We then proceed to create a new Node project:\n\n```\n    $ npm init -y\n```\n\n\u003e This will create a new project with the default settings which is fine for this project\n\nInstall dependencies\n\n```\n    $ npm install --save express body-parser\n```\n\n### Create the server\n\nWe have all we need to begin. Create a file `index.js` in the root directory of the project. This is where we will specify our Node server.\n\nOpen the file and add the following:\n\n``` javascript\n    // index.js\n    /* A simple API skeleton in Node.js using express */\n    \n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const app = express();\n    \n    app.use(bodyParser.urlencoded({ extended: false }));\n```\n\nWe have imported the dependencies we need for the project. Now, let’s define some routes.\n\nAdd the routes for success status codes:\n\n``` javascript\n    // index.js\n    /** The success status codes */\n    \n    // 200 Ok\n    app.get('/', (req, res) =\u003e res.status(200).sendFile(`${__dirname}/html/register.html`));\n    app.get('/update', (req, res) =\u003e res.status(200).sendFile(`${__dirname}/html/update.html`));\n    app.get('/bad-request', (req, res) =\u003e res.status(200).sendFile(`${__dirname}/html/bad-request.html`));\n    app.get('/complete', (req, res) =\u003e res.status(200).sendFile(`${__dirname}/html/complete.html`));\n    app.get('/old-registration', (req, res) =\u003e res.status(200).sendFile(`${__dirname}/html/old-register.html`));\n    app.get('/old-reg-fail', (req, res) =\u003e res.status(200).sendFile(`${__dirname}/html/old-reg-fail.html`));\n    app.get('/user/john-new.html', (req, res) =\u003e res.status(200).send({message : \"This is John's new page\"}));\n    app.get('/user/jane-new', (req, res) =\u003e res.status(200).send({message : \"This is Jane's new page\"}));\n    app.get('/thank-you-page', (req, res) =\u003e res.status(200).send({message : \"Thank you for registering!\"}));\n    \n    // 201 Created\n    app.post('/register', (req, res) =\u003e {\n              // logic to save to database\n              res.status(201).send({message : 'registrations compelete'})\n    });\n    app.post('/login', (req, res) =\u003e {\n              // logic to login\n              res.status(201).send('You have been logged in')\n    });\n    // 204 No Content\n    app.put('/update', (req, res) =\u003e {\n              // logic to update database record\n              res.status(204).end()\n    });\n```\n\nWe have defined a few routes to allow us test out our endpoints. We will test the `success status codes` with our browser so we can see the entire process the connection takes when we make it. Let’s worry about this later.\n\nAdd the routes for redirection status codes:\n\n``` javascript\n    // index.js\n    /** The redirection status codes */\n    \n    // 301 Moved Permanently\n    app.get('/user/john', (req, res) =\u003e {\n              res.set('location', '/user/john-new.html')\n              res.status(301).send()\n    });\n    // This redirection may fail because the browser might change the request method to GET\n    app.post('/old-registration-fail', (req, res) =\u003e {\n              res.set('location', '/register')\n              res.status(301).send()\n    });\n    \n    // 302 Found\n    app.get('/user/jane', (req, res) =\u003e {\n              res.set('location', '/user/jane-new')\n              res.status(302).send()\n    });\n    \n    // 303 See Other\n    app.post('/complete-registration', (req, res) =\u003e {\n              res.set('location', '/thank-you-page')\n              res.status(303).send()\n    });\n    \n    // 307 Temporal Redirect\n    app.post('/old-registration', (req, res) =\u003e {\n              res.set('location', '/register')\n              res.status(307).send()\n    });\n    \n    // 308 Permanent Redirect\n    app.post('/old-login', (req, res) =\u003e {\n              res.set('location', '/login')\n              res.status(308).send()\n    });\n```\n\nAdd the routes for client error status codes:\n\n``` javascript\n    // index.js\n    /** Client error status codes */\n    \n    // 400 Bad Request\n    app.post('/bad-request', (req, res) =\u003e {\n            res.status(400).send({message : \"You are missing vital credentials\"})\n    });\n    // 401 Unauthorized\n    app.get('/user', (req, res) =\u003e {\n            res.status(401).send({message : \"You need to login to view this\"})\n    });\n    // 403 Forbidden\n    app.get('/super-secret', (req, res) =\u003e {\n            res.status(403).send({message : \"You are forbidden from seeing this\"})\n    });\n    // 405 Method Not Allowed\n    app.all('/only-put', (req, res) =\u003e {\n            if(req.method == \"PUT\") res.status(204).end()\n            else res.status(405).send({message : \"Please use put\"})\n    })\n```\n\nAdd the routes for server error status codes:\n\n``` javascript\n    // index.js\n    /** Server error status codes */\n    \n    // 500 Internal Server Error\n    app.post('/500', (req, res) =\u003e {\n            res.status(500).send({message : \"I failed. I'm sorry\"})\n    });\n    // 501 Unauthorized\n    app.patch('*', (req, res) =\u003e {\n            res.status(501).send({message : \"I will patch no such thing\"})\n    });\n    // 503 Service Unavailable\n    app.get('/503', (req, res) =\u003e {\n            res.status(503).send({message : \"I had to take a break. Getting too old for this\"})\n    });\n    // 505 Method Not Allowed\n    app.all('/http2', (req, res) =\u003e {\n            if(req.httpVersion == \"2.0\") res.status(200).send({message : \"You get a response. She gets a response. They get a response... Everybody gets a response\"})\n            else res.status(505).send({message : \"Only http2 baby\"})\n    })\n```\n\nWe put it last because we want to catch everything else not defined. We will also start the server.\n\n``` javascript\n    // index.js\n    \n    // 404 Not Found\n    app.all('*', (req, res) =\u003e {\n            res.status(404).send({message : \"This resource was not found\"})\n    })\n    \n    app.listen(3000, () =\u003e console.info('Application running on port 3000'));\n```\n\nDo not get overwhelmed by the many lines of code above. They are all routes that return a message when you hit them. We do not have any complex implementation so that we can keep this guide simple for everyone to follow.\n\n## The HTML and JavaScript frontend\n\nFor this section, we are going to create a directory — `html` in the root directory of our project. Inside that directory, we will make all the HTML files we referenced in our code above. \n\nCreate the directory:\n\n```\n    $ mkdir html\n```\n\nCreate the register file:\n\n``` html\n    \u003c!-- html/register.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"\u003e\n      \u003ctitle\u003eRegister Page\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003ch2\u003ePlease ignore the lack of styling\u003c/h2\u003e\n      \u003cform id=\"form\"\u003e\n        \u003cinput type=\"text\" name=\"name\"\u003e\n        \u003cinput type=\"email\" name=\"email\"\u003e\n        \u003cinput type=\"password\" name=\"password\"\u003e\n        \u003cinput type=\"submit\" name=\"submit\"\u003e\n      \u003c/form\u003e\n      \u003cscript type=\"text/javascript\"\u003e\n        // handle form submission\n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nLet’s add the script to handle form submission:\n\n``` javascript\n    // html/register.html\n    [...]\n    let form = document.getElementById('form')\n    let data = {\n      name : form.elements.name.value,\n      email : form.elements.email.value,\n      password : form.elements.password.value\n    }\n    form.addEventListener('submit', (e) =\u003e {\n      e.preventDefault()\n      fetch('http://localhost:3000/register', {\n        method: 'POST',\n        body: JSON.stringify(data), \n        headers:{\n          'Content-Type': 'application/json'\n        }\n      }).then(res =\u003e {\n        console.log(res) // log response object\n        return res.json() // return json data from the server\n      })\n      .then(response =\u003e alert(response.message))\n      .catch(error =\u003e console.error('Error:', error))\n    })\n    [...]\n```\n\nWe are using JavaScript’s Fetch API to submit the form to our server. Then we are logging the response object we got, before returning the data sent from the server in `json` format. The reason for logging the response is so we can look at the console to view what happened behind the scenes. You will notice that for any redirect response sent from the server, `fetch` will redirect automatically, and send us a result. If you do not look inside, you may never know.\n\nWe chain another `then` whenever we return `json` data as fetch will resolve the data into a promise, which is handled by the next `then` we chained. You will see it at work shortly. \n\nFor now, let’s make the remaining pages which follow a similar pattern.\n\nCreate the update file:\n\n``` html\n    \u003c!-- html/update.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"\u003e\n      \u003ctitle\u003eRegister Page\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003ch2\u003ePlease ignore the lack of styling\u003c/h2\u003e\n      \u003cform id = \"form\"\u003e\n        \u003cinput type=\"text\" name=\"name\" value=\"AceKyd\"\u003e\n        \u003cinput type=\"email\" name=\"email\" value=\"ace@kyd.com\"\u003e\n        \u003cinput type=\"password\" name=\"password\" value=\"acekyd\"\u003e\n        \u003cinput type=\"submit\" name=\"submit\"\u003e\n      \u003c/form\u003e\n      \u003cscript type=\"text/javascript\"\u003e\n        let form = document.getElementById('form')\n        let data = {\n          name : form.elements.name.value,\n          email : form.elements.email.value,\n          password : form.elements.password.value\n        }\n        form.addEventListener('submit', (e) =\u003e {\n          e.preventDefault()\n          fetch('http://localhost:3000/update', {\n            method: 'PUT',\n            body: JSON.stringify(data), \n            headers:{\n              'Content-Type': 'application/json'\n            }\n          }).then(response =\u003e {\n            if(response.status == 204) alert(\"Data updated\")\n          })\n          .catch(error =\u003e console.error('Error:', error))\n        })\n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nCreate the old-register file:\n\n``` html\n    \u003c!-- html/old-register.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"\u003e\n      \u003ctitle\u003eRegister Page\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003ch2\u003ePlease ignore the lack of styling\u003c/h2\u003e\n      \u003cform id=\"form\"\u003e\n        \u003cinput type=\"text\" name=\"name\"\u003e\n        \u003cinput type=\"email\" name=\"email\"\u003e\n        \u003cinput type=\"password\" name=\"password\"\u003e\n        \u003cinput type=\"submit\" name=\"submit\"\u003e\n      \u003c/form\u003e\n      \u003cscript type=\"text/javascript\"\u003e\n        let form = document.getElementById('form')\n        let data = {\n          name : form.elements.name.value,\n          email : form.elements.email.value,\n          password : form.elements.password.value\n        }\n        form.addEventListener('submit', (e) =\u003e {\n          e.preventDefault()\n          fetch('http://localhost:3000/old-registration', {\n            method: 'POST',\n            body: JSON.stringify(data), \n            headers:{\n              'Content-Type': 'application/json'\n            }\n          }).then(res =\u003e {\n            console.log(res)\n            return res.json()\n          })\n          .then(response =\u003e alert(response.message))\n          .catch(error =\u003e console.error('Error:', error))\n        })\n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nCreate the old-reg-fail file:\n\n``` html\n    \u003c!-- html/old-reg-fail.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"\u003e\n      \u003ctitle\u003eRegister Page\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003ch2\u003ePlease ignore the lack of styling\u003c/h2\u003e\n      \u003cform id=\"form\"\u003e\n        \u003cinput type=\"text\" name=\"name\"\u003e\n        \u003cinput type=\"email\" name=\"email\"\u003e\n        \u003cinput type=\"password\" name=\"password\"\u003e\n        \u003cinput type=\"submit\" name=\"submit\"\u003e\n      \u003c/form\u003e\n      \u003cscript type=\"text/javascript\"\u003e\n        let form = document.getElementById('form')\n        let data = {\n          name : form.elements.name.value,\n          email : form.elements.email.value,\n          password : form.elements.password.value\n        }\n        form.addEventListener('submit', (e) =\u003e {\n          e.preventDefault()\n          fetch('http://localhost:3000/old-registration-fail', {\n            method: 'POST',\n            body: JSON.stringify(data), \n            headers:{\n              'Content-Type': 'application/json'\n            }\n          }).then(res =\u003e {\n            console.log(res)\n            return res.json()\n          })\n          .then(response =\u003e alert(response.message))\n          .catch(error =\u003e console.error('Error:', error))\n        })\n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nCreate the old-login file:\n\n``` html\n    \u003c!-- html/old-login.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"\u003e\n      \u003ctitle\u003eRegister Page\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003ch2\u003ePlease ignore the lack of styling\u003c/h2\u003e\n      \u003cform id=\"form\"\u003e\n        \u003cinput type=\"email\" name=\"email\"\u003e\n        \u003cinput type=\"password\" name=\"password\"\u003e\n        \u003cinput type=\"submit\" name=\"submit\"\u003e\n      \u003c/form\u003e\n      \u003cscript type=\"text/javascript\"\u003e\n        let form = document.getElementById('form')\n        let data = {\n          name : form.elements.name.value,\n          password : form.elements.password.value\n        }\n        form.addEventListener('submit', (e) =\u003e {\n          e.preventDefault()\n          fetch('http://localhost:3000/old-login', {\n            method: 'POST',\n            body: JSON.stringify(data), \n            headers:{\n              'Content-Type': 'application/json'\n            }\n          }).then(res =\u003e {\n            console.log(res)\n            return res.json()\n          })\n          .then(response =\u003e alert(response.message))\n          .catch(error =\u003e console.error('Error:', error))\n        })\n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nCreate the bad-request file:\n\n``` html\n    \u003c!-- html/bad-request.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"\u003e\n      \u003ctitle\u003eRegister Page\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003ch2\u003ePlease ignore the lack of styling\u003c/h2\u003e\n      \u003cform id = \"form\"\u003e\n        \u003cinput type=\"text\" name=\"name\" value=\"AceKyd\"\u003e\n        \u003cinput type=\"email\" name=\"email\" value=\"ace@kyd.com\"\u003e\n        \u003cinput type=\"password\" name=\"password\" value=\"acekyd\"\u003e\n        \u003cinput type=\"submit\" name=\"submit\"\u003e\n      \u003c/form\u003e\n      \u003cscript type=\"text/javascript\"\u003e\n        let form = document.getElementById('form')\n        let data = {\n          name : form.elements.name.value,\n          email : form.elements.email.value,\n          password : form.elements.password.value\n        }\n        form.addEventListener('submit', (e) =\u003e {\n          e.preventDefault()\n          fetch('http://localhost:3000/bad-request', {\n            method: 'POST',\n            body: JSON.stringify(data), \n            headers:{\n              'Content-Type': 'application/json'\n            }\n          }).then(res =\u003e {\n            console.log(res)\n            return res.json()\n          }).then(res =\u003e alert(res.message))\n          .catch(error =\u003e console.error('Error:', error))\n        })\n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nCreate the complete file:\n\n``` html\n    \u003c!-- html/complete.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"\u003e\n      \u003ctitle\u003eRegister Page\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003ch2\u003ePlease ignore the lack of styling\u003c/h2\u003e\n      \u003cform id = \"form\"\u003e\n        \u003cinput type=\"text\" name=\"name\" value=\"AceKyd\"\u003e\n        \u003cinput type=\"email\" name=\"email\" value=\"ace@kyd.com\"\u003e\n        \u003cinput type=\"password\" name=\"password\" value=\"acekyd\"\u003e\n        \u003cinput type=\"submit\" name=\"submit\"\u003e\n      \u003c/form\u003e\n      \u003cscript type=\"text/javascript\"\u003e\n        let form = document.getElementById('form')\n        let data = {\n          name : form.elements.name.value,\n          email : form.elements.email.value,\n          password : form.elements.password.value\n        }\n        form.addEventListener('submit', (e) =\u003e {\n          e.preventDefault()\n          fetch('http://localhost:3000/complete-registration', {\n            method: 'POST',\n            body: JSON.stringify(data), \n            headers:{\n              'Content-Type': 'application/json'\n            }\n          }).then(res =\u003e {\n            console.log(res)\n            return res.json()\n          }).then(res =\u003e alert(res.message))\n          .catch(error =\u003e console.error('Error:', error))\n        })\n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNow, we are ready to test 😁.\n\nRun our application:\n\n```\n    $ node index\n```\n\n## Testing the endpoints on the browser starting with the 2xx endpoints\n\nWe are going to see a series of tests done on this endpoint and see how they all work together. The screenshots below would show two browser windows side by side to show the different stages of the request, responses and additional details as necessary. Shall we? \n\n### The homepage\n\nVisit `localhost:3000/`  in the browser to access the homepage, which matches our `app.get('/')` route as declared.\n\n![http-codes-demo-1](//images.ctfassets.net/1es3ne0caaid/5FUWwJelDUauYwEmOYmMO4/8ff23a8eac69a4c08903701387632a9f/http-codes-demo-1.png)\n\nNotice the status code? That is the expected result when a get request is completed successfully. Be it an API call or direct browser request. When you check the result of every browser page we load, you will see that it the `Status Code` will be `200 OK`.\n\n### Submitting the registration form\n\nHere we enter data into the form and click on the **Submit** button to make a POST request to our route as defined `app.post('/register')`\n\n![http-codes-demo-2](//images.ctfassets.net/1es3ne0caaid/115FClLlIsuwkQSeOkQEO2/4dc3236ff9a9fe880c75721523090ce3/http-codes-demo-2.png)\n\nLook at the data returned from each request. Now, we can proceed to tell our users they have been successfully registered and their accounted created.\n\n### Making an update\n\nHere we visit `localhost:3000/update` matching the `app.put('/update')` route, which loads up a pre-filled form to simulate editing an existing resource on the server. \n\n![http-codes-demo-3](//images.ctfassets.net/1es3ne0caaid/6SHru5iW0o4yaqiqOWwY60/74203a3f5e441e1e15de02d95b17770f/http-codes-demo-3.png)\n\nAs is expected from a `PUT` request, there should be no response data once we send a `204`. With such a request, do not expect anything new to be created on the server, as it will return the resource you gave to it. \n\nA good question is *“What if we are changing a profile image? Wouldn’t we need the server to send us the URL it saved the image with so we can load the image?”* Since you are creating a resource, you should send such a request over `POST`, even though it will update a record already existing on your system. \n\n\n## Now to 3xx endpoints\n\n### Send a request to an old registration link\n\nVisit `localhost:3000/old-registration` matching  `app.get('/old-registration')` to send a request to `app.post('/old-registration')`.\n\n![http-codes-demo-4](//images.ctfassets.net/1es3ne0caaid/1UYifcemw8wuca0WmOcwWe/4a270ffca7d7891cff784b65b59b6c5c/http-codes-demo-4.png)\n\n![http-codes-demo-5](//images.ctfassets.net/1es3ne0caaid/x5zyhSQIhiEgEwMYKkQAI/cebd135144253904ae930e8d0d8ae8d2/http-codes-demo-5.png)\n\nYou can learn now that most of `ajax` clients like `fetch` will perform redirection automatically. Good thing our browser records activities, if not, we may not have seen how this worked. Notice also that they tell you if they were redirected or not.\n\nWhatever it means for you at this point may not be clear to me. But if you keep records of changes for future requests (say your application learns and autoupdates it’s information), you can now note this change.\n\n### Send a request to the old registration link bound to fail\n\nVisit `localhost:3000/old-registration` matching  `app.get('/old-reg-fail')`.\n\n![http-codes-demo-6](//images.ctfassets.net/1es3ne0caaid/10t7J7wiX26oSuwuu4gwGg/35bd3a6f090ca5994c627e10f734224b/http-codes-demo-6.png)\n\nYou see that we used `301` for this redirection and the browser changed the request method from `POST` to `GET`. Of course, our `register` endpoint does not have a `GET` method.\n\n### Let’s get Jane’s profile\n\nVisit `localhost:3000/user/jane` matching  `app.get('/user/jane')`.\n\n![http-codes-demo-7](//images.ctfassets.net/1es3ne0caaid/647ELz8fYWAycCu6YeCOGa/5590c7da563e5e5003a6e97977a0cd75/http-codes-demo-7.png)\n\nThe server found the profile quite alright, but we have to go somewhere else to see it. There could be so many reasons for this. I can have a public link for viewing profiles for a class of users on my application. The endpoint might have very limited data based on the user level.\n\nBe that as it may, you should know how many legs your application is taking. Also, notice the URL changed in the URL bar 😃.\n\n\n\u003e Try and get John’s profile.\n\n### Let’s complete registration\n\nVisit `localhost:3000/complete` matching  `app.get('/complete')` \n\n![http-codes-demo-8](//images.ctfassets.net/1es3ne0caaid/5tIlSuYpBmuQ4WyGSAeQ42/db91dcdb97d9351db770faf75a827b49/http-codes-demo-8.png)\n\nWe were taken to a completely new page. Now, it is up to you to change the URL of your browser as you display the content. Can you see how this will help you create richer experience for your applications?\n\n\n## Now to 4xx endpoints\n\n### Making a bad request\n\nVisit `localhost:3000/bad-request` matching  `app.get('/bad-request')`.\n\n![http-codes-demo-9](//images.ctfassets.net/1es3ne0caaid/wBCLo0wRG0WCYAmyquSUI/ac6394cc879bcdd00c9758cc4c403657/http-codes-demo-9.png)\n\nMy favorite status code 😃. This tells you, me, the user that we supplied wrong credentials and the request will not go through. You can send a nicer message to your users to tell them they sent wrong credentials.\n\nFor the rest of the tests we will do, we will use Postman.\n\n### Let’s access all user details we should only see if we are logged in\n\nHere, we will be making a `GET` request to `http://localhost:3000/user` to match  `app.get('/user')`. We will also need to add a `Content-Type` header set to `application/json` to specify what the content type of the returned content actually is. And in this case, JSON is returned.\n\n![http-codes-postman-1](//images.ctfassets.net/1es3ne0caaid/5h7uPiC0Q8yCAUeOwkIEwM/2ddc82de8823e7ed8081d36a6214de7b/http-codes-postman-1.png)\n\nLook at the `Status` and then the `Body` of the response.\n\n### Let’s access a super secret page\n\nHere, we will be making a `GET` request to `http://localhost:3000/super-secret` to match  `app.get('/super-secret')`.\n\n![http-codes-postman-2](//images.ctfassets.net/1es3ne0caaid/6jcRqmvm8wIuSgIWC0SUEW/ab4be80ba7fe44faf0b64dd75bb379eb/http-codes-postman-2.png)\n\n### Let’s access the endpoint that accepts only PUT requests\n\nHere, we will be making requests to  `http://localhost:3000/only-put`  with multiple request methods.\n\n![http-codes-postman-3](//images.ctfassets.net/1es3ne0caaid/2Tu9rAwMYEo2q0SWKmIE6/60fd248e0409a811b4372dc96043b6ae/http-codes-postman-3.png)\n\n![http-codes-postman-4](//images.ctfassets.net/1es3ne0caaid/CBRgydEREGQsmCg6quQsQ/7858bcb7d96b8cfeca7660b01e43776d/http-codes-postman-4.png)\n\nWe already tried `GET` and `POST` and we still get `405 Method Not Allowed`. Let’s try `PUT`\n\n![http-codes-postman-5](//images.ctfassets.net/1es3ne0caaid/2I8ZSMUj9SCwqMWUyYiS2G/0d8eefdf1b3dd926998d3384150d0669/http-codes-postman-5.png)\n\nAnd we get `204` which means our request was successful.\n\n### Let’s try an arbitrary endpoint and see if our 404 works\n\nHere, we will be making a random `GET` request to `http://localhost:3000/hello-mike` that will be matched by our generic route – `app.all('*')`.\n\n![http-codes-postman-6](//images.ctfassets.net/1es3ne0caaid/lK1czNimbuWcYq6GWeeS2/e3e10c47f728af6eb2a57ef3d21d95f9/http-codes-postman-6.png)\n\nYep. There you have it.\n\n## Finally to 5xx endpoints\n\n### The 500 error\n\nHere, we will be making a `POST` request to `http://localhost:3000/500` to match  `app.post('/500')`.\n\n![http-codes-postman-7](//images.ctfassets.net/1es3ne0caaid/6e4lePXMHuMwYQqM8sKyko/4c46628f3ad3a44de2d543150e303e84/http-codes-postman-7.png)\n\n### Try patch method that we did not implement\n\nHere, we will be making a random `PATCH` request to `http://localhost:3000/501` that will be matched by our generic route – `app.patch('*')`.\n\n![http-codes-postman-8](//images.ctfassets.net/1es3ne0caaid/26SWGLGY3iUYIeOAsW8OS2/82791817ae55d9d38fe7793d6f81f02e/http-codes-postman-8.png)\n\nHow you handle a `501` will depend on what the developer making the API \n\n### Let’s make a request when the server is not available\n\nHere, we will be making a `GET` request to `http://localhost:3000/503` to match  `app.get('/503')`.\n\n![http-codes-postman-9](//images.ctfassets.net/1es3ne0caaid/1CwzLTCMqMQAMO0AM422a0/75b5ef5f927a0f72f3729c55229329f2/http-codes-postman-9.png)\n\n### The unsupported HTTP version\n\nHere, we will be making a `GET` request to `http://localhost:3000/http2` that will be matched by our route – `app.all('http2')`.\n\n![http-codes-postman-10](//images.ctfassets.net/1es3ne0caaid/5xI2eXkI5UG2u8mmcSc088/19cba5be57f22ef2b18f78b707bd97de/http-codes-postman-10.png)\n\nAnd finally, we have come to the end of tests… Phew!\n\n## Conclusion\n\nThis has been an interesting journey learning about status codes and what each mean. We tested very common endpoints to see what the response on them will look like. \n\nNow, you can build better applications both on the backend and frontend and create more engaging experiences for your users.\n\nCheckout the code to the project on [GitHub](https://github.com/acekyd/http-status-codes).","metaTitle":"Understanding HTTP response status codes - Part 2","metaDescription":"This two part series provides an introduction to HTTP status codes. In part two, build a demo app with a Node.js backend, and test the different status codes using a basic HTML frontend and Postman."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2wCqXMshxSOQWsGMEuS8oG","type":"Entry","createdAt":"2018-11-26T22:22:23.485Z","updatedAt":"2018-11-26T22:22:23.485Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Understanding HTTP response status codes in frontend applications - Part 1: Status codes","url":"http-response-codes-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6MrlBAzD6oCY8M2kauU6uS","type":"Entry","createdAt":"2018-09-28T18:57:54.184Z","updatedAt":"2018-11-01T14:55:35.762Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Abati Adewale","url":"abati-adewale","email":"acekyd01@gmail.com","twitter":"https://twitter.com/ace_kyd","github":"https://github.com/acekyd","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2018-11-26","description":"This two part series provides an introduction to HTTP status codes. In part one, get an overview of how the server and frontend communicate, and read a brief summary of the most important status codes.","content":"In this tutorial, we will explore what status code means and how to use them. We will build a simple [Node.js](https://nodejs.org) backend to simulate all the most common status codes of all we will cover. This will help us in two ways:\n\n1. Consuming APIs when building applications, especially JavaScript powered apps.\n2. Building RESTful APIs that provide as much accurate response as possible at all times.\n\n\nHTTP status codes are the defacto language for describing results of the requests browsers (clients) make to servers. Browsers know what the status codes mean, so they know how to present information to you after you make a request.\n\nWhen you think about it, it makes sense to have defined ways for the server to tell the browser the outcome of a request it made. There are different kinds of browser and different kinds of server configurations to suit specific application needs. If there was no standard communication pattern… anarchy!\n\n## Prequisites\n\n1. Basic knowledge of JavaScript\n2. Have Node installed on your computer \n  - Minimum version [Node v8.0.0](https://nodejs.org/en/blog/release/v8.0.0/)\n\n\n## How the browser and server talk to each other\n\nBefore you ask “Really? This? Am I three years old?”, I’d urge you to pay attention here, especially if you have not had to build APIs before. Understanding how the browser talks to the server (client-server relationship) in a network will help you make sense of why each status code is important. \n\nServers are like a central location for data (say a restaurant) and clients are the computers that consistently interact with that data (say hungry customers). Different clients, something in thousands or hundreds of thousands, make requests to the server for data. The server does a number of things:\n\n1. First identify what type of client by parsing the header of the request that tells the IP address of the computer, the type of web browser used, type of device used, the preferred language the client wants the data in, the format the data should be in, among other things.\n  This is why when you visit a site like [Google](https://google.com) with a different language set on your browser, it returns the page in that language. This is how [Twitter](https://twitter.com) or [Facebook](https://facebook.com) is able to redirect you to [m.twitter.com](https://m.twitter.com) or [m.facebook.com](https://m.facebook.com) when you visit with a mobile phone.\n2. Confirm you can access the content you are requesting (there are different authorization levels it can use, depending on the kind of content you are requesting).\n3. Process the request.\n4. Return the data to you.\n\nThe server has to do all of that in split seconds so it can respond to other users who are waiting. \n\nThe client on the other hand sends a request along with appropriate headers to properly identify who it is and how it wants to receive the information it has requested. If it is trying to request gated information, it has to present some form of access token/key or be able to show it has authorization to access the data it is requesting. The client is usually not very patient as it is pressed for time and resources. If it does not hear from the server after some time, it closes the connection (just like a hungry customer walks away when they have waited too long to be served).\n\nHowever, when the server responds, it sends some code to inform the client of the status of its request. Was it successful? Should the client give it more time? Did it fail? Could it not understand the request? Did the client make a mistake in the request it sent? These are the things the server clarifies with status codes.\n\nOf course, client server communication is a lot more complex than that, and there are different tools and protocols that come into play, but that is beyond the scope of this article. What we have looked at now is sufficient to understand the basic status codes we will encounter more frequently when we interact with public APIs.\n\n\n\u003e Clients are not just web browsers. Clients can be computer terminals that make [CURL](https://en.wikipedia.org/wiki/CURL) requests or web/mobile applications that interact with APIs to get data or even a device like a refrigerator or TV that is connected to the internet.\n\n\n## The informational status codes — 1xx\n\nWhat do they do? Short answer — provide information to the browser. They communicate that the request was received and understood, and in most cases, the browser should wait a little as the server processes the information. \n\n### 100 Continue\n\nWhen a client gets this status code, it means the server has received their request header and has accepted the request, so the client can go ahead and send the request body. This is most commonly used when a client wants to send content that is large. It will send an `Expect: 100 - continue` to the server and when the server sends back a response with status `100 continue`, it proceeds to send the body.\n\nThe status `100 continue` received from the server means “**You can now send more data or ignore if you are done sending”.** In some cases, a client might send `Expect: 100 - continue` along with the request body. This is most common with `curl` requests as it is the default mode `curl` communicates with servers.\n\n### 101 Switching Protocols\n\nA client can send a request to the server to switch the communication protocol using the `Upgrade` header. This can be say switching from `HTTP/1.1` to `HTTP/2` or switching to [WebSocket](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API). The server will response with a response code `101` and an `Upgrade` response header with information on the protocol it upgraded to.\n\n\n\u003e You can read more about protocol upgrade on [MDN Web Docs: Protocol upgrade mechanism](https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism).\n\n\n## The success status codes — 2xx\n\nThese are the status codes we encounter every single day. You load a website and it comes up? One of these status codes was used. You submit a form and get the congratulations message? One of these status codes was used. They are used to indicate that our request was successful \n\n### 200 Ok\n\nThis response status code indicates that our request was successful. This is used mostly when we request for data from the server and it responds with the data. When you visit the link to a webpage, the browser sends a request to the server to give it the contents of that webpage. \n\nThe server will respond with a status `200 ok` and a header specifying the type of content returned (`text/html`, `multimedia`, etc) and a body containing the content itself.\n\n\n\u003e Many requests for data like visiting a URL are usually `GET` requests. `GET` requests are, well, used to get data from the server.\n\n### 201 Created\n\nThis is the response code the client gets after sending resource (data) to the server. This resource is stored by the server and upon successfully storing it, the `201 Created` response code is returned with the newly created resource as the request body. It can be form submissions, file uploads or other related activities. \n\n\n\u003e Requests that create resources on the server are usually `POST` requests. `POST` requests post resources to the server. In a situation when a `PUT` request (which is used to update already stored resource) creates the a resource for the first time, a `201 Created` can be returned as well.\n\n### 202 Accepted\n\nThis is not a very common response code sent by servers. It is used in cases where a request by the client has been received but the server has sent it in for processing. It is a non-committal response in that when the server eventually comes around to process the request, it may or may not act upon it based on if the client has the right to make that request or if the server has the means to handle it. Also, it means the server will not be sending any response afterwards.\n\nThis can be used in cases when a request is transferred to another server or when a request is batched to be proceed at another time. In such a scenario, the server ought to return an indicator of the current status of the request and a way for the client to monitor the processing of the request.\n\n### 203 Non-Authoritative Information\n\nThis is also not a very common response code. It signifies that the response the client is getting is not exactly as it was when sent by the server. It can mean that the response has been modified as it passed through a proxy tunnel or some other related third party. \n\nThe data eventually returned might be a subset or superset of the data returned from the server.\n\n### 204 No Content\n\nThis response code tells the client (in the case of a user agent) not to change the current document presented to the user. Header information might be updated, but no new content will be sent along.\n\nThis response can be sent after a client makes a request updating a resources on the server and the server does not need to return any data since nothing new was created. The server must never return a response body when it sends a `204 - No Content` status code.\n\n### 205 Reset Content\n\nThis response status tells the client to refresh the document sample.\n\n### 206 Partial Content\n\nThis response code indicates that the request has succeeded and the response body has the requested ranges of data. The server only sends ranges of data when the client sets the `Range` header in it’s request. Bear in mind that the client must never request a range if it cannot handle the range.\n\nIf there is only one range, the `Content-Type` of the whole response is set to the type of the document, and a `Content-Range` is provided. If several ranges are sent back, the `Content-Type` is set to `multipart/byteranges` and each fragment cover one range, with `Content-Range` and `Content-Type` describing it.\n\nWhen a range is requested by the client, the server returns `206 Parital Content` and never returns a `200 Ok`. Medias like large videos and images are good examples of data return as a range.\n\n\n## Redirections — 3xx\n\nYou see these response codes, you need to know them very well if [Search Engine Optimization (SEO)](https://searchengineland.com/guide/what-is-seo) means anything to you and your product. These status codes deal with redirection when a client tries to access a resource. \n\n### 300 Multiple Choices\n\nThis status code means the request has more than one possible response. The client is to choose one of them. There is no standardized way of choosing so this is rarely used. In case you see it, look for the `Location` header which usually contains the servers preferred choice.\n\n### 301 Moved Permanently\n\nThis is arguably the most important of the redirection status codes. When not used properly, it can interfere with your SEO and bury your website forever. It can also created very bad user experience and increase the churn you experience on your website.\n\nThis tells the client that the resource they seek has been moved permanently, and then presents the URL to the new location of the resource. This does two things: tells the client where to find the resource and also helps the client know where to go the next time they need the resource. The new location for the resource is specified by the `Location` header.\n\n\n\u003e 301 redirects might require the method (and the body) of the original required not to be altered when the redirection is performed. However, not all client side browsers adhere to this directive. According to [Mozilla Developer Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/301), it is therefore recommended to use the `301` code only as a response for `GET` or `HEAD` methods and to use the `308` `Permanent Redirect` for `POST`methods instead, as the method change is explicitly prohibited with this status\n\n### 302 Found\n\nThis is the direct sibling of `301` 😁. It is used for temporary redirect. Client browsers will redirect to the specified resource but indexing systems like search engines will not change their reference to the resource as the redirect is only temporary. \nAnd like `301`, client browsers might change the body/method of the request, so when you want to temporarily redirect a `POST`, use `307` instead.\n\n### 303 See Other\n\nWell, we will call this the cousin to `301` and `302` 😂. Simply put, this status code tells the client that the redirect doesn’t link to the newly uploaded resources but to another page, like a thank you page or status monitor page. It is sent as a result of a `PUT` or `POST` request and the method to use for the redirections is always `GET`. I told you this was the cousin.\n\n### 304 Not Modified\n\nWhen you have previously fetched a cacheable content, this status code comes in handy. It tells the client that the resource they are trying to fetch has not changed, so they should retain the copy they have. This will come in handy if you are building a system like a newsfeed and you always want to check for new updates. It will prevent you fetching old data and reloading the client browser unnecessarily.\nA nice option would be to use [Pusher](https://pusher.com)’s realtime API.\n\n### 307 Temporary Redirect\n\nWe have already talked about this earlier that it will be okay to skip it right? Well, this response code is sent by the server when it intends to explicitly tell the client to maintain the method originally used for the request. It works just like `302` except it adds a very clear directive not to change anything. Best thing to use in case you have stubborn clients who always change request methods on redirect 🙄.\n\n### 308 Permanent Redirect\n\nThe 308 Permanent Redirect is the direct sibling of `307`. And it is the strict version of `301`.\n\n## Client Error — 4xx\n\nThese are the status codes used to inform the client that it made a mistake in the request it made. Was a required field not supplied? Did they send the wrong data format? Are they not authorized to access the resource they are looking at? Do they need to confirm their identity? All of these things are handled by these status codes.\n\nNow, let’s dig into them.\n\n### 400 Bad Request\n\nI have to admit, this is my favorite status code 😂. Every time I get slammed with `400 Bad Request` red error on my console, I first look up and ask “What kind of life did I choose?” before I proceed to investigate it.\n\nBad requests occur when the client sends a request with either incomplete data, badly constructed data or invalid data. Many times, it could be the fault of the developer who did not specify properly what kind of data they expect. Be that as it may, it happens because the data you sent to a request is incorrect.\n\n### 401 Unauthorized\n\nThis response in simple terms means the client needs to authenticate itself before it completes the request. Authentication here could be providing `access-token` in the case of `OAuth` or `Authorization` token in the case of `jwt` based auth system or even API keys. \n\nAnything that the server needs to identify who is making a request has to be sent for the request to be completed.\n\n### 403 Forbidden\n\nThis error occurs when a client tries to access a resource it is not permitted to. This is not the same as `401 Unauthorized` (just see them as fraternal twins 😃). An authenticated client can be `Forbidden` from accessing a resource just as an unauthenticated client can.\n\nMany times, the client only gets `403 Forbidden` after it has been authenticated, as the system will have to ensure who the client is first before forbidding or granting them access to the resources.\n\n### 404 Not Found\n\nIf you have used the web frequently, you will definitely have run into this, especially `404 Page Not Found`. In API terms, it means the resource you are trying to access was not found or the endpoint itself does not exist. A description of the error might accompany the error, but do not count on this in most cases.\n\n`404` does not specify if the resource is missing or has been permanently removed (deleted). In a case where the resource has been removed permanently, the server should return `410 GONE`.\n\n### 405 Method Not Allowed\n\nThis response code results when you try to access a resource designed for only `GET` requests through a `POST` request and vice versa. Some resources can be accessed via any request method (`GET`, `POST` or `HEAD`) and in such a case, you will not get the `405 Method Not Allowed` response code.\n\nStandard practice is that when a server sends a `405` response code, it includes a list of methods supported for accessing the resource in question.\n\n### 406 Not Acceptable\n\nThis is a rarely used error code. It indicates that the server cannot produce a response that matches the request the user made, and the server is not willing to send a default response. You can learn more about it on [Mozilla Developer Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/406).\n\n### 407 Proxy Authentication Required\n\nThis will be the twin of `401 Unauthorized`. The only difference is that authentication needs to be done by a proxy.\n\n### 408 Request Timeout\n\nThis response code is sent by the server when it wants to close an idle connection opened by the client. The client may not have completed its request and may be taking so much time doing it. \n\nThe standard is that a server will send a close `Connection` header in the response field along with the response code.\n\n\n\u003e In many cases, the server might shut down the connection without sending any response code.\n\n### 409 Conflict\n\nThis response is sent by the server when a request conflicts with the servers internal operations. A good example of such conflict is trying to update a resource on the server with an older version.\n\n### 410 Gone\n\nWe already mentioned that this status code shows that the resource the client wishes to access has been permanently deleted.\n\n### 411 Length Required\n\nThe server returns this status code if it requires that `Content-Length` header is set along with the request, and the client did not set it.\n\n### 412 Precondition Failed\n\nThis happens when the client is being too demanding and the server does not have that kind of strength 🙄. So, clients can send conditional requests to servers, which is excellent. If the conditions are met, the server will response with data. If the conditions are not met, the server will just respond with `412 Precondition Failed`.\n\nWe will discuss more on conditional requests when we get to `428 Precondition Required`.\n\n### 413 Payload Too Large\n\nThe request data is too big for the server to handle 😃. In more technical terms, the size of the payload may have exceeded the limit specified by the server.\n\n### 414 URI Too Long\n\nJust shorten the URL and all will be fine. Realistically, this only occurs when you have a lot of things appended to a URL when constructing a `GET` request with a lot of parameters.\n\n### 415 Unsupported Media Type\n\nThis is what it is. The server does not support the media type requested by the client.\n\n### 416 Range Not Satisfiable\n\nThe server can’t fulfill the `Range` specified in the request header. It could mean the `Range` is requesting more data than the server can give. Think `array index out of bounds` and you will get the picture.\n\n### 417 Expectation Failed\n\nWhen the server cannot meet the expectation contained in the `Expect` request header field, it sends this response.\n\n### 418 I'm a teapot\n\nI honestly do not know why this was ever made, but it is a response code for April Fool’s day prank. It means the server refuses to brew coffee because it is a tea pot 🤣. You can read more about this prank on [WikiPedia](https://en.wikipedia.org/wiki/Hyper_Text_Coffee_Pot_Control_Protocol).\n\n### 419 Authentication Timeout\n\nAt the moment, this is only obtainable with [Laravel](https://laravel.com) applications. It means the `csrf` token of the application has expired. The `csrf` token in Laravel is sent with every form submission or request to resources protected by authentication and more.\n\n### 426 Upgrade Required\n\nThe server returns this response code when it is unwilling to communicate with the client via a certain protocol, but is willing to continue communication if they change protocols. Yep, I agree… These servers are just full of themselves.\n\nThe server sends an `Upgrade` header with this response to provide a list of protocols it is willing to use in continuing communication.\n\n### 428 Precondition Required\n\nThis response is sent by the server when it requires a request to be conditional. A conditional request is a request where the result might change based on a validation of the resource requested. Conditional requests are useful in scenarios like downloads where a client can pause and resume at any time.\n\nFor such requests, a required precondition header like `If-Match` is required. If the precondition header does not match what the server has, then a `412 Precondition Failed` is sent instead.\n\n### 429 Too Many Requests\n\nThis status code is sent when a user has sent too many requests than allowed in a given period of time. It is common with APIs that limit usage by time period.\n\n### 431 Request Header Fields Too Large\n\nThe server is just unwilling to process the request because it feels the headers of the request are too large. That is all.\n\nThe client can reduce the headers and try the request again.\n\n### 451 Unavailable For Legal Reasons\n\nThe resource the client has requested cannot be served for some legal reasons. Serving it to that user will mean breaking the law. \n\nIn practice, you will rarely encounter most of the error codes, but it is good you know them. They become more common with increasing complexity of the applications you build.\n\n## Error — 5xx\n\nThese errors occur due to no fault of the client. The servers are to be blamed here and there is nothing the client can do to get their desired response.\n\n### 500 Internal Server Error\n\nWhen the server processes the request of the client and runs into a situation it cannot handle, it sends `500 Internal Server Error`. These issues can be caused by many things. A service required by the server may not be available. The developer who build the application may have used a package or library and forgot to download it on the server. The developer might have buggy code and the server ran into it. It could be anything preventing the server from completing it’s operation.\n\n### 501 Not Implemented\n\nThe server sends this code when you have made a request to it with a request method it does not know or have the capacity to resolve. Servers are required to implement only `GET` and `HEAD` methods, so you might send a `PUT` or `PATCH` request and the server will not be able to handle it.\n\nThis is not the same as `405 Method Not Allowed` because with `405` the server clearly understands the request but cannot respond to it until the method is changed. With `501` the server cannot understand the method used and is therefore incapable of providing any response.\n\n### 502 Bad Gateway\n\nThe server sends this code when it is acting as a proxy server and/or fetching data from an external resource and it gets an invalid response from that external source.\n\n### 503 Service Unavailable\n\nThis is a common server error code that you can get. It means the server might be down and therefore, is not ready handle the request at that time. This might be a result of an ongoing maintenance or an overload on the server.\n\nThis is a temporal situation, so if you implement caching in your application, you might want to not cache this response.\n\n### 504 Gateway Timeout\n\nThe direct sibling to `502` 😃. The server sends this response code when it is acting as a gateway and the external resource does not provide it with a response in time.\n\n### 505 HTTP Version Not Supported\n\nThis status code indicates the HTTP version the client used for the request is not supported by the server. Think making a `HTTP/1.1` call to a server when the server only deals in `HTTP/2` 😎.\n\n### 511 Network Authentication Required\n\nThis status code means the client needs to get authenticated on the network it is trying to access before access can be granted. This happens when trying to access a network via proxy, so it can be argued to be a distant cousin of `401 Unauthorized`. \n\nWhere there is a difference is that `401` tells the client directory it needs to be authenticated but `511` means the proxy network cannot access the external resource because of lack of proper authorization.\n\n\n## Conclusion\n\nIf you followed this tutortial, then you my friend are more than ready to build very amazing web applications. A proper understanding of these status codes makes all the difference in the user experience of your application. Understanding them means you can efficiently design your application to handle errors or issues that may arise gracefully.\n\nIf you are a developer building an API, you can more easily send the appropriate responses for the scenarios your users encounter as they use your application. This is equally very important in building useful applications.\n\nIn the next tutorial, we will look it is consuming APIs and experiencing the status codes we have received.","metaTitle":"Understanding HTTP response status codes - Part 1","metaDescription":"This two part series provides an introduction to HTTP status codes. In part one, get an overview of how the server and frontend communicate, and read a brief summary of the most important status codes."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2PtceOqYSQkIem4A2YGoUE","type":"Entry","createdAt":"2018-11-20T21:22:55.289Z","updatedAt":"2018-11-20T21:22:55.289Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Advanced Vue.js: demystify mixins and custom directives ","url":"vuejs-mixins-custom-directives","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/vue_mixins_custom_directives","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-11-20","description":"This tutorial looks at some of the advanced features of Vue.js: mixing and custom directives. It provides a conceptual overview and code samples, to allow you to try out the functionality. Learn how mixins allow you to share functionality between components and use custom directives to hook into the DOM.","prerequisite":"Some knowledge of Vue.js is required.","content":"## Introduction\n\nYou have been using Vue.js for a while and you are wondering what are mixins and custom directives? Well, in this tutorial I’ll explain to you these advanced Vue.js concepts and how you can use them to build awesome applications. This tutorial intends to help you acquire advanced knowledge of the Vue.js framework.\n\n\n## Prerequisites\n\nIn order to properly follow this tutorial, a strong knowledge of Vue.js is required. And to get to that point you must have a good experience of JS(ES6).\n\n\n## Mixins\n\nMixins? You may have heard of Vue components and used in  your applications, if so you should know that they are great for reusing an entire custom element, but we can’t use just a portion of the component. To share functionality among multiple components, we have to use\nmixins. Saying that Vue mixins basically allow us to share common functionality between our components.  This can be useful for implementing a standard method that is shared, ensuring an event or action is taken during a lifecycle event, or setting default values for the data to help other components. Now let’s see how we can create and use them.\n\n### Creating mixins\n\n To create a mixin, we must  declare an options object that has implementations for the\noptions we want to share. So, if we are going to share data with our components, our mixin will implement a data property. This goes for the rest of the options that we want to share.\nTake a look to this piece of code:\n\n``` javascript\n    var baseMixin = {\n     data() {\n     return { text: 'default text' };\n    },\n     mounted() {\n      this.log(`My text when Created: ${this.text}`);\n    },\n     methods: {\n      log: function(...params) {\n      console.log(...params);\n    }\n    },\n    template: `\n      \u003cdiv\u003e\n        \u003ch1\u003e{{text}}\u003c/h1\u003e\n      \u003c/div\u003e\n      `\n    }\n```\n\nWe create a simple mixin that contains a data property of text set to `default text`, a lifecycle hook to call its log method when created, a log method, and a template to render our `text` data. \nEasy right ?! 😉  This is pretty similar to how we define components, but here we just define the functionality we want to share.\n\n### Using mixins\n\nTo use our new mixin, we will need to register it for use with our component. We register our mixin with the component by providing an option property named  `mixins`  that has an array of the value with our mixins in the array.\n\n``` javascript\n    Vue.component('component-one', {\n      mixins: [baseMixin]\n    });\n```\n\nNow, If we use `component-one` in an app, it will show our `\u003ch1\u003e` with the word `default text`, as seen in the image below:\n\n![advanced-vue-demo-1](//images.ctfassets.net/1es3ne0caaid/1HXMDq3A8gOK6UGS2uwOEs/c9d8a9408372c5b146437abe1143792a/advanced-vue-demo-1.png)\n\n### Using multiple mixins\n\nThat’s great but what if we want to share feature A with one set of components and feature B with a second set of components with little overlap? Well, the answer is to use multiple mixins.\nWe can use multiple mixins within the same component. The trick is that they will be applied in the order they are listed in the array. So element 0 is applied first, element 1 is applied second and might change some of the options from the first mixin, and so forth.\n\nLet’s define our second mixin named `secondBaseMixin`: \n\n``` javascript\n    var secondBaseMixin = {\n      data() {\n        return { text: 'default text from second mixin' };\n     }\n    }\n```\n\nIn this mixin we define our text data, nothing else changed.\nNext we register our two mixins(baseMixin and secondBaseMixin) with our new component `component-two`.\n\n``` javascript\n    Vue.component('component-two', {\n        mixins: [baseMixin, secondBaseMixin]\n    });\n```\n\nWhen we look at it in the browser, as shown in the image below we see that the value of text\nis provided by `secondBaseMixin`.\n\n![advanced-vue-demo-2](//images.ctfassets.net/1es3ne0caaid/4F9k4txPeUy8oke2GAyU6i/5dcb141f163020d4280b24a476fd06c4/advanced-vue-demo-2.png)\n\nNow let’s dive into the second part of this tutorial.\n\n## Custom directives\n\nYou have been using out-of-the-box directives as soon as you used `v-if`, `v-for` or `v-model`.\nCustom directives allow us to apply DOM changes to plain HTML elements similar to the directives that came with Vue\n\n### Creating a directive\n\nTo create a custom directive, we register it with Vue. To register it, we call `Vue.directive`\nbefore our Vue instance is created so that it will be available for use when our app is\nrunning.\n\nThe first parameter we will pass `Vue.directive` is the name of our directive. This name, prefixed with `v-`, is what we will use in the HTML to apply the directive to an element. The second parameter will be an object with properties to define the action to take during one or more of the following hooks:\n\n\n- bind: this is called once when the directive is bound to the element.\n\n\n- inserted: this is called when the element is inserted into the parentnode.\n\n\n- update: this is called after the element has been updated but the child elements may not have been updated yet.\n\n\n- componentUpdated: this is called after the element and the child elements have been updated.\n\n\n- unbind: this is called when the directive is removed.\n\nThe hooks will be defined as a function with access to the following parameters:\n\n\n- el: this is the element the directive is bound to, thereby allowing us to change its properties.\n\n\n- binding: this is an object that exposes the following values through its properties:\n    - name: the name of the directive minus the v-.\n\n\n    - value: if a value or object is passed to the directive, this is where it can be accessed.\n\n\n    - expression: this is the expression used in the binding as a string.\n\n\n    - arg: this would be the arguments passed to the directive. An example of an argument is click in the name of the event used with v-on in v-on:click=\"\".\n\n\n    - modifiers: these are objects containing any modifiers. An example of a modifier is.once in the event modifiers used with v-on in v-on:click.once=\"\".\n\nWell, with that in mind let’s create a custom directive that floats the element it’s applied to using the `inserted` hook\n\n``` javascript\n    Vue.directive('floatRight', {\n      inserted: function(el) {\n       el.style.float = 'right';\n      }\n    });\n```\n\n### Using the directive\n\nTo use our directive, we will simply add `v-float-right` or `v-floatRight`\nas an attribute to an element.\n\n``` javascript\n     new Vue({\n         el: '#app',\n         data: {\n                    welcome: 'Hello World'\n          },\n         template: `\n           \u003ch1 v-float-right\u003e{{welcome}}\u003c/h1\u003e\n         `\n    })\n```\n\nAnd as we expect it our `\u003ch1\u003e` element floats to right, in the image below.\n\n![advanced-vue-demo-3](//images.ctfassets.net/1es3ne0caaid/22UsozWYJ6WGkQ0E4Qk8SY/3777f8e13fa03681fcddc980cd0ec6cf/advanced-vue-demo-3.png)\n\n### Passing a value\n\nSince we can now float an element using our new custom directive, we may decide it would be a good idea to give it some space away from the right side of the screen. Since we don’t know how much space each situation will call for, we can pass a number to our directive as a value. \n\n``` javascript\n    Vue.directive('floatRight',{\n      inserted(el,binding){\n        el.style.float = 'right';\n        if(binding.value){\n          el.style.marginRight = `${binding.value}px`;\n        }\n      }\n    })\n```\n\nTo use this value, we need to make some changes to our directive. First, we need to access the binding parameter, then we check if the value is set, and if it is set, we set the value of `el.style.marginRight` to that many pixels.\n\n``` javascript\n    new Vue({\n        el: '#app',\n        data: {\n          welcome: 'Hello World'\n        },\n        template: `\n              \u003ch1 v-float-right=\"200\"\u003e{{welcome}}\u003c/h1\u003e\n          `\n      })\n```\n\nThese changes will result in our floated  `\u003ch1\u003e` being away a little bit from the edge of the screen.\nThis is shown in the image below.\n\n![advanced-vue-demo-4](//images.ctfassets.net/1es3ne0caaid/2aexD0HjpiCsCeK4ESOoqu/99c36891728271b371c9c45233512a35/advanced-vue-demo-4.png)\n\n### Using modifiers\n\nWe can also use modifiers to change the behavior of our custom directive. \nHere we’ll use modifiers to specify the direction of the float.\n\n``` javascript\n    new Vue({\n         el: '#app',\n         data: {\n            welcome: 'Hello World'\n          },\n          template: `\n            \u003ch1 v-float.right=\"200\"\u003e{{welcome}}\u003c/h1\u003e\n          `\n    })\n```\n\nNow, let’s have the implementation of our custom directive which checks if the modifier contains the value right and assigns float and margins accordingly.\n\n``` javascript    \n     Vue.directive('float', {\n            inserted(el, binding) {\n            if (binding.modifiers.right) {\n                 el.style.float = 'right'\n            } else\n                 el.style.float = 'left'\n            if (binding.value) {\n              if (binding.modifiers.right)\n                  el.style.marginRight = `${binding.value}px`;\n              else\n                  el.style.marginLeft = `${binding.value}px`;\n            }\n        }\n      });\n```\n\n\nThe result is pretty similar except that we used modifiers to modify our custom directive behavior.\n\n![advanced-vue-demo-5](//images.ctfassets.net/1es3ne0caaid/3rNhbVdASAAyoyc0KoSCmK/22f1c6e85b41a96762353ee00c7e8949/advanced-vue-demo-5.png)\n\n## Conclusion\n\nIn this tutorial we’ve learnt how to use Vue mixins and custom directives. These advanced concepts can help you reuse and share code with your components, and modify their behavior. I do hope this article has been useful to you. You can get the source code [here](https://github.com/Ethiel97/vue_mixins_custom_directives).","metaTitle":"Advanced Vue.js: demystify mixins and custom directives ","metaDescription":"This tutorial looks at some of the advanced features of Vue.js: mixing and custom directives. Learn how mixins allow you to share functionality between components and use custom directives to hook into the DOM."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2wIuIeFmtigsqWIcKaAgyu","type":"Entry","createdAt":"2018-11-06T11:46:07.300Z","updatedAt":"2018-11-06T11:46:07.300Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Handling authorization in GraphQL","url":"authorization-graphql","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5K3KWA2xvqw4SW2sYI8eCG","type":"Entry","createdAt":"2018-02-12T15:34:14.169Z","updatedAt":"2018-02-14T10:09:19.038Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Chimezie Enyinnaya","url":"chimezie-enyinnaya","email":"meziemichael@gmail.com","twitter":"https://twitter.com/ammezie","github":"https://github.com/ammezie","guestWriter":true}}],"projectRepo":"https://github.com/ammezie/graphql-authorization","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}}],"reviewDate":"2018-11-06","description":"This tutorial shows how to use GraphQL to manage authorization and user roles. You will build on a previous app to create an admin and a general user, and implement different permissions based on user role.","prerequisite":"You will need Node installed on your machine. Basic knowledge of JavaScript and GraphQL will be helpful.","content":"Authorization occurs after a successful authentication, it checks the access levels or privileges of the user, which will determine what the user can see or do with the application. Some time ago, I did a tutorial series on [handling authentication in GraphQL](https://blog.pusher.com/handling-authentication-in-graphql). So in this tutorial, I will be covering authorization.\n\n## Prerequisites\n\nThis tutorial assumes the following:\n\n- Node.js and NPM installed on your computer\n- Basic knowledge of JavaScript and Node.js\n- Basic knowledge of GraphQL\n- Understanding of handling authentication in GraphQL with JWT. You can check out this [tutorial](https://blog.pusher.com/handling-authentication-in-graphql-jwt/).\n\n## What we'll be building\n\nWe will be building on where we left off from [handling authentication in GraphQL – Part 2: JWT](https://blog.pusher.com/handling-authentication-in-graphql-jwt/). To demonstrate authorization, we will add two new features: fetching a list of all users and allowing users to edit their post. Only an admin user will be able to fetch a list of all users. Also, we will make it so users can only edit their own posts.\n\n## Getting started\n\nTo speed things up, we will start by cloning a boilerplate, which I have created for this tutorial:\n\n```\n    $ git clone --branch starter https://github.com/ammezie/graphql-authorization.git\n```\n\nNext, let’s install the project dependencies: \n\n```\n    $ cd graphql-authorization\n    $ npm install\n```\n\nNext, rename `.env.example` to `.env` then enter your JWT secret:\n\n```\n    // .env\n    \n    JWT_SECRET=somereallylongsecretkey\n```\n\nWe will be using SQLite, so create a new `database.sqlite3`  file in the project’s root directory.\n\n```\n    $ touch database.sqlite3\n```\n\nLastly, run the migration:\n\n```\n    $ node_modules/.bin/sequelize db:migrate\n```\n\nIf you followed from the handling authentication in GraphQL series, you will already be familiar with the project. I made some few changes though. The project has been migrated to [Apollo Server 2](https://www.apollographql.com/docs/apollo-server/v2) and the `User` model now has an `is_admin` column as well as a corresponding `isAdmin` field on the `User` type schema definition. Also, a new `Post` model and `Post` type have been added, as well a query to fetch a single post and mutation for creating a new post.\n\n## Creating dump data\n\nTo test out what we will be building, we need to have some data to play with. So let’s create some. First, let’s start the server:\n\n```\n    $ npm run dev\n```\n\nThe project has nodemon as a dev dependency, which will watch our files for changes and restarts the server. So we will leave this running for the rest of the tutorial.\n\nThe server should be running on http://localhost:4000/api. Apollo Server 2 now comes with Playground. Visiting the URL should load it up as seen in the image below:\n\n![graphql-auth-demo-1](//images.ctfassets.net/1es3ne0caaid/6oETHrz2H6CCksCCkAA8em/62aafd2bf961502e1255d3202c37414f/graphql-auth-demo-1.png)\n\nLet’s create two users and a new post created by one of the users. In Playground enter the mutations below one after the other.\n\n``` json\n    // Create first user\n    mutation {\n      signup (username: \"mezie\", email: \"chimezie@tutstack.io\", password: \"password\")\n    }\n    \n    // Create second user\n    mutation {\n      signup (username: \"johndoe\", email: \"johndoe@example.com\", password: \"password\")\n    }\n```\n\nNext, log in as one of the user:\n\n``` json\n    // Log in as the first user\n    mutation {\n      login (email: \"chimezie@tutstack.io\", password: \"password\")\n    }\n```\n\nThe mutation above will return a JWT, which we will attach as an `Authorization` header in our subsequent requests.\n\nClick on **HTTP HEADERS** at the bottom of Playground, then enter the JWT copied from above:\n\n``` json\n    {\n      \"Authorization\": \"Bearer ENTER JWT HERE\"\n    }\n```\n\n![graphql-auth-http-headers](//images.ctfassets.net/1es3ne0caaid/2Uih36qMXSqYak8eUQeS4w/fe209ce026c520ec4e0e6475a83709eb/graphql-auth-http-headers.png)\n\nNow, we can create a new post as the logged in user:\n\n``` json\n    // Create a new post\n    mutation {\n      createPost (title: \"Intro to GraphQL\", content: \"This is an intro to GraphQL.\"){\n        title\n        content\n      }\n    }\n```\n\nThe rest of this tutorial assumes you have at least two users and a post created by one of the users.\n\n## Using a resolver function\n\nWe will be looking at two different methods with which we can handle authorization in GraphQL. This first method is to add the authorization logic directly inside the resolver function, which is pretty straightforward. We will be using this method to implement editing a post.\n\nFirst, let’s define the mutation for editing a post. Open `schemas/index.js` and add the code below inside the `Mutation` object:\n\n``` javascript\n    // schemas/index.js\n    \n    type Mutation {\n      ...\n      editPost(id: Int!, title: String, content: String): Post\n    }\n```\n\nThis mutation accepts three arguments: the ID of the post, the title of the post and the content of the post. Only the `id` argument is required. \n\nNext, let’s write the resolver function for this mutation. Inside `resolvers/index.js`, add the code below immediately after the `createPost` resolver function in the `Mutation` object:\n\n``` javascript\n    // resolvers/index.js\n    \n    async editPost (root, { id, title, content }, { user }) {\n      if (!user) {\n        throw new Error('You are not authenticated!')\n      }\n      \n      const post = await Post.findById(id)\n        \n      if (!post) {\n        throw new Error('No post found')\n      }\n      \n      if (user.id !== post.user_id) {\n        throw new Error('You can only edit the posts you created!')\n      }\n      \n      await post.update({ title, content })\n      \n      return post\n    }\n```\n\nHere, we first check to make sure the user is authenticated. Then we get the post matching the supplied ID. If no match was found, we throw an appropriate error. Then we check to make sure the authenticated user trying to edit the post is the author of the post by checking the user ID against the `user_id` on the `post` object. If the authenticated user is not the author of the post, we throw an appropriate error. Otherwise, we update the post with the supplied details and return the newly updated post.\n\nLet’s test this out. First, let’s trying editing a post we didn’t create. We should get an error as in the image below:\n\n``` json\n    // Editing a post user didn’t create\n    mutation {\n      editPost (id:1, title: \"GraphQL 101\", content: \"This is an intro to GraphQL.\") {\n        title\n        content\n        author {\n          username\n        }\n      }\n    }\n```\n\nWe should get an error like below:\n\n``` json\n    {\n      ...\n      \"errors\": [\n        {\n          \"message\": \"You can only edit the posts you created!\",\n          ...\n        }\n      ]\n    }\n```\n\nBut if we trying to edit our own post, then we should see the updated post:\n\n``` json\n    {\n      \"data\": {\n        \"editPost\": {\n          \"title\": \"GraphQL 101\",\n          \"content\": \"This is an intro to GraphQL.\",\n          \"author\": {\n            \"username\": \"mezie\"\n          }\n        }\n      }\n    }\n```\n\n## Using custom directives\n\nNow, let’s allow an admin to fetch a list of users that have signed up. For this, we will be using the second method, which is using custom directives. A GraphQL directive starts with the `@` symbol. The core GraphQL specification includes two directives: `@include()` and `@skip()`. Visit the [GraphQL directives](https://graphql.org/learn/queries/#directives) page to learn more about directives.\n\nLet’s create the schema for fetching all users. Add the code below inside `schemas/index.js`:\n\n``` javascript\n    // schemas/index.js\n    \n    const typeDefs = gql`\n      directive @isAdmin on FIELD_DEFINITION\n      \n      ...\n      type Query {\n        allUsers: [User]! @isAdmin\n        ...\n      }\n      ...\n    `\n```\n\nFirst, we define a new directive called `@isAdmin`, which will be added to a field (hence, `FIELD_DEFINITION`). Then we define the query for fetching all users and use the `@isAdmin` directive on it. This means only admin users will be able to perform this query.\n\nNow, let’s create the `@isAdmin` implementation. Create a new `directives` directory in the project’s root. Then inside the `directives` directory, create a new `isAdmin.js` file and paste the code below in it:\n\n``` javascript\n    // directives/isAdmin.js\n    \n    const { SchemaDirectiveVisitor } = require('apollo-server-express')\n    const { defaultFieldResolver } = require('graphql')\n    \n    class IsAdminDirective extends SchemaDirectiveVisitor {\n      visitFieldDefinition (field) {\n        const { resolve = defaultFieldResolver } = field\n        \n        field.resolve = async function (...args) {\n          // extract user from context\n          const { user } = args[2]\n          \n          if (!user) {\n            throw new Error('You are not authenticated!')\n          }\n          \n          if (!user.is_admin) {\n            throw new Error('This is above your pay grade!')\n          }\n          \n          return resolve.apply(this, args)\n        }\n      }\n    }\n    \n    module.exports = IsAdminDirective\n```\n\nApollo Server 2 makes it easy to create custom directives by using `SchemaDirectiveVisitor`. We create a new `IsAdminDirective` class which extends `SchemaDirectiveVisitor`. Since we want the directive to be added to a field, we override the `visitFieldDefinition()`, which accepts the field the directive was added to. Inside the resolve function of the field, we get the authenticated user from the context. Then we perform the authentication and authorization checks and throw any appropriate errors.\n\nNext, let’s write the resolver function for the query. Inside `resolvers/index.js`, add the code below immediately after the `post` resolver function in the `Query` object:\n\n``` javascript\n    // resolvers/index.js\n    \n    async allUsers (root, args, { user }) {\n      return User.all()\n    }\n```\n\nBefore we test this out, let’s make our server be aware of the custom directive. Update `server.js` to reflect the changes below:\n\n``` javascript\n    // server.js\n    \n    ...\n    const IsAdminDirective = require('./directives/isAdmin')\n    ...\n    \n    const server = new ApolloServer({\n      typeDefs,\n      resolvers,\n      schemaDirectives: {\n        isAdmin: IsAdminDirective\n      },\n      context: ({ req }) =\u003e ({\n        user: req.user\n      })\n    })\n    ...\n```\n\nWe import the custom directive, then we add a new `schemaDirectives` object (which contains our custom directive) to the object passed to `ApolloServer`.\n\nTo test this out, let’s set one of the users we created earlier as an admin. To keep things simple, we will do this manually directly in the database. Just change the `is_admin` value of the user from `0` to `1`.\n\nIf we try to perform the fetch all users query as a non-admin user:\n\n``` json\n    // fetching all users as a non-admin user\n    \n    {\n      allUsers {\n        username\n        email\n      }\n    }\n```\n\nWe will get an error as below:\n\n``` json\n    {\n      ...\n      \"errors\": [\n        {\n          \"message\": \"This is above your pay grade!\",\n          ...\n        }\n      ]\n    }\n```\n\nOtherwise, we should get an array of all users:\n\n``` json\n    {\n      \"data\": {\n        \"allUsers\": [\n          {\n            \"username\": \"mezie\",\n            \"email\": \"chimezie@tutstack.io\"\n          },\n          {\n            \"username\": \"johndoe\",\n            \"email\": \"johndoe@example.com\"\n          }\n        ]\n      }\n    }\n```\n\n## Conclusion\n\nIn this tutorial, we saw how to handle authorization in GraphQL. We looked at two different methods of achieving it. Using custom directives has some advantages over using resolver function, which include reducing repetition in your resolver function, which in turn keeps your them lean. Another advantage is that it promotes reusability and it’s easier to maintain.\n\nThe complete code is available on [GitHub](https://github.com/ammezie/graphql-authorization).","metaTitle":"Handling authorization in GraphQL","metaDescription":"This tutorial shows how to use GraphQL to manage authorization and user roles. You will build on a previous app to create an admin and a general user, and implement different permissions based on user role."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6DSHNLXQCQK6AMiEWIAEcA","type":"Entry","createdAt":"2018-10-29T04:25:16.280Z","updatedAt":"2018-10-29T04:25:16.280Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Authentication in Vue using Vuex","url":"authentication-vue-vuex","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/vuex-auth-jwt","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-10-25","description":"Learn how to implement authentication in a Vue app with Vuex and a Node backend. Create a simple demo with a login page and authentication server.","prerequisite":"You will need Node 8.9+ installed on your machine, and the Vue CLI 3.0. Some knowledge of Vue will be helpful.","content":"## Introduction\n\nAuthentication is one of the most important parts of any modern application, especially ones built with JavaScript. To successfully achieve this, there are numerous options available to developers when building web applications that involves protected routes.\n\nThe simplest option will be to set a unique `token` for each user in a `localStorage`. This means, whenever you need to access the user’s `token` or any other important user data for authentication purposes, we will need to fetch the token over and over again.\n\nTo handle this properly and ensure the we don’t have to reach out to the localStorage all the time, we need to persist the required data and easily access it whenever we want to. This will ensure that we have a centralized location for all our important data.\n\nIn this tutorial, we will be exploring the usage of Vuex to manage authentications within a Vue application.\n\n\n## Prerequisites\n\nA knowledge of JavaScript and Vue is required for this tutorial. Also ensure that you have [Node.js](http://nodejs.org/) (version 8.9 or above) and [Vue CLI 3.0](https://cli.vuejs.org/guide/) installed on your machine. If you have the previous versions of `vue-cli` installed globally already, kindly follow the installation guide [here](https://cli.vuejs.org/guide/installation.html) to upgrade to the latest version.\n\n\n## Setting up the application modules \n\nRun the command below to begin the setup of our application: \n\n```\n    $ vue create vuex-auth-jwt\n```\n\nChoose the “manually select features” options and check the features we will need for this project by pressing space on your computer to select one. As shown below I have selected Babel, Router, Vuex and Linter / Formatter. You can skip this selection process and have them installed later but to get started easily, I will advise you select them:\n\n![vuex-auth-setup](//images.ctfassets.net/1es3ne0caaid/7mXFeiSB1u6y42W2iUQI2s/5384724433078a954c7f04b79089e3fe/vuex-auth-setup.png)\n\nFor other instructions, type `y` to use history mode for router, this will ensure that history mode is enable within the router file that will automatically be generated for our project. In addition, select `ESLint with error prevention only` in order to pick a linter / formatter config. Next, select `Lint on save` for additional lint features and save your configuration in a dedicated config files for future projects. Type a name for your preset, I named mine `vuerc`:\n\n![vuex-auth-preset](//images.ctfassets.net/1es3ne0caaid/6HYm3UPHnq6yoYGQSEUKMS/d128043ca52de8dd64bc1d980ea0f88d/vuex-auth-preset.png)\n\n Finally, hit `enter` to continue the installation process:\n \n![vuex-auth-installation](//images.ctfassets.net/1es3ne0caaid/2XvpuJwTCUM4yE4kkWaCwy/12fc3790c3382b24c495e30467414737/vuex-auth-installation.png)\n\nWith this option, the Vue-CLI will automatically set up the `store` for Vuex and configure a file for router as well.\n\n\n## Install and configure Axios\n\nWe will need to perform HTTP requests within our application, for this, we will install axios. Open up the terminal and run the command below from your project directory:\n\n```\n    $ npm install axios --save\n```\n\n In addition, it is certain that we will be making use of axios across many of the components that will be created for our application, it will be preferable to import it once at the entry level and easily use it anywhere. Open the `./src/main.js` file and update it with the content below:\n \n``` javascript\n    // ./src/main.js\n    ...\n      import Axios from 'axios'\n      \n      Vue.prototype.$http = Axios;\n      const token = localStorage.getItem('token');\n      if (token) {\n        Vue.prototype.$http.defaults.headers.common['Authorization'] = token\n      }\n      \n    ...\n```\n\nA major benefit of the setup above is that it makes it very easy for us to call axios directly inside any of our application’s components by simply using `this.$http`. We also proceeded to set up `Authorization` header with a token that will be sent with our requests if required.\n\n\n## Setting up the server for authentication\n\nNext, we will set up a Node.js server for authentication. For this server, we will use SQLite as the database of choice for this tutorial. To install SQLite driver and other required dependencies for our server, run the command below:\n\n```\n    $ npm install --save sqlite3 bcryptjs jsonwebtoken body-parser\n```\n\nA quick look at some of the newly installed dependency:\n\n\n- [sqlite3](https://www.npmjs.com/package/sqlite3): asynchronous, non-blocking [SQLite3](http://sqlite.org/) bindings for [Node.js](http://nodejs.org/).\n- [bcryptjs](https://www.npmjs.com/package/bcryptjs): a library to help hash passwords for users\n- [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken): a [JSON Web Tokens](https://jwt.io/) package to manage user’s authentication\n- [body-parser](https://www.npmjs.com/package/body-parser): a package to help read the json data send to our server.\n\nOnce the installation is completed, then it’s time for us to proceed and create the Node.js server that will handle user authentication as mentioned earlier. Within the root folder of your project directory, create a new folder named `server` and create a JavaScript file called `app.js` inside of it. This is where configuration takes place to import the required libraries to easily set up our server.\n\nNow open the newly created file and add the following:\n\n``` javascript\n    // ./server/app.js\n      \n      \"use strict\";\n      const express = require('express');\n      const DB = require('./db');\n      const config = require('./config');\n      const bcrypt = require('bcryptjs');\n      const jwt = require('jsonwebtoken');\n      const bodyParser = require('body-parser');\n      const db = new DB(\"sqlitedb\")\n      const app = express();\n      const router = express.Router();\n      router.use(bodyParser.urlencoded({ extended: false }));\n      router.use(bodyParser.json());\n      \n      // CORS middleware\n      const enableCrossDomain = function (req, res, next) {\n          res.header('Access-Control-Allow-Origin', '*');\n          res.header('Access-Control-Allow-Methods', '*');\n          res.header('Access-Control-Allow-Headers', '*');\n          next();\n      }\n      app.use(enableCrossDomain)\n```\n\nWhat we have done in the file above is to require all the necessary packages for our server to run effectively as stated initially. A close look at the file again, you will notice that we are also requiring a database file  `DB` and configuration file `config`. We will create these files in a bit.\n\nLastly, we went further to set up a simple CORS middleware within a function named `enableCrossDomain`. This is to ensure that any cross origin resource errors are taken care of.\n\n### Define the authentication route\n\nNext, we will define the route for registering a new user and also a login route to authenticate whenever the user comes back to log in. To begin, go back to the `./server/app.js` file and include the code below immediately after the CORS middleware configuration:\n\n``` javascript\n    // ./server/app.js\n    \n    ...\n      router.post('/register', function (req, res) {\n          db.insert([\n              req.body.name,\n              req.body.email,\n              bcrypt.hashSync(req.body.password, 8)\n          ],\n              function (err) {\n                  if (err) return res.status(500).send(\"There was a problem registering the user.\")\n                  db.selectByEmail(req.body.email, (err, user) =\u003e {\n                      if (err) return res.status(500).send(\"There was a problem getting user\")\n                      let token = jwt.sign({ id: user.id }, config.secret, {\n                          expiresIn: 86400 // expires in 24 hours\n                      });\n                      res.status(200).send({ auth: true, token: token, user: user });\n                  });\n              });\n      });\n```\n\nThe content above is used to define the route for registering a new user. Here, we passed the request body to the `insert` method with our `database` class that will be created in the next section. We added a callback function to handle responses and provide accurate information of an authenticated user. \n\nAfter successfully registering a user, we used `email`, since it will be configured as a unique field later in the tutorial to retrieve the user data and create an authentication token for the user by using the `jwt` packaged installed via npm earlier. We also used a secret key to verify a token sent to the server to uniquely identify a user. The configuration file for the secret key will be created soon.\n\nNext, we will define the login route. Paste the content below within the `app.js` file right after the already configured `/register` route:\n\n``` javascript\n    // ./server/app.js \n    \n      router.post('/login', (req, res) =\u003e {\n          db.selectByEmail(req.body.email, (err, user) =\u003e {\n              if (err) return res.status(500).send('Error on the server.');\n              if (!user) return res.status(404).send('No user found.');\n              let passwordIsValid = bcrypt.compareSync(req.body.password, user.password);\n              if (!passwordIsValid) return res.status(401).send({ auth: false, token: null });\n              let token = jwt.sign({ id: user.id }, config.secret, {\n                  expiresIn: 86400 // expires in 24 hours\n              });\n              res.status(200).send({ auth: true, token: token, user: user });\n          });\n      })\n```\n\nWe basically received the request body containing the email and password of a user during the login process. We used bcrypt to easily compare the hashed password during registration with the supplied password and log the user in if there is a match, else we will throw an error.\n\nNext, add the content below to complete the setting up process of the server:\n\n``` javascript\n    // ./server/app.js\n    \n    ... \n      app.use(router)\n      let port = process.env.PORT || 3000;\n      let server = app.listen(port, function () {\n          console.log('Server listening on port ' + port)\n      });\n```\n\nWith the content above, our server will be available on `port:3000`. Now, we are done setting up our simple Node.js server. \n\n### Set up the database and config\n\nRemember we made reference to a configuration and database file earlier? First, to set up the configuration file, create a new file in the same `server` directory and call it `config.js`. Add the following contents to it:\n\n``` javascript\n    // ./server/config.js\n    \n      module.exports = {\n          'secret': 'applicationsecret'\n      };\n```\n\nFinally, create another file for the database within the `server` directory called `db.js` and use the following content:\n\n``` javascript\n    // ./server/db.js\n    \n    \"use strict\";\n    const sqlite3 = require('sqlite3').verbose();\n    class Db {\n        constructor(file) {\n            this.db = new sqlite3.Database(file);\n            this.createTable()\n        }\n        createTable() {\n            const sql = `\n                CREATE TABLE IF NOT EXISTS userAuth (\n                    id integer PRIMARY KEY, \n                    name text, \n                    email text UNIQUE, \n                    password text)`\n            return this.db.run(sql);\n        }\n        selectByEmail(email, callback) {\n            return this.db.get(\n                `SELECT * FROM userAuth WHERE email = ?`,\n                [email], function (err, row) {\n                    callback(err, row)\n                })\n        }\n        insert(user, callback) {\n            return this.db.run(\n                'INSERT INTO userAuth (name,email,password) VALUES (?,?,?)',\n                user, (err) =\u003e {\n                    callback(err)\n                })\n        }\n    }\n    module.exports = Db\n```\n\nHere, we created a database class with methods like:\n\n-  `createTable()`: to create a table named `userAuth` for the users\n-  `selectByEmail()`: to fetch user’s data from the database\n-  `insert()`: to insert user’s data into the database during the registration process\n\nIn case you missed any of the steps above, [check here](https://github.com/christiannwamba/vuex-auth-jwt/blob/master/server/app.js) for the complete `app.js` file.\n\n## Set up components for the application\n\nNow that we are done setting up the server, let’s create the required components for the application. First, locate the `src/components` folder and create a new folder named `auth` inside of it. This newly created folder will house both the `Login`  and `Register` components.\n\n### The Login component\n\nCreate a new file `Login.vue` within the `./src/components/auth` directory and add the content below:\n\n``` html\n     // ./src/components/auth/Login.vue\n     \n      \u003ctemplate\u003e\n       \u003cdiv\u003e\n         \u003cform class=\"login\" @submit.prevent=\"login\"\u003e\n           \u003ch1\u003eSign in\u003c/h1\u003e\n           \u003clabel\u003eEmail\u003c/label\u003e\n           \u003cinput required v-model=\"email\" type=\"email\" placeholder=\"Name\"/\u003e\n           \u003clabel\u003ePassword\u003c/label\u003e\n           \u003cinput required v-model=\"password\" type=\"password\" placeholder=\"Password\"/\u003e\n           \u003chr/\u003e\n           \u003cbutton type=\"submit\"\u003eLogin\u003c/button\u003e\n         \u003c/form\u003e\n       \u003c/div\u003e\n      \u003c/template\u003e\n      \u003cscript\u003e\n      export default {\n        data() {\n          return {\n            email: \"\",\n            password: \"\"\n          };\n        },\n        methods: {\n          login: function() {\n            let email = this.email;\n            let password = this.password;\n            this.$store\n              .dispatch(\"login\", { email, password })\n              .then(() =\u003e this.$router.push(\"/\"))\n              .catch(err =\u003e console.log(err));\n          }\n        }\n      };\n      \u003c/script\u003e\n```\n\nHere, in the `\u003ctemplate\u003e` section we created the required fields to log in a user and within  the `\u003cscript\u003e`, we added the data attributes that will bind to the HTML form. Lastly, we included a method to handle the login process. We are using a Vuex action named `login` to handle this authentication. We will set this up later.\n\n### The Register component\n\nNext, let’s create a component for registering users. To do this, create a new file `Register.vue` in the `.src/components/auth` folder and add the following to it:\n\n``` html\n    // ./src/components/auth/Register.vue\n    \n      \u003ctemplate\u003e\n        \u003cdiv\u003e\n          \u003ch4\u003eRegister\u003c/h4\u003e\n          \u003cform @submit.prevent=\"register\"\u003e\n            \u003clabel for=\"name\"\u003eName\u003c/label\u003e\n            \u003cdiv\u003e\n                \u003cinput id=\"name\" type=\"text\" v-model=\"name\" required autofocus\u003e\n            \u003c/div\u003e\n            \u003clabel for=\"email\" \u003eE-Mail Address\u003c/label\u003e\n            \u003cdiv\u003e\n                \u003cinput id=\"email\" type=\"email\" v-model=\"email\" required\u003e\n            \u003c/div\u003e\n            \u003clabel for=\"password\"\u003ePassword\u003c/label\u003e\n            \u003cdiv\u003e\n                \u003cinput id=\"password\" type=\"password\" v-model=\"password\" required\u003e\n            \u003c/div\u003e\n            \u003clabel for=\"password-confirm\"\u003eConfirm Password\u003c/label\u003e\n            \u003cdiv\u003e\n                \u003cinput id=\"password-confirm\" type=\"password\" v-model=\"password_confirmation\" required\u003e\n            \u003c/div\u003e\n            \u003cdiv\u003e\n                \u003cbutton type=\"submit\"\u003eRegister\u003c/button\u003e\n            \u003c/div\u003e\n          \u003c/form\u003e\n        \u003c/div\u003e\n      \u003c/template\u003e\n      \u003cscript\u003e\n      export default {\n        data() {\n          return {\n            name: \"\",\n            email: \"\",\n            password: \"\",\n            password_confirmation: \"\",\n          };\n        },\n        methods: {\n          register: function() {\n            let data = {\n              name: this.name,\n              email: this.email,\n              password: this.password,\n            };\n            this.$store\n              .dispatch(\"register\", data)\n              .then(() =\u003e this.$router.push(\"/\"))\n              .catch(err =\u003e console.log(err));\n          }\n        }\n      };\n      \u003c/script\u003e\n```\n\nSimilar to the `Login` component, we created a form with the required fields to register a user and set up a method to handle the registration process within the `\u003cscript\u003e` section. We also used a Vuex action named `register`.\n\n### The secure component\n\nOne of the main objectives of this application is to give a user access to a particular protected resource once they are authenticated. Let’s create this secured resource page. \n\nTo start, create a new folder named `resources` within the `components` folder and then create a new file called `Resources.vue` within it. Open `Resources.vue` and paste the content below in it:\n\n``` html\n    // ./src/components/resources/Resources.vue\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n        \u003ch1\u003eProtected resource page \u003c/h1\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\n## Update the base component\n\nOpen `./src/App.vue` file and update it with the content `\u003ctemplate\u003e` below:\n\n``` html\n    // ./src/App.vue\n    \n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cdiv id=\"nav\"\u003e\n          \u003crouter-link to=\"/\"\u003eHome\u003c/router-link\u003e |\n          \u003crouter-link to=\"/about\"\u003eAbout\u003c/router-link\u003e\n          \u003cspan v-if=\"isLoggedIn\"\u003e | \u003ca @click=\"logout\"\u003eLogout\u003c/a\u003e\u003c/span\u003e\n          \u003cspan v-else\u003e | \u003crouter-link to=\"/login\"\u003eLogin\u003c/router-link\u003e\u003c/span\u003e\n        \u003c/div\u003e\n        \u003crouter-view/\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nWe included a `Logout` method to check if a user is logged in. Paste the code below after the `\u003ctemplate\u003e` to include the `logout()` method:\n\n``` javascript\n    // ./src/App.vue\n    \n    \u003cscript\u003e\n    export default {\n      computed: {\n        isLoggedIn: function() {\n          return this.$store.getters.isLoggedIn;\n        }\n      },\n      methods: {\n        logout: function() {\n          this.$store.dispatch(\"logout\").then(() =\u003e {\n            this.$router.push(\"/login\");\n          });\n        }\n      }\n    };\n    \u003c/script\u003e\n```\n\nOnce a user clicks on the logout link, we dispatched a logout action to our vuex store and send the user to `login` page using `this.$router.push('/login')`.\n\n## Building out the auth module\n\nThere are four things that go into a Vuex module: the [initial state](https://vuex.vuejs.org/guide/state.html), [getters](https://vuex.vuejs.org/guide/getters.html), [mutations](https://vuex.vuejs.org/guide/mutations.html) and [actions](https://vuex.vuejs.org/guide/actions.html). We will set this up for our store. To begin, open `store.js` file and paste the code below in it:\n\n``` javascript\n    // ./src/store.js\n    \n    import Vue from 'vue'\n    import Vuex from 'vuex'\n    import axios from 'axios'\n    \n    Vue.use(Vuex)\n    export default new Vuex.Store({\n      state: {\n      status: '',\n        token: localStorage.getItem('token') || '',\n        user: {}\n      },\n      mutations: {\n      },\n      actions: {\n      },\n      getters: {\n      }\n    })\n```\n\nHere, we imported Vue, Vuex and axios and set the initial state for the authentication status, token and user information.\n\n\n## Set up Vuex actions\n\nOur application is a minimal one and we only require to set up three different actions. They are `login`, `register`, and `logout`. Actions in Vuex provides us with a way of committing mutations to the vuex store. Go back to the `store.js` file and update the `actions` with:\n\n``` javascript\n     // ./src/store.js\n     \n      actions: {\n          login({ commit }, user) {\n            return new Promise((resolve, reject) =\u003e {\n              commit('auth_request')\n              axios({ url: 'http://localhost:3000/login', data: user, method: 'POST' })\n                .then(resp =\u003e {\n                  const token = resp.data.token\n                  const user = resp.data.user\n                  localStorage.setItem('token', token)\n                  // Add the following line:\n                  axios.defaults.headers.common['Authorization'] = token\n                  commit('auth_success', token, user)\n                  resolve(resp)\n                })\n                .catch(err =\u003e {\n                  commit('auth_error')\n                  localStorage.removeItem('token')\n                  reject(err)\n                })\n            })\n          },\n          register({ commit }, user) {\n            return new Promise((resolve, reject) =\u003e {\n              commit('auth_request')\n              axios({ url: 'http://localhost:3000/register', data: user, method: 'POST' })\n                .then(resp =\u003e {\n                  const token = resp.data.token\n                  const user = resp.data.user\n                  localStorage.setItem('token', token)\n                  // Add the following line:\n                  axios.defaults.headers.common['Authorization'] = token\n                  commit('auth_success', token, user)\n                  resolve(resp)\n                })\n                .catch(err =\u003e {\n                  commit('auth_error', err)\n                  localStorage.removeItem('token')\n                  reject(err)\n                })\n            })\n          },\n          logout({ commit }) {\n            return new Promise((resolve, reject) =\u003e {\n              commit('logout')\n              localStorage.removeItem('token')\n              delete axios.defaults.headers.common['Authorization']\n              resolve()\n            })\n          }\n        }\n```\n\n### Login action\n\nThe login action will be used to authenticate a user before logging in into the application and then commit the user’s credentials to the Vuex store.\n\nWithin this action object, we made a call to the server’s login route and return the necessary data. We then store the token in local storage and then pass the token and user data to `auth_success` to update the store’s attributes.  Saving the token within the local storage instead of Vuex store will help to ensure that the user will still be logged in for as long as the token is still within the validity time.\n\n### Register action\n\nSimilar to the `Login` action, the will get the data of a user into our application and set a unique token in the local storage.\n\n### Logout action\n\nAfter all the activity within our application, the user needs to be able to logout and have all the data created during the authenticated session destroyed. Once a user clicks on the logout link, we will remove the token we stored earlier. \n\n\n## Defining the mutations\n\nNext, we will define mutators that will be used to change the state of data within the Vuex store. In the mutations object, add the following content:\n\n``` javascript\n    // ./src/store.js\n          auth_request(state) {\n            state.status = 'loading'\n          },\n          auth_success(state, token, user) {\n            state.status = 'success'\n            state.token = token\n            state.user = user\n          },\n          auth_error(state) {\n            state.status = 'error'\n          },\n          logout(state) {\n            state.status = ''\n            state.token = ''\n          },\n```\n\n## Create the getters\n\nWe will also add getters to get the value of the attributes of vuex state. Still within the `./src/store.js` add the content below to the `getters` object:\n\n``` javascript\n    ./src/store.js\n    \n    isLoggedIn: state =\u003e !!state.token,\n    authStatus: state =\u003e state.status,\n```\n\n\n## Defining routes for authenticated and unauthenticated pages\n\nAs pointed out earlier, we intend to hide certain resources or pages from an unauthenticated user. For this, we will use [vue-router](https://router.vuejs.org/) to control the access of a user to a protected route. Once the user is authenticated we will give them access to a protected page and then redirect unauthenticated users back to the login page. Open the `./src/router.js` file and import all the required component as shown below:\n\n``` javascript\n    // ./src/router.js\n    \n      import Vue from 'vue'\n      import Router from 'vue-router'\n      import store from './store.js'\n      import Home from './views/Home.vue'\n      import About from './views/About.vue'\n      import Login from './components/auth/Login.vue'\n      import Register from './components/auth/Register.vue'\n      import Resource from './components/resources/Resources.vue'\n      Vue.use(Router)\n      let router = new Router({\n        mode: 'history',\n        routes: [\n          {\n            path: '/',\n            name: 'home',\n            component: Home\n          },\n          {\n            path: '/login',\n            name: 'login',\n            component: Login\n          },\n          {\n            path: '/register',\n            name: 'register',\n            component: Register\n          },\n          {\n            path: '/resources',\n            name: 'resources',\n            component: Resource,\n            meta: {\n              requiresAuth: true\n            }\n          },\n          {\n            path: '/about',\n            name: 'about',\n            component: About,\n          }\n        ]\n      })\n      export default router \n```\n\nWe imported all the required components and then proceeded to define routes for the application. The only route requiring authentication here is the route that points to the page we want to protect. That is why we had to add a `meta` attribute to the route definition. If an unauthenticated user hits the `/resources` endpoint, he or she will be redirected back to the `Login` component.\nWe will set up the `requiresAuth` meta in the next section.\n\n\n## Handling unauthorized access cases\n\nTo check for unauthorized access, add the code below within the `router.js`  file just before the `export default router`:\n\n``` javascript\n    // ./src/router.js\n    \n    ...\n    router.beforeEach((to, from, next) =\u003e {\n      if (to.matched.some(record =\u003e record.meta.requiresAuth)) {\n        if (store.getters.isLoggedIn) {\n          next()\n          return\n        }\n        next('/login')\n      } else {\n        next()\n      }\n    })\n    ...\n```\n\n\n## Running the application\n\nLastly, to test the application, run the command below to start the Vue application:\n\n```\n    $ npm run serve\n```\n\nThis will start the development server for Vue on http://localhost:8080/, open that in your favorite browser to view the application.\n\nAnd next, start the Node.js server in another terminal with:\n\n```\n    $ node server/app\n```\n\nThis will print out a message to the console `Server listening on port 3000`;\n\n\n## Test the application\n\nNow, if you navigate to the endpoint for our protected page http://localhost:8080/resources, you will be redirected to the login page as you have not been authenticated yet:\n\n![vuex-auth-demo-1](//images.ctfassets.net/1es3ne0caaid/jYHp9UysTeY6QAMQquWiC/c9affdcdaa6550f046c5933632cee113/vuex-auth-demo-1.gif)\n\nProceed to the registration page http://localhost:8080/register and provide your details.\n\n![vuex-auth-demo-2](//images.ctfassets.net/1es3ne0caaid/1fOhjEb3FIqMgwwsMiqGkE/9f7ebea2fcc22a980fc09906bea1a4fe/vuex-auth-demo-2.png)\n\nOnce you are done, try to access the protected page again: \n\n![vuex-auth-demo-3](//images.ctfassets.net/1es3ne0caaid/3eJqmC8hy0YIgsKMMAuqUC/05ce709d18709cd09d9df692a907bf0e/vuex-auth-demo-3.gif)\n\n## Conclusion\n\nIn this tutorial, we were able to learn how to use Vuex to manage authentication within our application. We were also able to set up a protected route that only authenticated users can have access to and redirect any unauthenticated user to a login page. \n\nI hope you found this post helpful. Find the complete source code [here on GitHub](https://github.com/christiannwamba/vuex-auth-jwt).","metaTitle":"Authentication in Vue using Vuex","metaDescription":"Learn how to implement authentication in a Vue app with Vuex and a Node backend. Create a simple demo with a login page and authentication server."}}],"defaultValue":"no pusher tech \u0026 JavaScript","queryType":"tag","pages":7,"route":"/tutorials","query":{"product":"no pusher tech","tag":"JavaScript","page":"5"}}},"page":"/tutorials","query":{"product":"no pusher tech","tag":"JavaScript","page":"5"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=no%20pusher%20tech&tag=JavaScript&page=5 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:49 GMT -->
</html>