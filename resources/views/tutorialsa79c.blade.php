<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&page=32 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:31:57 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">296</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials.html" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials1bbb.html?product=Beams" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value=""/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:none;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/typing-indicator-android.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a typing indicator in Android</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Combine a typing indicator feature into your Android app using Java and JavaScript.</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-feed-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a photo feed using Laravel</h3><p class="css-k12xad e5jrto45">Build your own photo feed like Instragram or Flicker with Laravel and Vue.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-feed-android.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Java<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a photo feed in Android</h3><p class="css-k12xad e5jrto45">Build a photo feed like Instagram or Flickr for Android with realtime functionality. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/anonymous-chat-app-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an anonymous chat app in Laravel</h3><p class="css-k12xad e5jrto45">Create a realtime public anonymous group chat app using Laravel and Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/online-presence-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Online Presence</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build online presence into your Laravel app</h3><p class="css-k12xad e5jrto45">Build online presence into your Laravel app with Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-comments-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live comments feature using Laravel</h3><p class="css-k12xad e5jrto45">Create a live comments feature using Laravel and Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/twitter-feed-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Social<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a Twitter feed using Swift</h3><p class="css-k12xad e5jrto45">Build your own iOS realtime Twitter feed app and track a custom set of hashtags.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/activity-feed-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Social<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime activity feed with Laravel</h3><p class="css-k12xad e5jrto45">Take advantage from Laravel power and build a live activity feed.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/typing-indicator-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Social Interactions<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a typing indicator with Laravel</h3><p class="css-k12xad e5jrto45">Integrate a typing indicator feature in your Laravel app using Vue.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsa1ba.html?product=Channels&amp;page=31" class="css-5s6711 edg0byb1">Prev</a><a href="tutorialse35b.html?product=Channels&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials3766.html?product=Channels&amp;page=30" class="css-za1ua3 edg0byb1">30</a><a href="tutorialsa1ba.html?product=Channels&amp;page=31" class="css-za1ua3 edg0byb1">31</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsa79c.html?product=Channels&amp;page=32" class="css-2wakph edg0byb1">32</a><a href="tutorials20e0.html?product=Channels&amp;page=33" class="css-5s6711 edg0byb1">33</a><a href="tutorials20e0.html?product=Channels&amp;page=33" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":296,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2gafTpAkTqoOu8WU8W2YAu","type":"Entry","createdAt":"2018-02-22T15:02:42.865Z","updatedAt":"2018-02-28T14:42:30.888Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a typing indicator in Android","url":"typing-indicator-android","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5HjouOQyOIwCcyuswYcIuc","type":"Entry","createdAt":"2018-02-16T18:20:46.412Z","updatedAt":"2018-04-23T13:19:32.814Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Perfect Makanju","url":"perfect-makanju","email":"damiperfect@gmail.com","twitter":"https://twitter.com/perfectmak","github":"https://github.com/perfectmak","guestWriter":true}}],"projectRepo":"https://github.com/perfectmak/who-is-typing-android-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}}],"reviewDate":"2017-03-22","description":"Combine a typing indicator feature into your Android app using Java and JavaScript.","prerequisite":"A basic understanding of Java and JavaScript is needed to follow this tutorial.","content":"In this tutorial, we are going to build a typing indicator in an Android chat application using Pusher. A basic knowledge of how to build Android applications is assumed in this tutorial and we'll be focusing on the implementation of the typing indicator of the Android application.\n\n## Overview of the chat app\n\nThe chat application will be simple. First, we will build a simple Node.js server that will receive requests from Android when a user is typing. The server will then broadcast this to everyone as a Pusher event.\n\nThen we will go ahead to build the Android application. When a user starts typing in the edit text field of the Android app, the app sends a request to the server. The Android app will also subscribe to the typing events from Pusher and show a 'user is typing' message when a broadcast is received.\n\n## Setup a Pusher account\n\nWe will be using [Pusher](https://pusher.com) for the realtime features of this chat application, so the first step is to create your Pusher account. You can do this at [https://pusher.com/signup](https://pusher.com/signup). When you first log in, a pop-up dialogue appears as shown below:\n\n![typing-indicator-android-create-app](//images.contentful.com/1es3ne0caaid/3c28uKB8ZWM0cwOEOqao2S/10800fa593ff7fa8ba772b01354327ab/typing-indicator-android-create-app.png)\n\nIf you already have an account, log in to the Pusher dashboard and click on the `Create new app` button in the `Your apps` to the left. Select 'Android' for the front-end tech and 'Node.js' for the backend tech. (The tech stack you select now doesn't matter as you can always change it later. Its purpose is to generate the starter code that you will need to start communicating with Pusher.)\n\nAfter creating the new app, go to the `App Keys` tab and copy your **App ID**, **Key**, and **Secret** credentials. We will use them later in the tutorial.\n\n## Setup the Node.js server\n\nNow that you have your Pusher Keys, let's get on with building the chat application server.\n\nFirst, generate a Node.js application using this command:\n\n``` \nnpm init -y\n```\n\nNext, install Express, Pusher and some other dependencies the server will be needing:\n\n``` \nnpm install --save express body-parser pusher\n```\n\nExpress is the web server library that we will be using to accept HTTP requests from the Android app when the user starts typing, and body-parser will be used to parse the incoming requests. The [Pusher Node.js library](https://github.com/pusher/pusher-http-node) will be used to publish `user_typing` events through the Pusher API.\n\nWhen done, the dependency section of your package.json file should look like this:\n\n```\n\"dependencies\": {\n    \"express\": \"^4.14.1\",\n    \"body-parser\": \"^1.16.0\",\n    \"pusher\": \"^1.5.1\"\n  }\n```\n\nTo serve our application we need to do three things:\n\n1. Set up Express and Pusher.\n2. Create routes to listen for web requests.\n3. Start the Express server.\n \n### 1. Setup Express and Pusher\n\nCreate a file and name it `server.js`. Inside it, we initialize Express and Pusher like this:\n\n```\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst path = require('path');\nconst Pusher = require('pusher');\n\nconst app = express();\n\n//Initialize Pusher\nconst pusherConfig = {\n  appId: 'YOUR_PUSHER_APP_ID',\n  key: 'YOUR_PUSHER_KEY',\n  secret: 'YOUR_PUSHER_SECRET',\n  encrypted: true\n};\nconst pusher = new Pusher(pusherConfig);\n\napp.use(bodyParser.urlencoded({extended: true}));\n```\n\nRemember to replace the parameters in the `pusherConfig` object with the Pusher credentials you copied earlier from the Pusher dashboard.\n\n### 2. Create routes to serve our application\n\nCreate a route that uses Pusher to broadcast a `user_typing` event.\n\n```\nconst chatChannel = 'anonymous_chat';\nconst userIsTypingEvent = 'user_typing';\n\napp.post('/userTyping', function(req, res) {\n  const username = req.body.username;\n  pusher.trigger(chatChannel, userIsTypingEvent, {username: username});\n  res.status(200).send();\n});\n```\n\nThis route broadcasts the request's username to everyone who is subscribed to the channel.\n\n### 3. Start the Express server\n\nStart the Express server to listen on the app port `3000`.\n\n```\napp.listen(3000, function () {\n  console.log('Node server running on port 3000');\n});\n```\n\nNow we have the application server set up. Next, we develop the Android application users will interact with.\n\n## Set up the Android project\n\nOpen Android Studio and create a new project:\n\n![typing-indicator-android-create-new-project](//images.contentful.com/1es3ne0caaid/7qD03dnR2oUmMC6cUYcy86/a15698f25a845ebb954361486285756e/typing-indicator-android-create-new-project.png)\n\nYou could name the application whatever suits you, but for the purpose of this tutorial, we will name it 'WhoIsTypingApp'.\n\nOn the Next Page, select the `API 19: Android 4.4 (Kitkat)` as the Minimum SDK as shown below:\n\n![typing-indicator-android-android-4-4](//images.contentful.com/1es3ne0caaid/116dH65UneMKoAMMaumW8w/131420775b7285cbea7bc7137a81ac75/typing-indicator-android-android-4-4.png)\n\nNext, select an 'Empty Activity' as the initial Activity for the Application:\n\n![typing-indicator-android-add-activity](//images.contentful.com/1es3ne0caaid/34sHOmAMmQg240kooK46UE/2417a1ede307719ac2c07c335ef3911a/typing-indicator-android-add-activity.png)\n\nAnd use the default name of MainActivity with backward compatibility:\n\n![typing-indicator-android-customize-activity](//images.contentful.com/1es3ne0caaid/70Gr9wJN040iYqmSseM6O/68b354229b20a73f3fde075406d83df7/typing-indicator-android-customize-activity.png)\n\nOnce Android Studio is done with the project's setup, then it's time to install the project dependencies.\n\nIn the dependencies section of the `build.gradle` file of your application module, add the following:\n\n``` \ndependencies {\n    ...\n    compile 'com.pusher:pusher-java-client:1.4.0'\n    compile 'com.squareup.okhttp3:okhttp:3.3.1'\n    compile 'com.google.code.gson:gson:2.7'\n}\n```\n\nWe will be using [gson](https://github.com/google/gson) to convert JSON messages to Java Objects. For the network requests to our Node.js Server, we will use [okhttp](https://github.com/square/okhttp).\n\nSync the Gradle project so the modules can be installed and the project built.\n\nNext, let's add the INTERNET permission to our `AndroidManifest.xml` file. This is required because our application will be connecting to Pusher and our Node.js server over the internet.\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.pusher.whoistypingapp\"\u003e\n\n    \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n\n    \u003capplication \n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\"\u003e\n        ...\n    \u003c/application\u003e\n\n\u003c/manifest\u003e\n```\n\n### The chat activity layout\n\nNext, open the `activity_main.xml` layout file and modify it to look like this:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/activity_main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n    tools:context=\"com.pusher.whoistypingapp.MainActivity\"\u003e\n\n    \u003cLinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentBottom=\"true\"\n        android:orientation=\"horizontal\"\u003e\n\n        \u003cEditText\n            android:id=\"@+id/messageEditText\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:hint=\"Enter Message Here\"\n            android:layout_weight=\"1\"/\u003e\n\n        \u003cButton\n            android:id=\"@+id/sendButton\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Send\"\n            android:layout_weight=\"4\"/\u003e\n    \u003c/LinearLayout\u003e\n\n\u003c/RelativeLayout\u003e\n```\n\nThe layout consists of an EditText where the user can enter a message, and a Button beside it to act as the 'send message' button.\n\n### The typing indicator model\n\nWe will need to represent the 'who's typing' message as a Plain Old Java Object so it can be easily deserialized by gson. To do this, create the class `com.pusher.whoistypingapp.WhosTyping` and populate it as shown below:\n\n```\npackage com.pusher.whoistypingapp;\n\n\npublic class WhosTyping {\n    public String username;\n\n    public WhosTyping(String username) {\n        this.username = username;\n    }\n}\n\n```\n\nThis `WhosTyping` class corresponds to JSON of the following structure:\n\n```\n{\n  \"username\": \"Any Name\"\n}\n```\n\n### The chat activity\n\nNow open the class `com.pusher.whoistypingapp.MainActivity`. First, let's start by declaring all the required constants:\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    private static final String USER_TYPING_ENDPOINT = \"https://{NODE_JS_SERVER_ENDPOINT}/userTyping\";\n    private static final String PUSHER_API_KEY = \"PUSHER_API_KEY\";\n    private static final String CHANNEL_NAME = \"anonymous_chat\";\n    private static final String USER_TYPING_EVENT = \"user_typing\";\n\n    ...\n```\n\nRemember to replace the `USER_TYPING_ENDPOINT` with the actual hostname (or IP address) of the Node.js server (more on this later) and also the `PUSHER_API_KEY` with the Pusher Key you copied earlier from the Pusher dashboard.\n\nNext, we declare the private variables that will be required for `MainActivity` to function:\n\n```\n    ...\n    Pusher pusher = new Pusher(PUSHER_API_KEY);\n    OkHttpClient httpClient = new OkHttpClient();\n\n    EditText messageEditText;\n    ...\n```\n\n### Publishing `user_typing` event\n\nFirst, let's implement publishing the `user_typing` event to our Node.js server. To do this, we create a `TextWatcher` inside the `onCreate` method.\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        TextWatcher messageInputTextWatcher = new TextWatcher() {\n            ...\n            @Override\n            public void onTextChanged(CharSequence charSequence, int start, int before, int count) {\n                Log.d(\"User Input Change\", charSequence.toString());\n                Request userIsTypingRequest = new Request.Builder()\n                        .url(USER_TYPING_ENDPOINT)\n                        .post(new FormBody.Builder()\n                                .add(\"username\", getCurrentUsername())\n                                .build())\n                        .build();\n\n                httpClient.newCall(userIsTypingRequest)\n                        .enqueue(new Callback() {\n                            @Override\n                            public void onFailure(Call call, IOException e) {\n                                Log.d(\"Post Response\", e.toString());\n                            }\n\n                            @Override\n                            public void onResponse(Call call, Response response) throws IOException {\n                                Log.d(\"Post Response\", response.toString());\n                            }\n                        });\n            }\n            ...\n        };\n\n        ...\n```\n\nInside the `onTextChanged` method of the TextWatcher, we build the `userIsTypingRequest` and then send the request to the `USER_TYPING_ENDPOINT` URL. For simplicity, we just log the response we get for the server.\n\nThen we add the text change listener to the `messageEditText` as shown below.\n\n```\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n      ...\n      messageEditText = (EditText)findViewById(R.id.messageEditText);\n      messageEditText.addTextChangedListener(messageInputTextWatcher);\n      ...\n    }\n```\n\nNow, whenever a user starts typing, a request is sent to the server and the server will in turn broadcast the typing event to all other users.\n\nNext, we need to subscribe to the `user_typing` event.\n\n### Subscribing to `user_typing` event\n\nWe create a `SubscriptionEventListener` that will respond when a `user_typing` event arrives:\n\n```\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n      ...\n\n      SubscriptionEventListener isTypingEventListener = new SubscriptionEventListener() {\n        @Override\n        public void onEvent(String channel, String event, String data) {\n          final WhosTyping whosTyping = new Gson().fromJson(data, WhosTyping.class);\n          if(!whosTyping.username.equals(getCurrentUsername())) {\n            runOnUiThread(new Runnable() {\n              @Override\n              public void run() {\n                getSupportActionBar().setSubtitle(whosTyping.username + \" is typing...\");\n              }\n            });\n          }\n        }\n      }; \n\n      ...      \n    }\n```\n\nHere, the JSON string we receive is converted to a `WhosTyping` object using gson. Then we check if the username of the `WhosTyping` object is equal to the current username before we update the UI. The typing indicator message is shown as subtitle text on the [Action Bar](https://material.io/guidelines/layout/structure.html#structure-app-bar).\n\nThen we subscribe and bind the `isTypingEventListener` to the `user_typing` event:\n\n```\n  ...\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    ...\n\n    Channel pusherChannel = pusher.subscribe(CHANNEL_NAME);\n    pusherChannel.bind(USER_TYPING_EVENT, isTypingEventListener);         \n  }\n```\n\nThe application now updates the UI with the username of 'who's typing'. But the typing indicator message needs to be cleared when the user stops typing or else the message stays forever. An easy solution is to set a timer that clears the typing message after some seconds of not receiving an event. From experience, a clear timer of 0.9 seconds has given the best results.\n\nTo set the clear timer, we use the `java.util.Timer` and `java.util.TimerTask` classes. First, let us create a method that starts the clear timer:\n\n```\npublic class MainActivity extends AppCompatActivity {\n  ...\n\n  TimerTask clearTimerTask;\n  Timer clearTimer;\n\n  private void startClearTimer() {\n    clearTimerTask = new TimerTask() {\n        @Override\n        public void run() {\n            runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                  getSupportActionBar().setSubtitle(\"\");\n                }\n            });\n        }\n      };\n    clearTimer = new Timer();\n    long interval = 900; //0.9 seconds\n    clearTimer.schedule(clearTimerTask, interval);\n  }\n  ...\n```\n\nThe `clearTimerTask` will clear the Action Bar's subtitle when it is invoked by the `clearTimer` after 0.9 seconds.\n\nNext, we update the `onEvent` method of our `SubscriptionEventListener` to start the clear timer.\n\n```\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n      ...\n\n      SubscriptionEventListener isTypingEventListener = new SubscriptionEventListener() {\n        @Override\n        public void onEvent(String channel, String event, String data) {\n          ...\n\n          //reset timer\n          if(clearTimer != null) {\n            clearTimer.cancel();\n          }\n          startClearTimer();\n        }\n      }; \n\n      ...      \n    }\n```\n\nAnd there you have it. The chat application now has the functionality to display who's currently typing.\n\nFinally, override the `onResume()` and `onPause()` methods of `MainActivity` to connect and disconnect the `pusher` object respectively.\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n        pusher.connect();\n    }\n\n    @Override\n    protected void onPause() {\n        pusher.disconnect();\n        super.onPause();\n    }\n\n }\n```\n\n## Testing\n\nFirst, ensure you have updated your the `PUSHER_API_KEY` in the `MainActivity` class with your Pusher Key.\n\nRun the Android application either using a real device or a virtual one. You should see an interface like this:\n\n![typing-indicator-android-launch-view](//images.contentful.com/1es3ne0caaid/2YqFNSl5sQe62YUYSAUa2W/90af3bf00c30966da0a7426fe3b2aecb/typing-indicator-android-launch-view.png)\n\n### Testing with the debug console\n\nThe easiest way to test the Android application is through the [Pusher Debug Console on your Dashboard](https://dashboard.pusher.com). At the Debug Console for your app on Pusher, click to show the event creator and then fill the **Channel**, **Event** and **Data** field as shown in the image below:\n\n![typing-indicator-android-debug-console](//images.contentful.com/1es3ne0caaid/5CNXkC3XigQmEq2w8aeUcg/d1a97363850c57829896ce740f79629d/typing-indicator-android-debug-console.png)\n\nWhen you click the ‘Send event’ button, the interface of your Android application will update to indicate the ‘username is typing…’ message at the top of the page as shown in the image below:\n\n![typing-indicator-android-demo](//images.contentful.com/1es3ne0caaid/17JBwKOSVc4ciqgeE0sS6i/213d93ae48c9a2911d89093cb91c83fc/typing-indicator-android-demo.png)\n\n### Testing with the Node.js server\n\nTo test the application with the Node.js server, you will need to make the server available to the Android application either by hosting it live or maybe using a tunneling tool like [ngrok](https://ngrok.com).\n\nThen update the `USER_TYPING_ENDPOINT` constant in the `MainActivity` class with the server's URL. Now to test, you need to run the Android application on two devices. When you start typing in one, you should notice the other device shows that you are currently typing.\n\n## Conclusion\n\nIn this tutorial, we saw how to build a typing indicator in an Android app using Pusher.","metaTitle":"Build a typing indicator in Android","metaDescription":"In this tutorial, find out how you can build a typing indicator for your Android app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1ny6KjQMkEwwCYe0mmCmae","type":"Entry","createdAt":"2018-02-27T11:56:49.493Z","updatedAt":"2018-02-27T11:56:49.493Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a photo feed using Laravel","url":"photo-feed-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55LOucxD5Ycm4oGSGa0A2O","type":"Entry","createdAt":"2018-02-15T15:02:22.618Z","updatedAt":"2018-02-15T15:02:22.618Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Viraj Khatavkar","url":"viraj-khatavkar","email":"viraj@virajkhatavkar.com","twitter":"https://twitter.com/virajkhatavkar","github":"https://github.com/viraj-khatavkar","guestWriter":true}}],"projectRepo":"https://github.com/viraj-khatavkar/realtime-photo-feed-laravel-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}}],"reviewDate":"2017-03-20","description":"Build your own photo feed like Instragram or Flicker with Laravel and Vue.js.","prerequisite":"A basic understanding of Laravel and Vue.js is needed to follow this tutorial.","content":"A photo feed is a web feed that features image enclosures. It provides an easy, standard way to reference a list of images. Instagram and Flickr are examples of such a feed.\n\nToday, we will create a realtime photo feed using [Laravel](https://laravel.com/) and [Pusher](https://pusher.com/). With the release of [Echo](https://laravel.com/docs/5.4/broadcasting), Laravel has provided an out of the box solution for implementing realtime features using event broadcasting without the need of polling applications. It is simple to get started in a few minutes.\n\n## Setup an app on Pusher\n\nFirst, you need to [sign up on Pusher](https://pusher.com/signup) and create a new app.\n\n![photo-feed-laravel-create-app](//images.contentful.com/1es3ne0caaid/60fwL0tF6wuOsqe8o8QSGu/b8d061fb6451cd3b8b1a2569332ca196/photo-feed-laravel-create-app.png)\n\n## Install Laravel, Pusher SDK and Echo\n\nThen, we will grab a fresh copy of Laravel:\n\n```\nlaravel new realtime-photo-feed-laravel-pusher\n```\n\nThis will install the latest version of the Laravel framework and download the necessary dependencies. Next, we will install the [Pusher PHP SDK](https://github.com/pusher/pusher-http-php) using [Composer](https://getcomposer.org/download/):\n\n```\ncomposer require pusher/pusher-php-server\n```\n\nAfter this, we will install the JavaScript dependencies:\n\n```\nnpm install\n```\n\nNow, we need to install two Javascript libraries necessary for realtime event broadcasting: Laravel Echo and Pusher JS\n\n```\nnpm install --save laravel-echo pusher-js\n```\n\nWe require some form of user authentication mechanism to demonstrate the functionality. Let us use the default authentication scaffolding provided by Laravel:\n\n```\nphp artisan make:auth\n```\n\n## Configuration\n\nFirst, we need to set the `APP_ID`, `APP_KEY`, `APP_SECRET` and `APP_CLUSTER` in the environment file. We can get these details in our Pusher [app dashboard](https://dashboard.pusher.com/):\n\n``` \n# .env\n\nAPP_URL=your-application-url\n\nBROADCAST_DRIVER=pusher\n\nPUSHER_APP_ID=your-pusher-app-id\nPUSHER_APP_KEY=your-pusher-app-key\nPUSHER_APP_SECRET=your-pusher-app-secret\nPUSHER_APP_CLUSTER=your-pusher-app-cluster\n```\nNext, we need to create a fresh Echo instance in our applications's JavaScript. We can do so at the bottom of our `resources/assets/js/bootstrap.js` file:\n\n``` language-javascript\nimport Echo from \"laravel-echo\"\n\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: 'your-pusher-app-key',\n    cluster: 'ap2',\n    encrypted: true\n});\n```\n\n## Our application\n\nWe will create a realtime photo feed similar to what Instagram does. The core feature is to display the new photos in realtime, without the need of polling the application continuously or refreshing the page. We will not cover anything relating to writing CRUD functionality using Laravel. We will concentrate on the code necessary for implementing the realtime photo feed feature.\n\n## Migrations\n\nNext, we need a `photos` table, where we can record all the photos uploaded by a user. Let us create a model and migration:\n\n```\nphp artisan make:model Photo -m\n```\n\nThe `photos` table would require the following fields:\n\n1. URL of each uploaded photo\n2. A field to link the photo to the user who uploaded it\n \nBelow is our migration file for the `photos` table:\n\n```\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreatePhotosTable extends Migration\n{\n\n    public function up()\n    {\n        Schema::create('photos', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003estring('photo_url');\n            $table-\u003einteger('user_id')-\u003eunsigned();\n            $table-\u003etimestamps();\n        });\n    }\n\n    public function down()\n    {\n        Schema::dropIfExists('photos');\n    }\n}\n```\n\n# Uploading Photos\n\nWe need to handle the request for uploading photos, move the uploaded photo to a specified directory and store the `photo_url` in database table. First, we will create a `UploadPhotoController` which will handle this request:\n\n```\nphp artisan make:controller UploadPhotoController\n```\n\nWhen using the *public disk*, the files are stored in the `storage/app/public` directory. To make them accessible for the web users, we need to create a symbolic link with the following command:\n\n```\nphp artisan storage:link\n```\n\n- Please make a note that, the GD extension needs to be installed on the the server to successfully upload the file\n \nWe will store the photos on the *public* disk, which is a convention for where to place assets we want to be publicly accessible. Then, we can grab the URL for the image to store for this photo in the database row.\n\n```\n# routes/api.php\n\nRoute::middleware('auth:api')-\u003epost('/upload/photo', 'UploadPhotoController');\n\n\n# UploadPhotoController.php\n\npublic function __invoke()\n{\n    $file = request('photo');\n    $path = $file-\u003ehashName('profiles');\n\n    $disk = Storage::disk('public');\n\n    $disk-\u003eput(\n        $path, $this-\u003eformatImage($file)\n    );\n\n    $photo = request()-\u003euser()-\u003ephotos()-\u003ecreate([\n        'photo_url' =\u003e $disk-\u003eurl($path),\n    ]);\n\n    return $photo-\u003eload('user');\n}\n```\n\n## Broadcasting Feed\n\nWhenever a new photo is uploaded, we need to fire an event which will be broadcasted over Pusher to a private channel. Let us first create the `NewPhoto` event:\n\n```\nphp artisan make:event NewPhoto\n```\n### broadcastOn method\n\nThe event should implement a `broadcastOn` method. This method must return the channels to which the event should be broadcasted on.\n\n### broadcastWith method\n\nBy default, Laravel will broadcast all the public properties in JSON format as the event payload. We can define our logic to broadcast only the necessary data in the `broadcastWith` method.\n\nBelow is our `NewPhoto` event:\n\n```\nnamespace App\\Events;\n\nuse App\\Photo;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass NewPhoto implements ShouldBroadcast\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    public $photo;\n\n    /**\n     * Create a new event instance.\n     *\n     * @return void\n     */\n    public function __construct(Photo $photo)\n    {\n        $this-\u003ephoto = $photo;\n    }\n\n    /**\n     * Get the channels the event should broadcast on.\n     *\n     * @return PrivateChannel|array\n     */\n    public function broadcastOn()\n    {\n        return new PrivateChannel('photos');\n    }\n}\n\n```\nNow, we need to start our queue to actually listen for jobs and broadcast any events that are recorded. We can use the database queue listener on our local environment:\n\n```\nphp artisan queue:listen\n```\n\nNext, we need to broadcast this event to other users on the same channel. Let us use the `broadcast` helper provided by Laravel to fire the event whenever a new photo is uploaded:\n\n```\n# UploadPhotoController.php\n\npublic function __invoke()\n{\n    $file = request('photo');\n    $path = $file-\u003ehashName('profiles');\n\n    $disk = Storage::disk('public');\n\n    $disk-\u003eput(\n        $path, $this-\u003eformatImage($file)\n    );\n\n    $photo = request()-\u003euser()-\u003ephotos()-\u003ecreate([\n        'photo_url' =\u003e $disk-\u003eurl($path),\n    ]);\n\n    broadcast(new NewPhoto($photo))-\u003etoOthers();\n\n    return $photo-\u003eload('user');\n}\n```\n\n## Listening to the feed\n\nInstallation and configuration of Laravel Echo is a must before we can start listening to photo feeds. We have covered the installation process in detail in the section above. Please go through it if you might have skipped it.\n\nWe can listen to a private channel using `Echo.private(channel)`. As we have broadcasted the `NewPhoto` event on a private channel, we will use `Echo.private()`:\n\n```\nlisten() {\n    Echo.private('photos')\n        .listen('NewPhoto', (e) =\u003e this.photos.unshift(e.photo));\n}\n```\n\n### Authorization\n\nAs we are listening on a private channel, we need to authenticate that the current logged in user should be able to listen on this private channel. Laravel Echo will automatically call the necessary authorization routes if we are listening to a private channel. But, we need to write the authentication logic which will actually authorize the user.\n\nAuthorization logic is written in the `routes/channels.php`. For the sake of example, we will simply return true without performing any authorization logic:\n\n```\nBroadcast::channel('photos', function ($user) {\n    return true;\n});\n```\n\nNow, whenever a new photo is uploaded, the event would broadcast over Pusher. Next, we listen to `photos` channel and push the new photo to our `photos` array in our Vue component.\n\nBelow is the JavaScript part of our example component written using `Vue.js`\n\n```\n\u003cspan\u003eSelect New Photo\u003c/span\u003e\n\u003cinput ref=\"photo\" type=\"file\" class=\"form-control\" name=\"photo\" @change=\"update\"\u003e\n```\n\n```\n\u003cscript\u003e\n    export default {\n        props: ['user'],\n        data() {\n            return {\n                photos: []\n            }\n        },\n        mounted() {\n            this.getPhotos();\n            this.listen();\n        },\n        methods: {\n            update(e) {\n                e.preventDefault();\n\n                axios.post('/api/upload/photo?api_token=' + this.user.api_token, this.gatherFormData())\n                    .then(response =\u003e this.photos.unshift(response.data));\n            },\n            /**\n             * Gather the form data for the photo upload.\n             */\n            gatherFormData() {\n                const data = new FormData();\n\n                data.append('photo', this.$refs.photo.files[0]);\n\n                return data;\n            },\n            getPhotos() {\n                axios.get('/api/photos').then(response =\u003e this.photos = response.data);\n            },\n            listen() {\n                Echo.private('photos')\n                    .listen('NewPhoto', (e) =\u003e this.photos.unshift(e.photo));\n            }\n        },\n    }\n\u003c/script\u003e\n```\nAnd here the demonstration of our functionality:\n\n![typing-indicator-android-demo](//images.contentful.com/1es3ne0caaid/5Fs8UWa6nCM68MeU2SsSss/f354b1bec8b0379c2ec648756c85ec56/typing-indicator-android-demo.gif)\n\n## Conclusion\n\nIn this article, we have shown you how to build a realtime photo feed. We have covered the configuration options you need to get started. The example above should help you fill in the gaps and give an overview of some of the other configuration options available to you.","metaTitle":"Build a photo feed using Laravel","metaDescription":"Build your own photo feed like Instragram or Flicker with Laravel and Vue.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FFu6qc2z6g88qqCQokG4g","type":"Entry","createdAt":"2018-02-28T12:29:08.830Z","updatedAt":"2018-02-28T12:29:08.830Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a photo feed in Android","url":"photo-feed-android","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/photo-feed-pusher-android","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2017-03-16","description":"Build a photo feed like Instagram or Flickr for Android with realtime functionality. ","prerequisite":"This tutorial assumes a basic knowledge of how to make Android apps.","content":"When I was a kid, my parents had a Kodak camera that they only used on vacations or special events. It used film rolls, and you had to take them to a specialty shop to have them developed so you could get your photos a few days later. Sometimes, we couldn't even fill a 100-pocket photo album in an entire year.\n\nNowadays, the number of the photos we take has exploded exponentially. With cameras in even the most basic mobile phones, you can easily take hundreds of photos in a day without any issues. And sites like [Instagram](https://www.instagram.com/), [Flickr](https://www.flickr.com/), and [500px](https://500px.com), among others, made specifically to share, comment, and like photos are very popular.\n\nSo why not build a feed to track a stream of photos in our Android device in realtime?\n\nIn this tutorial, we're going to get the photos from Reddit (in particular, from the [r/pics](https://www.reddit.com/r/pics/) subreddit), taking advantage of the [Pusher Realtime Reddit API](https://blog.pusher.com/pusher-realtime-reddit-api/).\n\nTo keep things simple, we'll implement the feed without any other feature. This is how the final app will look:\n\n![photo-feed-android-demo](//images.contentful.com/1es3ne0caaid/NHDBgw4pkAO4qUuQeecmS/8d16ffabc71e1979b64573421292b8db/photo-feed-android-demo.gif)\n\nLet's get started!\n\n## Using the Pusher Realtime Reddit API\n\nYou can learn more about the [Pusher Realtime Reddit API here](https://blog.pusher.com/pusher-realtime-reddit-api/), but basically the idea is that any subreddit has its own Pusher channel to which you can subscribe to get new listings events.\n\nYou can see an interactive code example of this on [JSBin](http://jsbin.com/sihoviwi/1/edit?html,js,console).\n\nFor our needs, we can try this simple Javascript snippet:\n\n```\n// Open a Pusher connection to the Realtime Reddit API\nvar pusher = new Pusher(\"50ed18dd967b455393ed\");\n\n// Subscribe to the pics subreddit (lowercase)\nvar subredditChannel = pusher.subscribe(\"pics\");\n\n// Listen for new stories\nsubredditChannel.bind(\"new-listing\", function(listing) {\n  // Output listing to the browser console\n  console.log(listing);\n});\n```\nThe Pusher app key you have to use is `50ed18dd967b455393ed`. Here's a sample of the information that we can get from Reddit:\n\n```\n{\n  approved_by: null,\n  archived: false,\n  author: \"PHIL-yes-PLZ\",\n  author_flair_css_class: null,\n  author_flair_text: null,\n  banned_by: null,\n  brand_safe: true,\n  clicked: false,\n  contest_mode: false,\n  created: 1489494725,\n  created_utc: 1489465925,\n  distinguished: null,\n  domain: \"i.redd.it\",\n  downs: 0,\n  edited: false,\n  gilded: 0,\n  hidden: false,\n  hide_score: true,\n  id: \"5za4q7\",\n  is_self: false,\n  likes: null,\n  link_flair_css_class: null,\n  link_flair_text: null,\n  locked: false,\n  media: null,\n  media_embed: [object Object] { ... },\n  mod_reports: [],\n  name: \"t3_5za4q7\",\n  num_comments: 0,\n  num_reports: null,\n  over_18: false,\n  permalink: \"/r/pics/comments/5za4q7/the_beauty_of_budding_stained_glass/\",\n  post_hint: \"image\",\n  preview: [object Object] {\n    enabled: true,\n    images: [[object Object] {\n  id: \"rqR81Yj7Fud7Y8P94e8ZftEZyTEO4Q3ufVQ7f-9QNSM\",\n  resolutions: [[object Object] {\n  height: 81,\n  url: \"https://i.redditmedia.com/Lw666GULI7dJMKrB3IKn8G95A0MuP-ztXwsmvIdhlsE.jpg?fit=crop\u0026crop=faces%2Centropy\u0026arh=2\u0026w=108\u0026s=c174d33e47fa3e585c46622dfca12dd5\",\n  width: 108\n}, [object Object] {\n  height: 162,\n  url: \"https://i.redditmedia.com/Lw666GULI7dJMKrB3IKn8G95A0MuP-ztXwsmvIdhlsE.jpg?fit=crop\u0026crop=faces%2Centropy\u0026arh=2\u0026w=216\u0026s=22711bde5e57c38f93e99de27bb2f1ee\",\n  width: 216\n}, [object Object] {\n  height: 240,\n  url: \"https://i.redditmedia.com/Lw666GULI7dJMKrB3IKn8G95A0MuP-ztXwsmvIdhlsE.jpg?fit=crop\u0026crop=faces%2Centropy\u0026arh=2\u0026w=320\u0026s=a22e5a2857b40d0205e07724a89d4182\",\n  width: 320\n}, [object Object] {\n  height: 480,\n  url: \"https://i.redditmedia.com/Lw666GULI7dJMKrB3IKn8G95A0MuP-ztXwsmvIdhlsE.jpg?fit=crop\u0026crop=faces%2Centropy\u0026arh=2\u0026w=640\u0026s=7dc827127272f6aa530faa8b29a8298f\",\n  width: 640\n}, [object Object] {\n  height: 720,\n  url: \"https://i.redditmedia.com/Lw666GULI7dJMKrB3IKn8G95A0MuP-ztXwsmvIdhlsE.jpg?fit=crop\u0026crop=faces%2Centropy\u0026arh=2\u0026w=960\u0026s=8402002d064b3283742f8bc86163d552\",\n  width: 960\n}, [object Object] {\n  height: 810,\n  url: \"https://i.redditmedia.com/Lw666GULI7dJMKrB3IKn8G95A0MuP-ztXwsmvIdhlsE.jpg?fit=crop\u0026crop=faces%2Centropy\u0026arh=2\u0026w=1080\u0026s=ac9b66669198d0eb4bb8a47e1cc79e48\",\n  width: 1080\n}],\n  source: [object Object] {\n    height: 2448,\n    url: \"https://i.redditmedia.com/Lw666GULI7dJMKrB3IKn8G95A0MuP-ztXwsmvIdhlsE.jpg?s=50a1044924ba1e0aa39a7f5f5ab33d8e\",\n    width: 3264\n  },\n  variants: [object Object] { ... }\n}]\n  },\n  quarantine: false,\n  removal_reason: null,\n  report_reasons: null,\n  saved: false,\n  score: 1,\n  secure_media: null,\n  secure_media_embed: [object Object] { ... },\n  selftext: \"\",\n  selftext_html: null,\n  spoiler: false,\n  stickied: false,\n  subreddit: \"pics\",\n  subreddit_id: \"t5_2qh0u\",\n  subreddit_name_prefixed: \"r/pics\",\n  subreddit_type: \"public\",\n  suggested_sort: null,\n  thumbnail: \"https://b.thumbs.redditmedia.com/JlIMJkuHQsCnp4Gn7h_OT2AedCJd_QQ-otJm1PUi1cc.jpg\",\n  title: \"The beauty of budding stained glass.\",\n  ups: 1,\n  url: \"https://i.redd.it/vo690nyiwaly.jpg\",\n  user_reports: [],\n  visited: false\n}\n```\n\nWith this in mind, let's create the Android app.\n\n## The Android app\n\nOpen Android Studio and create a new project:\n\n![photo-feed-android-new-project](//images.contentful.com/1es3ne0caaid/2kEy98CwqwU4WgE80YaaGS/a642e35ef43dfeeeac4df7b21a4a7474/photo-feed-android-new-project.png)\n\nWe're not going to use anything special, so we can safely support a low API level:\n\n![photo-feed-android-target-devices](//images.contentful.com/1es3ne0caaid/2h6nr9CAqsOiOw0aiy0Y0S/6df1bbec533784c71e07ba2ef9edb2bd/photo-feed-android-target-devices.png)\n\nNext, create an initial empty activity:\n\n![photo-feed-android-add-activity](//images.contentful.com/1es3ne0caaid/3XL61GmHlCGkgAOygsw6CC/e484b4330af85cf3f440c0e4052bd45d/photo-feed-android-add-activity.png)\n\nAnd use the default name of `MainActivity` with backward compatibility:\n\n![photo-feed-android-customize-activity](//images.contentful.com/1es3ne0caaid/rjN5T2ZWnI6gGGMEUKSOQ/0819ee28e180cc3344f6b0a6c95fdbf6/photo-feed-android-customize-activity.png)\n\nOnce everything is set up, let's install the project dependencies. In the `dependencies` section of the `build.gradle` file of your application module add:\n\n```\ndependencies {\n    ...\n    compile 'com.android.support:recyclerview-v7:25.1.1'\n    compile 'com.github.bumptech.glide:glide:3.7.0'\n    compile 'com.pusher:pusher-java-client:1.4.0'\n    compile 'com.google.code.gson:gson:2.4'\n    ...\n}\n```\n\nAt the time of writing, the latest SDK version is 25, so that's my target SDK version.\n\nWe're going to use the `RecyclerView` component from the [Support Library](https://developer.android.com/topic/libraries/support-library/features.html), so make sure you have it installed (in *Tools -\u003e Android -\u003e SDK Manager -\u003e SDK Tools tab* the *Android Support Repository* must be installed).\n\nTo download the images we're going to use [Glide](https://github.com/bumptech/glide), one of the most popular open-source Android libraries for loading images.\n\nBy default, Glide uses a custom implementation of [HttpURLConnection](https://developer.android.com/reference/java/net/HttpURLConnection.html) to load images over the network. This is what we'll be using here. However, Glide also provides plugins to other popular networking libraries such as [Volley](https://developer.android.com/training/volley/index.html) or [OkHttp](http://square.github.io/okhttp/), you just need to add the corresponding dependencies:\n\n```\ndependencies {\n    ...\n    compile 'com.github.bumptech.glide:glide:3.7.0'\n    ...\n    // Volley\n    compile 'com.github.bumptech.glide:volley-integration:1.4.0@aar'\n    compile 'com.android.volley:volley:1.0.0'\n\n    // okhttp 3\n    compile 'com.github.bumptech.glide:okhttp3-integration:1.4.0@aar'\n    compile 'com.squareup.okhttp3:okhttp:3.6.0'\n\n    // okhttp 2\n    compile 'com.github.bumptech.glide:okhttp-integration:1.4.0@aar'\n    compile 'com.squareup.okhttp:okhttp:2.7.2'\n    ...\n}\n```\n\nSync the Gradle project so the modules can be installed and the project built.\n\nAlso, don't forget to add the `INTERNET` permission to the `AndroidManifest.xml` file. This is required so we can connect to Pusher and get the events in realtime:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.pusher.photofeed\"\u003e\n\n    \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n\n    \u003capplication\u003e\n        ...\n    \u003c/application\u003e\n\n\u003c/manifest\u003e\n```\n\nNow, modify the layout file [activity_main.xml](https://github.com/eh3rrera/photo-feed-pusher-android/blob/cd567318016a12ecada8b074ca988ae96568ed14/app/src/main/res/layout/activity_main.xml) so it looks like this:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/activity_main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"com.pusher.photofeed.MainActivity\"\u003e\n\n    \u003candroid.support.v7.widget.RecyclerView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/recycler_view\" /\u003e\n\u003c/RelativeLayout\u003e\n```\n\nWe're going to use a [RecyclerView](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html) to display the images, which we'll store in a list. Each item in this list is displayed in an identical manner, so let's define another layout file to inflate them.\n\nCreate the file [item.xml](https://github.com/eh3rrera/photo-feed-pusher-android/blob/cd567318016a12ecada8b074ca988ae96568ed14/app/src/main/res/layout/item.xml) with the following content:\n\n```\n\u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\" android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\u003e\n\n    \u003cImageView\n        android:id=\"@+id/photo\"\n        android:adjustViewBounds=\"true\"\n        android:layout_height=\"200dp\"\n        android:scaleType=\"centerCrop\"\n        android:layout_margin=\"2dp\"\n        android:layout_width=\"match_parent\"/\u003e\n\n\u003c/LinearLayout\u003e\n```\n\nHere, we're just using an [ImageView](https://developer.android.com/reference/android/widget/ImageView.html) component to display the image, with a height of `200dp` and a `scaleType` equal to `centerCrop`, to scale the image uniformly (maintain the image's aspect ratio) so both dimensions (width and height) will be equal to or larger than the corresponding dimension of the view (minus padding), among other properties.\n\nNow, to store the information for each image, which right now is just its URL, let's create a class, [com.pusher.photofeed.Photo](https://github.com/eh3rrera/photo-feed-pusher-android/blob/cd567318016a12ecada8b074ca988ae96568ed14/app/src/main/java/com/pusher/photofeed/Photo.java):\n\n```\npublic class Photo {\n\n    private String url;\n\n    public Photo(String url) {\n        this.url = url;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n}\n```\n\n`RecyclerView` works with an [Adapter](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html) to manage the items of its data source (in this case a list of `Photo` instances), and a [ViewHolder](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewHolder.html) to hold a view representing a single list item, so first create the class [com.pusher.photofeed.PhotoAdapter](https://github.com/eh3rrera/photo-feed-pusher-android/blob/cd567318016a12ecada8b074ca988ae96568ed14/app/src/main/java/com/pusher/photofeed/PhotoAdapter.java) with the following code:\n\n```\npublic class PhotoAdapter extends RecyclerView.Adapter\u003cPhotoAdapter.PhotoViewHolder\u003e {\n\n    private List\u003cPhoto\u003e photos;\n    private Context context;\n\n    public PhotoAdapter(Context context, List\u003cPhoto\u003e photos) {\n        this.photos = photos;\n        this.context = context;\n    }\n\n    public void addPhoto(Photo photo) {\n        // Add the event at the beggining of the list\n        photos.add(0, photo);\n        // Notify the insertion so the view can be refreshed\n        notifyItemInserted(0);\n    }\n\n    @Override\n    public int getItemCount() {\n        return photos.size();\n    }\n}\n```\n\nWe initialize the class with a list of `Photo` instances and a `Context` (Glide will need it), provide a method to add `Photo` instances at the beginning of the list (`addPhoto(Photo)`) and then notify the insertion so the view can be refreshed, and implement `getItemCount` so it returns the size of the list.\n\nThen, let's add the `ViewHolder` as an inner class. It references the `ImageView` component for each item in the list:\n\n```\npublic class PhotoAdapter extends RecyclerView.Adapter\u003cPhotoAdapter.PhotoViewHolder\u003e {\n\n    ...\n\n    public static class PhotoViewHolder extends RecyclerView.ViewHolder {\n\n        public ImageView photoImageView;\n\n        public PhotoViewHolder(View v) {\n            super(v);\n            photoImageView = (ImageView) v.findViewById(R.id.photo);\n        }\n    }\n}\n```\nAnd implement the methods `onCreateViewHolder` and `onBindViewHolder`:\n\n```\npublic class PhotoAdapter extends RecyclerView.Adapter\u003cPhotoAdapter.PhotoViewHolder\u003e {\n    ...\n\n    @Override\n\n\n    public PhotoViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n        View v = LayoutInflater.from(viewGroup.getContext())\n                .inflate(R.layout.item, viewGroup, false);\n        return new PhotoViewHolder(v);\n    }\n\n    @Override\n    public void onBindViewHolder(PhotoViewHolder holder, int position) {\n        Photo photo = photos.get(position);\n        String url = photo.getUrl();\n\n        Glide.with(context)\n                .load(url)\n                .asBitmap()\n                .error(R.drawable.logo)\n                .fitCenter()\n                .into(holder.photoImageView);\n    }\n}\n```\n\nIn the `onCreateViewHolder` method, we inflate the layout with the content of the `event_row.xml` file we created earlier, and in `onBindViewHolder`, we use Glide to fetch the image and display it in the `ImageView` of the item with the following method calls:\n- `with(Context)` initializes the loading processing passing the context.\n- `load(String)` loads the image from the specified URL.\n- `asBitmap()` makes sure that Glide receives an image that can be converted to a bitmap, otherwise the load will fail (for example if the URL represents an HTML page) and the `Drawable` passed to the `error` method will be shown instead.\n- `error(Drawable)` shows the `Drawable` if the load fails (in the [GitHub version of this app](https://github.com/eh3rrera/photo-feed-pusher-android), the [Pusher](https://pusher.com) logo, but you can add your own error image).\n- `fitCenter()` scales the image uniformly (maintaining the image's aspect ratio) so the image will fit in the given area.\n- `into(ImageView)` specifies the target image view into which the image will be placed.\n \nIn the class [com.pusher.photofeed.MainActivity](https://github.com/eh3rrera/photo-feed-pusher-android/blob/cd567318016a12ecada8b074ca988ae96568ed14/app/src/main/java/com/pusher/photofeed/MainActivity.java), let's start by defining the private fields we're going to need:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    private RecyclerView.LayoutManager lManager;\n    private PhotoAdapter adapter;\n    private Pusher pusher = new Pusher(\"50ed18dd967b455393ed\");\n    private static final String CHANNEL_NAME = \"pics\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ....\n    }\n}\n```\n\n`RecyclerView` works with a [LayoutManager](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.html) to handle the layout and scroll direction of the list. We declare the `PhotoAdapter`, the `Pusher` object and the identifier for the Pusher channel.\n\nInside the `onCreate` method, let's assign a [LinearLayoutManager](https://developer.android.com/reference/android/support/v7/widget/LinearLayoutManager.html) to the `RecyclerView` and create the `EventAdapter` with an empty list:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // Get the RecyclerView\n        RecyclerView recycler = (RecyclerView) findViewById(R.id.recycler_view);\n\n        // Use LinearLayout as the layout manager\n        lManager = new LinearLayoutManager(this);\n        recycler.setLayoutManager(lManager);\n\n        // Set the custom adapter\n        List\u003cPhoto\u003e photoList = new ArrayList\u003c\u003e();\n        adapter = new PhotoAdapter(this, photoList);\n        recycler.setAdapter(adapter);\n    }\n}\n```\n\nFor the Pusher part, we first subscribe to the channel:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...\n\n        Channel channel = pusher.subscribe(CHANNEL_NAME);\n}\n```\n\nThen, we create the listener that will be executed when a photo arrives:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n    ...\n    SubscriptionEventListener eventListener = new SubscriptionEventListener() {\n            @Override\n            public void onEvent(String channel, final String event, final String data) {\n                runOnUiThread(new Runnable() {\n                    @Override\n                    public void run() {\n                        System.out.println(\"Received event with data: \" + data);\n                        Gson gson = new Gson();\n                        Photo photo = gson.fromJson(data, Photo.class);\n                        adapter.addPhoto(photo);\n                        ((LinearLayoutManager)lManager).scrollToPositionWithOffset(0, 0);\n                    }\n                });\n            }\n        };\n    }\n}\n```\n\nHere, the JSON string that we receive is converted to a `Photo` object and is added to the adapter. Finally, we move to the top of the list.\n\nNext, bind the events to this listener and call the `connect` method on the Pusher object:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...\n        channel.bind(\"new-listing\", eventListener);\n\n        pusher.connect();\n    }\n}\n```\n\nThe `connect` method can take a listener that can be helpful to debug problems you might have:\n\n```\npusher.connect(new ConnectionEventListener() {\n    @Override\n    public void onConnectionStateChange(ConnectionStateChange change) {\n        System.out.println(\"State changed to \" + change.getCurrentState() +\n            \" from \" + change.getPreviousState());\n    }\n\n   @Override\n    public void onError(String message, String code, Exception e) {\n        System.out.println(\"There was a problem connecting!\");\n        e.printStackTrace();\n    }\n});\n```\n\nFinally, `MainActivity` also needs to implement the `onDestroy()` method so we can have the opportunity to unsubscribe from Pusher when the activity is destroyed:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        pusher.disconnect();\n    }\n}\n```\n\nAnd that's it. Let's test it.\n\n## Testing the app\n\nExecute the app, either on a real device or a virtual one:\n\n![photo-feed-android-deployment-target](//images.contentful.com/1es3ne0caaid/1Chktw9nByoMacoqUaQQMM/f98943c211db98bceb6463ccf6016573/photo-feed-android-deployment-target.png)\n\nYou'll be presented with an almost blank screen:\n\n![photo-feed-android-first-run](//images.contentful.com/1es3ne0caaid/1Xyz5bHsPakWyqwIQ4iyEi/c7efddcf967f418be9e5b5479a819d58/photo-feed-android-first-run.png)\n\nWhen a new image is uploaded to Reddit, it will show up in the app (it may take a while, depending on the amount of activity at the time):\n\n![photo-feed-android-demo](//images.contentful.com/1es3ne0caaid/NHDBgw4pkAO4qUuQeecmS/8d16ffabc71e1979b64573421292b8db/photo-feed-android-demo.gif)\n\n## Conclusion\n\nHopefully, this tutorial has shown you how simple it is to build a realtime photo feed in Android and Pusher. You can improve the app by changing the design, showing more information, or saving it to a database.\n\n## Further reading\n\n- [Pusher Realtime Reddit API](https://blog.pusher.com/pusher-realtime-reddit-api/)\n- [Pusher Java client](https://github.com/pusher/pusher-websocket-java)\n- [Glide](https://github.com/bumptech/glide)\n- [Glide integration libraries](https://github.com/bumptech/glide/wiki/Integration-Libraries)\n- [Activity's lifecycle](https://developer.android.com/guide/components/activities/activity-lifecycle.html)\n- [Creating Lists](https://developer.android.com/training/material/lists-cards.html)","metaTitle":"Build a photo feed in Android","metaDescription":"Build a photo feed like Instagram or Flickr for Android with realtime functionality. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1uj3D7dYIQGIcEuYQ4IoQy","type":"Entry","createdAt":"2018-02-27T12:24:37.718Z","updatedAt":"2018-03-01T18:14:03.237Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":9,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an anonymous chat app in Laravel","url":"anonymous-chat-app-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55LOucxD5Ycm4oGSGa0A2O","type":"Entry","createdAt":"2018-02-15T15:02:22.618Z","updatedAt":"2018-02-15T15:02:22.618Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Viraj Khatavkar","url":"viraj-khatavkar","email":"viraj@virajkhatavkar.com","twitter":"https://twitter.com/virajkhatavkar","github":"https://github.com/viraj-khatavkar","guestWriter":true}}],"projectRepo":"https://github.com/viraj-khatavkar/public-anonymous-chat-app-laravel-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-03-15","description":"Create a realtime public anonymous group chat app using Laravel and Pusher.","prerequisite":"A basic understanding of Laravel and Vue.js is needed to follow this tutorial.","content":"Socializing with other users has been a trend for past few years and it is not going to go away. Having an anonymous public chat application where we can communicate within a group, put forth our opinions without the fear of leaking our identity could be a great boon to many users.\n\nToday, we will create a realtime Public Anonymous Group Chat App using [Laravel](https://laravel.com/) and [Pusher](https://pusher.com/). With the release of [Echo](https://laravel.com/docs/5.4/broadcasting), Laravel has provided an out of the box solution for implementing a realtime chat application using event broadcasting. It is quite simple to get started in a matter of few minutes.\n\n## Setup an app on Pusher\n\nWe need to [sign up on Pusher](https://pusher.com/signup) and create a new app.\n\n![anonymous-chat-app-laravel-create-app](//images.contentful.com/1es3ne0caaid/4JeVuKhm9OoKO2iUmYaSYO/59881724483f5c96039871268f95a38b/anonymous-chat-app-laravel-create-app.png)\n\n## Install Laravel, Pusher SDK and Echo\n\nFirst, we will grab a fresh copy of Laravel:\n\n```\nlaravel new public-anonymous-chat-laravel-pusher\n```\n\nThis will install the latest version of the Laravel framework and download the necessary dependencies. Next, we will install the [Pusher PHP SDK](https://github.com/pusher/pusher-http-php) using [Composer](https://getcomposer.org/download/):\n\n```\ncomposer require pusher/pusher-php-server\n```\n\nNext, we will install the JavaScript dependencies:\n\n```\nnpm install\n```\n\nNow, we need to install two JavaScript libraries necessary for realtime event broadcasting: Laravel Echo and Pusher JS\n\n```\nnpm install --save laravel-echo pusher-js\n```\n\n## Configuration\n\nFirst, we need to set the `APP_ID`, `APP_KEY`, `APP_SECRET` and `APP_CLUSTER` in the environment file. We can get these details in our Pusher [app dashboard](https://dashboard.pusher.com/):\n\n ```\n# .env\n\nBROADCAST_DRIVER=pusher\n\nPUSHER_APP_ID=your-pusher-app-id\nPUSHER_APP_KEY=your-pusher-app-key\nPUSHER_APP_SECRET=your-pusher-app-secret\nPUSHER_APP_CLUSTER=your-pusher-app-cluster\n```\n\nNext, we need to create a fresh Echo instance in our applications's JavaScript. We can do this at the bottom of our `resources/assets/js/bootstrap.js` file:\n\n```\nimport Echo from \"laravel-echo\"\n\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: 'your-pusher-app-key',\n    cluster: 'ap2',\n    encrypted: true\n});\n```\n\n## Our application\n\nWe will implement a feature wherein a user can anonymously chat with other users. The core feature is to let the users chat without revealing their identity. It being a public chat room, any user visiting the page would be able to chat with other users without the need of any authentication.\n\n## Migrations\n\nNext, we need a `conversations` table to record all the messages sent by a user. Let us create a model and migration:\n\n```\nphp artisan make:model Conversation -m\n```\nThe `conversations` table would require the following fields:\n\n1. A field to store body of each message\n2. A field to store a random anonymous name for the user\n \nBelow is our migration file for the `conversations` table:\n\n```\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateConversationsTable extends Migration\n{\n\n    public function up()\n    {\n        Schema::create('conversations', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003etext('message');\n            $table-\u003estring('user');\n            $table-\u003etimestamps();\n        });\n    }\n\n    public function down()\n    {\n        Schema::dropIfExists('conversations');\n    }\n}\n```\n## Recording anonymous messages\n\nTo record messages anonymously, we need to generate and store a random username for each message. First, we will create a `ConversationController`:\n\n```\nphp artisan make:controller ConversationController\n```\nNext, we will record each message entry into a database. A random username will be assigned to the message from an array of anonymous usernames.\n\n```\n# routes/api.php\n\nRoute::post('conversations/store', 'ConversationController@store');\n\n\n# ConversationController.php\n\npublic function store()\n{\n    $random_usernames = [\n        'Anonymous',\n        'Someone',\n        'Some Girl',\n        'Some Boy',\n        'Mr. X',\n        'Mr. Y',\n        'Mr. ABC',\n        'Ms. A',\n        'Ms. B',\n        'Ms. C',\n    ];\n\n    $conversation = Conversation::create([\n        'message' =\u003e request('message'),\n        'user' =\u003e $random_usernames[array_rand($random_usernames)],\n    ]);\n}\n```\nNow, a random username from the array will be assigned to each message. Let us create a conversation and check:\n\n```\n\u003e\u003e\u003e Conversation::all();\n=\u003e Illuminate\\Database\\Eloquent\\Collection {#687\n     all: [\n       App\\Conversation {#688\n         id: 1,\n         message: \"Some comment\",\n         user: \"Anonymous\",\n         created_at: \"2017-02-28 12:09:38\",\n         updated_at: \"2017-02-28 12:09:38\",\n       },\n       App\\Conversation {#689\n         id: 2,\n         message: \"Another Comment\",\n         user: \"Some Girl\",\n         created_at: \"2017-02-28 12:09:43\",\n         updated_at: \"2017-02-28 12:09:43\",\n       },\n     ],\n   }\n```\nAs we can see, a random username is assigned to both the comments in the above results.\n\n## Broadcasting Messages\n\nWhenever a new message is recorded, we need to fire an event which would be broadcast over Pusher. For broadcasting an event, it should implement the `ShouldBroadcast` interface. Let us first create the `NewMessage` event:\n\n```\nphp artisan make:event NewMessage\n```\n### broadcastOn method\n\nThe event should implement a `broadcastOn` method. This method should return the channels to which the event will be broadcast.\n\nOur application is publicly available to anyone. Anyone can join and chat anonymously. We will not have any authorization for users to listen or send messages. Hence, we will simply use the public `Channel`:\n\n```\nnamespace App\\Events;\n\nuse App\\Conversation;\nuse Illuminate\\Broadcasting\\Channel;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass NewMessage implements ShouldBroadcast\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    public $conversation;\n\n    /**\n     * Create a new event instance.\n     *\n     * @return void\n     */\n    public function __construct(Conversation $conversation)\n    {\n        $this-\u003econversation = $conversation;\n    }\n\n    /**\n     * Get the channels the event should broadcast on.\n     *\n     * @return Channel|array\n     */\n    public function broadcastOn()\n    {\n        return new Channel('public-chat');\n    }\n}\n```\nNow, we need to start our queue to actually listen for jobs and broadcast any events that are recorded. We can use the database queue listener on our local environment:\n\n```\nphp artisan queue:listen\n```\nNext, we need to broadcast this event to other users on the same channel. Let us use the `broadcast` helper provided by Laravel to fire the event whenever a new message is recorded:\n\n```\n# ConversationController.php\n\npublic function store()\n{\n    $random_usernames = [\n        'Anonymous',\n        'Someone',\n        'Some Girl',\n        'Some Boy',\n        'Mr. X',\n        'Mr. Y',\n        'Mr. ABC',\n        'Ms. A',\n        'Ms. B',\n        'Ms. C',\n    ];\n\n    $conversation = Conversation::create([\n        'message' =\u003e request('message'),\n        'user' =\u003e $random_usernames[array_rand($random_usernames)],\n    ]);\n\n    broadcast(new NewMessage($conversation))-\u003etoOthers();\n}\n```\n\n## Listening to new messages\n\nInstallation and configuration of Laravel Echo is a must before we can start listening to new messages. We have covered the process in detail in the above section of this article. Please go through it if you might have skipped it.\n\nBeing a public anonymous app, we can listen to new messages on a public channel using `Echo.channel(channel)`:\n\n```\nlisten() {\n    Echo.channel('public-chat')\n        .listen('NewMessage', (e) =\u003e {\n            this.conversations.push(e.conversation);\n        });\n}\n```\n\nNow, whenever a new message is recorded, it is broadcast over Pusher. Next, we listen to that channel and push the new conversations to our conversations array in our Vue component.\n\nBelow is the JavaScript part of our Example component written using `Vue.js`\n\n```\n\u003cscript\u003e\n    export default {\n        data() {\n            return {\n                conversations: [],\n                message: '',\n            }\n        },\n        mounted() {\n            this.getConversations();\n            this.listen();\n        },\n        methods: {\n            store() {\n                axios.post('/api/conversations/store', {\n                    message: this.message\n                })\n                .then((response) =\u003e {\n                    this.message = '';\n                    this.conversations.push(response.data);\n                });\n            },\n            getConversations() {\n                axios.get('/api/conversations', {})\n                .then((response) =\u003e {\n                    this.conversations = response.data;\n                });\n            },\n            listen() {\n                Echo.channel('public-chat')\n                    .listen('NewMessage', (e) =\u003e {\n                        this.conversations.push(e.conversation);\n                    });\n            }\n        }\n    }\n\u003c/script\u003e\n```\n\nBelow is the demonstration of our functionality:\n\n![anonymous-chat-app-laravel-demo](//images.contentful.com/1es3ne0caaid/12gnlFLEpEsQk02COqygys/13d68b0025fc4715d76893e2ca0fe96e/anonymous-chat-app-laravel-demo.gif)\n\n## Conclusion\n\nIn this article, we have demonstrated how to build an anonymous chat app with Laravel and Vue.js. We have covered the configuration options necessary to get started, and the examples above should help you fill in the gaps and give an overview of some of the other configuration options available to you.","metaTitle":"Build an anonymous chat app in Laravel","metaDescription":"Build an anonymous chat app using Laravel and Vue.js. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"61wyKG0cMwASIUy6GiykY0","type":"Entry","createdAt":"2018-02-22T15:04:11.935Z","updatedAt":"2018-03-01T18:09:57.384Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build online presence into your Laravel app","url":"online-presence-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55LOucxD5Ycm4oGSGa0A2O","type":"Entry","createdAt":"2018-02-15T15:02:22.618Z","updatedAt":"2018-02-15T15:02:22.618Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Viraj Khatavkar","url":"viraj-khatavkar","email":"viraj@virajkhatavkar.com","twitter":"https://twitter.com/virajkhatavkar","github":"https://github.com/viraj-khatavkar","guestWriter":true}}],"projectRepo":"https://github.com/viraj-khatavkar/user-status-update-laravel-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2017-03-13","description":"Build online presence into your Laravel app with Pusher.","prerequisite":"A basic understanding of Laravel is needed to follow this tutorial. The tutorial will assume you’re starting a new Laravel 5.4 app.","content":"Realtime status update, particularly without polling our application for any updates, has always been a challenge. To that end, Laravel released its 5.4 version recently with a new broadcasting library: Echo.\n\nInstant messaging is the minimum feature requirement in any social network. With Laravel Echo and its broadcasting features, it is possible to implement features with realtime status updates like *online* or *offline* in matter of a few minutes.\n\n## Setup an app on Pusher\n\nWe need to [sign up on Pusher](https://pusher.com/signup) and create a new app:\n\n![online-presence-laravel-create-pusher-app](//images.contentful.com/1es3ne0caaid/5f92QXfpDiU02m2AK48CS0/bf8e90962701acda5f785ee00663cefd/online-presence-laravel-create-pusher-app.png)\n\n## Install Laravel, Pusher SDK and Echo\n\nFirst, we will grab a fresh copy of Laravel:\n\n```\nlaravel new user-status-update-laravel-pusher\n```\n\nThis will install the latest version of the Laravel framework and download the necessary dependencies. Next, we will install the [Pusher PHP SDK](https://github.com/pusher/pusher-http-php) using [Composer](https://getcomposer.org/download/):\n\n```\ncomposer require pusher/pusher-php-server\n```\nNext, we will install the JavaScript dependencies:\n\n```\nnpm install\n```\nNow, we need to install two JavaScript libraries necessary for realtime event broadcasting: Laravel Echo and Pusher JS\n\n```\nnpm install --save laravel-echo pusher-js\n```\nWe require some form of user authentication mechanism to demonstrate the functionality. Let us use the default authentication scaffolding provided by Laravel:\n\n```\nphp artisan make:auth\n```\n## Configuration\n\nFirst, we need to set the `APP_ID`, `APP_KEY`, `APP_SECRET` and `APP_CLUSTER` in the environment file. We can get these details in our Pusher [app dashboard](https://dashboard.pusher.com/):\n\n``` \n# .env\n\nBROADCAST_DRIVER=pusher\n\nPUSHER_APP_ID=your-pusher-app-id\nPUSHER_APP_KEY=your-pusher-app-key\nPUSHER_APP_SECRET=your-pusher-app-secret\nPUSHER_APP_CLUSTER=your-pusher-app-cluster\n```\nNext, we need to create a fresh Echo instance in our applications's JavaScript. We can do so at the bottom of our `resources/assets/js/bootstrap.js` file:\n\n```\nimport Echo from \"laravel-echo\"\n\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: 'your-pusher-app-key',\n    cluster: 'ap2',\n    encrypted: true\n});\n```\n## Our application\n\nWe will implement a feature where a user can see whether their friend is *online* or *offline* (similar to what WhatsApp does) and update the status of a user in realtime. We will concentrate on the code necessary for implementing the status update feature in realtime - we will not cover anything relating to implementing a chat functionality using Laravel. The code is available on a [Github repository](https://github.com/viraj-khatavkar/user-status-update-laravel-pusher) for cloning and understanding purposes.\n\n## Migrations\n\nWe need to add some extra fields to the default migration of the `users` table:\n\n1. A field to store the status of user - `online` or `offline`\n2. A field to store the token for authenticating API requests\n \nBelow is the migration for our `users` table:\n\n```\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003estring('name');\n            $table-\u003estring('email')-\u003eunique();\n            $table-\u003estring('password');\n            $table-\u003estring('api_token');\n            $table-\u003estring('status')-\u003edefault('online');\n            $table-\u003erememberToken();\n            $table-\u003etimestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('users');\n    }\n}\n```\n## Online Status\n\nWhenever a user is active on the page, we subscribe to the `chat` channel and assume that a user is online. In the `joining` callback, we trigger an API request to update the user's status to *online*:\n\n```\nEcho.join('chat')\n    .joining((user) =\u003e {\n        axios.put('/api/user/'+ user.id +'/online?api_token=' + user.api_token, {});\n    });\n```\n`join` is used when we want to join a presence channel. Presence channels are automatically private channels. We do need to authenticate them.\n\n`joining` will be executed whenever a new user joins the `chat` channel.\n\nNext, we broadcast the `UserOnline` event:\n\n```\n# api.php\n\nRoute::middleware('auth:api')-\u003eput('user/{user}/online', 'UserOnlineController');\n\n\n# UserOnlineController.php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\User;\nuse App\\Events\\UserOnline;\nuse Illuminate\\Http\\Request;\n\nclass UserOnlineController extends Controller\n{\n    public function __invoke(User $user)\n    {\n        $user-\u003estatus = 'online';\n        $user-\u003esave();\n\n        broadcast(new UserOnline($user));\n    }\n}\n```\nWhenever a user comes online, we need to fire an event which will be broadcast over Pusher to a specific presence channel. For broadcasting an event, it should implement the `ShouldBroadcast` interface. Let us first create the `UserOnline` event:\n\n```\nphp artisan make:event UserOnline\n```\n### broadcastOn method\n\nThe event should implement a `broadcastOn` method. This method should return the presence channel to which the event should be broadcast. All public properties in the event will be automatically broadcast to every user listening on the `chat` channel.\n\n```\nnamespace App\\Events;\n\nuse App\\User;\nuse Illuminate\\Broadcasting\\Channel;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Broadcasting\\PresenceChannel;\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass UserOnline implements ShouldBroadcast\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    public $user;\n\n    public function __construct(User $user)\n    {\n        $this-\u003euser = $user;\n    }\n\n    public function broadcastOn()\n    {\n        return new PresenceChannel('chat');\n    }\n}\n```\nNext, we need to start our queue to actually listen for jobs and broadcast any events that are recorded. We can use the database queue listener on our local environment:\n\n```\nphp artisan queue:listen\n```\n### Listening for online status\n\nIn our JavaScript, we need to listen to the `UserOnline` event to update the status in realtime:\n\n```\nEcho.join('chat')\n    .listen('UserOnline', (e) =\u003e {\n        this.friend = e.user;\n    })\n```\nNow, whenever a user joins the `chat` channel, the status of user will be updated in the database and be broadcast over Pusher to other friends present on the same channel.\n\n## Offline Status\n\nSimilarly, whenever a user leaves the `chat` channel, we will update the user's status to *offline*:\n\n```\nEcho.join('chat')\n    .leaving((user) =\u003e {\n    axios.put('/api/user/'+ user.id +'/offline?api_token=' + user.api_token, {});\n    })\n```\nNext, we update the status in the database and broadcast the `UserOffline` event:\n\n```\n# api.php\nRoute::middleware('auth:api')-\u003eput('user/{user}/offline', 'UserOfflineController');\n\n\n# UserOfflineController.php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Events\\UserOffline;\nuse App\\User;\nuse Illuminate\\Http\\Request;\n\nclass UserOfflineController extends Controller\n{\n    public function __invoke(User $user)\n    {\n        $user-\u003estatus = 'offline';\n        $user-\u003esave();\n\n        broadcast(new UserOffline($user));\n    }\n}\n```\nLet us now create the `UserOffline` event:\n\n```\nphp artisan make:event UserOffline\n```\nBelow is our `UserOffline.php` event:\n\n```\nnamespace App\\Events;\n\nuse App\\User;\nuse Illuminate\\Broadcasting\\Channel;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Broadcasting\\PresenceChannel;\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass UserOffline implements ShouldBroadcast\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    public $user;\n\n    public function __construct(User $user)\n    {\n        $this-\u003euser = $user;\n    }\n\n    public function broadcastOn()\n    {\n        return new PresenceChannel('chat');\n    }\n}\n```\n### Listening for offline status\n\nWe need to listen to the `UserOffline` event to update the status in realtime:\n\n```\nEcho.join('chat')\n    .listen('UserOffline', (e) =\u003e {\n        this.friend = e.user;\n    });\n```\n### Bringing it all together\n\nBelow is our `Example` component which handles the realtime update of *online* and *offline* status of a user we are chatting with:\n\n```\nprops: ['user', 'user2'],\ndata() {\n    return {\n        friend: this.user2\n    }\n},\nmounted() {\n    this.listen();\n},\nmethods: {\n    listen() {\n        Echo.join('chat')\n            .joining((user) =\u003e {\n                axios.put('/api/user/'+ user.id +'/online?api_token=' + user.api_token, {});\n            })\n            .leaving((user) =\u003e {\n                axios.put('/api/user/'+ user.id +'/offline?api_token=' + user.api_token, {});\n            })\n            .listen('UserOnline', (e) =\u003e {\n                this.friend = e.user;\n            })\n            .listen('UserOffline', (e) =\u003e {\n                this.friend = e.user;\n            });\n    },        \n}\n```\n## Authorization\n\nEvery presence channel is a private channel. Laravel Echo will automatically call the specified authentication route. However, we still need to write the authentication logic which will actually authorize the user to listen to a particular channel.\n\nAuthorization logic is written in the `routes/channels.php`. The authorization logic for our `chat` channel is:\n\n```\nBroadcast::channel('chat', function ($user) {\n    return $user;\n});\n```\n\nWe are not going to return `true` or `false`. If the user is authenticated to listen on this presence channel, we will return an array of data that we want to be returned to that callback in the `listen` method.\n\nWe need to write the actual authorization logic which will check whether the user is allowed to access the specified chat room. If we don't write proper authorization logic, then anyone can listen to a `chat` channel and hijack our conversations.\n\nThe friend's status *(online or offline)* is shown at the top of the chat box in realtime as demonstrated below:\n\n![online-presence-laravel-demo](//images.contentful.com/1es3ne0caaid/5hKqE1rQveMkw88MmUacq2/bf8e90962701acda5f785ee00663cefd/online-presence-laravel-demo.gif)\n\n## Vue.js component\n\nThat's it! Now, the user's status will be broadcast and we can listen using our presence channel in realtime without the need to constantly poll our application.\n\nBelow is the JavaScript part of our Example component written using `Vue.js`\n\n```\nStatus - {{ friend.status }}\n\u003cinput type=\"text\" @keyup=\"whisper()\" /\u003e\n```\n\n```\n\u003cscript\u003e\n    export default {\n        props: ['user', 'user2'],\n        data() {\n            return {\n                friend: this.user2\n            }\n        },\n        mounted() {\n            this.listen();\n        },\n        methods: {\n            listen() {\n                Echo.join('chat')\n                    .joining((user) =\u003e {\n                        axios.put('/api/user/'+ user.id +'/online?api_token=' + user.api_token, {});\n                    })\n                    .leaving((user) =\u003e {\n                        axios.put('/api/user/'+ user.id +'/offline?api_token=' + user.api_token, {});\n                    })\n                    .listen('UserOnline', (e) =\u003e {\n                        this.friend = e.user;\n                    })\n                    .listen('UserOffline', (e) =\u003e {\n                        this.friend = e.user;\n                    });\n            }\n        }\n    }\n\u003c/script\u003e\n\n```\n## Conclusion\n\nIn this article, we have covered how to update the user's status in realtime using Laravel and Pusher. We have covered the configuration options necessary to get started, and the example above should help you fill in the gaps and give an overview of some of the other configuration options available to you.","metaTitle":"Build online presence into your Laravel app","metaDescription":"Build online presence into your application with Laravel, Echo and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1TxqLiHFt2E2g4iEuUMgC0","type":"Entry","createdAt":"2018-02-27T10:52:20.139Z","updatedAt":"2018-06-01T11:07:13.309Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live comments feature using Laravel","url":"live-comments-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55LOucxD5Ycm4oGSGa0A2O","type":"Entry","createdAt":"2018-02-15T15:02:22.618Z","updatedAt":"2018-02-15T15:02:22.618Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Viraj Khatavkar","url":"viraj-khatavkar","email":"viraj@virajkhatavkar.com","twitter":"https://twitter.com/virajkhatavkar","github":"https://github.com/viraj-khatavkar","guestWriter":true}}],"projectRepo":"https://github.com/viraj-khatavkar/live-commenting-pusher-laravel","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2017-03-10","description":"Create a live comments feature using Laravel and Pusher.","prerequisite":"A basic understanding of Laravel and Vue.js is needed to follow this tutorial.","content":"Live commenting allows users to see new comments from other users without reloading the page. This paves a way to have better collaboration and conversation between friends and collaborators. It brings dynamic feel to the application interface and a better usability.\n\nToday, we will create a live commenting system using [Laravel](https://laravel.com/) and [Pusher](https://pusher.com/). With the release of [Echo](https://laravel.com/docs/5.4/broadcasting), Laravel has provided an out of the box solution for implementing realtime data synchronisation using event broadcasting. It is simple and we can get started in a matter of few minutes.\n\nA basic understanding of Laravel and Vue is needed to understand this tutorial.\n\n## Setup an app on Pusher\n\nWe need to [sign up on Pusher](https://pusher.com/signup) and create a new app.\n\n![live-comments-laravel-create-app](//images.contentful.com/1es3ne0caaid/D7dQh1tlxAIGC0eiWyqW2/aae782335d89328cf3d4a322efcaed33/live-comments-laravel-create-app.png)\n\n## Install Laravel, Pusher SDK and Echo\n\nFirst, we will grab a fresh copy of Laravel:\n\n```\nlaravel new live-commenting-pusher-laravel\n```\n\nThis will install the latest version of the Laravel framework and download the necessary dependencies. Next, we will install the [Pusher PHP SDK](https://github.com/pusher/pusher-http-php) using [Composer](https://getcomposer.org/download/):\n\n```\ncomposer require pusher/pusher-php-server\n```\n\nNext, we will install the JavaScript dependencies:\n\n```\nnpm install\n```\n\nNow, we need to install two Javascript libraries necessary for realtime event broadcasting: Laravel Echo and Pusher JS\n\n```\nnpm install --save laravel-echo pusher-js\n```\n\nWe require some form of user authentication mechanism to demonstrate the functionality. Let us use the default authentication scaffolding provided by Laravel:\n\n```language-bash\nphp artisan make:auth\n```\n\n## Configuration\n\nFirst, we need to set the `APP_ID`, `APP_KEY`, `APP_SECRET` and `APP_CLUSTER` in the environment file. We can get these details in our Pusher [app dashboard](https://dashboard.pusher.com/):\n\n``` \n# .env\n\nBROADCAST_DRIVER=pusher\n\nPUSHER_APP_ID=your-pusher-app-id\nPUSHER_APP_KEY=your-pusher-app-key\nPUSHER_APP_SECRET=your-pusher-app-secret\nPUSHER_APP_CLUSTER=your-pusher-app-cluster\n```\n\nNext, we need to create a fresh Echo instance in our applications's JavaScript. We can do so at the bottom of our `resources/assets/js/bootstrap.js` file:\n\n```\nimport Echo from \"laravel-echo\"\n\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: 'your-pusher-app-key',\n    cluster: 'ap2',\n    encrypted: true\n});\n```\n\n## Our application\n\nWe will create a live commenting functionality for a video similar to what YouTube does. The core feature is the number of users active on this page and whenever a user comments on the video, it will be automatically broadcasted as a feed of the comments to all the viewers who are viewing this video. We will not cover anything relating to writing CRUD functionality using Laravel. We will concentrate on the code necessary for implementing the live commenting feature. The code is available on a [Github repository](https://github.com/viraj-khatavkar/live-commenting-pusher-laravel) for cloning and understanding purposes.\n\n## Online users\n\nWe will now show the number of users who are currently online on the video page. This is a typical feature where we show a message: **2 users watching now**. Whenever a new user joins or leaves the page, the count is automatically updated. Let us implement that with Echo and it is super simple. Let us go and fill out our `listen` method in the `Example` Vue component.\n\n```\nlisten() {\n    Echo.join('video')\n        .here((users) =\u003e {\n            this.count = users.length;\n        })\n        .joining((user) =\u003e {\n            this.count++;\n        })\n        .leaving((user) =\u003e {\n            this.count--;\n        });\n}\n```\n\n`join` is used when we want to join a presence channel and that is used to tell us who else is on the page. Presence channels are automatically private channels. We do need to authenticate them.\n\n`here` gives us a list of users that are also present on the same page.\n\n`joining` will be executed whenever a new user joins the channel or page in the above scenario.\n\n`leaving` will be executed whenever a user leaves the channel.\n\nBelow is the demonstration where the count of users present on the page is updated automatically when a user leaves or joins the page.\n\n![live-comments-laravel-demo](//images.contentful.com/1es3ne0caaid/2o6B0UKR9GSqcKMouGomsE/053b5976ca9adb65011d16ddb406897c/live-comments-laravel-demo.gif)\n\n## Migrations\n\nNext, we need a `comments` table where we can store all the comments for the video.\n\n```\nphp artisan make:model Comment -m\n```\n\nThe `comments` table would require the following fields:\n\n1. Body of each comment\n2. A field to link the comment to the user that created it\n3. A field to link the comment to the video for which it is posted\n \nBelow is the migration for our `comments` table:\n\n```\n\u003c?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateCommentsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('comments', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003etext('body');\n            $table-\u003einteger('video_id')-\u003eunsigned();\n            $table-\u003einteger('user_id')-\u003eunsigned();\n            $table-\u003etimestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('comments');\n    }\n}\n```\n\n## Broadcasting new comments\n\nWhenever a new comment is created, we need to fire an event which will be broadcasted over Pusher to a specific presence channel. For broadcasting an event, it should implement the `ShouldBroadcast` interface. Let us first create the `NewComment` event:\n\n```\nphp artisan make:event NewComment\n```\n\n### broadcastOn method\n\nThe event should implement a `broadcastOn` method. This method should return the presence channel to which the event should be broadcasted.\n\n```\nnamespace App\\Events;\n\nuse App\\Comment;\nuse Illuminate\\Broadcasting\\Channel;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Broadcasting\\PresenceChannel;\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass NewComment implements ShouldBroadcast\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    public $comment;\n\n    public function __construct(Comment $comment)\n    {\n        $this-\u003ecomment = $comment;\n    }\n\n    public function broadcastOn()\n    {\n        return new PresenceChannel('video');\n    }\n\n    public function broadcastWith()\n    {\n        return [\n            'id' =\u003e $this-\u003ecomment-\u003eid,\n            'body' =\u003e $this-\u003ecomment-\u003ebody,\n            'user' =\u003e [\n                'name' =\u003e $this-\u003ecomment-\u003euser-\u003ename,\n                'id' =\u003e $this-\u003ecomment-\u003euser-\u003eid,\n            ],\n        ];\n    }\n}\n```\nNext, we need to start our queue to actually listen for jobs and broadcast any events that are recorded. We can use the database queue listener on our local environment:\n\n```\nphp artisan queue:listen\n```\n\n### Broadcast the event\n\nWhenever a new comment is created, we will broadcast the `NewComment` event using the `broadcast` helper:\n\n```\npublic function store(Video $video)\n{\n    $comment = $video-\u003ecomments()-\u003ecreate([\n        'body' =\u003e request('body'),\n        'user_id' =\u003e auth()-\u003euser()-\u003eid,\n        'video_id' =\u003e $video-\u003eid\n    ]);\n\n    $comment = Comment::where('id', $comment-\u003eid)-\u003ewith('user')-\u003efirst();\n\n    broadcast(new NewComment($comment))-\u003etoOthers();\n\n    return $comment;\n}\n```\n\nWhenever we create a new comment, we push it to the `comments` variable so that it is reflected instantly for the user. If we do not use the `toOthers` method, then the event would also be broadcasted to the user who has created it. This would create a list of duplicate comments.\n\n`toOthers` allows you to exclude the current user from the broadcast's recipients.\n\n## Listening for new comments on the presence channel\n\nInstallation and configuration of Laravel Echo is a must before we can start listening to new comments. We have covered the process in detail in the above section of this article. Please go through it if you might have skipped it.\n\n```\nEcho.join('video')\n    .here((users) =\u003e {\n        this.count = users.length;\n    })\n    .joining((user) =\u003e {\n        this.count++;\n    })\n    .leaving((user) =\u003e {\n        this.count--;\n    })\n    .listen('NewComment', (e) =\u003e {\n        this.comments.unshift(e);\n    });\n```\n\n### Authorization\n\nEvery presence channel is a private channel. Laravel Echo will automatically call the specified authentication route. But, we still need to write the authentication logic which will actually authorize the user to listen to a particular channel.\n\nAuthorization logic is written in the `routes/channels.php`. The authorization logic for our `video` channel is:\n\n```\nBroadcast::channel('video', function ($user) {\n    return [\n        'id' =\u003e $user-\u003eid,\n        'name' =\u003e $user-\u003ename,\n    ];\n});\n```\n\nWe are not going to return `true` or `false`. If the user is authenticated to listen on this presence channel we are going to return an array of data that we want to be returned to that callback in the `listen` method.\n\nYou can write the authentication logic as required for your application in the above callback and return null if authorization fails.\n\n## Vue Component\n\nThat's it! Now, whenever a new comment is created, it will be broadcast and we can listen using our presence channel.\n\nBelow is our Example component written using `Vue.js`\n\n```\n\u003ctemplate\u003e\n\u003cdiv class=\"container\"\u003e\n    \u003cdiv class=\"row\"\u003e\n    \u003cdiv class=\"col-sm-5\"\u003e\n            \u003cdiv class=\"panel panel-primary\"\u003e\n                \u003cdiv class=\"panel-heading\" id=\"accordion\"\u003e\n                    \u003cspan class=\"glyphicon glyphicon-comment\"\u003e\u003c/span\u003e Chat\n                    \u003cdiv class=\"btn-group pull-right\"\u003e\n                        \u003ca type=\"button\" class=\"btn btn-default btn-xs\" data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapseOne\"\u003e\n                            \u003cspan class=\"glyphicon glyphicon-chevron-down\"\u003e\u003c/span\u003e\n                        \u003c/a\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003cdiv class=\"panel-collapse collapse\" id=\"collapseOne\"\u003e\n                \u003cdiv class=\"panel-body\"\u003e\n                    \u003cul class=\"chat\"\u003e\n                        \u003cli class=\"left clearfix\" v-for=\"comment in comments\"\u003e\n                        \u003cspan class=\"chat-img pull-left\"\u003e\n                            \u003cimg src=\"http://placehold.it/50/55C1E7/fff\u0026text=U\" alt=\"User Avatar\" class=\"img-circle\" /\u003e\n                        \u003c/span\u003e\n                            \u003cdiv class=\"chat-body clearfix\"\u003e\n                                \u003cdiv class=\"header\"\u003e\n                                    \u003cstrong class=\"primary-font\"\u003e{{ comment.user.name }}\u003c/strong\u003e \u003csmall class=\"pull-right text-muted\"\u003e\n                                        \u003cspan class=\"glyphicon glyphicon-time\"\u003e\u003c/span\u003e12 mins ago\u003c/small\u003e\n                                \u003c/div\u003e\n                                \u003cp\u003e\n                                    {{ comment.body }}\n                                \u003c/p\u003e\n                            \u003c/div\u003e\n                        \u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"panel-footer\"\u003e\n                    \u003cdiv class=\"input-group\"\u003e\n                        \u003cinput id=\"btn-input\" type=\"text\" class=\"form-control input-sm\" placeholder=\"Type your message here...\" v-model=\"body\" @keyup.enter=\"postComment()\" /\u003e\n                        \u003cspan class=\"input-group-btn\"\u003e\n                            \u003cbutton class=\"btn btn-warning btn-sm\" id=\"btn-chat\" @click.prevent=\"postComment()\"\u003e\n                                Send\u003c/button\u003e\n                        \u003c/span\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"col-sm-7\"\u003e\n            \u003ciframe width=\"640\" height=\"280\" src=\"https://www.youtube.com/embed/Xip2TgAEVz4\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-sm-12\"\u003e\n            \u003ch1\u003e\n                {{ count }} watching now\n            \u003c/h1\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\u003c/template\u003e\n\n\u003cscript\u003e\n    export default {\n        props: ['user', 'video'],\n        data() {\n            return {\n                viewers: [],\n                comments: [],\n                body: 'Your comment',\n                count: 0\n            }\n        },\n        mounted() {\n            this.listen();\n            this.getComments();\n        },\n        methods: {\n            getComments() {\n                axios.get('/api/videos/'+ this.video.id +'/comments?api_token=' + this.user.api_token, {})\n                .then((response) =\u003e {\n                    this.comments = response.data;\n                });\n            },\n            postComment() {\n                axios.post('/api/videos/'+ this.video.id +'/comment?api_token=' + this.user.api_token, {\n                    body: this.body\n                })\n                .then((response) =\u003e {\n                    this.comments.unshift(response.data);\n                });\n            },\n            listen() {\n                Echo.join('video')\n                    .here((users) =\u003e {\n                        this.count = users.length;\n                    })\n                    .joining((user) =\u003e {\n                        this.count++;\n                    })\n                    .leaving((user) =\u003e {\n                        this.count--;\n                    })\n                    .listen('NewComment', (e) =\u003e {\n                        this.comments.unshift(e);\n                    });\n            }\n        }\n    }\n\u003c/script\u003e\n```\nBelow is the image demonstrating the workflow of our system:\n\n![live-comments-laravel-workflow](//images.contentful.com/1es3ne0caaid/mXQPhDqOqG4UmicYGeWa6/aafa43a2d287bf3f8dd1ec124f1eef6e/live-comments-laravel-workflow.gif)\n\n## Conclusion\n\nIn this article, we have covered how to create a live commenting system using Laravel and Pusher. We have covered the configuration options necessary to get started, and the example above should help you fill in the gaps and give an overview of some of the other configuration options available to you.","metaTitle":"Build a live comments feature using Laravel","metaDescription":"Create a live comments feature using Laravel and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3er1QaHNaUuCmkcCC8iAwA","type":"Entry","createdAt":"2018-02-22T15:02:41.959Z","updatedAt":"2018-02-28T14:35:17.882Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a Twitter feed using Swift","url":"twitter-feed-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/twitter-feed-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-03-08","description":"Build your own iOS realtime Twitter feed app and track a custom set of hashtags.","prerequisite":"A basic understanding of Swift and Node.js is needed to follow this tutorial.","content":"Every second, thousands of tweets are tweeted on Twitter. To make sense of it all, we can track what interests us by following tweets with certain hashtags. In this tutorial, we're going to build an iOS realtime Twitter feed app with Pusher to track a custom set of hashtags.\n\nIn the backend, we'll have a Node.js process listening for tweets that contain one or more defined hashtags. When we find one, we'll publish an object with the tweet information to a Pusher channel.\n\nOn the other hand, the iOS app will be listening for new tweets in that channel to add them to a feed. To keep things simple, the app will only show some basic information for each tweet. This is how the app looks like in action:\n\n![twitter-feed-swift-demo](//images.contentful.com/1es3ne0caaid/2r2ZcT6GEc6qkKqaUCQSi6/88fb467bf849b1fe4e3d11fb17fccfef/twitter-feed-swift-demo.gif)\n\nThe complete source code of the [Node.js process](https://github.com/eh3rrera/hashtags_pusher) and the [iOS app](https://github.com/eh3rrera/twitter-feed-pusher) is on Github for reference.\n\nLet's get started!\n\n## Setting up Pusher\n\nCreate a free account at [https://pusher.com/signup](https://pusher.com/signup).\n\nWhen you first log in, you'll be asked to enter some configuration options to create you app:\n\n![twitter-feed-swift-create-app](//images.contentful.com/1es3ne0caaid/1j4McgnNB04o4sWcY0iGSs/17445723edb998f36c55e192ba75cb34/twitter-feed-swift-create-app.png)\n\nEnter a name, choose *iOS* as your frontend tech, and *Node.js* as your backend tech. This will give you some sample code to get you started:\n\n![twitter-feed-swift-getting-started](//images.contentful.com/1es3ne0caaid/13G490Uqm62aWyogw20ueI/34aecf9f5674f2b7be3d4d0da8826863/twitter-feed-swift-getting-started.png)\n\nBut don't worry, this won't lock you into this specific set of technologies, you can always change them. With Pusher, you can use any combination of libraries.\n\nThen go to the *App Keys* tab to copy your App ID, Key, and Secret credentials, we'll need them later.\n\n## Setting up a Twitter app\n\nLog in to your Twitter account and go to [https:/apps.twitter.com/app/new](https://apps.twitter.com/app/new) to create a new application.\n\nYou'll have to enter the following:\n\n- **Name** (your application name, which shouldn't have to be taken, for instance, *pusher_hashtags_1*)\n- **Description** (your application description)\n- **Website** (your application's publicly accessible home page. We're not going to use it, so you can enter *http://127.0.0.1*).\n\n![twitter-feed-swift-application-management](//images.contentful.com/1es3ne0caaid/5V96LgoNBCOkWyAoauSIKI/f3bcdc07dbc8bdffa8854ab5bc8c0bd5/twitter-feed-swift-application-management.png)\n\nAfter you agree to Twitter's developer agreement, your application will be created.\n\nNow go to the *Keys and Access Token* section and create your access token by clicking on the *Create my access token* button:\n\n![twitter-feed-swift-access-token-twitter](//images.contentful.com/1es3ne0caaid/4L1r2YO2esG80A4KEIeIYe/32d4f648f45ea027ba6c50cef0851efe/twitter-feed-swift-access-token-twitter.png)\n\nSave your consumer key, consumer secret, access token, and access token secret since we'll need them later.\n\n# The backend\n\nWe'll get the tweets by using the [Twitter Streaming API](https://dev.twitter.com/streaming/overview) with the help of the [twit](https://github.com/ttezel/twit) library.\n\nYou can clone the [GitHub repository](https://github.com/eh3rrera/hashtags_pusher) and run `npm install` to set up dependencies.\n\nThen, create a `config.js` file from `config.sample.js` :\n\n``` \ncp config.js.sample config.js\n```\n\nAnd enter your Twitter and Pusher information:\n\n```\nmodule.exports = {\n  twitter: {\n    consumer_key        :  '\u003cINSERT_TWITTER_CONSUMER_KEY_HERE\u003e',\n    consumer_secret     :  '\u003cINSERT_TWITTER_CONSUMER_SECRET_HERE\u003e',\n    access_token        :  '\u003cINSERT_TWITTER_ACCESS_TOKEN_HERE\u003e',\n    access_token_secret :  '\u003cINSERT_TWITTER_ACCESS_TOKEN_SECRET_HERE\u003e',\n  },\n\n  pusher: {\n    appId      : '\u003cINSERT_PUSHER_APP_ID_HERE\u003e',  \n    key        : '\u003cINSERT_PUSHER_KEY_ID_HERE\u003e',\n    secret     : '\u003cINSERT_PUSHER_SECRET_ID_HERE\u003e',\n    encrypted  : true,\n  },\n\n  hashtagsToTrack: ['#nodejs', '#swift', '#ios', 'programming'],\n\n  channel: 'hashtags',\n\n  event: 'new_tweet',\n}\n```\n\nYou can also change the hashtags to track if you want.\n\nOur main file, `app.js`, is simple. After some setup code, we configure the Twitter stream to filter tweets by the hashtags to track:\n\n```\nconst config = require('./config');\nconst Twit = require('twit');\nconst Pusher = require('pusher');\n\nconst T = new Twit(config.twitter);\n\nconst pusher = new Pusher(config.pusher);\n\nconst stream = T.stream('statuses/filter', { track: config.hashtagsToTrack });\n```\n\nWhen a new tweet matches our conditions, we'll extract the properties our iOS client will need to create an object and publish it to a Pusher channel as a `new_tweet` event:\n\n```\n...\n\nstream.on('tweet', (tweet) =\u003e {\n  const message = {\n    message: tweet.text, \n    username: tweet.user.screen_name, \n    name: tweet.user.name, \n  };\n\n  pusher.trigger(config.channel, config.event, message);\n});\n```\n\nAnd that's all this process does, let's see how the iOS client is built.\n\n## Setting up the Xcode project\n\nWe'll be using iOS 10 and Swift 3 to build our app, so Xcode 8 is required.\n\nTo start, open Xcode and create a *Single View Application*:\n\n![twitter-feed-swift-single-view-application](//images.contentful.com/1es3ne0caaid/2ZuF7suPiwSysOIoyooSiW/87b7a3c694d7e6c34a291931d5e3276b/twitter-feed-swift-single-view-application.png)\n\nGive it a name, choose *Swift* as the language and *Universal* in the *Devices* option:\n\n![twitter-feed-swift-app-options](//images.contentful.com/1es3ne0caaid/48HHFtP1ocOsQEyi6GG2ii/80431e2f142b25ac36ec2542309faaa8/twitter-feed-swift-app-options.png)\n\nNow, we're going to install the project dependencies with [CocoaPods](https://cocoapods.org/). Close your Xcode project, and in a terminal window go to the top-level directory of your project and execute this command:\n\n``` \npod init\n```\n\nThis will create a text file named `Podfile` with some defaults, open it and add as dependencies `PusherSwift` and `AlamofireImage`. It should look like this:\n\n```\n# Uncomment the next line to define a global platform for your project\n# platform :ios, '9.0'\n\ntarget 'twitter_feed_pusher' do\n  # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\n  use_frameworks!\n\n  # Pods for twitter_feed_pusher\n  pod 'PusherSwift'\n  pod 'AlamofireImage'\n\nend\n```\n\nNow you can install the dependencies in your project with:\n\n``` \npod install\n```\n\nAnd from now on, make sure to open the generated Xcode workspace instead of the project file:\n\n``` \nopen twitter_feed_pusher.xcworkspace\n```\n\nFor apps like this, creating everything programmatically is easier. We won't use the *Interface Builder* or the storyboard file that Xcode creates (`Main.storyboard`).\n\nSo let's start by opening the file `AppDelegate.swift` to manually create the window in which our app is going to live and specify a `rootViewController`:\n\n```\nimport UIKit\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: \n        [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n\n        // Override point for customization after application launch.\n        window = UIWindow(frame: UIScreen.main.bounds)\n        window?.makeKeyAndVisible()\n\n        window?.rootViewController = UINavigationController(rootViewController: ViewController())\n\n        return true\n    }\n\n    ...\n}\n```\n\nIn the above code, we're using the `ViewController` file Xcode created for us.\n\nNow let's use a `UITableViewController`, this will give us for free an `UITableViewDataSource` and an `UITableViewDelegate`.\n\nOpen the `ViewController` class and make it extend from `UITableViewController`:\n\n```\nimport UIKit\n\nclass ViewController: UITableViewController {\n    ...\n}\n```\n\nIf you run the app at this point, you should see something like the following:\n\n![twitter-feed-swift-run-initial-app](//images.contentful.com/1es3ne0caaid/7MBJmAajjaYasoym4YqwQC/d7935ed935b1fdfda6ba1f61a34fbb73/twitter-feed-swift-run-initial-app.png)\n\nNow let's take a closer look at how the app is going to present a tweet. It has a profile image, the name of the user, the Twitter username, and the text of the tweet:\n\n![twitter-feed-swift-closer-look-tweet](//images.contentful.com/1es3ne0caaid/3zEvMcITzOaOSaI6mawQwq/797660ff6a69b7d4739458d861287d69/twitter-feed-swift-closer-look-tweet.png)\n\nSo let's create a new Swift file, `Tweet.swift`, to create a structure that will hold the tweet's information:\n\n```\nimport Foundation\n\nstruct Tweet {\n    let name: String\n    let username: String\n    let message: String\n}\n```\n\nWe don't have to create a property to hold the profile image URL, we can get it from the username.\n\nWe're going to need a custom cell class for our `UITableView`. Once again, create a new Swift file, this time with the name `TweetCell.swift` and the following content:\n\n```\nimport UIKit\n\nclass TweetCell: UITableViewCell {\n\n    override init(style: UITableViewCellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n}\n```\n\nTo simplify the layout, our cell is going to have a `UIImageView` for the image profile and a `UITextView` for the rest of the content, which will be formatted as an attributed string:\n\n![twitter-feed-swift-custom-cell-layout](//images.contentful.com/1es3ne0caaid/3MZ4jq3XIQCsOkIeQmGeWa/f1a5c3057fb08bf63d3fbbf925f7de0d/twitter-feed-swift-custom-cell-layout.png)\n\nSo let's add these views along with some properties:\n\n```\nclass TweetCell: UITableViewCell {\n\n    let profileImage: UIImageView = {\n        let imageView = UIImageView()\n        imageView.layer.cornerRadius = 5\n        imageView.clipsToBounds = true\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n\n        return imageView\n    }()\n\n    let messageText: UITextView = {\n        let textView = UITextView()\n        textView.translatesAutoresizingMaskIntoConstraints = false\n        textView.isUserInteractionEnabled = false\n\n        return textView\n    }()\n\n    ...\n}\n```\n\nIt's important to set `translatesAutoresizingMaskIntoConstraints` to `false` because we're going to use the [NSLayoutAnchor API](https://developer.apple.com/reference/uikit/nslayoutanchor) to position our views.\n\nLet's add the `UIImageView` at the top-left corner of the cell, with an offset of `12` points on both left and top, and a width and height of `50`:\n\n```\nclass TweetCell: UITableViewCell {\n\n    ...\n\n    override init(style: UITableViewCellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n\n    addSubview(profileImage)\n\n        profileImage.topAnchor.constraint(equalTo: self.topAnchor, constant: 12).isActive = true\n        profileImage.leftAnchor.constraint(equalTo: self.leftAnchor, constant: 12).isActive = true\n        profileImage.widthAnchor.constraint(equalToConstant: 50).isActive = true\n        profileImage.heightAnchor.constraint(equalToConstant: 50).isActive = true\n    }\n\n    ...\n}\n```\n\nAnd the `UITextView` at the left of the profile image, with a top and left offset of `4` points and using all the available space of the cell:\n\n```\nclass TweetCell: UITableViewCell {\n    ...\n\n    override init(style: UITableViewCellStyle, reuseIdentifier: String?) {\n        ...\n\n        addSubview(messageText)\n\n        messageText.topAnchor.constraint(equalTo: self.topAnchor, constant: 4).isActive = true\n        messageText.leftAnchor.constraint(equalTo: profileImage.rightAnchor, constant: 4).isActive = true\n        messageText.bottomAnchor.constraint(equalTo: self.bottomAnchor).isActive = true\n        messageText.rightAnchor.constraint(equalTo: self.rightAnchor).isActive = true\n    }\n\n    ...\n}\n```\n\nNow let's add a property observer so when an object of type `Tweet` is set on this cell, we can compose our attributed string and set the value of the profile image (don't forget to import `AlamofireImage`):\n\n```\nimport UIKit\nimport AlamofireImage\n\nclass TweetCell: UITableViewCell {\n\n    var tweet: Any? {\n        didSet {\n            guard let t = tweet as? Tweet else { return }\n\n            // Add the name in bold\n            let attributedText = NSMutableAttributedString(string: t.name, attributes: [NSFontAttributeName: UIFont.boldSystemFont(ofSize: 16)])\n\n            // Add the Twitter username in grey color (and a new line)\n            attributedText.append(NSAttributedString(string: \" @\\(t.username)\\n\", attributes: [NSFontAttributeName: UIFont.systemFont(ofSize: 14), NSForegroundColorAttributeName: UIColor.gray]))\n\n            // Modify the line spacing of the previous line so they look a litle separated\n            let paragraphStyle = NSMutableParagraphStyle()\n            paragraphStyle.lineSpacing = 5\n            let range = NSMakeRange(0, attributedText.string.characters.count)\n            attributedText.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: range)\n\n            // Add the message\n            attributedText.append(NSAttributedString(string: t.message, attributes: [NSFontAttributeName: UIFont.systemFont(ofSize: 14)]))\n\n            messageText.attributedText = attributedText\n\n            // Compose the image URL with the username and set it with AlamofireImage\n            let imageUrl = URL(string: \"https://twitter.com/\" + t.username + \"/profile_image\")\n            profileImage.af_setImage(withURL: imageUrl!)\n        }\n    }\n\n    ...\n}\n```\n\nNow, in the `ViewController` class, let's create a cell identifier, an array that will control our tweets and the Pusher object:\n\n```\nimport UIKit\nimport PusherSwift\n\nclass ViewController: UITableViewController {\n\n    let cellId = \"cellId\"\n    var tweets = [Tweet]()\n    var pusher: Pusher! = nil\n\n    ...\n}\n```\n\nSo we can register the type `TweetCell` and instantiate the Pusher object inside `viewDidLoad`:\n\n```\nclass ViewController: UITableViewController {\n\n    ...\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        navigationItem.title = \"Pusher Feed\"\n\n        tableView.register(TweetCell.self, forCellReuseIdentifier: cellId)\n\n        pusher = Pusher(\n            key: \"\u003cINSERT_YOUR_PUSHER_KEY_HERE\u003e\"\n        )\n\n\n    }\n}\n```\n\nWe will listen to new tweets by subscribing to the channel `hashtags` and binding the event `new_tweet` :\n\n```\nclass ViewController: UITableViewController {\n\n    ...\n\n    override func viewDidLoad() {\n\n        ...\n\n    let channel = pusher.subscribe(\"hashtags\")\n\n        let _ = channel.bind(eventName: \"new_tweet\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String : AnyObject] {\n\n                // Extract the Tweet information\n                let message = data[\"message\"] as! String\n                let name = data[\"name\"] as! String\n                let username = data[\"username\"] as! String\n\n                // Create a tweet\n                let tweet = Tweet(name: name, username: username, message: message)\n\n                // Insert it at the beginning of the array\n                self.tweets.insert(tweet, at: self.tweets.startIndex)\n\n                // Insert the new tweet at the beginning of the table and scroll to that position\n                let indexPath = IndexPath(row: 0, section: 0)\n                self.tableView.insertRows(at: [indexPath], with: UITableViewRowAnimation.automatic)\n                self.tableView.scrollToRow(at: indexPath, at: UITableViewScrollPosition.none, animated: true)\n            }\n        })\n\n        pusher.connect()\n    }\n}\n```\n\nThis way, we can extract the tweet information, create a `Tweet` instance and insert it in the array and in the `tableView` to display it.\n\nOf course, for this to happen, we also need to implement the following methods:\n\n```\nclass ViewController: UITableViewController {\n\n    ...\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n        return tweets.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: cellId, for: indexPath) as! TweetCell\n\n        // At this point, the didSet block will set up the cell's views\n        cell.tweet = tweets[indexPath.item]\n\n        return cell;\n    }\n}\n```\n\nOne last detail. The cells need to have a dynamic height to accommodate the text of the tweet. One easy way to achieve this is by disabling the scrolling on the cell's `UITextView`:\n\n```\nclass TweetCell: UITableViewCell  {\n\n    ...\n\n    let messageText: UITextView = {\n        let textView = UITextView()\n        ...\n\n        textView.isScrollEnabled = false\n\n        return textView\n    }()\n\n    ...\n}\n```\n\nEstimating an average row height, and setting the `rowHeight` property this way:\n\n```\nclass ViewController: UITableViewController {\n\n    ...\n\n    override func viewDidLoad() {\n        ...\n\n        tableView.estimatedRowHeight = 100.0\n        tableView.rowHeight = UITableViewAutomaticDimension\n\n        ...\n    }\n\n    ...\n}\n```\n\nAnd we're done!\n\n## Testing the app\n\nRun the iOS app in the simulator or in a real device:\n\n![twitter-feed-swift-first-run](//images.contentful.com/1es3ne0caaid/5zg4uzd7FK4Y80sUw6uCu8/4cbad8a8c9434bc3573b3d0cd426bf50/twitter-feed-swift-first-run.png)\n\nAnd execute the backend with:\n\n``` \nnode app.js\n```\n\nOr if you only want to test the app, you can use the [Pusher Debug Console on your dashboard](http://dashboard.pusher.com/):\n\n![twitter-feed-swift-debug-console](//images.contentful.com/1es3ne0caaid/38bSzl7HDiee028UQqeMKu/3037c291075ce328357c7a5b5be6d661/twitter-feed-swift-debug-console.png)\n\nWhen a `new_tweet` event is received in the Pusher channel, the new tweet will come up in the iOS app:\n\n![twitter-feed-swift-demo](//images.contentful.com/1es3ne0caaid/2r2ZcT6GEc6qkKqaUCQSi6/88fb467bf849b1fe4e3d11fb17fccfef/twitter-feed-swift-demo.gif)\n\n## Conclusion\n\nYou can find the final version of the backend [here](https://github.com/eh3rrera/hashtags_pusher) and the final version of the iOS app [here](https://github.com/eh3rrera/twitter-feed-pusher).\n\nHopefully, this tutorial has shown you how to build a Twitter feed for an iOS app with Pusher in an easy way. You can improve the app by showing more information or saving it to a database. \n\n## Further reading\n\n- [Pusher Swift client](https://github.com/pusher/pusher-websocket-swift)\n- [Twitter Streaming API](https://dev.twitter.com/streaming/overview)\n- [Twit Node.js library](https://github.com/ttezel/twit)\n- [Pain Free Constraints with Layout Anchors](http://useyourloaf.com/blog/pain-free-constraints-with-layout-anchors/)\n- [Property observers: didSet](https://www.hackingwithswift.com/read/8/5/property-observers-didset)\n- [Using Attributed Strings in Swift 3.0](https://makeapppie.com/2016/07/05/using-attributed-strings-in-swift-3-0)","metaTitle":"Build a Twitter feed using Swift","metaDescription":"Build your own iOS realtime Twitter feed application using Swift and Node.js and  learn how to track a custom set of hashtags."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5EyzdiGB7GQ8EIIeamWgUq","type":"Entry","createdAt":"2018-02-16T11:31:53.507Z","updatedAt":"2018-02-28T14:11:02.960Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime activity feed with Laravel","url":"activity-feed-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55LOucxD5Ycm4oGSGa0A2O","type":"Entry","createdAt":"2018-02-15T15:02:22.618Z","updatedAt":"2018-02-15T15:02:22.618Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Viraj Khatavkar","url":"viraj-khatavkar","email":"viraj@virajkhatavkar.com","twitter":"https://twitter.com/virajkhatavkar","github":"https://github.com/viraj-khatavkar","guestWriter":true}}],"projectRepo":"https://github.com/viraj-khatavkar/activity-feed-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2017-03-06","description":"Take advantage from Laravel power and build a live activity feed.","prerequisite":"A basic understanding of Laravel and Vue.js are needed to follow this tutorial.","content":"Activity feeds display our behaviour into an event-based timeline, so we can follow along with our actions as we experience a product. Having a realtime feed improves the user experience and gives instant data synchronisation relating to the actions taken by the user or their collaborators.\n\nToday, we will create a realtime Activity Feed using [Laravel](https://laravel.com/) and [Pusher](https://pusher.com/). With the release of [Echo](https://laravel.com/docs/5.4/broadcasting), Laravel has provided an out of the box solution for implementing a realtime data synchronisation using event broadcasting. It is simple and we can get started in a matter of few minutes.\n\n## Setup an app on Pusher\n\nWe need to [sign up to Pusher](https://pusher.com/signup) and create a new app.\n\n![activity-feed-laravel-create-app](//images.contentful.com/1es3ne0caaid/1EVNOby9rWgYGqyOsuky2S/bf8e90962701acda5f785ee00663cefd/activity-feed-laravel-create-app.png)\n\n## Install Laravel, Pusher SDK and Echo\n\nFirst, we will grab a fresh copy of Laravel:\n\n```\nlaravel new activity-feed-pusher\n```\n\nThis will install the latest version of the Laravel framework and download the necessary dependencies. Next, we will install the [Pusher PHP SDK](https://github.com/pusher/pusher-http-php) using [Composer](https://getcomposer.org/download/):\n\n```\ncomposer require pusher/pusher-php-server\n```\n\nNext, we will install the JavaScript dependencies:\n\n```\nnpm install\n```\nNow, we need to install two Javascript libraries necessary for realtime event broadcasting: Laravel Echo and Pusher JS\n\n```\nnpm install --save laravel-echo pusher-js\n```\n\nWe require some form of user authentication mechanism to demonstrate the functionality. Let us use the default authentication scaffolding provided by Laravel:\n\n```\nphp artisan make:auth\n```\n## Configuration\n\nFirst, we need to set the `APP_ID`, `APP_KEY`, `APP_SECRET` and `APP_CLUSTER` in the environment file. We can get these details in our Pusher [app dashboard](https://dashboard.pusher.com/):\n\n``` \n# .env\n\nBROADCAST_DRIVER=pusher\n\nPUSHER_APP_ID=your-pusher-app-id\nPUSHER_APP_KEY=your-pusher-app-key\nPUSHER_APP_SECRET=your-pusher-app-secret\nPUSHER_APP_CLUSTER=your-pusher-app-cluster\n```\nNext, we need to create a fresh Echo instance in our applications's JavaScript. We can do so at the bottom of our `resources/assets/js/bootstrap.js` file:\n\n```\nimport Echo from \"laravel-echo\"\n\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: 'your-pusher-app-key',\n    cluster: 'ap2',\n    encrypted: true\n});\n```\n## Our application\n\nWe will create a basic to-do application for the purpose of this article. We will not cover anything relating to writing CRUD functionality using Laravel. We will concentrate on the code necessary for implementing a realtime Activity Feed. The code is available on a [Github repository](https://github.com/viraj-khatavkar/activity-feed-pusher) for cloning and understanding purposes.\n\n## Migrations\n\nNext, we need a `activities` table, where we can record all the actions taken by a user. Let us create a model and migration:\n\n```\nphp artisan make:model Activity -m\n```\nThe `activities` table would require the following fields:\n\n1. Name of each recorded activity - Eg: created, updated or deleted\n2. A field to link the activity to the user that created it\n3. A polymorphic relation to store the details of the model for which the activity is being recorded\n \nBelow is our migration file for the `activities` table:\n\n```\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateActivitiesTable extends Migration \n{\n\n    public function up()\n    {\n        Schema::create('activities', function(Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003einteger('subject_id')-\u003eindex();\n                $table-\u003estring('subject_type')-\u003eindex();\n                $table-\u003estring('name');\n                $table-\u003einteger('user_id')-\u003eindex();\n                $table-\u003etimestamps();\n            });\n    }\n\n    public function down()\n    {\n        Schema::drop('activities');\n    }\n\n}\n```\n\n## Recording activity\n\nTo record activity for a specific model, we need to track any model updates whenever it is `created`, `updated` or `deleted`. We will create a trait which will hijack these events and store the necessary data into the `activities` table.\n\nThe trait will have following methods:\n\n1. `bootRecordsActivity` - Eloquent will automatically trigger this method. This will be the starting point for the process of recording the activity.\n2. `recordActivity` - This method will store the activity details in the `activities` table\n3. `getActivityName` - This will return the name of activity viz. *created_task* or *updated_task*\n4. `getModelEvents` - This method will return an array of model events that are to be recorded. We can overwrite this in our Model if necessary.\n \nThe `RecordsActivity` trait will look like this:\n\n```\n# RecordsActivity.php\n\nnamespace App;\n\nuse App\\Events\\ActivityLogged;\nuse ReflectionClass;\n\ntrait RecordsActivity\n{\n    /**\n     * Register the necessary event listeners.\n     *\n     * @return void\n     */\n    protected static function bootRecordsActivity()\n    {\n        foreach (static::getModelEvents() as $event) {\n            static::$event(function ($model) use ($event) {\n                $model-\u003erecordActivity($event);\n            });\n        }\n    }\n\n    /**\n     * Record activity for the model.\n     *\n     * @param  string $event\n     * @return void\n     */\n    public function recordActivity($event)\n    {\n        $activity = Activity::create([\n            'subject_id' =\u003e $this-\u003eid,\n            'subject_type' =\u003e get_class($this),\n            'name' =\u003e $this-\u003egetActivityName($this, $event),\n            'user_id' =\u003e $this-\u003euser_id\n        ]);\n\n        event(new ActivityLogged($activity));\n    }\n\n    /**\n     * Prepare the appropriate activity name.\n     *\n     * @param  mixed  $model\n     * @param  string $action\n     * @return string\n     */\n    protected function getActivityName($model, $action)\n    {\n        $name = strtolower((new ReflectionClass($model))-\u003egetShortName());\n\n        return \"{$action}_{$name}\";\n    }\n\n    /**\n     * Get the model events to record activity for.\n     *\n     * @return array\n     */\n    protected static function getModelEvents()\n    {\n        if (isset(static::$recordEvents)) {\n            return static::$recordEvents;\n        }\n\n        return [\n            'created', 'deleted', 'updated'\n        ];\n    }\n}\n```\nNext, we will include this trait in the `Task` and `Comment` models:\n\n```\n# app/Task.php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Task extends Model\n{\n    use RecordsActivity;\n\n    ...\n    ...\n}      \n\n\n# app/Comment.php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Task extends Model\n{\n    use RecordsActivity;\n\n    ...\n    ...\n}    \n\n```\nNow, any changes in the above models will be recorded in the `activities` table. Let us create a task:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2017/03/activity-feed-with-laravel-and-pusher-create-task.gif\" alt=\"\" width=\"600\" height=\"375\" class=\"alignnone size-full wp-image-2886\" /\u003e\n\nThis action is recorded in the `activities` table:\n\n```\n\u003e\u003e\u003e Activity::all();\n=\u003e Illuminate\\Database\\Eloquent\\Collection {#671\n     all: [\n       App\\Activity {#672\n         id: 1,\n         subject_id: 1,\n         subject_type: \"App\\Task\",\n         name: \"created_task\",\n         user_id: 1,\n         created_at: \"2017-02-16 10:54:00\",\n         updated_at: \"2017-02-16 10:54:00\",\n       },\n     ],\n   }\n```\nLet us now comment on *Task 1*:\n\n![activity-feed-laravel-add-comment](//images.contentful.com/1es3ne0caaid/3BZo8CAB2M0wWoggawwIsM/bf8e90962701acda5f785ee00663cefd/activity-feed-laravel-add-comment.gif)\n\nThis action is also recorded in the `activities` table:\n\n```\n\u003e\u003e\u003e Activity::latest()-\u003efirst();\n=\u003e App\\Activity {#690\n     id: 2,\n     subject_id: 1,\n     subject_type: \"App\\Comment\",\n     name: \"created_comment\",\n     user_id: 1,\n     created_at: \"2017-02-16 11:03:05\",\n     updated_at: \"2017-02-16 11:03:05\",\n   }\n```\n## Broadcasting feed\n\nWhenever an activity is logged, we need to fire an event which will be broadcasted over Pusher. For broadcasting an event, it should implement the `ShouldBroadcast` interface. Let us first create the `ActivityLogged` event:\n\n```\nphp artisan make:event ActivityLogged\n```\n### broadcastOn method\n\nThe event should implement a `broadcastOn` method. This method should return the channels to which the event should be broadcast.\n\n### broadcastWith method\n\nBy default, Laravel will broadcast all the public properties in JSON format as the event payload. We can define our logic to broadcast only the necessary data in the `broadcastWith` method.\n\nWe do not want any user of the app to able to listen to all the broadcast activity. To avoid this, we will use the `PrivateChannel` to broadcast our event. For broadcasting on a public channel, we can simply use the `Channel` class.\n\nBelow is our `ActivityLogged` event:\n\n```\n# app/Events/ActivityLogged.php\n\nnamespace App\\Events;\n\nuse App\\Activity;\nuse App\\Transformers\\ActivityTransformer;\nuse Illuminate\\Broadcasting\\Channel;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Broadcasting\\PresenceChannel;\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Queue\\SerializesModels;\nuse Illuminate\\Support\\Facades\\Log;\n\nclass ActivityLogged implements ShouldBroadcast\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    public $activity;\n\n    public function __construct(Activity $activity)\n    {\n        $this-\u003eactivity = $activity;\n    }\n\n    public function broadcastOn()\n    {\n        return new PrivateChannel('activity.' . $this-\u003eactivity-\u003euser-\u003eid);\n    }\n\n    public function broadcastWith()\n    {\n        return fractal($this-\u003eactivity, new ActivityTransformer())-\u003etoArray();\n    }\n}\n```\nIn the `RecordsActivity` trait, we broadcast this event whenever a new activity is recorded. The snippet from `recordActivity` method:\n\n```language-php\npublic function recordActivity($event)\n{\n    $activity = Activity::create([\n        'subject_id' =\u003e $this-\u003eid,\n        'subject_type' =\u003e get_class($this),\n        'name' =\u003e $this-\u003egetActivityName($this, $event),\n        'user_id' =\u003e $this-\u003euser_id\n    ]);\n\n    broadcast(new ActivityLogged($activity));\n}\n```\nNext, we need to start our queue to actually listen for jobs and broadcast any events that are recorded. We can use the database queue listener on our local environment:\n\n```\nphp artisan queue:listen\n```\n## Listening to feed\n\nInstallation and configuration of Laravel Echo is a must before we can start listening to feeds. We have covered the process in detail in the above section of this article. Please go through it if you might have skipped it.\n\nWe can listen to a public channel using `Echo.channel(channel)`. For listening to a private channel, we need to use `Echo.private(channel)`. As we have broadcasted the `ActivityLogged` event on a private channel, we will use `Echo.private()`:\n\n```language-javascript\nEcho.private('activity.' + this.user.id)\n    .listen('ActivityLogged', (e) =\u003e {\n        //push to feed variable\n    });\n```\n### Authorization\n\nAs we are listening on a private channel, we need to authenticate that the current logged in user should be able to listen on this private channel. Laravel Echo will automatically call the necessary authorization routes if we are listening to a private channel. But, we need to write the authentication logic which will actually authorize the user.\n\nAuthorization logic is written in the `routes/channels.php`. The authorization logic for our `activity` channel:\n\n```language-php\nBroadcast::channel('activity.{id}', function ($user, $id) {\n    return (int) $user-\u003eid === (int) $id;\n});\n```\nThat's it! Now, whenever a new activity is recorded, it will be broadcast and we can listen using this private channel.\n\nWe can even listen to multiple events on the same channel:\n\n```language-javascript\nEcho.private('activity.' + this.user.id)\n    .listen(...)\n    .listen(...)\n    .listen(...);\n```\nBelow is our Activity component written using `Vue.js`\n\n```language-javascript\n\u003ctemplate\u003e\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"panel panel-info\"\u003e\n      \u003c!-- Default panel contents --\u003e\n      \u003cdiv class=\"panel-heading\"\u003eActivity Dashboard\u003c/div\u003e\n\n        \u003cul class=\"list-group\"\u003e\n            \u003cli class=\"list-group-item\" v-for=\"item in feed\"\u003e\n                {{ item.description }}  \n                \u003cspan class=\"pull-right\"\u003e{{ item.lapse }}\u003c/span\u003e\n            \u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/template\u003e\n\n\u003cscript\u003e\n    export default {\n        props: ['user'],\n        data() {\n            return {\n                feed: {}\n            }\n        },\n        mounted() {\n            console.log('Component mounted.')\n\n        },\n        created() {\n            this.getFeed();\n            this.listenForActivity();\n        },\n        methods: {\n            getFeed() {\n                var self = this;\n                return axios.get('/api/activities?api_token=' + this.user.api_token, {})\n                .then(function(response) {\n                    self.feed = response.data.data;\n                });\n            },\n            listenForActivity() {\n                Echo.private('activity.' + this.user.id)\n                    .listen('ActivityLogged', (e) =\u003e {\n                        this.feed.unshift(e.data);\n                    });\n            }\n        }\n    }\n\u003c/script\u003e\n```\nHere is the screenshot of what our Activity Feed looks like:\n\n![activity-feed-laravel-example](//images.contentful.com/1es3ne0caaid/uE0XJzw3M4MWw2cCk8CIk/bf8e90962701acda5f785ee00663cefd/activity-feed-laravel-example.png)\n\n## Conclusion\n\nIn this article, we have covered how to create a realtime Activity Feed for our application. We have covered the configuration options necessary to get started, and the examples above should help you fill in the gaps and give an overview of some of the other configuration options available to you.\n\nThe code is hosted on public [Github repository](https://github.com/viraj-khatavkar/activity-feed-pusher). You can download it for educational purposes. How do you use Laravel and Pusher for activity feed? Can you think of any advanced use cases for this library? What are they? Let us know in the comments!","metaTitle":"Build a realtime activity feed with Laravel","metaDescription":"Build an live activity feed that display user behaviour into an event-based timeline with realtime updates using Laravel, Vue.js and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1yhuKn07UwSYoMAYmggUsK","type":"Entry","createdAt":"2018-02-22T15:02:42.115Z","updatedAt":"2018-02-28T14:40:59.126Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a typing indicator with Laravel","url":"typing-indicator-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5K3KWA2xvqw4SW2sYI8eCG","type":"Entry","createdAt":"2018-02-12T15:34:14.169Z","updatedAt":"2018-02-14T10:09:19.038Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Chimezie Enyinnaya","url":"chimezie-enyinnaya","email":"meziemichael@gmail.com","twitter":"https://twitter.com/ammezie","github":"https://github.com/ammezie","guestWriter":true}}],"projectRepo":"https://github.com/ammezie/laravel-whos-typing","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-03-01","description":"Integrate a typing indicator feature in your Laravel app using Vue.js.","prerequisite":"A basic understanding of Laravel and Vue.js are needed to follow this tutorial.","content":"In this tutorial, I will show you how to build a typing indicator with Laravel and Pusher, using the concept of a chat app to demonstrate it. Note that this tutorial focuses on the typing indicator part of the app (if you want to learn how to build a chat app using Laravel and Pusher, you should read [this tutorial](https://blog.pusher.com/how-to-build-a-laravel-chat-app-with-pusher/)).\n\nLet's take a quick look at what we'll be building:\n\n![typing-indicator-laravel](//images.contentful.com/1es3ne0caaid/628hzh5YVGGuwgg2a8Gi0Y/62e8a60793f9559b6cbb35d7b632ca90/typing-indicator-laravel.gif)\n\nThe code of the completed demo is available on [GitHub](https://github.com/ammezie/laravel-whos-typing).\n\n## Setting Up Laravel\n\nCreate a new Laravel project. (I prefer using the Laravel installer) Open your terminal and run the code below:\n\n```\nlaravel new laravel-whos-typing\n```\n\nNext, we need to setup our new Laravel project. First, we need to register the `App\\Providers\\BroadcastServiceProvider`. Open `config/app.php` and uncomment `App\\Providers\\BroadcastServiceProvider` in the `providers` array.\n\nWe then need to tell Laravel that we are using the Pusher driver in the `.env` file:\n\n```\n// .env\n\nBROADCAST_DRIVER=pusher\n```\n\nSince we specified we want to use Pusher as our broadcasting driver, we need to install the Pusher PHP SDK:\n\n```\ncomposer require pusher/pusher-php-server\n```\n\n## Setting Up Pusher\n\nIf you don't have one already, create a free Pusher account [here](https://pusher.com/signup) and then log in to your dashboard and create an app. Take note of your app credentials as we'll be using them shortly.\n\nNow, let's fill in our Pusher app credentials. If you open the `config/broadcasting.php`, you'll notice that Laravel is pulling some of the Pusher credentials from the `.env` file. So let's update the `.env` file to contain our Pusher app credentials:\n\n```\n// .env\n\nPUSHER_APP_ID=xxxxxx\nPUSHER_APP_KEY=xxxxxxxxxxxxxxxxxxxx\nPUSHER_APP_SECRET=xxxxxxxxxxxxxxxxxxxx\n```\n\nRemember to replace the `x`s with your Pusher app credentials. You can find your app credentials under the **Keys** section on the **Overview** tab in the Pusher Dashboard.\n\nAlso, remember to fill in the `cluster` of your Pusher app and other additional options:\n\n```\n// config/broadcasting.php\n\n'options' =\u003e [\n   'cluster' =\u003e 'eu',\n   'encrypted' =\u003e true\n],\n```\n\n## Installing Frontend Dependencies\n\nFor this tutorial, we'll be using `Bootstrap`, `Vue` and `Axios`, which have been setup for us by Laravel, though we still need to install each of the dependencies. To compile our CSS and JavaScript, we need to install Laravel Mix, which is a wrapper around Webpack. We can install these dependencies through `NPM`:\n\n```\nnpm install\n```\n\nWe also need to install Laravel Echo, which is a JavaScript library that makes it painless to subscribe to channels and listen for events broadcast by Laravel and of course the Pusher JavaScript library:\n\n``` language-bash\nnpm install --save laravel-echo pusher-js\n```\n\nOnce installed, we need to tell Laravel Echo to use Pusher. At the bottom of the `resources/assets/js/bootstrap.js` file, uncomment the Laravel Echo section and update the details with:\n\n```\n// resources/assets/js/bootstrap.js\n\nimport Echo from \"laravel-echo\"\n\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: Laravel.pusherKey,\n    cluster: 'eu',\n    encrypted: true\n}); \n```\n\nSince we specified our Pusher app credentials in the `.env` file, notice `Laravel.pusherKey` from the code above, we'll load our Pusher app key from the config instead of hard coding it directly in `resources/assets/js/bootstrap.js`. We'll define `Laravel.pusherKey` in a later section.\n\nAlso use the same `cluster` that you specified earlier in `config/broadcasting.php`.\n\nWith the setups done, let's start implementing a typing indicator in our Laravel application.\n\nTo do this, we need to know when a user is typing into the chat box. There are different ways to accomplish this, but in this tutorial, we'll add event listeners to the chat box. With this, we can know when a user is actually typing a message and display the typing indicator to the appropriate users.\n\nWe'll make use of JavaScript keyboard events: `onkeydown` which fires event when a user is pressing a key. This means that when a user presses a key, we send events to Pusher. These types of events are called `client events` and do not hit the server at all. But how do we broadcast such events to Pusher since they are a bit different from the normal events (server to Pusher events)? Well, Pusher is aware of such events and has a special way of handling them.\n\nBy default, when you create a Pusher app, client events are not enabled. We have to enable this for our app. To enable client events in your Pusher app, select the app then click on the **App Settings** tab and then check the box next to **Enable client events**.\n\n![typing-indicators-laravel-enable-client-event](//images.contentful.com/1es3ne0caaid/3LmEpfXCFWGwOcGwKOsWm2/9bdf8e898c782932fee24342366f3109/typing-indicators-laravel-enable-client-event.png)\n\nOnce we have enabled client events in our Pusher app, we can now trigger and listen for client events in our chat app.\n\n## Authenticating Users\n\nOur chat app will require users to be logged in before they can begin to chat. So, we need an authentication system:\n\n```\nphp artisan make:auth\n```\nThis will create the necessary routes, views and controllers needed for an authentication system.\n\nBefore we go on to create users, we need to run the `users` migration that comes with a fresh installation of Laravel. But to do this, we first need to setup our database. Open the `.env` file and enter your database details:\n\n```\n// .env\n\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=laravel-chat\nDB_USERNAME=root\nDB_PASSWORD=root\n```\n\nUpdate with your own database details. Now, we can run our migration:\n\n``` language-bash\nphp artisan migrate\n```\n\nNote: There's a bug in Laravel 5.4 if you're running a version of MySQL older than 5.7.7 or MariaDB older than 10.2.2. More info [here](https://github.com/laravel/framework/issues/17508). This can be fixed by replacing the `boot()` of `app/Providers/AppServiceProvider.php` with:\n\n```\n// app/Providers/AppServiceProvider.php\n\n// remember to use\nIlluminate\\Support\\Facades\\Schema;\n\n/**\n * Bootstrap any application services.\n *\n * @return void\n */\npublic function boot()\n{\n  Schema::defaultStringLength(191);\n}\n```\n\n## Defining App Routes\n\nOpen `routes/web.php` and replace the routes with the code below:\n\n```\n// routes/web.php\n\nAuth::routes();\n\nRoute::get('/', function () {\n    return view('chat');\n})-\u003emiddleware('auth');\n```\n\nThe routes are pretty simple: a route that will handle authentication and a route to the homepage that will render a chat view which we'll create shortly.\n\n**NOTE**: Since we have removed the `/home` route, you might want to update the `redirectTo` property of both `app/Http/Controllers/Auth/LoginController.php` and `app/Http/Controllers/Auth/RegisterController.php` to:\n\n```\nprotected $redirectTo = '/';\n```\n\n## Creating the chat app view\n\nCreate a new `resources/views/chat.blade.php` file and paste into it:\n\n```\n// resources/views/chat.blade.php\n\n@extends('layouts.app')\n\n@section('content')\n\u003cdiv class=\"container\"\u003e\n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-8 col-md-offset-2\"\u003e\n            \u003cdiv class=\"panel panel-default\"\u003e\n                \u003cdiv class=\"panel-heading\"\u003eChats\u003c/div\u003e\n\n                \u003cdiv class=\"panel-body\"\u003e\n                    \u003cul\u003e\n                        \u003cli v-for=\"message in messages\"\u003e\n                            @{{ message.user.name }} - @{{ message.message }}\n                        \u003c/li\u003e\n                    \u003c/ul\u003e\n                    \u003cdiv\u003e\n                        \u003cdiv class=\"input-group\"\u003e\n                            \u003cinput type=\"text\" name=\"message\" class=\"form-control\" placeholder=\"Type your message here...\" v-model=\"newMessage\" @keyup.enter=\"sendMessage\"\u003e\n                            \u003cspan class=\"input-group-btn\"\u003e\n                                \u003cbutton class=\"btn btn-primary\" @click=\"sendMessage\"\u003e\n                                    Send\n                                \u003c/button\u003e\n                            \u003c/span\u003e\n                        \u003c/div\u003e\n                        \u003cspan v-show=\"typing\" class=\"help-block\" style=\"font-style: italic;\"\u003e\n                            @{{ user }} is typing...\n                        \u003c/span\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n@endsection\n```\n\nOnce again pretty straightforward, we are using Vue here. We loop through each of the messages and display them. Next, there is a input field and a send button for composing chat messages. The input field is binded to the `newMessage` data. When the send button is clicked or the enter key is pressed on the input field, a `sendMessage()` is called. Lastly, there is span holding the 'is typing' indicator. This will be hidden by default and will be displayed using Vue's `v-show` when `typing` is `true` (that is when a user is typing).\n\nNotice that we are displaying the name of the user along with the 'is typing' indicator, we need a way to pass the authenticated user to our JavaScript file. Remember from `resources/assets/js/bootstrap.js`, where we used `Laravel.pusherKey`, we also need to pass Pusher app key to our JavaScript file. We can do this by updating the `` section in `resources/views/layouts/app.blade.php` (which was created when we ran `make:auth`) with:\n\n```\nresources/views/layouts/app.blade.php\n\n\u003c!-- Scripts --\u003e\n\u003cscript\u003e\n  window.Laravel = {!! json_encode([\n    'csrfToken' =\u003e csrf_token(),\n    'user' =\u003e Auth::user(),\n    'pusherKey' =\u003e config('broadcasting.connections.pusher.key'),\n  ]) !!};\n\u003c/script\u003e\n```\n\nThe code above creates a `Laravel` object on the global window, we then add some items to the object. The `user` item will be the currently authenticated user and the `pusherKey` item will load our Pusher app key from the `config/broadcasting.php` config file.\n\nLaravel has integrated Vue and Axios for us, so we can start using `Vue` without any further setup. There is an `app.js`file that Laravel creates by default within `resources/assets/js/app.js`. Open this file and update with the code below:\n\n```\n// resources/assets/js/app.js\n\nrequire('./bootstrap');\n\nconst app = new Vue({\n    el: '#app',\n\n    data: {\n        messages: [],\n        newMessage: '',\n        user: '',\n        typing: false\n    },\n\n    methods: {\n        sendMessage() {\n            // add new message to messages array\n            this.messages.push({\n                user: Laravel.user,\n                message: this.newMessage\n            });\n\n            // clear input field\n            this.newMessage = '';\n\n            // persist to database\n        }\n    }\n});\n```\n\nFirst, we require the `resources/assets/js/bootsrap.js` file that contains our package setups and integrations. Next, we create a new Vue instance and bind it to **app** `id`. We then create some data variables: `messages` array will hold our chat messages, `newMessage` will be the new message that a user sends, `user` will be the currently authenticated user and finally `typing` will hold `true` or `false` indicating whether a user is typing or not.\n\nNext we define a `sendMessage()` that simply adds the new message along with the user that sent it to the messages array and finally clears the input field. (If you are building an actual chat app, you might want to do an AJAX request to persist the new message to the database here.)\n\nHaving done this, we can start sending messages and our messages will be displayed on the chat view. Now let's move on to the meat of this tutorial; adding a typing indicator to our Laravel application.\n\nLaravel Echo provides some handy methods to integrate with client events which we'll be using to implement our typing indicator.\n\nPaste the code below into the `resources/assets/js/app.js` within the `methods` object:\n\n```\n// resources/assets/js/app.js\n\nisTyping() {\n  let channel = Echo.private('chat');\n\n  setTimeout(function() {\n    channel.whisper('typing', {\n      user: Laravel.user,\n        typing: true\n    });\n  }, 300);\n},\n```\n\nThe `isTyping()` will be triggered when an **onkeydown** event is fired within the chat input field (that is, when a user is typing a message). First, we subscribe to a private channel called `chat` and trigger a client event using Laravel Echo's `whisper()` after 0.3s. The `whisper()` accepts the name of the client event, in our case `typing` and the data we want to broadcast. Since Pusher specifies that client events must be prefixed by `client-`, Laravel is smart enough to prefix the `client-` for us under the hood. We pass the user that is typing a message and typing as `true` as the data we are broadcasting.\n\n**Note:** Client events can only be triggered on private and presence channels because they require authentication. Also, client events are not delivered to the originator of the event. For more information on client events, kindly checkout the Pusher [documentation](https://pusher.com/docs/client_api_guide/client_events#trigger-events).\n\nSince we created a private channel, only authenticated users will be able to listen on the `chat` channel. We need a way to authorize that the currently authenticated user can actually listen on the channel. This can be done by in the `routes/channels.php` file:\n\n```\n// routes/channels.php\n\nBroadcast::channel('chat', function ($user) {\n  return Auth::check();\n});\n```\n\nWe pass to the `channel(),` the name of our channel and a callback function that will either return `true` or `false` depending on whether the current user is authenticated.\n\nNow that we can trigger client events, we also need a way to listen for the client events in our application. To do this, add the code below to `resources/assets/js/app.js` just after the `data` object:\n\n```\n// resources/assets/js/app.js\n\ncreated() {\n  let _this = this;\n\n  Echo.private('chat')\n    .listenForWhisper('typing', (e) =\u003e {\n      this.user = e.user;\n      this.typing = e.typing;\n\n      // remove is typing indicator after 0.9s\n      setTimeout(function() {\n        _this.typing = false\n      }, 900);\n    });\n},\n```\n\nAgain we subscribe to the `chat` channel. To listen for client events, we use the `listenForWhisper()` and set both the `user` and `typing` data accordingly. Lastly, we remove the is typing indicator after 0.9s of a user not typing.\n\nBefore we start testing the typing indicator, let update the input field of the `chat` view with:\n\n```\n// resources/view/chat.blade.php\n\n\u003cinput type=\"text\" name=\"message\" class=\"form-control\" placeholder=\"Type your message here...\" v-model=\"newMessage\" @keydown=\"isTyping\" @keyup=\"notTyping\" @keyup.enter=\"sendMessage\"\u003e\n```\n\nWe added two keyboard events: `@keydown` and `@keyup` which are Vue equivalent of the JavaScript keyboard events we talked about earlier. On keydown, the `isTyping()` will be triggered and on keyup, the `notyping()` will be triggered.\n\nWe can now compile the JavaScript files using Laravel Mix using:\n\n```\nnpm run dev\n```\n\nNow we can start our chat app by running:\n\n```\nphp artisan serve\n```\n\n## Conclusion\n\nWith such a basic app, we have seen how to implement typing indicator in a Laravel application using Pusher.","metaTitle":"Build a typing indicator with Laravel","metaDescription":"Craft an essential feature for messaging users like a typing indicator using Laravel and Vue.js."}}],"defaultValue":"Channels","queryType":"product","pages":33,"route":"/tutorials","query":{"product":"Channels","page":"32"}}},"page":"/tutorials","query":{"product":"Channels","page":"32"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&page=32 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:31:58 GMT -->
</html>