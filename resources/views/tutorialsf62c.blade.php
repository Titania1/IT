<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?page=20 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:42 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1">Learn &amp; Discover Pusher</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="1v9vy9q">.css-1v9vy9q{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;text-align:center;}@media all and (min-width:400px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1v9vy9q a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1v9vy9q a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:400px){.css-1v9vy9q{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1v9vy9q{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1v9vy9q{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1v9vy9q{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}</style><p scale="h5" class="css-1v9vy9q e5jrto45"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">447</span> tutorials to help you build great apps</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials0e67.html?product=Channels" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials1bbb.html?product=Beams" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value=""/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:none;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/live-progress-react.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live UX<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to build a live progress bar with React</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This brief tutorial will show you how to create a simple progress bar in React. It will receive updates from a Node.js b...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/introducing-flutter-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with Flutter - Part 2: Creating your first app</h3><p class="css-k12xad e5jrto45">This two-part series introduces Flutter, a framework for building cross-platform mobile apps with native interfaces, bas...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/workout-tracker-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1"> Create a live workout tracking app with React Native</h3><p class="css-k12xad e5jrto45">This tutorial takes you through building a workout tracking app in React Native, with a Node backend. Users will be able...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/introducing-flutter-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with Flutter - Part 1: Introduction to Flutter</h3><p class="css-k12xad e5jrto45">This two-part series introduces Flutter, a framework for building cross-platform mobile apps with native interfaces, bas...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/build-to-do-app-react-native-expo.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">React Native<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Expo</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a To Do app with React Native and Expo</h3><p class="css-k12xad e5jrto45">Build a To Do app using React Native and Expo for cross platform development and faster deployment</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-leaderboard-preact.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live leaderboard with Preact</h3><p class="css-k12xad e5jrto45">Use Preact and Node to build a simple game with a live leaderboard. Users will be able to play a game of chance against ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/rest-api-slim-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to build a RESTful API in Slim 3 - Part 2: Creating application endpoints</h3><p class="css-k12xad e5jrto45">This two part series will introduce you to the Slim 3 framework for PHP development. You will create a simple REST API, ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/rest-api-slim-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to build a RESTful API in Slim 3 - Part 1: Application Setup</h3><p class="css-k12xad e5jrto45">This two part series will introduce you to the Slim 3 framework for PHP development. You will create a simple REST API, ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/markdown-editor-vue.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Collaboration<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live markdown editor with VueJS</h3><p class="css-k12xad e5jrto45">Build a simple markdown editor using Vue and Node. Users will be able to write in markdown and see their text update in ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials7537.html?page=19" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials2679.html?page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials9683.html?page=18" class="css-za1ua3 edg0byb1">18</a><a href="tutorials7537.html?page=19" class="css-za1ua3 edg0byb1">19</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsf62c.html?page=20" class="css-2wakph edg0byb1">20</a><a href="tutorialse4a7.html?page=21" class="css-za1ua3 edg0byb1">21</a><a href="tutorials3c09.html?page=22" class="css-za1ua3 edg0byb1">22</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials02d1.html?page=50" class="css-5s6711 edg0byb1">50</a><a href="tutorialse4a7.html?page=21" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":447,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6t55VPE9Gw0gQmWq8OMAAy","type":"Entry","createdAt":"2018-10-25T06:40:44.687Z","updatedAt":"2018-10-25T06:40:44.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to build a live progress bar with React","url":"live-progress-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/progress-bar","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Od9rZziIoMG4yaQ4EAeok","type":"Entry","createdAt":"2018-02-13T11:31:10.435Z","updatedAt":"2018-02-26T12:31:10.730Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":16,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live UX","url":"live-ux","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-10-24","description":"This brief tutorial will show you how to create a simple progress bar in React. It will receive updates from a Node.js backend and update live. The example creates a mock file upload process, allowing you to add your own real-life functionality as needed.","prerequisite":"You will need Node 6+ installed on your machine. Previous experience with React will be helpful.","content":"Long running tasks are a feature of many web applications which need to be handled properly to improve the experience of the user. In many cases, a static progress bar that doesn’t update until the end is provided which leaves the user unsure of how long a task will take or if progress is being made at all.\n\nWe can improve this situation by making our progress bars show the actual progress of the task in realtime, and Pusher makes this really easy to do as you’ll see in the tutorial below.\n\n## Prerequisites\n\nPrevious experience with React is required to follow through with this tutorial. You also need to install [Node.js](https://nodejs.org/en/) (v6 and above) and [npm](https://www.npmjs.com/) on your machine if you don’t have them already. [Installation instructions can be found here](https://docs.npmjs.com/getting-started/installing-node).\n\n\n## Getting started\n\nOpen a new terminal window and create a new folder called `progress-bar`, then `cd` into it:\n\n```\n    mkdir progress-bar\n    cd progress-bar\n```\n\nNext, install `create-react-app`, a tool that allows us to quickly get a React application up and running:\n\n```\n    npm install -g create-react-app\n```\n\nOnce `create-react-app` is installed, use it to bootstrap a new React project. Run the command below within the `progress-bar` directory.\n\n```\n    create-react-app client\n```\n\nThe above command will create a new directory called `client` and install React as well as its accompanying dependencies. It may take a while to complete, so sit tight and wait. Once it’s done, you should see a some information in the terminal informing you of what you can do next.\n\nNext, change into the newly created directory (`cd client`)and run `yarn start` to start the development server. Once the application compiles, you will be able to view it at http://localhost:3000.\n\n## Build the application frontend\n\nFor this demo, we will simulate the common task of uploading a large file to the server. We’re not going to upload a real file; however, we’ll write a small Node script that will simulate the effect of a file upload.\n\nLet’s start by building the application frontend first. We need some additional dependencies for our React application, so let’s install them first. Within the `client` directory, run the following command:\n\n```\n    npm install pusher-js react-ladda\n```\n\n`pusher-js` is the client side SDK for Channels, while `react-ladda` lets us use the [Ladda](https://github.com/hakimel/Ladda) button library in our React app.\n\nOpen up `App.js` in your favorite text editor and change its contents to look like this:\n\n``` javascript\n    // client/src/App.js\n    \n    import React, { Component } from 'react';\n    import LaddaButton, { XL, EXPAND_RIGHT } from 'react-ladda';\n    import Pusher from 'pusher-js';\n    import './App.css';\n    \n    class App extends Component {\n      state = {\n        loading: false,\n        progress: 0,\n      };\n    \n      componentDidMount() {\n        const pusher = new Pusher('\u003cyour app key\u003e', {\n          cluster: '\u003cyour app cluster\u003e',\n          encrypted: true,\n        });\n    \n        const channel = pusher.subscribe('upload');\n        channel.bind('progress', data =\u003e {\n          this.setState({\n            progress: data.percent / 100,\n          });\n    \n          if (data.percent === 100) {\n            this.setState({\n              loading: false,\n              progress: 0,\n            });\n          }\n        });\n      }\n    \n      handleClick = event =\u003e {\n        event.preventDefault();\n    \n        this.setState({\n          loading: !this.state.loading,\n        });\n    \n        fetch('http://localhost:5000/upload', {\n          method: 'POST',\n        }).catch(error =\u003e console.log(error));\n      };\n    \n      render() {\n        const { loading, progress } = this.state;\n        const message = loading ? (\n          \u003cspan className=\"progress-text\"\u003e{progress * 100}% completed\u003c/span\u003e\n        ) : null;\n    \n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003ch1\u003eImaginary Image Upload Service :)\u003c/h1\u003e\n            \u003cLaddaButton\n              loading={this.state.loading}\n              onClick={this.handleClick}\n              progress={this.state.progress}\n              data-color=\"#eee\"\n              data-size={XL}\n              data-style={EXPAND_RIGHT}\n              data-spinner-size={30}\n              data-spinner-color=\"#ddd\"\n              data-spinner-lines={12}\n            \u003e\n              Upload really large image!\n            \u003c/LaddaButton\u003e\n    \n            {message}\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nOur React application consists of one button which, when clicked, will show the progress of the file upload. The `componentDidMount()` lifecycle method houses the logic for streaming upload progress to the app in realtime.\n\nWe’re opening a connection to Channels using the `subscribe()` method which allows us to subscribe to a new channel called `upload`. Then, we listen for the `progress` event on the `upload` channel using the `bind` method and update the application state once we receive a progress update.\n\nBefore you can integrate Channels into your application you need to [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up) on [Pusher](https://pusher.com). Once your account is created, select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app. Retrieve your credentials from the **API Keys** tab, and then replace the `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e` placeholders in `App.js` with the appropriate values.\n\n## Add the styles for the application\n\nLet's add the styles for the app’s frontend. Open up `App.css` in your editor and replace its contents with the following styles:\n\n``` css\n    // client/src/App.css\n    \n    .App {\n      margin-top: 50px;\n      text-align: center;\n    }\n    \n    .progress-text {\n      display: block;\n      font-size: 16px;\n      margin-top: 20px;\n    }\n```\n\nYou also need to add the style for the Ladda button. You can do so by adding the following tag to the `\u003chead\u003e` of the `index.html` file within the `client/public` directory:\n\n```\n    \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/Ladda/1.0.0/ladda.min.css\"\u003e\n```\n\nAt this point, the application should look like this:\n\n![react-progress-bar-demo-1](//images.ctfassets.net/1es3ne0caaid/1EdXEFBJaICmCGu4OuISuY/033308eb9893dcbb6dd1ddce516dd293/react-progress-bar-demo-1.png)\n\n## Create the server component\n\nWe’ll set up the server in the next step so as to simulate the file upload and trigger upload progress updates from the server. Run the following command from the root of the `progress-bar` directory to install the necessary dependencies:\n\n```\n    npm install express cors dotenv pusher\n```\n\nNext, create a new file called `server.js` in the root of your project directory and paste in the following code to set up a simple express server:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    \n    const express = require('express');\n    const cors = require('cors');\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    const app = express();\n    \n    app.use(cors());\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nCreate another file called `variables.env` in the root of your project directory and change it’s contents to look like this:\n\n```\n    // variables.env\n    \n    PORT=5000\n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\nRemember, your Pusher credentials can be retrieved from the **API Keys** tab on the Pusher account dashboard.\n\n## Add the /upload route\n\nIf you check the `handleClick()` method within `App.js`, you will see that we are making a post request to `/upload` when the button is clicked. Let’s go ahead and create this route within `server.js`:\n\n``` javascript\n    // server.js\n    \n    ...\n    app.use(cors());\n    \n    app.post('/upload', (req, res) =\u003e {\n      let percent = 0;\n      const interval = setInterval(() =\u003e {\n        percent += 10;\n        pusher.trigger('upload', 'progress', {\n          percent,\n        });\n    \n        if (percent === 100) clearInterval(interval);\n      }, 2000);\n    });\n```\n\nWe’re simulating an upload progress of 10% every two seconds, and triggering a new update on check increment.\n\nYou can start the server by running `node server.js` in a new terminal window and try out the application by clicking the upload button. You should see the progress update in realtime.\n\n![react-progress-bar-demo-2](//images.ctfassets.net/1es3ne0caaid/50Mqe44UdygeSOqcQQayMo/4b4556fd224cb54a8aa08a4f22c6d387/react-progress-bar-demo-2.gif)\n\n## Conclusion\n\nAnd that’s it! This is just scratching the surface of realtime updates using Pusher. Check out some other [use cases](https://pusher.com/tutorials/) for Channels, and as always, you can find the source code of this app in this [GitHub repository](https://github.com/ayoisaiah/progress-bar).","metaTitle":"How to build a live progress bar with React","metaDescription":"This brief tutorial will show you how to create a simple progress bar in React. It will receive updates from a Node.js backend and update live. The example creates a mock file upload process, allowing you to add your own real-life functionality as needed."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3ggUKRDURi2sEmaYcqsyya","type":"Entry","createdAt":"2018-10-25T06:38:14.063Z","updatedAt":"2020-06-19T12:32:40.456Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with Flutter - Part 2: Creating your first app","url":"introducing-flutter-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/flutter_doglister","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}}],"reviewDate":"2018-10-23","description":"This two-part series introduces Flutter, a framework for building cross-platform mobile apps with native interfaces, based on Dart. In part two, build a simple demo app and learn the basics of practical Flutter development.","prerequisite":"Prior knowledge of Flutter and Dart is not required.","content":"This is the second part of a two-part series on getting started with Flutter. You can find part one [here](https://pusher.com/tutorials/introducing-flutter-part-1). In this part, we’ll be setting up our machine for Flutter development and create a simple app.\n\n\n## Prerequisites\n\nThis tutorial assumes no previous knowledge of Flutter. Though you need to have previous programming experience in order to follow along. Specifically, you need to know basic object-oriented programming concepts such as variables, conditionals, loops, classes, and objects.\n\nKnowledge of the Dart language is optional. If you’ve done any sort of programming work previously, the syntax should be easy to pick up.\n\nJavaScript knowledge will be helpful as well, especially ES6 features.\n\nWe’ll be setting up the development environment in this tutorial so your machine doesn’t need to have Flutter installed already. This tutorial assumes that you know your way around the operating system you’re using. This means you should know how to add environment variables, and install different pieces of software.\n\n\n## App Overview\n\nWe’re going to build a dog lister app. Here’s what the final output will look like:\n\n![flutter-demo](//images.ctfassets.net/1es3ne0caaid/6GiKQhgSxamCUQEOaY6o8M/b84fab343bb8e6fb0d1ce6498a9c4808/flutter-demo.png)\n\nAs you might already imagine, this app allows the user to view a list of dog photos. They can click on the floating action button to load a new photo which will get appended to the end of the list.\n\nYou can find the full source code of the app on this [GitHub repo](https://github.com/anchetaWern/flutter_doglister).\n\n\n## Setting up Flutter\n\nIn this section, we’ll be setting up Flutter. There are sub-sections for the general setup, Android-specific, and iOS-specific setup. Note that you cannot develop for iOS if you’re on Windows or Linux. If you’re on Mac, you can develop both Android and iOS apps. This tutorial was tested on Windows 7, Ubuntu 16.04, and Mac OS High Sierra. But it should work as well if you’re using any other flavors or versions of those operating systems.\n\n\n### General Setup\n\nThese are the steps you need to follow regardless of the operating system you’re using.\n\n\n1. Install [Git](https://git-scm.com/) and [set up a user account](https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup).\n2. Install [Android Studio](https://developer.android.com/studio/). Setting it up should be fairly straightforward. It will also prompt you to install the essential packages so I’m no longer going to go into details. Once installed, make sure the following platforms and SDK tools are installed:\n![flutter-sdk-tools-required](//images.ctfassets.net/1es3ne0caaid/1QgBCTd8UAQse8MsWQgmaw/206b15c893fa529f84f6a23a34289947/flutter-sdk-tools-required.png)\n![flutter-android-api-required](//images.ctfassets.net/1es3ne0caaid/4Uea5NS9k44MMyKOYwuoYY/3b06e54fca8d2709695ece172bfae2de/flutter-android-api-required.png)\nThese are the build tools in text form:\n\n- CMake\n- Android Emulator\n- Android SDK Platform - Tools\n- Android SDK Tools\n- Google Play services\n- Intel x86 Emulator Accelerator\n- NDK\n- Support Repository\n\nAs for the Android platform, the only requirement is the Android SDK Platform 28.\n\n3. Install [Visual Studio Code](https://code.visualstudio.com/). After that, install the Flutter extension. Installing the Flutter extension will install Dart extension as well:\n![flutter-visual-studio-code-extension](//images.ctfassets.net/1es3ne0caaid/3Lr0d2pcSsEE4gY8eaAYM0/182aafbc8cdc9439ddd8a8765a58911a/flutter-visual-studio-code-extension.png)\n4. Download and install [Genymotion emulator](https://www.genymotion.com/fun-zone/). You can also use the Android emulator in Android Studio if you want, but we’ll be using Genymotion in this tutorial. As for the virtual device, I had good luck with devices using API 19 and above.\n5. Flutter will also require the Flutter and Dart plugin for Android Studio, you can install those if you want but we’re not really going to use Android Studio in this tutorial so you can skip it. If you want to use Android Studio then go to **Preferences** → **Plugins** then click on **Browse Repositories**, search for “Flutter” and install it. This will ask you to install Dart as well so just agree.\n\n\n### Mac OS setup\n\nThis section shows the steps to follow to setup Flutter on Mac. Mac OS High Sierra version 10.13.6 was used for testing. But it should also work if you have a lower or higher version of High Sierra installed.\n\n#### General setup\n\nThese are the general steps in setting up Flutter on Mac OS.\n\n\n1. Make sure that you have curl, and unzip installed. You can install these via [Homebrew](https://brew.sh/) if you don’t already have them.\n2. Download the Flutter SDK [from here](https://flutter.io/sdk-archive/#macos). At the time of writing this tutorial, the most recent version is [0.6.0](https://storage.googleapis.com/flutter_infra/releases/beta/macos/flutter_macos_v0.6.0-beta.zip). Always stick with the latest available version.\n3. Extract the zip file using the `unzip` command or the archive manager that you have on your machine:\n\n```\n    unzip ~/Downloads/flutter_macos_v0.6.0-beta.zip\n```\n\n4. Copy the `flutter` folder to where you store your development tools. Mine is in the root of my user directory.\n\n\n5. Open your bash profile and add Flutter to your path:\n\n```\n    nano ~/.bash_profile # open bash profile\n    export PATH=/Users/$USER/flutter/bin:$PATH # add this with the rest of your exports\n```\n\n6. Source your bash profile for the changes to take effect:\n\n```\n    source ~/.bash_profile\n```\n\n#### Android-specific setup\n\nIf you want to develop Android apps with Flutter, here are the steps:\n\n\n1. Run `flutter doctor` to check what else your system lacks before you can start developing apps in Flutter. Mine looks like this:\n![flutter-doctor-missing-requirements](//images.ctfassets.net/1es3ne0caaid/2TXlg5HR448ykuAAaaiU24/52044f1d1db8bd9407522f11a4194df5/flutter-doctor-missing-requirements.png)\n\n2. After that, all you need to do is run `flutter doctor --android-licenses` and accepting the licenses by responding with `y` to each of the questions asked.\n\n\n#### iOS-specific setup\nFollow these steps if you want to develop iOS apps with Flutter.\n\n\n1. If you want to develop iOS apps with Flutter, install the latest stable version of Xcode via the App Store.\n2. Configure the Xcode command-line tools:\n\n```\n    sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\n```\n\n3. Accept the license agreement:\n\n```\n    sudo xcodebuild -license\n```\n\n### Installing on Windows\n\nFollow these steps if you’re using Windows. This was specifically tested on Windows 7 so there’s a high chance that it will work on higher versions of the OS as well.\n\n#### Android-specific setup\n\n\n1. Download the latest copy of the Flutter SDK from the [SDK Archive page for Windows](https://flutter.io/sdk-archive/#windows). At the time of writing this tutorial, the latest is version [0.6.0](https://storage.googleapis.com/flutter_infra/releases/beta/windows/flutter_windows_v0.6.0-beta.zip).\n2. Once downloaded, extract the zip file and copy the resulting `flutter` folder to your `C:` drive. After copying, the resulting path should be `C:\\flutter` and there should be a `flutter_console.bat` file at the root of that directory.\n3. Double-click on the `flutter_console.bat` file inside `C:\\flutter`. This should open a new command line window. Run `flutter doctor` to check which system requirement you’re still lacking to develop Flutter apps. In my case, it required me to accept the licenses for Android by running `flutter doctor --android-licenses` and responding with `y` (yes) to all the licenses.\n4. `flutter doctor` should also complain about not having a connected device. To solve this, boot up the Genymotion or Android emulator and run `flutter doctor` again.\n5. The requirement for the Flutter and Dart plugin for Android Studio is optional because we’re not really going to use Android Studio to write code in this tutorial.\n6. Go to your advanced system settings. You can find this one either in the **Control Panel** or right-clicking on **Computer** and select **System** **properties**. Once you see a window similar to the one below, click on **Environment Variables**:\n\n![flutter-windows-system-properties](//images.ctfassets.net/1es3ne0caaid/15oe8yx9v8cc4ca0o4sKqg/371217c4279b0540ed12af464923ed7f/flutter-windows-system-properties.png)\n\n\n9. Under **User Variables**, edit the `Path` variable:\n\n![flutter-windows-env-variables](//images.ctfassets.net/1es3ne0caaid/5h8JIWBVscuk62ySOs2weK/a56bad0e04f6421dec0b6dd8ce1c5d64/flutter-windows-env-variables.png)\n\n\n10. Append `;C:\\flutter\\bin` after the last value. Mine looks like this after adding the path to Flutter:\n\n```\n    ;C:\\Program Files\\Docker Toolbox;C:\\Users\\wern\\AppData\\Roaming\\npm;C:\\Users\\wern\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\flutter\\bin\n```\n\n11. Save the changes. This will allow you to execute any Flutter command from either the default command line, PowerShell, or Git Bash. I personally prefer Git Bash because its character set doesn’t mess up the check mark and it’s a whole lot more readable than the other two:\n\n\n![flutter-doctor-git-bash](//images.ctfassets.net/1es3ne0caaid/47bMXCpldK6Cqo00GQYEUk/bce200b5eb4863a3f3a8b9415c848081/flutter-doctor-git-bash.png)\n\n### Installing on Ubuntu\n\nFollow these steps if you’re on Ubuntu or any Linux distribution. Just execute the equivalent command for your particular flavor of Linux if it’s different. Ubuntu 16.04 LTS is used for testing.\n\n#### Android-specific setup\n\n\n1. Before anything else, make sure to update the packages installed on your operating system first. You can do so by opening the software updater and installing all the relevant updates. Alternatively, you can also run `sudo apt-get update` from the terminal.\n2. Download the latest version of the Flutter SDK from the [SDK archives page](https://flutter.io/sdk-archive/#linux). At the time of writing this tutorial, the most recent version is [0.6.0](https://storage.googleapis.com/flutter_infra/releases/beta/linux/flutter_linux_v0.6.0-beta.tar.xz).\n3. Extract the `.tar.xz` file in the root of your home directory. For me, it’s in `/home/wern/flutter`, where the `flutter` directory is the extracted folder containing a `flutter_console.bat` file in its root.\n4. Update the `.bash_profile` file to include the path to the `flutter/bin` folder. Make sure you have the Android paths in there as well:\n\n```\n    export ANDROID_HOME=$HOME/Android/Sdk\n    export PATH=$PATH:$ANDROID_HOME/tools\n    export PATH=$PATH:$ANDROID_HOME/tools/bin\n    export PATH=$PATH:$ANDROID_HOME/platform-tools\n    \n    export PATH=$HOME/flutter/bin:$PATH\n```\n\n4. Run `flutter doctor` to check your system for software requirements. If you followed the general setup, the only thing left for you to do is execute `flutter doctor --android-licenses` to accept the Android licenses. Just respond with `y` to all of those to accept it.\n\n\n## Building the hello world app\n\nStart by generating a new Flutter app:\n\n```\n    flutter create doglister\n```\n\n### Directory structure\n\nOnce the project is created, drag it into VS code. We’re using VS code because it has the most complete Flutter support (Dart syntax, code completion, debugging tools).\n\nBy default, you should see the following directory structure:\n\n\n- `android` - where Android-related files are stored. If you’ve done any sort of cross-platform mobile app development before, this, along with the `ios` folder should be pretty familiar.\n- `ios` - where iOS-related files are stored. \n- `lib` - this is where you’ll be working on most of the time. By default, it contains a `main.dart` file, this is the entry point file of the Flutter app. \n- `test` - this is where you put the unit testing code for the app. We won’t really be working on it in this tutorial.\n- `pubspec.yaml` - this file defines the version and build number of your app. It’s also where you define your dependencies. If you’re coming from a web development background, this file has the same job description as the `package.json` file so you can define the external packages (from the [Dart packages website](https://pub.dartlang.org/)) you want to use in here.\n\nNote that I’ve skipped on other folders and files because most of the time you won’t really need to touch them.\n\n### Running the app\n\nNext, open an iOS simulator or Android emulator and run the app once it has completely booted:\n\n```\n    flutter run\n```\n\nThe command above detects any running instance of an Android or iOS simulator so it should automatically pick up the one you launched beforehand. \n\nAnytime you make a change to the code and you want to preview the change, simply hit the `r` key while in the terminal window. This hot reloads the app but the state will still be retained. But if you notice that the change doesn’t appear, you might need to hit the `Shift + R` key to hot restart the app. Note that this wouldn’t retain the app state like hot reload does.\n\n![flutter-run](//images.ctfassets.net/1es3ne0caaid/9bzwLHg8ik6goaWWUUiqi/46adc1262d25ebbcaaece6472ce1facb/flutter-run.png)\n\nIf you find it cumbersome to be hitting the  `r` key each time you make a change, consider going into debug mode in Visual Studio code. You can do that by going to **Debug** → **Start Debugging**, or simply hit `Ctrl + Shift + F5` or `⌘ + Shift + F5` on your keyboard. While on debug mode, everytime you hit save, the app is hot reloaded so you don’t have to go back and forth between your text editor, simulator, and the terminal while you’re working.\n\n\n### Hello world app\n\nThe code that comes with the Flutter starter app is a bit complicated, so we’ll stick with the same hello world app from this [CodeLab](https://flutter.io/get-started/codelab/) first. Open the `lib/main.dart` file in the project directory and put the following code:\n\n``` dart\n    import 'package:flutter/material.dart'; // import the material package\n    \n    void main() =\u003e runApp(MyApp()); // render the MyApp widget\n    \n    // define a stateless widget\n    class MyApp extends StatelessWidget {\n      @override // override the build method from the StatelessWidget\n      Widget build(BuildContext context) { // define the method for rendering the app\n        return MaterialApp(\n          title: 'Welcome to Flutter', // the title of the app\n          home: Scaffold( // specify the screen structure\n            // the app's header\n            appBar: AppBar( // the widget for rendering an app header\n              title: Text('Welcome to Flutter'), // the header text\n            ),\n            // the contents of the body\n            body: Center( // center the contents\n              child: Text('Hello World'), // render some text\n            ),\n          ),\n        );\n      }\n    }\n```\n\nTo have a better understanding of what’s going on, let’s break down the code above.\n\nFirst, we import the [Material library](https://docs.flutter.io/flutter/material/material-library.html) from Flutter:\n\n``` dart\n    import 'package:flutter/material.dart';\n```\n\nThis allows us to use widgets that implement [Material Design](https://material.io/design/). Among those are the `MaterialApp`, `Scaffold`, and `AppBar` widgets that we’re using above. The methods that we’re using are either part of a library you’ve imported, or part of the Flutter framework itself.\n\nNote that almost everything in Flutter is a widget, and each one can have its own set of properties and child widgets. So `Center` and `Text` are also widgets.\n\nFor most packages, you’ll have to search for it on the Dart packages website and add it to your `pubspec.yaml` file:\n\n![example-dart-package](//images.ctfassets.net/1es3ne0caaid/1Yn149u8Ug2eoS4kMuOkyy/81d0158ee363d60893824990c6eb1ca1/example-dart-package.png)\n\nBut in this case, the library that we’re working with is a part of Flutter. When we create a new app with `flutter create`, the Flutter library is already installed, and with that, the material library among others is also installed.\n\nNext, we define the `main` method. If you’ve worked with languages such as Java, this method should look familiar. This is the entry point of the whole program so it must always be defined if you want to render something on the screen:\n\n``` dart\n    void main() =\u003e runApp(MyApp())\n```\n\nBut what about the fat-arrow (`=\u003e`)? If you’re familiar with ES6 features in JavaScript, this is pretty much the same. It’s just a more concise way of defining functions, so we’re actually running the `runApp()` function inside the `main()` function. This function makes the `MyApp` widget the root of the widget tree. This effectively renders the widget, along with its children into the screen.\n\nIn Flutter, there are two types of widget that you’ll commonly work with: stateless and stateful. The difference between the two is that stateless widgets don’t manage it’s own internal state, while a stateful widget does. For example, a button widget doesn’t need to keep track of anything internally while a counter widget needs to keep track of its current count because it needs it for display. In our case, we’re creating a stateless widget because all we need to do is render something on the screen. To create a stateless widget, you need to extend the `StatelessWidget` [class](https://docs.flutter.io/flutter/widgets/StatelessWidget-class.html):\n\n``` dart\n    class MyApp extends StatelessWidget {\n      // ...\n    }\n```\n\nThat class requires you to override its `build` method which should return the actual contents of the widget. In this case, we’re using the `MaterialApp` [widget](https://docs.flutter.io/flutter/material/MaterialApp-class.html) as a wrapper. This allows us to easily implement Material Design for the widgets that we’re going to render as its child:\n\n``` dart\n    @override\n    Widget build(BuildContext context) { \n      return MaterialApp(\n        title: 'Welcome to Flutter', \n        home: Scaffold( \n          ... \n        ),\n      );\n    }\n```\n\nNote that the `MaterialApp` widget doesn’t only allow us to use the Material Design theme, it also handles navigation and navigation animations. So the `home` property actually allows us to define the widget to render on the `home` route. For that, we’re using the `Scaffold` [widget](https://docs.flutter.io/flutter/material/Scaffold-class.html) which provides the structure for the layout that we’re trying to build.\n\nThe `Scaffold` widget accepts the `appBar` (app header) and the `body` (main content of the app): \n\n``` dart\n    appBar: AppBar( \n      title: Text('Welcome to Flutter'),\n    ),\n    body: Center(\n      child: Text('Hello World'), \n    ),\n```\n\nThose are the basics of building the UI in Flutter. Basically, everything in Flutter is a widget. There are widgets used for specifying the UI structure (for example, `Scaffold`). There are also widgets that allow you to render something on the screen (for example, `Text`). Each widget can have their own child, and those child widgets can also have their own children and so on. The only caveat is that some widgets won’t accept just any child. For example, widgets like the `Scaffold` only accept a handful of widget types.\n\nIf you’re like me and you’re coming from a framework like React Native, then you must be thinking that it’s a whole lot of work! And I agree with you. Building the UI of the app will definitely take longer especially if you’re just starting out. But once you get used to it, you’ll be productive in no time. This is where the documentation really shines because everything you need is literally just [one search away](https://docs.flutter.io/flutter/widgets/widgets-library.html#classes).\n\n\n## Building the dog lister app\n\nNow it’s time for us to build the app that we’ve set out to build, the dog lister app. For this, we’ll be using the same Flutter project that we created earlier.\n\n### Directory structure\n\nFirst, let’s talk about the directory structure. We’ll be following the default directory structure set by Flutter, but we’re going to add a few folders inside the `lib` directory as well:\n\n```\n- `src`\n  - `models` \n    - `dog_model.dart`\n  - `widgets`\n    - `card_list.dart`\n  - `app.dart`\n- `main.dart`\n```\nGo ahead and create those folders and files. Feel free to consult the [GitHub repo](https://github.com/anchetaWern/flutter_doglister) as a basis.\n\n### Entry point file\n\nOpen the `lib/main.dart` file and replace the existing contents with the following:\n\n``` dart\n    import 'package:flutter/material.dart'; // import the material library\n    import 'src/app.dart'; // import the app.dart local file\n    void main() {\n      runApp(App());\n    }\n```\n\nAll of these lines should look familiar except for the second line if you haven’t previously worked with relative linking. In the first line, we’re trying to link a Flutter package, thus the `package:` prefix. But for Dart files that are inside the project directory, all you have to do is specify the path in which they’re stored.\n\nThe third to fifth lines is just the long way of doing this:\n\n```\n    void main() =\u003e runApp(App())\n```\n\n### Initializing the main app file\n\nNext, open the `lib/src/app.dart` file. This is where we will add the main content of the app. Start by importing the Material library:\n\n``` dart\n    import 'package:flutter/material.dart';\n```\n\nUnlike the hello world app from earlier, we will be using a stateful widget for this app. A stateful widget requires a `createState()` [method](https://docs.flutter.io/flutter/widgets/StatefulWidget/createState.html) to be implemented. Inside the method body is where you return the stateful widget:\n\n``` dart\n    // lib/src/app.dart\n    class App extends StatefulWidget {\n      createState() {\n        return AppState();\n      }\n    }\n```\n\nNext, declare the actual stateful widget. From the name of the method above (`createState`) which returns this widget, and also the class that the widget below extends (`State`), it can look like we’re just declaring the state of the stateful widget. But in reality, we’re creating the actual widget, not just its state. It still requires us to declare a `build` method which returns the contents of the widget, the only difference is that we’re going to add an internal state to this widget later on. For now, we’ll simply return the UI components:\n\n``` dart\n    // lib/src/app.dart\n    class AppState extends State\u003cApp\u003e {\n      \n      Widget build(context) {\n        return MaterialApp(\n          home: Scaffold(\n            body: Container(),\n            floatingActionButton: FloatingActionButton(\n              child: Icon(Icons.refresh),\n              onPressed: () =\u003e {\n                // nothing for now..\n              },\n              backgroundColor: Colors.deepPurpleAccent[700],\n            ),\n            appBar: AppBar(\n              title: Text('Doggos'),\n              backgroundColor: Colors.black54,\n            ),\n          ),\n        );\n      }\n    }\n```\n\nIn case you’re wondering what this weird-looking syntax means, this means that we want to create a copy of the `State` class that will work specifically for the `App` class we created right above this class. And since the `App` class is extending the `StatefulWidget` class, this means that we’re inheriting the methods from the `StatefulWidget` class as well. One of these methods is the `setState` method which allows us to update the state. You’ll see this in action later on:\n\n``` dart\n    class AppState extends State\u003cApp\u003e {\n      // ...\n    }\n```\n\nThe code above should look familiar except for the `Container` and `floatingActionButton` widget that we’re using:\n\n- `Container` - used as a [wrapper](https://docs.flutter.io/flutter/widgets/Container-class.html) for other widgets for them to occupy the available space in the screen. In this case, we’re not really wrapping anything so it simply acts as a placeholder. If you don’t pass in another widget to a `Container`, it won’t actually occupy the screen.\n- `FloatingActionButton` - this [widget](https://docs.flutter.io/flutter/material/FloatingActionButton-class.html) is used for creating, you guessed it, a floating action button! In case you’re not familiar, these are the buttons that seemingly hover over the rest of the UI. They’re usually circular in shape and are often used with the `Icon` [widget](https://docs.flutter.io/flutter/widgets/Icon-class.html). The `FloatingActionButton` widget is special because the `Scaffold` [widget](https://docs.flutter.io/flutter/material/Scaffold-class.html) accepts it as a parameter. As mentioned earlier, not all widgets can accept all other types of widget.\n\nAside from that, we’re also adding custom colors to the `appBar` and `floatingActionButton` widgets. In Flutter, colors are not represented using hex color codes, instead they’re represented in [ARGB format](https://docs.flutter.io/flutter/dart-ui/Color-class.html). There are also [color constants](https://docs.flutter.io/flutter/material/Colors-class.html), which can be controlled to be lighter or darker based on the number you specify. Note that the Material theme comes with default colors which are automatically applied to some of the UI elements (for example, `appBar` and `floatingActionButton`), so by specifying a color, we’re basically overriding the default color assigned by the theme.\n\nIn case you’re wondering why we had to create two separate classes just to implement a stateful widget, this is because of the way widgets work in Flutter. We already know that stateless widgets have this method called `build`. This method automatically gets called whenever the data that you pass to it gets updated from a parent widget. In effect, this wipes out the current state of that widget. And that’s why it’s called a stateless widget.\n\nOn the other hand, we have stateful widgets. As you have seen, they require two separate classes in order to work. This is because the primary widget (in this case, the `App` class) will also get its current state wiped out if a data that it’s depending on gets updated from its parent widget. So the reason why we’re returning a second class which serves as the widget’s state is so we could keep the current data from being over-written. If you’re familiar with [JavaScript closures](http://javascriptissexy.com/understand-javascript-closures-with-ease/), stateful widgets work similarly. In the example below, the `counter()` function is the primary widget class while the function inside is the widget’s state:\n\n``` dart\n    function counter(num){\n      var x = num;\n      return function(y){\n       return x = x + y;\n      }\n    }\n    \n    var num = counter(3);\n    num(4); // outputs: 7\n    num(3); // outputs: 10\n```\n\nThat’s it for now. We’ll come back to this file later once we’ve created the widget for rendering a list of cards.\n\n### Dog model\n\nModels in Dart allows us to define a new data type to be used inside our app. This provides structure and uniformity to the different kinds of data that we’re using inside the app. It also serves as a nice tool for documenting what type of data we’re expecting for the properties of an object. This is very useful when working on a [collection of objects](https://api.dartlang.org/stable/2.0.0/dart-core/List-class.html).\n\nTo define a model in Dart, you use the same syntax as for defining a class, only this time you’re not going to need to extend another class. Inside the class, you define the properties. In this case, we only have one property called `url`. Below that, we declare the constructor which accepts a parsed JSON as its argument. We’re using `Map\u003cString, dynamic\u003e` to annotate its type. The parsed JSON is basically a JavaScript object so we used the equivalent data type in Dart which is `Map`. Lastly, `\u003cString, dynamic\u003e` is the type of the key and value pairs for each object:\n\n``` dart\n    // lib/src/models/dog_model.dart\n    class DogModel {\n      String url;\n      DogModel(Map\u003cString, dynamic\u003e parsedJson) {\n        url = parsedJson['message'];\n      }\n    }\n```\n\nBut what about the `message` property we’re accessing from the `parsedJson`? Its response looks something like this:\n\n``` dart\n    {\n      \"status\": \"success\",\n      \"message\": \"https://images.dog.ceo/breeds/shihtzu/n02086240_10785.jpg\"\n    }\n```\n\nThe `DogModel` is extracting that `message` property to get the image URL. Later on, you’ll see how we’re actually passing the `parsedJson` to the `DogModel`.\n\n\n### CardList widget\n\nThe CardList widget is used for rendering the cards which shows a dog picture. This is a stateless widget which depends on the data that comes from the `lib/src/app.dart` file.\n\nStart by importing the Material library and Dog model:\n\n``` dart\n    import 'package:flutter/material.dart';\n    import '../models/dog_model.dart';\n```\n\nNext, create the widget. Below, we’re using the `List` [class](https://api.dartlang.org/stable/2.0.0/dart-core/List-class.html) as the data type for the collection of dog `images`. In Dart, a `List` is pretty similar to an array, it allows us to add a collection of objects to it. Note that not just any object can be added because we’ve added the `DogModel` as a constraint,  this means that only objects of type `DogModel` can be added to the list. After that, we set `images` as the context for the widget. Later on in the `lib/src/app.dart` file you will see how to pass these images to the widget:\n\n``` dart\n    class CardList extends StatelessWidget {\n      final List\u003cDogModel\u003e images;\n     \n      CardList(this.images); // set the widget's context\n      \n      // next: add build method\n      \n    }\n```\n\nNext, add the `build()` function. Here we’re checking if there are any images in the list. If there is, then we use the `ListView` [widget](https://docs.flutter.io/flutter/widgets/ListView-class.html) to render a list. This requires an `itemCount` and `itemBuilder` properties to be passed in. These are the total number of images in the list and the function for rendering each list item. \n\nThe `context` and the item’s `index` is passed as an argument to the `itemBuilder`. This allows us to extract a specific index from the list. The `context` is a [handle](https://docs.flutter.io/flutter/widgets/BuildContext-class.html) to the location of a widget in the widget tree. We don’t really have any use for it so I’m not going to expound further.\n\nIf no images are available, we simply render a `Text` widget with some text in it:\n\n``` dart\n    Widget build(context) {\n     \n      if(this.images.length \u003e 0){\n        return ListView.builder(\n          itemCount: images.length, // the total number of images\n          itemBuilder: (context, int index) { // the function for rendering each list item\n            return buildCard(images[index]);\n          }\n        );\n      }\n      return Center(child: Text('No doggos for you yet...'));   \n    }\n    \n    // next: add buildCard widget\n```\n\nNote that unlike JavaScript, we have to explicitly define the condition which returns a boolean value. So we can’t simply do something like this:\n\n``` dart\n    if(this.images.length){\n      // ...\n    }\n```\n\nNext is the widget for rendering each list item. Each item represents a single instance of the `DogModel` class. We’re using a `Container` widget as the main wrapper. This allows us to add a `decoration`, `padding`, `margin` and `child` widgets:\n\n``` dart\n    Widget buildCard(DogModel image) {\n      return Container(\n        decoration: BoxDecoration(\n          border: Border.all(color: Colors.grey),\n        ),\n        padding: EdgeInsets.all(10.0),\n        margin: EdgeInsets.all(10.0),\n        child: Image.network(image.url),\n      );\n    }\n```\n\nMost of the properties that the `Container` widget expects are part of Flutter’s painting library:\n\n\n- `decoration` - used for painting things like borders, box shadows, and fills on the screen. In this case, we’re using it to surround the container with a grey border on all sides.\n- `padding` - used for adding an empty space inside the surrounding area of the container.\n- `margin` - used for adding an empty space outside the surrounding area of the container.\n\nIf you’ve worked with [CSS](https://en.wikipedia.org/wiki/Cascading_Style_Sheets) before, these concepts should look familiar. The only difference is the syntax that we’re using.\n\nAs for the `child`, we’re rendering an `Image` widget. The `network()` method allows us to [display an image from the internet](https://flutter.io/cookbook/images/network-image/), all it requires is the URL that points out to the image resource.\n\n### Bringing everything together\n\nGoing back to the `lib/src/app.dart` file, we’re now ready to make use of the `CardList` widget. \n\nAt the top of the file, import the libraries, models, and widgets that we’re going to need:\n\n``` dart\n    // lib/src/app.dart\n    import 'package:flutter/material.dart';\n    \n    // add these:\n    import 'package:http/http.dart' show get; // for making http requests\n    import 'models/dog_model.dart'; // dog model\n    import 'dart:convert'; // for parsing JSON strings\n    import 'widgets/card_list.dart'; // CardList widget\n```\n\nNote that these libraries come pre-installed when you create a new Flutter project. Some of these are libraries are really big like Dart’s HTTP library. That’s why we’re only extracting the `get` method from it.\n\nNext, update the `AppState` class to include the initialization of the two states that we’ll be using:\n\n``` dart\n    class AppState extends State\u003cApp\u003e {\n      bool _loaderIsActive = false;  // whether the loader is currently showing or not\n      List\u003cDogModel\u003e images = []; // the list of images\n      \n      // next: add fetchDog method\n    }\n```\n\nThe `fetchDog()` function is responsible for updating the state whenever the user taps on the button for loading a new image. When this happens, we want to show a loading animation in the screen. This animation will only be hidden once the HTTP request is done:\n\n``` dart\n    void fetchDog() async {\n      // show the loader\n      setState(() {\n        _loaderIsActive = true;\n      });\n      \n      // make an HTTP request to get the dog photo\n      var response = await get('https://dog.ceo/api/breeds/image/random');\n      var dogModel = DogModel(json.decode(response.body));\n      \n      // hide the lower and add the newly loaded image into the state\n      setState(() {\n        _loaderIsActive = false;\n        images.add(dogModel);\n      });\n    }\n    \n    // next: add build method\n```\n\nIn Flutter, the `setState()` method is used for updating the state of a Stateful widget. Before we request for a new image, we update the state so the loader will show up, then we call it again once the image has been loaded, this time to add the new image to the list and hide the loader.\n\nThe `fetchDog()` function uses the same [async/await pattern](https://codeburst.io/javascript-es-2017-learn-async-await-by-example-48acc58bad65) that we use in JavaScript. The `get()` function in Dart’s HTTP library returns a `Future` which is just a fancy term for [Promises](https://developers.google.com/web/fundamentals/primers/promises) in JavaScript. This `Future` represents a potential value which will be available in the future. So by default, the `response` variable doesn’t actually contain the value that we’re expecting right after we call the `get()` function. By using the async/await pattern, we make the program wait for this future value to become available before we execute the rest of the code inside the function. Meanwhile, all the codes outside the function will continue to execute.\n\nNext, update the widget’s `build` method to show the loader when `_loaderIsActive` is `true` and show the `CardList` if it’s `false`. Then execute the `fetchDog()` function when the `floatingActionButton` is pressed:\n\n``` dart\n    Widget build(context) {\n      return MaterialApp(\n        home: Scaffold(\n          body: Center(child: _loaderIsActive == true ? CircularProgressIndicator() : CardList(images)), // update this: \n          floatingActionButton: FloatingActionButton(\n            child: Icon(Icons.refresh),\n            onPressed: fetchDog, // update this: use fetchDog instead of the empty function\n            backgroundColor: Colors.deepPurpleAccent[700],\n          ),\n        )\n      );\n    }\n```\n\nOnce that’s done, the app should already be functional. Pressing the button should show the loader, and once the image has been loaded it should be added to the list. If you don’t already have the app running, launch an Android emulator or iOS simulator instance and execute the following command from the root of the project directory:\n\n```\n    flutter run\n```\n\n## Conclusion\n\nThat’s it! In this tutorial, you learned how to create your very first Flutter app. Along the way, you also learned some of the important Flutter concepts like stateful and stateless widgets, how to use Dart packages, how to make HTTP requests and parse JSON strings, and lastly, rendering things on the screen.\n\nThat also concludes this series. I hope you gained the necessary knowledge in order to continue exploring Flutter. Flutter is a very young technology, so early adopters are really important for its growth. The more people who use Flutter, the better the technology gets.\n\nYou can find the code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/flutter_doglister).","metaTitle":"Getting started with Flutter - Part 2","metaDescription":"This series is an introduction to Flutter, Google's mobile app SDK. It allows developers to create native interfaces for both Android and iOS. In part two, build a simple demo app and learn the basics of practical Flutter development."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3pLXeMQWY8QSgC2IYeK0a0","type":"Entry","createdAt":"2018-10-23T12:42:44.772Z","updatedAt":"2018-10-23T12:50:54.968Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":" Create a live workout tracking app with React Native","url":"workout-tracker-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNWorkout","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-10-22","description":"This tutorial takes you through building a workout tracking app in React Native, with a Node backend. Users will be able to log and share their exercise updates and follow each other's progress. New workout logs are shared in realtime.","prerequisite":"You will need git, Node and Expo installed on your machine. Some knowledge of React Native is required.","content":"In this tutorial, we’ll be creating a realtime workout tracking app with React Native and Pusher.\n\n## Prerequisites\n\nBasic knowledge of React Native, React Navigation, and ES6 syntax is required. \n\nWe’ll also be using Redux. I’ll add as much detail as I can on what’s going on with all the Redux code, but you should at least be familiar with how Redux works.\n\nWe’ll be using [Expo](https://expo.io/) in order to easily test the app on multiple devices. [Install Expo](https://expo.io/learn) on your computer, then download the Expo client app for your [iOS](https://itunes.apple.com/us/app/expo-client/id982107779?mt=8) or [Android](https://play.google.com/store/apps/details?id=host.exp.exponent\u0026hl=en) device.\n\nThese are the package versions used in creating the app:\n\n\n- Node 8.3.0\n- Yarn 1.7.0\n- Expo CLI 2.1.2\n- Expo SDK 30.0.0\n- Pusher 4.3.1\n\nIt’s always recommended to use the most recent stable versions, but in case the app doesn’t work for you, you can use the versions above to ensure we have the same environment.\n\nLastly, you must have a [Pusher](https://pusher.com/) and an [ngrok account](https://ngrok.com/).\n\n\n## App overview\n\nThe app that we will be creating is for gym buddies who are working out in a different gym. They can use it to keep track of their buddy’s workout even if they are away from each other.\n\nThe app has two tabs: one for logging their own workout, and another for tracking the workout of their buddy. Users can both log and track at the same time. This makes it possible for users to compete on who can make the most number of sets and reps for each exercise they choose.\n\nUpon opening the app, users will be greeted with the logging tab. This is where they can log their workouts. They’ll be automatically assigned a unique username. When they click on their username, it will be copied to the clipboard so they can easily share it with their buddy:\n\n![react-native-workout-username](//images.ctfassets.net/1es3ne0caaid/ACLwrF7dq80gc200WyUqs/808f6ea8ef582568f0173eab7a198e1e/react-native-workout-username.png)\n\nThis is how it looks like when their buddy subscribes. Subscription can be done in the tracking tab. All they have to do is enter their buddy’s username and click on the right arrow:\n\n![react-native-workout-subscribe](//images.ctfassets.net/1es3ne0caaid/60HPwDIL3aIys8IC2UaYg6/6941f614198dfae33899d8ed0a4b2b00/react-native-workout-subscribe.png)\n\nThis is how it looks like when a user adds an exercise and a set:\n\n![react-native-workout-log](//images.ctfassets.net/1es3ne0caaid/3n6MvWp0FauOyYCUCAY8me/da2899d353559fce2c9e9a968d889153/react-native-workout-log.png)\n\nOnce an exercise or set has been added, it will show in the list below the username. The number at the top of the circle is the weight, and the number inside it is the number of reps for that set. When the user clicks on the circle, the reps is incremented by one:\n\n![react-native-workout-display-log](//images.ctfassets.net/1es3ne0caaid/2lCAJDKLgYOoEqM80IoqaG/ee4b47deb4093fa3ea816cf90e177a1f/react-native-workout-display-log.png)\n\nThe tracking tab in their buddy’s screen is automatically synced with the exercise and sets the user has added:\n\n![react-native-workout-share-log](//images.ctfassets.net/1es3ne0caaid/XdBJMLHT6mSWI8iy8KaeG/5ef729c2cd4c802545e3b17444316b04/react-native-workout-share-log.png)\n\nYou can view the source code of this app on this [GitHub repo](https://github.com/anchetaWern/RNWorkout). \n\n## Creating a Pusher app\n\nOn your [Pusher dashboard](https://dashboard.pusher.com/), create a new app and name it **RNWorkout**. Once created, enable the client events in the **App Settings** tab:\n\n![react-native-workout-client-events](//images.ctfassets.net/1es3ne0caaid/13zBdyDKoi2iO08CYcwkUw/5673c2595a00fd0aeba21cca9d815f32/react-native-workout-client-events.png)\n\nClient events allow us to emit messages directly from the app. Because normally, messages are only emitted from the server. This time, we’ll only be using the server to authenticate the user. This authentication process allows us to make requests directly from the app.\n\n## Clone the app\n\nStart by cloning the repo:\n\n```\n    git clone https://github.com/anchetaWern/RNWorkout.git\n```\n\nSwitch to the `starter` branch and install both the app and server dependencies:\n\n```\n    cd RNWorkout\n    git checkout starter\n    yarn install\n    cd server\n    npm install\n```\n\nThe `starter` branch contains a minimal version of the app where the screens, components, helper functions, styles, and the server code has already been added. This makes it easy for us to focus on the main subject of this tutorial, and that is how to work with Redux and Pusher Channels.\n\n## Starter code tour\n\nBefore we proceed with writing some code, let’s first do a quick tour of the code we have on the `starter` branch.\n\n### Helpers\n\nThe `app/helpers` folder contains two helper files for generating unique ID’s (`uniqid.js`) and usernames (`uniqname.js`). The unique ID’s are used as a unique identifier for the exercises and sets.\n\n### Server\n\nThe `server` folder contains the code for the server component of the app. This server is for authenticating the user when they initialize a new Pusher connection. No further updates are required inside this folder except for the `server/.env` file. We’ll update it later once we run the app.\n\n### Modals\n\nThe `app/modals` folder contains the code for the add exercise and add set modals. These modals are used for logging a new exercise and adding a set to a specific exercise. We will be updating the `AddExerciseModal.js` and `AddSetModal.js` later. This is to add the code for dispatching actions that will modify the store.\n\n### Components\n\nThe `app/components` folder contains all the components that the app is using. This includes the following:\n\n\n- **AlertBox** - for showing messages enclosed inside a box. \n- **IconButton** - for showing buttons with an icon in them.\n- **SetContainer** - for showing the individual sets (the gray circles with a number inside and below them).\n- **List** - serves as a container list for the SetContainer component.\n- **ConnectedFlatList** - for showing all the workout data (exercises and sets).\n\nAmong the components above, we’re only going to update the ConnectedFlatList (`app/components/ConnectedFlatList/ConnectedFlatList.js`). As it is right now, it won’t really render anything. We have to turn it into a “connected” component so it will automatically re-render once the relevant data in the store is updated.\n\n### Screens\n\nWe only have one screen because the logging and tracking features are too similar to have their own screen. If you open the `Root.js` file, you’ll see that we’re only using the LogWorkout screen:\n\n``` javascript\n    import LogWorkoutScreen from \"./app/screens/LogWorkout\";\n    \n    const LogStack = createStackNavigator(\n      {\n        Log: LogWorkoutScreen\n      },\n      { initialRouteName: \"Log\" }\n    );\n    \n    const TrackStack = createStackNavigator(\n      {\n        Track: LogWorkoutScreen\n      },\n      { initialRouteName: \"Track\" }\n    );\n```\n\nWe will be updating the `app/screens/LogWorkout.js` file later because that’s where we need to link everything up.\n\n## Build the app\n\nNow we’re ready to build the app. Here’s what we’ll be doing through the rest of the tutorial:\n\n- Add the actions.\n- Add the reducers.\n- Dispatch an action for adding a new exercise to the store when the user adds a new exercise. \n- Dispatch an action for adding a new set to the store when the user adds a new set.\n- Initialize Pusher.\n- Subscribe user to their own channel so they can emit client events.\n- Subscribe to another user so they can listen for client events emitted by that user.\n- Emit a client event on the channel when a new exercise or set is added by the user.\n- Listen for client events so the tracking tabs UI is synced to that of the user being followed.\n\nThe steps above aren’t ordered in a specific way. Most likely, you’ll have to switch between each of them as you’re testing the app. For this tutorial, I recommend you to start the app even if it’s not fully working yet. This allows you to easily see the effects of the code you’re adding, and not simply copy-pasting it:\n\n```\n    expo start\n```\n\nLet’s make this as hands-on as possible. I’ll first mention what needs to be done so you can try on your own, and then you can peak at the code either here or in the GitHub repo if you’re not sure what to do. I’ve also added “todo” comments in the starter code as a guide on where you should put a specific code. Feel free to browse around the code whenever you see “our task is to…” or “next, we need to..” as that’s the cue for when we’ll start adding the code. Try to figure out on your own first before you proceed.\n\nWe’ll work on the functionality for logging workouts first. That will be the first screen that you see when you run the app. Right now, we only have the following:\n\n![react-native-workout-starter-screen](//images.ctfassets.net/1es3ne0caaid/3MsKX00SNG0Ia6AAqa6Sq2/d08bbe7051266638499d81368acb4477/react-native-workout-starter-screen.png)\n\nThe username is generated, and it can be copied to clipboard, but that’s it. Nothing you can really do in this tab (logging tab) right now.\n\n### Add the actions\n\nOur first task is to figure out how to make the add exercise modal visible so we can enter the exercise we want to add.\n\nMy usual workflow when working with Redux is to first figure out what the global app state will look like. But before we can do that, we first need to determine the actions that can be done throughout the app in relation to how it affects the UI:\n\n- Open or close modals.\n- Add an exercise.\n- Set the current exercise.\n- Add a set.\n- Increment set.\n\nNote that I’ve excluded actions that are only applicable to a specific component. Here’s a good rule of thumb to determine if something is an action or not:\n\n\u003e If the rest of the app’s UI isn’t affected if the value of a specific piece of data is updated, then it’s not an action. \n\nFor this app, non-actions include:\n\n- Entering the name of the exercise.\n- Entering the weight of a set.\n\nBoth instances don’t update the app’s UI in a way that affects the whole app, so the state for those can be managed within the component level.\n\nGo ahead and create an `app/actions` folder. Inside it, create a `types.js` file and define all the actions that we came up with. This will help us avoid typos when working with [actions](https://redux.js.org/basics/actions):\n\n``` javascript\n    // app/actions/types.js\n    export const ADDED_EXERCISE = \"added_exercise\";\n    \n    export const ADDED_SET = \"added_set\";\n    export const INCREMENTED_SET = \"incremented_set\";\n    \n    export const MODAL_TOGGLED = \"modal_toggled\";\n    export const SET_EXERCISE = \"set_exercise\";\n```\n\nNext, define the [action creators](https://redux.js.org/basics/reducers). These are functions that will return the data needed by each action. Each action type will have its own function, which returns it as the `type` property:\n\n``` javascript\n    // app/actions/index.js\n    import {\n      ADDED_EXERCISE,\n      ADDED_SET,\n      INCREMENTED_SET,\n      MODAL_TOGGLED,\n      SET_EXERCISE\n    } from \"./types\";\n    \n    export const addedExercise = (exerciseID, exerciseName, user = \"me\") =\u003e {\n      return {\n        type: ADDED_EXERCISE,\n        id: exerciseID, // a machine-friendly version of the exercise name\n        exercise: exerciseName, // name of the exercise (e.g. front squat)\n        user: user \n      };\n    };\n    \n    export const addedSet = (setID, exerciseID, weight, user = \"me\") =\u003e {\n      return {\n        type: ADDED_SET,\n        id: setID, // unique ID for the set\n        exercise_id: exerciseID, // used for determining which exercise to put the set under\n        weight: weight, // how heavy is the weight being lifted (usually in lbs)\n        reps: 1, // default number of repetitions for a new set\n        user: user\n      };\n    };\n    \n    export const incrementedSet = (setID, reps, user = \"me\") =\u003e {\n      return {\n        type: INCREMENTED_SET,\n        id: setID, // unique ID for the set\n        reps: reps, // repetitions performed for this set\n        user: user\n      };\n    };\n    \n    export const modalToggled = (modalName, visibility) =\u003e {\n      return {\n        type: MODAL_TOGGLED, \n        modal: modalName, // addExerciseModal or addSetModal\n        visibility: visibility // true (visible) or false (not visible)\n      };\n    };\n    \n    // for setting the exercise in which to add a set\n    export const setExercise = id =\u003e {\n      return {\n        type: SET_EXERCISE,\n        exercise_id: id\n      };\n    };\n```\n\nNote that the `addedExercise`, `addedSet`, and `incrementedSet` functions have a `user` parameter which is set to `me` by default. This allows us to specify which specific app state will the data go. The value of this parameter can either be `me` or `others`. `me` is for the data displayed in the logging tab, while `others` is for the data displayed on the tracking tab. \n\n### Add the reducers\n\nNext, we need to create the [reducers](https://redux.js.org/basics/reducers). These are responsible for describing how a specific portion of the app state will change. Personally, I create a separate reducer based on the data they’re modifying. In this app, that would be:\n\n- Exercise reducer (`ExerciseReducer.js`) - for exercise-related data.\n- Set reducer (`SetReducer.js`) - for set-related data.\n- UI reducer (`UIReducer.js`) - for UI-related data. These are usually booleans which hide or show what is seen on the screen (for example, modals and progress loaders).\n\nWhen it comes to figuring out which reducers to create, anything really goes if you’re only working on a throw-away project to learn a specific technology. But be sure to read about Redux best practices when working in a production app.\n\nCreate an `app/reducers` folder and create the files mentioned above inside it. \n\nLet’s first start with the exercise reducer:\n\n``` javascript\n    // app/reducers/ExerciseReducer.js\n    import { ADDED_EXERCISE } from \"../actions/types\";\n    \n    import uniqid from \"../helpers/uniqid\";\n    \n    const INITIAL_STATE = {\n      exercises: [],\n      others_exercises: []\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      switch (action.type) {\n        case ADDED_EXERCISE:\n          const key = uniqid();\n          const id = action.id;\n          const exercise = action.exercise;\n          \n          // determine which specific array to update\n          const exercises =\n            action.user == \"me\" ? state.exercises : state.others_exercises;\n          \n          // create a new array with the new exercise appended to the end of it\n          const updated_exercises = exercises.concat({\n            key: key,\n            exercise_id: id, // machine-friendly version of the exercise name\n            exercise_name: exercise\n          });\n          \n          // return the new state based on which user performed the action\n          if (action.user == \"me\") {\n            return { ...state, exercises: updated_exercises };\n          }\n    \n          return { ...state, others_exercises: updated_exercises };\n    \n        default:\n          return state;\n      }\n    };\n```\n\nFrom the code above, the first step is to define the `INITIAL_STATE`. Note that this isn’t the initial value for the whole app state. This should only be for the specific data modified by this reducer. In this case, it’s only the `exercises` (the exercises logged by the current user), and `others_exercises` (the exercises logged by the user followed by the current user). \n\nBased on the `user` passed from the action, we get and re-create either the `exercises` or `others_exercises` array. Take note of the word “re-create” as we’re not really supposed to modify the state directly, we only replace it with a different value. Redux handles the calculation needed to determine whether the UI should be re-rendered or not. And if you modify the state directly, then it won’t be ensured that that process will work correctly. That’s why we’re using the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) and [concat method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) to avoid updating the state directly. \n\nNext is the set reducer. Again, we’re updating two arrays, one for each user. But this time, our reducer handles two actions, one for when the set is added, and another for when it’s incremented:\n\n``` javascript\n    // app/reducers/SetReducer.js\n    import { ADDED_SET, INCREMENTED_SET } from \"../actions/types\";\n    \n    const INITIAL_STATE = {\n      sets: [],\n      others_sets: []\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      let sets = [];\n      let index = 0;\n      let reps = 0;\n    \n      let set_name = \"sets\";\n      let current_sets = [];\n    \n      switch (action.type) {\n        case ADDED_SET:\n          current_sets = action.user == \"me\" ? state.sets : state.others_sets;\n          sets = current_sets.concat({\n            key: action.id,\n            exercise_id: action.exercise_id,\n            weight: action.weight,\n            reps: action.reps\n          });\n    \n          const updated_state =\n            action.user == \"me\"\n              ? { ...state, sets }\n              : { ...state, others_sets: sets };\n          return updated_state;\n    \n        case INCREMENTED_SET:\n          current_sets = action.user == \"me\" ? state.sets : state.others_sets;\n          sets = [...current_sets];\n          index = sets.findIndex(itm =\u003e {\n            return itm.key == action.id;\n          });\n    \n          reps = action.reps;\n          sets[index] = { ...sets[index], reps: reps + 1 }; // add 1 to the current rep\n    \n          if (action.user == \"others\") {\n            return { ...state, others_sets: sets };\n          }\n    \n          return { ...state, sets };\n    \n        default:\n          return state;\n      }\n    };\n```\n\nNext is the UI reducer. This is responsible for processing the actions for showing or hiding the modals, and setting the current exercise:\n\n``` javascript\n    // app/reducers/UIReducer.js\n    import { MODAL_TOGGLED, SET_EXERCISE } from \"../actions/types\";\n    \n    const INITIAL_STATE = {\n      ui: {\n        current_exercise: \"\",\n        addExerciseModalIsOpen: false,\n        addSetModalIsOpen: false\n      }\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      let ui = {};\n      switch (action.type) {\n        case SET_EXERCISE:\n          ui = { ...state.ui };\n          ui[\"current_exercise\"] = action.exercise_id;\n    \n          return {\n            ...state,\n            ui\n          };\n    \n        case MODAL_TOGGLED:\n          ui = { ...state.ui };\n          ui[`${action.modal}IsOpen`] = action.visibility;\n    \n          const new_state = {\n            ...state,\n            ui\n          };\n    \n          return new_state;\n    \n        default:\n          return state;\n      }\n    };\n```\n\nThe final step is to combine all the reducers into a single file. This allows us to easily supply it when we create the store later:\n\n``` javascript\n    // app/reducers/index.js\n    import { combineReducers } from \"redux\";\n    import ExerciseReducer from \"./ExerciseReducer\";\n    import SetReducer from \"./SetReducer\";\n    import UIReducer from \"./UIReducer\";\n    \n    export default combineReducers({\n      exercises: ExerciseReducer,\n      sets: SetReducer,\n      ui: UIReducer\n    });\n```\n\n### Connect the LogWorkout screen to the store\n\nNow that we’ve defined our actions, action creators, and reducers, the next step is to link the LogWorkout screen to the store.\n\nOpen `app/screens/LogWorkout.js` and add the following:\n\n``` javascript\n    import { MaterialIcons } from \"@expo/vector-icons\"; // already added\n    \n    // add these\n    import { createStore } from \"redux\";\n    import { Provider } from \"react-redux\";\n```\n\nIn the code above, `createStore` is used for [creating the store](https://redux.js.org/api/createstore). Consider the store as the global app state, while the `Provider` is a helper component that allows us to pass down the store to the component level. This gives us the ability to dispatch actions within this component and allow its child components to also connect to the store.\n\nNext, import the actions and reducers. To create a store we need to pass the combined reducers as an argument. This makes the store aware of which reducers it should use when a specific action is dispatched from the app:\n\n``` javascript\n    import {\n      modalToggled,\n      incrementedSet,\n      addedExercise,\n      addedSet\n    } from \"../actions\";\n    \n    import reducers from \"../reducers\";\n    const store = createStore(reducers);\n```\n\nNext, wrap the whole screen in the `Provider` component and pass the `store` as a value for the `store` prop:\n\n``` javascript\n    render() {\n      return (\n        \u003cProvider store={store}\u003e\n          ...\n        \u003c/Provider\u003e\n      );\n    }\n```\n\nOnce that’s done, we should be able to dispatch actions inside this component’s methods. In this case, we dispatch the action for opening the add exercise modal:\n\n``` javascript\n    showAddExerciseModal = () =\u003e {\n      store.dispatch(modalToggled(\"addExerciseModal\", true));\n    };\n```\n\nAs the button for opening the modal is inside the header, we need to set the `showAddExerciseModal` function as a navigation param. That way, we can access it as such from the header:\n\n``` javascript\n    componentDidMount() {\n      this.props.navigation.setParams({\n        showAddExerciseModal: this.showAddExerciseModal\n      });\n    }\n```\n\nIn the `navigationOptions`, you can now execute the `showAddExerciseModal` function:\n\n``` javascript\n    return {\n      headerTitle: `Log Workout`,\n      headerRight: (\n        \u003cIconButton\n          onPress={() =\u003e {\n            if (routeName == \"Log\") {\n              params.showAddExerciseModal(); // add this\n            }\n          }}\n        /\u003e\n      ),\n    }\n```\n\nWhen the button is clicked, it should execute the exercise reducer and the app’s state will be modified. Currently, the add exercise modal isn’t really aware of the changes that happen in the store yet, so it won’t really become visible when the button is clicked.\n\n### Open the add exercise modal\n\nThe next step is to make the add exercise modal into a connected component. That way, it will become aware of the state changes so it can re-render itself when a data it depends on changes.\n\nOpen the `app/modals/AddExerciseModal.js` file. To turn a component into a connected component, we need to use the `connect` method from `react-redux`. This allows us to add the functions for mapping specific data in the store as a prop for this component. It also allows us to define functions that we can use inside the component to dispatch actions, as you’ll see later:\n\n``` javascript\n    import { connect } from \"react-redux\";\n```\n\nNext, import the actions for toggling the visibility of the modal, and adding a new exercise:\n\n``` javascript\n    import { modalToggled, addedExercise } from \"../actions\";\n```\n\nNext, scroll to the bottom of the file (right before `export default AddExerciseModal`) and define the `mapStateToProps` function. This is used for mapping whichever data we have on the store as a prop for this component. In this case, we only need the `ui` object from the UI reducer. We use [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to extract it, and the spread syntax to extract the properties that are inside the `ui` object:\n\n``` javascript\n    const mapStateToProps = ({ ui }) =\u003e ({\n      ...ui\n    });\n```\n\nEarlier, in the UI reducer, we defined the following initial state:\n\n``` javascript\n    // app/reducers/UIReducer.js\n    const INITIAL_STATE = {  \n      ui: {\n        current_exercise: \"\",\n        addExerciseModalIsOpen: false,\n        addSetModalIsOpen: false\n      }\n    };\n```\n\n`mapStateToProps` gives us access to those specific properties in the `ui` object as if it were a prop that’s passed to the component (add exercise modal). To access the current visibility value of the add exercise modal, all we have to do is supply `this.props.ui.addExerciseModalIsOpen` to the `visible` prop of the `Modal` component:\n\n``` javascript\n    // app/modals/AddExerciseModal.js\n    \u003cModal\n      animationType=\"slide\"\n      visible={this.props.ui.addExerciseModalIsOpen}\n    \u003e\n      ...\n    \u003c/Modal\u003e\n```\n\nBut before we can do that, we first have to connect the component to the store. We can do that with the following code. This returns a “connected” version of the component, one that’s subscribed to the updates made in the store. `mapStateToProps` gets executed every time there’s an update to the store. If a relevant value is updated, the component is re-rendered because the prop it depends on is directly mapped to a value in the store:\n\n``` javascript\n    // app/modals/AddExerciseModal.js\n    export default connect(\n      mapStateToProps\n    )(AddExerciseModal);\n    \n    // export default AddExerciseModal; // replace this with the one above\n```\n\nOnce that’s done, clicking on the button in the header should make the add exercise modal visible.\n\nIf you’re wondering why we used `this.props.ui.addExerciseModalIsOpen` instead of `this.props.addExerciseModalIsOpen`, that’s because the data inside the UI reducer lives inside the `ui` object. We’ve defined this earlier in the reducer’s index file:\n\n``` javascript\n    // app/reducers/index.js\n    export default combineReducers({\n      // ...\n      ui: UIReducer\n    });\n```\n\nAnd in the UI reducer, everything lives inside another `ui` object:\n\n``` javascript\n    // app/reducers/UIReducer.js\n    const INITIAL_STATE = {\n      ui: {\n        // ...\n        addSetModalIsOpen: false\n      }\n    };\n```\n\nSo to access `addSetModalIsOpen`, we have to access `ui.ui.addSetModalIsOpen` from the store. Object destructuring gave us access to the `ui` object we’ve defined inside `app/reducers/index.js` file, while the spread syntax gave us access to the `ui` object defined inside `app/reducers/UIReducer.js` but not the properties inside of it:\n\n``` javascript\n    const mapStateToProps = ({ ui }) =\u003e ({\n      ...ui // note: spreads the ui object defined in the app/reducers/index.js file. not the ui object in the app/reducers/UIReducer.js\n    });\n```\n\nThis is why we still had to use `this.props.ui.addExerciseModalIsOpen`.\n\n### Add a new exercise\n\nThe next step is to add a new exercise when the add button in the add exercise modal is clicked. Earlier, you learned that to dispatch an action, you first have to import the action creator so you can dispatch it using the `dispatch` method from the `store`:\n\n``` javascript\n    // app/screens/LogWorkout.js\n    store.dispatch(modalToggled(\"addExerciseModal\", true));\n```\n\nThe problem we have now is that we have no access to the `store` or its `dispatch` method when inside the add exercise modal. The solution for that is the `mapDispatchToProps` method. It allows us to return functions that are also mapped as props for the component. The `dispatch` function is automatically passed as an argument to the `mapDispatchToProps` function, and we can use it to dispatch the action. In this case, we only need the action for toggling the visibility of the modal and adding the exercise:\n\n``` javascript\n    // app/modals/AddExerciseModal.js\n    // add this right below mapStateToProps\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        closeModal: () =\u003e {\n          dispatch(modalToggled(\"addExerciseModal\", false));\n        },\n        addExercise: (id, name) =\u003e {\n          dispatch(addedExercise(id, name));\n        }\n      };\n    };\n```\n\nTo use `mapDispatchToProps`, pass it as the second argument for the `connect` function:\n\n``` javascript\n    export default connect(\n      mapStateToProps,\n      mapDispatchToProps\n    )(AddExerciseModal);\n```\n\nThe next step is to call the two functions (`closeModal` and `addExercise`) we just mapped as props:\n \n``` javascript\n    addExercise = () =\u003e {\n      // add these\n      if (this.state.exercise_name) {\n        const name = this.state.exercise_name;\n        const id = name.replace(\" \", \"_\");\n        this.props.addExercise(id, name); \n        \n        // already added\n        this.setState({\n          exercise_name: \"\"\n        });\n      \n        this.props.closeModal(); \n      }\n    };\n```\n\nOnce that’s done, a new exercise should be added to the store every time you click on the add button in the add exercise modal. The modal should also automatically close after that.\n\nDon’t forget to close the modal when the close button is clicked:\n\n``` javascript\n    \u003cIconButton\n      icon=\"close\"\n      color=\"#FFF\"\n      size={18}\n      onPress={() =\u003e {\n        this.props.closeModal(); // add this\n      }}\n    /\u003e\n```\n\n### Show the exercises\n\nNow that we’ve added the code for creating a new exercise, the next step is to show the exercises that were added. That’s the job of the ConnectedFlatList component. \n\nWhat we need to do is very similar to what we did in the add exercise modal, so we’ll just breeze through the code. Start by importing all the things we need:\n\n``` javascript\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    import { connect } from \"react-redux\";\n    import uniqid from \"../../helpers/uniqid\";\n    \n    import {\n      modalToggled,\n      setExercise,\n      incrementedSet,\n      addedExercise,\n      addedSet\n    } from \"../../actions\";\n```\n\nNext, scroll to the bottom of the file and add the `mapStateToProps` function. While we’re here, let’s also add the data related to the sets:\n\n``` javascript\n    const mapStateToProps = state =\u003e {\n      return {\n        exercises: state.exercises.exercises,\n        sets: state.sets.sets,\n        others_exercises: state.exercises.others_exercises,\n        others_sets: state.sets.others_sets\n      };\n    };\n    \n    export default connect(\n      mapStateToProps\n    )(ConnectedFlatList);\n```\n\nNext, get the relevant exercise data from the props. While we’re here, let’s also extract the sets data:\n\n``` javascript\n    render() {\n      // add these\n      const exercises =\n        this.props.user == \"me\"\n          ? this.props.exercises\n          : this.props.others_exercises;\n      const sets =\n        this.props.user == \"me\" ? this.props.sets : this.props.others_sets;\n      \n      // already added\n      if (exercises.length) {\n        return (\n          \u003cFlatList\n            data={exercises}\n            extraData={sets}\n            renderItem={this.renderItem}\n            contentContainerStyle={{ paddingBottom: 50, backgroundColor: \"#FFF\" }}\n          /\u003e\n        );\n      }\n    }\n```\n\nTake note of the `extraData` prop that we’ve supplied for the FlatList. We’ve supplied `sets` to it because the sets data isn’t nested under the `exercises` array. That means that if we add a new set or increment an existing one, this FlatList won’t really get re-rendered. Supplying `sets` as an `extraData` allows us to re-render the main FlatList when the sets data is updated.\n\nOnce that’s done, you should now see the exercises being listed as you add them through the add exercise modal.\n\n\n### Open the add set modal\n\nNow that we can add and show exercises, the next step is to show the add set modal. \n\nWhen the plus button to the right of the exercise name is clicked, it should show the add set modal. To implement that, we need to dispatch the action for toggling the visibility of the add set modal.\n\nJust like what we did earlier in the add exercise modal, we need to use `mapDispatchToProps` so we can dispatch actions by calling functions that are mapped as a prop:\n\n``` javascript\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    // add these\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        openAddSetModal: () =\u003e {\n          dispatch(modalToggled(\"addSetModal\", true));\n        },\n        setExercise: exercise_id =\u003e {\n          dispatch(setExercise(exercise_id));\n        }\n      };\n    };\n    \n    export default connect(\n      mapStateToProps,\n      mapDispatchToProps // add this\n    )(ConnectedFlatList);\n```\n\nNote that aside from the `modalToggled` action, we also have `setExercise`. This is for updating the value of the `current_exercise` property in the UI reducer so that by the time the user hits the button for adding the set, we can extract this value from the props and supply it as one of the properties for the set to be created.\n\nNext, inside the `renderItem` method, call the relevant functions you returned in `mapDispatchToProps`:\n\n``` javascript\n    renderItem = ({ item }) =\u003e {\n      return (\n        \u003cView key={item.key} listKey={item.key}\u003e\n          \u003cView style={styles.list_item_header}\u003e\n            \u003cText style={styles.list_item_header_text}\u003e{item.exercise_name}\u003c/Text\u003e\n            \u003cIconButton\n              icon=\"add\"\n              size={20}\n              color=\"#333\"\n              onPress={() =\u003e {\n                if (this.props.user == \"me\") {\n                  // add these:\n                  this.props.openAddSetModal(); \n                  this.props.setExercise(item.exercise_id);\n                }\n              }}\n            /\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nThe next step is to turn the add set modal into a connected component. You should already know how to do this so let’s just look at the code:\n\n``` javascript\n    // app/modals/AddSetModal.js\n    import { connect } from \"react-redux\";\n    import { modalToggled, addedSet } from \"../actions\";\n    import uniqid from \"../helpers/uniqid\";\n\n\n    const mapStateToProps = ({ ui }) =\u003e ({\n      ...ui\n    });\n    \n    export default connect(\n      mapStateToProps\n    )(AddSetModal);\n\n\n    render() {\n      return (\n        \u003cModal\n          animationType=\"slide\"\n          visible={this.props.ui.addSetModalIsOpen}\n          ...\n        \u003e\n        \u003c/Modal\u003e\n      );\n    }\n```\n\nOnce that’s done, the add set modal should become visible when the plus button to the right of the exercise name is clicked.\n\n### Add a new set\n\nAdding a new set is very similar to how we added an exercise:\n\n``` javascript\n    // app/modals/AddSetModal.js\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        closeModal: () =\u003e {\n          dispatch(modalToggled(\"addSetModal\", false));\n        },\n        addSet: (setID, exerciseID, weight) =\u003e {\n          dispatch(addedSet(setID, exerciseID, weight));\n        }\n      };\n    };\n    \n    export default connect(\n      mapStateToProps,\n      mapDispatchToProps // add this\n    )(AddSetModal);\n```\n\nTake note of how we’re extracting the `current_exercise` from the props. Earlier, in the ConnectedFlatList, we’ve set the value for this property when the user clicks on the plus button to the right of the exercise name. That’s the purpose of the `setExercise` action, so we always have the correct value for the `exercise_id` when we add a new set:\n\n``` javascript\n    addSet = () =\u003e {\n      // add these\n      if (this.state.weight) {\n        const id = uniqid();\n        const exercise_id = this.props.ui.current_exercise;\n        const weight = this.state.weight;\n      \n        this.props.addSet(id, exercise_id, weight);\n        this.props.closeModal();\n        \n        // previously added code..\n      }\n    };\n```\n\nDon’t forget to close the modal when its close button is clicked:\n\n``` javascript\n    \u003cIconButton\n      icon=\"close\"\n      color=\"#FFF\"\n      size={18}\n      onPress={() =\u003e {\n        this.props.closeModal(); // add this\n      }}\n    /\u003e\n```\n\n### Show the sets\n\nThe next step is to show the sets added for a specific exercise. Earlier, we already mapped the current values of the `sets` and `others_sets` array in the store over to this component via `mapStateToProps`. All we have to do now is extract the relevant sets data from the props:\n\n``` javascript\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    renderSets = (exercise_id, key) =\u003e {\n      const id = uniqid();\n      const l_key = exercise_id + \":\" + key + \":\" + id;\n      \n      const sets_data =\n        this.props.user == \"me\" ? this.props.sets : this.props.others_sets;\n      const sets = sets_data.filter(item =\u003e {\n        return item.exercise_id == exercise_id;\n      });\n      \n      // already added:\n      if (sets.length) {\n        // ...\n      }\n    }\n```\n\nNote that the value of `this.props.users` in the code above is passed as a prop via the standard means (through the component). This is used to determine which specific set data to use (the current user or the user they’re following). The `l_key` is used as the value for the `listKey` for the FlatList that will contain each set. [We need to supply this](https://stackoverflow.com/questions/49276526/nested-flat-list-invariant-violation-a-virtualizedlist-contains-a-cell-which-it) because we’re nesting a FlatList within a FlatList. The `listKey` prop allows React to differentiate between sibling flatlists.\n\nAt this point, you should be able to see the sets being listed below a specific exercise when you add them.\n\n### Increment a set\n\nThe final thing we need to implement when it comes to the logging functionality is incrementing the value of a specific set. \n\nWe called it “increment set”, but what we really want to do is to increment the number of reps for a specific set. \n\nStart by adding it in the `mapDispatchToProps`:\n\n``` javascript\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        // added previously\n        setExercise: exercise_id =\u003e {\n          ...\n        },\n        // add this\n        incrementSet: (set_id, reps) =\u003e {\n          dispatch(incrementedSet(set_id, reps));\n        }\n      };\n    };\n```\n\nOnce that’s done, you should be able to call the method within the `onPress` method of the SetContainer:\n\n``` javascript\n    \u003cSetContainer\n      ...\n      onPress={() =\u003e {\n        if (this.props.user == \"me\") {\n          this.props.incrementSet(item.key, item.reps); // add this\n        }\n      }}\n    /\u003e\n```\n\nAt this point, clicking on a set should increment the number inside it.\n\n### Emit client events\n\nNow we’re ready to implement the tracking tab. \n\nStart by importing Pusher:\n\n``` javascript\n    // app/screens/LogWorkout.js\n    import Pusher from \"pusher-js/react-native\";\n```\n\nNext, initialize the class variables that we’re going to use:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      this.pusher = null;\n      this.my_channel = null; // the channel of the current user\n      this.followed_channel = null; // the channel of the user they followed\n    }\n```\n\nInside `componentDidMount`, add the code for initializing Pusher. Supply the credentials found in your Pusher app instance’s settings page. Leave the `authEndpoint` for now, we will supply it later once we run the server. Once that’s done, subscribe the user to their own channel (the unique `username` generated for them). In this case, we’re prefixing the channel name with `private-` to specify that this is a [private channel](https://pusher.com/docs/client_api_guide/client_private_channels). This specific channel type allows us to emit events directly from the app. Since it’s private, we have to authenticate through a server (the one inside the `server` directory of the project), that’s what the `authEndpoint` is for:\n\n``` javascript\n    componentDidMount() {\n      // previous code here\n    \n      // add these:\n      this.pusher = new Pusher(\"YOUR PUSHER APP KEY\", {\n        authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n        cluster: \"YOUR_PUSHER_APP_CLUSTER\",\n        encrypted: true\n      });\n    \n      this.my_channel = this.pusher.subscribe(`private-user-${username}`);\n      this.my_channel.bind(\"pusher:subscription_error\", status =\u003e {\n        Alert.alert(\n          \"Error occured\",\n          \"Cannot connect to Pusher. Please restart the app.\"\n        );\n      });\n    \n      this.my_channel.bind(\"pusher:subscription_succeeded\", () =\u003e {\n        console.log(\"subscription to my channel ok!\");\n      });\n    }\n```\n\nNext, inside the `render` method, we need to check whether `my_channel` is initialized before we render anything. This allows us to supply it as a prop to AddExerciseModal, AddSetModal, and ConnectedFlatList:\n\n``` javascript\n    render() {\n      return (\n        \u003cProvider store={store}\u003e\n          \u003cView\u003e\n          {\n            this.props.navigation.state.routeName == \"Log\" \u0026\u0026 this.my_channel \u0026\u0026 (\n              \u003cView style={styles.log_content}\u003e\n                \u003cView style={styles.top_content}\u003e\n                  ...\n                \u003c/View\u003e\n                \u003cAddExerciseModal channel={this.my_channel} /\u003e\n                \u003cAddSetModal channel={this.my_channel} /\u003e\n                \n                \u003cConnectedFlatList user={\"me\"} channel={this.my_channel} /\u003e\n              \u003c/View\u003e  \n            )\n          }\n          \u003c/View\u003e\n        \u003c/Provider\u003e\n      );\n    }\n```\n\nWhy do we need to add `my_channel` as a prop to those three components you ask? That’s because we need to trigger client events when a specific action happens. In this case, the actions are:\n\n- Adding a new exercise.\n- Adding a new set.\n- Incrementing a set.\n\nLet’s quickly run through all the places which needs updating:\n\n``` javascript\n    // app/modals/AddExerciseModal.js\n    addExercise = () =\u003e {\n      if (this.state.exercise_name) {\n        this.props.addExercise(id, name); // already added\n        \n        // add this\n        this.props.channel.trigger(\"client-added-exercise\", {\n          id,\n          name\n        });\n        \n        // rest of the code\n      }\n    };\n\n\n    // app/models/AddSetModal.js\n    addSet = () =\u003e {\n      if (this.state.weight) {\n        this.props.addSet(id, exercise_id, weight); // already added\n        // add this\n        this.props.channel.trigger(\"client-added-set\", {\n          id,\n          exercise_id,\n          weight\n        });\n        \n        // rest of the code\n      }    \n    };\n\n\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    \n    \u003cSetContainer\n      ...\n      onPress={() =\u003e {\n        if (this.props.user == \"me\") {\n          this.props.incrementSet(item.key, item.reps); // already added\n          // add this\n          this.props.channel.trigger(\"client-incremented-set\", {\n            set_id: item.key,\n            reps: item.reps\n          });\n        }\n      }}\n    /\u003e\n```\n\nThe codes we’ve added above should be fairly easy to understand. We’re emitting a [client event](https://pusher.com/docs/client_api_guide/client_events) via the `channel` prop we’ve passed from the LogWorkout screen. The `trigger` method accepts the name of the event as its first argument, and an object containing the data we want to emit as its second.\n\nNote that client events should always be prefixed with `client-`. This allows Pusher to determine that this event is sent from the client.\n\n### Listen for client events\n\nThe final step is to add the code for subscribing to the user entered in the tracking tab and listening to events as they get fired. We execute the code below when the user clicks on the button with a right arrow in the tracking tab:\n\n``` javascript\n    // app/screens/LogWorkout.js\n    \n    subscribe = () =\u003e {\n      this.followed_channel = this.pusher.subscribe(\n        `private-user-${this.state.subscribedToUsername}`\n      );\n    \n      this.followed_channel.bind(\"pusher:subscription_error\", status =\u003e {\n        Alert.alert(\n          \"Error occured\",\n          \"Cannot connect to Pusher. Please restart the app.\"\n        );\n      });\n    \n      this.followed_channel.bind(\"pusher:subscription_succeeded\", () =\u003e {\n        Alert.alert(\"Success\", \"You are now subscribed!\"); // let the user know that the subscription succeeded\n        \n        // listen for the events that we've emitted earlier\n        this.followed_channel.bind(\"client-added-exercise\", data =\u003e {\n          store.dispatch(addedExercise(data.id, data.name, \"others\")); // dispatch the action to update the UI for the tracking tab\n        });\n    \n        this.followed_channel.bind(\"client-added-set\", data =\u003e {\n          store.dispatch(\n            addedSet(data.id, data.exercise_id, data.weight, \"others\")\n          );\n        });\n    \n        this.followed_channel.bind(\"client-incremented-set\", data =\u003e {\n          store.dispatch(incrementedSet(data.set_id, data.reps, \"others\"));\n        });\n      });\n    };\n```\n\n## Running the app\n\nNow that we’ve added all of the relevant code, the app should work after we’ve added all the config and linked it to its server component.\n\nStart by adding your Pusher app credentials to the `server/.env` file:\n\n```\n    APP_ID=YOUR_PUSHER_APP_ID\n    APP_KEY=YOUR_PUSHER_APP_KEY\n    APP_SECRET=YOUR_PUSHER_APP_SECRET\n    APP_CLUSTER=YOUR_PUSHER_APP_CLUSTER\n    PORT=3000\n```\n\nOnce that’s done, run the server:\n\n```\n    node server.js\n```\n\nNext, add your ngrok auth token and expose port 3000 to the internet:\n\n```\n    ./ngrok authToken YOUR_NGROK_AUTH_TOKEN\n    ./ngrok http 3000\n```\n\nNgrok should show the https URL for the server. Copy it to your Pusher `authEndpoint` in the LogWorkout screen:\n\n``` javascript\n    // app/screens/LogWorkout.js\n    this.pusher = new Pusher(\"YOUR_PUSHER_APP_KEY\", {\n      authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n      cluster: \"YOUR_PUSHER_APP_CLUSTER\",\n      encrypted: true\n    });\n```\n\nOnce that’s done, the app should be fully functional. Try running it on two devices:\n\n```\n    expo start\n```\n\n## Conclusion\n\nIn this tutorial, you learned how to use Pusher within a React Native app to create a realtime workout tracking app. Along the way, you’ve solidified your experience with basic Redux concepts and Pusher Channels.\n\nYou can view the source code of this app on this [GitHub repo](https://github.com/anchetaWern/RNWorkout).","metaTitle":" Create a live workout tracking app with React Native","metaDescription":"Use React Native and Node to build a workout tracking app. Users will log and share workouts and follow each other's progress."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"OCJqPJOQ0eUWmwaYeKqKo","type":"Entry","createdAt":"2018-10-23T12:24:27.087Z","updatedAt":"2018-10-23T12:24:54.238Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with Flutter - Part 1: Introduction to Flutter","url":"introducing-flutter-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}}],"reviewDate":"2018-10-19","description":"This two-part series introduces Flutter, a framework for building cross-platform mobile apps with native interfaces, based on Dart. In part one, examine the pros and cons of Flutter, and compare it to React Native.","prerequisite":"This article assumes no prior knowledge of Flutter or Dart.","content":"In this series, we’ll take a look at a new mobile app development framework called Flutter. \n\nIn the past few years, many tools were developed to help developers create cross-platform apps. This was brought about by the need to release mobile apps that can run on both Android and iOS platforms a lot more quicker. Having two or more teams working on each platform is expensive, and most startups can’t really afford it. That’s why tools like [Cordova](https://cordova.apache.org/), [Ionic](https://ionicframework.com/), [React Native](https://facebook.github.io/react-native/), [Xamarin](https://visualstudio.microsoft.com/xamarin/), [NativeScript](https://www.nativescript.org/), [Fuse](https://www.fusetools.com/), and many others were developed.\n\nIn this part, you’ll learn what it is, how it works, some of its pros and cons, and how it compares to React Native.\n\nIn the second part, you’ll learn how to create an app with Flutter.\n\n## Prerequisites\n\nThis tutorial assumes no previous knowledge of Flutter.\n\n\n## What is Flutter?\n\nFlutter is a new mobile app development SDK from Google. It allows you to develop apps which run on both iOS and Android. Flutter has built-in Material Design and Cupertino widgets which you can use to create beautiful and professional looking apps.\n\nFlutter uses the Dart language for both its SDK and the code written by the developer. \n\nFlutter is a complete framework. This means that everything that you need to build and test a mobile application is included out of the box:\n\n- UI rendering\n- Widget library\n- Navigation\n- State management\n- Hardware APIs\n- Testing\n\n\n## How does Flutter work?\n\nFlutter is built with C, C++, Dart, and Skia, a 2D rendering engine.\n\nEach Flutter app is composed of the Flutter SDK and the Dart code written by the developer. Flutter uses ahead of time (AoT) compiling to compile both the Flutter SDK and the Dart code into a native ARM library. This is then executed by a \"runner\" that handles all the rendering, input and event handling inside the app.\n\nThe diagram below is a high-level representation of the Flutter system architecture. At the very top are the themes for both the [Android (Material Design)](https://flutter.io/widgets/material/) and [iOS (Cupertino)](https://flutter.io/widgets/cupertino/) platforms. As the developer, you wrap [Flutter’s basic widgets](https://flutter.io/widgets/basics/) with these themes depending on which platform you’re working with. \n\nNote that these widgets are Flutter’s own widgets, they don’t actually use the platform’s OEM widgets like React Native or NativeScript does. This brings us to the “Rendering” part in the diagram below. Flutter uses Skia to draw these widgets into the screen. If you’re familiar with [Unity](https://unity3d.com/), Flutter works in a similar way. The underlying framework takes care of the animation, painting, and gestures as the user interacts with the widgets that were rendered. Behind the scenes, Skia takes care of updating what the user sees on the screen. The Flutter SDK and the Dart code written by the developer is executed via the Dart VM.\n\n![flutter-system-architecture](//images.ctfassets.net/1es3ne0caaid/75Zca9ADtK8aGCASu4O6su/be3598840aed81c14c09bbd31838db26/flutter-system-architecture.png)\n\nThat was only a quick overview of how Flutter works. If you’re interested in diving deeper, be sure to check out these technical documents:\n\n- [Flutter system architecture](https://docs.google.com/presentation/d/1cw7A4HbvM_Abv320rVgPVGiUP2msVs7tfGbkgdrTy0I/edit?usp=sharing)\n- [Flutter technical Overview](https://flutter.io/technical-overview/)\n\n\n## Pros and cons of Flutter\n\nIn this section, we’ll take a quick look at some of Flutter’s advantages and disadvantages. These are in terms of developer productivity, widget support, and app performance. Note that these are true at the time of writing this tutorial. Flutter is in constant development, so what’s missing today might already be supported tomorrow.\n\n### Pros\n\n- Flutter is open-source. On top of the dedicated Google team that works on Flutter, everyone is also welcome to [contribute to the development of Flutter](https://github.com/flutter/flutter) and [publish their own packages](https://pub.dartlang.org/flutter). \n- Flutter has great [documentation](https://flutter.io/docs/). Everything you need to know about the Flutter APIs and internals is well-documented.\n- Allows your existing Java, Swift, and Objective-C code to be reused to work with native functionality on iOS and Android.\n- Flutter uses its own widgets, not the one which comes with Android and iOS (OEM widgets). This means we don’t have to deal with implementation details for both platforms.\n- Performance is very close to native performance. Unlike React Native which needs to go through a “bridge” to interact with native components, Flutter has a “runner” which renders the widgets and handles interactions. \n- Flutter comes with nice developer tooling out of the box. \n- Flutter’s interop and plugin system are designed to allow developers to access new mobile OS features and capabilities immediately when Apple or Google releases them.  \n\n### Cons\n\n- Fewer widgets are available for iOS. Flutter’s Cupertino widget library lacks some of the essentials like the [datepicker](https://developer.apple.com/design/human-interface-guidelines/ios/controls/pickers#date-pickers), [stepper](https://developer.apple.com/design/human-interface-guidelines/ios/controls/steppers/), and [progress indicator](https://developer.apple.com/design/human-interface-guidelines/ios/controls/progress-indicators/).\n- Doesn't have much support when it comes to text-editors and IDE's. Currently, it's only compatible with IntelliJ IDEA, Visual Studio Code, and Android Studio. \n- Unlike in React Native, styling is a bit messier in Flutter. Each widget has their own styling which you put right in the rendering code. Each widget can have children so things can get really messy because the structure and styling are mixed together.\n- You can’t transfer your existing CSS knowledge to style your widgets. Though a few concepts still apply (for example, margins and paddings), CSS properties and values are not applicable to Flutter.\n- Not a lot of third-party library support. If you need to use services like [Auth0](https://auth0.com/), [Pusher](https://pusher.com/), [Twilio](https://www.twilio.com/), or [Realm](https://realm.io/), you will most likely have to create your own custom integration.\n- No built-in support for common functionality such as maps and camera. Though you might find someone who’s currently working on it on the [Dart packages website](https://pub.dartlang.org/flutter).\n- Flutter hasn't been tested on tablets so there might be some UI issues on tablets. At the time of writing this article, tablet support isn’t really a priority so be sure to check out this [issue](https://github.com/flutter/flutter/issues/12310) to keep track of tablet support if you plan on developing for tablets.\n\n\n## How does Flutter compare to React Native?\n\nThe most popular cross-platform app development framework today is React Native, so developers trying to check out Flutter will naturally come to ask this question: “How does Flutter compare to React Native?”. \n\nIf you do a quick Google search, you will come across articles which compare the two, and probably with some other framework like Ionic, NativeScript, and Xamarin. There are probably others, but the main question you’re really asking is: “is Flutter a viable solution for cross-platform app development?”. And that’s why I chose React Native as the framework to compare with Flutter. Because it’s already been battle-tested, [lots of well-known companies are using it](https://facebook.github.io/react-native/showcase.html) and it has a huge community behind it.\n\nWe will be using the following criteria for comparing the two:\n\n\n- Developer Productivity\n- User Experience\n- Hardware API Support\n\nThe criteria above are arranged according to its level of importance. Developer Productivity and User Experience are more important while Hardware API Support is less important. Note that this prioritization is hugely based on my own personal experience as well as the research that went into writing this article.\n\n\n### Developer productivity\n\nWe already know that both React Native and Flutter allow us to write code once and it will run everywhere. If you have worked with React Native in a fair amount of time, you already know that this isn’t completely true. You still have to deal with configuration files (`Podfile`, `build.gradle`) on both platforms, you still have to deal with the different UI implementations, and work with either Java, Objective-C, or Swift code whenever you need to work with native functionality.\n\nIn Flutter, things are a bit different. You still have the `android` and `ios` folders in your project but most of the time you won’t really need to touch the files in there. \n\nHow fast the hot reload is is another important factor. Nothing kills productivity more than having to wait a minute for one simple change to show up in the live preview. Both React Native and Flutter have a hot reload feature, but the one in Flutter is faster. \n\nOther than that, there are other areas which developer productivity depends on:\n\n- Documentation\n- Learning curve\n- Community\n- Tooling\n\n#### Documentation\n\nThe first thing that developers will look at when learning a new technology is the documentation, so it plays a big role in developer productivity. Even advanced users will need to use it from time to time when they’re working with a new API.\n\nIf you give yourself a few minutes to scan through the documentation of React Native and Flutter, you will quickly see the effort that went into creating the documentation. The documentation is not just about describing the different APIs, functionalities, components and other features that are available in the framework. It’s also about making it easy for both newcomers and advanced users to find what they need to know about.\n\nReact Native’s documentation is very shallow, it teaches you one thing and then moves on to the next. It doesn’t allow you to easily dig deeper into one specific concept. If you’re a React Native developer, you might have noticed that there are lots of poorly documented (or not documented at all) APIs. So you have to look for it somewhere else, or just go on with your life not knowing that such capability (or bug) exists. \n\nFlutter’s documentation is very easy to use, all the important concepts and features that you need to know are visible in their sidebar. If you want to dig deeper, they also have API documentation. For example, all the classes that are available for constructing widgets with the material library are well-documented. It includes information about what the constructor expects, which properties you can pass in. Best of all, their search has auto-suggest, this is very helpful if you’re not exactly sure what you’re looking for.\n\nThey even take one step further with their Codelabs section, where it teaches the beginners how to create their very first Flutter app.\n\n#### Learning curve\n\nThe learning curve is the rate at which developers can learn a new technology. Though we can’t disregard the fact that previous experience can make the learning curve less steep. With that in mind, we’ll consider that developers can have previous experience with web technology, JavaScript, CSS, and programming as well.\n\nThis is where React Native takes the crown. Developers who have worked with JavaScript, CSS, and especially React, will easily feel at home when working with React Native. Their experience in creating components, stylesheets, and web APIs will make it easier to pick up React Native. All they have to learn about are the differences between the web and mobile environment, hardware APIs, and the third-party modules that they need to use. After that, they should be pretty productive when working with React Native.\n\nOn the other hand, Flutter uses Dart, a not so popular technology (according to the [Stack Overflow developer survey 2018](https://insights.stackoverflow.com/survey/2018/) at least), as the language for writing Flutter apps. But if you’ve worked with JavaScript before, Dart syntax should be pretty familiar. \n\nThey also introduced the idea that everything is a widget, and that includes adding styles to other widgets:\n\n``` dart\n    new Padding(\n      padding: new EdgeInsets.all(8.0),\n      child: const Card(child: const Text('Hello World!')),\n    )\n```\n\nIn the code above, we’re adding an 8px padding all around a card widget. Just by looking at this code, you’ll see that you can’t really transfer your existing CSS knowledge in styling Flutter apps, although basic concepts like margin and padding still apply.\n\nIn the beginning, most of your time will be spent on familiarizing yourself with how to build widgets, learning the Dart syntax for the different Flutter APIs, and the tooling around the Flutter framework.\n\nOverall, Flutter’s learning curve is only steep in the beginning, but it should reach a plateau once you get the basic concepts down.\n\n#### Community\n\nWithout further explanation, we already know who the winner is, it’s React Native. This is mainly because of two facts:\n\n\n- React Native entered the scene first. It was initially released in 2015 while Flutter is only released in 2017.\n- JavaScript and React developers who want to build mobile apps are naturally drawn to the technology. \n\nEven though this is the case, let’s take a moment to examine how well Flutter is doing compared to React Native when it comes community and overall public interest:\n\n**React Native**\n\n- GitHub stars: [68k](https://discordapp.com/invite/reactiflux)\n- GitHub issues: [13.5k](https://github.com/facebook/react-native/issues)\n- Stack Overflow: [37k questions](https://stackoverflow.com/questions/tagged/react-native)\n- Discord group: [35k members](https://discordapp.com/invite/reactiflux)\n- reactnative reddit: [15.6k subscribers](https://www.reddit.com/r/reactnative/)\n\n**Flutter**\n\n- GitHub stars: [36k](https://github.com/flutter/flutter)\n- GitHub issues: [12.5k issues](https://github.com/flutter/flutter/issues)\n- Stack Overflow: [5k questions](https://stackoverflow.com/questions/tagged/flutter)\n- Gitter: [5k members](https://gitter.im/flutter/flutter)\n- FlutterDev reddit: [5.8k subscribers](https://www.reddit.com/r/FlutterDev/)\n\nWith the numbers above, you can really see the difference between Flutter’s community and React Native. That said, those numbers shouldn’t be underestimated as it’s expected to grow as more and more people realizes the potential of Flutter.\n\nIf we go over at [Google Trends](https://trends.google.com/trends/explore?q=flutter,react%20native), we can see that the overall public interest with React Native and Flutter is climbing up at a steady pace in the past 12 months. Flutter peaked at around the first quarter of 2018. This suggests that companies and independent developers worldwide are checking out Flutter as an alternative for their mobile app development needs:\n\n![flutter-vs-react-trends](//images.ctfassets.net/1es3ne0caaid/5Pu7yMKCjY4I2SKosQKK4K/1348c71249f345f50a3be57ac9699676/flutter-vs-react-trends.png)\n\n#### Tooling\n\nThe availability of tools that makes the work of a developer easier and more pleasing plays a huge role in their productivity as well. Tooling includes:\n\n\n- **Text-editor and IDE support** - code completion, debugger, simulator integration.\n- **Command-line tools** - for checking system requirements, creating a new project, hot reload.\n- **Libraries and UI kits** - for implementing different kinds of functionality like payment processing and social login.\n- **Third-party services** - continuous integration, error reporting.\n\nThis is another area where the huge community support in React Native really trumps Flutter. \n\nReact Native is supported in popular text-editors like Atom, Sublime Text, WebStorm, Visual Studio Code. While Flutter is only supported in IntelliJ IDEA, Visual Studio Code, and Android Studio.\n\nFor command-line tools, while Flutter only has its built-in CLI, it comes packed with a lot of features. Some of the most useful ones include `doctor` which checks if your machine has all the necessary software to build apps with Flutter, `create`  for generating a new Flutter app, `install`  for installing Flutter packages and `build` for building the app:\n\n![flutter-cli](//images.ctfassets.net/1es3ne0caaid/93ECCB6DIW2aMgOuYkIys/3c238654c51f3e6ba57f9225451a287b/flutter-cli.png)\n\nThis is a far cry from what the React Native CLI offers as it only allows you to generate a new project, link native modules, and run the development server. But even though this is the case, the community compensates by creating tools like the [Ignite CLI](https://github.com/infinitered/ignite) and [Haul](https://callstack.github.io/haul/).\n\nIn terms of libraries, React Native taps into the huge repository of [JavaScript packages over at npm](https://www.npmjs.com/). Existing React packages can be easily converted to work with React Native, while libraries that don’t need to access native features can be used immediately (for example, MomentJS).\n\nOn the other hand, Flutter taps into the [Dart package repository](https://pub.dartlang.org/flutter) for its third-party library needs. Unlike React Native, these packages will often need to be written from scratch to utilize the Dart syntax as well as work with the APIs exposed by the Flutter SDK.\n\nFor third-party services, they usually have a JavaScript client that works with their HTTP API. Again, React Native has the advantage. Services like Sentry, Pusher, and Twilio all have JavaScript clients that work with the web. Making those clients work inside the React Native environment is fairly straightforward.\n\nOverall, the winner in the developer productivity criteria is React Native. The only sub-criteria where Flutter won is the documentation, while React Native took all the rest. \n\n**Winner:** React Native \n\n\n### User experience\n\nWhen it comes to User Experience, Flutter has the clear advantage because it’s drawing the UI directly on the native platform’s canvas. As explained earlier in the section on how Flutter works, this is theoretically faster than how React Native works, which is to communicate with the native platform via a “bridge”.\n\nI can’t really present you with hard numbers, but someone has already done the benchmarking before. If you want to know the details, be sure to check out this tutorial: [Examining performance differences between Native, Flutter, and React Native mobile development](https://robots.thoughtbot.com/examining-performance-differences-between-native-flutter-and-react-native-mobile-development). The results in that tutorial say that React Native uses more CPU while Flutter uses more memory. The difference is only small for both instances, but the app used as an example is a simple one (a stopwatch app). What we don’t know is whether the usage continue to rise at the same rate as the app demands more memory and CPU from the device.\n\nUsing those results, I’m not going to give credit to either. CPU and memory usage should be both efficient. But then again, it all depends on the app that you’re building. If your app requires a certain CPU intensive task to finish at the least amount of time then CPU efficiency is the least of your concern, because you need all that juice to complete the task faster. On the other hand, if you expect your users to be running your app along with others, then you should prioritize CPU efficiency instead. \n\n**Winner:** None\n\n\n### Hardware API support\n\nWhen it comes to hardware capability support, both React Native and Flutter come with a decent set of hardware APIs out of the box. \n\nEven though React Native doesn’t have support for camera, Bluetooth, and biometrics, developers who need them usually create a native module and upload them on GitHub. \n\nIn Flutter, most hardware APIs that are needed for most apps are already included in their built-in collection of APIs. If you need something that isn’t already supported, you can search for it on the [Dart packages website](https://pub.dartlang.org/flutter/). Most likely, someone has already started developing a package for it. But just like in React Native, some packages only support one platform.\n\nYet again, React Native wins this round because of the sheer number of hardware capabilities being exposed by other developers. Even though some of those have bugs or have poor support, it’s still better than implementing something from scratch.\n\n**Winner:** React Native\n\nBased on what you’ve read, you already know that React Native is the overall winner. That’s already expected because the criteria in which it won is closely tied to the number of developers using it. React Native came out first, and it has the advantage of the whole JavaScript and React community behind it. \n\n\n## Further reading\n\nIf you want to learn more about Flutter, here a few tutorials that can help you understand it further:\n\n\n- [What’s Revolutionary about Flutter](https://hackernoon.com/whats-revolutionary-about-flutter-946915b09514)\n- [Why we chose Flutter and how it’s changed our company for the better](https://medium.com/@matthew.smith_66715/why-we-chose-flutter-and-how-its-changed-our-company-for-the-better-271ddd25da60)\n- [Flutter FAQ](https://flutter.io/faq/)\n\n\n## Conclusion\n\nThat’s it! In this tutorial, we’ve taken a quick look at Flutter, a promising new mobile app development from Google. You learned some of its pros and cons, and how it compares to React Native. \n\nIn my own opinion, even though Flutter isn’t as battle-tested as React Native, I think it’s production-ready. The only downside is the initial developer productivity. React Native’s learning curve isn’t as steep as Flutter, especially for developers who already have experience in JavaScript and React. Furthermore, because of the huge community behind React Native, there are lots of third-party packages already written for integrating with popular services such as Pusher, Auth0, and Realm.\n\nAt the end, which framework you choose all depends on whether you can afford to invest more time and resources in learning Flutter or not. Flutter definitely has a lot of potential, and it deserves to be checked out by native and cross-platform developers alike.\n\nStay tuned for the second part of this tutorial series where we’ll take a look at the basics of creating an app with Flutter!","metaTitle":"Getting started with Flutter - Part 1","metaDescription":"This series is an introduction to Flutter, Google's mobile app SDK. It allows developers to create native interfaces for both Android and iOS. In part one, examine the pros and cons of Flutter, and compare it to React Native."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1H4DMn3JwsicCySuGmGo8Q","type":"Entry","createdAt":"2018-10-29T22:15:40.359Z","updatedAt":"2020-06-19T13:45:39.496Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":16,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a To Do app with React Native and Expo","url":"build-to-do-app-react-native-expo","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6ac2UAo0ZUWeUYiMg2w8eK","type":"Entry","createdAt":"2018-10-03T18:51:52.293Z","updatedAt":"2018-10-03T18:51:52.293Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Aman Mittal","url":"aman-mittal","email":"amanmittal.work@gmail.com","twitter":"https://twitter.com/amanhimself","github":"https://github.com/amandeepmittal","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"NnKmQxhMC4UySeaEaK4K6","type":"Entry","createdAt":"2018-10-18T18:00:28.031Z","updatedAt":"2018-10-18T18:00:28.031Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Expo","url":"expo","type":"library"}}],"reviewDate":"2018-10-18","description":"Build a To Do app using React Native and Expo for cross platform development and faster deployment","prerequisite":"To follow this tutorial you will need a basic understanding of JavaScript, Node.js and React Native","content":"# Build a t**o** **do app with React Native and Expo**\nReact Native is a framework for building native mobile apps using JavaScript. React Native is based on the same core concepts as ReactJS, giving you, the developer, the power to compose a cross-platform mobile UI by writing JavaScript components.\n\nReact Native differs from other hybrid mobile app solutions. It does not use a WebView that renders HTML elements inside an app. It has its own API and by using it, you build mobile apps with native iOS/Android UI components. React Native apps are written in JavaScript. Behind the scenes, React Native is a bridge between JavaScript and other native platform specific components.\n\nIn this article, we are going to build a to do application to understand and get hands-on experience with React Native. This mobile application will be cross-platform meaning it will run both on Android and iOS devices. I am going to use Expo for faster development to generate and run the demo in no time. Expo will take care of all the behind the scenes things for us such adding native modules when using vector icons in the demo application. You are only going to focus on the development process for a deeper understanding.\n\n\n## Prerequisites\n\nTo get started you will need three things to follow this article.\n\n- [Node.js](https://nodejs.org)(\u003e=8.12.0)\n- [Expo CLI](https://expo.io/tools) (\u003e= 2.2.0)\n[](https://expo.io/tools)\nTo install `expo-cli`, please run the following command.\n\n`npm install -g expo-cli`\n\n\n## Why use Expo?\n\nYou should consider using Expo for a React Native application because it handles a lot of hard tasks itself and provides smooth APIs that work with a React Native app outside the box. It is open source and is free to use. It provides a client app and by downloading it from the respective stores based on the mobile platform your device runs, you can easily test applications on real devices.\n\nThat said, Expo also has some drawbacks. For example, Expo's API currently does not have support for features like Bluetooth.  It works fine with camera, maps, location tracking, analytics, push notifications and so on. Distributing an Expo app is easy too. You can complete the process just by running the command `expo publish` and it will handle the build process and other tasks by running them behind the scene. It has a dedicated store where you can publish apps for others to use. Quite helpful in prototyping.\n\n**Side note: Why not Create-React-Native-App?**\nJust like React, React Native has its own boilerplate that depends on Expo for a faster development process, called [create-react-native-app](https://github.com/react-community/create-react-native-app). It works with zero build configuration just like Expo. Recently, the CRNA project has been merged with `expo-cli` project since both are identical in working.\n\n\n## What are we building?\n![How app looks in action?](https://d2mxuefqeaa7sj.cloudfront.net/s_21CA7D0E2F258DD2425AA73DD44B70100C76B75D0C5466A11D9EB0C2B6E72731_1540449382482_todo-demo.gif)\n\n\n\n## Getting started\n\nWrite the following command in your terminal to start a project.\n\n```\nexpo init rn 'To Do' s-example\n```\nWhen Expo's command line interface completes running the package manager, it generates a directory with name you gave in the above command. Open your favorite text editor/IDE and go to a file called `App.js`. This is what runs the application. You can test the content of the default app generated by running the following command.\n\n`expo-cli start`\n\nThe below is what you will get in your terminal. It runs the bundler which further triggers the execution of the application. Depending on the OS you are on, you can either use iOS simulator or Android emulator to run this application in development mode. The third option is to install the Expo client on your real device and scan the QR code as shown.\n\n\n![](https://d2mxuefqeaa7sj.cloudfront.net/s_21CA7D0E2F258DD2425AA73DD44B70100C76B75D0C5466A11D9EB0C2B6E72731_1539260940043_ss2.png)\n\n\nBy default, the code in `App.js` looks like this:\n\n\n    import React from 'react';\n    import { StyleSheet, Text, View } from 'react-native';\n    export default class App extends React.Component {\n      render() {\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cText\u003eOpen up App.js to start working on your app!\u003c/Text\u003e\n          \u003c/View\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center'\n      }\n    }); \n\nOnce you run the app in its current state, you will see the following result.\n\n\n![](https://d2mxuefqeaa7sj.cloudfront.net/s_21CA7D0E2F258DD2425AA73DD44B70100C76B75D0C5466A11D9EB0C2B6E72731_1539260946977_ss3.png)\n\n\nWe will replace it with following:\n\n\n    // App.js\n    import React from 'react';\n    import Main from './app/Main';\n    export default class App extends React.Component {\n      render() {\n        return \u003cMain /\u003e;\n      }\n    }\n\nTake a look at the directory structure of our demo app.\n\n\n![](https://d2mxuefqeaa7sj.cloudfront.net/s_21CA7D0E2F258DD2425AA73DD44B70100C76B75D0C5466A11D9EB0C2B6E72731_1539260955467_ss4.png)\n\n\nIn a more complex application, you will find a folder called `screens`. Since we are using only one screen in the file `Main.js` you do not have to define it explicitly.\n\nDid you notice the other two directories: `utils` and `components`?\n\nInside the `utils` directory, I am keeping all the global variables or API calls we need to make. Though in our demo there are no external API calls. I have defined some global variables. Name this file, `Colors.js`.\n\n\n    // app/utils/Colors.js\n    const primaryStart = '#f18a69';\n    const primaryEnd = '#d13e60';\n    export const primaryGradientArray = [primaryStart, primaryEnd];\n    export const lightWhite = '#fcefe9';\n    export const inputPlaceholder = '#f1a895';\n    export const lighterWhite = '#f4e4e2';\n    export const circleInactive = '#ecbfbe';\n    export const circleActive = '#90ee90';\n    export const itemListText = '#555555';\n    export const itemListTextStrike = '#c4c4cc';\n    export const deleteIconColor = '#bc2e4c';\n\nIt contains all the hex values of colors that we can re-use in many different places of our application. Defining global variables for the purpose of re-using them is a common practice in React Native community.\n\nThe `components` directory further contain re-usable components used in our to do application.\n\n\n## Building a header\n\nTo build the header for our application, we need three things: status bar, background color (we are going to use the same background for the whole screen instead of just header) and header title itself. Let's start with the status bar. Notice the status bar of our application. We are changing it to white so that it will be acceptable once we add a background to our Main screen.\n\nThis can be done by importing the `StatusBar` component from `react-native`. We will be using `barStyle` prop to change color. For only Android devices, you can change the height of the status bar by using `currentHeight` prop. iOS does not allow this.\n\nFor the background, I am going to add a gradient style to our view component. Expo supports this out of the box and you can directly import the component and use it like below.\n\n\n    // App.js\n    import React from 'react';\n    import { StyleSheet, Text, View, StatusBar } from 'react-native';\n    import { LinearGradient } from 'expo';\n    import { primaryGradientArray } from './utils/Colors';\n    export default class Main extends React.Component {\n      render() {\n        return (\n          \u003cLinearGradient colors={primaryGradientArray} style={styles.container}\u003e\n            \u003cStatusBar barStyle=\"light-content\" /\u003e;\n            \u003cText\u003eOpen up App.js to start working on your app!\u003c/Text\u003e\n          \u003c/LinearGradient\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1\n      }\n    });\n\n`LinearGradient` component is a wrapper over the React Native's `View` core component. It provides a gradient looking background. It takes at least two values in the array `colors` as props. We are importing the array from `utitls/Colors.js`. Next, we create re-usable `Header` component inside the `components` directory.\n\n\n    // app/components/Header.js\n    import React from 'react';\n    import { View, Text, StyleSheet } from 'react-native';\n    const Header = ({ title }) =\u003e (\n      \u003cView style={styles.headerContainer}\u003e\n        \u003cText style={styles.headerText}\u003e{title.toUpperCase()}\u003c/Text\u003e\n      \u003c/View\u003e\n    );\n    const styles = StyleSheet.create({\n      headerContainer: {\n        marginTop: 40\n      },\n      headerText: {\n        color: 'white',\n        fontSize: 22,\n        fontWeight: '500'\n      }\n    });\n    export default Header;\n\n\nImport it in `Main.js` and add a title of your app.\n\n\n    // app/Main.js\n    // after all imports\n    import Header from './components/Header';\n    const headerTitle = 'To Do';\n    // after status bar, replace the \u003cText\u003e with\n    \u003cView style={styles.centered}\u003e\n      \u003cHeader title={headerTitle} /\u003e\n    \u003c/View\u003e;\n    // add styles\n    centered: {\n      alignItems: 'center';\n    }\n\nObserve that we are passing the title of the app as a prop to `Header` component. You can definitely use the same component again in the application if needed.\n\n## TextInput\n\nIn React Native, to record the user input we use `TextInput`. It uses the device keyboard, or in case of a simulator, you can use the hardware keyboard too. It has several configurable props with features such as auto-correction, allow multi-line input, placeholder text, set the limit of characters to be entered, different keyboard styles and so on. For our to do app, we are going to use several of these features.\n\n\n    // app/components/Input.js\n    import React from 'react';\n    import { StyleSheet, TextInput } from 'react-native';\n    import { inputPlaceholder } from '../utils/Colors';\n    const Input = ({ inputValue, onChangeText, onDoneAddItem }) =\u003e (\n      \u003cTextInput\n        style={styles.input}\n        value={inputValue}\n        onChangeText={onChangeText}\n        placeholder=\"Type here to add note.\"\n        placeholderTextColor={inputPlaceholder}\n        multiline={true}\n        autoCapitalize=\"sentences\"\n        underlineColorAndroid=\"transparent\"\n        selectionColor={'white'}\n        maxLength={30}\n        returnKeyType=\"done\"\n        autoCorrect={false}\n        blurOnSubmit={true}\n        onSubmitEditing={onDoneAddItem}\n      /\u003e\n    );\n    const styles = StyleSheet.create({\n      input: {\n        paddingTop: 10,\n        paddingRight: 15,\n        fontSize: 34,\n        color: 'white',\n        fontWeight: '500'\n      }\n    });\n    export default Input;\n\nIgnore the props for now that are incoming from its parent component. For a while focus only on the props it has. Let us go through each one of them.\n\n\n- *value*: the value of the text input. By default, it will be an empty string since we are using the local state to set it. As the state updates, the value of the text input updates.\n- *onChangeText*: is a callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\n- *placeholder*: just like in HTML, placeholder is to define a default message in the input field indicating as if what is expected.\n- *placeholderTextColor*: the custom text color of the placeholder string.\n- *returnKeyType*: determines how the return key on the device's keyboard should look. You can find more values or platform specific values [here](https://facebook.github.io/react-native/docs/textinput.html#returnkeytype). Some of the values are specific to each platform.\n- *autoCorrect*: this prop let us decide whether to show the autocorrect bar along with keyboard or not. In our case, we have set it to *false*.\n- *multiline*: if true, the text input can be multiple lines. Like we have set in above.\n- *maxlength*: helps you define the maximum number of characters that you can allow for the user to enter.\n- *autoCapitalize*: to automatically capitalize certain characters. We are passing `sentences` as the default value. This means, every new sentence will automatically have its first character capitalized.\n- *underlineColorAndroid*: works only with android. It prompts sets a bottom border or an underline.\n- *blurOnSubmit*: In case of multiline TextInput field, this behaves as when pressing return key, it will blur the field and trigger the `onSubmitEditing` event instead of inserting a newline into the field.\n- *onSubmitEditing*: contains the business the logic in form of a callback as to what to do when the return key or input's submit button is pressed. We will be defining this callback in `Main.js`.\n\nTo add this component to `Main.js` you will have to import it. The props we are passing to the `Input` component at `inputValue` are from the state of `Main`. Other such as `onChangeText` is a custom method. Define them inside the `Main` component.\n\n\n    // app/Main.js\n    import React from 'react';\n    import { StyleSheet, Text, View, StatusBar } from 'react-native';\n    import { LinearGradient } from 'expo';\n    import { gradientStart, gradientEnd } from './utils/Colors';\n    import Header from './components/Header';\n    import Input from './components/Input';\n    const headerTitle = 'To Do';\n    export default class Main extends React.Component {\n      state = {\n        inputValue: ''\n      };\n      newInputValue = value =\u003e {\n        this.setState({\n          inputValue: value\n        });\n      };\n      render() {\n        const { inputValue } = this.state;\n        return (\n          \u003cLinearGradient\n            colors={[gradientStart, gradientEnd]}\n            style={styles.container}\n          \u003e\n            \u003cStatusBar barStyle=\"light-content\" /\u003e\n            \u003cView style={styles.centered}\u003e\n              \u003cHeader title={headerTitle} /\u003e\n            \u003c/View\u003e\n            \u003cView style={styles.inputContainer}\u003e\n              \u003cInput inputValue={inputValue} onChangeText={this.newInputValue} /\u003e\n            \u003c/View\u003e\n          \u003c/LinearGradient\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1\n      },\n      centered: {\n        alignItems: 'center'\n      },\n      inputContainer: {\n        marginTop: 40,\n        paddingLeft: 15\n      }\n    });\n\n\n## Building the list component\n\nTo add the value from the `Input` component and display it on the screen, we are going to use the below code. Create a new file called `List.js` inside the components directory.\n\n\n    // app/components/List.js\n    import React, { Component } from 'react';\n    import {\n      View,\n      Text,\n      Dimensions,\n      StyleSheet,\n      TouchableOpacity,\n      Platform\n    } from 'react-native';\n    import { MaterialIcons } from '@expo/vector-icons';\n    import {\n      itemListText,\n      itemListTextStrike,\n      circleInactive,\n      circleActive,\n      deleteIconColor\n    } from '../utils/Colors';\n    const { height, width } = Dimensions.get('window');\n    class List extends Component {\n      onToggleCircle = () =\u003e {\n        const { isCompleted, id, completeItem, incompleteItem } = this.props;\n        if (isCompleted) {\n          incompleteItem(id);\n        } else {\n          completeItem(id);\n        }\n      };\n      render() {\n        const { text, deleteItem, id, isCompleted } = this.props;\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cView style={styles.column}\u003e\n              \u003cTouchableOpacity onPress={this.onToggleCircle}\u003e\n                \u003cView\n                  style={[\n                    styles.circle,\n                    isCompleted\n                      ? { borderColor: circleActive }\n                      : { borderColor: circleInactive }\n                  ]}\n                /\u003e\n              \u003c/TouchableOpacity\u003e\n              \u003cText\n                style={[\n                  styles.text,\n                  isCompleted\n                    ? {\n                        color: itemListTextStrike,\n                        textDecorationLine: 'line-through'\n                      }\n                    : { color: itemListText }\n                ]}\n              \u003e\n                {text}\n              \u003c/Text\u003e\n            \u003c/View\u003e\n            {isCompleted ? (\n              \u003cView style={styles.button}\u003e\n                \u003cTouchableOpacity onPressOut={() =\u003e deleteItem(id)}\u003e\n                  \u003cMaterialIcons\n                    name=\"delete-forever\"\n                    size={24}\n                    color={deleteIconColor}\n                  /\u003e\n                \u003c/TouchableOpacity\u003e\n              \u003c/View\u003e\n            ) : null}\n          \u003c/View\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      container: {\n        width: width - 50,\n        flexDirection: 'row',\n        borderRadius: 5,\n        backgroundColor: 'white',\n        height: width / 8,\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        marginVertical: 5,\n        ...Platform.select({\n          ios: {\n            shadowColor: 'rgb(50,50,50)',\n            shadowOpacity: 0.8,\n            shadowRadius: 2,\n            shadowOffset: {\n              height: 2,\n              width: 0\n            }\n          },\n          android: {\n            elevation: 5\n          }\n        })\n      },\n      column: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        width: width / 1.5\n      },\n      text: {\n        fontWeight: '500',\n        fontSize: 16,\n        marginVertical: 15\n      },\n      circle: {\n        width: 30,\n        height: 30,\n        borderRadius: 15,\n        borderWidth: 3,\n        margin: 10\n      },\n      button: {\n        marginRight: 10\n      }\n    });\n    export default List;\n\nOur `List` component uses `TouchableOpactiy` from React Native that behaves like a button but responds to touch on a mobile rather than a normal button as we use in web. It also makes use of different colors that we defined earlier. We are also defining a method called `toggleCircle` that will respond to the `onPress` action on `TouchableOpacity` that accordingly respond by checking or unchecking the to do list item.\n\n`@expo/vector-icons` is provided by Expo to add icons from different libraries such as FontAwesome, IonIcons, MaterialIcons, etc. This is where Expo comes in handy. You do not have to add most of the third party `npm` packages manually in our app. The vector icons are also available as third party library called [react-native-vector-icons](https://www.npmjs.com/package/react-native-vector-icons \"React Native Vector Icons\") and are already included in the Expo core.\n\n`Dimensions` is a component that helps us to set the initial width and height of a component before the application runs. We are using its `get()` method to acquire any device's width and height.\n\nReact Native provides an API module called `Platform` that detects the platform on which the app is running. You can use the detection logic to implement platform-specific code for styling just like we did above or with any other component. To use `Platform` module, we have to import it from React Native. We are using it to apply styles in the form of shadow that will appear under the every row component when a to do item is being add.\n\nTo make this work, we are going to use `ScrollView` lists and import this component as a child in `Main.js`.\n\n\n    \u003cView style={styles.list}\u003e\n      \u003cScrollView contentContainerStyle={styles.scrollableList}\u003e\n        {Object.values(allItems)\n          .reverse()\n          .map(item =\u003e (\n            \u003cList\n              key={item.id}\n              {...item}\n              deleteItem={this.deleteItem}\n              completeItem={this.completeItem}\n              incompleteItem={this.incompleteItem}\n            /\u003e\n          ))}\n      \u003c/ScrollView\u003e\n    \u003c/View\u003e\n\n`ScrollView` is a wrapper on the `View` component that provides the user interface for scrollable lists inside a React Native app. It is a generic scrolling container that can host multiple other components and views. It works both ways, vertical by default and `horizontal` by setting the property itself. We will be using this component to display the list of to do items, just after the `Input`.\n\nTo provide styles to it, it uses a prop called `contentContainerStyle`.\n\n\n    // app/Main.js\n    list: {\n        flex: 1,\n        marginTop: 70,\n        paddingLeft: 15,\n        marginBottom: 10\n      },\n      scrollableList: {\n        marginTop: 15\n      },\n\nDon’t worry if you don’t understand all the code inside the `ScrollView` component. Our next step is to add some custom methods and interact with realtime data, after that you will be able familiar with all the pieces.\n\n\n## Understanding AsyncStorage\n\nAccording to the [React Native](https://facebook.github.io/react-native/docs/asyncstorage) [documentation](https://facebook.github.io/react-native/docs/asyncstorage) , `AsyncStorage` is defined as:\n\n\n\u003e a simple, unencrypted, asynchronous, persistent, key-value storage system that is global to the app. It should be used instead of LocalStorage.\n\n\n\u003e On iOS, AsyncStorage is backed by native code that stores small values in a serialized dictionary and larger values in separate files. On Android, AsyncStorage will use either RocksDB or SQLite based on what is available.\n\nThe CRUD operations are going to be used in the application using AsyncStorage such that our application is able to perform these operations with realtime data on the device. We are going to associate multiple operations for each to do item in the list, such as adding, deleting, editing and so on, as basically these are CRUD operations. We are going to use objects instead of an array to store these items. Operating CRUD operations on an `Object` is going to be easier in our case. We will be identifying each object through a unique ID. In order to generate unique IDs we are going to install a module called `uuid`.\n\nIn order to proceed, first we need to run this command:\n\n\n    npm install\n    # after it runs successfully,\n    npm install --save uuid\n\nThe structure of each to do item is going to be like this:\n\n\n    232390: {\n      id: 232390,           // same id as the object\n      text: 'New item',     // name of the To Do item\n      isCompleted: false,   // by default\n      createdAt: Date.now()\n    }\n\nWe are going to perform CRUD operations in our application to work on an object instead of an array. To read values from an object we are using `Object.values(allItems)`, where `allItems` is the object that stores all to do list items. We have to add it as an empty object in our local state. This also allows us to `map()` and traverse each object inside it just like an array. Another thing we have to implement before we move on to CRUD operations is to add the new object of a to do item when created at the end of the list. For this we can use `reverse()` method from JavaScript. This is how our complete `Main.js` file looks like.\n\n\n    // app/Main.js\n    import React from 'react';\n    import {\n      StyleSheet,\n      View,\n      StatusBar,\n      ActivityIndicator,\n      ScrollView,\n      AsyncStorage\n    } from 'react-native';\n    import { LinearGradient } from 'expo';\n    import uuid from 'uuid/v1';\n    import { primaryGradientArray } from './utils/Colors';\n    import Header from './components/Header';\n    import SubTitle from './components/SubTitle';\n    import Input from './components/Input';\n    import List from './components/List';\n    import Button from './components/Button';\n    const headerTitle = 'To Do';\n    export default class Main extends React.Component {\n      state = {\n        inputValue: '',\n        loadingItems: false,\n        allItems: {},\n        isCompleted: false\n      };\n      componentDidMount = () =\u003e {\n        this.loadingItems();\n      };\n      newInputValue = value =\u003e {\n        this.setState({\n          inputValue: value\n        });\n      };\n      loadingItems = async () =\u003e {\n        try {\n          const allItems = await AsyncStorage.getItem('ToDos');\n          this.setState({\n            loadingItems: true,\n            allItems: JSON.parse(allItems) || {}\n          });\n        } catch (err) {\n          console.log(err);\n        }\n      };\n      onDoneAddItem = () =\u003e {\n        const { inputValue } = this.state;\n        if (inputValue !== '') {\n          this.setState(prevState =\u003e {\n            const id = uuid();\n            const newItemObject = {\n              [id]: {\n                id,\n                isCompleted: false,\n                text: inputValue,\n                createdAt: Date.now()\n              }\n            };\n            const newState = {\n              ...prevState,\n              inputValue: '',\n              allItems: {\n                ...prevState.allItems,\n                ...newItemObject\n              }\n            };\n            this.saveItems(newState.allItems);\n            return { ...newState };\n          });\n        }\n      };\n      deleteItem = id =\u003e {\n        this.setState(prevState =\u003e {\n          const allItems = prevState.allItems;\n          delete allItems[id];\n          const newState = {\n            ...prevState,\n            ...allItems\n          };\n          this.saveItems(newState.allItems);\n          return { ...newState };\n        });\n      };\n      completeItem = id =\u003e {\n        this.setState(prevState =\u003e {\n          const newState = {\n            ...prevState,\n            allItems: {\n              ...prevState.allItems,\n              [id]: {\n                ...prevState.allItems[id],\n                isCompleted: true\n              }\n            }\n          };\n          this.saveItems(newState.allItems);\n          return { ...newState };\n        });\n      };\n      incompleteItem = id =\u003e {\n        this.setState(prevState =\u003e {\n          const newState = {\n            ...prevState,\n            allItems: {\n              ...prevState.allItems,\n              [id]: {\n                ...prevState.allItems[id],\n                isCompleted: false\n              }\n            }\n          };\n          this.saveItems(newState.allItems);\n          return { ...newState };\n        });\n      };\n      deleteAllItems = async () =\u003e {\n        try {\n          await AsyncStorage.removeItem('ToDos');\n          this.setState({ allItems: {} });\n        } catch (err) {\n          console.log(err);\n        }\n      };\n      saveItems = newItem =\u003e {\n        const saveItem = AsyncStorage.setItem('To Dos', JSON.stringify(newItem));\n      };\n      render() {\n        const { inputValue, loadingItems, allItems } = this.state;\n        return (\n          \u003cLinearGradient colors={primaryGradientArray} style={styles.container}\u003e\n            \u003cStatusBar barStyle=\"light-content\" /\u003e\n            \u003cView style={styles.centered}\u003e\n              \u003cHeader title={headerTitle} /\u003e\n            \u003c/View\u003e\n            \u003cView style={styles.inputContainer}\u003e\n              \u003cSubTitle subtitle={\"What's Next?\"} /\u003e\n              \u003cInput\n                inputValue={inputValue}\n                onChangeText={this.newInputValue}\n                onDoneAddItem={this.onDoneAddItem}\n              /\u003e\n            \u003c/View\u003e\n            \u003cView style={styles.list}\u003e\n              \u003cView style={styles.column}\u003e\n                \u003cSubTitle subtitle={'Recent Notes'} /\u003e\n                \u003cView style={styles.deleteAllButton}\u003e\n                  \u003cButton deleteAllItems={this.deleteAllItems} /\u003e\n                \u003c/View\u003e\n              \u003c/View\u003e\n              {loadingItems ? (\n                \u003cScrollView contentContainerStyle={styles.scrollableList}\u003e\n                  {Object.values(allItems)\n                    .reverse()\n                    .map(item =\u003e (\n                      \u003cList\n                        key={item.id}\n                        {...item}\n                        deleteItem={this.deleteItem}\n                        completeItem={this.completeItem}\n                        incompleteItem={this.incompleteItem}\n                      /\u003e\n                    ))}\n                \u003c/ScrollView\u003e\n              ) : (\n                \u003cActivityIndicator size=\"large\" color=\"white\" /\u003e\n              )}\n            \u003c/View\u003e\n          \u003c/LinearGradient\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1\n      },\n      centered: {\n        alignItems: 'center'\n      },\n      inputContainer: {\n        marginTop: 40,\n        paddingLeft: 15\n      },\n      list: {\n        flex: 1,\n        marginTop: 70,\n        paddingLeft: 15,\n        marginBottom: 10\n      },\n      scrollableList: {\n        marginTop: 15\n      },\n      column: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between'\n      },\n      deleteAllButton: {\n        marginRight: 40\n      }\n    });\n    ```\n\nLet us take a look at the custom CRUD methods. `onDoneAddItem()` starts by invoking `this.setState` that has access to a `prevState` object if the input value is not empty. It gives us any to do item that has been previously added to our list. Inside its callback, we will first create a new ID using `uuid` and then create an object called `newItemObject` which uses the ID as a variable for the name. Then, we create a new object called `newState` which uses the `prevState` object, clears the `TextInput` for `newInputValue` and finally adds our `newItemObject` at the end of the other to do items list. It might sound overwhelming since a lot is going on but try implementing the code, you will understand it better.\n\nTo delete an item from the to do list object, we have to get the id of the item from the state. In `Main.js` we have `deleteItem`.\n\n\n    // app/Main.js\n    deleteItem = id =\u003e {\n      this.setState(prevState =\u003e {\n        const allItems = prevState.allItems;\n        delete allItems[id];\n        const newState = {\n          ...prevState,\n          ...allItems\n        };\n        this.saveItems(newState.allItems);\n        return { ...newState };\n      });\n    };\n\nThis is further passed as a prop to our `List` component as `deleteItem={this.deleteItem}`. We are adding the `id` of an individual to do item since we are going to use this `id` to delete the item from the list.\n\nThe `completeItem` and `incompleteItem` track which items in the to do list have been marked completed by the user or have been unmarked. In `AsyncStorage` the items are saved in strings. It cannot store objects. So when saving the item if you are not using `JSON.stringify()` your app is going to crash. Similarly, when fetching the item from the storage, we have to parse it using `JSON.parse()` like we do above in `loadingItems()` method.\n\n\n    const saveTo Dos = AsyncStorage.setItem('ToDos', JSON.stringify(newTo Dos));\n\nHere, you can say that `ToDos` is the name of the collection. `setItem()` function from `AsyncStorage` is similar to any key-value paired database. The first item `ToDos` is the key, and `newItem` is going to be the value, in our case the to do list items as different objects. I have already described the structure of data we are using to create each to do list item.\n\nTo verify that the data is getting saved on the device, we can restart the application. But how is our application fetching the data from device's storage? This is done by an asynchronous function we have defined called `loadingItems`. Since it is asynchronous, we have to wait till the application is done reading data from the device's storage. Usually, nowadays smartphones do not take much time to perform this action. To run this asynchronous function we use React's lifecycle hook `componentDidMount` which is called immediately after a component is initialized.\n\n\n    // app/Main.js\n    componentDidMount = () =\u003e {\n      this.loadingItems();\n    };\n    loadingItems = async () =\u003e {\n      try {\n        const allItems = await AsyncStorage.getItem('ToDos');\n        this.setState({\n          loadingItems: true,\n          allItems: JSON.parse(allItems) || {}\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n`loadingItems` is then used inside a conditional operator which can be defined as if the data is read from storage, you can render the `List` component or otherwise just render a loading component provided by `ActivityIndicator` which again comes as a React Native core module.\nLastly, `AsyncStorage` also provides a function to clear all application data in one touch by executing `removeItem()` function.\n\n\n    deleteAllItems = async () =\u003e {\n      try {\n        await AsyncStorage.removeItem('To Dos');\n        this.setState({ allItems: {} });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n\n\n## Running the app\n\nNow that we have connected all of our components, go to the terminal and run the command `expo-cli start` if the app isn’t already running in the iOS simulator or Android emulator. The `start` command starts or restarts a local server for your app and gives you a URL or QR code. You can press `a` for Android emulator or `i` for iOS simulator. \n\nAfter you have successfully started the application, you can start playing with it by adding to do items in the `WHAT'S NEXT?` section. Items successfully added will appear under the heading `Recent Notes` as shown below.\n\n\n![](https://d2mxuefqeaa7sj.cloudfront.net/s_21CA7D0E2F258DD2425AA73DD44B70100C76B75D0C5466A11D9EB0C2B6E72731_1540560453953_omgg.png)\n\n## Conclusion\n\nI leave the `SubTitle` component for you to customize. It is the same as `Header` but it is being used twice in our application. Refer to `Main.js` file to see where it is used.\n\nThis completes our tutorial for building a React Native Application from scratch using Expo. You can add more functionality such as updating the list item by making use of the created `Date` field we added to our data model. The possibilities to enhance this application are endless. For example, you can add another functionality for updating the text of a list item. You can add an icon next to the delete item and then let the user select which item they want to edit.\n\nYou now have an in-depth understanding of how things work in React Native and why there is much less difference between React Native and Expo. You can find the complete code for this project here: [](https://github.com/amandeepmittal/rn-todos-example)[GitHub](https://github.com/amandeepmittal/rn-todos-example).\n\n","metaTitle":"Build a To Do app with React Native and Expo","metaDescription":"Build a To Do application with React Native and Expo"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"nK4OfznJsGmsqQ4yEyqus","type":"Entry","createdAt":"2018-10-23T11:30:04.277Z","updatedAt":"2018-10-23T11:30:04.277Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live leaderboard with Preact","url":"live-leaderboard-preact","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/realtime-leaderboard","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6nDfV1cd5C6464wgCoOQii","type":"Entry","createdAt":"2018-02-12T15:08:13.901Z","updatedAt":"2018-02-26T12:31:12.764Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Gaming","url":"gaming","type":"use case"}}],"reviewDate":"2018-10-17","description":"Use Preact and Node to build a simple game with a live leaderboard. Users will be able to play a game of chance against the computer, with their scores appearing and updating in realtime.","prerequisite":"You will need Node 6+ installed on your machine. A basic knowledge of JavaScript (ES6 syntax) will be helpful.","content":"In this article, I’ll show you how to build a leaderboard for a simple game that updates in realtime after every round. You can find the entire source code of the application in this [GitHub repository](https://github.com/ayoisaiah/realtime-leaderboard).\n\n\u003e Leaderboards are a feature in many online games which is used to improve competition among players  since it gives them instant feedback on their rankings which tends to increases gamer satisfaction and keeps them playing for longer.\n\n## Prerequisites\n\nTo follow through with the tutorial, a basic knowledge of JavaScript (ES6) and React or Preact is required. You also need to have [Node.js](https://nodejs.org/en/) (v6.x or later) and [npm](https://www.npmjs.com/) installed on your machine. [Installation instructions can be found here](https://docs.npmjs.com/getting-started/installing-node).\n\n## Getting started\n\nTo get started, install [preact-cli](https://github.com/developit/preact-cli) globally with npm as we’ll be using it shortly to bootstrap a new Preact application.\n\n```\n    npm install -g preact-cli\n```\n\nOnce the installation completes, the `preact` command will become available on your machine. Run the following command in the terminal to create a new Preact app.\n\n```\n    preact create simple leaderboard\n```\n\nThis command creates a new folder called `leaderboard` in your working directory and installs all the necessary dependencies needed to build and run the application.\n\nAs soon has the command has finished running, `cd` into the `leaderboard` directory and run `npm run start` to start the development server. The application should be viewable at http://localhost:8080. If port 8080 is not available on  your machine, `preact` will provide another port for you to use.\n\n## Creating our game\n\nThe game we will be making is the classic rock-paper-scissors game which is quite popular in many parts of the world. If you’re not familiar with the rules, you can check this [Wikipedia entry](https://en.wikipedia.org/wiki/Rock%E2%80%93paper%E2%80%93scissors) to get up to speed with how the game works.\n\nIn our implementation of the game, the player will get three points for a win, one for a draw and no points for a defeat. The score, as well as the player’s position on the leaderboard, will be updated in realtime.\n\nThe first step is to create the frontend of the game with Preact. Open up `index.js` in the root of the `leaderboard` directory and change its contents to look like this:\n\n``` javascript\n    // index.js\n    \n    import './style';\n    import { Component } from 'preact';\n    \n    export default class App extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          computerPick: null,\n          result: null,\n          leaderboard: [],\n        }\n    \n        this.handleClick = this.handleClick.bind(this);\n      }\n    \n      handleClick(event) {\n        const { value } = event.target;\n    \n        fetch(`http://localhost:7777/play?userPick=${value}`)\n          .then(response =\u003e response.json())\n          .catch(error =\u003e console.log(error));\n      }\n    \n      render() {\n        const { leaderboard, computerPick, result } = this.state;\n        const sortedLeaderboard = leaderboard.sort((a, b) =\u003e b.score \u003e a.score);\n        const tableBody = sortedLeaderboard.map((player, index) =\u003e (\n          \u003ctr\u003e\n            \u003ctd\u003e{index + 1}\u003c/td\u003e\n            \u003ctd\u003e{player.name}\u003c/td\u003e\n            \u003ctd\u003e{player.score}\u003c/td\u003e\n          \u003c/tr\u003e\n        ));\n    \n        const computerPicked = computerPick ?\n          \u003cspan class=\"computer-message\"\u003eThe computer chose {computerPick}\u003c/span\u003e : null;\n    \n        let message;\n        if (result !== null) {\n          message = result === 1 ?\n            \u003cspan class=\"message-content\"\u003eIt's a draw\u003c/span\u003e :\n            result === 0 ? \u003cspan class=\"message-content fail\"\u003eYou Lost!\u003c/span\u003e :\n            \u003cspan class=\"message-content success\"\u003eYou won!\u003c/span\u003e;\n        } else {\n          message = null;\n        }\n    \n        return (\n          \u003cdiv class=\"App\"\u003e\n            \u003ch1\u003eRock Paper Scissors\u003c/h1\u003e\n    \n            \u003cdiv class=\"button-row\"\u003e\n              \u003cbutton onClick={this.handleClick} value=\"rock\" class=\"rock\"\u003eRock\u003c/button\u003e\n              \u003cbutton onClick={this.handleClick} value=\"paper\" class=\"paper\"\u003ePaper\u003c/button\u003e\n              \u003cbutton onClick={this.handleClick} value=\"scissors\" class=\"scissors\"\u003eScissors\u003c/button\u003e\n            \u003c/div\u003e\n    \n            \u003cdiv class=\"message\"\u003e\n              {message}\n              {computerPicked}\n            \u003c/div\u003e\n    \n            \u003cdiv class=\"leaderboard\"\u003e\n              \u003ctable\u003e\n                \u003cthead\u003e\n                  \u003ctr\u003e\n                    \u003cth\u003eRank\u003c/th\u003e\n                    \u003cth\u003eName\u003c/th\u003e\n                    \u003cth\u003eScore\u003c/th\u003e\n                  \u003c/tr\u003e\n                \u003c/thead\u003e\n                \u003ctbody\u003e\n                  {tableBody}\n                \u003c/tbody\u003e\n              \u003c/table\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n```\n\nThe three buttons allow us to select rock, paper or scissors for a round, while the table below it will contain the top scorers including the current player. We also have a `message` section where the winner of a round will be declared (if any).\n\nNext, change up `style.css` to look like this:\n\n``` css\n    // style.css\n    \n    html,\n    body {\n      font: 14px/1.21 'Helvetica Neue', arial, sans-serif;\n      font-weight: 400;\n    }\n    \n    .App {\n      max-width: 500px;\n      margin: 50px auto;\n      text-align: center;\n    }\n    \n    .button-row,\n    .scoreboard {\n      display: flex;\n      justify-content: space-between;\n      margin-bottom: 20px;\n    }\n    \n    button {\n      transition: box-shadow 0.3s;\n      font-size: 24px;\n      padding: 20px 25px;\n      width: 150px;\n      margin: 0px 10px 0px 10px;\n      background-color: white;\n      border: 4px solid rebeccapurple;\n      border-radius: 3px;\n      box-shadow: 2px 2px 2px 0px rgba(168,168,168,1);\n      cursor: pointer;\n    }\n    \n    button:hover {\n      box-shadow: 4px 4px 6px 0px rgba(168,168,168,1);\n    }\n    \n    button:focus {\n      background-color: #222;\n      color: #fff;\n    }\n    \n    .message span {\n      display: block;\n      text-align: center;\n    }\n    \n    .message-content {\n      font-weight: bold;\n      font-size: 20px;\n      padding: 20px;\n      background-color: #c0c0c0;\n      margin-bottom: 20px;\n    }\n    \n    .success {\n      background-color: #0f0;\n    }\n    \n    .fail {\n      background-color: #f00;\n    }\n    \n    table {\n      width: 100%;\n    }\n    \n    th,\n    td {\n      padding: 12px 15px;\n      text-align: left;\n      border-bottom: 1px solid #E1E1E1; \n    }\n    \n    th:first-child,\n    td:first-child {\n      padding-left: 0; \n    }\n    \n    th:last-child,\n    td:last-child {\n      padding-right: 0;\n    }\n```\n\nAt this moment, the application should look like this:\n\n![preact-leaderboard-demo-1](//images.ctfassets.net/1es3ne0caaid/1OBDt7fVZOCqGOcIMKqoO2/12420e4e07bd4722e1185af128eb6419/preact-leaderboard-demo-1.png)\n\n## Setting up the server\n\nLet’s set up a simple Express server to handle how the score is determined for a round while also broadcasting updates to the frontend.\n\nRun the following command to install the dependencies we’ll be needing:\n\n```\n    npm install express cors dotenv pusher\n```\n\nHead over to the [Pusher website](https://dashboard.pusher.com/accounts/sign_up) and to grab the necessary credentials. Once you have signed up, select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app.\n\nYou can retrieve your credentials from the **API Keys** tab, then create a `variables.env`  file in the root of your project directory and populate it with the following contents:\n\n```\n    // variables.env\n    \n    PORT=7777\n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\nNext, create a new `server.js` file in your project directory and change it to look like this:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    const app = express();\n    \n    app.use(cors());\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    \n    app.set('port', process.env.PORT || 7777);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nWe’re going to pretend that we have a leaderboard already with the scores of previous players. Normally, you’d fetch this data from the server, but in this scenario, we’ll hardcode the values in a JSON file.\n\nCreate a file called `leaderboard.json` in your project directory and update its contents to look like this:\n\n``` json\n    // leaderboard.json\n    \n    {\n      \"players\": [\n        {\n          \"name\": \"Mike Koala\",\n          \"score\": 95\n        },\n        {\n          \"name\": \"Gina Kangaroo\",\n          \"score\": 92\n        },\n        {\n          \"name\": \"Sally Tortoise\",\n          \"score\": 86\n        },\n        {\n          \"name\": \"Kim Lobster\",\n          \"score\": 67\n        },\n        {\n          \"name\": \"Peter Rabbit\",\n          \"score\": 56\n        },\n        {\n          \"name\": \"Frank Leopard\",\n          \"score\": 43\n        },\n        {\n          \"name\": \"Mary Hyena\",\n          \"score\": 34\n        },\n        {\n          \"name\": \"Caroline Bear\",\n          \"score\": 32\n        },\n        {\n          \"name\": \"Tom Eagle\",\n          \"score\": 24\n        },\n        {\n          \"name\": \"Jim Unicorn\",\n          \"score\": 11\n        },\n        {\n          \"name\": \"Player 1\",\n          \"score\": 0\n        }\n      ]\n    }\n```\n\n## Display the leaderboard on page load\n\nWhen our application loads, we need to update the table with the existing leaderboard values as shown in the `leaderboard.json` file.\n\nWithin `index.js`, add the following lifecycle hook that loads the leaderboard when the `App` component mounts successfully:\n\n``` javascript\n    // index.js\n    \n    componentDidMount() {\n      fetch('http://localhost:7777/leaderboard')\n        .then(response =\u003e response.json())\n        .then(data =\u003e {\n          this.setState({\n            leaderboard: [...data.players],\n          });\n        })\n        .catch(error =\u003e console.log(error));\n    }\n```\n\nNext, let’s add the `/leaderboard` route to the server. Hitting this route will simply send the `leaderboard.json` file to the client. First add the following under the other `require` statements at the top:\n\n``` javascript\n    // server.js\n    \n    const leaderboard = require('./leaderboard.json');\n```\n\nThen add the `/leaderboard`  route as shown below:\n\n``` javascript\n    // server.js\n    \n    ...\n    app.use(bodyParser.urlencoded({ extended: true }));\n    \n    app.get('/leaderboard', (req, res) =\u003e {\n      res.json(leaderboard);\n    });\n    ...\n```\n\n## Game logic\n\nIn the `index.js` file, we have a `handleClick` function that is invoked when each button is clicked. This function sends whatever value is clicked to the server through the `/play` endpoint. But this endpoint does not exist on the server yet so we’ll go ahead and create it in the next step.\n\nBefore we continue, we need to create a new function that will help us determine the winner of each round or whether it is a draw. Let’s call this function `compare`, and create a new `compare.js` file to house the function as shown below:\n\n``` javascript\n    // compare.js\n    \n    const compare = (choice1, choice2) =\u003e {\n      if (choice1 === choice2) {\n        return 1;\n      }\n      if (choice1 === \"rock\") {\n        if (choice2 === \"scissors\") {\n          return 3;\n        } else {\n          // paper wins\n          return 0;\n        }\n      }\n      if (choice1 === \"paper\") {\n        if (choice2 === \"rock\") {\n          return 3;\n        } else {\n          return 0;\n        }\n      }\n      if (choice1 === \"scissors\") {\n        if (choice2 === \"rock\") {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    };\n    \n    module.exports = compare;\n```\n\nThe `compare` function checks what the user plays (`choice1`) and compares it with what the computer picks (`choice2`) to determine a winner. As explained previously, the user gets three points for a win, one for a draw and zero points for a defeat.\n\nLet’s go ahead and make use of the `compare` in the new `/play` route. We need to import it first below the other `require` statements:\n\n``` javascript\n    // server.js\n    \n    const compare = require('./compare');\n```\n\nThen create the `/play` route below `/leaderboard` as shown below:\n\n``` javascript\n    app.get('/play', (req, res) =\u003e {\n      const { userPick } = req.query;\n      const arr = ['rock', 'paper', 'scissors'];\n      const computerPick = arr[Math.floor(Math.random() * 3)];\n    \n      const points = compare(userPick, computerPick);\n    });\n```\n\nThe computer picks a random value from the `arr` variable anytime this route is hit. This value is then compared with whatever the user selected and the resulting points value for the user is stored in the `points` variable.\n\nWhen the user scores a point, we need to update the leaderboard in realtime so that the player can see his progress in the rankings while playing the game. We’ll be making use of Pusher Channels to achieve this functionality.\n\nLet’s install the Pusher client library through npm. This is how we’ll use Channels in our Preact app.\n\n```\n    npm install pusher-js\n```\n\nThen import it at the top of `index.js`:\n\n``` javascript\n    // index.js\n    \n    import Pusher from 'pusher-js';\n```\n\nNext, we’ll open a connection to Channels within `componentDidMount()` and use the  `subscribe()` method from Pusher to subscribe to a new channel called `leaderboard`. Finally, we’ll listen for the `update` on the `bot` channel using the `bind` method and update the application state once we receive a message.\n\nDon’t forget to replace the `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e` placeholder with the appropriate values from your Pusher account dashboard.\n\n``` javascript\n    // index.js\n    \n    componentDidMount() {\n      const pusher = new Pusher('\u003cyour app key\u003e', {\n        cluster: '\u003cyour app cluster\u003e',\n        encrypted: true,\n      });\n    \n      const channel = pusher.subscribe('leaderboard');\n      channel.bind('update', data =\u003e {\n        const { leaderboard } = this.state;\n        const userIndex = leaderboard.findIndex(e =\u003e e.name === 'Player 1');\n        leaderboard[userIndex].score += data.points;\n    \n        this.setState({\n          computerPick: data.computerPick,\n          result: data.points,\n          leaderboard,\n        });\n      });\n    \n      fetch('http://localhost:7777/leaderboard')\n        .then(response =\u003e response.json())\n        .then(data =\u003e {\n          this.setState({\n            leaderboard: [...data.players],\n          });\n        })\n        .catch(error =\u003e console.log(error));\n    }\n```\n\nFinally, we’ll trigger updates from the server when the user’s points for a round have been determined.\n\nChange the `/play` route within `server.js` to look like this:\n\n``` javascript\n    // server.js\n    \n    app.get('/play', (req, res) =\u003e {\n      const { userPick } = req.query;\n      const arr = ['rock', 'paper', 'scissors'];\n      const computerPick = arr[Math.floor(Math.random() * 3)];\n    \n      const points = compare(userPick, computerPick);\n    \n      pusher.trigger('leaderboard', 'update', {\n        points,\n        computerPick,\n      });\n    });\n```\n\nYou can start the server by running `node server.js` in a different terminal window, and test out the game by playing a few rounds. You should see the leaderboard update as you score some points!\n\n![preact-leaderboard-demo-2](//images.ctfassets.net/1es3ne0caaid/7vMU7LHnFKyA2kWG6Scw40/cf1061a5e4e77f85a72791a42d3fb5c9/preact-leaderboard-demo-2.gif)\n\n## Conclusion\n\nI’m sure you’ll agree that setting up Pusher Channels for realtime updates to the game leaderboard was easy enough. There’s so much more you can do with Channels so I recommend digging into the [docs](https://pusher.com/docs) to find more about the service and other awesome features it has.\n\nThanks for reading! Remember that you can find the source code of this app in this [GitHub repository](https://github.com/ayoisaiah/realtime-leaderboard).","metaTitle":"Build a live leaderboard with Preact","metaDescription":"Create a rock-paper-scissors game with a realtime leaderboard. Use Node and Preact to build the game and scoreboard. Users will be able to see their scores update live."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"iJqCQmG5gW0i22iG6Eiyg","type":"Entry","createdAt":"2018-10-16T18:16:23.260Z","updatedAt":"2018-10-16T18:16:23.260Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to build a RESTful API in Slim 3 - Part 2: Creating application endpoints","url":"rest-api-slim-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1N3HBqLEugWyeKsWEW0iYg","type":"Entry","createdAt":"2018-08-06T18:12:32.345Z","updatedAt":"2018-08-06T18:12:32.345Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Fisayo Afolayan","url":"fisayo-afolayan","email":"afolayanfisayo@gmail.com","twitter":"https://twitter.com/fisayoafolayan","github":"https://github.com/fisayoafolayan","guestWriter":true}}],"projectRepo":"https://github.com/fisayoafolayan/build-a-restful-api-in-slim3","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}}],"reviewDate":"2018-10-16","description":"This two part series will introduce you to the Slim 3 framework for PHP development. You will create a simple REST API, learning how to set up a project, add and configure dependencies, and write and test API endpoints. In part two, create the API endpoints and test them with Postman.","prerequisite":"You will need Composer, git and PHP 7+ set up on your local machine. Basic knowledge of PHP will be helpful.","content":"In the [previous tutorial](https://pusher.com/tutorials/rest-api-slim-part-1),  we had a brief introduction to slim3 and we set up our application to use Laravel’s Eloquent to communicate with our database. We also created our database schema and setup Phinx to help with our migration files. Finally, we included a validation package that ensures our users submit the right data to our API.\n\nIn this tutorial, we will proceed to build our controller and models. We will also create endpoints and test the output data using Postman.\n\n\n## Prerequisites\n1. You have read the [first part](https://pusher.com/tutorials/rest-api-slim-part-1) of this guide\n2. Have [Postman](https://www.getpostman.com/) installed on your local machine\n\n\n## Make an endpoint that creates offers and vouchers\n\nBefore we proceed we need to create our controller and models. We will use one controller to handle all our endpoints, while our models handle all interactions with the database. Open your terminal and run these commands to create the following files:\n\n```\n    $ touch app/Controllers/VoucherController.php\n    $ mkdir app/Models\n    $ touch app/Models/User.php\n    $ touch app/Models/Offer.php\n    $ touch app/Models/Voucher.php\n    $ mkdir app/Helpers\n    $ touch app/Helpers/Validator.php\n```\n\nTo create our first endpoint, we will need to accept multiple email addresses from the user. These email addresses need to be validated. Open the `app/Helpers/Validator.php` file and edit as follows:\n\n``` php\n    // app/Helpers/Validator.php\n    \n    \u003c?php \n    \n    namespace App\\Helpers;\n    \n    use Respect\\Validation\\Validator as Respect;\n    \n    class Validator extends Respect {\n        public static function validateEmails($email_list) \n        {\n            if(!is_array($email_list)) return false;\n            foreach ($email_list as $email) {\n                if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    \n    }\n```\n\nIn the above code, we used the `Respect` validator and filtered through all emails being sent to our API. If the email field is empty, we want to validation error to the user.\n\nNext, open the `app/Controllers/VoucherController.php` file and edit as follows:\n\n``` php\n    // app/Controllers/VoucherController.php\n    \n    \u003c?php\n    \n    namespace App\\Controllers;\n    \n    use App\\Models\\Offer;\n    use App\\Models\\User;\n    use App\\Models\\Voucher;\n    use App\\Helpers\\Validator;\n    \n    use Psr\\Http\\Message\\{\n        ServerRequestInterface as Request,\n        ResponseInterface as Response\n    };\n    \n    class VoucherController extends Controller\n    {\n    \n    }\n```\n\nAwesome! Now that we have our controller and models set up properly, we need to tackle our first task.\n\n\n\u003e  Task:  For a given Special Offer and an expiration date, we need to generate for each Recipient a Voucher Code \n\nTo solve this, open your routes file and replace with the content below. Your routes file is located here `routes/web.php`\n\n``` php\n    // routes/web.php\n    \u003c?php\n    \n    use App\\Controllers\\VoucherController;\n    \n    $app-\u003epost('/api/offers/create', VoucherController::class . ':createOffers');\n```\n\nThe endpoint we just created points to a `createOffers` method in our VoucherController file. Let us create the method in our `VoucherController` file. Open the file and edit as follows:\n\n``` php\n    // app/Controllers/VoucherController.php\n    \n    [...]\n    public function createOffers(Request $request, Response $response, $args)\n        {\n            // checks to ensure we have valid inputs\n            $validator = $this-\u003ec-\u003evalidator-\u003evalidate($request, [\n                'email_list' =\u003e Validator::arrayType(),\n                'expires_at' =\u003e Validator::date()-\u003enotBlank(),\n                'name' =\u003e Validator::alnum(\"'-_\")-\u003enotBlank(),\n                'discount' =\u003e Validator::intVal()-\u003enoWhitespace()-\u003enotBlank(),\n            ]);\n    \n            if ($validator-\u003eisValid()) {\n                $offer_model = new Offer();\n                $voucher_model = new Voucher();\n                $user_model = new User();\n                // Create new offer\n                $created_offer = $offer_model-\u003ecreate($request);\n                \n                if ($created_offer) {\n                    // get id of users from the email, if email does not exist, create the user and return users_id\n                    $get_user_user_ids  =   $user_model-\u003efindMultipleEmail($request-\u003egetParam('email_list'));\n                    $voucher_codes      =   $voucher_model-\u003ecreate($created_offer-\u003eid, $get_user_user_ids );\n                }    \n    \n                return $response-\u003ewithStatus(201)-\u003ewithJson([\n                    'status' =\u003e 'Success',\n                    'offer_details'     =\u003e $created_offer,\n                    'voucher_details'   =\u003e $voucher_codes,\n                    'message' =\u003e $created_offer ? 'Offer Created' : 'Error Creating Offer'\n                ]);\n            } else {\n                // return an error on failed validation, with a statusCode of 400\n                return $response-\u003ewithStatus(400)-\u003ewithJson([\n                    'status' =\u003e 'Validation Error',\n                    'message' =\u003e $validator-\u003egetErrors()\n                ]);\n            }\n        }\n    [...]\n```\n\nYou will notice we connected to three other models, `offer`, `voucher` and `user.` The `offer` model redirects to a `create` method that receives our `$request` object. Remember, our `$request` object contains the input submitted on our `/offers/create` endpoint. Now, let us create the `create` method in our `offer` model. Open the `app/models/offer` and edit as follows:\n\n``` php\n    // app/models/Offer.php\n    \u003c?php\n    \n    namespace App\\Models;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    use Illuminate\\Database\\Eloquent\\SoftDeletes;\n    \n    class Offer extends Model\n    {\n        use SoftDeletes;\n    \n        protected $fillable = [\n            'name', 'discount', 'expires_at'\n        ];\n    \n        public function create($request)\n        {\n            \n            $created_offer = self::firstOrCreate([\n                'name'          =\u003e $request-\u003egetParam('name'),\n                'discount'      =\u003e $request-\u003egetParam('discount'),\n                'expires_at'    =\u003e $request-\u003egetParam('expires_at')\n            ]);\n            \n            return $created_offer;\n        }\n    \n    }\n```\n\nNow that we have created our `offer`, we need to create voucher codes for all recipients. Remember, our recipient information is part of the input fields to be submitted to the `/offers/create` endpoint. Before vouchers can be issued to our users, we need to create the users. You will notice a method in our `create` method from our `VoucherController` that redirects to the `findMultipleEmail()` method on our `user` model. \n\nNext, open the `/app/models/user` model and insert the following content to create the `findMultipleEmail()` method :\n\n``` php\n    // app/models/User.php\n    \u003c?php\n    \n    namespace App\\Models;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    use Illuminate\\Database\\Eloquent\\SoftDeletes;\n    \n    class User extends Model\n    {\n        use SoftDeletes;\n    \n        protected $fillable = [\n            'name', 'email'\n        ];\n        \n        public static function findMultipleEmail($email_list)\n        {\n            // gets id of existing user, if user does not exist, create new user and return users id\n            $users_id = [];\n            foreach ($email_list as $email) {\n                $user_details = static::firstOrCreate(['email' =\u003e$email]);\n                array_push($users_id, $user_details-\u003eid);\n            }\n            \n            return $users_id;\n        }\n        \n    }\n```\n\nWe are using a `firstOrCreate()` Eloquent method because we might receive a request to create vouchers for users that already exist in our database and that of users that do not exist. With `firstOrCreate(['email' =\u003e$email_list])`, it checks if the user exists. If they do, it returns the user's details, if it does not, it creates a new user.\n\nThe last piece to this puzzle is, creating the vouchers and assigning them to the users created. From our `create` method in the `VoucherController`, you will notice we have a `create()` method that links to our voucher model and it accepts two arguments, the `offer_id` and `users_id`. \n\nNow, open the `/app/models/voucher` model and insert the following content to create the `create()` method :\n\n``` php\n    // app/models/Voucher.php\n    \u003c?php\n    namespace App\\Models;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    use Illuminate\\Database\\Eloquent\\SoftDeletes;\n    \n    class Voucher extends Model\n    {\n        use SoftDeletes;\n    \n        protected $fillable = [\n            'code',\n        ];\n    \n        public function create($offer_id, $users_id)\n        {\n            // Generate 8 random hex code for voucher\n            \n            foreach ($users_id as $key =\u003e $user_id) {\n                $vouchers['voucher'][$key]['code']        =   substr(md5(rand()), 0, 8);\n                $vouchers['voucher'][$key]['offer_id']    =   $offer_id;\n                $vouchers['voucher'][$key]['user_id']     =   $user_id;\n            }\n            // insert into the database\n            self::insert($vouchers['voucher']);\n    \n            return $vouchers;\n        }\n     }\n```\n\nWith this, we are done creating our first endpoint 💃🏼. \n\nRun this command on your terminal to serve our app\n\n```\n    $ php -S localhost:9000 -t public\n```\n\nUsing [Postman](https://www.getpostman.com/), make a POST request to this endpoint `http://localhost:9000/api/offers/create` endpoint. Navigate to the Body section on the tab and pass the following as parameters:\n\n```\n    name:Childrens day Special\n    discount:25\n    expires_at:2018-8-25 23:50:49\n    email_list[0]:hello@gmail.com\n    email_list[1]:hey@gmail.com\n    email_list[2]:holla@gmail.com\n```\n\nYour output should look like this:\n\n![slim3-postman-create-offer](//images.ctfassets.net/1es3ne0caaid/2tLpJZbhXyc8ECEIIaEAW0/0fdb50eba641961340dec1a72dbcde52/slim3-postman-create-offer.png)\n\n## Make an endpoint that validates a voucher code and email\n\n\n\u003e Task: We need to provide an endpoint, which will receive a voucher code and email and validates the voucher code. In case it is valid, return the percentage discount and set the date of usage \n\nTo solve this, we will create a new method in our VoucherController called `validateVoucher()`. This method will receive as input from the user, `voucher_code` and `email`. Once we receive these details, we will check our database to ensure that the email address exists. If the email address exists, we will proceed to check if the voucher code belongs to the user. \n\nIf that passes validation, then we will get the percentage discount on the offer, mark the voucher as used and store the date of usage. If our validation fails, we will send an error message as output to the user.\n\nFirst, we need to update our routes. Open your routes file and edit as follows. Your routes file is located here `routes/web.php`\n\n``` php\n    // routes/web.php\n    [..]\n    $app-\u003epost('/offers/create', VoucherController::class . ':createOffers');\n    $app-\u003epost('/api/voucher/validate', VoucherController::class . ':validateVoucher');\n```\n\nOpen the VoucherController and edit as follows:\n\n``` php\n    // app/Controllers/VoucherController.php\n    [...]\n     } else {\n                    //return an error on failed validation, with a statusCode of 400\n                    return $response-\u003ewithStatus(400)-\u003ewithJson([\n                        'status' =\u003e 'Error',\n                        'message' =\u003e $validator-\u003egetErrors()\n                    ]);\n              }\n      }\n            \n     public function validateVoucher(Request $request, Response $response, $args)\n        {\n            $validator = $this-\u003ec-\u003evalidator-\u003evalidate($request, [\n                'voucher' =\u003e Validator::alnum()-\u003enotBlank(),\n                'email' =\u003e Validator::email()-\u003enoWhitespace()-\u003enotBlank(),\n            ]);\n    \n            if ($validator-\u003eisValid()) {\n    \n                $voucher    = $request-\u003egetParam('voucher');\n                $email      = $request-\u003egetParam('email');\n    \n                $voucher_model    =   new Voucher();\n                $user_model       =   new User();\n    \n                // check if user exist\n                $user_details     =   $user_model-\u003efindEmail($email);\n    \n                if ($user_details) {\n                    // Assertain that the voucher code belongs to the user and has not expired/not yet used\n                    $validate_voucher =   $voucher_model-\u003evalidateVoucher($voucher, $user_details-\u003eid);\n                    \n                    if (!$validate_voucher-\u003eisEmpty()) {\n                        // activate and set date voucher was used\n                        $activate_voucher   =   $voucher_model-\u003eactivateVoucher($voucher, $user_details-\u003eid);\n                        // return voucher details\n                        return $response-\u003ewithStatus(200)-\u003ewithJson([\n                            'status'    =\u003e (bool) $validate_voucher,\n                            'count'     =\u003e count($validate_voucher),\n                            'data'      =\u003e $validate_voucher,\n                            'message'   =\u003e count($validate_voucher) \u003e= 1 ? 'Success': 'No Voucher found'\n                        ]);\n                    } else {\n                        // return failure message if voucher does not exist\n                         return $response-\u003ewithStatus(403)-\u003ewithJson([\n                        'status' =\u003e 'Error',\n                        'message' =\u003e 'Voucher details is invalid'\n                        ]);\n                    }\n                } else {\n                    // return failure message if user does not exist\n                     return $response-\u003ewithStatus(400)-\u003ewithJson([\n                        'status' =\u003e 'Error',\n                        'message' =\u003e 'User does not exist'\n                        ]);\n                }\n            } else {\n                // return failure message if validation fails\n                return $response-\u003ewithStatus(400)-\u003ewithJson([\n                    'status' =\u003e 'Validation Error',\n                    'message' =\u003e $validator-\u003egetErrors()\n                ]);\n            }\n        }\n       [...]\n```\n        \n\nWe used a `findEmail()` which receives `$email` as an argument and connects to the user model. The method goes to the database to check if the user exists. If the user exist, it will return the user’s details back to the controller. \n\nOpen the `user` model and edit as follows:\n\n``` php\n    // app/Models/User.php\n    [...] \n                return $users_id;\n            }\n        \n        public static function findEmail($email)\n        {\n            return static::where('email', $email)-\u003efirst();\n        }\n    }\n```\n\nWe also have a method called `validateVoucher()` that receives two parameters, `voucher_code` and `user_id`. The goes into the voucher model and checks that the voucher exist, and it also checks to ensure that the voucher belongs to the user requesting for it. \n\nFinally, we called `activateVoucher()` method which activates the voucher, sets the status as used and stores the date in which it was used. \n\nOpen the `voucher` model and edit as follows:\n\n``` php\n    // app/Models/Voucher.php\n    [...]\n    \n                return $vouchers;\n            }\n        \n    \n     // Assertain that the voucher code belongs to the user and has not expired/not yet used\n        public function validateVoucher($voucher, $user_id)\n        {    \n            $voucher_details = self::leftjoin('users', 'vouchers.user_id', '=', 'users.id')\n                                    -\u003eleftjoin('offers', 'vouchers.offer_id', '=', 'offers.id')\n                                    -\u003eselect('vouchers.code', 'users.id as user_id', 'users.email', 'offers.expires_at','offers.name as offer_name','offers.discount as percentage_discount')\n                                    -\u003ewhere([\n                                                ['vouchers.code', $voucher],\n                                                ['vouchers.user_id', $user_id],\n                                                ['vouchers.is_used', 0],\n                                                ['offers.expires_at', '\u003e', \\Carbon\\Carbon::now()],\n                                            ])\n                                    -\u003eget();\n                                    \n            return ($voucher_details == null ? [] : $voucher_details);\n        }\n    \n        // activate voucher code, set is_used and date_used fields\n        public function activateVoucher($voucher, $user_id)\n        {  \n            $activate_voucher = self::where([\n                                                ['code', $voucher],\n                                                ['user_id', $user_id],\n                                            ])\n                                    -\u003eupdate(array('is_used' =\u003e 1, 'date_used' =\u003e \\Carbon\\Carbon::now() ));\n    \n            return $activate_voucher;\n     \n        }\n    [...]\n```\n\nWith this, we are done creating our second endpoint 💃🏼. \n\nUsing [Postman](https://www.getpostman.com/), make a POST request to  `http://localhost:9000/api/voucher/validate` endpoint. \n\nNavigate to the Body section on the tab and pass the following as parameters:\n\n```\n    voucher:INSERT-VOUCHER-CODE-HERE\n    email:hello@gmail.com\n```\n\nYour output should look like this:\n\n![slim3-postman-validate-voucher](//images.ctfassets.net/1es3ne0caaid/7bbwjoGIrScQgQMc8oC4Cu/d2d54a10ead2c46d579f340eec4628b1/slim3-postman-validate-voucher.png)\n\n## Make an endpoint that fetches all valid voucher codes for a user\n\n\n\u003e For any given email , return all valid voucher codes with the names of the user and the name of the special offer \n\n\nTo achieve this, we will create a new method in our VoucherController called `fetchAllValidVoucherPerUser()`. This method will receive as `email` as input from the user. Once we have the users email, we will check our database to ensure that the email address exists. If the email address exists, we will proceed to retrieve all the valid voucher codes of the user. \n\nKeep in mind that what qualifies as valid voucher codes are:\n\n1. Voucher code is yet to be used.\n2. The offer has not expired\n\nFirst, we need to update our routes. Open your routes file and edit as follows. Your routes file is located here `routes/web.php`\n\n``` php\n    // routes/web.php\n    [..]\n    \n    $app-\u003epost('/api/offers/create', VoucherController::class . ':createOffers');\n    $app-\u003epost('/api/voucher/validate', VoucherController::class . ':validateVoucher');\n    $app-\u003eget('/api/voucher/list', VoucherController::class . ':fetchAllValidVoucherPerUser');\n```\n\nOpen the VoucherController and edit as follows:\n\n``` php\n    // app/Controllers/VoucherController.php\n    \n    [...]\n    } else {\n                return $response-\u003ewithStatus(400)-\u003ewithJson([\n                    'status' =\u003e 'Validation Error!',\n                    'message' =\u003e $validator-\u003egetErrors()\n                ]);\n            }\n    }\n    public function fetchAllValidVoucherPerUser(Request $request, Response $response, $args)\n        {\n            $validator = $this-\u003ec-\u003evalidator-\u003evalidate($request, [\n                'email' =\u003e Validator::email()-\u003enoWhitespace()-\u003enotBlank(),\n            ]);\n    \n            if ($validator-\u003eisValid()) {\n    \n                $email = $request-\u003egetQueryParam('email');\n    \n                $voucher_model    =   new Voucher();\n                $user_model       =   new User();\n    \n                //check if user exist\n                $user_details     =   $user_model-\u003efindEmail($email);\n    \n                if ($user_details) {\n    \n                    //Fetch all valid user voucher codes\n                    $users_voucher =   $voucher_model-\u003efetchSingleUserVoucher($user_details-\u003eid);\n    \n                    //return voucher details\n                        return $response-\u003ewithStatus(200)-\u003ewithJson([\n                            'status' =\u003e (bool) $users_voucher,\n                            'count'     =\u003e count($users_voucher),\n                            'data'     =\u003e $users_voucher\n                        ]);\n    \n                } else {\n                    //return failure message if user does not exist\n                    return $response-\u003ewithStatus(400)-\u003ewithJson([\n                        'status' =\u003e 'Error',\n                        'message' =\u003e 'User does not exist'\n                        ]);\n                }\n            } else {\n                return $response-\u003ewithStatus(400)-\u003ewithJson([\n                    'status' =\u003e 'Validation Error',\n                    'message' =\u003e $validator-\u003egetErrors()\n                ]);\n            }\n        }\n    \n    [...]\n```\n\nOnce we have the user’s email address as input, we check to ensure that the user exist using the `findEmail()` method. If the user does not exists, we will return an error back to the user. If the user exists, using the `fetchSingleUserVoucher()` that connects tot he voucher model, we will fetch all the valid user voucher codes.\n\nTo include the `fetchSingleUserVoucher()` method, open the Voucher model and edit as follows:\n\n``` php\n    // app/Models/Voucher.php\n    \n    [...]\n            return $activate_voucher;\n     \n        }\n    \n    // method to fetch a single user's voucher details\n        public function fetchSingleUserVoucher($user_id)\n        {    \n            $voucher_details = self::leftjoin('users', 'vouchers.user_id', '=', 'users.id')\n                                    -\u003eleftjoin('offers', 'vouchers.offer_id', '=', 'offers.id')\n                                    -\u003eselect('vouchers.code','users.id as user_id', 'users.email', 'offers.expires_at','offers.name as offer_name','offers.discount as percentage_discount')\n                                    \n                                    -\u003ewhere([\n                                                ['vouchers.user_id', $user_id],\n                                                ['vouchers.is_used', 0],\n                                                ['offers.expires_at', '\u003e',  \\Carbon\\Carbon::now()],\n                                            ])\n                                    -\u003eget();\n       \n            return ($voucher_details == null ? [] : $voucher_details);\n     \n        }\n    [...]\n```\n\nAnd that is it, we have created all the endpoints needed for our voucher pool API.\n\nUsing [Postman](https://www.getpostman.com/), make a GET request to this endpoint `http://localhost:9000/api/voucher/list?email=hey@gmail.com` endpoint. \n\nYour output should look like this:\n\n![slim3-postman-list-vouchers](//images.ctfassets.net/1es3ne0caaid/4Hqcec4yjSO8qkEAMCcmQq/61e8bc61888e9e0b8853518c7a8487fa/slim3-postman-list-vouchers.png)\n\n## Conclusion\n\nIn this tutorial, we have looked at how to build a voucher pool API using the Slim 3 PHP framework. We set up a controller for voucher manipulation and creation. We also defined methods to fetch and create valid voucher codes. We saw how to test our output data using Postman.\n\nThe source code to the application in this article is available on [GitHub](https://github.com/fisayoafolayan/build-a-restful-api-in-slim3).","metaTitle":"How to build a RESTful API in Slim 3 - Part 2","metaDescription":"In this two part series, learn how to use the Slim framework to create a simple PHP REST API. In part two, create the API endpoints and test them with Postman."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"10RbA4Zgzwy68yUaoW8wgs","type":"Entry","createdAt":"2018-10-12T18:43:25.459Z","updatedAt":"2018-10-12T18:43:51.788Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to build a RESTful API in Slim 3 - Part 1: Application Setup","url":"rest-api-slim-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1N3HBqLEugWyeKsWEW0iYg","type":"Entry","createdAt":"2018-08-06T18:12:32.345Z","updatedAt":"2018-08-06T18:12:32.345Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Fisayo Afolayan","url":"fisayo-afolayan","email":"afolayanfisayo@gmail.com","twitter":"https://twitter.com/fisayoafolayan","github":"https://github.com/fisayoafolayan","guestWriter":true}}],"projectRepo":"https://github.com/fisayoafolayan/build-a-restful-api-in-slim3","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}}],"reviewDate":"2018-10-12","description":"This two part series will introduce you to the Slim 3 framework for PHP development. You will create a simple REST API, learning how to set up a project, add and configure dependencies, and write and test API endpoints. In part one, set up the project and the database.","prerequisite":"You will need Composer, git and PHP 7+ set up on your local machine. Basic knowledge of PHP will be helpful.","content":"[Slim framework](https://www.slimframework.com/) took off in 2013 when [Josh Lockhart](https://joshlockhart.com/) released the first version of the framework. The idea was to create a PHP micro framework that helps PHP developers quickly and easily write web applications and APIs. Over time, Slim has risen to risen to the point of competing with other PHP frameworks, like [Laravel](https://laravel.com/), [Symphony](https://symfony.com/), [Codeigniter](https://www.codeigniter.com/) amongst others.\n\nIn this tutorial, you will learn how to build a voucher pool microservice application using Slim 3 framework. We will build a voucher pool which will be a collection of voucher codes that customers can use on a website in order to get discounts. When a customer uses a voucher code once, we want to know who used the code and when it was used. Part one of this article will focus on our application setup and how to create our database migrations.\n\nWhat we want to achieve:\n\n-  For a given special offer and an expiration date, we will to generate for each recipient a unique voucher code. \n-  We need to provide an endpoint, which will receive a voucher code and email and validates the voucher code. In vase it is valid, return the percentage discount and set the date of usage. \n-  For any given email, we need to return all valid voucher codes with the names of the user and the name of the special offer.\n\n## Prerequisites\n\n- Basic knowledge of PHP\n- Have [Composer](http://getcomposer.org/) installed on your local machine\n- Have PHP setup on your local machine (version \u003e= 7.1.3)\n- Git installed on your local machine\n\n## Setting up the application\n\nTo set up Slim 3, we will use a Laravel-like boilerplate. If you use Laravel a lot, you will like this boilerplate. Run this command in your project directory. \n\n```\n    $ composer create-project codecourse/slender voucherPool\n```\n\nYou will notice you have a new project in your project directory. Next, navigate into the directory and install third-party packages needed for our application to work. Since we have a Laravel-like  structure, we can as well integrate Laravel's eloquent [ORM](https://laravel.com/docs/5.6/eloquent) and enjoy the goodness of manipulating our database using object-oriented paradigm. \n\nRun this command in your terminal to include illuminate database component in our codebase:\n\n```\n    $ composer require illuminate/database\n```\n\nOnce this is done, our application needs to know how to handle [Eloquent](https://laravel.com/docs/5.6/eloquent) queries. To achieve this, create a database file inside the bootstrap directory.\n\n```\n    $ touch bootstrap/database.php\n```\n\nOpen the database file and replace the content with this:\n\n``` php\n    //  bootsrap/database.php\n    \u003c?php\n    \n    use Illuminate\\Database\\Capsule\\Manager as Capsule;\n    \n    $config  = $container['settings']['database'];\n    $capsule = new Capsule;\n    $capsule-\u003eaddConnection(array_merge($config,[\n        'charset'   =\u003e  'utf8',\n        'collation' =\u003e  'utf8_unicode_ci'\n    ]));\n    \n    $capsule-\u003ebootEloquent();\n    $capsule-\u003esetAsGlobal();\n```\n\nNext, we need to include this file in our application boot process. Open the `bootstrap/app.php` file and edit as follows:\n\n``` php\n    [...]\n    require_once __DIR__ . '/database.php';\n    require_once __DIR__ . '/../routes/web.php';\n    [...]\n```\n\nFor this guide, we will use an SQLite database. Open the `.env` file and include the following database settings:\n\n```\n    DB_DRIVER=sqlite\n    DB_DATABASE=_insert_absolute_path_to_sqlite_file\n```\n\n\u003e Remember to insert the absolute path to our SQLite file here:  `./db/database.db`\n\n\nOnce that is done, we also want to load our database credentials in our boot process. Open the `bootstrap/app` file one more time and replace the content of the `$app` variable with this:\n\n``` php\n    // /bootstrap/app.php\n    [...]\n    $app = new Slim\\App([\n        'settings' =\u003e [\n            'displayErrorDetails' =\u003e getenv('APP_DEBUG') === 'true',\n    \n            'app' =\u003e [\n                'name' =\u003e getenv('APP_NAME')\n            ],\n    \n            'views' =\u003e [\n                'cache' =\u003e getenv('VIEW_CACHE_DISABLED') === 'true' ? false : __DIR__ . '/../storage/views'\n            ],\n    \n            'database' =\u003e [\n                'driver'    =\u003e getenv('DB_DRIVER'),\n                'database'  =\u003e getenv('DB_DATABASE'),\n            ]\n        ],\n    ]);\n    [...]\n```\n         \nNext, we will use [Phinx](https://phinx.org/) to manage our database migrations. Run this command to install Phinx in our codebase:\n\n```\n    $ composer require robmorgan/phinx\n```\n\nAwesome!\n\nNow that we have Phinx installed, we need to create the folder where Phinx will run our migration files from and finally create a `database.db`  for our SQLite. Create this folder in your project directory\n\n```\n    $ mkdir -p db/migrations\n    $ touch db/database.db \n```\n\nThis command will create a migration folder inside of a db folder.\n\nWith Phinx installed, we also need to initialize it in our codebase. Run this command to initialize Phinx:\n\n```\n    $ vendor/bin/phinx init\n```\n \n You will notice a new file in your codebase, `phinx.yml`. The file stores your database credentials and points phinx to the location of your migrations and seeder files\n \nNext, in other for Phinx to communicate with our database, open the `phinx.yml` file and edit as follows\n\n``` yaml\n        development:\n            adapter: sqlite\n            name: ./db/database\n            suffix: \".db\"    # Defaults to \".sqlite3\"\n```\n \n\n## Creating migration files\n\nBefore creating our migration files, we need to understand our database schema. We will have three tables, `users`, `offers`, `vouchers`. (See image below)\n\n![slim3-schema-diagram](//images.ctfassets.net/1es3ne0caaid/60BtBgQKqW8OiekI8wSakQ/1a5e1c51204e834232f3a73143df21f9/slim3-schema-diagram.png)\n\nTo create our migration files, run the following commands on your terminal\n\n```\n    $ vendor/bin/phinx create CreateUsersTable\n    $ vendor/bin/phinx create CreateOffersTable\n    $ vendor/bin/phinx create CreateVouchersTable\n```\n\nThis command will create our users migration file inside the `db/migrations/` directory.\n\n Next, open the users migration file and replace the content with this:\n \n``` php\n    // /db/migrations/timestamp_create_users_table.php\n    \u003c?php\n    use Phinx\\Migration\\AbstractMigration;\n    \n    class CreateUsersTable extends AbstractMigration\n    {\n        /**\n         * Migrate Up.\n         */\n        public function up()\n        {\n            $users = $this-\u003etable('users');\n            $users-\u003eaddColumn('name', 'string', ['null' =\u003e true])\n                  -\u003eaddColumn('email', 'string')\n                  -\u003eaddColumn('created_at', 'datetime', ['default' =\u003e 'CURRENT_TIMESTAMP'])\n                  -\u003eaddColumn('updated_at', 'datetime', ['default' =\u003e 'CURRENT_TIMESTAMP'])\n                  -\u003eaddColumn('deleted_at', 'datetime', ['null' =\u003e true])\n                  -\u003esave();\n        }\n        /**\n         * Migrate Down.\n         */\n        public function down()\n        {\n            $this-\u003edropTable('users');\n        }\n    }\n```\n\n \n With that done, open the offers migration file and replace the content with this:\n \n``` php\n    // /db/migrations/timestamp_create_offers_table.php\n    \n    \u003c?php\n    use Phinx\\Migration\\AbstractMigration;\n    \n    class CreateOffersTable extends AbstractMigration\n    {\n         /**\n         * Migrate Up.\n         */\n        public function up()\n        {\n            $offers = $this-\u003etable('offers');\n            $offers-\u003eaddColumn('name', 'string')\n                  -\u003eaddColumn('discount', 'integer')\n                  -\u003eaddColumn('expires_at', 'datetime')\n                  -\u003eaddColumn('created_at', 'datetime', ['default' =\u003e 'CURRENT_TIMESTAMP'])\n                  -\u003eaddColumn('updated_at', 'datetime', ['default' =\u003e 'CURRENT_TIMESTAMP'])\n                  -\u003eaddColumn('deleted_at', 'datetime',['null' =\u003e true])\n                  -\u003esave();\n        }\n        /**\n         * Migrate Down.\n         */\n        public function down()\n        {\n            $this-\u003edropTable('offers');\n        }\n    }\n```\n \n Finally, open the vouchers migration file and replace the content with this:\n \n``` php\n    // /db/migrations/timestamp_create_vouchers_table.php\n    \u003c?php\n    use Phinx\\Migration\\AbstractMigration;\n    \n    class CreateVouchersTable extends AbstractMigration\n    {\n         /**\n         * Migrate Up.\n         */\n        public function up()\n        {\n            $voucher = $this-\u003etable('vouchers');\n            $voucher-\u003eaddColumn('code', 'string')\n                  -\u003eaddColumn('offer_id', 'integer', ['null' =\u003e true])\n                  -\u003eaddColumn('user_id', 'integer', ['null' =\u003e true])\n                  -\u003eaddColumn('is_used', 'integer',['default' =\u003e 0])\n                  -\u003eaddColumn('date_used', 'datetime', ['null' =\u003e true])\n                  -\u003eaddColumn('created_at', 'datetime', ['default' =\u003e 'CURRENT_TIMESTAMP'])\n                  -\u003eaddColumn('updated_at', 'datetime', ['default' =\u003e 'CURRENT_TIMESTAMP'])\n                  -\u003eaddColumn('deleted_at', 'datetime', ['null' =\u003e true])\n                  -\u003eaddForeignKey('user_id', 'users', 'id', ['delete'=\u003e 'SET_NULL', 'update'=\u003e 'NO_ACTION'])\n                  -\u003eaddForeignKey('offer_id', 'offers', 'id', ['delete'=\u003e 'SET_NULL', 'update'=\u003e 'NO_ACTION'])\n                  -\u003eaddIndex(['code'], ['unique' =\u003e true]) \n    \n                  -\u003esave();\n    \n                  \n        }\n        /**\n         * Migrate Down.\n         */\n        public function down()\n        {\n            $this-\u003edropTable('voucher');\n        }\n    }\n```\n\nNow that we have created our migration files, we need to run them. Run this command on your terminal:\n\n```\n    $ vendor/bin/phinx migrate\n```\n\nThe last package we will install is the validation package, we will need this when we want to validate all inputs supplied to our application. Open your terminal and run this command:\n\n```\n    $ composer require awurth/slim-validation\n```\n\nNext, we also need to include our validation package in our application boot process. Open the `bootstrap/app.php` file and edit as follows:\n\n``` php\n    [...]\n    $container['validator'] = function ($container) { return new Awurth\\SlimValidation\\Validator; };\n    require_once __DIR__ . '/database.php';\n    require_once __DIR__ . '/../routes/web.php';\n    [...]\n```\n\n## Conclusion\n\nIn this tutorial, we have looked at how to set up our Slim 3 framework application. We set up our application to use Laravel’s Eloquent to communicate with our database. We created our database schema and we set up Phinx to help with our migration files. Finally, we included a validation package to ensure that users submit the right data to our API.\n\nIn the [next tutorial](https://pusher.com/tutorials/rest-api-slim-part-2) of this two-part series, we will proceed to build our controllers and models. We will also create endpoints and test the output data using Postman.\n\nThe source code to the application in this article is available on [GitHub](https://github.com/fisayoafolayan/build-a-restful-api-in-slim3).","metaTitle":"How to build a RESTful API in Slim 3 - Part 1","metaDescription":"In this two part series, learn how to use the Slim framework to create a simple PHP REST API. In part one, set up the project and database."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6qg2A77Qe4mIUQ0MM2mUYe","type":"Entry","createdAt":"2018-10-11T21:50:20.587Z","updatedAt":"2018-10-11T21:50:20.587Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live markdown editor with VueJS","url":"markdown-editor-vue","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/yemiwebby/vue-markdown","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-10-11","description":"Build a simple markdown editor using Vue and Node. Users will be able to write in markdown and see their text update in realtime in a preview field. Multiple users can collaborate on the same document simultaneously, with realtime updates between users.","prerequisite":"You will need Node installed on your machine. Some knowledge of JavaScript will be helpful.","content":"## Introduction\n\nAs developers, we sometimes love to conveniently create easy-to-read documentation so as to ease the stress that accompanies styling at the beginning. For this, you need an easy tool such as the Markdown editor. This enables you to create a H1 ( for example) by simply adding a # before the header.\n\nTogether in this tutorial we'll build a simple, yet very effective realtime markdown editor application with [Vue](https://vuejs.org/) and powered by [Pusher](https://pusher.com/). This app will be used to convert raw markdown into proper HTML. It will have two separate sections:\n\n\n1. To the left, where you write and view raw markdown\n2. And the right, where you can easily view the converted markdown\n\nA quick look at what we’ll build:\n\n![vue-markdown-editor-demo-1](//images.ctfassets.net/1es3ne0caaid/5gtaWqftpSUgckQYGK2WwK/38f4847101722a7bf74472a3cba9ed5c/vue-markdown-editor-demo-1.gif)\n\n## Prerequisites\n\nEnsure that you have [Node.js](https://nodejs.org/en/) and [npm](https://www.npmjs.com/) installed on your machine. A quick overview of other core technologies we will be using in this tutorial include:\n\n\n- [Vue](https://vuejs.org/): a progressive JavaScript framework for building applications\n\n\n- [Pusher](https://pusher.com/): a Node.js client to interact with the Pusher REST API\n\n\n- [Marked](https://github.com/markedjs/marked): a low-level markdown compiler for parsing markdown without caching or blocking for long periods of time.\n\n\n\n\u003e 💡 I am using @vue/cli 2.0 ****for this project\n\n\n## Setting up the project\n\nWe’ll use [Vue-cli](https://cli.vuejs.org/) to setup our project, so run the command below to have it installed globally on your machine:\n\n```\n    npm install -g @vue/cli \n    or \n    yarn global add @vue/cli\n```\n\nYou can verify that Vue is properly installed by running:\n\n```\n    vue --version\n```\n\nThis will output the current version installed on your machine, just like this:\n\n![vue-markdown-editor-vue-version](//images.ctfassets.net/1es3ne0caaid/5g3IpRIYH6qS0ogyOOkOK2/cd53e2e419dee38d2767c388b577d1dd/vue-markdown-editor-vue-version.png)\n\nNow to generate our project, type the following command:\n\n```\n    vue init webpack vue-markdown // version 2\n    or \n    vue create vue-markdown // version 3\n```\n\nExecuting the command above will bring up a couple of questions, you can accept the default and proceed. Once the installation process is completed, you will now have a new project named `vue-markdown` installed in your project directory.\n\n\n## Running the application\n\nNext, we’ll run the application:\n\n```\n    npm start // version 2\n    or\n    npm run serve // version 3\n```\n\nThis will start the application on the http://localhost:8080. Visit that link:\n\n![vue-markdown-editor-homepage](//images.ctfassets.net/1es3ne0caaid/4NbOhe4KrCgoYSy8QeMS2s/9b027f4b7620ebe161ce3bd02cfc6576/vue-markdown-editor-homepage.png)\n\n## Installing server dependencies\n\nRun the following commands to install the dependencies required for this project:\n\n```\n    npm install --save pusher pusher-js marked\n    npm install --save body-parser cors dotenv express \n```\n\n## Pusher account setup\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up), if you don’t already have one. Log in to create a new application by clicking on the **Channels apps** on the sidebar. Obtain your application credentials as we will need to use them later in this post.\n\n### A little more about how Pusher works\n\nPusher allows you communicate between different parts of your application in realtime. It can be a notification you wish to show your users or the price of a product which people are bidding on currently. Whatever it is that needs constant updating, you can (and maybe should) use pusher for it.\n\nBy default, Pusher allows you bind to events on the client-side (listen to events on your browser, app, etc) and then trigger events on the server-side (send broadcasts to all listeners from the server). However, pusher has this really cool super amazing feature called private channels that allows you trigger events from the client side. You have to turn it on and perform a few actions to use it.\n\n\n1. Your channel name on the client-side must be prefixed with `private-`\n2. All your event names on the client-side must be prefixed with `client-`\n3. You must authenticate the Pusher subscription before you can trigger events on the client-side.\n\nSo, from your Pusher app dashboard, go to App settings and enable client events before you continue with this guide.\n\n![vue-markdown-editor-enable-client-events](//images.ctfassets.net/1es3ne0caaid/3F3daML5u8mwecqeiU0sqi/1a98bd74511c44cc63bebb8c26f92c7a/vue-markdown-editor-enable-client-events.png)\n\nNow you are ready. You can read more about [private channels](https://pusher.com/docs/client_api_guide/client_events#trigger-events).\n\n## Environment variables\n\nCreate a file name `.env` in the root directory of your application and add your application credentials as obtained from your Pusher dashboard as follows:\n\n\n```\n    PUSHER_APP_ID=YOUR_APP_ID\n    PUSHER_APP_KEY=YOUR_APP_KEY\n    PUSHER_APP_SECRET=YOUR_APP_SECRET\n    PUSHER_APP_CLUSTER=CLUSTER\n```\n\nEnsure that you replace `YOUR_APP_ID`, `YOUR_APP_KEY`, `YOUR_APP_SECRET` and `CLUSTER` placeholders with the appropriate credentials.\n\n\n## Setting up the server\n\nThe main objective of this application is to be able to process and convert a raw markdown to HTML in realtime from all browsers, to effectively achieve this, we’ll use Express to set up a simple server and use Pusher to broadcast the converted markdown to all the client on a specific channel. \n\nSo create a `server.js` file in the root directory of your application and add the following code snippet to it:\n\n``` javascript\n    // server.js\n    \n      const express = require('express');\n      const bodyParser = require('body-parser');\n      const cors = require('cors');\n      const Pusher = require('pusher');\n      require('dotenv').config();\n      \n      const app = express();\n      \n      app.use(cors());\n      app.use(bodyParser.urlencoded({ extended: false }));\n      app.use(bodyParser.json());\n      \n      const pusher = new Pusher({\n          appId: process.env.PUSHER_APP_ID,\n          key: process.env.PUSHER_APP_KEY,\n          secret: process.env.PUSHER_APP_SECRET,\n          cluster: process.env.PUSHER_APP_CLUSTER,\n          encrypted: true\n      });\n      \n       app.post('/pusher/auth', function(req, res) {\n        var socketId = req.body.socket_id;\n        var channel = req.body.channel_name;\n        var auth = pusher.authenticate(socketId, channel);\n        res.send(auth);\n      });\n      \n      var port = process.env.PORT || 3000;\n      app.listen(port);\n      console.log(\"Listening on 3000\")\n```\n  \nFirst, we basically loaded all the necessary middlewares for the Express server and configured Pusher using the credentials we added to our environment variables earlier.\n\nOur client application will need to make an API call to a specified endpoint in order to authenticate our pusher connection and ensure we can run a private channel on the frontend. Pusher has an `authenticate()` function that does that for us.\n\nOpen another terminal and start the server on http://localhost:3000 with:\n\n```\n    node server\n```\n\nThis will log a message to the console as shown below. This is to indicate that the server has been started successfully:\n\n![vue-markdown-editor-server-started](//images.ctfassets.net/1es3ne0caaid/7FidPJ8w1O6YOckw26SMqG/f30cfec1ca3d2cb86f6c3fa32f7c2469/vue-markdown-editor-server-started.png)\n\n## Creating the home component\n\nFor the purpose of this application we’ll create a new component, so navigate to `./src/components` and create a new file named `HomeComponent.vue` within it. Once you are done, paste in the code below:\n\n``` javascript\n    // ./src/components/HomeComponent.vue\n    \n      \u003ctemplate\u003e\n          \u003cdiv\u003e\n              \u003cdiv class=\"title\"\u003e\n                  \u003ch2\u003e{{ title }}\u003c/h2\u003e\n              \u003c/div\u003e\n              \n              \u003cdiv\u003e\n                 \u003cdiv class=\"row\"\u003e\n                      \u003cdiv class=\"col-md-6\"\u003e\n                          \u003ctextarea  v-model=\"markdown\" name=\"\" id=\"\" cols=\"80\" rows=\"15\" @keyup=\"postMark\"\u003e\u003c/textarea\u003e\n                      \u003c/div\u003e\n                      \u003cdiv id=\"preview\" class=\"col-md-6\" v-html=\"compiledMarkdown\"\u003e\u003c/div\u003e\n                 \u003c/div\u003e\n              \u003c/div\u003e\n          \u003c/div\u003e\n      \u003c/template\u003e\n      \n      \u003cscript\u003e\n      import axios from \"axios\";\n      import pusher from \"pusher\";\n      \n      export default {\n        name: \"Home\",\n        data() {\n          return {\n            title: \"Realtime Markdown Editor\",\n            markdown: \"\",\n            channel : {}\n          };\n        },\n      };\n      \u003c/script\u003e\n      \n      \u003cstyle\u003e\n      .title {\n        margin-bottom: 40px;\n      }\n      #preview {\n        border: 2px solid;\n        text-align: left;\n      }\n      \u003c/style\u003e\n```\n\nHere, within the template section of the component above, we created two separate columns: a textarea where the raw markdown will be written and a second column to preview the compiled markdown in realtime.\n\nFurthermore, we proceeded to added a little bit of styling to the application.\n\n\n## Enabling realtime editing\n\nWe want to send updates to our document immediately the user makes them. This is the whole essence of adding realtime functionality to begin with. With private channels, we can skip the entire step of sending the update to the server and then triggering an event from the server. We can do all of that from the client now.  \n\nOpen `./src/components/HomeComponent.vue` and define the Pusher application:\n\n``` javascript\n    // ./src/components/HomeComponent.vue\n     ...  \n      \u003cscript\u003e\n      import marked from \"marked\";\n      import pusher from \"pusher\";\n      \n      export default {\n        ...\n        created() {\n          let pusher = new Pusher(\"YOUR_APP_KEY\", {\n            cluster: \"CLUSTER\",\n            encrypted: true\n            authEndpoint: 'http://localhost:3000/pusher/auth',\n          });\n          \n          this.channel = pusher.subscribe(\"private-markdown\");\n          this.channel.bind(\"client-new-text\", data =\u003e {\n            this.markdown = data;\n          });\n        },\n        // We will generate the markdown and trigger events here\n       ...\n      };\n      \u003c/script\u003e\n      ...\n```\n\nIn the `created` method, we have defined the Pusher application, subscribed to a private channel and bound the channel to the an event. Now, we are ready to listen to any data exchange that will happen across that channel.\n\n\u003e Do ensure that you replace the `YOUR_APP_KEY` and `CLUSTER` with the appropriate credential. Also replace the `authEndpoint` with the endpoint you defined for your application.\n\n### Generating markdown\n\nTo generate markdown from the input we make, add the following code to the file:\n\n``` javascript\n    // ./src/components/HomeComponent.vue\n    ...  \n    \u003cscript\u003e\n      ...\n      export default {\n          ...\n          computed : {\n            compiledMarkdown: function () {\n              return marked(this.markdown, { sanitize: true })\n            }\n          },\n          // We will listen for changes to the document here\n          ...\n      };\n    \u003c/script\u003e\n    ...\n```\n\nThe `computed` data attribute `compiledMarkdown` will always be updated as the content of `markdown` changes. This is good for us so we can see changes immediately.\n\n### Trigger event with changes\n\nNow, let’s send the changes we make to the document to everyone following it\n\n``` javascript\n    // ./src/components/HomeComponent.vue\n    ...  \n    \u003cscript\u003e\n      ...\n      export default {\n        ...\n        methods: {\n          postMark: function(e) {\n            const text = e.target.value;\n            this.channel.trigger(\"client-new-text\", text);\n          }\n        }\n        ...\n      };\n    \u003c/script\u003e\n    ...\n```\n\n## Wrapping up\n\nNavigate to `./src/App.vue`  file and include the created `HomeComponent.vue` file within it:\n\n``` javascript\n    // ./src/App.vue\n    \n        \u003ctemplate\u003e\n        \u003cdiv id=\"app\"\u003e\n          \u003chomeComponent/\u003e\n        \u003c/div\u003e\n      \u003c/template\u003e\n      \u003cscript\u003e\n      \n      import HomeComponent from \"./components/HomeComponent\";\n      export default {\n        name: \"App\",\n        components: {\n          HomeComponent\n        }\n      };\n      \u003c/script\u003e\n      \n      \u003cstyle\u003e\n      #app {\n        font-family: \"Avenir\", Helvetica, Arial, sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        text-align: center;\n        color: #2c3e50;\n        margin-top: 60px;\n      }\n      \u003c/style\u003e\n```\n\nAnd finally, open the `index.html` file and update as shown below:\n\n``` html\n    // ./index.html\n    \n      \u003c!DOCTYPE html\u003e\n      \u003chtml\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"\u003e\n        \u003ctitle\u003eVue Realtime Markdown\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n      \u003c/head\u003e\n      \n      \u003cbody\u003e\n        \u003cnav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"\u003e\n          \u003ca class=\"navbar-brand\" href=\"#\"\u003eNavbar\u003c/a\u003e\n        \u003c/nav\u003e\n        \u003cdiv id=\"app\"\u003e\u003c/div\u003e\n        \u003c!-- built files will be auto injected --\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n      \n      \u003c/html\u003e\n```\n\nWe included the CDN file for bootstrap, added a navigation bar and also included the script file for Pusher.\n\n\n## Test the application\n\nRestart the application by running `npm start` from the terminal and don’t forget to also start the server by opening another terminal within your project folder with `node server`.\n\n![vue-markdown-editor-demo-2](//images.ctfassets.net/1es3ne0caaid/5gKVOo1nWguyI2iCqK60U0/45837a76c1af908d7cb43e932922c53d/vue-markdown-editor-demo-2.gif)\n\n\n## Conclusion\n\nIn this tutorial, you have learned how to conveniently build a simple markdown editor application using Vue and Pusher to enhance the realtime functionality. I hope you found this helpful. You can find the source code for the demo [here on GitHub](https://github.com/yemiwebby/vue-markdown).","metaTitle":"Build a live markdown editor with Vue","metaDescription":"Use Node and Vue to create a realtime markdown editor, featuring live preview and realtime collaborative updates."}}],"defaultValue":"","queryType":"","pages":50,"route":"/tutorials","query":{"page":"20"}}},"page":"/tutorials","query":{"page":"20"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?page=20 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:43 GMT -->
</html>