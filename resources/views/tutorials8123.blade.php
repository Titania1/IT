<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Data%20Visualization by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:42:09 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">18</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; Data Visualization</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorialse20a.html?tag=Data%20Visualization" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsb154.html?product=Beams&amp;tag=Data%20Visualization" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; Data Visualization"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/go-tweets-popularity-chart.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live popularity chart in Go using tweets as a data source</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Build a Go application with a simple web frontend, displaying a live graph comparing the popularity of three Twitter top...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-graph-d3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live graph with D3.js</h3><p class="css-k12xad e5jrto45">In this short tutorial, create a simple live graph using D3.js. A basic Node backend sends data to a D3 bar graph, which...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-graph-ionic.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Cordova</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live voting app with Ionic</h3><p class="css-k12xad e5jrto45">Build a live voting app using Ionic, with a Node backend. The app replicates the behaviour of a Twitter poll: users can ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-graph-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a live graph with Go</h3><p class="css-k12xad e5jrto45">Build a simple interface featuring a live graph, supported by a Go backend. The application simulates a web traffic moni...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-graph-emberjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live graph with Ember.js</h3><p class="css-k12xad e5jrto45">Build a live interactive graph using Ember.js and Node.js. Users will be able to view the graph, watch it update in real...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-poll-python.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live polling web app with Python</h3><p class="css-k12xad e5jrto45">Build a live voting application using Flask. Users will be able to vote for their favorite programming language. Results...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/bitcoin-live-graph-python.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flask</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Track Bitcoin prices on a live graph with Python</h3><p class="css-k12xad e5jrto45">Build a live graph to track Bitcoin prices using Flask. You will create a simple Python application that pulls in Bitcoi...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/polling-ruby-rails-postgresql.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a polling app with Ruby on Rails and PostgreSQL</h3><p class="css-k12xad e5jrto45">Build a web app with Ruby on Rails, featuring a live poll and chart. User responses are communicated instantly, with the...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/data-visualization-angular.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a data visualization using Angular and Chart.js</h3><p class="css-k12xad e5jrto45">Build a live poll of user ages, with Angular, Node, Express and Chart.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Prev</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials0efc.html?product=Channels&amp;tag=Data%20Visualization&amp;page=1" class="css-2wakph edg0byb1">1</a><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials9d3c.html?product=Channels&amp;tag=Data%20Visualization&amp;page=2" class="css-5s6711 edg0byb1">2</a><a href="tutorials9d3c.html?product=Channels&amp;tag=Data%20Visualization&amp;page=2" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":18,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"369KH6O2yIk79cjItcMVND","type":"Entry","createdAt":"2019-06-07T18:31:18.861Z","updatedAt":"2019-06-07T18:31:18.861Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live popularity chart in Go using tweets as a data source","url":"go-tweets-popularity-chart","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Khmrnzj5moO4S6WOYOGAo","type":"Entry","createdAt":"2018-11-14T14:35:55.702Z","updatedAt":"2019-03-03T15:15:59.601Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lanre Adelowo","url":"lanre-adelowo","email":"adelowomailbox@gmail.com","twitter":"https://twitter.com/alanreadelowo","github":"https://github.com/adelowo","guestWriter":true}}],"projectRepo":"https://github.com/adelowo/pusher-twitter-streaming-api","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WBKKiARVKggKEsq8gSuOS","type":"Entry","createdAt":"2018-02-12T15:10:05.476Z","updatedAt":"2018-02-26T12:31:10.466Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Counter","url":"live-counter","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}}],"reviewDate":"2019-06-07","description":"Build a Go application with a simple web frontend, displaying a live graph comparing the popularity of three Twitter topics. You will create a Twitter developer account, code the app, and be able to customize the displayed topics.","prerequisite":"You will need Go 1.5+ installed on your machine.","content":"Polls exists almost everywhere on the internet - Twitter, Slack - and a major similarity between all of them is the results are updated in realtime. In this tutorial, I will be describing how to build a web app that shows the popularity of a keyword in realtime with the help of Pusher Channels. The data source for our application will be tweets from Twitter.\n\nBelow is a gif of the final state of the application:\n\n![go-twitter-graph-demo](//images.ctfassets.net/1es3ne0caaid/5emdjhJDG7JKgw8H0lyuFQ/3a849c917c7aa54cd03cd0ab295b87ac/go-twitter-graph-demo.gif)\n\n## Prerequisites\n\n- Golang `\u003e=1.5`\n- A [Pusher account](https://dashboard.pusher.com)\n- A Twitter application. \n\u003e To do this, you need to apply as a developer before you can create an application. You can find a comprehensive guide [here](https://medium.com/@divyeshardeshana/create-twitter-developer-account-app-4ac55e945bf4). \n\n## Building the application\n\nRemember that an important step to this is to make sure you have a Twitter developer account. Kindly follow [this tutorial](https://medium.com/@divyeshardeshana/create-twitter-developer-account-app-4ac55e945bf4) to do that.\n\nThe next step of action is to create a directory to house our application, you will need to create a directory called `streaming-api`. The location of this directory will depend on the version of the Go toolchain you have - If your Go toolchain is `\u003c=1.11`, you need to create the directory in your `$GOPATH` such as `$GOPATH/src/github.com/username/streaming-api`. If you are making use of `\u003e=1.12`, you can create the directory literally anywhere. \n\nOnce that is done, you will need to create a file called `.env`, this file will contain credentials to access both the Twitter streaming API and Pusher channels. Run the command below to create the file:\n\n```\n    $ touch .env\n```\n\nOnce done, you will also need to paste the following contents into the newly created `.env`  file:\n\n```\n    // .env\n    TWITTER_CONSUMER_KEY=TWITTER_CONSUMER_KEY\n    TWITTER_CONSUMER_SECRET=TWITTER_CONSUMER_SECRET\n    TWITTER_ACCESS_TOKEN=TWITTER_ACCESS_TOKEN\n    TWITTER_ACCESS_SECRET=TWITTER_ACCESS_SECRET\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_APP_KEY=PUSHER_APP_KEY\n    PUSHER_APP_SECRET=PUSHER_APP_SECRET\n    PUSHER_APP_CLUSTER=\"eu\"\n    PUSHER_APP_SECURE=\"1\"\n```\n\n\n\u003e Please remember to replace the placeholders with your actual credentials.\n\nThe next step of action is to actually create the server and the integration with Pusher Channels. To do that, you need to create a new file called `main.go`, that can be done by executing the command below:\n\n```\n    $ touch main.go\n```\n\nYou will also need to fetch some library that are needed to help build the application. Run the command below to install these libraries:\n\n```\n    $ go get -v github.com/dghubble/go-twitter/twitter \n    $ go get -v github.com/dghubble/oauth1 \n    $ go get -v github.com/joho/godotenv\n    $ go get -v github.com/pusher/pusher-http-go\n```\n\nIn the newly created file `main.go`, you will need to paste the following contents:\n\n```go\n    // streaming-api/main.go\n    \n    package main\n    \n    import (\n            \"encoding/json\"\n            \"flag\"\n            \"fmt\"\n            \"html/template\"\n            \"log\"\n            \"net/http\"\n            \"os\"\n            \"os/signal\"\n            \"strings\"\n            \"sync\"\n            \"syscall\"\n            \"time\"\n    \n            \"github.com/dghubble/go-twitter/twitter\"\n            \"github.com/dghubble/oauth1\"\n            \"github.com/joho/godotenv\"\n            \"github.com/pusher/pusher-http-go\"\n    )\n    \n    type cache struct {\n            counter map[string]int64\n            mu      sync.RWMutex\n    }\n    \n    func (c *cache) Init(options ...string) {\n            for _, v := range options {\n                    c.counter[strings.TrimSpace(v)] = 0\n            }\n    }\n    \n    func (c *cache) All() map[string]int64 {\n            c.mu.Lock()\n            defer c.mu.Unlock()\n    \n            return c.counter\n    }\n    \n    func (c *cache) Incr(option string) {\n            c.mu.Lock()\n            defer c.mu.Unlock()\n    \n            c.counter[strings.TrimSpace(option)]++\n    }\n    \n    func (c *cache) Count(option string) int64 {\n            c.mu.RLock()\n            defer c.mu.RUnlock()\n    \n            val, ok := c.counter[strings.TrimSpace(option)]\n            if !ok {\n                    return 0\n            }\n    \n            return val\n    }\n    \n    func main() {\n    \n            options := flag.String(\"options\", \"Messi,Suarez,Trump\", \"What items to search for on Twitter ?\")\n            httpPort := flag.Int(\"http.port\", 1500, \"What port to run HTTP on ?\")\n            channelsPublishInterval := flag.Duration(\"channels.duration\", 3*time.Second, \"How much duration before data is published to Pusher Channels\")\n    \n            flag.Parse()\n    \n            if err := godotenv.Load(); err != nil {\n                    log.Fatalf(\"could not load .env file.. %v\", err)\n            }\n    \n            appID := os.Getenv(\"PUSHER_APP_ID\")\n            appKey := os.Getenv(\"PUSHER_APP_KEY\")\n            appSecret := os.Getenv(\"PUSHER_APP_SECRET\")\n            appCluster := os.Getenv(\"PUSHER_APP_CLUSTER\")\n            appIsSecure := os.Getenv(\"PUSHER_APP_SECURE\")\n    \n            var isSecure bool\n            if appIsSecure == \"1\" {\n                    isSecure = true\n            }\n    \n            pusherClient := \u0026pusher.Client{\n                    AppId:   appID,\n                    Key:     appKey,\n                    Secret:  appSecret,\n                    Cluster: appCluster,\n                    Secure:  isSecure,\n            }\n    \n            config := oauth1.NewConfig(os.Getenv(\"TWITTER_CONSUMER_KEY\"), os.Getenv(\"TWITTER_CONSUMER_SECRET\"))\n            token := oauth1.NewToken(os.Getenv(\"TWITTER_ACCESS_TOKEN\"), os.Getenv(\"TWITTER_ACCESS_SECRET\"))\n    \n            httpClient := config.Client(oauth1.NoContext, token)\n    \n            client := twitter.NewClient(httpClient)\n    \n            optionsCache := \u0026cache{\n                    mu:      sync.RWMutex{},\n                    counter: make(map[string]int64),\n            }\n    \n            splittedOptions := strings.Split(*options, \",\")\n    \n            if n := len(splittedOptions); n \u003c 2 {\n                    log.Fatalf(\"There must be at least 2 options... %v \", splittedOptions)\n            } else if n \u003e 3 {\n                    log.Fatalf(\"There cannot be more than 3 options... %v\", splittedOptions)\n            }\n    \n            optionsCache.Init(splittedOptions...)\n    \n            go func() {\n    \n                    var t *template.Template\n                    var once sync.Once\n    \n                    http.Handle(\"/static/\", http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\".\"))))\n    \n                    http.Handle(\"/polls\", http.HandlerFunc(poll(optionsCache)))\n                    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n    \n                            once.Do(func() {\n                                    tem, err := template.ParseFiles(\"index.html\")\n                                    if err != nil {\n                                            log.Fatal(err)\n                                    }\n    \n                                    t = tem.Lookup(\"index.html\")\n                            })\n    \n                            t.Execute(w, nil)\n                    })\n    \n                    http.ListenAndServe(fmt.Sprintf(\":%d\", *httpPort), nil)\n            }()\n    \n            go func(c *cache, client *pusher.Client) {\n    \n                    t := time.NewTicker(*channelsPublishInterval)\n    \n                    for {\n                            select {\n                            case \u003c-t.C:\n                                    pusherClient.Trigger(\"twitter-votes\", \"options\", c.All())\n                            }\n                    }\n    \n            }(optionsCache, pusherClient)\n    \n            demux := twitter.NewSwitchDemux()\n            demux.Tweet = func(tweet *twitter.Tweet) {\n                    for _, v := range splittedOptions {\n                            if strings.Contains(tweet.Text, v) {\n                                    optionsCache.Incr(v)\n                            }\n                    }\n            }\n    \n            fmt.Println(\"Starting Stream...\")\n    \n            filterParams := \u0026twitter.StreamFilterParams{\n                    Track:         splittedOptions,\n                    StallWarnings: twitter.Bool(true),\n            }\n    \n            stream, err := client.Streams.Filter(filterParams)\n            if err != nil {\n                    log.Fatal(err)\n            }\n    \n            go demux.HandleChan(stream.Messages)\n    \n            ch := make(chan os.Signal)\n            signal.Notify(ch, syscall.SIGINT, syscall.SIGTERM)\n            \u003c-ch\n    \n            fmt.Println(\"Stopping Stream...\")\n            stream.Stop()\n    }\n    \n    func poll(cache *cache) func(w http.ResponseWriter, r *http.Request) {\n            return func(w http.ResponseWriter, r *http.Request) {\n                    json.NewEncoder(w).Encode(cache.All())\n            }\n    }\n```\n\nWhile a little lengthy, the above code does just three things:\n\n\n- Connect to the Twitter streaming API and listen for tweets that match our options search.\n- Start an `HTTP` server that serves an HTML page in order to display the realtime results.\n- Send an updated result to Pusher Channels.\n\nWhile you might be tempted to run the application, there are still a few things missing here. We need to create one more file - `index.html`. This file will house the frontend for our application. You will need to go ahead to create the file by running the command below:\n\n```\n    $ touch index.html\n```\n\nIn the newly created `index.html` file, you will need to paste the following contents in it:\n\n```html\n    // streaming-api/index.html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003ctitle\u003eRealtime voting app based on Tweets\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap-grid.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.min.css\" /\u003e\n    \u003c/head\u003e\n    \n    \u003cbody\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-1\"\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-10\"\u003e\n                    \u003ccanvas id=\"myChart\" width=\"400\" height=\"400\"\u003e\u003c/canvas\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-1\"\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://js.pusher.com/4.4/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"static/app.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe import a few Javascript libraries but perhaps the most interesting is Line 29 which reads `\u003cscript src=\"static/app.js\"\u003e\u003c/script\u003e` . Basically, what this means is we need to create yet another file called `app.js`. You can go ahead to do that in the root directory with the following command:\n\n```\n    $ touch app.js\n```\n\nIn the newly created `app.js` file, paste the following content:\n\n```js\n    // streaming-api/app.js\n    \n    const APP_KEY = 'PUSHER_APP_KEY';\n    const APP_CLUSTER = 'PUSHER_APP_CLUSTER';\n    \n    var ctx = document.getElementById('myChart').getContext('2d');\n    var myChart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: [],\n        datasets: [\n          {\n            label: '# of Tweets',\n            data: [],\n            backgroundColor: [\n              'rgba(255, 99, 132, 0.2)',\n              'rgba(54, 162, 235, 0.2)',\n              'rgba(255, 159, 64, 0.2)',\n            ],\n            borderWidth: 1,\n          },\n        ],\n      },\n      options: {\n        scales: {\n          yAxes: [\n            {\n              ticks: {\n                beginAtZero: true,\n              },\n            },\n          ],\n        },\n      },\n    });\n    \n    function updateChart(data) {\n      let iterationCount = 0;\n    \n      for (const key in data) {\n        if (!myChart.data.labels.includes(key)) {\n          myChart.data.labels.push(key);\n        }\n    \n        myChart.data.datasets.forEach(dataset =\u003e {\n          dataset.data[iterationCount] = data[key];\n        });\n    \n        iterationCount++;\n    \n        myChart.update();\n      }\n    }\n    \n    axios\n      .get('http://localhost:1500/polls', {})\n      .then(res =\u003e {\n        updateChart(res.data);\n      })\n      .catch(err =\u003e {\n        console.log('Could not retrieve information from the backend');\n        console.error(err);\n      });\n    \n    const pusher = new Pusher(APP_KEY, {\n      cluster: APP_CLUSTER,\n    });\n    \n    const channel = pusher.subscribe('twitter-votes');\n    \n    channel.bind('options', data =\u003e {\n      updateChart(data);\n    });\n```\n\n\n\u003e Please remember to make use of your actual key.\n\nWith the above done, it is time to test the application. To do this, you should run the following command in the root directory of `streaming-api` :\n\n```\n    $ go run main.go\n```\n\nYou will need to visit `http://localhost:1500` to see the chart.\n\nYou can also make use of the trending topics on your Twitter if you want to. To search Twitter for other polls, you can also make use of the following command:\n\n```\n    $ go run main.go -options=\"Apple,Javascript,Trump\"\n```\n\n\n## Conclusion\n\nIn this tutorial, I have described how to build a realtime popularity application that uses tweets as a data source. I also showed how to integrate with the Twitter streaming API and more importantly, Pusher Channels.\n\nAs always, the code for this tutorial can be found on [GitHub](https://github.com/adelowo/pusher-twitter-streaming-api).","metaTitle":"Build a popularity chart in Go using tweets as a data source","metaDescription":"Build a Go application with a simple web frontend, displaying a live graph comparing popularity of three Twitter topics. You will create a Twitter developer account, code the app, and be able to customize the displayed topics."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52mutvrmC48eK0IE8GoYUg","type":"Entry","createdAt":"2018-08-24T18:11:33.723Z","updatedAt":"2018-08-24T18:11:33.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live graph with D3.js","url":"live-graph-d3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/realtime-d3-graph","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-08-24","description":"In this short tutorial, create a simple live graph using D3.js. A basic Node backend sends data to a D3 bar graph, which updates live as new data is received.","prerequisite":"You will need Node and npm installed on your machine.","content":"Visual representations of data are one of the most effective means of conveying complex information and D3.js provides great tools and flexibility to create these data visualizations.\n\nD3.js is a JavaScript library used for producing dynamic, interactive data visualizations in web browsers using SVG, HTML and CSS.\n\nIn this tutorial, we'll explore how to build a realtime graph with D3.js and Pusher Channels. If you want to play around with the code as you read this tutorial, check out this [GitHub repository](https://github.com/ayoisaiah/realtime-d3-graph), which contains the final version of the code.\n\n## Prerequisites\n\nTo complete this tutorial, you need to have [Node.js](https://nodejs.org/en/download/) and [npm](https://www.npmjs.com/get-npm) installed. The versions I used while creating this tutorial are as follows:\n\n\n- Node.js v10.4.1\n- npm v6.3.0\n\nYou also need to have  [http-server](https://www.npmjs.com/package/http-server) installed on your machine. It can be installed through `npm` by running the following command: `npm install http-server`.\n\nAlthough no Pusher knowledge is required, a basic familiarity with JavaScript and D3.js will be helpful.\n\n## Getting started\n\nTo get started, create a new directory for the app we will build. Call it `realtime-graph`  or whatever you like. Inside the newly created directory, create a new `index.html` file and paste in the following code:\n\n``` html\n    //index.html\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"\u003e\n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n      \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"style.css\"\u003e\n      \u003ctitle\u003eRealtime D3 Chart\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \n      \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"https://d3js.org/d3.v5.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"app.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nAs you can see, the HTML file is just pulling up the styles and scripts we need to build the graph. We're making use of D3.js to build the chart and Pusher to add realtime functionality. The `app.js` file is where the code for the frontend of the app will be written.\n\nBefore we start implementing the chart, let's add the styles for the app in `style.css`:\n\n``` css\n    // style.css\n    \n    html {\n      height: 100%;\n      box-sizing: border-box;\n      padding: 0;\n      margin: 0;\n    }\n    \n    *, *::before, *::after {\n      box-sizing: inherit;\n    }\n    \n    body {\n      height: 100%;\n      font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;\n      overflow: hidden;\n      background: linear-gradient(135deg, #ffffff 0%,#e8f1f5 100%);\n    }\n    \n    .container {\n      position: absolute;\n      padding: 20px;\n      top: 50%;\n      left: 50%;\n      background-color: white;\n      border-radius: 4px;\n      transform: translate(-50%, -50%);\n      box-shadow: 0px 50px 100px 0px rgba(0,0,102,0.1);\n      text-align: center;\n    }\n    \n    .container h1 {\n      color: #333;\n    }\n    \n    .bar {\n      fill: #6875ff;\n      border-radius: 2px;\n    }\n    \n    .bar:hover {\n      fill: #1edede;\n    }\n    \n    .tooltip {\n      opacity: 0;\n      background-color: rgb(170, 204, 247);\n      padding: 5px;\n      border-radius: 4px;\n      transition: opacity 0.2s ease;\n    }\n```\n\n## Install the server dependencies\n\nAssuming you have Node and `npm` installed, run the following command to install all the dependencies we will need for the server component of the application:\n\n```\n    npm install express dotenv cors pusher\n```\n\n## Pusher setup\n\nHead over to the Pusher website and sign up for a free account. Select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app.\n\nOnce your app is created, retrieve your credentials from the API Keys tab, then add the following to a new `variables.env` file in the root of your project directory.\n\n```\n    // variables.env\n    \n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\n## Set up the server\n\nNow that we've installed the relevant dependencies and our Pusher account has been setup, we can start building the server.\n\nCreate a new file called `server.js` in the root of your project directory and paste in the following code:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    const express = require('express');\n    const cors = require('cors');\n    \n    const poll = [\n      {\n        name: 'Chelsea',\n        votes: 100,\n      },\n      {\n        name: 'Arsenal',\n        votes: 70,\n      },\n      {\n        name: 'Liverpool',\n        votes: 250,\n      },\n      {\n        name: 'Manchester City',\n        votes: 689,\n      },\n      {\n        name: 'Manchester United',\n        votes: 150,\n      },\n    ];\n    \n    const app = express();\n    app.use(cors());\n    \n    app.get('/poll', (req, res) =\u003e {\n      res.json(poll);\n    });\n    \n    app.set('port', process.env.PORT || 4000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nSave the file and run `node server.js` from the root of your project directory to start the server.\n\n## Set up the app frontend\n\nThe frontend of the application will be written in the `app.js` file we referenced earlier. Create this file in the root of your project directory and paste the following code therein:\n\n``` javascript\n    // app.js\n    \n    // set the dimensions and margins of the graph\n    const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n    const width = 960 - margin.left - margin.right;\n    const height = 500 - margin.top - margin.bottom;\n    \n    // set the ranges for the graph\n    const x = d3\n      .scaleBand()\n      .range([0, width])\n      .padding(0.1);\n    \n    const y = d3.scaleLinear().range([height, 0]);\n    \n    // append the container for the graph to the page\n    const container = d3\n      .select('body')\n      .append('div')\n      .attr('class', 'container');\n    \n    container.append('h1').text('Who will win the 2018/19 Premier League Season?');\n    \n    // append the svg object to the body of the page\n    // append a 'group' element to 'svg'\n    // moves the 'group' element to the top left margin\n    const svg = container\n      .append('svg')\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height + margin.top + margin.bottom)\n      .append('g')\n      .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n    \n    // Create a skeleton structure for a tooltip and append it to the page\n    const tip = d3\n      .select('body')\n      .append('div')\n      .attr('class', 'tooltip');\n    \n    // Get the poll data from the `/poll` endpoint\n    fetch('http://localhost:4000/poll')\n      .then(response =\u003e response.json())\n      .then(poll =\u003e {\n        // add the x Axis\n        svg\n          .append('g')\n          .attr('transform', 'translate(0,' + height + ')')\n          .attr('class', 'x-axis')\n          .call(d3.axisBottom(x));\n    \n        // add the y Axis\n        svg\n          .append('g')\n          .attr('class', 'y-axis')\n          .call(d3.axisLeft(y));\n    \n        update(poll);\n      });\n    \n    function update(poll) {\n      // Scale the range of the data in the x axis\n      x.domain(\n        poll.map(d =\u003e {\n          return d.name;\n        })\n      );\n    \n      // Scale the range of the data in the y axis\n      y.domain([\n        0,\n        d3.max(poll, d =\u003e {\n          return d.votes + 200;\n        }),\n      ]);\n    \n      // Select all bars on the graph, take them out, and exit the previous data set.\n      // Enter the new data and append the rectangles for each object in the poll array\n      svg\n        .selectAll('.bar')\n        .remove()\n        .exit()\n        .data(poll)\n        .enter()\n        .append('rect')\n        .attr('class', 'bar')\n        .attr('x', d =\u003e {\n          return x(d.name);\n        })\n        .attr('width', x.bandwidth())\n        .attr('y', d =\u003e {\n          return y(d.votes);\n        })\n        .attr('height', d =\u003e {\n          return height - y(d.votes);\n        })\n        .on('mousemove', d =\u003e {\n          tip\n            .style('position', 'absolute')\n            .style('left', `${d3.event.pageX + 10}px`)\n            .style('top', `${d3.event.pageY + 20}px`)\n            .style('display', 'inline-block')\n            .style('opacity', '0.9')\n            .html(\n              `\u003cdiv\u003e\u003cstrong\u003e${d.name}\u003c/strong\u003e\u003c/div\u003e \u003cspan\u003e${d.votes} votes\u003c/span\u003e`\n            );\n        })\n        .on('mouseout', () =\u003e tip.style('display', 'none'));\n    \n      // update the x-axis\n      svg.select('.x-axis').call(d3.axisBottom(x));\n    \n      // update the y-axis\n      svg.select('.y-axis').call(d3.axisLeft(y));\n    }\n```\n\nIn the code block above, we've created a basic bar chart using the initial data received via the `/poll` endpoint. If you're familiar with how D3 works, the code should be familiar to you. I've added comments in key parts of the code to walk you through how the chart is constructed.\n\nIn a new terminal, start a development server to serve the `index.html` file:\n\n```\n    npx http-server\n```\n\nI'm using `http-server` here, but you can use whatever server you want. You can even open `index.html` in the browser directly.\n\nAt this point, your graph should look like this:\n\n![d3-live-graph-demo-1](//images.ctfassets.net/1es3ne0caaid/1o84wR6Pe0skismygAmWso/3f7be1a24b263f6f454c3bfb5612b4a6/d3-live-graph-demo-1.png)\n\n## Update the graph in realtime with Pusher\n\nLet's make sure that updates to the poll can be reflected in the app's frontend in realtime with Pusher Channels. Paste the following code at the end of the `app.js` file.\n\n``` javascript\n    // app.js\n    \n    const pusher = new Pusher('\u003cyour app key\u003e', {\n      cluster: '\u003cyour app cluster\u003e',\n      encrypted: true,\n    });\n    \n    const channel = pusher.subscribe('poll-channel');\n    channel.bind('update-poll', data =\u003e {\n      update(data.poll);\n    });\n```\n\nHere, we opened a connection to Channels and used the `subscribe()` method from Pusher to subscribe to a new channel called `poll-channel`. Updates to the poll are listened for via the `bind` method, and the `update()` function is invoked with the latest data once an update is received so that the graph is re-rendered.\n\nDon’t forget to replace the `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e` placeholders with the appropriate details from your Pusher account dashboard.\n\n## Trigger updates from the server\n\nWe're going to simulate a poll that updates every second and use Pusher to trigger an update when the data changes so that subscribers to the poll (the client) can receive the updated data in realtime.\n\nAdd the following code at the top of `server.js` below the other imports:\n\n``` javascript\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    function getRandomNumber(min, max) {\n      return Math.floor(Math.random() * (max - min) + min);\n    }\n    \n    function increment() {\n      const num = getRandomNumber(0, poll.length);\n      poll[num].votes += 20;\n    }\n    \n    function updatePoll() {\n      setInterval(() =\u003e {\n        increment();\n        pusher.trigger('poll-channel', 'update-poll', {\n          poll,\n        });\n      }, 1000);\n    }\n```\n\nThen change the `/poll` endpoint to look like this:\n\n``` javascript\n    app.get('/poll', (req, res) =\u003e {\n      res.json(poll);\n      updatePoll();\n    });\n```\n\nThe `/poll` route sends the initial poll data to the client and calls the `updatePoll()` function which increments the votes for a random club at three second intervals and triggers an update on the `poll-channel` which we created on the client in the last step.\n\nKill your server and restart it by running `node server.js` from the root of your project directory. At this point, you should have a bar graph that updates in realtime.\n\n![d3-live-graph-demo-2](//images.ctfassets.net/1es3ne0caaid/4mcVBAhYFqAwWU4Mg2Uka2/97369a77dbfb7aa74e6871a7de1fc899/d3-live-graph-demo-2.gif)\n\n## Conclusion\n\nYou have seen the procedure for creating a bar graph with D3.js and how to it in realtime with Pusher Channels. It was easy enough, wasn't it?\n\nWe have covered a simple use case for Pusher and D3 but one that's only scratching the surface. I recommend digging into the [docs](https://pusher.com/docs) to find more about Pusher and other awesome features it has.\n\nThanks for reading! Remember that you can find the complete source code for this tutorial in this [GitHub repository](https://github.com/ayoisaiah/realtime-d3-graph).","metaTitle":"Build a live graph with D3.js","metaDescription":"Use Node and D3 to create a simple live graph. As data is received, the graph updates in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6DAliEpVCgYEcIgOk4aYOu","type":"Entry","createdAt":"2018-07-06T09:15:49.491Z","updatedAt":"2018-07-06T09:15:49.491Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live voting app with Ionic","url":"live-graph-ionic","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/HackAfro/ionic-graph-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N8l3o0yD6QK2ooI2ME8wW","type":"Entry","createdAt":"2018-02-12T15:09:06.190Z","updatedAt":"2018-02-26T12:31:10.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Polls","url":"live-polls","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-07-02","description":"Build a live voting app using Ionic, with a Node backend. The app replicates the behaviour of a Twitter poll: users can vote for who they expect to win the World Cup.","prerequisite":"You should have Node and npm installed on your machine. Familiarity with Ionic development will be helpful.","content":"\u003e **Data visualization** is viewed by many disciplines as a modern equivalent of visual communication. It involves the creation and study of the visual representation of data. \n\u003e - [Wikipedia](https://en.wikipedia.org/wiki/Data_visualization)\n\n An important advantage of data visualization is how it enables users to more effectively see connections as they are occurring between operating conditions and business performance. Adding realtime functionality using [Pusher](https://pusher.com) improves this experience as data changes are witnessed in realtime.\n\nWe’ll be creating an application that will present data about how football fans predict who wins the current running World Cup. Using our application, users will complete a poll and then see the data from the polls in realtime.\n\nHere’s a screenshot of the final product:\n\n![ionic-live-graph-demo](//images.ctfassets.net/1es3ne0caaid/6bQMCuvpks8wsgkOWwAGgq/f7e885b2d2af1dbd1a5dbbbe711d93a3/ionic-live-graph-demo.png)\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of [Angular](https://angular.io), Ionic and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nIf you have no prior knowledge of Ionic, kindly follow the tutorial [here](https://ionicframework.com/docs/intro/tutorial/). Come back and finish the tutorial when you’re done.\n\nWe’ll be using these tools to build our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Ionic](https://ionicframework.com)\n- [Chart.js](http://www.chartjs.org/)\n\nWe’ll be sending data to the server and using [Pusher’s](https://pusher.com) pub/sub pattern, we’ll listen to and receive data in realtime. To make use of Pusher you’ll have to create an account [here](https://pusher.com). \n\nAfter account creation, visit the dashboard. Click **Create new Channels app**, fill out the details, click **Create my app**, and make a note of the details on the **App Keys** tab.\n\n\nLet’s build!\n\n## Setup and folder structure\n\nWe’ll initialize our project using the Ionic CLI (command line interface). First, install the CLI by running `npm install -g ionic` in your terminal. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/) installed.\n\nTo create a new Ionic project called `chat-app` using the CLI, open a terminal and run:   \n\n```\n    ionic start ionic-polls blank\n```\n\nThe command is simply telling the CLI to create a new project called `ionic-polls` without a template. \n\nFollow the prompt and integrate your app with Cordova to target IOS and Android.\n\n![ionic-geofence-integrate-cordova](//images.ctfassets.net/1es3ne0caaid/1IUUkS2jWEsGkaoC0ImGA0/a4419e24c715605029dc1edc7a6a60d5/ionic-geofence-integrate-cordova.png)\n\n Type **Y** to integrate Cordova into the application. The next prompt will ask if you want to integrate Ionic pro into the application. If you have a pro account type **Y** and **N** if you don’t.\n\nThe Ionic team provides three ready made starter templates. You can check out the rest of the templates [here](https://ionicframework.com/getting-started).\n\nOpen the newly created folder, your folder structure should look something like this:\n\n```\n    chat-app/\n      resources/\n      node_modules/\n      src/\n        app/\n          app.component.html\n          app.module.ts\n          app.scss\n          ...\n```\n\nOpen a terminal inside the project folder and start the application by running `ionic serve`. A browser window should pop up and you should see a page like this.\n\n\n![ionic-chat-sentiment-ionic-serve](//images.ctfassets.net/1es3ne0caaid/cZJy8Cc9WgkoiOEKI44uA/8a6010cf3b3515127f486c76c18f33de/ionic-chat-sentiment-ionic-serve.png)\n\n## Installing dependencies\n\nNext, run the following commands in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher\n    \n    // front-end dependencies\n    npm install ng2-charts pusher-js\n```\n\nStart the Ionic development server by running `ionic serve` in a terminal in the root folder of your project.\n\n\n## Building our server\n\nWe’ll build our server using [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/).\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: process.env.PUSHER_CLUSTER,\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```\n\nThe calls to our endpoint will be coming in from a different origin. Therefore, we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nThis is a standard Node application configuration, nothing specific to our app.\n\nCreate a Pusher account and a new Pusher Channels app if you haven’t done so yet and get your `appId`, `key` and `secret`. Create a file in the root folder of the project and name it `.env`. Copy the the following snippet into the `.env` file and ensure to replace the placeholder values with your Pusher credentials.\n\n```\n    // .env\n    \n    // Replace the placeholder values with your actual pusher credentials\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_KEY=PUSHER_KEY\n    PUSHER_SECRET=PUSHER_SECRET\n    PUSHER_CLUSTER=PUSHER_CLUSTER\n```\n\nWe’ll make use of the `dotenv` library to load the variables contained in the `.env` file into the Node environment. The `dotenv` library should be initalized as early as possible in the application.\n\n\n### Sending votes\n\nTo let users send requests to the server, we’ll create a route to handle incoming requests. Update your `server.js`  file with the code below. \n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      ...\n    });\n    \n    \n    app.post('/vote', (req, res) =\u003e {\n      const {body} = req;\n      const data = {\n        ...body,\n        // set the selected property of the body to true\n        selected: true,\n      };\n      // trigger a new-entry event on the vote-channel\n      pusher.trigger('vote-channel', 'new-entry', data);\n      res.json(data);\n    });\n    \n     ...\n```\n\n- We added a POST route(`/vote`) to handle incoming requests.\n- Using [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment), we got the body of the request.\n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`vote-channel`), an event name (`new-entry`), and a payload.\n- The payload being sent contains the body of the request sent in. The `selected` property of the payload is set to `true`.\n\nStart the server by running `node server` in a terminal in the root folder of your project.\n\n\n## Home view\n\nThe home view of the project will house both the polling area and the area where the data is visualized. We’ll present the user with options and a submit button to place vote.\n\nOpen the `home.html` file and replace it with the content below. The `home.html` file is in the `src/pages/home/` directory.\n\n``` html\n    \u003c!-- src/pages/home/home.html --\u003e\n    \n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003e\n          Vote\n        \u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \u003cion-content\u003e\n      \u003cdiv padding\u003e\n        \u003ch1 class=\"header\"\u003eWho will win the world cup?\u003c/h1\u003e\n        \u003cp class=\"sub-header\"\u003e* Place vote to see results\u003c/p\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"vote-area\" *ngIf=\"!voted\"\u003e\n        \u003cdiv class=\"options\"\u003e\n          \u003cbutton ion-button full class=\"option\" color=\"light\" [ngClass]=\"{active: selectedOption === option}\" *ngFor=\"let option of optionsArray\"\n            (click)=\"selectOption(option)\"\u003e{{options[option].name}}\u003c/button\u003e\n        \u003c/div\u003e\n        \u003cdiv\u003e\n          \u003cbutton ion-button block class=\"submit\" (click)=\"vote()\"\u003eSubmit Vote!\u003c/button\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"result-area\" *ngIf=\"voted\"\u003e\n        \u003c!-- Charts area --\u003e\n      \u003c/div\u003e\n    \u003c/ion-content\u003e\n```\n\n\n\n- In the code snippet above, we looped through `optionsArray` to create a view based on the player’s information. \n- The `vote` method will make use of the `HttpClient`  to send the user’s selection as a request to the server.\n- An option is active if the current `selectedOption` is equal to the option’s name.\n\nVariables used will be defined in the component’s TypeScript file.\n\n### Styling\n\nReplace the contents of `home.scss` with the following:\n\n``` scss\n    // src/pages/home/home.scss\n    \n    page-home {\n      .toolbar-background {\n        background: #1cd8d2; /* fallback for old browsers */\n        background: linear-gradient(to right, #93edc7, #1cd8d2);\n      }\n      .toolbar-title {\n        color: white;\n      }\n      .header {\n        font-size: 35px;\n        line-height: 1.1;\n      }\n       .sub-header{\n        margin: 0;\n        opacity: 0.5;\n        font-size: 13px;\n        font-weight: bold;\n      }\n      .options {\n        margin-top: 1.5rem;\n        padding: 0 17px 5px;\n        .option {\n          margin: 15px 0;\n          padding-top: 32px;\n          padding-bottom: 32px;\n          opacity: 0.6;\n          font-size: 17px;\n          font-weight: bold;\n          box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.2);\n          \u0026.active {\n            border-left-width: 5px;\n            border-left-style: solid;\n            border-image: linear-gradient(to right, #93edc7, #1cd8d2) 1 100%;\n            box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.2);\n            opacity: 0.9;\n          }\n        }\n      }\n      .submit {\n        background: #1cd8d2; /* fallback for old browsers */\n        background: linear-gradient(to right, #93edc7, #1cd8d2);\n        border-radius: 0;\n        padding-top: 35px;\n        padding-bottom: 35px;\n        margin-bottom: 0;\n        font-size: 19px;\n        font-weight: bold;\n      }\n      .response{\n        @extend .submit;\n        margin-top: 5rem;\n      }\n    }\n```\n\n\nThese styles are meant to add a bit of life to our application. It also helps distinguish between states during application use. \n\n### Home component\n\nIn the HTML snippet, we made reference to some variables that weren’t yet defined, we’ll create the variables here with the logic behind our application. \n\n``` typescript\n    // src/pages/home/home.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { NavController } from 'ionic-angular';\n    import { HttpClient } from '@angular/common/http';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html',\n    })\n    export class HomePage implements OnInit {\n      constructor(\n        public navCtrl: NavController,\n        private http: HttpClient,\n      ) {}\n      options = {\n        germany: { name: 'Germany', votes: 0 },\n        spain: { name: 'Spain', votes: 0 },\n        france: { name: 'France', votes: 0 },\n        nigeria: { name: 'Nigeria', votes: 0 },\n      };\n      optionsArray = Object.keys(this.options);\n      chartData = this.optionsArray.map((val) =\u003e this.options[val].votes);\n      selectedOption = '';\n      chartType = 'doughnut';\n      voted = false;\n      selectOption(option) {\n        this.selectedOption = this.selectedOption !== option ? option : '';\n      }\n      computeData(option) {\n        this.options = {\n          ...this.options,\n          [option]: {\n            ...this.options[option],\n            votes: ++this.options[option].votes,\n          },\n        };\n        this.chartData = this.optionsArray.map((val) =\u003e this.options[val].votes);\n      }\n      vote() {\n        if (this.selectedOption) {\n          this.http\n            .post('http://localhost:4000/vote', { option: this.selectedOption })\n            .subscribe((res) =\u003e {\n              this.voted = true;\n            });\n        }\n      }\n      ngOnInit() {\n        \n      }\n    }\n```\n\n\n\n- `vote`: this method makes use of the native HttpClient service to make requests to our server. A request is sent, only if the user has made a selection. When a response is returned the `voted` property is set to true.\n\n\n- `computeData`: when a response is returned, this function takes the `option`  and increments the votes for the selected option.  \n\n\n- `selectOption`: this method will be used to set the `selectedOption` property to the `option`  param passed it. \n\nTo make use of the HttpClient service, we’ll need to import the `HttpClientModule` into the `app.module.ts` file. Update your app module file as follows:\n\n``` typescript\n    // src/app/app.module.ts\n    \n    ...\n    import { HomePage } from '../pages/home/home';\n    import {HttpClient, HttpClientModule} from '@angular/common/http';\n    \n    @NgModule({\n      ...\n      imports: [\n        ...\n        HttpClientModule,\n      ],\n      ...\n      providers: [\n        ...\n        HttpClient\n      ]\n    })\n    export class AppModule {}\n```\n\n\nLet’s check how our application looks at this point. Make sure the server(`node server`) and Ionic dev server(`ionic serve`) are both running.\n\n![ionic-live-graph-homepage](//images.ctfassets.net/1es3ne0caaid/vW6xfrCOECykEMyOSum28/7eb2e7362cf2b6de7a182149e1503994/ionic-live-graph-homepage.png)\n\n\n## Introducing Pusher\n\nSo far we have an application that allows users be a part of the polling process but data updates aren’t happening in realtime.  Let’s create a provider that will make it easier to include Pusher in our components.\n\nWe’ll create a Pusher provider to be used application wide. The Ionic CLI can aid in the provider creation. Open a terminal in your project’s root folder and run the following command.\n\n```\n    ionic generate provider pusher\n```\n\nThis command simply tells the CLI to generate a service named `pusher`. Now open the `pusher.ts` file in the `src/providers/pusher/` directory and update it with the code below.\n\n``` typescript\n    // src/providers/pusher/pusher.ts\n    \n    import { Injectable } from '@angular/core';\n    import Pusher from 'pusher-js';\n    \n    @Injectable()\n    export class PusherProvider {\n      constructor() {\n        const pusher = new Pusher('PUSHER_KEY', {\n          cluster: 'PUSHER_CLUSTER',\n        });\n        this.channel = pusher.subscribe('vote-channel');\n      }\n      channel;\n      public init() {\n        return this.channel;\n      }\n    }\n```\n\n- First, we initialize Pusher in the constructor. \n- The  `init` method returns the Pusher property we created. \n\n\n\u003e **Note**: ensure you replace the `PUSHER_KEY` and `PUSHER_CLUSTER` string with your actual credentials.\n  \n\nTo make the service available application wide, import it into the `app.module.ts` file.\n\n``` typescript\n    // app.module.ts\n    ...\n    import {HttpClient, HttpClientModule} from '@angular/common/http';\n    import { PusherProvider } from '../providers/pusher/pusher';\n    \n    @NgModule({\n      ...\n      providers: [\n        ...\n        PusherProvider,\n      ]\n    })\n    export class AppModule {}\n```\n\nThe next step is to include the provider in the `home.ts` file. Using the `PusherProvider`, we’ll listen for `vote` events from the server and update our app in real time according to votes placed by users.\n \nOpen the `home.ts` file and update the `ngOnInit` lifecycle to listen for Pusher events.\n \n``` typescript\n    // src/pages/home/home.ts\n    ...\n    import { PusherProvider } from '../../providers/pusher/pusher';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html',\n    })\n    export class HomePage implements OnInit {\n      constructor(\n        ...\n        private pusher: PusherProvider\n      ) {}\n      ...\n      \n      ngOnInit() {\n        const channel = this.pusher.init();\n        channel.bind('new-entry', (data) =\u003e {\n          this.computeData(data.option);\n        });\n    }\n```\n\nNow our application should receive vote updates in realtime. Let’s include a chart component to visualize the data in the application.\n\n## Charts component\n\nTo visualize the data in our application, we’ll be making use of [ng2-charts](https://valor-software.com/ng2-charts/) to create charts and present the data in a graphical format. Let’s make use of the components provided by the [ng2-charts](https://valor-software.com/ng2-charts/) library. Update the `home.html` file to include the `canvas` provided by [ng2-charts](https://valor-software.com/ng2-charts/).\n\nOpen the `home.html` file and update it with the contents below:\n\n``` html\n    // src/pages/home/home.html\n    \n    ...\n    \n    \u003cion-content\u003e\n      ...\n      \u003cdiv class=\"result-area\" *ngIf=\"voted\"\u003e\n        \u003ccanvas baseChart [data]=\"chartData\" [labels]=\"optionsArray\" [chartType]=\"chartType\"\u003e\u003c/canvas\u003e\n        \u003cdiv ion-button block class=\"response\"\u003eThank you for voting!\u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/ion-content\u003e\n```\n\nTo make use of the `ng2-charts` package, we’ll have to import the `ChartsModule` into our module file.\n\nUpdate the `app.module.ts` file like so:\n\n``` typescript\n    // src/app/app.module.ts\n    ...\n    import {HttpClient, HttpClientModule} from '@angular/common/http';\n    import {ChartsModule} from 'ng2-charts';\n    \n    @NgModule({\n      ...\n      imports: [\n        ...\n        HttpClientModule,\n        ChartsModule\n      ],\n      ...\n    })\n    ...\n```\n\n At this point, your application should have realtime updates when votes are placed. Ensure that the server is running alongside the Ionic development server. If not, run `node server` and `ionic serve` in two separate terminals. Both terminals should be opened in the root folder of your project.\n  \nTo test the realtime functionality of the application, open two browsers side-by-side and engage the application. Data updates should be in realtime.\n\n\n## Testing on mobile devices\n\nTo test the application on your mobile device, download the [IonicDevApp](https://ionicframework.com/docs/pro/devapp/) on your mobile device. Make sure your computer and your mobile device are connected to the same network. When you open the IonicDevApp, you should see Ionic apps running on your network listed. \n\n\n\u003e **Note:** Both the server(`node server`), ngrok for proxying our server and the Ionic dev server(`ionic serve`) must be running to get the application working. Run the commands in separate terminal sessions if you haven’t done so already.\n\n![ionic-geofence-in-app](//images.ctfassets.net/1es3ne0caaid/4Tto6qC43SyoeuuCwWk6kC/10b2fcce68e32c25cb8da5cfe7e635ad/ionic-geofence-in-app.png)\n\nTo view the application, click on it and you should see a similar view to what was in the browser. Sending messages to the server might have worked in the browser but localhost doesn’t exist on your phone, so we’ll need to create a proxy to be able to send messages from mobile. \n\n\n## Using Ngrok as a proxy\n\nTo create a proxy for our server, we’ll download Ngrok. Visit the [download](https://ngrok.com/download) page on the Ngrok website. Download the client for your OS. Unzip it and run the following command in the folder where Ngrok can be found:\n\n```\n    ./ngrok http 4000\n```\n\n![ionic-geofence-ngrok](//images.ctfassets.net/1es3ne0caaid/5xPwNwr4DmMCA6k0MaaIqo/d569c60667d1da3659409f57b9a52da5/ionic-geofence-ngrok.png)\n\nCopy the forwarding url with `https` and place it in the `home.ts` file that previously had `http://localhost:4000/vote`. Please do not copy mine from the screenshot above. \n\n``` typescript\n    // src/pages/home/home.ts\n    ...\n    export class ChatComponent implements OnInit {\n      ...\n      vote() {\n        ...\n        this.http\n            .post('\u003cNGROK_URL\u003e/vote', data)\n            .subscribe((res) =\u003e {\n              this.voted = true;\n            });\n      }\n      ...\n    }\n    ...\n```\n\n\u003e Ensure to include the forwarding URL you copied where the placeholder string is\n\nNow you should be receiving messages sent from the phone on the browser. Preferably you can test it with two mobile devices connected to the same network.\n\n\n![ionic-live-graph-demo](//images.ctfassets.net/1es3ne0caaid/6bQMCuvpks8wsgkOWwAGgq/f7e885b2d2af1dbd1a5dbbbe711d93a3/ionic-live-graph-demo.png)\n\n\n\u003e **Note:** Both the server(`node server`), ngrok for proxying our server and the Ionic dev server(`ionic serve`) must be running to get the application working. Run the commands in separate terminal sessions if you haven’t done so already.\n\nTo build your application to deploy on either the AppStore or PlayStore, follow the instructions found [here](https://ionicframework.com/docs/pro/package/).\n\n\n## Conclusion\n\nUsing Pusher,  we’ve built out an application using the pub/sub pattern to recieve realtime updates. With the help of Chart.js, our data was well presented using charts. You can check out the repo containing the demo on [GitHub](https://github.com/HackAfro/ionic-graph-app).","metaTitle":"Build a live voting app with Ionic","metaDescription":"Use Ionic and Node to create a live voting app, similar to a Twitter poll. Users can vote for who they expect to win the World Cup."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"nlxHkriz3q26s4WyIk42u","type":"Entry","createdAt":"2018-07-02T13:15:54.987Z","updatedAt":"2018-07-06T13:40:24.782Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a live graph with Go","url":"live-graph-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/pusher-go-realtime-graph","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}}],"reviewDate":"2018-06-29","description":"Build a simple interface featuring a live graph, supported by a Go backend. The application simulates a web traffic monitoring dashboard using Chart.js and some dummy data.","prerequisite":"You will need Go 1.10+ installed on your machine. Basic knowledge of Go and JavaScript will be helpful.","content":"An astronomical number of data streams are being generated every day because data is core to diverse systems. Today’s business owners have come to recognize data as an important factor during decision making. \n\nHowever, the gathered bulk data would be confusing to read and useless without a way to visualize it. For this reason, realtime monitoring systems have gained popularity over the years. We can use such systems to visualize website traffic, weather updates, server performance and so on. \n\nIn this article, we will build a realtime monitoring graph that continuously displays updates on website traffic after a fixed interval. We will build a Go backend server that exposes several endpoints and uses Pusher Channels to trigger events on the count of user visits. We will simulate the website traffic data using a simple setInterval function and a pseudorandom number generator.\n\nOn the frontend, we will receive the simulated updates from Pusher and render the data trend using a line chart. The graph will be a plot on “user visits” against “total number of pages visited.” For context, here is a sample of what we will be building:\n\n![go-live-graph-demo](//images.ctfassets.net/1es3ne0caaid/1xM5LHTn2MYQmyO24M84WI/61af7ff9f8449a3a2c258628b99bea4a/go-live-graph-demo.gif)\n\nFrom the image above, we can see that there is a button labeled **Simulate user visits**, this button is responsible for starting the simulator on the Backend server. Let’s begin.\n\n\n## Requirements\n\nTo follow along with this article, you will need the following:\n\n\n- An editor like Visual Studio Code.\n- Go (version \u003e= 1.10.x) installed on your computer. Heres how you can install [Go.](https://golang.org/doc/install)\n- Basic knowledge of the Go programming language.\n- Basic knowledge of JavaScript (ES6).\n\nOnce you have all the above requirements, we can proceed.\n\n\n## Setting up Pusher\n\nThe first step will be to get a Pusher Channels application. We will need the application credentials for our realtime features to work.\n\nGo to the [Pusher website](https://pusher.com) and create an account. After creating an account, you should create a new application. Follow the application creation wizard and then you should be given your application credentials, we will use this later in the article.\n\n![ember-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/1QiXDu6gpy0CKQCosqgcgE/1ffc23a7859704465b1a9357c07151b5/ember-pusher-app-keys.png)\n\n\n## Setting up the codebase\n\nLet’s begin by navigating into the `src` directory that is located in the `$GOPATH` and creating a new directory for our app. This will be our working directory:\n\n```\n    $ cd $GOPATH/src\n    $ mkdir pusher-go-realtime-graph\n    $ cd pusher-go-realtime-graph\n```\n\nCreate a new file called `graph.go`. Now, before adding content to this file, we need to install the Go packages that we will be referencing within our application. \n\nRun the following packages to pull in the packages:\n\n```\n    $ go get github.com/labstack/echo\n    $ go get github.com/labstack/echo/middleware\n    $ go get github.com/pusher/pusher-http-go\n```\n\n\u003e ⚠️  If you use Windows and you encounter the error ‘cc.exe: sorry, unimplemented: 64-bit mode not compiled in ‘, then you need a Windows gcc port, such as https://sourceforge.net/projects/mingw-w64/. Also, see this [GitHub issue](https://github.com/golang/go/issues/3441).\n\nWithin your favorite editor, open the `graph.go` file and update it with the following code:\n\n``` go\n    package main\n    \n    import (\n        \"math/rand\"\n        \"net/http\"\n        \"time\"\n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/middleware\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    // We register the Pusher client\n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n    \n    // visitsData is a struct\n    type visitsData struct {\n        Pages   int\n        Count int\n    }\n    \n    func main() {\n        // Echo instance\n        e := echo.New()\n        \n        // Middleware\n        e.Use(middleware.Logger())\n        e.Use(middleware.Recover())\n        \n        // Define the HTTP routes\n        e.File(\"/\", \"public/index.html\")\n        e.File(\"/style.css\", \"public/style.css\")\n        e.File(\"/app.js\", \"public/app.js\")\n        e.GET(\"/simulate\", simulate)\n        \n        // Start server\n        e.Logger.Fatal(e.Start(\":9000\"))\n    }\n```\n\nThe `graph.go` file is the main entry point of our backend server so this is where we import all the packages we previously pulled in. We import the `time` package because we will need it to create a new ticker for our custom `setInterval` function. We import the `math/rand` package because it provides the [pseudorandom number generation.](http://en.wikipedia.org/wiki/Pseudorandom_number_generator)\n\nNext, registered a new Pusher client with the credentials from the app we created earlier.\n\n\n\u003e  ⚠️  Replace `PUSHER_*`  keys with your app credentials.\n\nWe also created a `visitsData` type, which is a struct with two fields:\n\n\n- `Pages` - this is the number of pages visited at a given time\n- `Count` - this is the user count at a given time\n\nWe defined the main function (this is where the application starts its execution) and created a new echo instance.\n\nIn this application, because we will serve the static files that define our frontend from the backend server, we need to let Go know about them and their location. In the main function, we registered the routes that will serve these static files that we will create shortly.\n\nWe also defined a “/simulate” route that takes a `simulate` handler function and responds to the `GET` HTTP verb. Lastly, we instruct the echo instance we created to start the application and listen on the port 9000.\n\nLet’s create the `simulate` function, before the start of the main function paste the following code:\n\n``` go\n    // [...]\n    \n    // -------------------------------------------------------\n    // Simulate multiple changes to the visitor count value,\n    // this way the chart will always update with different\n    // values.\n    // -------------------------------------------------------\n    \n    func simulate(c echo.Context) error {\n        setInterval(func() {\n            s1 := rand.NewSource(time.Now().UnixNano())\n            r1 := rand.New(s1)\n            newVisitsData := visitsData{\n                Pages:   r1.Intn(100),\n                Count: r1.Intn(100),\n            }\n            client.Trigger(\"visitorsCount\", \"addNumber\", newVisitsData)\n        }, 2500, true)\n        \n        return c.String(http.StatusOK, \"Simulation begun\")\n    }\n    \n    // [...]\n```\n\nWithin the `simulate` function, we called a `setInterval` function and within it we seeded a new random number using the `time.Now()` function. We also instantiated a new `visitsData` object with the name `newVisitsData` and initialized both the `Pages` and `Count` fields using randomly generated numbers. We set the interval between running the logic to 2500ms.\n\nLastly, we use the `Trigger` method on the client object to broadcast an `addNumber` event over the `visitorsCount` channel.\n\nLet’s create the `setInterval` function before the `simulate` function paste the following code:\n\n``` go\n    func setInterval(ourFunc func(), milliseconds int, async bool) chan bool {\n    \n        // How often to fire the passed in function in milliseconds\n        interval := time.Duration(milliseconds) * time.Millisecond\n        \n        // Setup the ticker and the channel to signal\n        // the ending of the interval\n        ticker := time.NewTicker(interval)\n        clear := make(chan bool)\n        \n        // Put the selection in a go routine so that the for loop is none blocking\n        go func() {\n            for {\n                select {\n                case \u003c-ticker.C:\n                    if async {\n                        // This won't block\n                        go ourFunc()\n                    } else {\n                        // This will block\n                        ourFunc()\n                    }\n                case \u003c-clear:\n                    ticker.Stop()\n                    return\n                }\n            }\n        }()\n        \n        // We return the channel so we can pass in\n        // a value to it to clear the interval\n        return clear\n    }\n```\n\nUsing [Goroutines](https://golangbot.com/goroutines/) and Channels, we have created a `setInterval` function that works like the one in JavaScript. For its parameters, it receives the function to be called after an interval, the interval and a boolean value that determines if it runs asynchronously or not.\n\n\n## Building the frontend\n\nIn this step, we will use the received data from the backend server to represent a mathematical graph. To achieve this, we can use any of the open source libraries that support chart types, such as bar charts, pie charts, line charts and scatter charts. Here are links to a few of the popular libraries:\n\n\n- [Highcharts](http://www.highcharts.com/)\n- [Chart.js](http://www.chartjs.org/) \n- [Google Charts](https://developers.google.com/chart/)\n- [Flot](http://www.flotcharts.org/) \n- [D3 JS](http://d3js.org/) \n\nIn this tutorial, we will use Chart.js; it has a fairly simple API and renders robust charts using the HTML canvas tag. It is also able to update the chart without completely re-rendering it and this is what we need since we will be rendering Pusher updates.\n\nTo start building the frontend of our application, we will create a `public` folder in our working directory and create three files within it: \n\n```\n    $ mkdir public\n    $ cd public\n    $ touch index.html style.css app.js\n```\n\nOpen the `index.html` file and update it with the following code:\n\n``` html\n    \u003c!DOCTYPE\u003e\n    \u003chtml\u003e\n      \u003chead\u003e\n          \u003ctitle\u003eRealtime User Analytics\u003c/title\u003e\n          \u003clink rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Raleway:200\"\u003e\n          \u003clink rel=\"stylesheet\" href=\"./style.css\"\u003e\n          \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e\n          \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n      \u003c/head\u003e\n    \n      \u003cbody\u003e\n      \n          \u003csection class=\"subheader\"\u003e\n              \u003ch2\u003eRealtime User Traffic Analytics\u003c/h2\u003e\n              \u003cbutton id=\"getUpdates\" class=\"btn-primary\"\u003e Simulate user visits\u003c/button\u003e\n          \u003c/section\u003e\n          \n          \u003csection width=\"500px\" style=\"margin:0 auto;width: 100%;max-width: 800px\"\u003e    \n              \u003ccanvas id=\"realtimeChart\"\u003e\u003c/canvas\u003e\n          \u003c/section\u003e\n          \n          \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.bundle.min.js\"\u003e\u003c/script\u003e\n          \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n          \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e\n          \u003cscript type=\"text/javascript\" src=\"./app.js\"\u003e\u003c/script\u003e\n          \n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the scripts part of the markup above, we pulled in the JavaScript Pusher library, [Axios](https://www.npmjs.com/package/axios), and Chart.js.\n\nIn order to style our app properly, add the following CSS into the `style.css` file the public folder:\n\n``` css\n    body{\n        margin:0;\n        padding:0;\n        font-family: Raleway;\n    }\n    \n    header{\n        background: #2b303b;\n        height: 50px;\n        width:100%;\n        display: flex;\n        color:#fff;\n    }\n    \n    .subheader{\n        margin: 20px;\n        text-align: center;\n    }\n```\n\n## Displaying realtime graph updates using Pusher\n\nIn this section, we will write the vanilla JavaScript code that will receive updates from Pusher and update the graph accordingly. We will achieve this behavior by subscribing to the unique channel where our server will be sending update events for the graph. The name of this channel is `visitorsCount` and the event we will be binding to is called `addNumber`.\n\nBecause we want to control when the realtime updates start, we will use JavaScript to target the button element — simulate user visits —  in the markup and attach an `eventListener`, so that the updates only start coming in when we click the button. When the button is clicked, our frontend will make a `GET` request, using Axios, to the “/simulate” endpoint on our backend server and the realtime updates will start.\n\nWe will also instantiate a new line chart object passed in a `chartConfig` object as an argument, this `chartConfig` object will supply the data that will define the line chart’s properties.\n\nOpen the `app.js` file and update it with the following code:\n\n``` javascript\n    document.getElementById(\"getUpdates\").addEventListener(\"click\", function(){\n        axios.get('/simulate')\n    })\n    \n    const pusher = new Pusher('PUSHER_APP_KEY', {\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    \n    const channel = pusher.subscribe('visitorsCount');\n    \n    channel.bind('addNumber', data =\u003e {\n      if (newLineChart.data.labels.length \u003e 15) {\n        newLineChart.data.labels.shift();  \n        newLineChart.data.datasets[0].data.shift();\n      }\n    \n      newLineChart.data.labels.push(data.Count);\n      newLineChart.data.datasets[0].data.push(data.Pages);\n      newLineChart.update();\n    });\n    \n    function renderChart(userVisitsData) {\n      var ctx = document.getElementById(\"realtimeChart\").getContext(\"2d\");\n      \n      var options = {};\n      \n      newLineChart = new Chart(ctx, {\n        type: \"line\",\n        data: userVisitsData,\n        options: options\n      });\n    }\n    \n    var chartConfig = {\n      labels: [],\n      datasets: [\n         {\n            label: \"Realtime User Analytics\",\n            fill: false,\n            lineTension: 0.1,\n            backgroundColor: \"rgba(75,192,192,0.4)\",\n            borderColor: \"rgba(75,192,192,1)\",\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: \"rgba(75,192,192,1)\",\n            pointBackgroundColor: \"#fff\",\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n            pointHoverBorderColor: \"rgba(220,220,220,1)\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: [],\n            spanGaps: false,\n         }\n      ]\n    };\n    \n    renderChart(chartConfig)\n```\n\n\u003e  ⚠️  Replace `PUSHER_APP_*`  keys with your app credentials.\n\n\n## Running the application\n\nWe can run our application with this command:\n\n```\n    $ go run graph.go\n```\n\nWe can now point our web browser to this address http://localhost:9000, at first, the graph in the window will be static but after we click on the **Simulate users visit** button, we will see this the realtime updates:\n\n![go-live-graph-demo](//images.ctfassets.net/1es3ne0caaid/1xM5LHTn2MYQmyO24M84WI/61af7ff9f8449a3a2c258628b99bea4a/go-live-graph-demo.gif)\n\n## Conclusion\n\nIn this article, we have discussed the importance of data in today’s tech world and gone over the process of building a realtime monitoring system using Go and Pusher channels. In addition to that, we used Vanilla JavaScript to build the frontend of our application and hit an endpoint on our Go web server using Axios.\n\nThe source code to the application is available on [GitHub](https://github.com/neoighodaro/pusher-go-realtime-graph).","metaTitle":"Create a live graph with Go","metaDescription":"Use Go and JavaScript to create a simple live graph. The graph updates in realtime as it receives new data."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1P2VLZvdti8Ue4Y0s0guW2","type":"Entry","createdAt":"2018-06-27T11:32:29.609Z","updatedAt":"2018-06-27T11:32:29.609Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live graph with Ember.js","url":"live-graph-emberjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/yemiwebby/ember-realtime-graph","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"oh5mPeR5cGqMImEyKoWwQ","type":"Entry","createdAt":"2018-02-12T14:46:47.672Z","updatedAt":"2018-02-12T14:46:47.672Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ember.js","url":"ember-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}}],"reviewDate":"2018-06-26","description":"Build a live interactive graph using Ember.js and Node.js. Users will be able to view the graph, watch it update in realtime as new data comes in, and interact with it to obtain additional information about the data.","prerequisite":"You will need Node and npm installed on your machine.","content":"## Introduction\n\nIn this post, we will build a simple interactive graph with Ember.js. With this, a user can have a better understanding of the data by hovering on a point and seeing more information using the hovering facility as depicted in the image below:\n\n![ember-interactive-graph-demo](//images.ctfassets.net/1es3ne0caaid/5K6ya96hMsUIUggimwe4WE/648c2640e62e765e5f595c8669071839/ember-interactive-graph-demo.gif)\n\n\n## Prerequisites\n\nIt is important that you have [Node.js](https://nodejs.org/en/) and [npm](https://www.npmjs.com/) installed on your machine. [Learn how to install Node.js and npm here](https://docs.npmjs.com/getting-started/installing-node). A quick run-down of the core technologies we will be using include:\n\n\n- [Ember.js](https://www.emberjs.com/): an open source JavaScript web framework for creating scalable single-page web applications.\n- [Pusher](https://pusher.com/): a [Node.js](http://nodejs.org/) client to interact with the Pusher REST API.\n- [Express](https://expressjs.com/): Node utility for handling HTTP requests via routes.\n\n\n## Getting started\n\nTo get started with an Ember application, it is recommended to use Ember CLI tool as this will enable you to conveniently craft a new app with a single command. You can install it with npm, open your terminal and type this command:\n\n```\n     npm install -g ember-cli\n```\n\nThe [Ember CLI](https://github.com/ember-cli/ember-cli) will give us access to the `ember` command that will be used to set up our project easily.\n\n\n## Creating the application\n\nWe now have access to the `ember new` command that can be used to create our application. Open up the terminal on your machine and run a command that will create an application named `ember-realtime-graph` in your project directory:\n\n```\n     ember new ember-realtime-graph\n```\n\nNext, change directory into the newly created project and start the development server:\n\n```\n     // change directory\n     cd ember-realtime-graph\n     \n     // start the development server\n     ember serve\n```\n\n\nThis will start the development server on http://localhost:4200. Open your favorite browser and navigate to that URL, you should see a default welcome page by Ember.js as shown below:\n\n![ember-start-page](//images.ctfassets.net/1es3ne0caaid/2Z3q7KbdrOEWGs8McO8gyC/86f812aacd929bbcd81e6a45873f91b6/ember-start-page.png)\n\n## Install server dependencies\n\nRun the following command to install the dependencies required for this project using:\n\n```\n    npm install --save pusher pusher-js chart.js\n    npm install --save dotenv express \n    ember install ember-browserify\n```\n\n## Setting up a Pusher application\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). \n\n![ember-pusher-signup](//images.ctfassets.net/1es3ne0caaid/2NeDEhMbuwYsECuqGyWCUE/646d9e28c3c1ecc1517361035836a8ec/ember-pusher-signup.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![ember-pusher-create-app](//images.ctfassets.net/1es3ne0caaid/5YHrOKL5AIQk6E2OiCIeMW/473f43255c5a820f1523387487884757/ember-pusher-create-app.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with to be provided with some boilerplate code:\n\n![ember-pusher-config-app](//images.ctfassets.net/1es3ne0caaid/38gUNRKzT2UuEcQIq2GgS6/d7ef41d5c3f3afb724373fd976caef4c/ember-pusher-config-app.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![ember-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/1QiXDu6gpy0CKQCosqgcgE/1ffc23a7859704465b1a9357c07151b5/ember-pusher-app-keys.png)\n\n\n## Setting the environment variables\n\nCreate a `.env` file in the root directory of your application and add your application credentials as obtained from your Pusher dashboard as follows:\n\n```\n      PUSHER_APP_ID=YOUR_APP_ID\n      PUSHER_APP_KEY=YOUR_APP_KEY\n      PUSHER_APP_SECRET=YOUR_APP_SECRET_KEY\n      PUSHER_APP_CLUSTER=CLUSTER\n```\n\nWe will make use of the variables specified in the above snippet later in our project. Ensure that you replace `YOUR_APP_ID`, `YOUR_APP_KEY`, `YOUR_APP_SECRET_KEY` and `CLUSTER` placeholders with the appropriate credentials.\n\n\n## Setting up the server\n\nTo properly demonstrate realtime update of our graph, we’ll make use of an existing dummy data of stock trades and price variations. For our Ember application to keep receiving this data at a specified regular interval, let’s quickly set up a simple server. \n\nCreate an `app.js`  file in the root directory of your application and add the following code snippet to it to set up the server:\n\n````javascript\n    // app.js\n    \n      const express = require('express');\n      const Pusher = require('pusher');\n      require('dotenv').config();\n      const stockData = require('./stock.json')\n        \n      const app = express();\n        \n      const pusher = new Pusher({\n        appId: process.env.PUSHER_APP_ID,\n        key: process.env.PUSHER_APP_KEY,\n        secret: process.env.PUSHER_APP_SECRET,\n        cluster: process.env.PUSHER_APP_CLUSTER,\n        encrypted: true\n      });\n      \n      let i = 0;\n      setInterval( () =\u003e {\n        const GOOG = stockData[1]['Trades'][i];\n        pusher.trigger('trade', 'stock', GOOG)\n        i++\n      }, 2000);\n      \n      app.set('port', process.env.PORT || 3000);\n      app.listen(app.get('port'), () =\u003e {\n        console.log(\"Listening on port \" + app.get('port'));\n      })\n```\n\nWe loaded the required middlewares for the Express server and then imported dummy data for stock trades. You can download this data [here](https://github.com/yemiwebby/ember-realtime-graph/blob/master/stock.json). Once you are done, create a new file named `stock.json` in the root directory of the application and save the downloaded content in it.\n\nNext, we configured Pusher using the credentials we added to our environment variables earlier. And finally, to allow our client receive realtime payloads, we emitted the `stockData` payload on every 2 seconds for our client to subscribe to.\n\nOpen another terminal and run the command below to start the server on http://localhost:3000:\n\n```\n    node app.js\n```\n\nThis will log a message to the console as shown by the image below:\n\n![ember-realtime-graph-server](//images.ctfassets.net/1es3ne0caaid/5YZBY3LYSAMSkiqkEAiS8G/7a360584de801669039b57b7e38b33e3/ember-realtime-graph-server.png)\n\n## Generate the chart component\n\nEmber supports the usage and sharing of UI elements on multiple pages. So, we’ll use the component approach and generate one for our application.\n\nRun the command below: \n\n```\n    ember generate component realtime-graph\n```\n\nThe command above will generate a JavaScript component file `./app/components/realtime-graph.js` and a Handlebars template that defines the markup for the component’s UI.\n\n\n## Initialize the chart\n\nNext, we’ll initialize the chart to display the stock data to users in realtime. Open the newly generated `./app/components/realtime-graph.js` and update it with:\n\n``` javascript\n    // ./app/components/realtime-graph.js\n    \n      import Component from '@ember/component';\n      import Pusher from 'npm:pusher-js';\n      import Chart from 'npm:chart.js';\n      \n      export default Component.extend({\n        init() {\n          this._super(...arguments);\n          \n          var chart;\n          initializeChart();\n          \n          function initializeChart() {\n            var ctx = document.getElementById('chart').getContext('2d');\n            const data = {\n              labels: [],\n              datasets: [{\n                  label: \"My First dataset\",\n                  backgroundColor: 'rgb(255, 99, 132)',\n                  borderColor: 'rgb(255, 99, 132)',\n                  fill: false,\n                  data: [],\n              }]\n            };\n            chart = new Chart(ctx, {\n              type: 'line',\n              data: data,\n              options: {\n                responsive: true,\n                title: {\n                  display: true,\n                  text: 'Chart.js Line Chart'\n                },\n                tooltips: {\n                  mode: 'index',\n                  intersect: false\n                },\n                hover: {\n                  mode: 'nearest',\n                  intersect: true\n                },\n                scales: {\n                  xAxes: [\n                    {\n                      display: true,\n                      scaleLabel: {\n                        display: true,\n                        labelString: 'Time  '\n                      }\n                    }\n                  ],\n                  yAxes: [\n                    {\n                      display: true,\n                      scaleLabel: {\n                        display: true,\n                        labelString: 'Price'\n                      },\n                      ticks: {\n                        min: 504,\n                        max: 507\n                    }\n                    }\n                  ]\n                }\n              }\n            })\n          }\n          // we will update the chart here\n        }\n      });\n```    \n\nThe essence of what we executed here is to initialize the chart with a method named `intializeChart()`. We used it to define a chart and described the kind of data that it should expect, the label, including the colors. We’ll update it with data later in the tutorial.\n \n\n## Update the app template\n\nUpdate the application template to get rid of the default welcome page and show our chart in its place. Open the `./app/templates/application.hbs` file and paste the code below in it:\n\n``` html\n    {{!-- ./app/templates/application.hbs --}}\n    \n       \u003ccanvas id=\"chart\"\u003e\u003c/canvas\u003e\n      {{#realtime-graph}}{{/realtime-graph}}\n      {{outlet}}\n```\n\nNow if you stop the Ember development server by typing `Ctrl + c` in the terminal and restart it with `ember serve`, you will see a blank graph as shown in the image below:\n\n![ember-realtime-graph-homepage](//images.ctfassets.net/1es3ne0caaid/27hId3SqJm4mqiCyg6gi0e/21a3d9ed8aadc967ea85734594c04b14/ember-realtime-graph-homepage.png)\n\nThis is because we have not started updating our graph with the data sent in from the server. We’ll change that in the next section.\n\n\n## Update the chart\n\nOur graph requires constant data from the server in order to be displayed. Open `./app/components/realtime-graph.js` and add the code below immediately after the `initializeChart()`  method:\n\n``` javascript\n    // ./app/components/realtime-graph.js\n    \n      import Component from '@ember/component';\n      import Pusher from 'npm:pusher-js';\n      export default Component.extend({\n      \n        init() {\n         ...\n                \n            const pusher = new Pusher('YOUR_APP_KEY', { // update your APP_KEY\n              cluster: 'CLUSTER',\n              encrypted: true\n            })\n            \n            const channel = pusher.subscribe('trade');\n            channel.bind('stock', data =\u003e {\n            chart.data.labels.push(data.Timestamp.split(' ')[1].split('.')[0]);\n            chart.data.datasets[0].data.push(data.Price);\n            chart.update();\n            })\n        }\n      });\n```    \n\nHere, we initialized Pusher and subscribed to the `trade` channel in order to update the chart every single time data comes in from the server. Do not forget to replace the `YOUR_APP_KEY` and `CLUSTER` placeholder with the appropriate credentials.\n\n\n## Testing the application\n\nStop the Ember development server if it is currently running by typing `Ctrl + C`  in the terminal and restart it with `ember serve`. In addition, don’t forget to also run `node app.js` from another terminal to start the server in case you haven’t done that. Next, open http://localhost:4200 to test the application.\n\n![ember-realtime-graph-final-homepage](//images.ctfassets.net/1es3ne0caaid/6u3iPDalHOGIwWEKqcsymA/5a67085df6e34216f492acf7d09ff2b1/ember-realtime-graph-final-homepage.png)\n\n## Conclusion\n\nInteractivity becomes more powerful when you allow users to select points or series in a chart and have a summary of the relevant data appears for them to see. This helps to improve clean looking visualizations of data on a chart. You can easily build similar applications by using any charting tool of your choice.\n\nThe complete source code can be found on [GitHub](https://github.com/yemiwebby/ember-realtime-graph).","metaTitle":"Build a live graph with Ember.js","metaDescription":"Use Ember.js and Node.js to create an interactive realtime graph. Users will be able to view the graph, watch it update in realtime as new data comes in, and interact with it to obtain additional information about the data."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6BwM9O7lhCQWKSg4eCw6ym","type":"Entry","createdAt":"2018-06-27T11:31:30.790Z","updatedAt":"2020-06-19T12:41:52.435Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live polling web app with Python","url":"live-poll-python","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/python-realtime-poll-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N8l3o0yD6QK2ooI2ME8wW","type":"Entry","createdAt":"2018-02-12T15:09:06.190Z","updatedAt":"2018-02-26T12:31:10.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Polls","url":"live-polls","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}}],"reviewDate":"2018-06-26","description":"Build a live voting application using Flask. Users will be able to vote for their favorite programming language. Results will appear in an admin dashboard and be displayed on a live graph.","prerequisite":"You will need Python 3+ installed on your machine. A basic knowledge of Python and JavaScript will be helpful.","content":"In this article, we will build a voting poll application that keeps track of each vote in a poll and broadcasts recent updates to all subscribed clients. We will be broadcasting the updates in realtime using Pusher and this will ensure that every connected user knows when a new vote has been made. There will also be an admin section that displays a [chart](https://canvasjs.com/). This chart will update in realtime and show voting statistics.\n\nHere is what the final application will look like:\n\n![python-realtime-poll-demo](//images.ctfassets.net/1es3ne0caaid/1hgCPLcEbyUOUcuYOiI4Q8/745fb422b6dfa795a19a1158cf6c4162/python-realtime-poll-demo.gif)\n\nThe top-left screen shows a browser window that loads the voting application and sends realtime updates. To show that these updates are propagated across every other connected client, we can see that the bottom-left screen also updates as a vote is cast on the former screen. Finally, the admin screen by the right displays the chart and delivers realtime voting statistics. There is also a database that stores the status of votes of each poll member.\n\nWe will build the backend server for this application using a Python framework called [Flask.](http://flask.pocoo.org/) We will use this framework to develop a simple backend API that can respond to the requests we will be sending from our JavaScript frontend.\n\n## Prerequisites\n\nTo follow along with this tutorial, a basic knowledge of Python, Flask, and JavaScript (ES6 syntax) is required. You will also need the following installed:\n\n\n1. [Python (\u003e= v3.x)](https://www.python.org/)\n2. [virtualenv](https://virtualenv.pypa.io/en/stable/)\n3. [Flask](http://flask.pocoo.org/)\n\nVirtualenv is great for creating isolated Python environments, so we can install dependencies in an isolated environment, and not pollute our global packages directory.\n\nLet’s install `virtualenv` with this command:\n\n```\n    $ pip install virtualenv\n```\n\n## Setting up the app environment\n\nLet’s create our project folder, and activate a virtual environment in it. Run the commands below:\n\n```\n    $ mkdir python-poll-pusher\n    $ cd python-poll-pusher\n    $ virtualenv .venv\n    $ source .venv/bin/activate # Linux based systems\n    $ \\path\\to\\env\\Scripts\\activate # Windows users\n```\n\nNow that we have the virtual environment setup, we can install Flask within it with this command:\n\n```\n    $ pip install flask\n```\n\nLet’s install two more packages that will ensure that the application works correctly:\n\n```\n    $ pip install -U flask-cors\n    $ pip install simplejson\n```\n\nBefore we do anything else, we need to install the Pusher library as we will need that for realtime updates.\n\n\n## Setting up Pusher\n\nThe first step will be to get a Pusher Channels application. We will need the application credentials for our realtime features to work.\n\nGo to the [Pusher website](https://pusher.com) and create an account. After creating an account, you should create a new application. Follow the application creation wizard and then you should be given your application credentials, we will use this later in the article.\n\n![python-realtime-poll-keys](//images.ctfassets.net/1es3ne0caaid/752Tb8m156CeqWw2q6eKyS/2a61be62a4ff148b8fe9e7c60a94a5db/python-realtime-poll-keys.png)\n\nWe also need to install the Pusher Python Library to send events to Pusher. Install this using the command below:\n\n```\n    $ pip install pusher\n```\n\n## File and folder structure\n\nWe don’t need to create so many files and folders for this application since it’s a simple one. Here’s the file/folder structure:\n\n```\n    ├── python-poll-pusher\n           ├── app.py\n           ├── dbsetup.py\n           ├── static\n           └── templates\n```\n\nThe `static` folder will contain the static files to be used as is defined by [Flask standards](http://flask.pocoo.org/docs/0.12/tutorial/folders/). The `templates` folder will contain the HTML templates. In our application, `app.py` is the main entry point and will contain our server-side code. To keep things modular, we will write all the code that we need to interact with the database in `dbsetup.py`.\n\nCreate the `app.py` and `dbsetup.py` files, and then the `static` and `templates` folders.\n\n\n## Building the backend\n\nIn the `dbsetup.py` file, we will write all the code that is needed for creating a database and interacting with it. Open the `dbsetup.py` file and paste the following:\n\n``` python\n    import sqlite3, json\n    from sqlite3 import Error\n    \n    def create_connection(database):\n        try:\n            conn = sqlite3.connect(database, isolation_level=None, check_same_thread = False)\n            conn.row_factory = lambda c, r: dict(zip([col[0] for col in c.description], r))\n    \n            return conn\n        except Error as e:\n            print(e)\n    \n    def create_table(c):\n        sql = \"\"\" \n            CREATE TABLE IF NOT EXISTS items (\n                id integer PRIMARY KEY,\n                name varchar(225) NOT NULL,\n                votes integer NOT NULL Default 0\n            ); \n        \"\"\"\n        c.execute(sql)\n    \n    def create_item(c, item):\n        sql = ''' INSERT INTO items(name)\n                  VALUES (?) '''\n        c.execute(sql, item)\n    \n    def update_item(c, item):\n        sql = ''' UPDATE items\n                  SET votes = votes+1 \n                  WHERE name = ? '''\n        c.execute(sql, item)\n    \n    def select_all_items(c, name):\n        sql = ''' SELECT * FROM items '''\n        c.execute(sql)\n    \n        rows = c.fetchall()\n        rows.append({'name' : name})\n        return json.dumps(rows)\n    \n    def main():\n        database = \"./pythonsqlite.db\"\n        conn = create_connection(database)\n        create_table(conn)\n        create_item(conn, [\"Go\"])\n        create_item(conn, [\"Python\"])\n        create_item(conn, [\"PHP\"])\n        create_item(conn, [\"Ruby\"])\n        print(\"Connection established!\")\n    \n    if __name__ == '__main__':\n        main()\n```\n\nNext, run the `dbsetup.py` file so that it creates a new SQLite database for us. We can run it with this command:\n\n```\n    $ python dbsetup.py\n```\n\nWe should see this text logged to the terminal — ‘Connection established!’ — and there should be a new file — `pythonsqlite.db` — added to the project’s root directory.\n\nNext, let’s open up the `app.py` file and start writing the backend code that will handle incoming requests. Here, we are going to register three routes: the first two will handle the `GET` requests that return the home and admin pages respectively. The last route will handle the `POST` requests that attempt to update the status of a particular vote member, both on the user’s page and on the admin’s page. \n\nIn this file, we will instantiate a fresh instance of Pusher and use it to broadcast data through a channel that we will shortly define within the application. We will also import some of the database handling methods we defined in `dbsetup.py` so that we can use them here.\n\nOpen the `app.py`  file and paste the following code:\n\n``` python\n    from flask import Flask, render_template, request, jsonify, make_response\n    from dbsetup import create_connection, select_all_items, update_item\n    from flask_cors import CORS, cross_origin\n    from pusher import Pusher\n    import simplejson\n    \n    app = Flask(__name__)\n    cors = CORS(app)\n    app.config['CORS_HEADERS'] = 'Content-Type'\n    \n    # configure pusher object\n    pusher = Pusher(\n    app_id='PUSHER_APP_ID',\n    key='PUSHER_APP_KEY',\n    secret='PUSHER_APP_SECRET',\n    cluster='PUSHER_APP_CLUSTER',\n    ssl=True)\n    \n    database = \"./pythonsqlite.db\"\n    conn = create_connection(database)\n    c = conn.cursor()\n    \n    def main():\n        global conn, c\n    \n    @app.route('/')\n    def index():\n        return render_template('index.html')\n    \n    @app.route('/admin')\n    def admin():\n        return render_template('admin.html')\n    \n    @app.route('/vote', methods=['POST'])\n    def vote():\n        data = simplejson.loads(request.data)\n        update_item(c, [data['member']])\n        output = select_all_items(c, [data['member']])\n        pusher.trigger(u'poll', u'vote', output)\n        return request.data\n    \n    if __name__ == '__main__':\n        main()\n        app.run(debug=True)\n```\n\nFirst, we imported the required modules and objects, then we initialized a Flask app. Next, we ensured that the backend server can receive requests from a client on another computer, then we initialized and configured Pusher. We also registered some routes and defined the functions that will handle them.\n\n\n\u003e Replace the `PUSHER_APP_*`  keys with the values on your Pusher dashboard.\n\nWith the `pusher` object instantiated, we can trigger events on whatever channels we define.\nIn the `/vote` route, we trigger a ‘vote’ event on the ‘poll’ channel. The trigger method has the following syntax:\n\n```\n    pusher.trigger(\"a_channel\", \"an_event\", {key: \"data to pass with event\"})\n```\n\nYou can find the docs for the Pusher Python library [here](https://github.com/pusher/pusher-http-python), to get more information on configuring and using Pusher in Python.\n\nThe first two routes we defined will return our application’s view by rendering the `index.html` and `admin.html` templates. However, we are yet to create these files so there is nothing to render, let’s create the app view in the next step and start using the frontend to communicate with our Python backend API.\n\n\n## Setting up the app view\n\nWe need to create two files in the `templates` directory. These files will be named `index.html` and `admin.html`, this is where the view for our code will live. The `index` page will render the view that displays the voting page for users to interact with while the `admin` page will display the chart that will update in realtime when a new vote is cast.\n\nIn the `./templates/index.html` file, you can paste this code:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"utf-8\"\u003e\n      \u003ctitle\u003ePython Poll\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\"\u003e\n      \u003cstyle type=\"text/css\"\u003e\n        .poll-member h1 {\n          cursor: pointer\n        }\n        .percentageBarParent{\n          height: 22px;\n          width: 100%;\n          border: 1px solid black;\n        }\n        .percentageBar {\n          height: 20px;\n          width: 0%;\n        }\n      \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003cdiv class=\"main\"\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003ch1\u003eWhat's your preferred language?\u003c/h1\u003e\n          \u003cdiv class=\"col-md-12\"\u003e\n            \u003cdiv class=\"row\"\u003e\n              \u003cdiv class=\"col-md-6\"\u003e\n                \u003cdiv class=\"poll-member Go\"\u003e\n                  \u003ch1\u003eGo\u0026nbsp;\u0026nbsp;\u003c/h1\u003e\n                  \u003cdiv class=\"percentageBarParent\"\u003e\n                  \u003cdiv class=\"percentageBar\" id=\"Go\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"col-md-6\"\u003e\n                \u003cdiv class=\"poll-member \"\u003e\n                  \u003ch1\u003ePython\u0026nbsp;\u0026nbsp;\u003c/h1\u003e \n                  \u003cdiv class=\"percentageBarParent\"\u003e\n                  \u003cdiv class=\"percentageBar\" id=\"Python\"\u003e\u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"row\"\u003e\n              \u003cdiv class=\"col-md-6\"\u003e\n                \u003cdiv class=\"poll-member PHP\"\u003e\n                  \u003ch1\u003ePHP\u0026nbsp;\u0026nbsp;\u003c/h1\u003e \n                  \u003cdiv class=\"percentageBarParent\"\u003e\n                  \u003cdiv class=\"percentageBar\" id=\"PHP\"\u003e\u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"col-md-6\"\u003e\n                \u003cdiv class=\"poll-member Ruby\"\u003e\n                  \u003ch1\u003eRuby\u0026nbsp;\u0026nbsp;\u003c/h1\u003e \n                  \u003cdiv class=\"percentageBarParent\"\u003e\n                  \u003cdiv class=\"percentageBar\" id=\"Ruby\"\u003e\u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \n      \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.2/axios.js\"\u003e\u003c/script\u003e\n      \u003cscript type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\"\u003e\u003c/script\u003e\n        \u003cscript type=\"text/javascript\" src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript type=\"text/javascript\" src=\"{{ url_for('static', filename='app.js') }}\" defer\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNext, let’s copy and paste in this code into the `./templates/admin.html` file:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"utf-8\"\u003e\n      \u003ctitle\u003ePython Poll Admin\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \n      \u003cdiv class=\"main\"\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003ch1\u003eChart\u003c/h1\u003e\n          \u003cdiv id=\"chartContainer\" style=\"height: 300px; width: 100%;\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \n      \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/canvasjs/1.7.0/canvasjs.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"{{ url_for('static', filename='admin.js') }}\" defer\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThat’s all for the `index.html` and `admin.html` files, we have described how they should be rendered on the DOM but our application lacks all forms of interactivity. \n\nIn the next section, we will write the scripts that will send the `POST` requests to our Python backend server.\n\n## Communicating with the backend\n\nCreate two more files in the `static` folder, one for the `index` page and the other for the `admin` page. These files are the scripts that will define how our application interacts with click events, communicates with the backend server for realtime updates and display a progress bar.\n\nLet’s create the following files in the `static` folder:\n\n\n- app.js\n- admin.js\n\nIn the `./static/app.js` file, we can paste the following:\n\n``` javascript\n    var pollMembers = document.querySelectorAll('.poll-member')\n    \n    var members = ['Go', 'Python', 'PHP', 'Ruby']\n    \n    // Sets up click events for all the cards on the DOM\n    pollMembers.forEach((pollMember, index) =\u003e {\n      pollMember.addEventListener('click', (event) =\u003e {\n        handlePoll(members[index])\n      }, true)\n    })\n    \n    // Sends a POST request to the server using axios\n    var handlePoll = function(member) {\n      axios.post('http://localhost:5000/vote', {member}).then((r) =\u003e console.log(r))\n    }\n    \n    // Configure Pusher instance\n    const pusher = new Pusher('PUSHER_APP_KEY', {\n      cluster: 'PUSHER_APP_CLUSTER',\n      encrypted: true\n    });\n    \n    // Subscribe to poll trigger\n    var channel = pusher.subscribe('poll');\n    \n    // Listen to vote event\n    channel.bind('vote', function(data) {\n      for (i = 0; i \u003c (data.length - 1); i++) { \n        var total = data[0].votes + data[1].votes + data[2].votes + data[3].votes\n        document.getElementById(data[i].name).style.width = calculatePercentage(total, data[i].votes)\n        document.getElementById(data[i].name).style.background = \"#388e3c\" \n      }\n    });\n    \n    let calculatePercentage = function(total, amount) {\n      return (amount / total) * 100 + \"%\"\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*`  keys with the keys on your Pusher dashboard.\n\nFirst, we registered click events on all the members of the poll, then we configure [Axios](https://www.npmjs.com/package/axios) to send a POST request whenever a user votes for a member of the poll. Next, we configured a Pusher instance to communicate with the Pusher service. Next, we register a listener for the events Pusher sends. Finally, we bind the events we are listening to on the channel we created. \n\nNext, open the `admin.js` file and paste in this code:\n\n``` javascript\n    var dataPoints = [\n      { label: \"Go\", y: 0 },\n      { label: \"Python\", y: 0 },\n      { label: \"PHP\", y: 0 },\n      { label: \"Ruby\", y: 0 },\n    ]\n    \n    var chartContainer = document.querySelector('#chartContainer');\n    \n    if (chartContainer) {\n      var chart = new CanvasJS.Chart(\"chartContainer\", {\n        animationEnabled: true,\n        theme: \"theme2\",\n        data: [\n          {\n            type: \"column\",\n            dataPoints: dataPoints\n          }\n        ]\n      });\n      \n      chart.render();\n    }\n    \n    Pusher.logToConsole = true;\n    \n    // Configure Pusher instance\n    const pusher = new Pusher('PUSHER_APP_KEY', {\n      cluster: 'PUSHER_APP_CLUSTER',\n      encrypted: true\n    });\n    \n    // Subscribe to poll trigger\n    var channel = pusher.subscribe('poll');\n    \n    // Listen to vote event\n    channel.bind('vote', function(data) {\n      dataPoints = dataPoints.map(dataPoint =\u003e {\n        if(dataPoint.label == data[4].name[0]) {\n          dataPoint.y += 10;\n        }\n    \n        return dataPoint\n      });\n    \n      // Re-render chart\n      chart.render()\n    });\n```\n\n\u003e Replace the `PUSHER_APP_*`  keys with the keys on your Pusher dashboard.\n\nJust as we did in the previous code, here we also receive Pusher events and use the received data to update the [chart](https://canvasjs.com/) on the admin’s page.\n\nOur application is good to go! Now we can run the app using this command:\n\n```\n    $ flask run\n```\n\nNow if we visit [127.0.0.1:5000](http://127.0.0.1:5000) and [127.0.0.1:5000/admin](http://127.0.0.1:5000/admin) we should see our app:\n\n![python-realtime-poll-demo](//images.ctfassets.net/1es3ne0caaid/1hgCPLcEbyUOUcuYOiI4Q8/745fb422b6dfa795a19a1158cf6c4162/python-realtime-poll-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have learned how to build a Python Flask project from scratch and add realtime functionality to it using Pusher and vanilla JavaScript. The entire code for this tutorial is [available on GitHub](https://github.com/neoighodaro/python-realtime-poll-pusher).","metaTitle":"Build a live polling web app with Python","metaDescription":"Use Flask and JavaScript to create a live voting application. Users will vote for their favorite programming language, and admins can view a results graph that automatically updates as results come in."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1WVQikDlFKOeyyySeEqO2","type":"Entry","createdAt":"2018-06-27T11:23:38.638Z","updatedAt":"2020-06-15T16:05:07.719Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Track Bitcoin prices on a live graph with Python","url":"bitcoin-live-graph-python","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3sixk7zsAoQqqSsUWM8I8y","type":"Entry","createdAt":"2018-02-13T18:06:00.483Z","updatedAt":"2018-02-14T10:08:13.372Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Olayinka Omole","url":"olayinka-omole","email":"olayinka.omole@gmail.com","twitter":"https://twitter.com/olayinkaos","github":"https://github.com/olayinkaos","guestWriter":true}}],"projectRepo":"https://github.com/olayinkaos/realtime-graph","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kOTcNAC12gwWEyE6MimMY","type":"Entry","createdAt":"2018-02-12T15:08:28.581Z","updatedAt":"2018-02-26T12:31:12.766Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Trading","url":"trading","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2018-06-24","description":"Build a live graph to track Bitcoin prices using Flask. You will create a simple Python application that pulls in Bitcoin sample data and displays it on a live graph using Plotly.","prerequisite":"You will need Python 3+ installed on your machine. Basic knowledge of Python, Flask and JavaScript will be helpful.","content":"Graphs and charts are great for representing information in a clear and concise way. They can be used in various apps to show data to users when needed. Quickly changing data can be better represented using realtime graphs and charts as users can quickly see both current and historical data easily.\n\nIn this tutorial, we will be making use of [Pusher Channels](https://pusher.com/channels), [Plotly](https://plot.ly/) and [Flask](http://flask.pocoo.org/) to build a simple app for displaying the price of a Bitcoin in a realtime graph and bar chart.\n\nHere is what the final app will look like:\n\n![python-live-graph-bitcoin-demo](//images.ctfassets.net/1es3ne0caaid/5CwIjRrU3eWiCsG4iOqG0K/2824d59426e378ca7cb0e69280a6a92b/python-live-graph-bitcoin-demo.gif)\n\n## Prerequisites\n\nTo follow along properly, basic knowledge of Python, Flask and JavaScript (ES6 syntax) is needed. You will also need to install [Python](https://www.python.org/) and [virtualenv](https://virtualenv.pypa.io/en/stable/) locally.\n\n\n\u003e Virtualenv is a tool that helps us create isolated Python environments. This makes it possible for us to install dependencies (like Flask) in an isolated environment, and not pollute our global packages directory. To install virtualenv:\n\n```\n    pip install virtualenv\n```\n\n## Setup and configuration\n\n### Installing Flask\n\nAs stated earlier, we will be developing using Flask, a web framework for Python. In this step, we will activate a virtual Python environment and install Flask for use in our project.\n\nTo activate a virtual environment:\n\n```\n    mkdir realtime-graph\n    cd realtime-graph\n    virtualenv .venv\n    source .venv/bin/activate\n```\n\n\u003e Note: To activate the virtual environment on a Windows machine, you would need to enter the path to the activate file (in `.venv/Scripts`) in Powershell / command prompt. \n\nTo install Flask:\n\n```\n    pip install flask\n```\n\nWe will also need the [Requests](http://docs.python-requests.org/en/master/) library. Let us install it now:\n\n```\n    pip install requests\n```\n\n### Setting up Pusher\n\nPusher is a service that makes it easy for us to supercharge our web and mobile applications with realtime updates. We will be using it primarily for powering the realtime updates to our graphs. Head over to Pusher.com and [register for a free account](https://pusher.com/signup?plan=sandbox), if you don’t already have one.\n\nNext, create an app on the [dashboard](https://dashboard.pusher.com/) and copy out the app credentials (App ID, Key, Secret and Cluster), as we would be needing these in our app.\n\nNow we can install the Pusher Python library to help our backend communicate with the Pusher service:\n\n```\n    pip install pusher\n```\n\n### Installing Plotly\n\nPlotly is a tool that helps to easily display visual data on the web. According to [their website](https://plot.ly/):\n\n\n\u003e Plotly creates **leading open source tools** for composing, editing, and sharing interactive **data visualization** via the Web.\n\nWe will be making use of Plotly to create our graph and chart. To install Plotly to our app:\n\n```\n    pip install plotly\n```\n\n### File and folder structure\n\nHere is the folder structure for the app. We will only limit it to things necessary so as to avoid bloat. Let us go ahead and create the following files and folders:\n\n```\n        ├── realtime-graph\n            ├── app.py\n            └── templates\n                └── index.html\n```\n\nThe templates folder contains our `index.html` template file, while `app.py` will house all our server-side code.\n\n\n## Building the backend\n\nNow, we can start writing server-side code to perform our various app functions. Our app will get the prices for Bitcoin every 10 seconds. We will use Pusher to broadcast an event, along with the new prices every time data is retrieved.\n\nWe will start by importing the needed modules, configuring the Pusher object, and initialising some needed variables:\n\n``` python\n    # ./app.py\n    from flask import Flask, render_template\n    from apscheduler.schedulers.background import BackgroundScheduler\n    from apscheduler.triggers.interval import IntervalTrigger\n    from pusher import Pusher\n    import requests, json, atexit, time, plotly, plotly.graph_objs as go\n    \n    # create flask app\n    app = Flask(__name__)\n    \n    # configure pusher object\n    pusher = Pusher(\n        app_id='YOUR_APP_ID',\n        key='YOUR_APP_KEY',\n        secret='YOUR_APP_SECRET',\n        cluster='YOUR_APP_CLUSTER',\n        ssl=True\n    )\n    \n    # define variables for data retrieval\n    times = []\n    currencies = [\"BTC\"]\n    prices = {\"BTC\": []}\n```\n\nIn the code block above, first we import the needed modules and libraries, including the Pusher and Plotly libraries. We also configure the Pusher object with the credentials gotten from the Pusher dashboard. Remember to replace `YOUR_APP_ID` and similar values with the actual values for your own app.\n\nSome variables are also defined to hold values we will need later in our app. `times` stores the values of the time when we retrieve price data in a list. `currencies` holds the list of currencies we will be fetching data for. In our case, this is just `BTC` but you can add any number of currencies you want. `prices` is a dictionary that holds the list of prices for currency defined.\n\nNext, let us define a simple route to serve our app’s view:\n\n``` python\n    # ./app.py\n    # ...\n    \n    @app.route(\"/\")\n    def index():\n        return render_template(\"index.html\")\n```\n\nIn the code block above, we use Flask’s `render_template()` function to serve `index.html` from the `./templates` folder on the index route.\n\nNow we can get to the core of our app, which is creating a function that will retrieve Bitcoin prices and then broadcast that data in graph and chart form. Let us update `app.py` with the function:\n\n``` python\n    # ./app.py\n    # ...\n    \n    def retrieve_data():\n        # create dictionary for saving current prices\n        current_prices = {}\n        for currency in currencies:\n            current_prices[currency] = []\n        # append new time to list of times\n        times.append(time.strftime('%H:%M:%S'))\n    \n        # make request to API and get response as object\n        api_url = \"https://min-api.cryptocompare.com/data/pricemulti?fsyms={}\u0026tsyms=USD\".format(\",\".join(currencies))\n        response = json.loads(requests.get(api_url).content)\n    \n        # append new price to list of prices for graph\n        # and set current price for bar chart\n        for currency in currencies:\n            price = response[currency]['USD']\n            current_prices[currency] = price\n            prices[currency].append(price)\n    \n        # create an array of traces for graph data\n        graph_data = [go.Scatter(\n            x=times,\n            y=prices.get(currency),\n            name=\"{} Prices\".format(currency)\n        ) for currency in currencies]\n    \n        # create an array of traces for bar chart data\n        bar_chart_data = [go.Bar(\n            x=currencies,\n            y=list(current_prices.values())\n        )]\n    \n        data = {\n            'graph': json.dumps(list(graph_data), cls=plotly.utils.PlotlyJSONEncoder),\n            'bar_chart': json.dumps(list(bar_chart_data), cls=plotly.utils.PlotlyJSONEncoder)\n        }\n    \n        # trigger event\n        pusher.trigger(\"crypto\", \"data-updated\", data)\n```\n\nIn the code block above, we define a function `retrieve_data()` that does the following:\n\n1. Makes a request to a remote API to retrieve current Bitcoin prices. We make use of the [CryptoCompare API](https://min-api.cryptocompare.com/) and the [Requests library](http://docs.python-requests.org/en/master/).\n2. Generates traces for the graph and bar chart using the Plotly [plotly.graph_objs.Scatter](https://plot.ly/python/line-charts/) and [plotly.graph_objs.Bar](https://plot.ly/python/bar-charts/).\n3. Encode the graph and bar chart data as JSON using the [Plotly Json Encoder](https://github.com/plotly/plotly.py/blob/master/plotly/utils.py#L130).\n4. Trigger a `data-updated` event using the configured `pusher` object, broadcasting the needed data on the `crypto` channel.\n\nWe use the configured `pusher` object for broadcasting events on specific channels. To broadcast an event, we use the `trigger()` method with the following syntax:\n\n```\n    pusher.trigger('a_channel', 'an_event', {'some': 'data'})\n```\n\n\u003e Note: You can find the docs for the Pusher Python library [here](https://github.com/pusher/pusher-http-python).\n\nPusher also grants us the ability to trigger events on various types of channels including Public, Private and Presence channels. Read about them [here](https://pusher.com/docs/client_api_guide/client_channels#channel_types).\n\n### Scheduling the data retrieval function\n\nA major part of our app is making sure our data retrieval functions runs at a 10 second interval, so as to keep users updated of the most current prices. To create this schedule, we make use of AppScheduler. To install AppScheduler:\n\n```\n    pip install apscheduler\n```\n\nThe following piece of code will register the job and run our `retrieve_data()` function every 10 seconds:\n\n``` python\n    # ./app.py\n    # ...\n    \n    # create schedule for retrieving prices\n    scheduler = BackgroundScheduler()\n    scheduler.start()\n    scheduler.add_job(\n        func=retrieve_data,\n        trigger=IntervalTrigger(seconds=10),\n        id='prices_retrieval_job',\n        name='Retrieve prices every 10 seconds',\n        replace_existing=True)\n    # Shut down the scheduler when exiting the app\n    atexit.register(lambda: scheduler.shutdown())\n```\n\n### Running the Flask app\n\nFinally, to start the app in debug mode, while disabling the auto reloader:\n\n``` python\n    # ./app.py\n    # ...\n    \n    # run Flask app\n    app.run(debug=True, use_reloader=False)\n```\n\n\u003e **Note:** We disable the auto reloader so as to prevent our scheduled function from running twice at every interval. You can read more on this [here](https://stackoverflow.com/a/15491587).\n\n\n## Creating our app view\n\nWe will now write some markup and JavaScript code to display the graph and chart to our users. Editing the `index.html` file:\n\n``` html\n    \u003c!-- ./templates/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003eCryptoLiveChart!\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css\"\u003e\n        \u003cstyle\u003e\n            .chart {\n                height: 800px;\n            }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \u003csection class=\"section\"\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003ch1 class=\"title\"\u003eWelcome to \u003cstrong\u003eCrypto\u003c/strong\u003eLiveChart!\u003c/h1\u003e\n            \u003cp class=\"subtitle\"\u003eView live prices for \u003cstrong\u003eBitcoin\u003c/strong\u003e and \u003cstrong\u003eEthereum\u003c/strong\u003e in real time!\u003c/p\u003e\n            \u003chr\u003e\n            \u003cdiv class=\"columns\"\u003e\n                \u003cdiv class=\"column\"\u003e\n                    \u003ch5 class=\"title is-6\"\u003ePrices (in USD)\u003c/h5\u003e\n                    \u003cdiv id=\"price_chart\" class=\"chart\"\u003e\n                        Graph\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"column\"\u003e\n                    \u003ch5 class=\"title is-6\"\u003eMarket Cap\u003c/h5\u003e\n                    \u003cdiv id=\"market_cap_chart\" class=\"chart\"\u003e\n                        Bar Chart\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/section\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe above code contains the basic markup for the homepage. We imported [Bulma](https://bulma.io/) (a cool CSS framework) to take advantage of some pre-made styles.\n\nNext, we will write some JavaScript code to display our charts:\n\n``` html\n    \u003c!-- ./templates/index.html --\u003e\n    \u003c!-- ... --\u003e\n      \n      \u003c!-- D3.js --\u003e\n      \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js\"\u003e\u003c/script\u003e\n      \u003c!-- jQuery --\u003e\n      \u003cscript src=\"https://code.jquery.com/jquery-2.1.4.min.js\"\u003e\u003c/script\u003e\n      \u003c!-- Plotly.js --\u003e\n      \u003cscript src=\"https://d14fo0winaifog.cloudfront.net/plotly-basic.js\"\u003e\u003c/script\u003e\n      \u003c!-- import Pusher-js library --\u003e\n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript type=\"text/javascript\"\u003e\n          // connect to Pusher\n          const pusher = new Pusher('YOUR_APP_KEY', {\n            cluster: 'YOUR_APP_CLUSTER', // gotten from Pusher app dashboard\n            encrypted: true // optional\n          });\n          // subscribe to crypto channel\n          const channel = pusher.subscribe('crypto')\n          // listen for relevant events\n          channel.bind('data-updated', data =\u003e {\n              const graph = JSON.parse(data.graph);\n              Plotly.newPlot('price_chart', graph);\n              const bar_chart = JSON.parse(data.bar_chart);\n              Plotly.newPlot('market_cap_chart', bar_chart);\n          });\n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the code above, first we import the needed libraries - D3.js, Plotly and Pusher. Then we do the following:\n\n1. Connect to our Pusher app by creating an instance with `new Pusher()`. Remember to replace `YOUR_APP_KEY` and `YOUR_APP_CLUSTER` with the actual values gotten from your dashboard.\n2. Subscribe to the `crypto` channel on which we will be broadcasting events with `pusher.subscribe()`\n3. We bind the `data-updated` event on the channel and define a callback function to plot our graph and chart anytime data is received.\n\nAnd that’s it! To run our app:\n\n```\n    python app.py\n```\n\n## Conclusion\n\nIn this tutorial we have learned how to create beautiful realtime charts and graphs in our Flask Apps using Plotly and Pusher. You can check out the [Plotly Python documentation](https://plot.ly/python/) to see how to create other graphs quickly in Python!\n\nYou can find the entire code for this tutorial on [GitHub](https://github.com/olayinkaos/realtime-graph).","metaTitle":"Track Bitcoin prices on a live graph with Python","metaDescription":"Use Python to c Flask reate a Bitcoin tracking interface. On the frontend, use Plotly to display the data on a live graph."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3LONnVN1tuoo6IQ8kuKG8c","type":"Entry","createdAt":"2018-05-29T09:13:51.830Z","updatedAt":"2018-05-29T09:13:51.830Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a polling app with Ruby on Rails and PostgreSQL","url":"polling-ruby-rails-postgresql","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/yemiwebby/pusher-rails-chart","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N8l3o0yD6QK2ooI2ME8wW","type":"Entry","createdAt":"2018-02-12T15:09:06.190Z","updatedAt":"2018-02-26T12:31:10.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Polls","url":"live-polls","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6S5luSjtlYk4i8eM8AyO4I","type":"Entry","createdAt":"2018-02-02T13:39:48.331Z","updatedAt":"2018-02-12T14:41:19.307Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby","url":"ruby","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"hPWAADkjVmomS68E6seqQ","type":"Entry","createdAt":"2018-02-12T14:48:52.613Z","updatedAt":"2018-02-12T14:48:52.613Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby on Rails","url":"ruby-on-rails","type":"framework"}}],"reviewDate":"2018-05-28","description":"Build a web app with Ruby on Rails, featuring a live poll and chart. User responses are communicated instantly, with the chart updating in realtime.","prerequisite":"You will need Ruby, Rails and PostgreSQL installed on your machine. A basic understanding of Ruby and CoffeeScript will be helpful.","content":"## Introduction\n\nOne of the effective means of interpreting and representing data for users of web applications, is by using data visualization tools such as charts, plots and graphs. This among other things aids simplification of data and presents it in a comprehensible and interactive form.\n\nWith the increase in popularity of the web and its technologies, representing numerical data with graphs in realtime has become inevitable.\n\nTogether in this post, we’ll build a basic poll application where users will be able to provide an answer to a question by selecting one of the options given, then we will proceed to represent these numbers on a pie chart. For a more user-friendly experience, Pusher will be use to update this chart in realtime without the need to refresh the page. This is what the finished application will look like:\n\n![realtime-chart-ruby-demo-1](//images.ctfassets.net/1es3ne0caaid/4nf1sbvChWeA6ukiYE6Kq2/abb514a11cc0b99773d73602745c01c8/realtime-chart-ruby-demo-1.gif)\n\nThe application depicted by the image above will be build with Ruby on Rails and the database powered by PostgreSQL. In addition we will make use of a library called [Chartkick](https://github.com/ankane/chartkick); a tool used for creating beautiful JavaScript charts.\n\n## Prerequisites\n\nA basic understanding of Ruby, CoffeeScript and PostgresSQL will help you with this tutorial. Ensure that you have PostgreSQL installed on your machine. Kindly check the documentation of [PostgreSQL](https://www.postgresql.org/download/), [Ruby](https://www.ruby-lang.org/en/downloads/) and [Rails](http://guides.rubyonrails.org/getting_started.html) for further installations procedures.\n\n## Preparing the application\n\nIt is important that you have both Ruby and Rails installed. Run the following code in your terminal to confirm the successful installation of both Ruby and Rails:\n\n```\n    $ ruby -v // 2.1 or above\n    \n    $ rails -v // 4.2 or above\n```\n\nNext, we will run a command that will create a new Rails application in a folder called `pusher-rails-chart`. Run the command below in your terminal:\n\n```\n    $ rails new pusher-rails-chart -T --database=postgresql\n```\n\nThe `-T` flag was added to prevent generation of the default testing suite as we won’t be writing any tests.\n\nGo ahead and change directory into the newly created folder:\n\n```\n    $ cd pusher-rails-chart\n```\n\nIn the root directory of this application, open the `Gemfile` and add the following gems:\n\n```\n    # Gemfile\n    \n    gem 'bootstrap', '~\u003e 4.1.0'\n    gem 'jquery-rails'\n    gem 'pusher'\n    gem 'figaro'\n    gem 'chartkick'\n```\n\nand install them:\n\n```\n    $ bundle install\n```\n\n## Database setup\n\nTo set up the database for our application, create a database called `pusher-rails-chart_development`. Check out this [article](https://www.digitalocean.com/community/tutorials/how-to-setup-ruby-on-rails-with-postgres) on how to create a Postgres database and an associated user and password.\n\nIn your `database.yml` file, under the `development` key, add the following code:\n\n``` yaml\n    # config/database.yml\n    \n    ...\n    development:\n      \u003c\u003c: *default\n      database: pusher-rails-chart_development // add this line if it isn't already there\n      username: database_user // add this line\n      password: user_password // add this line\n    ...  \n```\n\nThe username and password in the code above should have access to the `pusher-rails-chart_development` database. Next, run the following code to setup the database:\n\n```\n    # setup database\n    $ rails db:setup\n```\n\n## Starting the development server\n\nStart the development server by running `rails s` from the terminal and visit http://localhost:3000 in your browser. Your page should look like this:\n\n![youre-on-rails](//images.ctfassets.net/1es3ne0caaid/3sOsgC4S80gOKM8Waqkgui/87c5c9e64375cbb2f8f2516223f4e515/youre-on-rails.png)\n\n## Sign up for a free Pusher account\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). \n\n![ruby-create-pusher-account](//images.ctfassets.net/1es3ne0caaid/6uDbn5kOyIOiKyeSeOKqeS/6136b86bc4d9b6ceff7fcf8458375a19/ruby-create-pusher-account.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![ruby-channels-dashboard](//images.ctfassets.net/1es3ne0caaid/5IDtPf0HhC4aKg66gguYq8/183e0b23ec44fdfc23a38921e11fe9e3/ruby-channels-dashboard.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with, to be provided with boilerplate code:\n\n![ruby-new-pusher-app](//images.ctfassets.net/1es3ne0caaid/3qnLmThfu8ue2ImYKKSw8a/2e4f39b15b8787e0f6d3b4f2ea022d95/ruby-new-pusher-app.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![ruby-app-keys](//images.ctfassets.net/1es3ne0caaid/1XHWE3GCeoCeqsMCO8uM2q/52523148497d08f6e9ba4f52fe0750f6/ruby-app-keys.png)\n\nNow that you have your Pusher API keys, head over to `config/initializers` directory. Create a `pusher.rb` file and add the following code:\n\n``` ruby\n    # config/initializers/pusher.rb\n    \n    require 'pusher'\n    \n    Pusher.app_id = ENV[\"PUSHER_APP_ID\"]\n    Pusher.key = ENV[\"PUSHER_KEY\"]\n    Pusher.secret = ENV[\"PUSHER_SECRET\"]\n    Pusher.cluster = ENV[\"PUSHER_CLUSTER\"]\n    Pusher.logger = Rails.logger\n    Pusher.encrypted = true\n```\n\nIn your terminal, run:\n\n```\n    $ figaro install\n```\n\nThe command above will generate an `application.yml` file. Locate the newly generate file in `config/application.yml` and add the Pusher credentials obtained from your dashboard:\n\n``` yaml\n    # config/application.yml\n    \n    PUSHER_APP_ID: 'YOUR_APP_ID'\n    PUSHER_KEY: 'YOUR_APP_KEY'\n    PUSHER_SECRET: 'YOUR_APP_SECRET'\n    PUSHER_CLUSTER: 'CLUSTER'\n```\n\n## Setting up the model and controller\n\nNext, we will go ahead and generate a model and controller for our application. In your terminal, while in the project’s directory, run the following code:\n\n```\n    // generate poll model and controller\n    $ rails g scaffold poll name:string laptop:binary\n    \n    // run database migrations\n    $ rails db:migrate\n```\n\n## Setting up the homepage\n\nAt the moment, if you restart the development server and reload the browser page, the welcome page will still be displayed. This is because we have not instructed Rails to show the homepage whenever we navigate to the root `URL` of our site. \n\nTo tell Rails where the actual homepage is, update the route file with the following code:\n\n``` ruby\n    # config/routes.rb\n    \n    ...\n    root 'polls#index'\n    ...\n```    \n\nIn your `application.js` file, add the following code just before the last line:\n\n``` javascript\n    // app/assets/javascripts/application.js\n    \n    ...\n    //= require jquery3 # add this line\n    //= require popper # add this line\n    //= require bootstrap # add this line\n    //= require Chart.bundle # add this line\n    //= require chartkick # add this line\n    //= require_tree .\n    ...\n```\n\n## Styling\n\nTo set up a basic styling for our application, go ahead and rename your `application.css` file to `application.scss`, import Bootstrap and add some custom styles:\n\n``` scss\n    // app/assets/stylesheets/application.scss\n    \n     @import \"bootstrap\";\n     @import url('https://fonts.googleapis.com/css?family=Josefin+Sans');\n     body {\n      font-family: 'Josefin Sans', sans-serif;\n     }\n     .navbar-brand {\n       color: #FFF !important;\n       \u0026:hover {\n         background-color: unset;\n       }\n     }\n     .form-control {\n       outline: none !important;\n       \n       \u0026:focus {\n        border-color: transparent !important;\n        border: 1px !important;\n       }\n     }\n```    \n\nAt the moment, if we restart the development server and reload the application, we would notice changes in the fonts of our page, this is because we have successfully included Bootstrap.\n\nIf you encounter any errors relating to `application.html.erb` , in `config/boot.rb`, change the ExecJS runtime from Duktape to Node.\n\n``` ruby\n    # config/boot.rb\n    \n    ENV['EXECJS_RUNTIME'] = 'Node'\n```\n\n## Setting up the polls table\n\nTo set up the view, replace the code in your `index.html.erb` file with the following:\n\n``` html\n    \u003c%# app/views/polls/index.html.erb %\u003e\n    \n    \u003cdiv class=\"container-fluid\"\u003e\n      \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-5 offset-1\"\u003e\n          \u003cp id=\"notice\"\u003e\u003c%= notice %\u003e\u003c/p\u003e\n          \u003ch1\u003ePolls\u003c/h1\u003e\n          \u003ctable id='poll-table' class=\"table table-hover\"\u003e\n            \u003cthead class=\"thead-light\"\u003e\n              \u003ctr\u003e\n                \u003cth\u003eName\u003c/th\u003e\n                \u003cth\u003eLaptop\u003c/th\u003e\n                \u003cth colspan=\"3\"\u003e\u003c/th\u003e\n              \u003c/tr\u003e\n            \u003c/thead\u003e\n            \u003ctbody\u003e\n              \u003c% @polls.each do |poll| %\u003e\n                \u003ctr\u003e\n                  \u003ctd\u003e\u003c%= poll.name %\u003e\u003c/td\u003e\n                  \u003ctd\u003e\u003c%= poll.laptop %\u003e\u003c/td\u003e\n                  \u003ctd\u003e\u003c%= link_to 'Show', poll %\u003e\u003c/td\u003e\n                  \u003ctd\u003e\u003c%= link_to 'Edit', edit_poll_path(poll) %\u003e\u003c/td\u003e\n                  \u003ctd\u003e\u003c%= link_to 'Destroy', poll, method: :delete, data: { confirm: 'Are you sure?' } %\u003e\u003c/td\u003e\n                \u003c/tr\u003e\n              \u003c% end %\u003e\n            \u003c/tbody\u003e\n          \u003c/table\u003e\n        \u003c/div\u003e\n        \n        \u003cdiv class=\"col-6\"\u003e\n          \u003c%= pie_chart [[\"Yes\", Poll.where(laptop: \"yes\").count], [\"No\", Poll.where(laptop: \"no\").count]], id:'polls'%\u003e \n        \u003c/div\u003e\n      \u003c/div\u003e\n      \n       \u003cdiv class=\"row\"\u003e\n        \u003cdiv class='col-11 offset-1 col-sm-4'\u003e\n          \u003ch3\u003eNew poll\u003c/h3\u003e\n          \u003c%= render 'form', poll: @poll %\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nHere, we have used Bootstrap to style our table and within the second column of the first row we included a line to render the pie chart for this application on the homepage. [Chartkick](https://www.chartkick.com/) helps simplify the use of chart. You can check [here](https://github.com/ankane/chartkick) for more information.\n\nNext, update the index method of the polls controller, to include the following:\n\n``` ruby\n    # app/controllers/polls_controller.rb\n    \n    class PollsController \u003c ApplicationController\n     ...\n      def index\n        @polls = Poll.all\n        @poll = Poll.new # add this line\n      end\n      ...\n    end\n```    \n\nThe code above adds Bootstrap styling to the table on our landing page. It also instantiates a new poll record in the `index` method of the polls controller. If you reload the landing page, you should see the form.\n\n## Submitting a new poll\n\nCurrently adding a new poll record redirects us to a different page. We would like to handle that with AJAX instead. To achieve this, add `remote: true` and `format: :json` to your form. Replace the code in `_form.html.erb` with the following: \n\n``` html\n    // app/views/polls/_form.html.erb\n    \n    \u003c%= form_with(model: poll, remote: true, format: :json, id: 'add_poll') do |form| %\u003e\n      \u003c% if poll.errors.any? %\u003e\n        \u003cdiv id=\"error_explanation\"\u003e\n          \u003ch2\u003e\u003c%= pluralize(poll.errors.count, \"error\") %\u003e prohibited this poll from being saved:\u003c/h2\u003e\n          \u003cul\u003e\n          \u003c% poll.errors.full_messages.each do |message| %\u003e\n            \u003cli\u003e\u003c%= message %\u003e\u003c/li\u003e\n          \u003c% end %\u003e\n          \u003c/ul\u003e\n        \u003c/div\u003e\n      \u003c% end %\u003e\n      \u003cdiv class=\"field\"\u003e\n        \u003c%= form.label :name %\u003e\n        \u003c%= form.text_field :name, id: :poll_name, class: \"form-control\" %\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"field\"\u003e\n        \u003c%= form.label :laptop, \"Do you own a laptop? \" %\u003e\u003cbr /\u003e\n        \u003c%= form.label :laptop, \"Yes\", :value =\u003e \"true\" %\u003e\n        \u003c%= form.radio_button :laptop, 'yes', :checked =\u003e true %\u003e\n        \u003c%= form.label :laptop, \"No\", :value =\u003e \"false\" %\u003e\n        \u003c%= form.radio_button :laptop, 'no'%\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"actions\"\u003e\n        \u003c%= form.submit 'submit', class: \"btn btn-success\"%\u003e\n      \u003c/div\u003e\n    \u003c% end %\u003e\n```    \n\nNow that our form uses AJAX, we’ll handle updating the page with CoffeeScript. Open `app/assets/javascripts/polls.coffee` and paste in the code below:\n\n``` coffeescript\n    # app/assets/javascripts/polls.coffee\n    \n    submitPoll = (data) -\u003e\n      $('#poll-table tbody').append \"\"\"\n      \u003ctr\u003e\n          \u003ctd\u003e#{data.name}\u003c/td\u003e\n          \u003ctd\u003e#{data.laptop}\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"/polls/#{data.id}\"\u003eShow\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"/polls/#{data.id}/edit\"\u003eEdit\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca data-confirm=\"Are you sure?\" rel=\"nofollow\" data-method=\"delete\" href=\"/polls/#{data.id}\"\u003eDestroy\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \"\"\"\n      return\n    \n    $ -\u003e\n      $('#add_poll').on 'ajax:success', (data) -\u003e\n        $('#add_poll')[0].reset()\n        submitPoll data.detail[0]\n        return\n      return\n```\n\nIn the above code, we added an `ajax:success` event listener to our form courtesy of [jQuery-ujs](https://github.com/rails/jquery-ujs/wiki/ajax). Whenever we add a new response, we get our newly added answer and update our page with it.\n\nLet’s reload our page and add a few responses, they should pop up on the page as soon as we hit submit.\n\nIf the `laptop` column shows ‘undefined’ or returns a null value, this has to do with mass assignment protection from the controller, you can read more about this [here](http://guides.rubyonrails.org/action_controller_overview.html#strong-parameters). To fix this, navigate to `app/controllers/polls_controller.rb` and within the `poll_param` method, add `:laptop` to the list of params.\n\n## Realtime service with Pusher\n\nTo update our table realtime, we will publish the new poll record to a channel and subscribe to it on the frontend of our app. In the poll model, we’ll add an `after_commit` callback which will call a method that will publish the new poll. We'll use `after_commit` so data is published whenever we add or update a poll. \n\nAdd the following code to the poll model:\n\n``` ruby\n    # app/models/poll.rb\n    \n    class Poll \u003c ApplicationRecord\n        after_commit :notify_pusher, on: [:create, :update]\n        def notify_pusher\n        Pusher.trigger('poll', 'new', self.as_json)\n        end  \n    end\n```    \n\nHere, our initialized Pusher client triggers an event called `new` through a channel named `poll`.\n\n## Updating the frontend of the application\n\nThe client side of our application needs to listen for those changes that are being pushed by the server and update the view with it. To do this, we’ll rename our `polls.coffee` file to `polls.coffee.erb` so we can add some Ruby code in it.\n\nUpdate the file with the following code:\n\n``` coffeescript\n    # app/assets/javascripts/polls.coffee.erb\n    \n    submitPoll = (data) -\u003e\n      $('#poll-table tbody').append \"\"\"\n      \u003ctr\u003e\n          \u003ctd\u003e#{data.name}\u003c/td\u003e\n          \u003ctd\u003e#{data.laptop}\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"/polls/#{data.id}\"\u003eShow\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"/polls/#{data.id}/edit\"\u003eEdit\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca data-confirm=\"Are you sure?\" rel=\"nofollow\" data-method=\"delete\" href=\"/polls/#{data.id}\"\u003eDelete\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \"\"\"\n      return\n    $ -\u003e\n    updateChart = (data) -\u003e\n      chart = Chartkick.charts['polls'].getChartObject()\n      if data.laptop == 'yes'\n        chart.data.datasets[0].data[0]++\n        chart.update()\n      else\n        chart.data.datasets[0].data[1]++\n        chart.update()\n    \n    $ -\u003e\n      $('#add_poll').on 'ajax:success', (data) -\u003e\n        $('#add_poll')[0].reset()\n        return\n      pusher = new Pusher('\u003c%= ENV[\"PUSHER_KEY\"] %\u003e',\n        cluster: '\u003c%= ENV[\"PUSHER_CLUSTER\"] %\u003e'\n        encrypted: true)\n      channel = pusher.subscribe('poll')\n      channel.bind 'new', (data) -\u003e\n          submitPoll data\n          updateChart data\n          return\n      return\n```    \n\nIn the code above, we created two methods:\n\n1.  `submitPoll()`: updates the poll table with new records upon submission of the poll’s form.\n\n2.  `updateChart()`: updates the datasets of our pie chart without the need to refresh the page.\n\nLastly, add the Pusher library inside the head tag in the `application.html.erb` file just before the `javascript_include_tag`:\n\n``` html\n    \u003c%# . app/views/layouts/application.html.erb %\u003e\n    \n    \u003chead\u003e\n        \u003ctitle\u003ePoll\u003c/title\u003e\n        \u003c%= csrf_meta_tags %\u003e\n        \u003c%= csp_meta_tag %\u003e\n        \u003c%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003c%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %\u003e\n      \u003c/head\u003e\n```\n\n## Testing the application\n\nRestart the development server if it is currently running. Check your page on http://localhost:3000:\n\n![realtime-chart-ruby-demo-2](//images.ctfassets.net/1es3ne0caaid/4P5ZUY6cGscOIge6IWWGoI/c6b065bec773b431ea99fbc41ddd89b1/realtime-chart-ruby-demo-2.gif)\n\n## Conclusion\n\nRealtime and visual analysis in web applications has come to stay and can only get better. As shown by this post, you can now go ahead and give your users the best of visual realtime update in Ruby on Rails applications.\n\nI hope you found this tutorial helpful. Feel free to download the complete source can be found on [GitHub](https://github.com/yemiwebby/pusher-rails-chart).","metaTitle":"Build a polling app with Ruby on Rails and PostgreSQL","metaDescription":"Use Ruby on Rails and PostgreSQL to create a live polling application. Chartkick provides the graph visuals, which update in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5qEUPHIZVeWEQqQUECSoIe","type":"Entry","createdAt":"2018-05-14T09:35:22.610Z","updatedAt":"2018-05-14T09:35:22.610Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a data visualization using Angular and Chart.js","url":"data-visualization-angular","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/angular-demographics","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N8l3o0yD6QK2ooI2ME8wW","type":"Entry","createdAt":"2018-02-12T15:09:06.190Z","updatedAt":"2018-02-26T12:31:10.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Polls","url":"live-polls","type":"use case"}}],"reviewDate":"2018-05-13","description":"Build a live poll of user ages, with Angular, Node, Express and Chart.js.","prerequisite":"A basic understanding of Angular and Node is required. You will need to have Node and npm installed on your machine.","content":"\u003e **Data visualization** is viewed by many disciplines as a modern equivalent of visual communication. It involves the creation and study of the visual representation of data. - [Wikipedia](https://en.wikipedia.org/wiki/Data_visualization)\n\n An important advantage of data visualization is how it enables users to more effectively see connections as they are occurring between operating conditions and business performance. Adding realtime functionality using [Pusher](https://pusher.com) improves this experience as data changes are witnessed in realtime.\n\nUsing [Angular](https://angular.io) you can extend the template language with your own components and use a wide array of existing components. \n\nTo follow this tutorial a basic understanding of Angular and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nIf you have no prior knowledge of Angular, kindly follow the tutorial [here](https://angular.io/tutorial). Come back and finish the tutorial when you’re done.\n\nWe’ll be using these tools to build our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Angular](https://angular.io)\n- [Chart.js](http://www.chartjs.org/)\n\nWe’ll be creating an application that will present data about the age demographics of a given population. Using our application, users will complete a poll and then see the data from the polls in realtime.\n\nHere’s a screenshot of the final product:\n\n![angular-data-visualization-preview](//images.ctfassets.net/1es3ne0caaid/2pLq90Q6FKCoIM640YKww8/ce513a337fbfcb2e2dbb55bb1daa30d2/angular-data-visualization-preview.png)\n\n## Initializing application and installing dependencies\n\nTo get started, we will use the [CLI](https://cli.angular.io/) (command line interface) provided by the Angular team to initialize our project.\n\nFirst, install the CLI by running `npm install -g @angular/cli`. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/en/) installed.\n\nTo create a new Angular project using the CLI, open a terminal and run:  \n`ng new angular-data-visualization --style=scss`\n\nThis command is used to initialize a new Angular project; the project will make use of SCSS for styling.\n\nNext run the following command in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher\n    \n    // front-end dependencies\n    npm install chart.js ng2-charts pusher-js\n```\nStart the Angular development server by running `ng serve` in a terminal in the root folder of your project.\n\n## Building our server\n\nWe’ll build our server using [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/).\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: 'eu',\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\nThe calls to our endpoint will be coming in from a different origin. Therefore, we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nThis is a standard Node application configuration, nothing specific to our app.\n\nCreate a Pusher account and a new Pusher Channels app if you haven’t done so yet and get your `appId`, `key` and `secret`. Create a file in the root folder of the project and name it `.env`. Copy the the following snippet into the `.env` file and ensure to replace the placeholder values with your Pusher credentials.\n\n```\n    // .env\n    \n    // Replace the placeholder values with your actual pusher credentials\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_KEY=PUSHER_KEY\n    PUSHER_SECRET=PUSHER_SECRET\n```\nWe’ll make use of the `dotenv` library to load the variables contained in the `.env` file into the Node environment. The `dotenv` library should be initalized as early as possible in the application.\n\n### Send votes\n\nTo let users send requests to the server, we’ll create a route to handle incoming requests. Update your `server.js`  file with the code below. \n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      ...\n    });\n    \n    \n    app.post('/vote', (req, res) =\u003e {\n      const {body} = req;\n      const data = {\n        ...body,\n        // set the selected property of the body to true\n        selected: true,\n      };\n      // trigger a new-entry event on the vote-channel\n      pusher.trigger('vote-channel', 'new-entry', data);\n      res.json(data);\n    });\n    \n     ...\n```\n\n- We added a POST route(`/vote`) to handle incoming requests.\n- Using [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment), we got the body of the request.\n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`vote-channel`), an event name (`new-entry`), and a payload.\n- The payload being sent contains the body of the request sent in. The `selected` property of the payload is set to `true`.\n\n\n## Home view\n\nThe home view of the project will house both the polling area and the area where the data is visualized. Both views will appear side by side.\n\nOpen the `app.component.html` file and replace it with the content below.\n\n``` html\n    // app.component.html\n    \n    \u003cdiv class=\"main\"\u003e\n      \u003cdiv class=\"section census\"\u003e\n        \u003ch4\u003eAge Demographics\u003c/h4\u003e\n        \u003cp\u003eSelect your age range\u003c/p\u003e\n    \n        \u003cdiv class=\"option-list\"\u003e\n          \u003cbutton class=\"option\" *ngFor=\"let option of options; index as i\" (click)=\"takeVote(i)\" [ngClass]=\"{selected: option.selected}\"\n          \n                  [disabled]=\"selectedOption \u0026\u0026 selectedOption !== option.value\"\u003e\n            \u003ci class=\"fas fa-check\" *ngIf=\"option.selected\"\u003e\u003c/i\u003e\n            {{option.label}}\n          \u003c/button\u003e\n        \u003c/div\u003e\n        \u003cp class=\"error\"\u003e{{message}}\u003c/p\u003e\n      \u003c/div\u003e\n    \n      \u003cdiv class=\"section data\"\u003e\n        \u003c!-- Include the chart component here --\u003e\n      \u003c/div\u003e\n    \n    \u003c/div\u003e\n```    \n\n\n- In the code snippet above, we looped through `options` to create a view based on the player’s information. \n- The `takeVote` method will make use of the `HttpClient`  to send the user’s selection as a request to the server.\n- We append a `selected` class if the `option`'s selected property is true.\n- Options are disabled if the current `selectedOption` isn’t equal to the option’s `value`.\n\nVariables used will be defined in the component’s Typescript file.\n\n### Styling\n\n``` scss\n    // app.component.scss\n    \n    $buttonShadow: #ca6eca + 120;\n    .main {\n      display: flex;\n      padding-top: 5%;\n      .section {\n        padding: 20px;\n      }\n      .section.census {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      }\n      .data{\n        flex: 2;\n      }\n    }\n    p.error{\n      font-size: 13px;\n      color: red + 100;\n      margin: 5px 0;\n    }\n    h4 {\n      margin-bottom: 8px;\n      font-size: 13px;\n      text-transform: uppercase;\n      color: #ca6eca;\n      font-weight: bold;\n      letter-spacing: 0.4px;\n    }\n    p {\n      margin: 5px 0;\n    }\n    div.option-list {\n      padding-left: 0;\n      width: 200px;\n      display: flex;\n      flex-direction: column;\n      button.option {\n        padding: 15px;\n        box-shadow: 0 2px 4px 0 $buttonShadow;\n        margin: 7px 0;\n        background: #ca6eca;\n        color: white;\n        border-radius: 5px;\n        cursor: pointer;\n        font-size: 12px;\n        text-transform: uppercase;\n        font-weight: bold;\n        .fas {\n          font-size: 1.2em;\n          margin-right: 10px;\n        }\n      }\n      button[disabled] {\n        background: #ca6eca;\n        box-shadow: none;\n        cursor: default;\n      }\n      button.selected {\n        background: #ca6eca + 50;\n      }\n      button:focus {\n        background: #ca6eca + 50;\n        outline: none;\n      }\n    }\n```    \n    \n\nThese styles are meant to add a bit of life to our application. It also helps distinguish between states during application use. \n\nAlso, we’ll be using the FontAwesome icon set for our project and the Roboto font. Include a link to their respective stylesheets in the `index.html`  file.\n\n``` html\n    // index.html\n    \n    \u003chead\u003e\n      ...\n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n      \u003clink href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700\" rel=\"stylesheet\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.0.12/css/all.css\" integrity=\"sha384-G0fIWCsCzJIMAVNQPfjH08cyYaUtMwjJwqiRKxxE/rx96Uroj1BtIQ6MLJuheaO9\" crossorigin=\"anonymous\"\u003e\n      ...\n    \u003c/head\u003e\n    ...\n```      \n\nThen we’ll select Roboto as our default font family. Open the `styles.scss` file and update it with the following content: \n\n``` scss\n    // styles.scss\n    \n    body{\n      font-family: 'Roboto', sans-serif;\n    }\n```    \n\n### App component\n\nIn the html snippet, we made reference to some variables that weren’t yet defined, we’ll create the variables here with the logic behind our application. \n\n``` typescript\n    // app.component.ts\n    \n    import {Component, OnInit} from '@angular/core';\n    import {HttpClient} from '@angular/common/http';\n    export interface Option {\n      label: string;\n      selected: boolean;\n      value: string;\n    }\n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.scss']\n    })\n    export class AppComponent implements OnInit {\n      constructor(private http: HttpClient) {\n      }\n      selectedOption = null;\n      message: string = '';\n      options: Option[] = [\n        {\n          label: '14 - 25',\n          selected: false,\n          value: '14-25'\n        },\n        {\n          label: '25 - 35', \n          selected: false, \n          value: '25-35'\n        },\n        {\n          label: '35 - 45',\n          selected: false,\n          value: '35-45'\n        },\n        {\n          label: '45 - 60',\n          selected: false,\n          value: '45-60'\n        },\n        {\n          label: '60 and above', \n          selected: false, \n          value: '60+'\n        }\n      ];\n      censusData = {\n        '14-25': 0,\n        '25-35': 0,\n        '35-45': 0,\n        '45-60': 0,\n        '60+': 0\n      };\n      takeVote(index) {\n        const selectedOption = this.options[index];\n        if (!selectedOption.selected) {\n          this.http\n            .post('http://localhost:4000/vote', selectedOption)\n            .subscribe((res: Option) =\u003e {\n              const options = this.options.map(\n                (option, i) =\u003e (index === i ? { ...res } : { ...option })\n              );\n              this.options = [...options];\n              this.selectedOption = res.value;\n            });\n        }\n        else{\n          this.message = \"You've already placed a vote\";\n        }\n      }\n      onNewEntry(data) {\n        this.censusData[data.value] += 1;\n      }\n      ngOnInit() {\n      }\n    }\n```\n\n- `takeVote`: this method makes use of the native HttpClient service to make requests to our server. A request is sent, only if the user hasn’t made a previous selection. When a response is returned, it loops through the available `options` and replaces the selected option with the data returned from the request. The `selectedOption` property is then set to the value of the response.\n\n\n- `censusData`:  this will be used when we create the charts view. \n\n\n- `onNewEntry`: this method will be used to update the `censusData` whenever there’s a new Pusher event. We’ll use this method after we’ve created the chart component.\n\nTo make use of the HttpClient service, we’ll need to import the `HttpClientModule` into the `app.module.ts` file. Update your app module file as follows:\n\n``` typescript\n    // app.module.ts\n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule } from '@angular/core';\n    import { AppComponent } from './app.component';\n    import {HttpClientModule} from '@angular/common/http';\n    \n    ....\n    @NgModule({\n      declarations: [AppComponent],\n      imports: [BrowserModule, HttpClientModule],\n      providers: [],\n      bootstrap: [AppComponent],\n    })\n      ....\n```\n\nLet’s check how our application looks at this point. Make sure the server(`node server`) and Angular’s dev server(`ng serve`) are both running.\n\n![angular-data-visualization-stage-1](//images.ctfassets.net/1es3ne0caaid/5ghTCbycXYE4UY4wAQsAEq/09fc04236c8afaa93e808aaf73d42801/angular-data-visualization-stage-1.png)\n\n## Introducing Pusher\n\nSo far we have an application that allows users be a part of the polling process but data updates aren’t happening in realtime.  Let’s create a service that will make it easier to include Pusher in our components.\n\nTo make the pusher library available in our project, add the library as a third party script to be loaded by Angular CLI. All CLI config is stored in `.angular-cli.json` file. Modify the `scripts` property to include the link to `pusher.min.js`.\n\n``` json\n    // .angular-cli.json\n    ...\n    \"scripts\": [\n      \"../node_modules/pusher-js/dist/web/pusher.min.js\",\n    ]\n     ...\n```          \n\nAfter updating this file, you’ll need to restart the angular server so that the CLI compiles the new script files added.\n\nNow we’ll create a Pusher service to be used application wide. The Angular CLI can aid in the service creation.  Open a terminal in your project’s root folder and run the following command.\n\n```\nng generate service pusher\n```\n\nThis command simply tells the CLI to generate a service named `pusher`. Now open the `pusher.service.ts` file and update it with the code below.\n\n``` typescript\n    // pusher.service.ts\n    import { Injectable } from '@angular/core';\n    declare const Pusher: any;\n    \n    @Injectable()\n    export class PusherService {\n      constructor() {\n        const pusher = new Pusher('PUSHER_KEY', {\n          cluster: 'eu',\n        });\n        this.channel = pusher.subscribe('vote-channel');\n      }\n      channel;\n      public init() {\n        return this.channel;\n      }\n    }\n```\n\n- First, we initialize Pusher in the constructor. \n- The  `init` method returns the Pusher property we created. \n\n\n\u003e **Note**: ensure you replace the `PUSHER_KEY` string with your actual Pusher key.\n  \n\nTo make the service available application wide, import it into the `app.module.ts` file.\n\n``` typescript\n    // app.module.ts\n    import {PusherService} from './pusher.service'\n    ...\n    \n    @NgModule({\n       ....\n       providers: [PusherService],\n       ....\n     })\n```\n \n\n## Charts component\n\nTo visualize the data in our application, we’ll be making use of [Chart.js](http://www.chartjs.org/) to create charts and present the data in a graphical format. Let’s create the charts component using the CLI by running the following command:\n\n```\n    ng generate component charts\n```\nOpen the `charts.component.html` file and update it with the contents below:\n\n``` html\n    // charts.component.html\n    \n    \u003cdiv\u003e\n      \u003ccanvas baseChart [chartType]=\"chartType\" [labels]=\"chartLabels\" [data]=\"chartData\"\u003e\n      \u003c/canvas\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"stats\"\u003e\n      \u003cdiv class=\"stat\"\u003e\n        \u003cdiv class=\"header\"\u003e\n          \u003cp\u003eTotal Pop.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"body\"\u003e\u003ch4\u003e{{totalPopulation}}\u003c/h4\u003e\u003c/div\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"stat\"\u003e\n        \u003cdiv class=\"header\"\u003e\n          \u003cp\u003ePop. under 35\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"body\"\u003e\n          \u003ch4\u003e{{under35 || 0}}\u003c/h4\u003e\n          \u003cspan class=\"percent\"\u003e%\u003c/span\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"stat\"\u003e\n        \u003cdiv class=\"header\"\u003e\n          \u003cp\u003ePop. between 35 and 60\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"body\"\u003e\n          \u003ch4\u003e{{between35and60 || 0}}\u003c/h4\u003e\n          \u003cspan class=\"percent\"\u003e%\u003c/span\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"stat\"\u003e\n        \u003cdiv class=\"header\"\u003e\n          \u003cp\u003ePop. above 60\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"body\"\u003e\n          \u003ch4\u003e{{above60 || 0}}\u003c/h4\u003e\n          \u003cspan class=\"percent\"\u003e%\u003c/span\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\nStyle up the component by adding the following styles to the `charts.component.scss` file:\n\n``` scss\n    // charts.component.scss\n    \n    .stats {\n      display: flex;\n      margin-top: 30px;\n      .stat {\n        flex: 1;\n        box-shadow: 0 2px 4px 0 rgba(0,0,0,0.10);\n        margin: 0 15px;\n        background: rgba(0, 0, 0, 0.05);\n        .header {\n          background: white;\n          padding: 10px 5px;\n          p {\n            font-size: 12px;\n            margin: 0;\n            font-weight: bold;\n            text-transform: uppercase;\n            letter-spacing: -.4px;\n            text-align: center;\n            opacity: .7;\n          }\n        }\n        .body {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          padding: 15px;\n          h4 {\n            text-align: center;\n            font-size: 30px;\n            font-weight: 300;\n            opacity: 0.8;\n          }\n          .percent{\n            font-size: 32px;\n          }\n        }\n      }\n    }\n```\n\n\nAdd the following content to the `charts.component.ts` file:\n\n``` typescript\n    // charts.component.ts\n    \n    import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n    import {PusherService} from '../pusher.service';\n    import {Option} from '../app.component';\n    @Component({\n      selector: 'app-charts',\n      templateUrl: './charts.component.html',\n      styleUrls: ['./charts.component.scss']\n    })\n    export class ChartsComponent implements OnInit {\n      constructor(private pusher: PusherService) {\n      }\n      @Input() censusData = {};\n      @Output() newEntry: EventEmitter\u003cOption\u003e = new EventEmitter();\n      chartType = 'pie';\n      chartData = [];\n      chartLabels = [];\n      totalPopulation = 0;\n      under35 = 0;\n      between35and60 = 0;\n      above60 = 0;\n      \n      computeData() {\n        this.chartData = Object.values(this.censusData);\n        this.chartLabels = Object.keys(this.censusData);\n        this.totalPopulation = this.getTotalPopulation();\n        this.under35 = Math.round(this.getPopulationUnder35());\n        this.between35and60 = Math.round(this.getPopulationBetween35and60());\n        this.above60 = Math.round(this.getPopulationAbove60());\n      }\n      \n      getTotalPopulation() {\n        const values: number[] = Object.values(this.censusData);\n        return values.reduce((defaultValue, val) =\u003e defaultValue + val, 0);\n      }\n      \n      getPopulationUnder35() {\n        const total = this.getTotalPopulation();\n        const populationUnder35 = Object.keys(this.censusData).reduce(\n          (initVal, val) =\u003e {\n            if (val === '14-25' || val === '25-35') {\n              return initVal + this.censusData[val];\n            }\n            return initVal;\n          },\n          0\n        );\n        return populationUnder35 / total * 100;\n      }\n      \n      getPopulationBetween35and60() {\n        const total = this.getTotalPopulation();\n        const populationBetween35and60 = Object.keys(this.censusData).reduce(\n          (initVal, val) =\u003e {\n            if (val === '35-45' || val === '45-60') {\n              return initVal + this.censusData[val];\n            }\n            return initVal;\n          },\n          0\n        );\n        return populationBetween35and60 / total * 100;\n      }\n      \n      getPopulationAbove60() {\n        const total = this.getTotalPopulation();\n        const above60 = Object.keys(this.censusData).reduce((initVal, val) =\u003e {\n          if (val === '60+') {\n            return initVal + this.censusData[val];\n          }\n          return initVal;\n        }, 0);\n        return above60 / total * 100;\n      }\n      \n      ngOnInit() {\n        this.computeData();\n        const channel = this.pusher.init();\n        channel.bind('new-entry', (data: Option) =\u003e {\n          this.newEntry.emit(data);\n          this.computeData();\n        });\n      }\n    }\n```\n\n\nWe’ve defined a few methods for computing the data to be used in the view:\n\n- `getPopulation`: this method maps the values to an array and gets the total amount of people that took part in the polls.\n\n\n- `getPopulationUnder35`: this method checks for the percentage of the people under the age of 35 taking part in the polls.\n\n\n- `getPopulationBetween35and60`: in this method, we loop through the data and check for the percentage of users between the age of 35 and 60.\n\n\n- `getPopulationAbove60`: using this method we get the percentage of people over the age of 60.\n\n\n- Finally, in the `computeData` method, we run the different methods to get the required data for the view.\n\n\n- In the `ngOnInit` lifecycle, we call the `computeData` method. Also, we listen for the `new-entry`  event on the Pusher channel.\n\nTo make use of the `ng2-charts` package, we’ll have to import the `ChartsModule` into our module file. Also, we’ll have to load the `chart.js` into our application by including it into the `.angular-cli.json` file.\n\nUpdate the `app.module.ts` file like so:\n\n``` typescript\n    // app.module.ts\n    ...\n    import { ChartsComponent } from './charts/charts.component';\n    import {ChartsModule} from 'ng2-charts';\n    \n    @NgModule({\n      declarations: [\n        ...\n      ],\n      imports: [\n        BrowserModule,\n        HttpClientModule,\n        ChartsModule\n      ],\n      ...\n    })\n    ...\n```\nInclude the `chart.js` file in the `.angular-cli.json` file. Update the CLI file like so:\n\n``` json\n     // .angular-cli.json\n     ...\n      \"scripts\": [\n        \"../node_modules/pusher-js/dist/web/pusher.min.js\",\n        \"../node_modules/chart.js/dist/Chart.min.js\"\n      ],\n    ...\n```\n\nUpdate the `app.component.html` file to include the Charts component. \n\n``` html\n    // app.component.html\n    \u003cdiv class=\"main\"\u003e\n      \u003cdiv class=\"section census\"\n        ...\n      \u003c/div\u003e\n      \n      \u003cdiv class=\"section data\"\u003e\n        // include the charts component here\n        \u003capp-charts [censusData]=\"censusData\" (newEntry)=\"onNewEntry($event)\"\u003e\n        \u003c/app-charts\u003e\n      \u003c/div\n```\n\n\n At this point, your application should have realtime updates when votes are placed. Ensure that the server is running alongside the Angular development server. If not, run `node server` and `ng serve` in two separate terminals. Both terminals should be opened in the root folder of your project.\n \n![angular-data-visualization-preview](//images.ctfassets.net/1es3ne0caaid/2pLq90Q6FKCoIM640YKww8/ce513a337fbfcb2e2dbb55bb1daa30d2/angular-data-visualization-preview.png)\n\n \nTo test the realtime functionality of the application, open two browsers side-by-side and engage the application. Data updates should be in realtime.\n\n\n## Conclusion\n\nUsing Pusher,  we’ve built out an application using the pub/sub pattern to recieve realtime updates. With the help of Chart.js, our data was well presented using charts. You can check out the repo containing the demo on [GitHub](https://github.com/christiannwamba/angular-demographics).","metaTitle":"Build a data visualization using Angular and Chart.js","metaDescription":"This tutorial will guide you through building a simple web app with Angular, Node, Express and Chart.js. The app polls user ages and displays the results in a live graph."}}],"defaultValue":"Channels \u0026 Data Visualization","queryType":"tag","pages":2,"route":"/tutorials","query":{"product":"Channels","tag":"Data Visualization"}}},"page":"/tutorials","query":{"product":"Channels","tag":"Data Visualization"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Data%20Visualization by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:42:11 GMT -->
</html>