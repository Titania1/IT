<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?page=25 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:54 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1">Learn &amp; Discover Pusher</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="1v9vy9q">.css-1v9vy9q{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;text-align:center;}@media all and (min-width:400px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1v9vy9q a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1v9vy9q a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:400px){.css-1v9vy9q{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1v9vy9q{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1v9vy9q{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1v9vy9q{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}</style><p scale="h5" class="css-1v9vy9q e5jrto45"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">447</span> tutorials to help you build great apps</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials0e67.html?product=Channels" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials1bbb.html?product=Beams" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value=""/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:none;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/live-logs-dashboard-laravel.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a live logs dashboard for Laravel</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This tutorial will show you how to create a live dashboard to output Laravel logging. You will take an existing app and ...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/emotion-recognition-tensorflow.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an emotion recognition application with Tensorflow.js</h3><p class="css-k12xad e5jrto45">Build a simple web app in Vue that takes input from a webcam and can learn to recognize emotions. Implement machine lear...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-graph-d3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live graph with D3.js</h3><p class="css-k12xad e5jrto45">In this short tutorial, create a simple live graph using D3.js. A basic Node backend sends data to a D3 bar graph, which...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/multiple-authentication-guards-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to use multiple authentication guards in a Laravel app</h3><p class="css-k12xad e5jrto45">This tutorial guides you through setting up multiple authentication guard in a Laravel web app. You will provide multipl...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/localized-laravel-part-4.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a localized app with Laravel - Part 4: Frontend with multi-language styling</h3><p class="css-k12xad e5jrto45">This four-part series explores how to build an accessible localized application in Laravel. In part four, we will focus ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chatbot-preact-witai.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to build a chatbot with Preact and Wit.ai</h3><p class="css-k12xad e5jrto45">Build a chatbot using Preact and Wit.ai, with a Node.js backend. Create custom entities, and implement realtime function...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-blog-kubeless.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kubernetes<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Adding realtime functionality to a blog using Kubeless</h3><p class="css-k12xad e5jrto45">In this tutorial you will create a simple blog using serverless architecture for the backend, specifically Kubeless. You...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/localized-laravel-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a localized app with Laravel - Part 3: Creating multi-language string maps</h3><p class="css-k12xad e5jrto45">This four-part series explores how to build an accessible localized application in Laravel. In part three, we will imple...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/game-python-vue.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Gaming<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a two-player game with Python and Vue</h3><p class="css-k12xad e5jrto45">Build a simple two-player game featuring online presence and realtime interactions. Use Python for the backend, and Vue ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials1d82.html?page=24" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials2679.html?page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials89ae.html?page=23" class="css-za1ua3 edg0byb1">23</a><a href="tutorials1d82.html?page=24" class="css-za1ua3 edg0byb1">24</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials8c06.html?page=25" class="css-2wakph edg0byb1">25</a><a href="tutorials19d2.html?page=26" class="css-za1ua3 edg0byb1">26</a><a href="tutorials2459.html?page=27" class="css-za1ua3 edg0byb1">27</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials02d1.html?page=50" class="css-5s6711 edg0byb1">50</a><a href="tutorials19d2.html?page=26" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":447,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1n7dg6CWJagGQsgUGOIeIS","type":"Entry","createdAt":"2018-08-29T20:43:23.190Z","updatedAt":"2018-08-29T20:43:23.190Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a live logs dashboard for Laravel","url":"live-logs-dashboard-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/realtime-laravel-logs","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}}],"reviewDate":"2018-08-29","description":"This tutorial will show you how to create a live dashboard to output Laravel logging. You will take an existing app and extend it, modifying the logging outputs and adding new logging.","prerequisite":"You will need PHP 7.2+ and Composer installed on your machine.","content":"In this tutorial, we’ll make use of these concepts to display our Laravel logs on a dashboard in realtime using Pusher Channels.\n\nIn an earlier tutorial, we looked at [how to use the new log stacks and channels](https://blog.pusher.com/log-channels-stacks-laravel/) introduced in Laravel 5.6. \n\n\n## Prerequisites\n1. PHP 7.2 or newer.\n2. [Composer](http://getcompocer.org).\n3. A Pusher account. Create one [here](https://pusher.com/signup).\n\n\n## Setting up\n\nWe’ll start off with an existing project so we can observe how the logs work. We’ll use a small stock application I built. You can clone the project from GitHub by running:\n\n```\n    git clone https://github.com/shalvah/stockt.git realtime-laravel-logs\n```\n\nYou can also download the source directly from [this link.](https://github.com/shalvah/stockt/archive/master.zip) \n\nThen `cd` into the project folder and install dependencies:\n\n```\n    composer install\n```\n\nNext, copy the `.env.example` to a new file called `.env`. Run the following command to generate an application encryption key:\n\n```\n    php artisan key:generate\n```\n\nLastly, create a file called `database.sqlite` in the `database` directory and run the following command to set up and populate the database:\n\n```\n    php artisan migrate --seed\n```\n\n## Configuring the Pusher handler\n\nRun the following command to add the `monolog-pusher` package:\n\n```\n    composer require shalvah/monolog-pusher\n```\n\nThis package will be doing the heavy lifting. Laravel’s logging system is powered by Monolog, which uses **handlers** to define where a log gets sent to. For instance, the `FileHandler` sends logs to a file, the `EmailHandler` sends logs to a specified email address, and so forth. You can view a list of available handlers [here](https://github.com/Seldaek/monolog/blob/master/doc/02-handlers-formatters-processors.md#handlers). This package provides us with a `PusherHandler` which sends logs to a Pusher channel.\n\nWe’re going to configure Laravel’s log component to use Monolog, with the `PusherHandler` as its handler. To do this, we’ll register a new **channel** that uses the `monolog` driver. Open up your `config/logging.php` and add the following to the `channels` array:\n\n``` php\n    // config/logging.php\n    \n    \n    'realtime' =\u003e [\n        'driver' =\u003e 'monolog',\n        'handler' =\u003e \\Shalvah\\MonologPusher\\PusherHandler::class,\n        'with' =\u003e [\n            'pusher' =\u003e [\n                env('PUSHER_APP_KEY'),\n                env('PUSHER_APP_SECRET'),\n                env('PUSHER_APP_ID'),\n                [\n                    'cluster' =\u003e env('PUSHER_APP_CLUSTER')\n                ]\n            ],\n            'level' =\u003e \\Monolog\\Logger::DEBUG\n        ],\n    ],\n```\n\n\u003e **Note**: “realtime” is just an arbitrary name we chose for our log channel. We could equally use “chimichanga”.\n\nThe configuration is pretty easy to understand. We specify the `driver` as `monolog`, and the `handler` as the `PusherHandler`.  In the `with` array, we specify the parameters to be passed to the constructor of the `handler`, which in this case are our `Pusher` credentials and the minimum log level we want this handler to catch.\n\nYou’ll then need to add your Pusher app credentials to the `.env` file:\n\n```\n    PUSHER_APP_ID=your-app-id\n    PUSHER_APP_KEY=your-app-key\n    PUSHER_APP_SECRET=your-app-secret\n    PUSHER_APP_CLUSTER=your-app-cluster\n```\n\n## Viewing logs\n\nWe need to add a page to our app where we can view our logs. Let’s add a new route:\n\n``` php\n    // routes/web.php\n    \n    Route::view('logs', 'logs')-\u003emiddleware('auth');\n```    \n\nThis route will render the view `logs.blade.php` whenever we visit `/logs`. Create the file `resources/views/logs.blade.php` with the following content:\n\n``` php\n    @extends('layouts.app')\n    \n    @section('content')\n        \u003cdiv class=\"container\"\u003e\n            \u003ch2\u003eLogs\u003c/h2\u003e\n            \u003cdiv class=\"list-group\" id=\"logs\"\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003cscript src=\"https://code.jquery.com/jquery-3.3.1.min.js\"\n                integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\"\n                crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n    \n        \u003cscript\u003e\n            function displayLog(data) {\n                let $log = $('\u003cdiv\u003e').addClass('list-group-item')\n                    .html(`\u003cpre\u003e\u003ccode\u003e${JSON.stringify(data, null, 4)}\u003c/code\u003e\u003c/pre\u003e`);\n                $('#logs').prepend($log);\n            }\n        \u003c/script\u003e\n        \u003cscript\u003e\n            var socket = new Pusher(\"your-app-key\", {\n                cluster: 'your-app-cluster',\n            });\n            socket.subscribe('{{ config('app.env') }}')\n                .bind('log', displayLog);\n        \u003c/script\u003e\n    @endsection\n```    \n\nDon’t forget to replace `your-app-key` and `your-app-cluster` with their real values.\n\nHere, we subscribe to the Pusher channel and listen for the `log` event. When there is a new log, we format it and display it on the page.\n\n\n\u003e **Note**: the name of the Laravel log channel (“realtime”) is different from the name of the Monolog log channel. Laravel uses the name of the current app environment (`config('app.env')`) as the name of the Monolog log channel. This is what also gets used as the Pusher channel.\n\n\nNow let’s test it out. We’ll add a few logging calls at random places in our app.\n\nOpen up the `ProductsController` and modify the `index` method so it looks like this:\n\n``` php\n    // app/Http/Controllers/ProductController.php\n    \n    public function index()\n    {\n        Log::channel('realtime')-\u003einfo(request()-\u003euser()-\u003ename.' is viewing all products!');\n        return view('products.index', ['products' =\u003e Product::all()]);\n    }\n\nAlso, modify the `show` method so it looks like this:\n\n\n    // app/Http/Controllers/ProductController.php\n    \n    public function show()\n    {\n        Log::channel('realtime')-\u003edebug(request()-\u003euser()-\u003ename.\" is viewing the product with ID {$product-\u003eid}!\");\n        return view('products.show', ['product' =\u003e $product]);\n    }\n```\n\nDon’t forget to import the `Log` class at the top via `use Illuminate\\Support\\Facades\\Log;`.\n\nBy calling `Log::channel('realtime')`, we’re explicitly telling Laravel to broadcast this particular log message over the `realtime` channel we created earlier.\n\nLet’s see our realtime logs in action. Start the app by running `php artisan serve`. \n\nLog in at http://localhost:8000/login with *admin@stockt.test* as email and *secret* as password. Now open up the logs page (http://localhost:8000/logs) in one tab and the products page (http://localhost:8000/products) in another. Try to navigate across a few products. You should see the logs page update similar to this:\n\n![laravel-live-logs-demo](//images.ctfassets.net/1es3ne0caaid/6oeOcE3VReyQKeeUUOsE6k/40ea963e47eda8eb489ec93ee884075b/laravel-live-logs-demo.gif)\n\n## Making Pusher our default logger\n\nYou’ll notice that every time we wanted to use the realtime logger, we had to call `Log::channel('realtime')` first. We can get rid of this step by making the `realtime` logger our default logger. To do this, set the `LOG_CHANNEL` variable in your `.env` file to `realtime`.\n\n```\n    LOG_CHANNEL=realtime\n```\n\n\u003e Laravel sometimes caches app config, so you might need to run `php artisan config:clear` after making a change to your `.env` file for the change to reflect\n\nNow, in our code snippets above we can simply write:\n\n```\n        Log::info(request()-\u003euser()-\u003ename.\" is viewing all products!\");\n```\n\nAnd logs will get sent to Pusher.\n\n## Combining loggers using a stack\n\nSupposing we want to see our logs in realtime, but we also want to persist them to a file or database. Laravel 5.6 allows us to do this by using a **stack.** A stack combines two or more channels into one.\n\nYou can create a stack dynamically by using the `stack` method:\n\n``` php\n    Log::stack(['single', 'realtime'])-\u003einfo(\"Someone is viewing all products!\");\n```\n\n\u003e ‘single’ is the name of the default Laravel channel that writes to a single file, `storage/logs/laravel.log`\n\nAlternatively, you can configure a stack in your `config/logging.php`, by adding a new entry in the `channels` array, this time using the `stack` driver:\n\n``` php\n    // config/logging.php\n    \n        'realtime-stack' =\u003e [\n            'driver' =\u003e 'stack',\n            'channels' =\u003e ['single', 'realtime'],\n        ],\n```\n\nNow, when we send log messages to this stack, they will be sent to both Pusher and the regular log file.\n\n\n## Conclusion\n\nIn this article, we’ve been able to send our application’s logs in realtime to our frontend using Pusher Channels. This is especially useful in applications where there is a need for realtime monitoring of actions. You can check out the source code of the completed application [on GitHub.](https://github.com/shalvah/realtime-laravel-logs)","metaTitle":"Create a live logs dashboard for Laravel","metaDescription":"Create a dashboard to display Laravel log outputs in realtime. Extend and modify an existing application to create custom logging, and display it live."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5xjXgZhNZKOgmyeOiAy0qa","type":"Entry","createdAt":"2018-08-28T17:25:17.268Z","updatedAt":"2020-06-19T13:47:39.290Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an emotion recognition application with Tensorflow.js","url":"emotion-recognition-tensorflow","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qeLNtkOw0ImAS2QcUcKcG","type":"Entry","createdAt":"2018-06-15T10:54:43.491Z","updatedAt":"2019-05-17T10:50:18.109Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Oreoluwa Ogundipe","url":"oreoluwa-ogundipe","email":"oreogundipe@gmail.com","twitter":"https://twitter.com/ogundipeore","github":"https://github.com/orehga","guestWriter":true}}],"projectRepo":"https://github.com/oreHGA/realtime-emotion-recognizer","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kaOeiCgZqsKQowY0KAQIY","type":"Entry","createdAt":"2018-08-08T16:33:51.998Z","updatedAt":"2018-08-08T16:33:51.998Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Machine Learning","url":"machine-learning","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-08-28","description":"Build a simple web app in Vue that takes input from a webcam and can learn to recognize emotions. Implement machine learning with Tensorflow in the browser, and create a basic Node backend to support realtime functionality.","prerequisite":"You will need Node 8.9+ and Yarn installed on your machine.","content":"In this tutorial, we will examine at how to use Tensorflow.js and Pusher to build a realtime emotion recognition application that accepts an face image of a user, predicts their facial emotion and then updates a dashboard with the detected emotions in realtime. A practical use case of this application will be a company getting realtime feedback from users when they roll out incremental updates to their application.\n\nWith the rapid increase in computing power and the ability of machines to make sense of what is going on around them, users now interact with intelligent systems in a lot of their daily interactions. From Spotify’s awesomely accurate discover weekly playlists to Google Photos being able to show you all pictures of “Gaby” in your gallery after identifying her in one picture, companies are now interested in ways they can leverage this “silver bullet” in their service delivery.\n\n## What we’ll build\n\n![tensorflow-feedback-demo](//images.ctfassets.net/1es3ne0caaid/3oVdBTMeGIUAMyusiE4KYy/c76127672a55ba31f54075be8862d99e/tensorflow-feedback-demo.gif)\n\n\nThe best part of this is that recognizing a users emotion happens right on the client side and the user’s image is never sent to the over to the server. All that is sent to the server is the emotion detected. This means, your users never have to be worry about you storing their images on your server. Let’s get to the good stuff now!\n\n\n## Prerequisites\n\n- Node installed on your machine (version 8.9 or above)\n- Yarn installed on your machine\n- Basic knowledge of Javascript\n\n\n## What is Tensorflow.js\n\nTensorflow.js is a JavaScript library that allows developers train and use machine learning models in the browser. This really changes the game because it means that users no longer need “super” machines to be able to run our models. Once they have a browser, they will be able to get stuff done. This also allows for developer who are more familiar with JavaScript get into building and using machine learning models without the need to learn a new programming language.\n\n## Getting started\n\nTo create the build the interface of our application, we are going to use Vue.js. Vue.js is a web framework used to build interactive interfaces with JavaScript. To get started, install the Vue CLI using the command:\n\n```\n    yarn global add @vue/cli\n```\n\nAfterwards, create a new Vue project using the command:\n\n```\n    vue create realtime-feedback\n```\n\nFollow the prompt to create the application using the using the Vue Router preset. This creates a starter Vue.js project which we will then update to fit our application.\n\n![tensorflow-feedback-vue-project](//images.ctfassets.net/1es3ne0caaid/1LGTtSFV8YcGOSwqQGcwyM/22c23ed092efdbcb80ec217066bfc683/tensorflow-feedback-vue-project.png)\n\nInstall the other JavaScript libraries you are going to use:\n\n```\n    yarn add axios @tensorflow/tfjs @tensorflow-models/knn-classifier @tensorflow-models/mobilenet \n```\n\nTo get users’ images and feed them to our model, we are going to make use of the a webcam class. Fetch the file from [here](https://github.com/oreHGA/realtime-emotion-recognizer/blob/master/src/assets/webcam.js) and add it to your `realtime-feedback/src/assets`  directory. Afterwards, go ahead and ahead and get the Pusher logo from [here](https://github.com/oreHGA/realtime-emotion-recognizer/blob/master/src/assets/pusher.jpg) and place it in the `realtime-feedback/src/assets` directory.\n\n### Creating the homepage component\n\nIn the `src/components` folder, create component titled `Camera`. Components allow us to split the user interface of application into reusable parts. Add the following markup to the new component:\n\n``` html\n    \u003c!-- src/components/Camera.vue --\u003e\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n          \u003cvideo autoplay playsinline muted id=\"webcam\" width=\"250\" height=\"250\"\u003e\u003c/video\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    [...]\n```\n\nAdd the following code below the closing template tag:\n\n``` javascript\n    // src/components/Camera.vue \n    \n    [...]\n    \u003cscript\u003e\n    import {Webcam} from '../assets/webcam'\n    \n    export default {\n      name: \"Camera\",\n      data: function(){\n          return {\n              webcam: null,\n          }\n      },\n      mounted: function(){\n          this.loadWebcam();\n      },\n      methods: {\n          loadWebcam: function(){\n              this.webcam = new Webcam(document.getElementById('webcam'));\n              this.webcam.setup();\n          }\n      }\n    };\n    \u003c/script\u003e\n```\n\nWhen this component is mounted, a webcam is loaded and the user can now actively see what is going on from their camera.\n\n\n## Application views\n\nOur application will have two basic views:\n\n- Homepage, where users will interact with and take pictures of themselves.\n- Dashboard, where you can see a summary of the emotions recognized in realtime.\n\n### Configuring the router\n\nTo allow for navigation between pages, we are going to make use of the Vue Router in our application. Go ahead and edit your `router.js` file to specify what pages to show on different routes:\n\n``` javascript\n    // src/router.js\n    import Vue from \"vue\";\n    import Router from \"vue-router\";\n    import Home from \"./views/Home.vue\";\n    import Dashboard from \"./views/Dashboard.vue\";\n    \n    Vue.use(Router);\n    \n    export default new Router({\n      mode: \"history\",\n      base: process.env.BASE_URL,\n      routes: [\n        {\n          path: \"/\",\n          name: \"home\",\n          component: Home\n        },\n        {\n          path: \"/dashboard\",\n          name: \"dashboard\",\n          component: Dashboard\n        }\n      ]\n    });\n```\n\nAlso, you need to ensure that you include the router in your `src/main.js` file like this:\n\n``` javascript\n    // src/main.js\n    import Vue from \"vue\";\n    import App from \"./App.vue\";\n    import router from \"./router\";\n    \n    Vue.config.productionTip = false;\n    \n    new Vue({\n      router,\n      render: h =\u003e h(App)\n    }).$mount(\"#app\");\n```\n\n## Creating the homepage\n\nOn the homepage, there are two basic modes, `train` mode and `test`  mode. To give us the ability to successfully recognize emotions, we are going to make use of a pretrained [MobileNet](https://github.com/tensorflow/tfjs-models/tree/master/mobilenet) and pass the result from the inference to train KNNClassifier for our different moods. In simpler terms, MobileNet is responsible for getting activations from the image and the KNNClassifier accepts the activation for a particular image and predicts which class the image activation belongs to by selecting the class the activation is closest to.\n\n\n\u003e More explanation on how predictions are generated will be shared later on in the article.\n\nCreate a new view in the `src/views/` directory of the project:\n\n```\n    touch src/views/Home.vue\n```\n\nThe homepage has the following template:\n\n``` html\n    \u003c!-- src/views/Home.vue --\u003e \n    \u003ctemplate\u003e\n      \u003cdiv class=\"train\"\u003e\n        \u003ctemplate v-if=\"mode == 'train'\"\u003e\n            \u003ch1\u003eTake pictures that define your different moods in the dropdown\u003c/h1\u003e\n        \u003c/template\u003e\n        \u003ctemplate v-else\u003e\n            \u003ch1\u003eTake a picture to let us know how you feel about our service\u003c/h1\u003e\n        \u003c/template\u003e\n        \u003cselect id=\"use_case\" v-on:change=\"changeOption()\"\u003e\n            \u003coption value=\"train\"\u003eTrain\u003c/option\u003e\n            \u003coption value=\"test\"\u003eTest\u003c/option\u003e\n        \u003c/select\u003e\n        \u003cCamera\u003e\u003c/Camera\u003e\n        \u003ctemplate v-if=\"mode == 'train'\"\u003e\n            \u003cselect id=\"emotion_options\"\u003e\n                \u003ctemplate v-for=\"(emotion, index) in emotions\"\u003e\n                    \u003coption :key=\"index\" :value=\"index\"\u003e{{emotion}}\u003c/option\u003e\n                \u003c/template\u003e\n            \u003c/select\u003e\n            \u003cbutton v-on:click=\"trainModel()\"\u003eTrain Model\u003c/button\u003e\n        \u003c/template\u003e\n        \u003ctemplate v-else\u003e\n            \u003cbutton v-on:click=\"getEmotion()\"\u003eGet Emotion\u003c/button\u003e\n        \u003c/template\u003e\n        \u003ch1\u003e{{ detected_e }}\u003c/h1\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    [...]\n```\n\nIf the selected mode is `train` mode, the camera module is displayed and a dropdown is presented for the user to train the different available classes. \n\n\n\u003e **Note**: In a real-world application, you’ll likely want to train your model before porting it to the web\n\nIf the `test` mode is selected, the user is then shown a button prompting them to take a picture of their face and allow the model predict their emotion.\n\nNow, let’s take a look at the rest of the `Home`  component and see how it all works:\n\n``` javascript\n    \u003c!-- src/view/Home.vue --\u003e\n    [...]\n    \n    \u003cscript\u003e\n    // @ is an alias to /src\n    import Camera from \"@/components/Camera.vue\";\n    import * as tf from '@tensorflow/tfjs';\n    import * as mobilenetModule from '@tensorflow-models/mobilenet';\n    import * as knnClassifier from '@tensorflow-models/knn-classifier';\n    import axios from 'axios';\n    \n    [...]\n```\n\nFirst import the `Camera` component, the Tensorflow.js library, the MobileNet model and the KNNClassifier. There are also other models available open source on the [Tensorflow Github](https://github.com/tensorflow/tfjs-models) repository.\n\nAfterwards, go ahead and then specify the data to be rendered to the DOM. Notice that there’s an array of the `emotions` that we train the model to recognize and predict. The other data properties include:\n\n- `classifer` - which will represent the KNNClassifier.\n- `mobilenet` - which will represents the loaded MobileNet model.\n- `class` - which represents the class to train. Used in `train` mode.\n- `detected_e` - which represents the emotion that model predicts. Used in `test` mode.\n- `mode` - which represents what mode is in use.\n\n``` javascript\n    // src/views/Home.vue\n    [...]\n    export default {\n      name: \"Home\"\n      components: {\n        Camera\n      },\n      data: function(){\n          return {\n              emotions: ['angry','neutral', 'happy'],\n              classifier: null,\n              mobilenet: null,\n              class: null,\n              detected_e: null,\n              mode: 'train',\n          }\n      },\n      \n    [...]\n```\n\nLet’s also add the methods to the `Home` component:\n\n``` javascript\n    // src/view/Home.vue\n    \n    [...]\n      mounted: function(){\n          this.init();\n      },\n      methods: {\n          async init(){\n            // load the load mobilenet and create a KnnClassifier\n            this.classifier = knnClassifier.create();\n            this.mobilenet = await mobilenetModule.load();\n          },\n          trainModel(){\n            let selected = document.getElementById(\"emotion_options\");\n            this.class = selected.options[selected.selectedIndex].value;\n            this.addExample();\n          },\n          addExample(){\n            const img= tf.fromPixels(this.$children[0].webcam.webcamElement);\n            const logits = this.mobilenet.infer(img, 'conv_preds');\n            this.classifier.addExample(logits, parseInt(this.class));\n          },\n    \n    [...]\n```\n\nWhen the component mounts on the DOM, the `init()` function is called. This creates an empty KNN Classifier and also loads the pretrained MobileNet module. When the `trainModel()` is called, we fetch the image from the camera element and then feed it to the MobileNet model for inference. This returns intermediate activations (logits) as Tensorflow tensors and then add it as an example for the selected class in the classifier. What have just done is also known as transfer learning. \n\nLet’s take a look at the methods that are called when in the `test` mode. When the `getEmotion()` method is called, we fetch the image and also obtain logits. Then we call the `predictClass` method of the classifier to fetch the class the image belongs to.\n\nAfter the emotion is obtained, we also call the `registerEmotion()` that sends the detected emotion over to a backend server.\n\n\n\u003e Notice here that the users image is never sent anywhere. Only the predicted emotion.\n\n\n``` javascript\n    // src/view/Home.vue\n    [...]\n          async getEmotion(){\n            const img = tf.fromPixels(this.$children[0].webcam.webcamElement);\n            const logits = this.mobilenet.infer(img, 'conv_preds');\n            const pred = await this.classifier.predictClass(logits);\n            this.detected_e = this.emotions[pred.classIndex];\n            this.registerEmotion();\n          },\n          changeOption(){\n              const selected = document.getElementById(\"use_case\");\n              this.mode = selected.options[selected.selectedIndex].value;\n          },\n          registerEmotion(){\n              axios.post('http://localhost:3128/callback', {\n                  'emotion': this.detected_e\n              }).then( () =\u003e {\n                  alert('Thanks for letting us know how you feel');\n              });\n          }\n        }\n    };\n    \u003c/script\u003e\n```\n\n## Adding realtime functionality with Pusher\n\n### Building the backend server\n\nLet’s see how to create the backend server that triggers events in realtime. Create a `server` folder inside your `realtime-feedback` folder and initialize an empty node project:\n\n```\n    mkdir server \u0026\u0026 cd server\n    yarn init\n```\n\nInstall the necessary modules for the backend server:\n\n```\n    yarn add body-parser cors dotenv express pusher\n```\n\nWe need a way to be able to trigger realtime events in our application when a new emotion is predicted. To do this, let’s use Pusher. Pusher allows you to seamlessly add realtime features to your applications without worrying about infrastructure. To get started, create a [developer account](https://pusher.com/signup). Once that is done, [create your application](https://dashboard.pusher.com/#wizard-modal) and obtain your application keys. \n\nCreate a `.env`  in your `server` directory to hold the environment variables for this application:\n\n```\n    touch .env\n```\n\nAdd the following to the `.env` file:\n\n```\n    PUSHER_APPID='YOUR_APP_ID'\n    PUSHER_APPKEY='YOUR_APP_KEY'\n    PUSHER_APPSECRET='YOUR_APP_SECRET'\n    PUSHER_APPCLUSTER='YOUR_APP_CLUSTER'\n```\n\nAfterward, create an `index.js` file in the `server`  directory and add the following to it:\n\n``` javascript\n    // server/index.js\n    require(\"dotenv\").config();\n    const express = require(\"express\");\n    const cors = require(\"cors\");\n    const bodyParser = require(\"body-parser\");\n    const Pusher = require(\"pusher\");\n    \n    // create express application\n    const app = express();\n    app.use(cors());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(bodyParser.json());\n    \n    // initialize pusher\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APPID,\n      key: process.env.PUSHER_APPKEY,\n      secret: process.env.PUSHER_APPSECRET,\n      cluster: process.env.PUSHER_APPCLUSTER,\n      encrypted: true\n    });\n    \n    //  create application routes\n    app.post(\"/callback\", function(req, res) {\n      // now that we are here just go ahead and then\n      pusher.trigger(\"emotion_channel\", \"new_emotion\", {\n        emotion: req.body.emotion\n      });\n      return res.json({ status: true });\n    });\n    \n    app.listen(\"3128\");\n```\n\nWe create a simple Express application, then initialize Pusher using the environment variables specified in the `.env`. Afterwards, we create a simple `/callback` route that is responsible for triggering a `new_emotion` event on the `emotion_channel` with the detected emotion passed as the body.\n\nNow, on the dashboard, we are listening on the `emotion_channel` for a `new_emotion` event. Let’s see how to do this:\n\n### Displaying detected emotions in realtime on the dashboard\n\nFirstly, add the Pusher minified script to your `index.html` file for use in our application:\n\n``` html\n    \u003c!-- public/index.html --\u003e \n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"utf-8\"\u003e\n      \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n      \u003cmeta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"\u003e\n      \u003clink rel=\"icon\" href=\"\u003c%= BASE_URL %\u003efavicon.ico\"\u003e\n      \u003ctitle\u003eRealtime Emotion Recognition Feedback Application\u003c/title\u003e\n      \u003cscript src=\"https://js.pusher.com/4.3/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003c/head\u003e\n    \n    \u003cbody\u003e\n      \u003cnoscript\u003e\n        \u003cstrong\u003eWe're sorry but the application doesn't work properly without JavaScript enabled. Please enable it to continue.\u003c/strong\u003e\n      \u003c/noscript\u003e\n      \u003cdiv id=\"app\"\u003e\u003c/div\u003e\n      \u003c!-- built files will be auto injected --\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nCreate a new Dashboard view in the `src/views` directory of the `realtime-feedback` application:\n\n```\n    touch src/views/Dashboard.vue\n```\n\nThe dashboard page has the following template:\n\n``` html\n    \u003c!-- src/views/Dashboard.vue --\u003e \n    \u003ctemplate\u003e\n      \u003cdiv class=\"dashboard\"\u003e\n        \u003ch1\u003eHere's a summmary of how users feel about your service in realtime\u003c/h1\u003e\n        \u003cdiv\u003e\n          \u003ctemplate v-for=\"(emotion, index) in emotions\"\u003e\n            \u003cdiv :key=\"index\"\u003e\n              \u003cstrong\u003e{{index}}\u003c/strong\u003e clients: {{ emotion }}\n            \u003c/div\u003e\n          \u003c/template\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    [...]\n```\n\nThe component only has one function `init()`  which we call when the component is mounted. The function creates a new Pusher object, subscribes to the `emotion_channel`  and then listens for a `new_emotion` event and then updates the feedback summary on the dashboard in realtime without any need to refresh the page. \n\nAdd the following to the Dashboard view:\n\n``` javascript\n    \u003c!-- src/views/Dashboard.vue --\u003e\n    [...]\n    \n    \u003cscript\u003e\n    export default {\n      name: \"Dashboard\",\n      data: function(){\n        return {\n          emotions: {\n            angry: 0,\n            neutral: 0,\n            happy: 0\n          },\n          pusher_obj: null,\n          e_channel: null,\n        }\n      },\n      mounted: function(){\n        this.init();\n      },\n      methods: {\n        init (){\n          // create a new pusher object\n          // PUSHER_APPKEY should be your pusher application key\n          this.pusher_obj = new Pusher('PUSHER_APPKEY',{\n              cluster: 'PUSHER_APPCLUSTER',\n              encrypted: true\n          });\n          // subscribe to channel\n          this.e_channel = this.pusher_obj.subscribe('emotion_channel');\n          // bind the channel to the new event and specify what should be done\n          let self = this;\n          this.e_channel.bind('new_emotion', function(data) {\n            //  increment the counnt for the emotion by one\n            self.emotions[`${data.emotion}`] += 1;\n          });\n        },\n      },\n    }\n    \u003c/script\u003e\n```\n\n\u003e **Note**: You’ll need to replace `PUSHER_APPKEY` and `PUSHER_APPCLUSTER` with your application key and cluster.\n\nFinally, the `src/App.vue` is responsible for rendering all our views and components. Edit your `src/App.vue` to look like this:\n\n``` html\n    \u003c!-- src/App.vue --\u003e\n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cimg alt=\"Pusher logo\" src=\"./assets/pusher.jpg\" height=\"100px\"\u003e\n        \u003crouter-view/\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cstyle\u003e\n    #app {\n      font-family: 'Avenir', Helvetica, Arial, sans-serif;\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n      text-align: center;\n      color: #2c3e50;\n    }\n    #nav {\n      padding: 30px;\n    }\n    \n    #nav a {\n      font-weight: bold;\n      color: #2c3e50;\n    }\n    \n    #nav a.router-link-exact-active {\n      color: #42b983;\n    }\n    \u003c/style\u003e\n```\n\nNow, we can take our application for a spin! Run the frontend server using the command:\n\n```\n    yarn serve\n```\n\nAnd in another terminal tab, navigate to the `server/` directory and then run the backend server using the command:\n\n```\n    node index.js\n```\n\nWhen you head over your application and navigate to `http://localhost:8080` in your browser to view the homepage. \n\nOpen  the `http://locahost:8080/dashboard`  route in another browser tab so you can see your results in realtime on the dashboard.\n\n\n\u003e **Note**: To allow you see how the training and testing process, you’ll need to train at least 10 samples for each of the 3 classes, also, the training data is lost on refresh of your browser. If you want to persist the trained model, you can save the trained model to your browser’s local storagea\n\n![tensorflow-feedback-demo](//images.ctfassets.net/1es3ne0caaid/3oVdBTMeGIUAMyusiE4KYy/c76127672a55ba31f54075be8862d99e/tensorflow-feedback-demo.gif)\n\n\n## Conclusion\n\nIn this tutorial, we went through how to create build a realtime emotion recognition application using Pusher, Tensorflow and  Vue.js in the browser without needing to send the image of the user to any external service. Feel free to explore more on machine learning and play with some awesome demos [here](https://js.tensorflow.org/). Here’s a link to the [GitHub](https://github.com/oreHGA/realtime-emotion-recognizer) repository. Happy hacking!","metaTitle":"Build an emotion recognition application with Tensorflow.js","metaDescription":"Use Tensorflow, Vue and Node to create a simple machine learning app. Users can train it to recognize their emotions based on their facial expression. This is used to power a feedback feature."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52mutvrmC48eK0IE8GoYUg","type":"Entry","createdAt":"2018-08-24T18:11:33.723Z","updatedAt":"2018-08-24T18:11:33.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live graph with D3.js","url":"live-graph-d3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/realtime-d3-graph","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-08-24","description":"In this short tutorial, create a simple live graph using D3.js. A basic Node backend sends data to a D3 bar graph, which updates live as new data is received.","prerequisite":"You will need Node and npm installed on your machine.","content":"Visual representations of data are one of the most effective means of conveying complex information and D3.js provides great tools and flexibility to create these data visualizations.\n\nD3.js is a JavaScript library used for producing dynamic, interactive data visualizations in web browsers using SVG, HTML and CSS.\n\nIn this tutorial, we'll explore how to build a realtime graph with D3.js and Pusher Channels. If you want to play around with the code as you read this tutorial, check out this [GitHub repository](https://github.com/ayoisaiah/realtime-d3-graph), which contains the final version of the code.\n\n## Prerequisites\n\nTo complete this tutorial, you need to have [Node.js](https://nodejs.org/en/download/) and [npm](https://www.npmjs.com/get-npm) installed. The versions I used while creating this tutorial are as follows:\n\n\n- Node.js v10.4.1\n- npm v6.3.0\n\nYou also need to have  [http-server](https://www.npmjs.com/package/http-server) installed on your machine. It can be installed through `npm` by running the following command: `npm install http-server`.\n\nAlthough no Pusher knowledge is required, a basic familiarity with JavaScript and D3.js will be helpful.\n\n## Getting started\n\nTo get started, create a new directory for the app we will build. Call it `realtime-graph`  or whatever you like. Inside the newly created directory, create a new `index.html` file and paste in the following code:\n\n``` html\n    //index.html\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"\u003e\n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n      \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"style.css\"\u003e\n      \u003ctitle\u003eRealtime D3 Chart\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \n      \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"https://d3js.org/d3.v5.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"app.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nAs you can see, the HTML file is just pulling up the styles and scripts we need to build the graph. We're making use of D3.js to build the chart and Pusher to add realtime functionality. The `app.js` file is where the code for the frontend of the app will be written.\n\nBefore we start implementing the chart, let's add the styles for the app in `style.css`:\n\n``` css\n    // style.css\n    \n    html {\n      height: 100%;\n      box-sizing: border-box;\n      padding: 0;\n      margin: 0;\n    }\n    \n    *, *::before, *::after {\n      box-sizing: inherit;\n    }\n    \n    body {\n      height: 100%;\n      font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;\n      overflow: hidden;\n      background: linear-gradient(135deg, #ffffff 0%,#e8f1f5 100%);\n    }\n    \n    .container {\n      position: absolute;\n      padding: 20px;\n      top: 50%;\n      left: 50%;\n      background-color: white;\n      border-radius: 4px;\n      transform: translate(-50%, -50%);\n      box-shadow: 0px 50px 100px 0px rgba(0,0,102,0.1);\n      text-align: center;\n    }\n    \n    .container h1 {\n      color: #333;\n    }\n    \n    .bar {\n      fill: #6875ff;\n      border-radius: 2px;\n    }\n    \n    .bar:hover {\n      fill: #1edede;\n    }\n    \n    .tooltip {\n      opacity: 0;\n      background-color: rgb(170, 204, 247);\n      padding: 5px;\n      border-radius: 4px;\n      transition: opacity 0.2s ease;\n    }\n```\n\n## Install the server dependencies\n\nAssuming you have Node and `npm` installed, run the following command to install all the dependencies we will need for the server component of the application:\n\n```\n    npm install express dotenv cors pusher\n```\n\n## Pusher setup\n\nHead over to the Pusher website and sign up for a free account. Select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app.\n\nOnce your app is created, retrieve your credentials from the API Keys tab, then add the following to a new `variables.env` file in the root of your project directory.\n\n```\n    // variables.env\n    \n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\n## Set up the server\n\nNow that we've installed the relevant dependencies and our Pusher account has been setup, we can start building the server.\n\nCreate a new file called `server.js` in the root of your project directory and paste in the following code:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    const express = require('express');\n    const cors = require('cors');\n    \n    const poll = [\n      {\n        name: 'Chelsea',\n        votes: 100,\n      },\n      {\n        name: 'Arsenal',\n        votes: 70,\n      },\n      {\n        name: 'Liverpool',\n        votes: 250,\n      },\n      {\n        name: 'Manchester City',\n        votes: 689,\n      },\n      {\n        name: 'Manchester United',\n        votes: 150,\n      },\n    ];\n    \n    const app = express();\n    app.use(cors());\n    \n    app.get('/poll', (req, res) =\u003e {\n      res.json(poll);\n    });\n    \n    app.set('port', process.env.PORT || 4000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nSave the file and run `node server.js` from the root of your project directory to start the server.\n\n## Set up the app frontend\n\nThe frontend of the application will be written in the `app.js` file we referenced earlier. Create this file in the root of your project directory and paste the following code therein:\n\n``` javascript\n    // app.js\n    \n    // set the dimensions and margins of the graph\n    const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n    const width = 960 - margin.left - margin.right;\n    const height = 500 - margin.top - margin.bottom;\n    \n    // set the ranges for the graph\n    const x = d3\n      .scaleBand()\n      .range([0, width])\n      .padding(0.1);\n    \n    const y = d3.scaleLinear().range([height, 0]);\n    \n    // append the container for the graph to the page\n    const container = d3\n      .select('body')\n      .append('div')\n      .attr('class', 'container');\n    \n    container.append('h1').text('Who will win the 2018/19 Premier League Season?');\n    \n    // append the svg object to the body of the page\n    // append a 'group' element to 'svg'\n    // moves the 'group' element to the top left margin\n    const svg = container\n      .append('svg')\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height + margin.top + margin.bottom)\n      .append('g')\n      .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n    \n    // Create a skeleton structure for a tooltip and append it to the page\n    const tip = d3\n      .select('body')\n      .append('div')\n      .attr('class', 'tooltip');\n    \n    // Get the poll data from the `/poll` endpoint\n    fetch('http://localhost:4000/poll')\n      .then(response =\u003e response.json())\n      .then(poll =\u003e {\n        // add the x Axis\n        svg\n          .append('g')\n          .attr('transform', 'translate(0,' + height + ')')\n          .attr('class', 'x-axis')\n          .call(d3.axisBottom(x));\n    \n        // add the y Axis\n        svg\n          .append('g')\n          .attr('class', 'y-axis')\n          .call(d3.axisLeft(y));\n    \n        update(poll);\n      });\n    \n    function update(poll) {\n      // Scale the range of the data in the x axis\n      x.domain(\n        poll.map(d =\u003e {\n          return d.name;\n        })\n      );\n    \n      // Scale the range of the data in the y axis\n      y.domain([\n        0,\n        d3.max(poll, d =\u003e {\n          return d.votes + 200;\n        }),\n      ]);\n    \n      // Select all bars on the graph, take them out, and exit the previous data set.\n      // Enter the new data and append the rectangles for each object in the poll array\n      svg\n        .selectAll('.bar')\n        .remove()\n        .exit()\n        .data(poll)\n        .enter()\n        .append('rect')\n        .attr('class', 'bar')\n        .attr('x', d =\u003e {\n          return x(d.name);\n        })\n        .attr('width', x.bandwidth())\n        .attr('y', d =\u003e {\n          return y(d.votes);\n        })\n        .attr('height', d =\u003e {\n          return height - y(d.votes);\n        })\n        .on('mousemove', d =\u003e {\n          tip\n            .style('position', 'absolute')\n            .style('left', `${d3.event.pageX + 10}px`)\n            .style('top', `${d3.event.pageY + 20}px`)\n            .style('display', 'inline-block')\n            .style('opacity', '0.9')\n            .html(\n              `\u003cdiv\u003e\u003cstrong\u003e${d.name}\u003c/strong\u003e\u003c/div\u003e \u003cspan\u003e${d.votes} votes\u003c/span\u003e`\n            );\n        })\n        .on('mouseout', () =\u003e tip.style('display', 'none'));\n    \n      // update the x-axis\n      svg.select('.x-axis').call(d3.axisBottom(x));\n    \n      // update the y-axis\n      svg.select('.y-axis').call(d3.axisLeft(y));\n    }\n```\n\nIn the code block above, we've created a basic bar chart using the initial data received via the `/poll` endpoint. If you're familiar with how D3 works, the code should be familiar to you. I've added comments in key parts of the code to walk you through how the chart is constructed.\n\nIn a new terminal, start a development server to serve the `index.html` file:\n\n```\n    npx http-server\n```\n\nI'm using `http-server` here, but you can use whatever server you want. You can even open `index.html` in the browser directly.\n\nAt this point, your graph should look like this:\n\n![d3-live-graph-demo-1](//images.ctfassets.net/1es3ne0caaid/1o84wR6Pe0skismygAmWso/3f7be1a24b263f6f454c3bfb5612b4a6/d3-live-graph-demo-1.png)\n\n## Update the graph in realtime with Pusher\n\nLet's make sure that updates to the poll can be reflected in the app's frontend in realtime with Pusher Channels. Paste the following code at the end of the `app.js` file.\n\n``` javascript\n    // app.js\n    \n    const pusher = new Pusher('\u003cyour app key\u003e', {\n      cluster: '\u003cyour app cluster\u003e',\n      encrypted: true,\n    });\n    \n    const channel = pusher.subscribe('poll-channel');\n    channel.bind('update-poll', data =\u003e {\n      update(data.poll);\n    });\n```\n\nHere, we opened a connection to Channels and used the `subscribe()` method from Pusher to subscribe to a new channel called `poll-channel`. Updates to the poll are listened for via the `bind` method, and the `update()` function is invoked with the latest data once an update is received so that the graph is re-rendered.\n\nDon’t forget to replace the `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e` placeholders with the appropriate details from your Pusher account dashboard.\n\n## Trigger updates from the server\n\nWe're going to simulate a poll that updates every second and use Pusher to trigger an update when the data changes so that subscribers to the poll (the client) can receive the updated data in realtime.\n\nAdd the following code at the top of `server.js` below the other imports:\n\n``` javascript\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    function getRandomNumber(min, max) {\n      return Math.floor(Math.random() * (max - min) + min);\n    }\n    \n    function increment() {\n      const num = getRandomNumber(0, poll.length);\n      poll[num].votes += 20;\n    }\n    \n    function updatePoll() {\n      setInterval(() =\u003e {\n        increment();\n        pusher.trigger('poll-channel', 'update-poll', {\n          poll,\n        });\n      }, 1000);\n    }\n```\n\nThen change the `/poll` endpoint to look like this:\n\n``` javascript\n    app.get('/poll', (req, res) =\u003e {\n      res.json(poll);\n      updatePoll();\n    });\n```\n\nThe `/poll` route sends the initial poll data to the client and calls the `updatePoll()` function which increments the votes for a random club at three second intervals and triggers an update on the `poll-channel` which we created on the client in the last step.\n\nKill your server and restart it by running `node server.js` from the root of your project directory. At this point, you should have a bar graph that updates in realtime.\n\n![d3-live-graph-demo-2](//images.ctfassets.net/1es3ne0caaid/4mcVBAhYFqAwWU4Mg2Uka2/97369a77dbfb7aa74e6871a7de1fc899/d3-live-graph-demo-2.gif)\n\n## Conclusion\n\nYou have seen the procedure for creating a bar graph with D3.js and how to it in realtime with Pusher Channels. It was easy enough, wasn't it?\n\nWe have covered a simple use case for Pusher and D3 but one that's only scratching the surface. I recommend digging into the [docs](https://pusher.com/docs) to find more about Pusher and other awesome features it has.\n\nThanks for reading! Remember that you can find the complete source code for this tutorial in this [GitHub repository](https://github.com/ayoisaiah/realtime-d3-graph).","metaTitle":"Build a live graph with D3.js","metaDescription":"Use Node and D3 to create a simple live graph. As data is received, the graph updates in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1F5T7jdKpSaeI0OaicWAQi","type":"Entry","createdAt":"2018-08-23T20:54:03.414Z","updatedAt":"2018-08-23T20:54:03.414Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to use multiple authentication guards in a Laravel app","url":"multiple-authentication-guards-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1N3HBqLEugWyeKsWEW0iYg","type":"Entry","createdAt":"2018-08-06T18:12:32.345Z","updatedAt":"2018-08-06T18:12:32.345Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Fisayo Afolayan","url":"fisayo-afolayan","email":"afolayanfisayo@gmail.com","twitter":"https://twitter.com/fisayoafolayan","github":"https://github.com/fisayoafolayan","guestWriter":true}}],"projectRepo":"https://github.com/fisayoafolayan/laravel-multiple-auth","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}}],"reviewDate":"2018-08-22","description":"This tutorial guides you through setting up multiple authentication guard in a Laravel web app. You will provide multiple authentication routes for different users, redirecting each user type to the appropriate content.","prerequisite":"You will need PHP 7+, Laravel 5.6+, Composer and Laravel installer. Some knowledge of PHP and Laravel will be helpful.","content":"If you have used [Laravel](https://laravel.com/) for a while, you should have heard a lot about multiple authentications. You should have also heard “guards” a whole lot. But if you are fairly new to Laravel, multiple authentications makes it possible for you to have different classes of users access different/similar parts of the same application.\n\n\nThere are many reasons why you may want to use multiple authentications in your Laravel application. For example, you have a large application that runs an entire company. Customers also interact with the product and services of the company through the same application. The application also has a blog and there is a department in the company responsible for handling the blog.\n\nWe can see from the application above that there are already three sets of users. For customers, we can have them use a certain authentication process to access the system. For writers, they could have a totally different authentication process and even have roles to enable a more robust content management process. For the rest of the company, you can have different roles representing different functions.\n\nNow, let us look at how to create multiple authentications for our different class of users.\n\n\n## Prerequisites\n1. Knowledge of [PHP](http://php.net/) (version \u003e= 7.1.3).\n2. Knowledge of [Laravel](https://laravel.com/) (version 5.6.x).\n3. [Composer](https://getcomposer.org/doc/00-intro.md) is installed on your computer (version \u003e= 1.3.2).\n4. [Laravel installer](https://laravel.com/docs/5.6/installation) is installed on your computer.\n\n\n## Getting started\n\nIf you checked off all the items on the prerequisites list, then this tutorial is already looking solid for you. We will create a Laravel app that has three user classes — admin, writer, user. We will make guards for the three user classes and restrict different parts of our application based on those guards.\n\n\n## Create the application\n\nWe need to create a new Laravel application. Run the following command on your terminal to create a new Laravel application:\n\n```\n    $ laravel new multi-auth\n    $ cd multi-auth\n```\n\n## Create the database\n\nWe will use SQLite database for our application. It is lightweight, fast and uses a simple flat file. Create a database file with the following command:\n\n```\n    $ touch database/database.sqlite\n```\n\nOpen the `.env` file in your application directory and change the following section:\n\n```\n    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_DATABASE=homestead\n    DB_USERNAME=homestead\n    DB_PASSWORD=secret\n```\n\nTo:\n\n```\n    DB_CONNECTION=/absolute/path/to/database.sqlite\n```\n\nThis will ensure our application uses the SQLite driver for database connections.\n\n## Creating migrations\n\nWe will make migrations for the admins and writers tables as Laravel comes with a users migration. They will be as simple as the users table, but you can extend them further based on your specific needs.\n\n\n## Create migration for admins\n\nTo make the admins table, run the following command:\n\n```\n    $ php artisan make:migration create_admins_table\n```\n\nFrom the `database/migrations` directory, open the admins migrations file and edit it as follows:\n\n``` php\n    // database/migrations/\u003ctimestamp\u003e_create_admins_table.php\n    \n    [...]\n    public function up()\n    {\n        Schema::create('admins', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003estring('name');\n            $table-\u003estring('email')-\u003eunique();\n            $table-\u003estring('password');\n            $table-\u003eboolean('is_super')-\u003edefault(false);\n            $table-\u003erememberToken();\n            $table-\u003etimestamps();\n        });\n    }\n    [...]\n```\n\nWe have created a simple migration and defined the columns we want the admin table to have. Eloquent provides methods that represent datatypes of our database table. We use them to define the datatypes of our table columns.\n\n\n\u003e Remember, you can always configure your table how you please.\n\n## Create migration for writers\n\nTo make the writers table, run the following command:\n\n```\n    $ php artisan make:migration create_writers_table\n```\n\nNow, open the writers migrations file and edit it as follows:\n\n``` php\n    database/migrations/\u003ctimestamp\u003e_create_writers_table.php\n    [...]\n    public function up()\n    {\n        Schema::create('writers', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003estring('name');\n            $table-\u003estring('email')-\u003eunique();\n            $table-\u003estring('password');\n            $table-\u003eboolean('is_editor')-\u003edefault(false);\n            $table-\u003erememberToken();\n            $table-\u003etimestamps();\n        });\n    }\n    [...]\n```\n\nWe just created a simple migration and defined the columns we want the writers table to have. Eloquent provides methods that represent datatypes of our database table, so it is easy to decide what we want each one to be.\n\n\n## Migrate the database\n\nNow that we have defined our tables, let us migrate the database:\n\n```\n    $ php artisan migrate\n```\n\n## Set up the models\n\nWe have different classes of users for our application, and they use different database tables. To use these different tables for authentication, we have to define models for them. These models will be like the user model and extends the Authenticable class.\n\n### Admin model\n\nTo make the model for the admins, run the following command:\n\n```\n    $ php artisan make:model Admin\n```\n\nOpen the Admin model in `app/Admin.php` and add the following:\n\n``` php\n    // app/Admin.php\n    \u003c?php\n    \n    namespace App;\n    \n    use Illuminate\\Notifications\\Notifiable;\n    use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n    \n    class Admin extends Authenticatable\n    {\n        use Notifiable;\n    \n        protected $guard = 'admin';\n    \n        protected $fillable = [\n            'name', 'email', 'password',\n        ];\n    \n        protected $hidden = [\n            'password', 'remember_token',\n        ];\n    }\n```\n\nWhen you intend to use a model for authentication, and you plan to not use the default user guard, it is important you specify the guard it will use. In our case, it will use the admin guard.\n\nWe also defined some of our database columns as fillable by putting them in the fillable array. This tells Laravel the following about the model:\n\n\n\u003e When I call your create or update method and I pass you an array, take only these items (read: items in the fillable array).\n\nThis way, we will prevent a scenario where a user can bypass any of our checks and insert or update a record we do not wish for them to update.\n\nFor the `hidden` array, we tell Laravel not to return those columns when we return the model to either our API or view.\n\n### Writers model\n\nTo make the model for the writers, run the following command:\n\n```\n    $ php artisan make:model Writer\n```\n\nThen open the `Writer` model and replace with the following:\n\n``` php\n    // app/Writer.php\n    \u003c?php\n    \n    namespace App;\n    \n    use Illuminate\\Notifications\\Notifiable;\n    use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n    \n    class Writer extends Authenticatable\n    {\n        use Notifiable;\n    \n        protected $guard = 'writer';\n    \n        protected $fillable = [\n            'name', 'email', 'password',\n        ];\n    \n        protected $hidden = [\n            'password', 'remember_token',\n        ];\n    }\n```\n\n## Define the guards\n\nLaravel guards define how users are authenticated for each request. Laravel comes with some guards for authentication, but we can also create ours as well. This will enable us to use Laravel’s default authentication system with our `Admin` and `Writer` models as well.\n\nOpen `config/auth.php` and add the new guards edit as follows:\n\n``` php\n    // config/auth.php\n    \n    \u003c?php\n    \n    [...]\n    'guards' =\u003e [\n        [...]\n        'admin' =\u003e [\n            'driver' =\u003e 'session',\n            'provider' =\u003e 'admins',\n        ],\n        'writer' =\u003e [\n            'driver' =\u003e 'session',\n            'provider' =\u003e 'writers',\n        ],\n    ],\n    [...]\n```\n\nWe added two new guards `admin` and `writer` and set their providers. These providers tell Laravel what to use for authentication or validation when we try to use the guard.\n\nNow, add the following to the providers array:\n\n``` php\n    // config/auth.php\n    \n    [...]\n    'providers' =\u003e [\n        [...]\n        'admins' =\u003e [\n            'driver' =\u003e 'eloquent',\n            'model' =\u003e App\\Admin::class,\n        ],\n        'writers' =\u003e [\n            'driver' =\u003e 'eloquent',\n            'model' =\u003e App\\Writer::class,\n        ],\n    ],\n    [...]\n```\n\nNow, we have set up the providers we defined along with the guards above. We set the driver to be `eloquent` since we are using Eloquent ORM as our database manager.\n\nLet’s say we wish to use another ORM like [RedBeanPHP](https://redbeanphp.com/index.php) for managing our database, we can then set the driver to say `redbeanphp` instead of `eloquent`. For the model, we pass the model we want that provider to use.\n\n\n## Set up the controllers\n\nTo use our guards for authentication, we can either modify the existing authentication controllers or create new ones. You can choose which to use based on your specific needs. In this tutorial, we will modify these controllers.\n\n### Modify LoginController\n\nOpen the `LoginController` in `app/Http/Controllers/Auth` and edit as follows:\n\n``` php\n    // app/Http/Controllers/Auth/LoginController.php\n    \n    \u003c?php\n    \n    namespace App\\Http\\Controllers\\Auth;\n    \n    use App\\Http\\Controllers\\Controller;\n    use Illuminate\\Foundation\\Auth\\AuthenticatesUsers;\n    [...]\n    use Illuminate\\Http\\Request;\n    use Auth;\n    [...]\n    class LoginController extends Controller\n    {\n        [...]\n        public function __construct()\n        {\n            $this-\u003emiddleware('guest')-\u003eexcept('logout');\n            $this-\u003emiddleware('guest:admin')-\u003eexcept('logout');\n            $this-\u003emiddleware('guest:writer')-\u003eexcept('logout');\n        }\n        [...]\n    }\n```\n\nWe set the middleware to restrict access to this controller or its methods. It is important we defined all the different types of guests in the controller. This way, if one type of user is logged in and you try to use another user type to log in, it will redirect you to a predefined authentication page.\n\n**See it this way:** If I log in on my computer as an administrator, and my colleague who is a writer also tries to log into his account as a writer, he will not be able to.\n\nThis check is important, so we do not mess up session information and potentially corrupt our application data.\n\nNow, define the login for admins:\n\n``` php\n    // app/Http/Controllers/Auth/LoginController.php\n    \n    [...]\n    public function showAdminLoginForm()\n    {\n        return view('auth.login', ['url' =\u003e 'admin']);\n    }\n    \n    public function adminLogin(Request $request)\n    {\n        $this-\u003evalidate($request, [\n            'email'   =\u003e 'required|email',\n            'password' =\u003e 'required|min:6'\n        ]);\n    \n        if (Auth::guard('admin')-\u003eattempt(['email' =\u003e $request-\u003eemail, 'password' =\u003e $request-\u003epassword], $request-\u003eget('remember'))) {\n    \n            return redirect()-\u003eintended('/admin');\n        }\n        return back()-\u003ewithInput($request-\u003eonly('email', 'remember'));\n    }\n    [...]\n```\n\nWe have set up a method to return the login page for an admin. We will use the same page for all the user types and only change the URL they get sent to. Saves us a lot of code we could avoid writing.\n\nWe also defined the `adminLogin` method which checks that the right credentials are supplied. Then we attempt to log a user in with the `admin` guard. It is important we set this guard when attempting a login so that the Auth facade will check the right table matching credentials. It will also set up our authentication so we can restrict pages based on the type of user who is logged in.\n\nWe redirect an authenticated user to a specific URL and send an unauthenticated user back to the login page.\n\nNow, let us do the same thing but for the writers:\n\n``` php\n    // app/Http/Controllers/Auth/LoginController.php\n    \n    \n    [...]\n    public function showWriterLoginForm()\n    {\n        return view('auth.login', ['url' =\u003e 'writer']);\n    }\n    \n    public function writerLogin(Request $request)\n    {\n        $this-\u003evalidate($request, [\n            'email'   =\u003e 'required|email',\n            'password' =\u003e 'required|min:6'\n        ]);\n    \n        if (Auth::guard('writer')-\u003eattempt(['email' =\u003e $request-\u003eemail, 'password' =\u003e $request-\u003epassword], $request-\u003eget('remember'))) {\n    \n            return redirect()-\u003eintended('/writer');\n        }\n        return back()-\u003ewithInput($request-\u003eonly('email', 'remember'));\n    }\n    [...]\n```\n\nAnd our login is set. Hurray!!! \n\n### Modify RegisterController\n\nOpen the `RegisterController` and edit as follows:\n\n``` php\n    // app/Http/Controllers/Auth/RegisterController.php\n    \n    \u003c?php\n    [...]\n    namespace App\\Http\\Controllers\\Auth;\n    use App\\User;\n    use App\\Admin;\n    use App\\Writer;\n    use App\\Http\\Controllers\\Controller;\n    use Illuminate\\Support\\Facades\\Hash;\n    use Illuminate\\Support\\Facades\\Validator;\n    use Illuminate\\Foundation\\Auth\\RegistersUsers;\n    use Illuminate\\Http\\Request;\n    [...]\n    class RegisterController extends Controller\n    {\n        [...]\n        public function __construct()\n        {\n            $this-\u003emiddleware('guest');\n            $this-\u003emiddleware('guest:admin');\n            $this-\u003emiddleware('guest:writer');\n        }\n      [...]\n    }\n```\n\nWe have set up the middleware the controller will use, just like we did with the `LoginController`.\n\nNow, let us set up the methods to return the registration pages for the different users:\n\n``` php\n    // app/Http/Controllers/Auth/RegisterController.php\n    \n    [...]\n    public function showAdminRegisterForm()\n    {\n        return view('auth.register', ['url' =\u003e 'admin']);\n    }\n    \n    public function showWriterRegisterForm()\n    {\n        return view('auth.register', ['url' =\u003e 'writer']);\n    }\n    [...]\n```\n\nThis is similar to what we did for showing different login pages.\n\nNow, we can define our methods for creating an admin:\n\n``` php\n    // app/Http/Controllers/Auth/RegisterController.php\n    \n    [...] \n    protected function createAdmin(Request $request)\n    {\n        $this-\u003evalidator($request-\u003eall())-\u003evalidate();\n        $admin = Admin::create([\n            'name' =\u003e $request['name'],\n            'email' =\u003e $request['email'],\n            'password' =\u003e Hash::make($request['password']),\n        ]);\n        return redirect()-\u003eintended('login/admin');\n    }\n    [...] \n```\n\nNext, let us define methods for creating a writer:\n\n``` php\n    // app/Http/Controllers/Auth/RegisterController.php\n    \n    [...] \n    protected function createWriter(Request $request)\n    {\n        $this-\u003evalidator($request-\u003eall())-\u003evalidate();\n        $writer = Writer::create([\n            'name' =\u003e $request['name'],\n            'email' =\u003e $request['email'],\n            'password' =\u003e Hash::make($request['password']),\n        ]);\n        return redirect()-\u003eintended('login/writer');\n    }\n    [...] \n```\n\nAnd registration is complete. \n\n\n## Set up authentication pages\n\nWe will use Laravel’s auth scaffolding to generate pages and controllers for our authentication system. Run the following command to generate the authentication pages:\n\n```\n    $ php artisan make:auth\n```\n\nThis will generate view files in `resources/views/auth` along with routes to handle basic authentication for our application. Is that cool or what? \n\nOpen the `login.blade.php` file and edit as follows:\n\n``` php\n    // resources/views/auth/login.blade.php\n    [...]\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row justify-content-center\"\u003e\n            \u003cdiv class=\"col-md-8\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-header\"\u003e {{ isset($url) ? ucwords($url) : \"\"}} {{ __('Login') }}\u003c/div\u003e\n    \n                    \u003cdiv class=\"card-body\"\u003e\n                        @isset($url)\n                        \u003cform method=\"POST\" action='{{ url(\"login/$url\") }}' aria-label=\"{{ __('Login') }}\"\u003e\n                        @else\n                        \u003cform method=\"POST\" action=\"{{ route('login') }}\" aria-label=\"{{ __('Login') }}\"\u003e\n                        @endisset\n                            @csrf\n        [...]\n    \u003c/div\u003e\n```\n\nWe are checking if we passed a `url` parameter to the page when we called it. If we did, we modify the forms action to use the `url` parameter. We also modified the header of the form so that it shows the type of user based on their login parameter.\n\nOpen the `register.blade.php` file and edit as follows:\n\n``` php\n    // resources/views/auth/register.blade.php\n    \n    [...]\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row justify-content-center\"\u003e\n            \u003cdiv class=\"col-md-8\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-header\"\u003e {{ isset($url) ? ucwords($url) : \"\"}} {{ __('Register') }}\u003c/div\u003e\n    \n                    \u003cdiv class=\"card-body\"\u003e\n                        @isset($url)\n                        \u003cform method=\"POST\" action='{{ url(\"register/$url\") }}' aria-label=\"{{ __('Register') }}\"\u003e\n                        @else\n                        \u003cform method=\"POST\" action=\"{{ route('register') }}\" aria-label=\"{{ __('Register') }}\"\u003e\n                        @endisset\n                            @csrf\n        [...]\n    \u003c/div\u003e\n```\n\nWe replicated what we did for login page here.\n\n\n## Create the pages authenticated users will access\n\nNow that we are done setting up the login and register page, let us make the pages the admin and writers will see when they are authenticated. Open the terminal and run the following commands to create new files. Next, we will insert the corresponding code snippets to the files.\n\n\n```\n    $ touch resources/views/layouts/auth.blade.php\n    $ touch resources/views/admin.blade.php\n    $ touch resources/views/writer.blade.php\n    $ touch resources/views/home.blade.php\n```\n \n Insert this code block into the `auth.blade.php` file:\n\n``` php\n    // resources/views/layouts/auth.blade.php\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"{{ str_replace('_', '-', app()-\u003egetLocale()) }}\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n    \n        \u003c!-- CSRF Token --\u003e\n        \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\"\u003e\n    \n        \u003ctitle\u003e{{ config('app.name', 'Laravel') }}\u003c/title\u003e\n    \n        \u003c!-- Scripts --\u003e\n        \u003cscript src=\"{{ asset('js/app.js') }}\" defer\u003e\u003c/script\u003e\n    \n        \u003c!-- Fonts --\u003e\n        \u003clink rel=\"dns-prefetch\" href=\"https://fonts.gstatic.com\"\u003e\n        \u003clink href=\"https://fonts.googleapis.com/css?family=Raleway:300,400,600\" rel=\"stylesheet\" type=\"text/css\"\u003e\n    \n        \u003c!-- Styles --\u003e\n        \u003clink href=\"{{ asset('css/app.css') }}\" rel=\"stylesheet\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n            \u003cnav class=\"navbar navbar-expand-md navbar-light navbar-laravel\"\u003e\n                \u003cdiv class=\"container\"\u003e\n                    \u003ca class=\"navbar-brand\" href=\"{{ url('/') }}\"\u003e\n                        {{ config('app.name', 'Laravel') }}\n                    \u003c/a\u003e\n                    \u003cbutton class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"{{ __('Toggle navigation') }}\"\u003e\n                        \u003cspan class=\"navbar-toggler-icon\"\u003e\u003c/span\u003e\n                    \u003c/button\u003e\n    \n                    \u003cdiv class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\"\u003e\n                        \u003c!-- Left Side Of Navbar --\u003e\n                        \u003cul class=\"navbar-nav mr-auto\"\u003e\n    \n                        \u003c/ul\u003e\n    \n                        \u003c!-- Right Side Of Navbar --\u003e\n                        \u003cul class=\"navbar-nav ml-auto\"\u003e\n                            \u003c!-- Authentication Links --\u003e\n                           \u003cli class=\"nav-item dropdown\"\u003e\n                                \u003ca id=\"navbarDropdown\" class=\"nav-link dropdown-toggle\" href=\"#\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" v-pre\u003e\n                                    Hi There \u003cspan class=\"caret\"\u003e\u003c/span\u003e\n                                \u003c/a\u003e\n    \n                                \u003cdiv class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"navbarDropdown\"\u003e\n                                    \u003ca class=\"dropdown-item\" href=\"{{ route('logout') }}\"\n                                       onclick=\"event.preventDefault();\n                                                     document.getElementById('logout-form').submit();\"\u003e\n                                        {{ __('Logout') }}\n                                    \u003c/a\u003e\n    \n                                    \u003cform id=\"logout-form\" action=\"{{ route('logout') }}\" method=\"POST\" style=\"display: none;\"\u003e\n                                        @csrf\n                                    \u003c/form\u003e\n                                \u003c/div\u003e\n                            \u003c/li\u003e\n                        \u003c/ul\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/nav\u003e\n    \n            \u003cmain class=\"py-4\"\u003e\n                @yield('content')\n            \u003c/main\u003e\n        \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNext, insert this code block into the `admin.blade.php` file:\n\n``` php\n    // resources/views/admin.blade.php\n    \n    @extends('layouts.auth')\n    \n    @section('content')\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row justify-content-center\"\u003e\n            \u003cdiv class=\"col-md-8\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-header\"\u003eDashboard\u003c/div\u003e\n    \n                    \u003cdiv class=\"card-body\"\u003e\n                        Hi boss!\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    @endsection\n```\n\n Open the `writer.blade.php` file and edit as follows:\n \n``` php\n    // resources/views/writer.blade.php\n    \n    @extends('layouts.auth')\n    \n    @section('content')\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row justify-content-center\"\u003e\n            \u003cdiv class=\"col-md-8\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-header\"\u003eDashboard\u003c/div\u003e\n    \n                    \u003cdiv class=\"card-body\"\u003e\n                        Hi there, awesome writer\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    @endsection\n```\n\nFinally, open the `home.blade.php` file and replace with the following:\n\n``` php\n    // resources/views/home.blade.php\n    \n    @extends('layouts.auth')\n    \n    @section('content')\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row justify-content-center\"\u003e\n            \u003cdiv class=\"col-md-8\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-header\"\u003eDashboard\u003c/div\u003e\n    \n                    \u003cdiv class=\"card-body\"\u003e\n                         Hi there, regular user\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    @endsection\n```\n\n## Set up the routes\n\nOur application is almost ready. Let us define the routes to access all the pages we have created so far. Open the `routes/web.php` file and replace with the following:\n\n``` php\n    // routes/web.php\n    \n    \n    \u003c?php\n    Route::view('/', 'welcome');\n    Auth::routes();\n    \n    Route::get('/login/admin', 'Auth\\LoginController@showAdminLoginForm');\n    Route::get('/login/writer', 'Auth\\LoginController@showWriterLoginForm');\n    Route::get('/register/admin', 'Auth\\RegisterController@showAdminRegisterForm');\n    Route::get('/register/writer', 'Auth\\RegisterController@showWriterRegisterForm');\n    \n    Route::post('/login/admin', 'Auth\\LoginController@adminLogin');\n    Route::post('/login/writer', 'Auth\\LoginController@writerLogin');\n    Route::post('/register/admin', 'Auth\\RegisterController@createAdmin');\n    Route::post('/register/writer', 'Auth\\RegisterController@createWriter');\n    \n    Route::view('/home', 'home')-\u003emiddleware('auth');\n    Route::view('/admin', 'admin');\n    Route::view('/writer', 'writer');\n```\n\n## Modify how our users are redirected if authenticated\n\nIt is important you modify how users are redirected when they are authenticated. Laravel by default redirects all authenticated users to `/home`. We will get the error below if we do not modify the redirection.\n\n![😭 😭 😭](https://d2mxuefqeaa7sj.cloudfront.net/s_6D7B3E166C7873EC90A35A82AF40F43055AE8C634EC492BA6F7E69DE8C0E35BD_1531396064897_image.png)\n\n\nSo, to solve that, open the `app/Http/Controllers/Middleware/RedirectIfAuthenticated.php` file and replace with this:\n\n``` php\n    // app/Http/Controllers/Middleware/RedirectIfAuthenticated.php\n    \n    \u003c?php\n    \n    namespace App\\Http\\Middleware;\n    \n    use Closure;\n    use Illuminate\\Support\\Facades\\Auth;\n    \n    class RedirectIfAuthenticated\n    {\n        public function handle($request, Closure $next, $guard = null)\n        {\n            if ($guard == \"admin\" \u0026\u0026 Auth::guard($guard)-\u003echeck()) {\n                return redirect('/admin');\n            }\n            if ($guard == \"writer\" \u0026\u0026 Auth::guard($guard)-\u003echeck()) {\n                return redirect('/writer');\n            }\n            if (Auth::guard($guard)-\u003echeck()) {\n                return redirect('/home');\n            }\n    \n            return $next($request);\n        }\n    }\n```\n\nThe `RedirectIfAuthenticated` middleware receives the auth guard as a parameter. This middleware is triggered when we try to visit any page meant for authenticated users. We can then determine the type of authentication the user has and redirect them accordingly.\n\n\n## Modify authentication exception handler\n\nThere is a little annoying thing that would happen when a user is redirected. You would expect that if a user tries to access say `/writer` but is not authenticated, that the user is redirected to `/login/writer`, yes? Well, they don’t. They get redirected to `/login` which is not what we want.\n\nTo ensure that when a user tries to visit `/writer` they are redirected to `/login/writer` or the same for `/admin`, we have to modify the exception handler. Open the handler file in `app/Exceptions` and add the following:\n\n``` php\n    // app/Exceptions/Handler.php\n    \n    \u003c?php\n    \n    namespace App\\Exceptions;\n    \n    use Exception;\n    use Illuminate\\Foundation\\Exceptions\\Handler as ExceptionHandler;\n    [...]\n    use Illuminate\\Auth\\AuthenticationException;\n    use Auth; \n    [...]\n    class Handler extends ExceptionHandler\n    {\n       [...] \n        protected function unauthenticated($request, AuthenticationException $exception)\n        {\n            if ($request-\u003eexpectsJson()) {\n                return response()-\u003ejson(['error' =\u003e 'Unauthenticated.'], 401);\n            }\n            if ($request-\u003eis('admin') || $request-\u003eis('admin/*')) {\n                return redirect()-\u003eguest('/login/admin');\n            }\n            if ($request-\u003eis('writer') || $request-\u003eis('writer/*')) {\n                return redirect()-\u003eguest('/login/writer');\n            }\n            return redirect()-\u003eguest(route('login'));\n        }\n    }\n```\n\nThe `unauthenticated` method we just added resolves this issue we have. It receives an `AuthenticationExpection` exception by default which carries that guard information. Sadly, we cannot access that, because it is protected (hopefully, Laravel 5.7 will come with a way to access it).\n\nOur workaround is to use `request→is()`. This checks the URL we are trying to access. It can also check the URL pattern if we do not have an absolute URL or if we have a route group.\n\nIn our case, we first check if we received a JSON request and handle the exception separately. Then we check if we are trying to access `/admin` or any URL preceded by `admin`. We redirect the user to the appropriate login page. We also do the check for `writer` as well.\n\nThis is a good workaround for us, but it means we must know the absolute URL we want to access, or at least have the same prefix for all routes that will be protected by our guard.\n\n## Run the application\n\nNow that our application is ready, run the following command to get it up:\n\n```\n    $ php artisan serve\n```\n\nIt should typically be available on `http://localhost:8000`.\n\n\n\u003e Remember to visit `http://localhost:8000/register/writer` and `http://localhost:8000/register/admin` to register writers and admins respectively. Then visit  `http://localhost:8000/login/writer` and `http://localhost:8000/login/admin` to login the writers and admins respectively.\n \n\n## Conclusion\n\nIn this tutorial, we dived deep into Laravel authentication. We defined multiple guards to handle multiple authentications and access control. We also handle redirection for authenticated user and redirection for an unauthenticated user.\n\nIf you followed this guide thoroughly, you will be able to set up the base authentication for an application with different user classes (possibly a [multitenant](https://en.wikipedia.org/wiki/Multitenancy) application). Be that as it may, try extending what you have seen and share what you come up with.\n\nThe source code to the application in this article is available on [GitHub](https://github.com/fisayoafolayan/laravel-multiple-auth).","metaTitle":"How to use multiple authentication guards in a Laravel app","metaDescription":"Build a Laravel web app featuring multiple authentication guards. You will provide multiple authentication routes for different users, redirecting each user type to the appropriate content."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2POGQLsjBe6YUCIcouMi0k","type":"Entry","createdAt":"2018-08-21T18:06:37.277Z","updatedAt":"2018-08-21T18:08:08.859Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a localized app with Laravel - Part 4: Frontend with multi-language styling","url":"localized-laravel-part-4","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1N3HBqLEugWyeKsWEW0iYg","type":"Entry","createdAt":"2018-08-06T18:12:32.345Z","updatedAt":"2018-08-06T18:12:32.345Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Fisayo Afolayan","url":"fisayo-afolayan","email":"afolayanfisayo@gmail.com","twitter":"https://twitter.com/fisayoafolayan","github":"https://github.com/fisayoafolayan","guestWriter":true}}],"projectRepo":"https://github.com/fisayoafolayan/build-an-international-app-laravel","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}}],"reviewDate":"2018-08-21","description":"This four-part series explores how to build an accessible localized application in Laravel. In part four, we will focus on making the frontend of the application.","prerequisite":"Please read and follow the previous tutorials, also linked in this tutorial.","content":"In this final tutorial of the series, we will focus on making the frontend of the application. We will build a simple destination page and customize it for each language using css.\n\nIn the previous chapters, we looked at what an international application is and the different things to consider when making one. We started building our tour guide application and made the backend of the application. We also added multilingual support for the basic pages and content.\n\n## Prerequisites\n\nYou have read all previous chapters.\n\nHere are the [part 1](https://pusher.com/tutorials/localized-laravel-part-1), [part 2](https://pusher.com/tutorials/localized-laravel-part-2) and [part 3](https://pusher.com/tutorials/localized-laravel-part-3) in case you missed it!\n\n## Getting started\n\nIn this guide, we will look at how to use CSS to adjust our display based on the app language. We will make the pages for the application and generate different language versions of the page where necessary.\n\nBefore we proceed, we need to create bookings and a destinations folder inside our views folder. \n\n```\n    $ mkdir resources/views/booking\n    $ mkdir resources/views/destination\n```\n\nNext,  the following files in `./resources/views`\n\n```\n    $ touch resources/views/booking/index.blade.php\n    $ touch resources/views/booking/create.blade.php\n    $ touch resources/views/booking/userpage.blade.php\n    $ touch resources/views/destination/index.blade.php\n    $ touch resources/views/destination/show.blade.php\n```\n\nNext, we need to make a few adjustments. The register page generated by the Laravel auth scaffolding does not have fields for `phone` and `country`. Let us add that to the page before we continue with other pages.\n\nOpen `./resources/views/auth/register.blade.php` and add the following:\n\n``` language-php\n    // resources/views/auth/register.blade.php\n    [...]\n    \n    \u003cform method=\"POST\" action=\"{{ route('register') }}\"\u003e\n    @csrf\n    \n    [...]\n    \n    \u003cdiv class=\"form-group row\"\u003e\n        \u003clabel for=\"phone\" class=\"col-md-4 col-form-label text-md-right\"\u003e{{ __('Phone') }}\u003c/label\u003e\n    \n        \u003cdiv class=\"col-md-6\"\u003e\n            \u003cinput id=\"phone\" type=\"text\" class=\"form-control{{ $errors-\u003ehas('phone') ? ' is-invalid' : '' }}\" name=\"phone\" value=\"{{ old('phone') }}\" required autofocus\u003e\n    \n            @if ($errors-\u003ehas('phone'))\n                \u003cspan class=\"invalid-feedback\"\u003e\n                    \u003cstrong\u003e{{ $errors-\u003efirst('phone') }}\u003c/strong\u003e\n                \u003c/span\u003e\n            @endif\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv class=\"form-group row\"\u003e\n        \u003clabel for=\"country\" class=\"col-md-4 col-form-label text-md-right\"\u003e{{ __('Country') }}\u003c/label\u003e\n    \n        \u003cdiv class=\"col-md-6\"\u003e\n            \u003cinput id=\"country\" type=\"text\" class=\"form-control{{ $errors-\u003ehas('country') ? ' is-invalid' : '' }}\" name=\"country\" value=\"{{ old('country') }}\" required autofocus\u003e\n    \n            @if ($errors-\u003ehas('country'))\n                \u003cspan class=\"invalid-feedback\"\u003e\n                    \u003cstrong\u003e{{ $errors-\u003efirst('country') }}\u003c/strong\u003e\n                \u003c/span\u003e\n            @endif\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    [...]\n    \u003c/form\u003e\n    \n    [...]\n```\n\nThen, add the routes for all our pages. Open `./routes/web.php` and edit as follows:\n\n``` language-php\n    // routes/web.php\n    Route::get('/', function () {\n        return view('welcome');\n    });\n    \n    \n    Route::prefix('{lang}')-\u003egroup(function () {\n            Route::get('/destinations', \"DestinationController@index\");\n        Route::get('/destinations/{destination}', \"DestinationController@show\");\n    });\n    \n    Auth::routes();\n    Route::get('/booking/destination/{destination}', \"BookingController@create\");\n    Route::post('/booking', \"BookingController@store\");\n    Route::get('/dashboard', \"BookingController@index\");\n    Route::get('/home', 'BookingController@userPage')-\u003ename('home');\n```\n\nAlso, we need to create an admin user that can see all the booking requests. We will seed the user table with the admin user information.\n\nRun the following command to create the database seeder:\n\n```\n    $ php artisan make:seed UserTableSeeder\n```\n\nThen, open the `database/seeds/UserTableSeeder.php` file and replace with the following:\n\n``` language-php\n    // database/seeds/UserTableSeeder.php\n    \u003c?php\n    \n    use Illuminate\\Database\\Seeder;\n    use App\\User;\n    use Illuminate\\Support\\Facades\\Hash;\n    \n    class UserTableSeeder extends Seeder\n    {\n        /**\n         * Run the database seeds.\n         *\n         * @return void\n         */\n        public function run()\n        {\n            $user = new User;\n            $user-\u003ename = \"Admin\";\n            $user-\u003ecountry = \"Canada\";\n            $user-\u003ephone = \"12345678\";\n            $user-\u003eemail = \"admin@example.com\";\n            $user-\u003epassword = Hash::make(\"secret\");\n            $user-\u003eis_admin = true;\n            $user-\u003esave();\n        }\n    }\n```\n\nRun the seeder:\n\n```\n    $ php artisan db:seed --class=UserTableSeeder\n```\n\n## Making the destinations pages\n\nThe destinations pages are the primary pages of our application. They hold key information that will enable visitors to decide to use our service. We want to modify the pages slightly for different visitors to improve their experience and enable them to make buying decisions.\n\nWe will assume the following:\n\n- The Germans and French like their websites being a representation of their national flags.\n- The rest of the world will go with our default design.\n\nWe will use the colors of the flags of France and Germany to make the style variations on the pages. \n\nCreate a file `style.css` in the `./public/css` directory with this command directory \n\n```\n    $ touch public/css/style.css\n```\n\nPaste in the following lines of code into our `style.css` file:\n\n``` language-css\n    :lang(de) body{\n            background: #000000;\n            color:#FFCE00;\n    }\n    :lang(fr) body{\n            background: #0055A4;\n            color:#ffffff;\n    }\n    .text-tiny {\n            font-size: 1rem;\n    }\n    :lang(fr) .text-tiny {\n            background: #EF4135;\n            color:#ffffff;\n            font-weight: 900;\n            padding: 0px 10px;\n    }\n    :lang(fr) .col-md-4 a, :lang(fr) .col-md-12 a {\n            color:#ffffff;\n            text-decoration: underline;\n            font-weight: 900;\n    }\n    :lang(fr) .col-md-4 a:hover, :lang(fr) .col-md-12 a:hover {\n            color:#EF4135;\n    }\n    :lang(de) .text-tiny {\n            background: #DD0000;\n            color:#ffffff;\n            font-weight: 900;\n            padding: 0px 10px;\n    }\n```\n\nIn the above style, we used the `:lang()` selector to apply unique styles to portions of our page based on the language of the page. We made the backgrounds take the first color of the respective flags and the other two colors were used for text and highlighting.\n\nThe `lang()` selector can be used on any tag or class. This way, you can target specific parts of your webpage and style them differently when the page is in a particular language.\n\n\n`\u003chtml lang=\"{{ app()-\u003egetLocale() }}\"\u003e` is a very important part of our application. It sets the language of the current webpage a user is viewing. It is also what the lang() CSS selector uses to detect the language of the page, to style it accordingly. If you omit it, language dependent styles on your web pages will not apply.\n\nThe lang attribute can be set on any tag. The tag can also have a different language from the rest of the webpage. While it is possible to have multiple languages on the same page and the browser will know about them, it is a strongly discouraged practice. It impacts the experience of the user and can impact on what the user receives if she translates your webpage into an entirely different language.\n\nOpen the `destination/index.blade.php` file and add the following:\n\n``` language-php\n    @extends('layouts.app')\n    @section('styles')\n        \u003clink href=\"{{ asset('css/style.css') }}\" rel=\"stylesheet\"\u003e\n    @endsection\n    @section('content')\n    \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"row\"\u003e\n                    @foreach($destinations as $destination)\n                    \u003cdiv class=\"col-md-4\"\u003e\n                            \u003cimg src=\"{{$destination-\u003eimage}}\" class=\"img img-fluid\"\u003e\n                            \u003ch2\u003e{{$destination-\u003ename}} \u003cspan class=\"float-right text-tiny\"\u003e{{$destination-\u003elocation}}\u003c/span\u003e\u003c/h2\u003e\n                            \u003chr/\u003e\n                            \u003ca href=\"{{url(app()-\u003egetLocale().'/destinations/'.$destination-\u003eid)}}\"\u003e{{__('View More')}}\u003c/a\u003e\n                    \u003c/div\u003e\n                    @endforeach\n            \u003c/div\u003e\n    \u003c/div\u003e\n    @endsection\n```\n\nWe extended the main app container file and added two sections. One for styles and the other for content. The page is simple. It lists out all the destinations we have and puts a link to view more on each destination.\n\nThe `__()` method, as we explained in the last chapter, handles translations. The string maps we created for the French-English texts are used to find replacements for the English word when the language of the page is in French. Similarly, the string map for German-English will be used when the page is in German. The French string map is in `fr.json` file in the `./resources/lang` directory.\n\nNow, open the `layouts/app.blade.php` file and add the yield for styles and scripts\n\n``` language-html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"{{ app()-\u003egetLocale() }}\"\u003e\n    \u003chead\u003e\n        [...]\n        \u003c!-- Styles --\u003e\n        \u003clink href=\"{{ asset('css/app.css') }}\" rel=\"stylesheet\"\u003e\n        @yield('styles')\n    \u003c/head\u003e\n    [...]\n            \u003cmain class=\"py-4\"\u003e\n                @yield('content')\n            \u003c/main\u003e\n        \u003c/div\u003e\n        @yield('scripts')\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nFinally, open the `destination/show.blade.php` file and add the following:\n\n``` language-html\n    @extends('layouts.app')\n    @section('styles')\n        \u003clink href=\"{{ asset('css/style.css') }}\" rel=\"stylesheet\"\u003e\n    @endsection\n    @section('content')\n    \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"row\"\u003e\n                    \u003cdiv class=\"col-md-12\"\u003e\n                            \u003cimg src=\"{{$destination-\u003eimage}}\" class=\"img img-fluid\"\u003e\n                            \u003ch2\u003e{{$destination-\u003ename}} \u003cspan class=\"float-right text-tiny\"\u003e{{$destination-\u003elocation}}\u003c/span\u003e\u003c/h2\u003e\n                            \u003chr/\u003e\n                            \u003cp\u003e{{$destination-\u003etranslated_description}}\u003c/p\u003e\n                            \u003ca href=\"{{url('booking/destination/'.$destination-\u003eid)}}\"\u003e{{__('Book Now')}}\u003c/a\u003e\n                    \u003c/div\u003e\n            \u003c/div\u003e\n    \u003c/div\u003e\n    @endsection\n```\n\nHere, we have displayed the content of each destination and added a link to book it. That’s it for the destination pages.\n\n\n## Making the tour booking page\n\nThe tour booking page is going to be simple. It should show the destination information a user clicked on and a little form for the user to provide additional information for the booking. We will translate the page based on language as well.\n\nOpen the `booking/create.blade.php` file and add the following:\n\n``` language-html\n    @extends('layouts.app')\n    @section('styles')\n    \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.8.0/css/bootstrap-datepicker.min.css\"\u003e\n    @endsection\n    @section('content')\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row justify-content-center\"\u003e\n            \u003cdiv class=\"col-md-8\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-header\"\u003e{{__('Make a booking')}}\u003c/div\u003e\n    \n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003cdiv class=\"row\"\u003e\n                            \u003cdiv class=\"col-md-6\"\u003e\n                                \u003cimg src=\"{{$destination-\u003eimage}}\" class=\"img img-fluid\"\u003e\n                                \u003ch2\u003e{{$destination-\u003ename}}\u003c/h2\u003e\n                                \u003csmall\u003e{{$destination-\u003elocation}}\u003c/small\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"col-md-6\"\u003e\n                                \u003cform method=\"post\" action=\"{{url('booking')}}\"\u003e\n                                    @csrf\n                                    \u003cinput type=\"hidden\" name=\"destination_id\" value=\"{{$destination-\u003eid}}\"\u003e\n                                    \u003cdiv class=\"form-group row\"\u003e\n                                        \u003cdiv class=\"col-md-12\"\u003e\n                                            \u003clabel for=\"number_of_tourists\"\u003e\n                                                {{__('How many people are coming?')}}\n                                            \u003c/label\u003e\n                                            \u003cinput id=\"number_of_tourists\" type=\"text\" class=\"form-control{{ $errors-\u003ehas('name') ? ' is-invalid' : '' }}\" name=\"number_of_tourists\" value=\"{{ old('number_of_tourists') }}\" required autofocus placeholder=\"{{__('e.g')}} 4\"\u003e\n    \n                                            @if ($errors-\u003ehas('name'))\n                                                \u003cspan class=\"invalid-feedback\"\u003e\n                                                    \u003cstrong\u003e{{ $errors-\u003efirst('number_of_tourists') }}\u003c/strong\u003e\n                                                \u003c/span\u003e\n                                            @endif\n                                        \u003c/div\u003e\n                                    \u003c/div\u003e\n    \n                                    \u003cdiv class=\"form-group row\"\u003e\n                                        \u003cdiv class=\"col-md-12\"\u003e\n                                            \u003clabel for=\"visit_date\"\u003e\n                                                {{__('When would you like to visit?')}}\n                                            \u003c/label\u003e\n                                            \u003cdiv class=\"input-group date\" data-provide=\"datepicker\"\u003e\n                                                \u003cinput type=\"text\" class=\"form-control datepicker\" required autofocus placeholder=\"{{__('e.g')}} 01/26/2019\" name=\"visit_date\"\u003e\n                                                \u003cdiv class=\"input-group-addon\"\u003e\n                                                    \u003cspan class=\"glyphicon glyphicon-th\"\u003e\u003c/span\u003e\n                                                \u003c/div\u003e\n                                            \u003c/div\u003e\n    \n                                            @if ($errors-\u003ehas('name'))\n                                                \u003cspan class=\"invalid-feedback\"\u003e\n                                                    \u003cstrong\u003e{{ $errors-\u003efirst('number_of_tourists') }}\u003c/strong\u003e\n                                                \u003c/span\u003e\n                                            @endif\n                                        \u003c/div\u003e\n                                    \u003c/div\u003e\n                                    \u003cdiv class=\"form-group row\"\u003e\n                                        \u003cdiv class=\"col-md-12\"\u003e\n                                            \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003e\n                                                {{ __('Book Now') }}\n                                            \u003c/button\u003e\n                                        \u003c/div\u003e\n                                    \u003c/div\u003e\n                                \u003c/form\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    @endsection\n    @section('scripts')\n    \u003cscript type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.8.0/js/bootstrap-datepicker.min.js\" defer\u003e\n        $(document).ready(function() {\n            $('.datepicker').datepicker();\n        });\n    \u003c/script\u003e\n    @endsection\n```\n\nOn the page, we used [bootstrap-datepicker](https://bootstrap-datepicker.readthedocs.io/en/latest/) package to make it easy for our visitors to select the date of their booking in a way our application can easily interpret.\n\n\n## Making the user page for viewing bookings\n\nThis page is like the mission control for a user. It helps the user see all the tours they have previously booked. It does not do so much, but it is informative enough for the user.\n\nOpen the `booking/userpage.blade.php` file and add the following:\n\n``` language-html\n    @extends('layouts.app')\n    \n    @section('content')\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row justify-content-center\"\u003e\n            \u003cdiv class=\"col-md-8\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-header\"\u003eDashboard\u003c/div\u003e\n    \n                    \u003cdiv class=\"card-body\"\u003e\n                        @if(empty($bookings))\n                        \u003ch3\u003e{{__('You do not have any reservations')}}\u003c/h3\u003e\n                        @else\n                        @foreach($bookings as $booking)\n                        \u003cdiv class=\"col-md-12\"\u003e\n                            \u003cdiv class=\"row\"\u003e\n                                \u003cdiv class=\"col-md-6\"\u003e\n                                    \u003cimg src=\"{{$booking-\u003edestination-\u003eimage}}\" class=\"img img-fluid\"\u003e\n                                    \u003ch2\u003e{{$booking-\u003edestination-\u003ename}}\u003c/h2\u003e\n                                    \u003csmall\u003e{{$booking-\u003edestination-\u003elocation}}\u003c/small\u003e\n                                \u003c/div\u003e\n                                \u003cdiv class=\"col-md-6\"\u003e\n                                    \u003ch5\u003e{{__('Number of tourists')}}: \u003cbr/\u003e\u003cstrong\u003e{{$booking-\u003enumber_of_tourists}}\u003c/strong\u003e\u003c/h5\u003e\n                                    \u003ch5\u003e{{__('Tour date')}}: \u003cbr/\u003e\u003cstrong\u003e{{$booking-\u003evisit_date-\u003etoDateString()}}\u003c/strong\u003e\u003c/h5\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        @endforeach\n                        @endif\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    @endsection\n```\n\n## Making the admin page to view bookings\n\nThis page is like mission control for the admin user. It helps the admin see all the tours users have booked and information on the users who booked these tours. We will not offer translations for this page. We assume the administrator speaks English.\n\nOpen the `booking/index.blade.php` file and add the following:\n\n``` language-html\n    @extends('layouts.app')\n    \n    @section('content')\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row justify-content-center\"\u003e\n            \u003cdiv class=\"col-md-8\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-header\"\u003eAdmin Dashboard\u003c/div\u003e\n    \n                    \u003cdiv class=\"card-body\"\u003e\n                        @if(empty($bookings))\n                        \u003ch3\u003e{{__('You do not have any reservations')}}\u003c/h3\u003e\n                        @else\n                            @foreach($bookings as $booking)\n                        \u003cdiv class=\"col-md-12\"\u003e\n                            \u003cdiv class=\"row\"\u003e\n                                \u003cdiv class=\"col-md-6\"\u003e\n                                    \u003cimg src=\"{{$booking-\u003edestination-\u003eimage}}\" class=\"img img-fluid\"\u003e\n                                    \u003ch2\u003e{{$booking-\u003edestination-\u003ename}}\u003c/h2\u003e\n                                    \u003csmall\u003e{{$booking-\u003edestination-\u003elocation}}\u003c/small\u003e\n                                \u003c/div\u003e\n                                \u003cdiv class=\"col-md-6\"\u003e\n                                    \u003ch5\u003eNumber of tourists: \u003cbr/\u003e\u003cstrong\u003e{{$booking-\u003enumber_of_tourists}}\u003c/strong\u003e\u003c/h5\u003e\n                                    \u003ch5\u003eTour date: \u003cbr/\u003e\u003cstrong\u003e{{$booking-\u003evisit_date-\u003etoDateString()}}\u003c/strong\u003e\u003c/h5\u003e\n                                    \u003chr /\u003e\n                                    \u003ch5\u003e\u003cstrong\u003eUser's name:\u003c/strong\u003e \u003cbr/\u003e{{$booking-\u003euser-\u003ename}}\u003c/h5\u003e\n                                    \u003ch5\u003e\u003cstrong\u003eContact information:\u003c/strong\u003e\u003cbr/\u003e\n                                        Phone: {{$booking-\u003euser-\u003ephone}}\u003cbr/\u003e\n                                        Email: {{$booking-\u003euser-\u003eemail}}\u003cbr/\u003e\n                                        Country: {{$booking-\u003euser-\u003ecountry}}\n                                    \u003c/h5\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                            @if(!$loop-\u003elast)\n                        \u003chr/\u003e\n                            @endif\n                            @endforeach\n                        @endif\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    @endsection\n```\n\n## How our application looks  now\n\nLet us see what the different versions look like. Run the following command to start the page:\n\n```\n    $ php artisan serve\n```\n\nVisit `127.0.0.1:8000` to view our international application. \n\n\n\u003e To see the pages in different language versions, change the language settings on your browser language settings. If you are on a chrome browser, read about how to change your language [here](https://www.wikihow.com/Change-the-Default-Language-in-Google-Chrome).\n\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/localized-laravel-part-4-french-home-960x600.png\" alt=\"French homepage\" width=\"770\" height=\"481\" class=\"aligncenter size-large wp-image-4711\" /\u003e\n\n\u003e Notice that when you set the browser language to French, the text on the homepage shows in French. Then when you have it in English, the text on the page is in English.\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/localized-laravel-part-4-german-destinations-960x600.png\" alt=\"German destination page\" width=\"770\" height=\"481\" class=\"aligncenter size-large wp-image-4707\" /\u003e\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/localized-laravel-part-4-french-single-dest-960x600.png\" alt=\"French single destination page\" width=\"770\" height=\"481\" class=\"aligncenter size-large wp-image-4712\" /\u003e\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/localized-laravel-part-4-english-single-dest-960x600.png\" alt=\"English single destination page\" width=\"770\" height=\"481\" class=\"aligncenter size-large wp-image-4710\" /\u003e\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/localized-laravel-part-4-tour-booking-960x600.png\" alt=\"Tour booking page\" width=\"770\" height=\"481\" class=\"aligncenter size-large wp-image-4708\" /\u003e\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/localized-laravel-part-4-admin-panel-960x600.png\" alt=\"Admin dashboard\" width=\"770\" height=\"481\" class=\"aligncenter size-large wp-image-4709\" /\u003e\n\n## Conclusion\n\nWe have looked at what it takes to build an international application. We built an international application with support for multiple languages. We did string translations for French and German. We saw how to style different sections of our page based on language using the CSS `lang()` selector.\n\nAt the end of the day, we have a simple international application. There is a lot that can be added to it like dynamically generated links for alternative language versions. I hope this guide helps you fully understand what to look out for when building an international application.\nCheckout out these quick tips from W3 on making international applications.\n\nThe source code to the application in this article is available on [GitHub](https://github.com/fisayoafolayan/build-an-international-app-laravel).","metaTitle":"Build a localized app with Laravel - Part 4","metaDescription":"In this four-part tutorial series, we explore how to build an accessible localized application in Laravel. This part four, create and style the frontend of the application."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2XflDszQXuWmUW82mC0KWs","type":"Entry","createdAt":"2018-08-16T18:40:59.286Z","updatedAt":"2018-08-16T18:40:59.286Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to build a chatbot with Preact and Wit.ai","url":"chatbot-preact-witai","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/preact-chatbot","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-08-16","description":"Build a chatbot using Preact and Wit.ai, with a Node.js backend. Create custom entities, and implement realtime functionality to allow users to interact with the bot instantly.","prerequisite":"You will need a recent version of Node and npm installed on your machine. A basic understanding of React or Preact will be helpful.","content":"In this tutorial, we will consider how to build a realtime chatbot that incorporates NLP using [Preact](https://preactjs.com), [Wit.ai](https://wit.ai) and [Pusher Channels](https://pusher.com/docs). You can find the entire source code of the application in this [GitHub](https://github.com/ayoisaiah/preact-chatbot) [repository](https://github.com/ayoisaiah/preact-chatbot).\n\nChatbots have become more and more prevalent over the past few years, with several businesses taking advantage of them to serve their customers better.\n\nMany chatbots integrate natural language processing (NLP) which adds a more human touch to conversations, and helps them understand a wider variety of inputs.\n\n## Prerequisites\n\nBefore you continue, make sure  you have [Node.js](https://nodejs.org/en/), [npm](https://www.npmjs.com/) and `curl` installed on your computer. [You can find out how to install Node.js and npm here](https://docs.npmjs.com/getting-started/installing-node).  \n\nThe versions I used while creating this tutorial are as follows:\n\n- Node.js v10.4.1\n- npm v6.3.0\n\nYou can view the version of Node and `npm` you have installed by running the following commands in your terminal:\n\n```\n    node -v\n    npm -v\n```\n\nI believe the code will still work even if you’re on an older version of Node, but if you have any trouble completing the tutorial, try upgrading to the versions I used to see if it fixes your problem.\n\nAlso investigate how to install `curl` on your favorite operating system, or use [this website](https://onlinecurl.com/).\n\nFinally, you need to have a basic understanding of JavaScript and Preact or React, but no prior experience with Pusher or Wit.ai is required.\n\n## Getting started\n\nLet's bootstrap our project using the [preact-cli](https://github.com/developit/preact-cli) tool which allows us to quickly get a Preact application up and running.\n\nOpen up your terminal, and run the following command to install `preact-cli` on your machine:\n\n```\n    npm install -g preact-cli\n```\n\nOnce the installation completes, you'll have access to the `preact` command that will be used to setup the project. Run the following command in the terminal to create your Preact app:\n\n```\n    preact create simple preact-chatbot\n```\n\nThe above command will create a new directory called `preact-chatbot` and install `preact` as well as its accompanying dependencies. It may take a while to complete, so sit tight and wait. Once it’s done, you should see a some information in the terminal informing you of what you can do next.\n\n![preact-new-project](//images.ctfassets.net/1es3ne0caaid/1mPFykN3V2A4MO0asuwEgm/4b6dcebf806b0e17d8290c72be1e61fd/preact-new-project.png)\n\nNext, change into the newly created directory and run `npm run start` to start the development server.\n\nOnce the application compiles, you will be able to view it at http://localhost:8080. When you open up that URL in your browser, you should see a page on your screen that looks like this:\n\n![preact-hello-world](//images.ctfassets.net/1es3ne0caaid/4edVeotl7WI2kU4IAgoAq2/1d6982ab1a8a55ed299fee2ff931a5d3/preact-hello-world.png)\n\n## Create your application frontend with Preact\n\nOpen up `index.js` in your text editor, and change its contents to look like this:\n\n``` javascript\n    // index.js\n    \n    import './style';\n    import { Component } from 'preact';\n    \n    export default class App extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          userMessage: '',\n          conversation: [],\n        };\n    \n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n      }\n    \n      handleChange(event) {\n        this.setState({ userMessage: event.target.value });\n      }\n    \n      handleSubmit(event) {\n        event.preventDefault();\n        const msg = {\n          text: this.state.userMessage,\n          user: 'user',\n        };\n    \n        this.setState({\n          conversation: [...this.state.conversation, msg],\n        });\n    \n        fetch('http://localhost:7777/chat', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            message: this.state.userMessage,\n          }),\n        });\n    \n        this.setState({ userMessage: '' });\n      }\n    \n      render() {\n        const ChatBubble = (text, i, className) =\u003e {\n          const classes = `${className} chat-bubble`;\n          return (\n            \u003cdiv key={`${className}-${i}`} class={`${className} chat-bubble`}\u003e\n              \u003cspan class=\"chat-content\"\u003e{text}\u003c/span\u003e\n            \u003c/div\u003e\n          );\n        };\n    \n        const chat = this.state.conversation.map((e, index) =\u003e\n          ChatBubble(e.text, index, e.user)\n        );\n    \n        return (\n          \u003cdiv\u003e\n            \u003ch1\u003eRealtime Preact Chatbot\u003c/h1\u003e\n            \u003cdiv class=\"chat-window\"\u003e\n              \u003cdiv class=\"conversation-view\"\u003e{chat}\u003c/div\u003e\n              \u003cdiv class=\"message-box\"\u003e\n                \u003cform onSubmit={this.handleSubmit}\u003e\n                  \u003cinput\n                    value={this.state.userMessage}\n                    onInput={this.handleChange}\n                    class=\"text-input\"\n                    type=\"text\"\n                    autofocus\n                    placeholder=\"Type your message and hit Enter to send\"\n                  /\u003e\n                \u003c/form\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n```\n\nIf you have some experience with Preact or React, the above code should be straightforward to understand. The state of the application is initialized with two values:  `userMessage` which contains the value of whatever the user types into the input field, and `conversation` which is an array that will hold each message in the conversation.\n\nThe `handleChange` function runs on every keystroke to update `userMessage` which allows the displayed value to update as the user types. When the user hits the `Enter` button the form will be submitted and `handleSubmit` will be invoked. \n\n`handleSubmit` updates the  `conversation` state with the contents of the user's message and sends the message in a `POST` request to the `/chat` endpoint which we will soon setup in our app’s server component, before clearing the input field by setting `userMessage` to an empty string.\n\n## Add the styles for the application\n\nLet's add the styles for the app’s frontend. Open up `style.css` in your editor and replace its contents with the following styles:\n\n``` css\n    // style.css\n    \n    html, body {\n      font: 14px/1.21 'Helvetica Neue', arial, sans-serif;\n      font-weight: 400;\n      box-sizing: border-box;\n    }\n    \n    *, *::before, *::after {\n      box-sizing: inherit;\n      margin: 0;\n      padding: 0;\n    }\n    \n    h1 {\n      text-align: center;\n      margin-bottom: 40px;\n    }\n    \n    .chat-window {\n      width: 750px;\n      margin: auto;\n      border: 1px solid #eee;\n    }\n    \n    .conversation-view {\n      width: 100%;\n      min-height: 300px;\n      padding: 20px 40px;\n    }\n    \n    .message-box {\n      width: 100%;\n      background-color: #d5d5d5;\n      padding: 10px 20px;\n    }\n    \n    .text-input {\n      width: 100%;\n      border-radius: 4px;\n      border: 1px solid #999;\n      padding: 5px;\n    }\n    \n    .chat-bubble {\n      font-size: 20px;\n      margin-bottom: 20px;\n      width: 100%;\n      display: flex;\n    }\n    \n    .chat-bubble.ai {\n      justify-content: flex-end;\n    }\n    \n    .chat-bubble.ai .chat-content {\n      background-color: #eec799;\n    }\n    \n    .chat-content {\n      display: inline-block;\n      padding: 8px 15px;\n      background-color: #bada55;\n      border-radius: 10px;\n    }\n```\n\nNow, the application should look like this:\n\n![preact-demo-1](//images.ctfassets.net/1es3ne0caaid/3E3qH2JZlKokeCwCeqC2e8/427d30a0046bf3fc09ea865372edbcf5/preact-demo-1.png)\n\n\n## Setup your Wit.ai application\n\nHead over to the [Wit.ai website](https://wit.ai) and create a free account.\n\nOnce you are signed in, hit the **+** icon at the top right of the page to create a new application. Enter your app name and click the **+Create App** button at the bottom.\n\n![witai-create-app](//images.ctfassets.net/1es3ne0caaid/3pNYuoHdgkwcom6AeeMmKa/331b33fab6db187d4bb2b3ff51ae15d1/witai-create-app.png)\n\nYou should see the following page once your app has been created.\n\n![witai-new-app](//images.ctfassets.net/1es3ne0caaid/34M4WfEdWwswGAWQi0U4u0/157b5b6650b5ad9b1f9f53fc5549f3f3/witai-new-app.png)\n\n## Create your first entity\n\nWit.ai uses entities to help you understand user queries and extract meaningful information from them. Let's setup an entity that will enable our bot to understand common greetings like \"Hi\" or \"Hello\". \n\nType the word \"Hello\" in the \"User says…\" input field, then select the “wit/greetings” entity in the **Add a new entity** field. Use the dropdown on the right to set the value of the entity to **true**.\n\n![witai-new-entity](//images.ctfassets.net/1es3ne0caaid/3cpWaboPnO4Q8a2y0QMkYS/d6eeec27f83db214a5fc8789a4948263/witai-new-entity.png)\n\nOnce done, hit the **Validate** button to add the entity to your application. You can repeat the steps for other greetings such as \"Hi\", \"Hey\", \"Good morning\" etc.\n\n![witai-entity-validate](//images.ctfassets.net/1es3ne0caaid/35NxRkXs40uWu6CQM4we8q/5572518f63a427f90a7b52b047e4c66a/witai-entity-validate.png)\n\nIf you click on the **wit/greetings** entry at the bottom, you will be directed to the entity page that contains all the expressions under that entity.\n\n![witai-expressions](//images.ctfassets.net/1es3ne0caaid/2flNrPZj0kgYeq2mCMo0eE/5560609feebdf8e0c65eb352248a7e49/witai-expressions.png)\n\n## Create a custom entity\n\n`wit/greetings` is an example of a [built-in entity.](https://wit.ai/docs/built-in-entities/20180601) These built-in entities are prefixed by `wit/`, and are defined to extract common expressions from messages. Things like age, money, email address, location and the likes are all covered by Wit.ai’s built-in entities.\n\nYou can train our bot to understand other things that the built-in entities do not cover. For example, let's add an entity that allows our bot to understand a request for a joke.\n\nType \"Tell me a joke\" in the **User says...** input field, and add a new entity called \"getJoke\". As before, use the dropdown on the right to set the value of the entity to **true** and hit the **Validate** button.\n\n![witai-custom-entity](//images.ctfassets.net/1es3ne0caaid/v3wP6YwgGkyuMugQgKkIg/4df89a482c1591f9c01b30a1776a4bc1/witai-custom-entity.png)\n\n## Test your Wit.ai chatbot with curl\n\nGo to the settings page, and type \"Hello\" in the input field that says **Type something to cURL**, then copy the command to your clipboard using the copy icon on the right.\n\n![witai-curl-test-1](//images.ctfassets.net/1es3ne0caaid/l8yw7etu6WKkEAmmy2GAw/f606daeb4dd84584905e900604cca448/witai-curl-test-1.png)\n\nOpen a terminal window and paste in the command, then press Enter. This would produce some output in your terminal that shows the entity that your query matches.\n\n![witai-curl-test-2](//images.ctfassets.net/1es3ne0caaid/6xRWJ4lpOoooMc8aAyYcAO/b68aaf6d165bb588ba538613525b88d1/witai-curl-test-2.png)\n\n## Set up the server component\n\nWe need to setup a server component so that we can pass messages sent through the frontend of the app to Wit.ai for processing.\n\nRun the following command to install the dependencies we’ll be needing on the server side:\n\n```\n    npm install --save express body-parser cors node-wit dotenv\n```\n\nNext, create a new file called `server.js` in the root of your project directory and paste in the following code to set up a simple express server:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    const { Wit } = require('node-wit');\n    \n    const client = new Wit({\n      accessToken: process.env.WIT_ACCESS_TOKEN,\n    });\n    \n    const app = express();\n    \n    app.use(cors());\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    \n    app.post('/chat', (req, res) =\u003e {\n      const { message } = req.body;\n      \n      client\n        .message(message)\n        .then(data =\u003e {\n          console.log(data);\n        })\n        .catch(error =\u003e console.log(error));\n    });\n    \n    app.set('port', process.env.PORT || 7777);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nWe've also set up a `/chat` endpoint that receives messages from the frontend of our app and sends it off to the [Wit message API](https://wit.ai/docs/http/20160330#get-intent-via-text-link). Whatever response is received is then logged to the console.\n\nBefore you start the server, create a `variables.env` file in the root of your project directory. You should add this file to your `.gitignore` so that you do not commit it into your repository by accident.\n\nHere’s how your `variables.env` file should look like:\n\n```\n    // variables.env\n    \n    PORT=7777\n    WIT_ACCESS_TOKEN=\u003cyour server access token\u003e\n```\n\nYou can grab your Wit.ai server access token by heading to the settings under API Details.\n\n![witai-server-key](//images.ctfassets.net/1es3ne0caaid/5mNVf378PuCw0a24YOQUiW/1b0b95da1db1be193ed6defa609011ec/witai-server-key.png)\n\nSave the file and run `node server.js` from the root of your project directory to start the server.\n\nNow, send a few messages in the chat window, and watch the terminal where your Node server is running. You should see some output in your terminal that shows the entity that your query matches.\n\n![preact-demo-2](//images.ctfassets.net/1es3ne0caaid/18JOCTILrK8qGWgKu0qowY/b01a7693713d12707214e54209ebb4e2/preact-demo-2.png)\n\n\n![preact-demo-cli](//images.ctfassets.net/1es3ne0caaid/4eAIENajO8yaesgqIom2kK/e3832f087d3fd84f79e31626e1c8c337/preact-demo-cli.png)\n\n## Set up responses for your chatbot\n\nNow that user messages are being passed on to Wit.ai successfully, we need to add a way to detect which entity was matched and send an appropriate response to the user.\n\nWe'll achieve that by setting up a `responses` object that contains a variety of responses for each entity that we defined, and then send a random message when the appropriate entity is matched.\n\nInside the `/chat` route and under the `message` variable, paste in the following code:\n\n``` javascript\n    // server.js\n    \n    const responses = {\n      greetings: [\"Hey, how's it going?\", \"What's good with you?\"],\n    \n      jokes: [\n        'Do I lose when the police officer says papers and I say scissors?',\n        'I have clean conscience. I haven’t used it once till now.',\n        'Did you hear about the crook who stole a calendar? He got twelve months.',\n      ],\n    };\n    \n    const firstEntityValue = (entities, entity) =\u003e {\n      const val =\n        entities \u0026\u0026\n        entities[entity] \u0026\u0026\n        Array.isArray(entities[entity]) \u0026\u0026\n        entities[entity].length \u003e 0 \u0026\u0026\n        entities[entity][0].value;\n        \n      if (!val) {\n        return null;\n      }\n      \n      return val;\n    };\n    \n    const handleMessage = ({ entities }) =\u003e {\n      const greetings = firstEntityValue(entities, 'greetings');\n      const jokes = firstEntityValue(entities, 'getJoke');\n    \n      if (greetings) {\n        return console.log(responses.greetings[\n          Math.floor(Math.random() * responses.greetings.length)\n        ]);\n      }\n    \n      if (jokes) {\n        return console.log(responses.jokes[\n          Math.floor(Math.random() * responses.jokes.length)\n        ]);\n      }\n    \n      return console.log('I can tell jokes! Say \\'tell me a joke\\'')\n    };\n```\n\nThen change the line that says `console.log(data)` to `handleMessage(data)`:\n\n``` javascript\n    // server.js\n    \n    client\n      .message(message)\n      .then(data =\u003e {\n        handleMessage(data);\n      })\n      .catch(error =\u003e console.log(error));\n```\n\nOnce we find an entity that matches, a random message from the appropriate property in the `responses` object is logged to the console. Otherwise the default response is logged.\n\n\n## Set up Pusher Channels for realtime responses\n\nNow, let's integrate Pusher into the app so that our bot can respond to the user in realtime. Head over to the Pusher website and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). Select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app.\n\nOnce your app is created, retrieve your credentials from the API Keys tab, then add the following to your `variables.env` file:\n\n```\n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\n## Integrate Pusher Channels into your Preact application\n\nFirst, install the Pusher Channels client library by running the command below:\n\n```\n    npm install pusher-js\n```\n\nThen import it at the top of `index.js`:\n\n``` javascript\n    import Pusher from 'pusher-js';\n```\n\nNext, we’ll open a connection to Channels and use the  `subscribe()` method from Pusher to subscribe to a new channel called `bot`. Finally, we’ll listen for the `bot-response` on the `bot` channel using the `bind` method and update the application state once we receive a message.\n\nDon’t forget to replace the `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e` placeholder with the appropriate details from your Pusher account dashboard.\n\n``` javascript\n    // index.js\n    \n    componentDidMount() {\n      const pusher = new Pusher('\u003cyour app key\u003e', {\n        cluster: '\u003cyour app cluster\u003e',\n        encrypted: true,\n      });\n    \n      const channel = pusher.subscribe('bot');\n      channel.bind('bot-response', data =\u003e {\n        const msg = {\n          text: data.message,\n          user: 'ai',\n        };\n        this.setState({\n          conversation: [...this.state.conversation, msg],\n        });\n      });\n    }\n```\n\n## Trigger events from the server\n\nAdd the Pusher server library though npm:\n\n```\n    npm install pusher\n```\n\nThen import it at the top of `server.js`:\n\n``` javascript\n    // server.js\n    \n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n```\n\nChange the `handleMessage` function to look like this:\n\n``` javascript\n    // server.js\n    \n    onst handleMessage = ({ entities }) =\u003e {\n      const greetings = firstEntityValue(entities, 'greetings');\n      const jokes = firstEntityValue(entities, 'getJoke');\n      \n      if (greetings) {\n        return pusher.trigger('bot', 'bot-response', {\n          message:\n            responses.greetings[\n              Math.floor(Math.random() * responses.greetings.length)\n            ],\n        });\n      }\n    \n      if (jokes) {\n        return pusher.trigger('bot', 'bot-response', {\n          message:\n            responses.jokes[\n              Math.floor(Math.random() * responses.jokes.length)\n            ],\n        });\n      }\n    \n      return pusher.trigger('bot', 'bot-response', {\n        message: 'I can tell jokes! Say \\'tell me a joke\\'',\n      });\n    };\n```\n\nStop the node server if it is currently running by pressing `Ctrl + C` in the terminal and restart it with `node server.js`. Now you can go ahead and test your bot! Send messages like “hey”, or “Tell me a joke” and you will get replies from the bot.\n\n![preact-demo-3](//images.ctfassets.net/1es3ne0caaid/47YtBeZqT6QUakm8cACS8a/ffaed43b52eeed12e87420590f04f7cc/preact-demo-3.png)\n\n## Conclusion\n\nYou have now learned how easy it is to create a chatbot that incorporates natural language processing with Wit.ai and how to respond in realtime with Pusher Channels.\n\nThanks for reading! Remember that you can find the source code of this app in this [GitHub repository](https://github.com/ayoisaiah/preact-chatbot).","metaTitle":"How to build a chatbot with Preact and Wit.ai","metaDescription":"This tutorial shows how to create a simple chatbot using Preact, Node.js and Wit.ai. The bot will respond to queries in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2d4PDsL23OUcUGAYceGw8g","type":"Entry","createdAt":"2018-08-23T18:19:02.151Z","updatedAt":"2018-08-23T19:55:19.188Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Adding realtime functionality to a blog using Kubeless","url":"realtime-blog-kubeless","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/pusher-kubeless-blog","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4sfpYwaAdiGWy2gW6Ak2Yc","type":"Entry","createdAt":"2018-08-23T19:44:54.047Z","updatedAt":"2018-08-23T19:53:29.265Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kubernetes","url":"kubernetes","type":"library"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-08-15","description":"In this tutorial you will create a simple blog using serverless architecture for the backend, specifically Kubeless. You will add basic blogging functionality, including realtime post publishing. You will use React for your frontend.","prerequisite":"You will need a functioning Kubernetes system (1.8+). This tutorial was created and tested using Kubernetes 1.10 inside Docker 18.05 on macOS 10. It assumes you can debug Kubernetes problems on your own system.","content":"## Introduction\n\nIn this article, we are going to examine how to create a simple blog using a serverless architecture - in specific, Kubeless. This will show how we can connect simple handlers together to make everything work, and how we can add new functionality easily to the system without any major upheaval. \n\n![kubeless-realtime-demo](//images.ctfassets.net/1es3ne0caaid/50s0MKQDgAYuAEg44SMOCI/844d2ce62cc17e55ca40e1a8c598095f/kubeless-realtime-demo.gif)\n\n\n### What is a serverless architecture?\n\nServerless development is a relatively recent architectural pattern that separates the business logic from the connectivity and deployment concerns. As a developer, you need only be interested in writing the actual core functionality of your application - for example, the code that will persist a blog post to the data store. You then deploy this small piece of code into the serverless framework and configure it to be triggered by appropriate events - for example, incoming HTTP requests. The framework then takes care of all the orchestration needed to make everything work together correctly.\n\n## Prerequisites\n\nThis article focuses on the use of Kubeless as a serverless architecture. This needs a functioning Kubernetes system (at least version 1.8) in order for it to work, and it is assumed that this is already available. If not then it can be set up on a local system using [Minikube](https://kubernetes.io/docs/setup/minikube/), or the [Edge channel of Docker for Desktop](https://blog.docker.com/2018/02/docker-compose-kubernetes-docker-desktop/). You will also need to install the *kubeless* CLI as described on the [Kubeless Quick Start page](https://github.com/kubeless/kubeless/blob/master/docs/quick-start.md). \n\n\n\u003e **Note:** it is assumed that Kubernetes is already installed and working on your system, and that you are able to work with it to diagnose any system-specific issues that might come up.\n\n\n\u003e **Note:** this article was tested using Kubernetes 1.10 running inside Docker 18.05 on macOS 10.13.5. \n\n\n\u003e **Note:**  you don’t need to actually set up kubeless inside your kubernetes cluster. We will cover that later on in this article.\n\nWe will be using Node.js to develop the serverless functions and Create React App for the user interface. Whilst there is no need to actually run the functions locally, npm is needed to configure their dependencies, and a full Node.js stack is needed for Create React App to be used, so ensure that these are available for use.\n\n### Create a Pusher account\n\nIn order to follow along, you will need to create a free Pusher account. This is done by visiting the [Pusher dashboard](https://dashboard.pusher.com/) and logging in, creating a new account if needed. Then create a new Pusher Channels app and save the keys for later on.\n\n## Creating the blog backend\n\nOur backend architecture will be created using a series of small functions wired up in the Kubeless system. Our overall architecture will eventually look like this:\n\n![kubeless-realtime-architecture](//images.ctfassets.net/1es3ne0caaid/5TNtaKTsKA6ycUs4Uei8ms/b5a453c99e125a2a8ac335fcedc341f6/kubeless-realtime-architecture.png)\n\nThis looks a little daunting at first, but each of the five functions that we are going to write are very simple, and the rest of the system is handled for us by Kubeless.\n\n### Setting up Kubeless\n\nBefore we can do anything, we need to set up the underlying Kubeless architecture. This includes Kubeless itself, Kafka, MongoDB and Nginx for ingress.\n\n\n\u003e **Note:** at the time of writing, the latest version of Kubeless was v1.0.0-alpha.7. \n\n\n\u003e **Note:** ingress is the setup allowing HTTP calls to come in to the Kubeless infrastructure from outside on clean URLs. There are other alternatives available, but Nginx is easy to work with and does everything we need.\n\nIn order to set up Kubeless itself, we need to execute the following:\n\n```\n    $ kubectl create ns kubeless\n    namespace \"kubeless\" created\n    \n    $ kubectl create -f https://github.com/kubeless/kubeless/releases/download/v1.0.0-alpha.7/kubeless-non-rbac-v1.0.0-alpha.7.yaml\n    serviceaccount \"controller-acct\" created\n    customresourcedefinition.apiextensions.k8s.io \"functions.kubeless.io\" created\n    customresourcedefinition.apiextensions.k8s.io \"httptriggers.kubeless.io\" created\n    customresourcedefinition.apiextensions.k8s.io \"cronjobtriggers.kubeless.io\" created\n    configmap \"kubeless-config\" created\n    deployment.apps \"kubeless-controller-manager\" created\n```\n\nThis creates a Kubernetes namespace in which Kubeless will live, and creates the Kubeless resources from the specified resource definition. \n\nWe then can set up Kafka in the cluster in a very similar manner:\n\n```\n    $ kubectl create -f https://github.com/kubeless/kubeless/releases/download/v1.0.0-alpha.7/kafka-zookeeper-v1.0.0-alpha.7.yaml\n    customresourcedefinition.apiextensions.k8s.io \"kafkatriggers.kubeless.io\" created\n    service \"broker\" created\n    statefulset.apps \"kafka\" created\n    service \"kafka\" created\n    service \"zoo\" created\n    statefulset.apps \"zoo\" created\n    clusterrole.rbac.authorization.k8s.io \"kafka-controller-deployer\" created\n    clusterrolebinding.rbac.authorization.k8s.io \"kafka-controller-deployer\" created\n    service \"zookeeper\" created\n    deployment.apps \"kafka-trigger-controller\" created\n```\n\nAnd the Nginx ingress resources in the same way:\n\n```\n    $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/bc59b7ddeee6e252974853f167c299005c600781/deploy/mandatory.yaml\n    namespace \"ingress-nginx\" created\n    deployment.extensions \"default-http-backend\" created\n    service \"default-http-backend\" created\n    configmap \"nginx-configuration\" created\n    configmap \"tcp-services\" created\n    configmap \"udp-services\" created\n    serviceaccount \"nginx-ingress-serviceaccount\" created\n    clusterrole.rbac.authorization.k8s.io \"nginx-ingress-clusterrole\" created\n    role.rbac.authorization.k8s.io \"nginx-ingress-role\" created\n    rolebinding.rbac.authorization.k8s.io \"nginx-ingress-role-nisa-binding\" created\n    clusterrolebinding.rbac.authorization.k8s.io \"nginx-ingress-clusterrole-nisa-binding\" created\n    deployment.extensions \"nginx-ingress-controller\" created\n    \n    $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/bc59b7ddeee6e252974853f167c299005c600781/deploy/provider/cloud-generic.yaml\n    service \"ingress-nginx\" created\n```\n\n\u003e **Note:** at the time of writing, the current latest release of the ingress-nginx resource files were not working correctly, so this points at the last known commit that did work.\n\nFinally we want to set up MongoDB. There isn’t a convenient kubernetes resource definition for this, so we’ll write our own. Create a new file called `mongodb.yml` under your project directory as follows:\n\n``` yaml\n    apiVersion: v1\n    kind: Service\n    metadata:\n      name: mongo\n    spec:\n      ports:\n      - port: 27017\n      selector:\n        app: mongo\n      clusterIP: None\n    ---\n    apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2\n    kind: Deployment\n    metadata:\n      name: mongo\n    spec:\n      selector:\n        matchLabels:\n          app: mongo\n      strategy:\n        type: Recreate\n      template:\n        metadata:\n          labels:\n            app: mongo\n        spec:\n          containers:\n          - image: mongo:3.2.20\n            name: mongo\n            ports:\n            - containerPort: 27017\n              name: mongo\n```\n\nAnd then execute it:\n\n```\n    $ kubectl create -f mongodb.yml\n    service \"mongo\" created\n    deployment.apps \"mongo\" created\n```\n\nAt this point we have all of the infrastructure we need in order to build our application. \n\n### Creating articles\n\nOur first handler is the endpoint that will be called to create an article. This will ensure that we have the appropriate values in our request, and put a message onto the Kafka queue for other handlers to deal with. \n\nFirstly, we need to set up a project directory and the dependencies for this:\n\n```\n    $ mkdir create-article\n    $ cd create-article\n    $ npm init -y\n    $ npm install --save uuid kafka-node\n```\n\nThe `uuid` module will be used to generate a new, unique ID for the article, and the `kafka-node` module is used to produce a new message onto the Kafka queue.\n\nOur actual handler is then written in `create-article/index.js` as follows:\n\n``` javascript\n    const uuid = require('uuid/v4');\n    const kafka = require('kafka-node');\n    \n    const kafkaClient = new kafka.KafkaClient({kafkaHost: 'kafka.kubeless:9092'});\n    const kafkaProducer = new kafka.Producer(kafkaClient);\n    \n    module.exports = {\n      createArticle: function (event, context) {\n    \n        return new Promise((resolve, reject) =\u003e {\n            if (!event.data.title) {\n                reject('Missing field: title');\n            } else if (!event.data.body) {\n                reject('Missing field: body');\n            } else {\n                resolve({\n                    id: uuid(),\n                    created: new Date(),\n                    title: event.data.title,\n                    body: event.data.body\n                });\n            }\n        }).then((article) =\u003e {\n            return new Promise((resolve, reject) =\u003e {\n                kafkaProducer.send([\n                    { topic: 'new-article-topic', messages: JSON.stringify(article), partition: 0 }\n                ], (err, data) =\u003e {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(article);\n                    }\n                });\n            });\n        }).then((article) =\u003e {\n            event.extensions.response.statusCode = 201;\n            return article;\n        }).catch((err) =\u003e {\n            event.extensions.response.statusCode = 400;\n            return err;\n        });\n      }\n    }\n```\n\n\u003e **Note:** we’re assuming that Kafka is installed on “kafka.kubeless:9092” and that we’re using a topic called “new-article-topic”. This is the default host and port if using the Kafka that deploys as part of Kubeless, but in a real-life situation you should use [Kubernetes Configmaps](https://kubernetes-v1-4.github.io/docs/user-guide/configmap/) to configure this location.\n\nNow we need to deploy this into our cluster:\n\n```\n    $ kubeless function deploy create-article --runtime nodejs8 --dependencies package.json --handler index.createArticle --from-file index.js\n```\n\nThis creates a new serverless handler that will execute the exported function `createArticle` from the file `index.js` whenever it is triggered, and which will determine all of the dependencies that this function needs based on `package.json`.\n\nThen we want to set up an Ingress URL to allow incoming HTTP calls to trigger this function:\n\n```\n    $ kubeless trigger http create create-article --function-name create-article --path create --hostname localhost\n```\n\nThis means that calls to http://localhost/create **will trigger the function named `create-article` **- which we’ve just created.\n\nFinally we’ll create the Kafka topic that we are writing to:\n\n```\n    $ kubeless topic create new-article-topic\n```\n\nWe can test this now as well:\n\n```\n    $ curl http://localhost/create --data '{\"title\": \"My first post\", \"body\": \"This is my first post\"}' -H \"Content-type: application/json\"\n    {\"id\":\"6a61513b-06c8-4139-a816-a7188e75728e\",\"created\":\"2018-07-24T07:14:45.561Z\",\"title\":\"My first post\",\"body\":\"This is my first post\"}\n```\n\n### Persisting articles\n\nOnce we can handle the request to create an article, and put the message onto the Kafka topic, we can then handle this message to persist it into the MongoDB store.\n\nHandlers that are triggered by Kafka messages act in the exact same way as HTTP ones, including the fact that they are given an event that looks like an HTTP request. The data of this request is the message from the topic, ready to work with. We can also guarantee the contents of it, since it was put onto the topic by our own code and not by an external party.\n\nFirstly, we need to set up a project directory and the dependencies for this:\n\n```\n    $ mkdir persist-article\n    $ cd persist-article\n    $ npm init -y\n    $ npm install --save mongodb\n```\n\nOur actual handler is then written in `persist-article/index.js` as follows:\n\n``` javascript\n    const MongoClient = require('mongodb').MongoClient;\n    \n    module.exports = {\n      persistArticle: function (event, context) {\n        const article = event.data;\n        const post = {\n          \"_id\": article.id,\n          \"created\": new Date(article.created),\n          \"title\": article.title,\n          \"body\": article.body\n        };\n    \n        return new Promise((resolve, reject) =\u003e {\n    \n          MongoClient.connect(\"mongodb://mongo.default:27017\", (err, client) =\u003e {\n            if (err) {\n              console.log(err);\n              reject(err);\n            } else {\n              const db = client.db('kubeless_blog');\n    \n              db.collection('posts').insert(post, (err, result) =\u003e {\n                client.close();\n    \n                if (err) {\n                  console.log(err);\n                  reject(err);\n                } else {\n                  resolve(post);\n                }\n              });\n            }\n          });\n        });\n    \n      }\n    }\n```\n\n\u003e **Note:** we’re assuming that MongoDB is installed on “mongo.default:27017” and that we’re using a database called “kubeless_blog”. This is the default host and port if using the MongoDB that deploys as part of the earlier deployment resource, but in a real-life situation you should use [Kubernetes Configmaps](https://kubernetes-v1-4.github.io/docs/user-guide/configmap/) to configure this.\n\nNow we need to deploy this into our cluster:\n\n```\n    $ kubeless function deploy persist-article --runtime nodejs8 --dependencies package.json --handler index.persistArticle --from-file index.js\n```\n\nThis creates a new serverless handler that will execute the exported function `persistArticle` from the file `index.js` whenever it is triggered, and which will determine all of the dependencies that this function needs based on `package.json`.\n\nThen we want to set up an Ingress URL to allow incoming Kafka messages on our topic to trigger this function:\n\n```\n    $ kubeless trigger kafka create persist-article --function-selector created-by=kubeless,function=persist-article --trigger-topic new-article-topic\n```\n\nAt this point, we have a setup where all successful calls to our first handler will put messages onto the Kafka topic, and then our second handler will read and process them to write into our MongoDB database.\n\n### Listing articles\n\nNow that we can get articles into our system, we need to get them out again. The first part of this is a handler to get a list of all articles. \n\nFirstly, we need to set up a project directory and the dependencies for this:\n\n```\n    $ mkdir list-articles\n    $ cd list-articles\n    $ npm init -y\n    $ npm install --save mongodb\n```\n\nOur actual handler is then written in `list-articles/index.js` as follows:\n\n``` javascript\n    const MongoClient = require('mongodb').MongoClient;\n    \n    module.exports = {\n      listArticles: function (event, context) {\n        return new Promise((resolve, reject) =\u003e {\n    \n          MongoClient.connect('mongodb://mongo.default:27017', (err, client) =\u003e {\n            if (err) {\n              console.log(err);\n              reject(err);\n            } else {\n              const db = client.db('kubeless_blog');\n    \n              db.collection('posts')\n                    .find({})\n                    .sort({created: -1})\n                    .project({'_id': 1, 'title': 1, 'created': 1})\n                    .toArray((err, docs) =\u003e {\n                client.close();\n    \n                if (err) {\n                  console.log(err);\n                  reject(err);\n                } else {\n                  resolve(docs.map((doc) =\u003e {\n                      return {\n                          id: doc['_id'],\n                          title: doc.title,\n                          created: doc.created\n                      };\n                  }));\n                }\n              });\n            }\n          });\n        });\n    \n      }\n    }\n```\n\nThis gets every article, with no pagination or filtering, and returns them in order so that the most recent ones are first. It also only returns the title of each article, not the entire text.\n\nNow we need to deploy this into our cluster:\n\n```\n    $ kubeless function deploy list-articles --runtime nodejs8 --dependencies package.json --handler index.listArticles --from-file index.js\n```\n\nThis creates a new serverless handler that will execute the exported function `listArticles` from the file `index.js` whenever it is triggered, and which will determine all of the dependencies that this function needs based on `package.json`.\n\nThen we want to set up an Ingress URL to allow incoming HTTP calls to trigger this function:\n\n```\n    $ kubeless trigger http create list-articles --function-name list-articles --path list --hostname localhost\n```\n\nThis means that calls to http://localhost/list **will trigger the function named `list-articles` **- which we’ve just created.\n\n### Getting individual articles\n\nFinally, we need to be able to get an individual article out so that we can display it.\n\nFirstly, we need to set up a project directory and the dependencies for this:\n\n```\n    $ mkdir get-article\n    $ cd get-article\n    $ npm init -y\n    $ npm install --save mongodb\n```\n\nOur actual handler is then written in `get-article/index.js` as follows:\n\n``` javascript\n    const MongoClient = require('mongodb').MongoClient;\n    \n    module.exports = {\n      getArticle: function (event, context) {\n        const url = event.extensions.request.url;\n        const id = url.substring(1);\n    \n        return new Promise((resolve, reject) =\u003e {\n    \n          MongoClient.connect('mongodb://mongo.default:27017', (err, client) =\u003e {\n            if (err) {\n              console.log(err);\n              reject(err);\n            } else {\n              const db = client.db('kubeless_blog');\n    \n              db.collection('posts')\n                    .findOne({'_id': id}, (err, doc) =\u003e {\n                client.close();\n    \n                if (err) {\n                  console.log(err);\n                  reject(err);\n                } else {\n                  if (doc) {\n                    resolve({\n                      id: doc['_id'],\n                      created: doc.created,\n                      title: doc.title,\n                      body: doc.body\n                    });\n                  } else {\n                    event.extensions.response.statusCode = 404;\n                    resolve();\n                  }\n                }\n              });\n            }\n          });\n        });\n    \n      }\n    }\n```\n\nThis expects to be called with a URL containing the article ID, and then retrieves that article from the MongoDB store and returns it. If there is no matching article then an HTTP 404 is returned instead.\n\nNow we need to deploy this into our cluster:\n\n```\n    $ kubeless function deploy get-article --runtime nodejs8 --dependencies package.json --handler index.getArticle --from-file index.js\n```\n\nThis creates a new serverless handler that will execute the exported function `getArticles` from the file `index.js` whenever it is triggered, and which will determine all of the dependencies that this function needs based on `package.json`.\n\nThen we want to set up an Ingress URL to allow incoming HTTP calls to trigger this function:\n\n```\n    $ kubeless trigger http create get-article --function-name get-article --path get --hostname localhost\n```\n\n\u003e **Note:** the ingress mechanism does prefix matching, not exact matching. This means that the above actually matches any calls that **start** with “/get”, such as “/get/123”.\n\nThis means that calls to http://localhost/get/123 will trigger the function named `get-article` - which we’ve just created.\n\n## Creating the blog UI\n\nNow that we have our backend functionality, we need a UI to actually drive it. This will be a [React](https://github.com/facebook/create-react-app) application, using [Semantic UI](https://react.semantic-ui.com/) for some structure and styling.\n\nFirstly we’ll create a new application using the Create React App tool:\n\n```\n    $ create-react-app ui\n```\n\nThen we’ll add some dependencies that we need:\n\n```\n    $ npm install --save axios semantic-ui-react semantic-ui-css\n```\n\nWe can now start up the UI, and it will automatically update as we make changes to it:\n\n```\n    $ npm start\n```\n\nOur UI is going to consist of two different parts - the list of articles, and the actual article that we’re looking at.\n\nFirstly, let’s create a component to represent the article list. For this, create a file called `src/ArticleList.js` as follows:\n\n``` javascript\n    import React from 'react';\n    import { List } from 'semantic-ui-react';\n    import axios from 'axios';\n    export class ArticleList extends React.Component {\n        state = {\n            articles: []\n        };\n        _showArticle = this._handleShowArticle.bind(this);\n        loadList() {\n            axios.get('http://localhost/list')\n                .then((response) =\u003e {\n                    this.setState({\n                        articles: response.data\n                    });\n                });\n        }\n        _handleShowArticle(article) {\n            this.props.showArticle(article.id);\n        }\n        componentDidMount() {\n            this.loadList();\n        }\n        render() {\n            const articleEntries = this.state.articles.map((article) =\u003e {\n                return (\n                    \u003cList.Item key={article.id} onClick={() =\u003e this._showArticle(article)}\u003e\n                        \u003cList.Content\u003e\n                            \u003cList.Header as='a'\u003e{article.title}\u003c/List.Header\u003e\n                            \u003cList.Description as='a'\u003e{article.created}\u003c/List.Description\u003e\n                        \u003c/List.Content\u003e\n                    \u003c/List.Item\u003e\n                );\n            });\n            return (\n                \u003cList divided relaxed\u003e\n                    {articleEntries}\n                    \u003cList.Item onClick={this.props.newArticle}\u003e\n                        \u003cList.Content\u003e\n                            \u003cList.Header as='a'\u003eNew Article\u003c/List.Header\u003e\n                        \u003c/List.Content\u003e\n                    \u003c/List.Item\u003e\n                \u003c/List\u003e\n            );\n        }\n    }\n```\n\n\u003e **Note:** This gets the list of articles from http://localhost/list, which corresponds to the handler we defined above. \n\nNext we want a component to display a given article. For this, create a new file called `src/Article.js` as follows:\n\n``` javascript\n    import React from 'react';\n    import { Card, Loader } from 'semantic-ui-react';\n    import axios from 'axios';\n    export class Article extends React.Component {\n        state = {\n            article: undefined\n        };\n        componentDidMount() {\n            const id = this.props.id;\n            axios.get(`http://localhost/get/${id}`)\n                .then((response) =\u003e {\n                    this.setState({\n                        article: response.data\n                    });\n                });\n        }\n        render() {\n            const { article } = this.state;\n            if (!article) {\n                return \u003cLoader /\u003e;\n            }\n            return (\n                \u003cCard fluid\u003e\n                    \u003cCard.Content header={article.title} /\u003e\n                    \u003cCard.Content description={article.body} /\u003e\n                    \u003cCard.Content extra\u003e\n                        {article.created}\n                    \u003c/Card.Content\u003e\n                \u003c/Card\u003e\n            );\n        }\n    }\n```\n\n\u003e **Note:** This gets the article from http://localhost/get, which corresponds to the handler we defined above. \n\nFinally, we want a component to create a new article. This will be in `src/NewArticle.js` as follows:\n\n``` javascript\n    import React from 'react';\n    import { Form, Button, Message } from 'semantic-ui-react';\n    import axios from 'axios';\n    export class NewArticle extends React.Component {\n        state = {\n            title: '',\n            body: ''\n        };\n        _changeTitle = this._handleChangeTitle.bind(this);\n        _changeBody = this._handleChangeBody.bind(this);\n        _postArticle = this._handlePostArticle.bind(this);\n        _handleChangeTitle(e) {\n            this.setState({\n                title: e.target.value\n            });\n        }\n        _handleChangeBody(e) {\n            this.setState({\n                body: e.target.value\n            });\n        }\n        _handlePostArticle() {\n            const { title, body } = this.state;\n            axios({\n                method: 'post',\n                url: 'http://localhost/create',\n                data: {\n                    title,\n                    body\n                },\n                headers: {\n                    'content-type': 'application/json'\n                }\n            })\n            .then(() =\u003e {\n                this.setState({\n                    title: '',\n                    body: '',\n                    success: true,\n                    error: undefined\n                });\n            }, (e) =\u003e {\n                this.setState({\n                    success: false,\n                    error: e.response.data\n                });\n            });\n        }\n        render() {\n            let message;\n            if (this.state.success) {\n                message = \u003cMessage positive\u003eArticle posted successfully\u003c/Message\u003e;\n            } else if (this.state.error) {\n                message = \u003cMessage error\u003e{this.state.error}\u003c/Message\u003e\n            }\n            return (\n                \u003cForm error={this.state.error} success={this.state.success}\u003e\n                {message}\n                \u003cForm.Field\u003e\n                  \u003clabel\u003eTitle\u003c/label\u003e\n                  \u003cinput placeholder='Title' value={this.state.title} onChange={this._changeTitle} autoFocus /\u003e\n                \u003c/Form.Field\u003e\n                \u003cForm.Field\u003e\n                  \u003clabel\u003eArticle\u003c/label\u003e\n                  \u003ctextarea placeholder=\"Article\" value={this.state.body} onChange={this._changeBody} /\u003e\n                \u003c/Form.Field\u003e\n                \u003cButton type='submit' onClick={this._postArticle} \u003ePost Article\u003c/Button\u003e\n              \u003c/Form\u003e\n            );\n        }\n    }\n```\n\n\u003e **Note:** This creates the article by POSTing to http://localhost/create, which corresponds to the handler we defined above. \n\nNow that we’ve got these components, we need to tie these together. This is done by replacing the existing `src/App.js` to read as follows:\n\n``` javascript\n    import React, { Component } from 'react';\n    import 'semantic-ui-css/semantic.min.css';\n    import { Grid, Header, Container } from 'semantic-ui-react';\n    import { ArticleList } from './ArticleList';\n    import { Article } from './Article';\n    import { NewArticle } from './NewArticle';\n    class App extends Component {\n      state = {\n        currentArticle: undefined\n      };\n      _newArticle = this._handleNewArticle.bind(this);\n      _showArticle = this._handleShowArticle.bind(this);\n      _handleShowArticle(article) {\n        this.setState({\n          currentArticle: article\n        });\n      }\n      _handleNewArticle() {\n        this.setState({\n          currentArticle: undefined\n        });\n      }\n      render() {\n        let body;\n        if (this.state.currentArticle) {\n          body = \u003cArticle id={this.state.currentArticle} /\u003e\n        } else {\n          body = \u003cNewArticle /\u003e;\n        }\n        return (\n          \u003cContainer\u003e\n            \u003cGrid\u003e\n              \u003cGrid.Row\u003e\n                \u003cGrid.Column\u003e\n                  \u003cHeader as=\"h2\"\u003e\n                    Kubeless Blog\n                  \u003c/Header\u003e\n                \u003c/Grid.Column\u003e\n              \u003c/Grid.Row\u003e\n              \u003cGrid.Row\u003e\n                \u003cGrid.Column width={12}\u003e\n                  { body }\n                \u003c/Grid.Column\u003e\n                \u003cGrid.Column width={4}\u003e\n                  \u003cArticleList showArticle={this._showArticle} newArticle={this._newArticle} /\u003e\n                \u003c/Grid.Column\u003e\n              \u003c/Grid.Row\u003e\n            \u003c/Grid\u003e\n          \u003c/Container\u003e\n        );\n      }\n    }\n    export default App;\n```\n\nAt this point, we can use the UI to read and post articles:\n\n![kubeless-realtime-demo-no-realtime](//images.ctfassets.net/1es3ne0caaid/340Y10wn20Gscqc0a4S06g/ee857682c0b51fafe0ddfbd5c0764979/kubeless-realtime-demo-no-realtime.gif)\n\n## Adding realtime functionality to the blog\n\nCurrently, we can post articles to the blog and read ones that are posted. What we don’t get is any indication that a post has been made without refreshing the page. This can be achieved by adding Pusher in to the mix.\n\nWe are going to add a new handler into our Kubeless system that reacts to the same Kafka messages that are used to persist the messages, and which will trigger Pusher to indicate that a new post has been made.\n\n### Broadcasting articles\n\nOur new handler is going to react every time a new article is created, in the exact same way as the `persist-article` handler from above.\n\nFirstly, we need to set up a project directory and the dependencies for this:\n\n```\n    $ mkdir broadcast-article\n    $ cd broadcast-article\n    $ npm init -y\n    $ npm install --save pusher\n```\n\nOur actual handler is then written in `broadcast-article/index.js` as follows:\n\n``` javascript\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n          appId: 'PUSHER_APP_ID',\n          key: 'PUSHER_KEY',\n          secret: 'PUSHER_SECRET',\n          cluster: 'PUSHER_CLUSTER',\n          encrypted: true\n    });\n    \n    \n    module.exports = {\n      broadcastArticle: function (event, context) {\n        const article = event.data;\n        const post = {\n          \"_id\": article.id,\n          \"created\": new Date(article.created),\n          \"title\": article.title,\n          \"body\": article.body\n        };\n    \n        pusher.trigger('posts', 'new-post', post);\n      }\n    }\n```\n\n\u003e **Note:** we’re hard-coding the Pusher credentials here, which need to be updated to match those you obtained earlier. In a real-life situation you should use [Kubernetes Configmaps](https://kubernetes-v1-4.github.io/docs/user-guide/configmap/) to configure this.\n\nNow we need to deploy this into our cluster:\n\n```\n    $ kubeless function deploy broadcast-article --runtime nodejs8 --dependencies package.json --handler index.broadcastArticle --from-file index.js\n```\n\nThis creates a new serverless handler that will execute the exported function `broadcastArticle` from the file `index.js` whenever it is triggered, and which will determine all of the dependencies that this function needs based on `package.json`.\n\nThen we want to set up an Ingress URL to allow incoming Kafka messages on our topic to trigger this function:\n\n```\n    $ kubeless trigger kafka create broadcast-article --function-selector created-by=kubeless,function=broadcast-article --trigger-topic new-article-topic\n```\n\nThis is the exact same topic as was used before, so every message that triggers the `persist-article` handler will also trigger the `broadcast-article` one.\n\n### Updating the article list\n\nNow that we’re broadcasting events whenever articles are posted, we can automatically update the UI based on this. For this we want to listen to the Pusher events and react to them.\n\nFirstly, we need our Pusher dependency. From inside the UI project:\n\n```\n    $ npm install --save pusher-js\n```\n\nThen we need to update `src/ArticleList.js` to listen for the events and react accordingly. Firstly add the following to the top of the file:\n\n``` javascript\n    import Pusher from 'pusher-js';\n    \n    const pusher = new Pusher('PUSHER_APP_KEY', {\n        cluster: 'PUSHER_CLUSTER',\n        encrypted: true\n    });\n```\n\n\u003e **Note:** make sure you update this to include the App Key and Cluster from your Pusher Application you created earlier. These should exactly match those used in the `broadcast-article` handler.\n\nFinally, add the following to the `componentDidMount` method:\n\n``` javascript\n    pusher.subscribe('posts').bind('new-post', () =\u003e {\n       this.loadList();\n    });\n```\n\nThis will react to the `new-post` event that we are broadcasting by loading the full list of articles again. This means that whenever anyone posts an article, all active browsers will be told about it and get their article list updated.\n\nRestart your UI and we can see that the posts now appear automatically:\n\n![kubeless-realtime-demo](//images.ctfassets.net/1es3ne0caaid/50s0MKQDgAYuAEg44SMOCI/844d2ce62cc17e55ca40e1a8c598095f/kubeless-realtime-demo.gif)\n\n## Cleaning up\n\nOne thing that needs to be considered with a serverless application is deployment, and tearing it down if needed. We are actually running a large number of components here: five serverless functions, Kafka, Zookeeper, MongoDB, Nginx and the Kubeless framework itself. Each of these needs to be managed, and shut down, individually and correctly otherwise you leave bits hanging around.\n\nCleaning up this application can be done as follows if needed:\n\n```\n    # Broadcast Article Handler\n    kubeless trigger kafka delete broadcast-article\n    kubeless function delete broadcast-article\n    \n    # Get Article Handler\n    kubeless trigger http delete get-article\n    kubeless function delete get-article\n    \n    # List Articles Handler\n    kubeless trigger http delete list-articles\n    kubeless function delete list-articles\n    \n    # Persist Article Handler\n    kubeless trigger kafka delete persist-article\n    kubeless topic delete new-article-topic\n    kubeless function delete persist-article\n    \n    # Create Article Handler\n    kubeless trigger http delete create-article\n    kubeless function delete create-article\n    \n    # Nginx Ingress\n    kubectl delete -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/provider/cloud-generic.yaml\n    kubectl delete -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/mandatory.yaml\n    \n    # MongoDB\n    kubectl delete -f mongodb.yml\n    \n    # Kafka\n    kubectl delete -f https://github.com/kubeless/kubeless/releases/download/v1.0.0-alpha.7/kafka-zookeeper-v1.0.0-alpha.7.yaml\n    \n    # Kubeless\n    kubectl delete -f https://github.com/kubeless/kubeless/releases/download/v1.0.0-alpha.7/kubeless-non-rbac-v1.0.0-alpha.7.yaml\n    kubectl delete ns kubeless\n```\n\n## Summary\n\nThis article shows a brief introduction to using Kubeless to build a simple application, and then extending it by adding new functionality. We can easily see how adding this new functionality can be done later on, with no impact to the rest of the service. \n\nWhilst not shown here, there’s no reason that all of these handlers need to be written by the same team, or even in the same language. Serverless architectures, in the same way as Microservices, thrive on a disjoint ecosystem where each component is developed in the way that makes the most sense for that one component, rather than forcing a single language on the entire application.\n\nThe full source code for this can be seen on [GitHub](https://github.com/sazzer/pusher-kubeless-blog).","metaTitle":"Adding realtime functionality to a blog using Kubeless","metaDescription":"Create a basic blog using Kubeless to power a serverless backend, and React for the frontend. Learn how to create and deploy serverless functions."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"eJeACgS2mOIKUGC6sW6ME","type":"Entry","createdAt":"2018-08-14T16:56:06.391Z","updatedAt":"2018-08-14T16:57:26.849Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a localized app with Laravel - Part 3: Creating multi-language string maps","url":"localized-laravel-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1N3HBqLEugWyeKsWEW0iYg","type":"Entry","createdAt":"2018-08-06T18:12:32.345Z","updatedAt":"2018-08-06T18:12:32.345Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Fisayo Afolayan","url":"fisayo-afolayan","email":"afolayanfisayo@gmail.com","twitter":"https://twitter.com/fisayoafolayan","github":"https://github.com/fisayoafolayan","guestWriter":true}}],"projectRepo":"https://github.com/fisayoafolayan/build-an-international-app-laravel","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}}],"reviewDate":"2018-08-14","description":"This four-part series explores how to build an accessible localized application in Laravel. In part three, we will implement multi-language strings in the Laravel application.","prerequisite":"Please read and follow the previous tutorials, also linked in this tutorial.","content":"In the previous chapters, we looked at what an international application is and the different things to consider when building one. We got started with the tour guide application and made the backend of our laravel application.\n\nIn this chapter, we will look at how to add support for multiple languages on our application.\n\nHere are the [part 1](https://pusher.com/tutorials/localized-laravel-part-1) and [part 2](https://pusher.com/tutorials/localized-laravel-part-2) in case you missed it!\n\n## Prerequisites\n\nRead and followed the previous guides.\n\n## What we are going to achieve\n\nThe first thing we need to do is to confirm where a user is coming from or the language the user's browser is requesting. If a user requests a specific language URL, we need to give preference to that, else we give preference to the language a users browser is requesting. We will need to set up a middleware to do this check for us.\n\nThe next thing is to serve the user content based on this language. We can use a route group if we want to have separate pages for these content. If we want to maintain the same page structure, we can then pass the language as a parameter to our methods. With the language passed, we can retrieve the data from the database.\n\nWe can choose to store the data in JSON format or have database table fields for each language. JSON is ideal so we can always add new language without having to adjust our database. We finally need to map strings for things like error messages. We can display the appropriate string based on the language we set.\n\n\n\n## Making the content structure for destination description\n\nWe will store descriptions as JSON string. The language will serve as the object key while the content as the object value. It should look like this when stored:\n\n```\n    '{\n      \"en\" : \"This is the English version\",\n      \"fr\" : \"C'est la version française\",\n      \"de\" : \"Dies ist die deutsche Version.\"\n    }'\n```\n\nTo create a JSON object in PHP, we need to create an array and encode the array as JSON. This can be done using `json_encode($array)`. Instead of using `json_encode` every time we want to store a destination record, we can define a [mutator](https://laravel.com/docs/5.6/eloquent-mutators) on the `Destination` model to automatically convert our array into objects.\n\nOpen `./app/Destination.php` and add the following:\n\n``` language-php\n    // app/Destination.php\n    \n    [...]\n    class Destination extends Model\n    {\n        protected $casts = [\n            'description' =\u003e 'array'\n        ];\n    \n        [...]\n    \n        public function setDescriptionAttribute($value)\n        {\n            $this-\u003eattributes['description'] = json_encode($value);\n        }\n    }\n```\n\n  \u003e We cast description field as an array so that when we retrieve a destination record, we do not have to use `json_decode` on it to retrieve the data. PHP does not have a native way of working with JSON objects. To use a JSON object, we have to convert the object to an array first.\n\nNow, let us store some destinations in the three languages we support. We are going to use a database seeder to store the content in the database.\n\nRun the following command to create a database seeder:\n\n```\n    $ php artisan make:seed DestinationTableSeeder\n```\n\nThen, open the `database/seeds/DestinationTableSeeder.php` file and replace with the following:\n\n``` language-php\n    // database/seeds/DestinationTableSeeder.php\n    \u003c?php\n    \n    use Illuminate\\Database\\Seeder;\n    use App\\Destination;\n    \n    class DestinationTableSeeder extends Seeder\n    {\n        public function run()\n        {\n            $destinations = [\n                [\n                  'name' =\u003e \"New York City\", \n                  'image' =\u003e \"https://images.pexels.com/photos/700974/pexels-photo-700974.jpeg?auto=compress\u0026cs=tinysrgb\u0026dpr=2\u0026h=650\u0026w=940\", \n                  'location' =\u003e \"United States\", \n                  'description' =\u003e[\n                       \"en\" =\u003e \"This is New York City\",\n                       \"fr\" =\u003e \"C'est New York\",\n                       \"de\" =\u003e \"Dies ist New York\"\n                    ]\n                ],\n                [\n                  'name' =\u003e \"Eiffel Tower\", \n                  'image' =\u003e \"https://images.pexels.com/photos/5463/people-eiffel-tower-france-landmark.jpg?auto=compress\u0026cs=tinysrgb\u0026dpr=2\u0026h=650\u0026w=940\", \n                  'location' =\u003e \"United States\", \n                  'description' =\u003e [\n                       \"en\" =\u003e \"This is the Eiffel Tower\",\n                       \"fr\" =\u003e \"C'est la tour Eiffel.\",\n                       \"de\" =\u003e \"Das ist der Eiffelturm.\"\n                    ]\n                ]           \n            ];\n    \n            foreach ($destinations as $destination) {\n                    Destination::create($destination);\n            }\n        }\n    }\n```\n\nTo run the seeder, use the following command:\n\n```\n    $ php artisan db:seed --class=DestinationTableSeeder\n```\n\nWe have created the content needed for our destination page. We will look at how to retrieve the content shortly.\n\n\n## Setting the app language based on the user’s browser language preference\n\nGetting the preferred language from a user’s browser is easy. Laravel `Request` provides a method for getting it. You can pass an array of languages your application supports, and the method will return a match for it. For example, if the user wants `en_US` and your application only has general English `en`, the method will return `en`, which is convenient for us.\n\nAnother cool thing about this method is that, if the user’s preferred language does not exist in our array, the method returns the first item in our array. So you may want to order the languages you support with some preference.\n\nWe will make a middleware that will run with the web middleware group. It will set the language of our Laravel application based on the user's browser preference. To create the middleware, run the following command:\n\n```\n    $ php artisan make:middleware Localize\n```\n\nNow, open `./app/Http/Controllers/Middleware/Localize.php` and replace with the following:\n\n``` language-php\n    \u003c?php\n    \n    namespace App\\Http\\Middleware;\n    \n    use Closure;\n    \n    class Localize\n    {\n        public function handle($request, Closure $next)\n        {\n            app()-\u003esetLocale($request-\u003egetPreferredLanguage(config('app.languages')));\n            return $next($request);\n        }\n    }\n```\n\nThis sets the app language based on the famous `Request` method we have been talking about. We will define our languages inside `./config/app.php` file.\n\nNavigate to `./config/app.php` and add the following:\n\n``` language-php\n    // config/app.php\n    [...]\n    \n        'fallback_locale' =\u003e 'en',\n    \n        'languages' =\u003e ['fr','de','en'],\n    \n    [...]\n```\n\nFinally, load the middleware in `.app/Http/Kernel.php`:\n\n``` language-php\n       // app/Http/Kernel.php\n       \n       [...]\n        protected $middlewareGroups = [\n            'web' =\u003e [\n                [...]\n                \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n                \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n                \\App\\Http\\Middleware\\Localize::class,\n            ],\n            [...]\n        ];\n```\n\n## Setting the app language based on the routes\n\nDepending on how you intend to compose your routes, setting the app language should not be difficult. For this tour guide, we are going to use route prefixes. These prefixes will represent each of the languages we support. When a user visits the route, we will set the language based on what prefixes it.\n\nUsing route prefixes can present a little challenge. Since we want some specific routes to have different language versions, we may need to create different prefixes representing those languages and create the same routes under the prefix group. This is what I mean:\n\n``` language-php\n    Route::prefix('en')-\u003egroup(function() {\n      Route::get('/', function () { return view('welcome'); });\n    });\n    Route::prefix('fr')-\u003egroup(function() {\n      Route::get('/', function () { return view('welcome'); });\n    });\n    Route::prefix('de')-\u003egroup(function() {\n      Route::get('/', function () { return view('welcome'); });\n    });\n```\n\nThat approach does not look good. Instead, We might want to use wildcards on the routes like\n\n``` language-php\n    Route::get('{lang}/', function () { return view('welcome'); });\n```\n\nand have our controller check the value of the wildcard, but that is equally not efficient.\n\nSo, we will use a wildcard prefix instead. Open your `routes/web.php` and add the following:\n\n``` language-php\n    // routes/web.php\n    [...]\n    Route::prefix('{lang}')-\u003egroup(function() {\n      // routes here\n    });\n```\n\nThen, we are going to bind this wildcard in our `RouteServiceProvider` so we can pick the value of the wildcard. We will also throw a `404 not found` if the wildcard is not part of the languages we support.\n\nOpen `./app/Providers/RouteServiceProdiver.php` and add the following:\n\n``` language-php\n    // app/Providers/RouteServiceProdiver.php\n    [...]\n        public function boot()\n        {   \n          parent::boot();\n          Route::bind('lang',function ($name){\n            in_array($name,config('app.languages'))? app()-\u003esetlocale($name) : abort(404);  \n          });\n        }\n    [...]\n```\n\nBecause we used this approach, any route a user visits will always set the app language. This way, the users have control over the content they see.\n\nFor pages with static content, we can use a string map for it. We can then use the app language to determine which content to show our users.\n\n\n## Returning content based on app language\n\nWe have looked at the two ways in which we can set the language of our application. Now, let us return the description of our destinations based on the app language.\n\nWe can define an [accessor](https://laravel.com/docs/5.6/eloquent-mutators#accessors-and-mutators) on the  `Destination` model that will return the description we want. However, we cannot define the accessor on the `description` attribute itself. If we do, we will no longer be able to retrieve the original JSON string we saved once we choose to update it.\n\nWe will define an appended attribute on the model and define an accessor on it. Open the `Destination` model and add the following:\n\n``` language-php\n    [...]\n    \n    class Destination extends Model\n    {\n        [...]\n    \n        protected $appends = ['translated_description'];\n    \n        [...]\n    \n        public function getTranslatedDescriptionAttribute()\n        {    \n            return $this-\u003edescription[app()-\u003egetLocale()];\n        }\n    }\n```\n\nNow, whenever we want to use the translated content (like in our views), we use `translated_description`.\n\n\n## Creating a string map for English, French, and German\n\nLaravel provides a localization feature that makes retrieving strings in various languages easy. To create string maps, we need to create a JSON file named after the language we want to map. The JSON object key will be the primary language version of the string/phrase (in our case, English) and the value will be in the language we want to map.\n\nIn our case, we will create `fr.json` and `de.json`. The string map below will work with the authentication pages generated when we use artisan to make the auth scaffolding.\n\n  Next, we will create two files in the `resources/lang` to store our string maps\n\n```\n    $ touch resources/lang/fr.json\n    $ touch resources/lang/de.json\n```\n\nInsert the following content into `fr.json` file located at `resources/lang/fr.json`:\n\n``` language-json\n    {\n        \"Login\" : \"Se connecter\",\n        \"Password\" : \"Mot de passe\",\n        \"E-Mail Address\" : \"La Adresse électronique\",\n        \"Forgot Your Password?\" : \"Mot de passe Oublié?\",\n        \"Remember Me\" : \"Souviens-toi de Moi\",\n        \"Register\" : \"Enregistrer\",\n        \"Confirm Password\" : \"Confirmer Mot de passe\",\n        \"Name\" : \"Nom\",\n        \"Welcome to the TourGuide\" : \"Bienvenue au TourGuide\",\n        \"View destinations\" : \"Voir les destinations\",\n        \"View More\" : \"Afficher plus\",\n        \"Book Now\" : \"Reserve maintenant\",\n        \"Phone\" : \"Téléphone\",\n        \"Country\" : \"Votre Pays\",\n        \"You do not have any reservations\" : \"Vous n'avez aucune réservation\",\n        \"How many people are coming?\" : \"Combien de personnes viennent?\",\n        \"e.g\" : \"par exemple\",\n        \"When would you like to visit?\" : \"Quand voudriez vous visiter?\",\n        \"Make a booking\" : \"Faire une réservation\",\n        \"Number of tourists\" : \"Nombre de touristes\",\n        \"Tour date\" : \"Date de la tournée\"\n    }\n```\n\nInsert the following content into `de.json` file located at `resources/lang/de.json`:\n\n``` language-json\n    {\n        \"Login\" : \"Anmeldung\",\n        \"Password\" : \"Passwort\",\n        \"E-Mail Address\" : \"E-Mail-Addresse\",\n        \"Forgot Your Password?\" : \"Haben Sie Ihr Passwort vergessen?\",\n        \"Remember Me\" : \"Erinnere dich an mich\",\n        \"Register\" : \"Registrieren\",\n        \"Confirm Password\" : \"Bestätige das Passwort\",\n        \"Name\" : \"Name\",\n        \"Welcome to the TourGuide\" : \"Willkommen beim TourGuide\",\n        \"View destinations\" : \"Ziele anzeigen\",\n        \"View More\" : \"Mehr sehen\",\n        \"Book Now\" : \"buchen Sie jetzt\",\n        \"Phone\" : \"Telefon\",\n        \"Country\" : \"Land\",\n        \"You do not have any reservations\" : \"Sie haben keine Reservierungen\",\n        \"How many people are coming?\" : \"Wie viele Leute werden kommen?\",\n        \"e.g\" : \"z.B.\",\n        \"When would you like to visit?\" : \"Wann möchten Sie besuchen?\",\n        \"Make a booking\" : \"Reservieren\",\n        \"Number of tourists\" : \"Anzahl der Touristen\",\n        \"Tour date\" : \"Tourdatum\"\n    }\n```\n\nNow, let us make use of this in our view file. Open the `resources/views/welcome.blade.php` file and edit:\n\n``` language-html\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"{{ app()-\u003egetLocale() }}\"\u003e\n    [...]\n        \u003cbody\u003e\n            \u003cdiv class=\"flex-center position-ref full-height\"\u003e\n                @if (Route::has('login'))\n                    \u003cdiv class=\"top-right links\"\u003e\n                        @auth\n                            \u003ca href=\"{{ url('/home') }}\"\u003eHome\u003c/a\u003e\n                        @else\n                            \u003ca href=\"{{ route('login') }}\"\u003e{{ __('Login') }}\u003c/a\u003e\n                            \u003ca href=\"{{ route('register') }}\"\u003e{{ __('Register') }}\u003c/a\u003e\n                        @endauth\n                    \u003c/div\u003e\n                @endif\n    \n                \u003cdiv class=\"content\"\u003e\n                    \u003cdiv class=\"title m-b-md\"\u003e\n                        {{ __('Welcome to the TourGuide') }}\n                    \u003c/div\u003e\n    \n                    \u003cdiv class=\"links\"\u003e\n                        \u003ca href=\"{{url(app()-\u003egetLocale().'/destinations')}}\"\u003e{{__('View destinations')}}\u003c/a\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nUsing the mapped string is quite easy. In the blade file, use `__('String to translate')`. If Laravel cannot find the JSON file for the app-local language, it will use the original string we wish to translate. So, the `String to translate` can be in the primary language of our application.\n\nThat is all we need do to use the string map.\n\n\n## Creating error and validation messages based on language\n\nLaravel uses language strings for errors and validation. These language strings are stored in PHP files within the `resources/lang` directory. Within this directory, we need to create subdirectories for each language supported by the application.\n\nCreate the following subdirectories – `fr` and `de` inside `resources/lang`.\n\n```\n    $ mkdir resources/lang/fr\n    $ mkdir resources/lang/de\n```\n\nIn the two directories we just created, create the following files:\n\n```\n    $ touch resources/lang/fr/auth.php\n    $ touch resources/lang/fr/pagination.php\n    $ touch resources/lang/fr/passwords.php\n    $ touch resources/lang/fr/validation.php\n    $ touch resources/lang/de/auth.php\n    $ touch resources/lang/de/pagination.php\n    $ touch resources/lang/de/passwords.php\n    $ touch resources/lang/de/validation.php\n```\n\nAt this stage, head over to the [GitHub repository](https://github.com/fisayoafolayan/build-an-international-app-laravel) for this project and copy out the required language files. \n\nNow, you can try it out by checking out the login or register pages. Run `php artisan serve` then visit the URL.\n\n\n\u003e To see the pages in different language versions, change the language settings on your browser language settings. If you are on a chrome browser, read about how to change your language [here](https://www.wikihow.com/Change-the-Default-Language-in-Google-Chrome).\n\n\n## Conclusion\n\nWe have come very far. We have understood what internationalization requires and we created a basic application setup for it. We looked at how to store content in our database when it has multiple language versions. We also looked at how to get the language preference of a user and how to use the app language to show the content we want.\n\nWe can say at this point that we fully understand what it takes to build an international application. In the next chapter, we will look at the frontend of the application and make pages to test everything we have built. We will address any accessibility issues that may arise and see how best to make the experience of our application seamless.\n\nThe source code to the application in this article is available on [GitHub](https://github.com/fisayoafolayan/build-an-international-app-laravel).","metaTitle":"Build a localized app with Laravel - Part 3","metaDescription":"This four-part series explores how to build an accessible localized application in Laravel. In part three, implement multi-language support."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"yJv9gYc9dmUAeyIMAQEw2","type":"Entry","createdAt":"2018-08-16T22:01:51.811Z","updatedAt":"2018-08-16T22:01:51.811Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a two-player game with Python and Vue","url":"game-python-vue","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/python-pusher-multiplayer-game","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6nDfV1cd5C6464wgCoOQii","type":"Entry","createdAt":"2018-02-12T15:08:13.901Z","updatedAt":"2018-02-26T12:31:12.764Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Gaming","url":"gaming","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4IiTE4WzzyQkoeAoaOqgcu","type":"Entry","createdAt":"2018-02-12T15:10:28.101Z","updatedAt":"2018-02-26T12:31:12.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Multiplayer Game","url":"multiplayer-game","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-08-13","description":"Build a simple two-player game featuring online presence and realtime interactions. Use Python for the backend, and Vue for the frontend. Users will be able to see when another player logs on, challenge them to a game, and interact instantly.","prerequisite":"You will need Python 3+, virtualenv and Flask installed on your machine.","content":"The advent of the PC and the internet has redefined the term “entertainment” and the means by which it can be obtained. While a console or some special hardware would have been required to play games in the past, games are only a click away in today's world of technology.\n\nIn this tutorial, we will create a realtime tic-tac-toe game using Python and Pusher channels. Here’s a demo of how the game will look and behave upon creation:\n\n![python-vue-game-demo](//images.ctfassets.net/1es3ne0caaid/1RGRfjXfgQgYWYy2kqImOs/0c1db39f9371dbb773638ffe57bfd385/python-vue-game-demo.gif)\n\nThis multiplayer game will allow a player to connect using their preferred username (or generate a random username where a player doesn’t connect with a username) and choose to play with another player from a list of other online players.\n\nThe game itself follows the conventional principles of the popular [tic-tac-toe](https://en.wikipedia.org/wiki/Tic-tac-toe) game. The “online player(s)” feature is powered by [Pusher presence channels](https://pusher.com/docs/client_api_guide/client_presence_channels) and the realtime updates of a player’s move across multiple windows is powered by [Pusher private channels.](https://pusher.com/docs/client_api_guide/client_private_channels) The source code for this tutorial is available here [GitHub](https://github.com/neoighodaro/python-pusher-multiplayer-game). \n\nLet’s get started.\n\n\n## Prerequisites\n\nTo follow along, a basic knowledge of Python, Flask, JavaScript (ES6 syntax) and Vue is required. You will also need the following installed on your machine:\n\n\n1. [Python (v3.x)](https://www.python.org/)\n2. [Virtualenv](https://virtualenv.pypa.io/en/stable/)\n3. [Flask](http://flask.pocoo.org/)\n\nVirtualenv is great for creating isolated Python environments, so we can install dependencies in an isolated environment without polluting our global packages directory.\n\n\n## Setting up the app environment\n\nWe will create the project folder and activate a virtual environment within it:\n\n```\n    $ mkdir python-pusher-mutiplayer-game\n    $ cd python-pusher-mutiplayer-game\n    $ virtualenv .venv\n    $ source .venv/bin/activate # Linux based systems\n    $ \\path\\to\\env\\Scripts\\activate # Windows users\n```\n\nWe will install [Flask](http://flask.pocoo.org/) using this command:\n\n```\n    $ pip install flask\n```\n\n## Setting up Pusher\n\nTo integrate Pusher into the multiplayer game, we need to create a Pusher channels application from the Pusher dashboard. If you don’t already have a Pusher account, head over to the [Pusher website](https://pusher.com/) and create one.\n\nAfter creating an account, create a new channels application and enable client events from the application dashboard. To enable client events, click on **App settings** and scroll to the bottom of the page then select the option that says **Enable client events,** and update the **App settings.**\n\n## Building the backend server\n\nBack in the project directory, let’s install the [Python Pusher library](https://github.com/pusher/pusher-http-python) with this command:\n\n```\n    $ pip install pusher\n```\n\nWe will create a new file and call it `app.py`, this is where we will write all the code for the Flask backend server. We will also create a folder and call it `templates`, this folder will hold the markup files for this application.\n\nLet’s write some code to register the endpoints for the game and serve the view, open the `app.py` file and paste the following code:\n\n``` python\n    // File: ./app.py\n    from flask import Flask, render_template, request, jsonify, make_response, json\n    from pusher import pusher\n    \n    app = Flask(__name__)\n    \n    pusher = pusher_client = pusher.Pusher(\n      app_id='PUSHER_APP_ID',\n      key='PUSHER_APP_KEY',\n      secret='PUSHER_APP_SECRET',\n      cluster='PUSHER_APP_CLUSTER',\n      ssl=True\n    )\n    \n    name = ''\n    \n    @app.route('/')\n    def index():\n      return render_template('index.html')\n      \n    @app.route('/play')\n    def play():\n      global name\n      name = request.args.get('username')\n      return render_template('play.html')\n      \n    @app.route(\"/pusher/auth\", methods=['POST'])\n    def pusher_authentication():\n      auth = pusher.authenticate(\n        channel=request.form['channel_name'],\n        socket_id=request.form['socket_id'],\n        custom_data={\n          u'user_id': name,\n          u'user_info': {\n            u'role': u'player'\n          }\n        }\n      )\n      return json.dumps(auth)\n      \n    if __name__ == '__main__':\n        app.run(host='0.0.0.0', port=5000, debug=True)\n    \n    name = ''\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the values on your Pusher dashboard.\n\nIn the code above, we defined three endpoints, here’s what they do:\n\n\n- `/` - renders the front page that asks a player to connect with a username.\n- `/play` - renders the game view.\n- `/pusher/auth` - authenticates Pusher’s presence and private channels for connected players.\n\n\n## Building the frontend\n\nIn the `templates` folder, we will create two files:\n\n\n1. `index.html`\n2. `play.html`\n\nThe `index.html` file will render the connection page, so open the `templates/index.html` file and paste the following code:\n\n``` html\n    \u003c!-- File: ./templates/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n        \u003chead\u003e\n            \u003cmeta charset=\"utf-8\"\u003e\n            \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n            \u003cmeta name=\"description\" content=\"\"\u003e\n            \u003cmeta name=\"author\" content=\"Neo Ighodaro\"\u003e\n            \u003ctitle\u003eTIC-TAC-TOE\u003c/title\u003e\n            \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n            \u003cstyle\u003e\n                  :root {\n                    --input-padding-x: .75rem;\n                    --input-padding-y: .75rem;\n                  }\n                  html,\n                  body, body \u003e div {\n                    height: 100%;\n                  }\n                  body \u003e div {\n                    display: -ms-flexbox;\n                    display: flex;\n                    -ms-flex-align: center;\n                    align-items: center;\n                    padding-top: 40px;\n                    padding-bottom: 40px;\n                    background-color: #f5f5f5;\n                  }\n                  .form-signin {\n                    width: 100%;\n                    max-width: 420px;\n                    padding: 15px;\n                    margin: auto;\n                  }\n                  .form-label-group {\n                    position: relative;\n                    margin-bottom: 1rem;\n                  }\n                  .form-label-group \u003e input,\n                  .form-label-group \u003e label {\n                    padding: var(--input-padding-y) var(--input-padding-x);\n                  }\n                  .form-label-group \u003e label {\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    display: block;\n                    width: 100%;\n                    margin-bottom: 0; /* Override default `\u003clabel\u003e` margin */\n                    line-height: 1.5;\n                    color: #495057;\n                    cursor: text; /* Match the input under the label */\n                    border: 1px solid transparent;\n                    border-radius: .25rem;\n                    transition: all .1s ease-in-out;\n                  }\n                  .form-label-group input::-webkit-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input:-ms-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::-ms-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::-moz-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input:not(:placeholder-shown) {\n                    padding-top: calc(var(--input-padding-y) + var(--input-padding-y) * (2 / 3));\n                    padding-bottom: calc(var(--input-padding-y) / 3);\n                  }\n                  .form-label-group input:not(:placeholder-shown) ~ label {\n                    padding-top: calc(var(--input-padding-y) / 3);\n                    padding-bottom: calc(var(--input-padding-y) / 3);\n                    font-size: 12px;\n                    color: #777;\n                  }\n            \u003c/style\u003e\n          \u003c/head\u003e\n          \u003cbody\u003e\n            \u003cdiv id=\"app\"\u003e\n              \u003cform class=\"form-signin\"\u003e\n                \u003cdiv class=\"text-center mb-4\"\u003e\n                  \u003cimg class=\"mb-4\" src=\"https://thestore.gameops.com/v/vspfiles/photos/Tic-Tac-Go-14.gif\" alt=\"\" width=\"72\" height=\"72\"\u003e\n                  \u003ch1 class=\"h3 mb-3 font-weight-normal\"\u003eTIC-TAC-TOE\u003c/h1\u003e\n                  \u003cp\u003ePUT IN YOUR DETAILS TO PLAY\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-label-group\"\u003e\n                    \u003cinput type=\"name\" id=\"inputUsername\" ref=\"username\" class=\"form-control\" placeholder=\"Username\" required=\"\" autofocus=\"\"\u003e\n                      \u003clabel for=\"inputUsername\"\u003eUsername\u003c/label\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-label-group\"\u003e\n                  \u003cinput type=\"email\" id=\"inputEmail\" ref=\"email\" class=\"form-control\" placeholder=\"Email address\" autofocus=\"\" required\u003e\n                    \u003clabel for=\"inputEmail\"\u003eEmail address\u003c/label\u003e\n                \u003c/div\u003e\n                \u003cbutton class=\"btn btn-lg btn-primary btn-block\" type=\"submit\" @click.prevent=\"login\"\u003eConnect\u003c/button\u003e\n                \u003cp class=\"mt-5 mb-3 text-muted text-center\"\u003e© 2017-2018\u003c/p\u003e\n              \u003c/form\u003e\n            \u003c/div\u003e\n            \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n            \u003cscript\u003e\n            var app = new Vue({\n              el: '#app',\n              methods: {\n                login: function () {\n                  let username = this.$refs.username.value\n                  let email = this.$refs.email.value\n                  window.location.replace(`/play?username=${username}\u0026email=${email}`);\n                }\n              }\n            })\n            \u003c/script\u003e\n        \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWhen a player visits the connection page and puts in a username and email, the browser window will be redirected to the game view. \n\nLet’s write the markup for the game view. Open the `play.html` file and paste the following code:\n\n``` html\n    \u003c!-- file: ./templates/play.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"utf-8\"\u003e\n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n      \u003ctitle\u003eTIC-TAC-TOE\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003cdiv id=\"app\" class=\"container-fluid\"\u003e\n        \u003cdiv class=\"container-fluid clearfix mb-3 shadow\"\u003e\n          \u003cimg class=\"float-left my-3\" src=\"https://thestore.gameops.com/v/vspfiles/photos/Tic-Tac-Go-14.gif\" height=\"62px\" width=\"62px\"\n          /\u003e\n          \u003cdiv class=\"float-right w-25 py-3\"\u003e\n            \u003cimg class=\"my-3 mx-3 rounded-circle border\" src=\"http://dfsanonymous.club/wp-content/uploads/2017/11/DFSAnonymous-NewLogo.png\"\n              height=\"62px\" width=\"62px\" /\u003e\n            \u003cp class=\"d-inline\"\u003e {% raw %} {{ username }} {% endraw %} \u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"row mx-5\" style=\"height: 50vh\"\u003e\n          \u003cdiv class=\"col-8 h-50 align-self-center\"\u003e\n            \u003cdiv class=\"row border rounded invisible h-50 w-75 m-auto\" style=\"font-size: 3.6rem\" ref=\"gameboard\" @click=\"playerAction\"\u003e\n              \u003cdiv class=\"h-100 pr-2 col border border-dark\" data-id=\"1\" ref=\"1\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"2\" ref=\"2\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"3\" ref=\"3\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"w-100\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"h-100 pr-2 col border border-dark\" data-id=\"4\" ref=\"4\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"5\" ref=\"5\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"6\" ref=\"6\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"w-100\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"h-100 pr-2 col border border-dark\" data-id=\"7\" ref=\"7\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"8\" ref=\"8\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"9\" ref=\"9\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"col-4 pl-3\"\u003e\n            \u003cdiv class=\"row h-100\"\u003e\n              \u003cdiv class=\"col border h-75 text-center\" style=\"background: rgb(114, 230, 147);\"\u003e\n                \u003cp class=\"my-3\"\u003e {% raw %} {{ players }} {% endraw %} online player(s) \u003c/p\u003e\n                \u003chr/\u003e\n                \u003cli class=\"m-auto py-3 text-dark\" style=\"cursor: pointer;\" v-for=\"member in connectedPlayers\" @click=\"choosePlayer\"\u003e\n                  {% raw %} {{ member }} {% endraw %}\n                \u003c/li\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"w-100\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col text-center py-3 border h-25\" style=\"background: #b6c0ca; font-size: 1em; font-weight: bold\"\u003e\n                {% raw %} {{ status }} {% endraw %}\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n      \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript\u003e\n      \n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe code above defines the layout of the game view but does not contain any interactivity or realtime features. In the scripts section, before the closing `body` tag, we included the Vue and Pusher libraries because they are required for the game to work. \n\nLet’s include the JavaScript code that will drive the entire game process and define its logic.\n\nIn the same file, add the code below in between the `script` tag that is just before the closing `body` tag:\n\n``` javascript\n    var app = new Vue({\n      el: '#app',\n      \n      data: {\n        username: '',\n        players: 0,\n        connectedPlayers: [],\n        status: '',\n        pusher: new Pusher('PUSHER_APP_KEY', {\n          authEndpoint: '/pusher/auth',\n          cluster: 'PUSHER_APP_CLUSTER',\n          encrypted: true\n        }),\n        otherPlayerName: '',\n        mychannel: {},\n        otherPlayerChannel: {},\n        firstPlayer: 0,\n        turn: 0,\n        boxes: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n      },\n      \n      created () {\n        let url = new URL(window.location.href);\n        let name = url.searchParams.get(\"username\");\n        \n        if (name) {\n          this.username = name\n          this.subscribe();\n          this.listeners();\n        } else {\n          this.username = this.generateRandomName();\n          location.assign(\"/play?username=\" + this.username);\n        }\n      },\n      \n      methods: {\n        // We will add methods here\n      }\n    });\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the keys on your Pusher dashboard.\n\nAbove, we create a new instance of Vue and we target the `#app` selector. We define all the defaults in the `data` object and then in the `create()` function which is called automatically when the Vue component is created, we check for a user and assign the user to the username if one was supplied.\n\nWe also make calls to the `subscribe` and `listeners` methods. Let’s define those inside the `methods` object. Inside the `methods` object, paste the following functions:\n\n``` javascript\n    // [...]\n    \n    subscribe: function () {\n      let channel = this.pusher.subscribe('presence-channel');\n      this.myChannel = this.pusher.subscribe('private-' + this.username)\n    \n      channel.bind('pusher:subscription_succeeded', (player) =\u003e {\n        this.players = player.count - 1\n        player.each((player) =\u003e {\n          if (player.id != this.username)\n            this.connectedPlayers.push(player.id)\n        });\n      });\n      \n      channel.bind('pusher:member_added', (player) =\u003e {\n        this.players++;\n        this.connectedPlayers.push(player.id)\n      });\n      \n      channel.bind('pusher:member_removed', (player) =\u003e {\n        this.players--;\n        var index = this.connectedPlayers.indexOf(player.id);\n        if (index \u003e -1) {\n          this.connectedPlayers.splice(index, 1)\n        }\n      });\n    },\n    \n    listeners: function () {\n      this.pusher.bind('client-' + this.username, (message) =\u003e {\n        if (confirm('Do you want to start a game of Tic Tac Toe with ' + message)) {\n          this.otherPlayerName = message\n          this.otherPlayerChannel = this.pusher.subscribe('private-' + this.otherPlayerName)\n          this.otherPlayerChannel.bind('pusher:subscription_succeeded', () =\u003e {\n            this.otherPlayerChannel.trigger('client-game-started', this.username)\n          })\n          this.startGame(message)\n        } else {\n          this.otherPlayerChannel = this.pusher.subscribe('private-' + message)\n          this.otherPlayerChannel.bind('pusher:subscription_succeeded', () =\u003e {\n            this.otherPlayerChannel.trigger('client-game-declined', \"\")\n          })\n          this.gameDeclined()\n        }\n      }),\n      \n      this.myChannel.bind('client-game-started', (message) =\u003e {\n        this.status = \"Game started with \" + message\n        this.$refs.gameboard.classList.remove('invisible');\n        this.firstPlayer = 1;\n        this.turn = 1;\n      })\n      \n      this.myChannel.bind('client-game-declined', () =\u003e {\n        this.status = \"Game declined\"\n      })\n      \n      this.myChannel.bind('client-new-move', (position) =\u003e {\n        this.$refs[position].innerText = this.firstPlayer ? 'O' : 'X'\n      })\n    \n      this.myChannel.bind('client-your-turn', () =\u003e {\n        this.turn = 1;\n      })\n    \n      this.myChannel.bind('client-box-update', (update) =\u003e {\n        this.boxes = update;\n      })\n      \n      this.myChannel.bind('client-you-lost', () =\u003e {\n        this.gameLost();\n      })\n    },\n    \n    // [...]\n```\n\nIn the `subscribe` method, we subscribe to our Pusher presence channel, and then subscribe to the private channel for the current user. In the `listeners` method we register the listeners for all the events we are expecting to be triggered on the private channel we subscribed to.\n\nNext, we will add other helper methods to our methods class. Inside the methods class, add the following functions to the bottom after the `listeners` method:\n\n``` javascript\n    // Generates a random string we use as a name for a guest user\n    generateRandomName: function () {\n      let text = '';\n      let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n      for (var i = 0; i \u003c 6; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n      }\n      return text;\n    },\n    \n    // Lets you choose a player to play as.\n    choosePlayer: function (e) {\n      this.otherPlayerName = e.target.innerText\n      this.otherPlayerChannel = this.pusher.subscribe('private-' + this.otherPlayerName)\n      this.otherPlayerChannel.bind('pusher:subscription_succeeded', () =\u003e {\n        this.otherPlayerChannel.trigger('client-' + this.otherPlayerName, this.username)\n      });\n    },\n    \n    // Begins the game\n    startGame: function (name) {\n      this.status = \"Game started with \" + name\n      this.$refs.gameboard.classList.remove('invisible');\n    },\n    \n    // User declined to play\n    gameDeclined: function () {\n      this.status = \"Game declined\"\n    },\n    \n    // Game has ended with current user winning\n    gameWon: function () {\n      this.status = \"You WON!\"\n      this.$refs.gameboard.classList.add('invisible');\n      this.restartGame()\n    },\n    \n    // Game has ended with current user losing\n    gameLost: function () {\n      this.turn = 1;\n      this.boxes = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n      this.status = \"You LOST!\"\n      this.$refs.gameboard.classList.add('invisible');\n      this.restartGame()\n    },\n    \n    // Restarts a game\n    restartGame: function () {\n      for (i = 1; i \u003c 10; i++) {\n        this.$refs[i].innerText = \"\"\n      }\n      this.$refs.gameboard.classList.remove('invisible');\n    },\n    \n    // Checks tiles to see if the tiles passed are a match\n    compare: function () {\n      for (var i = 1; i \u003c arguments.length; i++) {\n        if (arguments[i] === 0 || arguments[i] !== arguments[i - 1]) {\n          return false\n        }\n      }\n    \n      return true;\n    },\n    \n    // Checks the tiles and returns true if theres a winning play\n    theresAMatch: function () {\n      return this.compare(this.boxes[0], this.boxes[1], this.boxes[2]) ||\n        this.compare(this.boxes[3], this.boxes[4], this.boxes[5]) ||\n        this.compare(this.boxes[6], this.boxes[7], this.boxes[8]) ||\n        this.compare(this.boxes[0], this.boxes[3], this.boxes[6]) ||\n        this.compare(this.boxes[1], this.boxes[4], this.boxes[7]) ||\n        this.compare(this.boxes[2], this.boxes[5], this.boxes[8]) ||\n        this.compare(this.boxes[2], this.boxes[4], this.boxes[6]) ||\n        this.compare(this.boxes[0], this.boxes[4], this.boxes[8])\n    },\n    \n    // Checks to see if the play was a winning play\n    playerAction: function (e) {\n      let index = e.target.dataset.id - 1\n      let tile = this.firstPlayer ? 'X' : 'O'\n      \n      if (this.turn \u0026\u0026 this.boxes[index] == 0) {\n        this.turn = 0\n        this.boxes[index] = tile\n        e.target.innerText = tile\n        \n        this.otherPlayerChannel.trigger('client-your-turn', \"\")\n        this.otherPlayerChannel.trigger('client-box-update', this.boxes)\n        this.otherPlayerChannel.trigger('client-new-move', e.target.dataset.id)\n        \n        if (this.theresAMatch()) {\n          this.gameWon()\n          this.boxes = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n          this.otherPlayerChannel.trigger('client-you-lost', '')\n        }\n      }\n    },\n```\n\nAbove, we have added several helper methods that the game needs to function properly and before each method, we have added a comment to show what the method does.\n\nLet’s test the game now.\n\n## Testing the game\n\nWe can test the game by running this command:\n\n```\n    $ flask run\n```\n\nNow if we visit [localhost:5000](http://localhost:5000), we should see the connection page and test the game:\n\n![python-vue-game-demo](//images.ctfassets.net/1es3ne0caaid/1RGRfjXfgQgYWYy2kqImOs/0c1db39f9371dbb773638ffe57bfd385/python-vue-game-demo.gif)\n\n\n## Conclusion\n\nIn this tutorial, we have learned how to leverage the Pusher SDK in creating an online multiplayer game powered by a Python backend server.\n\nThe source code for this tutorial is available on [GitHub](https://github.com/neoighodaro/python-pusher-multiplayer-game)","metaTitle":"Create a two-player game with Python and Vue","metaDescription":"Use Python and Vue to create a realtime two-player game featuring online presence and instant UI updates."}}],"defaultValue":"","queryType":"","pages":50,"route":"/tutorials","query":{"page":"25"}}},"page":"/tutorials","query":{"page":"25"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?page=25 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:55 GMT -->
</html>