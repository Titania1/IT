<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Node.js&page=14 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:45:39 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">169</span> tutorials for “<span class="css-npldjc ehwuahf2">Node.js</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorialsd3fd.html?product=Beams&amp;tag=Node.js" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials.html" class="css-a3lpv2 e137azhw1"><svg fill="#C223CE" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#C223CE" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Node.js"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/ride-sharing-app-push-notifications.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a ride sharing iOS app with push notifications</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Learn to build a complete ride-sharing app for iOS, including apps for both driver and rider. Implement push notificatio...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/webrtc-video-call-app-nodejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to create a WebRTC video call app with Node.js</h3><p class="css-k12xad e5jrto45">A short tutorial showing how to quickly and easily create a video chat app with WebRTC, Node.js and Express.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/social-poll-realtime-counter.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a social poll app with counter using Node.js</h3><p class="css-k12xad e5jrto45">A short tutorial showing how to quickly build a poll app using Node.js, with realtime vote count updates.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-presence-counter-nodejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a serverless realtime presence counter with Node.js</h3><p class="css-k12xad e5jrto45">Learn to quickly create a realtime presence counter with Node.js, AWS Lambda and Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-comments-javascript.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build live comments using JavaScript</h3><p class="css-k12xad e5jrto45">Create a realtime comment feature for web applications using with JavaScript on frontend and Node.js on the backend.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/angular-realtime.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">TypeScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Making Angular 5 realtime with WebSockets</h3><p class="css-k12xad e5jrto45">Build an app with realtime features in Angular 5 and Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/food-delivery-notifications-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Send push notifications to a food delivery Swift app</h3><p class="css-k12xad e5jrto45">Push notifications are an essential feature for any food delivery app. Today we will focus on sending relevant push noti...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/social-network-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a simple social network with Kotlin</h3><p class="css-k12xad e5jrto45">Social feed have become a major feature of many apps and websites. Learn how to build one with Kotlin and Node.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/activity-feed-android.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Java</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an activity feed in Android </h3><p class="css-k12xad e5jrto45">Discover how you can create a realtime activity feed for your Android app.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials802f.html?tag=Node.js&amp;page=13" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials43c6.html?tag=Node.js&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialsa78c.html?tag=Node.js&amp;page=12" class="css-za1ua3 edg0byb1">12</a><a href="tutorials802f.html?tag=Node.js&amp;page=13" class="css-za1ua3 edg0byb1">13</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials3c57.html?tag=Node.js&amp;page=14" class="css-2wakph edg0byb1">14</a><a href="tutorialsd0d0.html?tag=Node.js&amp;page=15" class="css-za1ua3 edg0byb1">15</a><a href="tutorialsb65c.html?tag=Node.js&amp;page=16" class="css-za1ua3 edg0byb1">16</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorialsb101.html?tag=Node.js&amp;page=19" class="css-5s6711 edg0byb1">19</a><a href="tutorialsd0d0.html?tag=Node.js&amp;page=15" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":169,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"Pak3ddcki2sYKgwSYoek8","type":"Entry","createdAt":"2018-04-17T15:18:13.278Z","updatedAt":"2018-04-27T11:18:26.875Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a ride sharing iOS app with push notifications","url":"ride-sharing-app-push-notifications","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/ride-sharing-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2018-04-16","description":"Learn to build a complete ride-sharing app for iOS, including apps for both driver and rider. Implement push notifications to alert drivers of new jobs, and to let riders know their car is on the way.","prerequisite":"To follow this tutorial you will need a Mac with Xcode installed, knowledge of Xcode and Swift, basic knowledge of JavaScript (including Node.js), a Pusher account, and Cocoapods installed on your machine.","content":"Ride sharing applications like [Uber](https://uber.com) and [Lyft](https://lyft.com)  let passengers request a ride from drivers in their area. When a passenger requests a ride, the application finds a driver as quickly as possible. If the passenger closes the app while they wait, they need a way to be notified that a car is on its way and again once it’s arrived.\n\nIn this article, we will be creating a simple make-believe Ride Sharing application with a focus on how you can integrate Pusher’s Beams API to deliver transactional push notifications. \n\nWe will be making two iOS applications to cater to the driver and the rider and a Node.js application to power them both. We will then add push notifications to alert the driver that a new ride request is available, and the passenger that they have a driver on their way, and once they arrive.\n\n\n## Prerequisites \n- A Mac with Xcode installed. [Download Xcode here](https://developer.apple.com/xcode/).\n- Knowledge of using Xcode.\n- Knowledge of [Swift](https://developer.apple.com/swift/).\n- A Pusher account. [Create one here](http://pusher.com).\n- A Google Maps API key. [Create one here](https://developers.google.com/maps/documentation/ios-sdk/get-api-key).\n- Basic knowledge of JavaScript/Node.js ([Check out this tutorial](https://www.w3schools.com/nodejs/default.asp)).\n- Cocoapods [installed on your machine](https://guides.cocoapods.org/using/getting-started.html).\n\nOnce you have the requirements, let’s start.\n\n\n## About our applications\n\nThrough the course of this tutorial, we will be making three applications:\n\n\n- The backend application (Web using Node.js). This will be the power house of both iOS applications. It will contain all the endpoints required for the application to function properly. It will also be responsible for sending the push notifications to the respective devices.\n- The rider application (iOS using Swift). This will be the application the rider will use to request rides.\n- The driver application (iOS using Swift). This will be the application the driver will use to accept requests from riders. The driver will be able to update the status of the ride as the situation warrants.\n\nHere is a screen recording of what we will have when we are done:\n\n![App Demo](//images.ctfassets.net/1es3ne0caaid/1Q91alwNLe882usg0SaYSq/ed7b24e5e0caa5a17ab60e666fa69115/Build-a-Simple-Ride-Sharing-Application-with-Push-Notifications.gif)\n\n\u003e 💡  We will not be focusing too much on the Ride Sharing functionality but we will be focusing mostly on how you can integrate push notifications to the application.\n\n\n\n## Building the backend application (API)\n\nThe first thing we want to build is the API. We will be adding everything required to support our iOS applications and then add push notifications later on.\n\nTo get started, create a project directory for the API. In the directory, create a new file called `package.json` and in the file paste the following:\n\n```\n    {\n      \"main\": \"index.js\",\n      \"scripts\": {},\n      \"dependencies\": {\n        \"body-parser\": \"^1.18.2\",\n        \"express\": \"^4.16.2\",\n        \"pusher\": \"^1.5.1\",\n        \"pusher-push-notifications-node\": \"^0.10.1\"\n      }\n    }\n```\n\nNext run the command below in your terminal: \n\n```\n    $ npm install\n```\n\nThis will install all the listed dependencies. Next, create an `index.js` file in the same directory as the `package.json` file and paste in the following code:\n\n``` javascript\n    // --------------------------------------------------------\n    // Pull in the libraries\n    // --------------------------------------------------------\n    \n    const app = require('express')()\n    const bodyParser = require('body-parser')\n    const config = require('./config.js')\n    const Pusher = require('pusher')\n    const pusher = new Pusher({\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    })\n    \n    // --------------------------------------------------------\n    // In-memory database\n    // --------------------------------------------------------\n    \n    let rider = null\n    let driver = null\n    let user_id = null\n    let status = \"Neutral\"\n    \n    // --------------------------------------------------------\n    // Express Middlewares\n    // --------------------------------------------------------\n    \n    app.use(bodyParser.json())\n    app.use(bodyParser.urlencoded({extended: false}))\n    \n    // --------------------------------------------------------\n    // Helpers\n    // --------------------------------------------------------\n    \n    function uuidv4() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r \u0026 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n    \n    // --------------------------------------------------------\n    // Routes\n    // --------------------------------------------------------\n    \n    // ----- Rider --------------------------------------------\n    \n    app.get('/status', (req, res) =\u003e res.json({ status }))\n    \n    app.get('/request', (req, res) =\u003e res.json(driver))\n    \n    app.post('/request', (req, res) =\u003e {\n        user_id = req.body.user_id\n        status = \"Searching\"\n        rider = { name: \"Jane Doe\", longitude: -122.088426, latitude: 37.388064 }\n        \n        pusher.trigger('cabs', 'status-update', { status, rider })\n        res.json({ status: true })\n    \n    })\n    app.delete('/request', (req, res) =\u003e {\n        driver = null\n        status = \"Neutral\"\n        pusher.trigger('cabs', 'status-update', { status })\n        res.json({ status: true })\n    })\n    \n    // ----- Driver ------------------------------------------\n    \n    app.get('/pending-rider', (req, res) =\u003e res.json(rider))\n    \n    app.post('/status', (req, res) =\u003e {\n        status = req.body.status\n        \n        if (status == \"EndedTrip\" || status == \"Neutral\") {\n            rider = driver = null\n        } else {\n            driver = { name: \"John Doe\" }\n        }\n        \n        pusher.trigger('cabs', 'status-update', { status, driver })\n        res.json({ status: true })\n    })\n    \n    // ----- Misc ---------------------------------------------\n    \n    app.get('/', (req, res) =\u003e res.json({ status: \"success\" }))\n    \n    // --------------------------------------------------------\n    // Serve application\n    // --------------------------------------------------------\n    \n    app.listen(4000, _ =\u003e console.log('App listening on port 4000!'))\n```\n\n\u003e 💡 You need to replace the `PUSHER_APP_*` keys with the real keys from the Pusher dashboard.\n\nIn the code above, we first pull in all the dependencies we need for the application to run. Next we set up some variables to hold data as an in-memory data store. We then define a UUID generator function which we will use to generate ID’s for objects. Next we define our applications routes:\n\n\n- `POST /request` saves a new request for a driver.\n- `GET /request` gets the driver that is handling the request.\n- `DELETE /request` cancels a request for a ride.\n- `GET /pending-order` gets the pending requests.\n- `POST /status` changes the status of a ride.\n\nThat’s all we need in the API for now and we will revisit it when we need to send push notifications. If you want to test that the API is working, then run the following command on your terminal:\n\n```\n    $ node index.js\n```\n\nThis will start a new Node server listening on port **4000**.\n\n\n## Building the Rider application\n\nThe next thing we need to do is build the client application. Launch Xcode and create a new ‘Single Application’ project. We will name our project **RiderClient.**\n\nOnce the project has been created, exit Xcode and create a new file called `Podfile` in the root of the Xcode project you just created. In the file paste in the following code:\n\n``` xcode\n    platform :ios, '11.0'\n    \n    target 'RiderClient' do\n      use_frameworks!\n      pod 'GoogleMaps', '~\u003e 2.6.0'\n      pod 'PusherSwift', '~\u003e 5.1.1'\n      pod 'Alamofire', '~\u003e 4.6.0'\n    end\n```\n\nIn the file above, we specified the dependencies the project needs to run. **Remember to change the `target` above to the name of your project.** Now in your terminal, run the following command to install the dependencies:\n\n```\n    $ pod install\n```\n\nAfter the installation is complete, open the Xcode workspace file that was generated by Cocoapods. This will relaunch Xcode. \n\nWhen Xcode has been relaunched, open the `Main.storyboard` file and in there we will create the storyboard for our client application. Below is a screenshot of how we have designed our storyboard:\n\n![Storyboard One](//images.ctfassets.net/1es3ne0caaid/3YMvZSyqreCmOQeeQocScQ/2ae9ab81d78772f05f89ec42afb37dd8/Build-a-Simple-Ride-Sharing-Application-with-Push-Notifications-2_preview.png)\n\n\nIn the main View Controller, we have defined views that will display the status of the ride, the driver details and the CTA button.\n\n\n\u003e 💡 CTA is an abbreviation for **call to action**.\n\nCreate a new file in Xcode called `MainController.swift`, and make it the custom class for the main View Controller above. Next paste in the following code:\n\n``` swift\n    import UIKit\n    import Alamofire\n    import GoogleMaps\n    \n    class MainViewController: UIViewController, GMSMapViewDelegate {\n        var latitude = 37.388064\n        var longitude = -122.088426\n        var locationMarker: GMSMarker!\n        \n        @IBOutlet weak var mapView: GMSMapView!\n        @IBOutlet weak var loadingIndicator: UIActivityIndicatorView!\n        @IBOutlet weak var loadingOverlay: UIView!\n        @IBOutlet weak var orderButton: UIButton!\n        @IBOutlet weak var orderStatusView: UIView!\n        @IBOutlet weak var orderStatus: UILabel!\n        @IBOutlet weak var cancelButton: UIButton!\n        @IBOutlet weak var driverDetailsView: UIView!\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            mapView.camera = GMSCameraPosition.camera(withLatitude:latitude, longitude:longitude, zoom:15.0)\n            mapView.delegate = self\n            locationMarker = GMSMarker(position: CLLocationCoordinate2D(latitude: latitude, longitude: longitude))\n            locationMarker.map = mapView\n            orderStatusView.layer.cornerRadius = 5\n            orderStatusView.layer.shadowOffset = CGSize(width: 0, height: 0)\n            orderStatusView.layer.shadowColor = UIColor.black.cgColor\n            orderStatusView.layer.shadowOpacity = 0.3\n            \n            updateView(status: .Neutral, msg: nil)\n        }\n    }\n```\n\nIn the code above we have the View Controller class. In the `viewDidLoad` we set up Google Maps, and call the `updateView` method. The `updateView` method is a helper function that simply alters the view displayed depending on the `RideStatus`. Add the method to the class:\n\n``` swift\n    private func updateView(status: RideStatus, msg: String?) {\n        switch status {\n        case .Neutral:\n            driverDetailsView.isHidden = true\n            loadingOverlay.isHidden = true\n            orderStatus.text = msg != nil ? msg! : \"💡 Tap the button below to get a cab.\"\n            orderButton.setTitleColor(UIColor.white, for: .normal)\n            orderButton.isHidden = false\n            cancelButton.isHidden = true\n            loadingIndicator.stopAnimating()\n            \n        case .Searching:\n            loadingOverlay.isHidden = false\n            orderStatus.text = msg != nil ? msg! : \"🚕 Looking for a cab close to you...\"\n            orderButton.setTitleColor(UIColor.clear, for: .normal)\n            loadingIndicator.startAnimating()\n        case .FoundRide, .Arrival:\n            driverDetailsView.isHidden = false\n            loadingOverlay.isHidden = true\n            \n            if status == .FoundRide {\n                orderStatus.text = msg != nil ? msg! : \"😎 Found a ride, your ride is on it's way\"\n            } else {\n                orderStatus.text = msg != nil ? msg! : \"⏰ Your driver is waiting, please meet outside.\"\n            }\n            \n            orderStatus.text = msg != nil ? msg! : \"😎 Found a ride, your ride is on it's way\"\n            orderButton.isHidden = true\n            cancelButton.isHidden = false\n            loadingIndicator.stopAnimating()\n        case .OnTrip:\n            orderStatus.text = msg != nil ? msg! : \"🙂 Your ride is in progress. Enjoy.\"\n            cancelButton.isEnabled = false\n        case .EndedTrip:\n            orderStatus.text = msg != nil ? msg! : \"🌟 Ride complete. Have a nice day!\"\n            orderButton.setTitleColor(UIColor.white, for: .normal)\n            driverDetailsView.isHidden = true\n            cancelButton.isEnabled = true\n            orderButton.isHidden = false\n            cancelButton.isHidden = true\n        }\n    }\n```\n\nNext we have the `orderButtonPressed` method that calls the `sendRequest` method which sends a request to the API. The next method is the `cancelButtonPressed` which also calls the `sendRequest` method.\n\n``` swift\n    @IBAction func orderButtonPressed(_ sender: Any) {\n        updateView(status: .Searching, msg: nil)\n        \n        sendRequest(.post) { successful in\n            guard successful else {\n                return self.updateView(status: .Neutral, msg: \"😔 No drivers available.\")\n            }\n        }\n    }\n    \n    @IBAction func cancelButtonPressed(_ sender: Any) {\n        sendRequest(.delete) { successful in\n            guard successful == false else {\n                return self.updateView(status: .Neutral, msg: nil)\n            }\n        }\n    }\n    \n    private func sendRequest(_ method: HTTPMethod, handler: @escaping(Bool) -\u003e Void) {\n        let url = AppConstants.API_URL + \"/request\"\n        let params = [\"user_id\": AppConstants.USER_ID]\n        \n        Alamofire.request(url, method: method, parameters: params)\n            .validate()\n            .responseJSON { response in\n                guard response.result.isSuccess,\n                    let data = response.result.value as? [String:Bool],\n                    let status = data[\"status\"] else { return handler(false) }\n                \n                handler(status)\n            }\n    }\n```\n\n### Integrating realtime updates using Pusher\nNext, let’s add some Pusher functionality to the View Controller so it can pick up changes to the `RideStatus` in realtime. \n\nFirst, you need to `import` the Pusher swift SDK:\n\n``` swift\n    import PusherSwift\n```\n\nThen define the `pusher` variable at the top of the class:\n\n``` swift\n    let pusher = Pusher(\n        key: AppConstants.PUSHER_API_KEY,\n        options: PusherClientOptions(host: .cluster(AppConstants.PUSHER_API_CLUSTER))\n    )\n```\n\nNext, add the following method to the class:\n\n``` swift\n    private func listenForUpdates() {\n        let channel = pusher.subscribe(\"cabs\")\n        \n        let _ = channel.bind(eventName: \"status-update\") { data in\n            if let data = data as? [String:AnyObject] {\n                if let status = data[\"status\"] as? String, \n                let rideStatus = RideStatus(rawValue: status) {\n                    self.updateView(status: rideStatus, msg: nil)\n                }\n            }\n        }\n        \n        pusher.connect()\n    }\n```\n\nThe method above just subscribes to a Pusher channel and binds to the `status-update` event on the channel. When the event is triggered, the `updateView` method is called. \n\nFinally at the bottom of the `viewDidLoad` method, add a call to the `listenForUpdates` method:\n\n``` swift\n    listenForUpdates()\n```\n\nNow when the backend application triggers a status update event, our rider application will pick it up and change the UI as necessary.\n\n### Setting up Google Maps\nNext, open your `AppDelegate` class and import the following:\n\n``` swift\n    import GoogleMaps\n```\n\nNext you can replace the `application(didFinishLaunchingWithOptions:)` method with the following code:\n\n``` swift\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n        GMSServices.provideAPIKey(AppConstants.GOOGLE_API_KEY)\n        return true\n    }\n```\n\n### Defining secret keys and ride status\nCreate a new file called `AppConstants.swift` and paste the following code in:\n\n``` swift\n    import Foundation\n    \n    class AppConstants {\n        static let GOOGLE_API_KEY = \"GOOGLE_MAPS_API_KEY\"\n        static let PUSHER_API_KEY = \"PUSHER_APP_KEY\"\n        static let PUSHER_API_CLUSTER = \"PUSHER_APP_CLUSTER\"\n        static let API_URL = \"http://127.0.0.1:4000\"\n        static let USER_ID = UUID().uuidString\n    }\n```\n\n\u003e ⚠️  You need to replace the placeholders above with the actual values from their respective dashboards.\n\nNext, create a file called `RideStatus.swift` this will be where we will define all the available ride statuses:\n\n``` swift\n    import Foundation\n    \n    enum RideStatus: String {\n        case Neutral = \"Neutral\"\n        case Searching = \"Searching\"\n        case FoundRide = \"FoundRide\"\n        case Arrived = \"Arrived\"\n        case OnTrip = \"OnTrip\"\n        case EndedTrip = \"EndedTrip\"\n    }\n```\n\nThat's all for the client application. Let’s move on to creating the Rider application.\n\nOne last thing we need to do though is modify the `info.plist` file. We need to add an entry to the `plist` file to allow connection to our local server:\n\n![plist screenshot](//images.ctfassets.net/1es3ne0caaid/wb2tHFdIKycyGAOiEAc0K/dd8a54692065db2afd55f7a6d26ef653/Build-a-Simple-Ride-Sharing-Application-with-Push-Notifications-3_preview.png)\n\nLet’s move on to the rider application.\n\n\n## Building the Driver application\n\nLaunch Xcode and create a new ‘Single Application’ project. We will name our project **RiderDriver.**\n\nOnce the project has been created, exit Xcode and create a new file called `Podfile` in the root of the Xcode project you just created. In the file paste in the following code:\n\n``` xcode\n    platform :ios, '11.0'\n    \n    target 'RiderDriver' do\n      use_frameworks!\n      pod 'PusherSwift', '~\u003e 5.1.1'\n      pod 'Alamofire', '~\u003e 4.6.0'\n      pod 'GoogleMaps', '~\u003e 2.6.0'\n      pod 'PushNotifications'\n    end\n```\n\nIn the file above, we specified the dependencies the project needs to run. **Remember to change the `target` above to the name of your project.** Now in your terminal, run the following command to install the dependencies:\n\n```\n    $ pod install\n```\n\nAfter the installation is complete, open the Xcode workspace file that was generated by Cocoapods. This will relaunch Xcode. \n\nWhen Xcode has been relaunched, open the `Main.storyboard` file and in there we will create the storyboard for our client application. Below is a screenshot of how we have designed our storyboard:\n\n![Storyboard Two](//images.ctfassets.net/1es3ne0caaid/3o8cM2HnJS4EsOWkykgI42/30173b779b955b176e2941cef451d044/Build-a-Simple-Ride-Sharing-Application-with-Push-Notifications-4_preview.png)\n\n\nIn the main View Controller, we have defined views that will display the rider information and buttons needed to change the status of the ride. We also have a hidden view that will be displayed when there are no pending requests.\n\nCreate a new file in Xcode called `MainController.swift`, and make it the custom class for the main View Controller above. Next paste in the following code:\n\n``` swift\n    import UIKit\n    import Alamofire\n    import GoogleMaps\n    \n    class MainViewController: UIViewController, GMSMapViewDelegate {\n        var status: RideStatus!\n        var locationMarker: GMSMarker!\n    \n        @IBOutlet weak var riderName: UILabel!    \n        @IBOutlet weak var mapView: GMSMapView!\n        @IBOutlet weak var requestView: UIView!\n        @IBOutlet weak var noRequestsView: UIView!\n        @IBOutlet weak var cancelButton: UIButton!\n        @IBOutlet weak var statusButton: UIButton!\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            status = .Neutral\n            requestView.isHidden = true\n            cancelButton.isHidden = true\n            noRequestsView.isHidden = false\n            Timer.scheduledTimer(\n                timeInterval: 2,\n                target: self,\n                selector: #selector(findNewRequests),\n                userInfo: nil,\n                repeats: true\n            )\n        }\n    }\n```\n\nThe `viewDidLoad` sets the initial setting for the UI. Then we register a timer that fires the `findNewRequests` method every 2 seconds. Let’s define that method. Add the method below to the class:\n\n``` swift\n    @objc private func findNewRequests() {\n        guard status == .Neutral else { return }\n        \n        Alamofire.request(AppConstants.API_URL + \"/pending-rider\")\n            .validate()\n            .responseJSON { response in\n                guard response.result.isSuccess,\n                    let data = response.result.value as? [String:AnyObject] else { return }\n                \n                self.loadRequestForRider(Rider(data: data))\n            }\n    }\n```\n\nThe method will send a request to the backend and if there is a pending request, it loads it to the UI. It however does not fire the request unless the ride status is `Neutral`.\n\nNext lets define the `loadRequestsForRider` method that is called when there is a pending ride request:\n    \n``` swift\n    private func loadRequestForRider(_ rider: Rider) {\n        mapView.camera = GMSCameraPosition.camera(withLatitude:rider.latitude, longitude:rider.longitude, zoom:15.0)\n        mapView.delegate = self\n        \n        locationMarker = GMSMarker(position: CLLocationCoordinate2D(latitude: rider.latitude, longitude: rider.longitude))\n        locationMarker.map = mapView\n        \n        status = .Searching\n        cancelButton.isHidden = false\n        statusButton.setTitle(\"Accept Trip\", for: .normal)\n        \n        riderName.text = rider.name\n        requestView.isHidden = false\n        noRequestsView.isHidden = true\n    }  \n```\n\n\nThe method simply loads Google Maps using the longitude and latitude of the rider making the request. Then it also prepares the UI to display the request.\n\nThe next methods to define will be the methods that change the status of the ride and update the UI depending on various events:\n\n``` swift  \n    private func sendStatusChange(_ status: RideStatus, handler: @escaping(Bool) -\u003e Void) {\n        let url = AppConstants.API_URL+\"/status\"\n        let params = [\"status\": status.rawValue]\n        \n        Alamofire.request(url, method: .post, parameters: params).validate()\n            .responseJSON { response in\n                guard response.result.isSuccess,\n                    let data = response.result.value as? [String: Bool] else { return handler(false) }\n                \n                handler(data[\"status\"]!)\n            }\n    }\n    \n    private func getNextStatus(after status: RideStatus) -\u003e RideStatus {\n        switch self.status! {\n        case .Neutral,\n                .Searching: return .FoundRide\n        case .FoundRide: return .Arrived\n        case .Arrived: return .OnTrip\n        case .OnTrip: return .EndedTrip\n        case .EndedTrip: return .Neutral\n        }\n    }\n    \n    @IBAction func cancelButtonPressed(_ sender: Any) {\n        if status == .FoundRide || status == .Searching {\n            sendStatusChange(.Neutral) { successful in\n                if successful {\n                    self.status = .Neutral\n                    self.requestView.isHidden = true\n                    self.noRequestsView.isHidden = false\n                }\n            }\n        }\n    }\n    \n    @IBAction func statusButtonPressed(_ sender: Any) {\n        let nextStatus = getNextStatus(after: self.status)\n        \n        sendStatusChange(nextStatus) { successful in\n            self.status = self.getNextStatus(after: nextStatus)\n            \n            switch self.status! {\n            case .Neutral, .Searching:\n                self.cancelButton.isHidden = true\n            case .FoundRide:\n                self.cancelButton.isHidden = false\n                self.statusButton.setTitle(\"Announce Arrival\", for: .normal)\n            case .Arrived:\n                self.cancelButton.isHidden = false\n                self.statusButton.setTitle(\"Start Trip\", for: .normal)\n            case .OnTrip:\n                self.cancelButton.isHidden = true\n                self.statusButton.setTitle(\"End Trip\", for: .normal)\n            case .EndedTrip:\n                self.status = .Neutral\n                self.noRequestsView.isHidden = false\n                self.requestView.isHidden = true\n                self.statusButton.setTitle(\"Accept Trip\", for: .normal)\n            }\n        }\n    }\n```\n\nThe `sendStatusChange` is a helper method that sends requests to the API to change the status of a ride. The `getNextStatus` is a helper method that returns the next `RideStatus` in line from the one passed to it.\n\nThe `cancelButtonPressed` is fired when the cancel button is pressed and it requests the ride be canceled. Finally, the `statusButtonPressed` just sends a request to change the status based on the current status of the ride. It also updates the UI to fit the status it was changed to.\n\n### Integrating realtime updates using Pusher\nNext, let’s add some Pusher functionality to the View Controller so it can pick up changes to the `RideStatus` in realtime. \n\nFirst, you need to `import` the Pusher swift SDK:\n\n```\n    import PusherSwift\n```\n\nThen define the `pusher` variable at the top of the class:\n\n``` swift\n    let pusher = Pusher(\n        key: AppConstants.PUSHER_API_KEY,\n        options: PusherClientOptions(host: .cluster(AppConstants.PUSHER_API_CLUSTER))\n    )\n```\n\nNext, add the following method to the class:\n\n``` swift\n    private func listenForStatusUpdates() {\n        let channel = pusher.subscribe(channelName: \"cabs\")\n        \n        let _ = channel.bind(eventName: \"status-update\") { data in\n            if let data = data as? [String: AnyObject] {\n                if let status = data[\"status\"] as? String, let rideStatus = RideStatus(rawValue: status) {\n                    if rideStatus == .Neutral {\n                        self.status = .Neutral\n                        self.cancelButtonPressed(UIButton())\n                    }\n                }\n            }\n        }\n        \n        pusher.connect()\n    }\n```\n\nThe method above just subscribes to a Pusher channel and binds to the `status-update` event on the channel. When the event is triggered, the cancel button function is called.\n\nFinally at the bottom of the `viewDidLoad` method, add a call to the `listenForStatusUpdates` method:\n\n``` swift\n    listenForStatusUpdates()\n```\n\nNow when the backend application triggers a status update event, our application will pick it up and change the UI as necessary.\n\n### Setting up Google Maps\nNext, open your `AppDelegate` class and import the following:\n\n``` swift\n    import GoogleMaps\n```\n\nNext you can replace the `application(didFinishLaunchingWithOptions:)` method with the following code:\n\n``` swift\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n        GMSServices.provideAPIKey(AppConstants.GOOGLE_API_KEY)\n        return true\n    }\n```\n\n### Defining secret keys and ride status\nCreate a new file called `AppConstants.swift` and paste the following code in:\n\n``` swift\n    class AppConstants {\n        static let GOOGLE_API_KEY = \"GOOGLE_API_KEY\"\n        static let PUSHER_KEY = \"PUSHER_API_KEY\"\n        static let PUSHER_CLUSTER = \"PUSHER_API_CLUSTER\"\n        static let API_URL = \"http://127.0.0.1:4000\"\n        static let PUSH_NOTIF_INSTANCE_ID = \"PUSHER_NOTIFICATION_INSTANCE_ID\"\n        static let USER_ID = UUID().uuidString\n    }\n```\n\n\u003e ⚠️  You need to replace the placeholders above with the actual values from their respective dashboards.\n\nNext, create two files called `Rider.swift` and `RideStatus.swift` then paste the following code into the files:\n\n``` swift\n    // Rider.swift\n    import Foundation\n    \n    struct Rider {\n        let name: String\n        let longitude: Double\n        let latitude: Double\n        \n        init(data: [String:AnyObject]) {\n            self.name = data[\"name\"] as! String\n            self.longitude = data[\"longitude\"] as! Double\n            self.latitude = data[\"latitude\"] as! Double\n        }\n    }\n```\n\n``` swift  \n    // RideStatus.swift\n    import Foundation\n    \n    enum RideStatus: String {\n        case Neutral = \"Neutral\"\n        case Searching = \"Searching\"\n        case FoundRide = \"FoundRide\"\n        case Arrived = \"Arrived\"\n        case OnTrip = \"OnTrip\"\n        case EndedTrip = \"EndedTrip\"\n    }\n```\n\nThat's all for the rider application. One last thing we need to do though is modify the `info.plist` file as we did in the client application.\n\nNow we have created the applications and you can run them to see them in action. However, we have not added push notifications to the application. We need to do this so that the user can know there is an event on the service when the application is minimised.\n\nLet’s set up push notifications.\n\n\n## Adding push notifications to our iOS applications\n\nThe first thing we need to do is make our server capable of sending push notifications.\n\nAt this point, the application works as expected out of the box. We now need to add push notifications to the application to make it more engaging even when the user is not currently using the application.\n\n\n\u003e ⚠️  You need to be [enrolled to the Apple Developer program](https://developer.apple.com/programs/enroll/) to be able to use the Push Notifications feature. Also Push Notifications do not work on Simulators so you will need an actual iOS device to test.\n\nPusher’s [Beams API](https://pusher.com/push-notifications) has first-class support for native iOS applications. Your iOS app instances subscribe to **Interests**; then your servers send push notifications to those interests. Every app instance subscribed to that interest will receive the notification, even if the app is not open on the device at the time. \n\nThis section describes how you can set up an iOS app to receive transactional push notifications about your food delivery orders through Pusher.\n\n### Configure APNs\nPusher relies on Apple Push Notification service (APNs) to deliver push notifications to iOS application users on your behalf. When we deliver push notifications, we use your APNs Key. This page guides you through the process of getting an APNs Key and how to provide it to Pusher.\n\nHead over to the Apple Developer dashboard by clicking [here](https://developer.apple.com/account) and then create a new Key as seen below: \n\n\n![](https://www.dropbox.com/s/luevydsymzerqsv/Food-Delivery-App-with-Push-Notifications8.gif?raw=1)\n\n![Create a new key gif](//images.ctfassets.net/1es3ne0caaid/54PJcejV722CkowU8MmMoY/27306a55ee5a7746a9862c276d230753/Food-Delivery-App-with-Push-Notifications8.gif)\n\n\nWhen you have created the key, download it. Keep it safe as we will need it in the next section.\n\n\n\u003e ⚠️  You have to keep the generated key safe as you cannot get it back if you lose it. \n\n### Creating your Pusher application\nThe next thing you need to do is create a new Pusher Push Notification application from the [Pusher dashboard](https://dash.pusher.com). \n\n![Create a Pusher notifications instance](//images.ctfassets.net/1es3ne0caaid/4M0aXmBsbYCEYIuo0QGEWS/9c73ea7bf9c5c2b095bd1f41160a3f64/Food-Delivery-App-with-Push-Notifications9_preview.png)\n\n\nWhen you have created the application, you should be presented with a Quickstart wizard that will help you set up the application.\n\nIn order to configure Push Notifications you will need to get an APNs key from Apple. This is the same key as the one we downloaded in the previous section. Once you’ve got the key, upload it to the Quickstart wizard.\n\n![Add APN key](//images.ctfassets.net/1es3ne0caaid/1z7vYTT8tKkIsCGWSsWesq/2de8638ee5264090cbd4735349b5ce0c/Food-Delivery-App-with-Push-Notifications10_preview.png)\n\n\nEnter your Apple Team ID. You can get the Team ID from [here](https://developer.apple.com/account/#/membership). Click on the continue to proceed to the next step.\n\n\n### Updating your Rider application to support push notifications\nIn your client application, if you haven’t already, open the `Podfile` and add the following pod to the list of dependencies:\n\n``` xcode\n    pod 'PushNotifications'\n```\n\nNow run the `pod install` command as you did earlier to pull in the notifications package. Next open the `AppDelegate` class and import the `PushNotifications` package:\n\n``` swift\n    import PushNotifications\n```\n\nNow, as part of the `AppDelegate` class, add the following:\n\n``` swift\n    let pushNotifications = PushNotifications.shared\n    \n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n      // [...]\n      \n      self.pushNotifications.start(instanceId: \"PUSHER_NOTIF_INSTANCE_ID\")\n      self.pushNotifications.registerForRemoteNotifications()\n      \n      // [...]\n      \n      return true\n    }\n    \n    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n      // [...]\n      \n      self.pushNotifications.registerDeviceToken(deviceToken) {\n        try? self.pushNotifications.subscribe(interest: \"rider_\\(AppConstants.USER_ID)\")\n      }\n      \n      // [...]\n    }\n```\n\n\u003e 💡  Replace `PUSHER_PUSH_NOTIF_INSTANCE_ID` with the key given to you by the Pusher application.\n\nIn the code above, we set up push notifications in the `application(didFinishLaunchingWithOptions:)` method and then we subscribe to the interest in the `application(didRegisterForRemoteNotificationsWithDeviceToken:)` method.\n\nThe dynamic interest demos how you can easily use specific interests for specific devices or users. As long as the server pushes to the correct interest, you can rest assured that devices subscribed to the interest will get the push notification.\n\nNext, we need to enable push notifications for the application. In the project navigator, select your project, and click on the *Capabilities* tab. [Enable Push Notifications](http://help.apple.com/xcode/mac/current/#/devdfd3d04a1) by turning the switch ON.\n\n![Push Notifications - Slide On](//images.ctfassets.net/1es3ne0caaid/5bZgQj4Z6EUEW4iQQeK6cQ/ccb3270fe0be2d36ff8475f33f727151/Food-Delivery-App-with-Push-Notifications11.png)\n\n### Updating your Driver application to support Push notifications\nYour rider application also needs to be able to receive Push Notifications. The process is similar to the set up above. The only difference will be the interest we will be subscribing to in `AppDelegate` which will be **ride_requests**.\n\n\n## Adding rich actions to our push notifications on iOS\n\nAs it currently stands, our application will be able to receive push notifications but let’s take it one step further and add rich actions to the application. This will add more engagement to the notification.\n\n![Rich actions](//images.ctfassets.net/1es3ne0caaid/3OD8NB9HnqWuUEmC2GqMqE/d069aeac573aec2201d1e25a09dcf01d/Build-a-Simple-Ride-Sharing-Application-with-Push-Notifications-12.gif)\n\n\nFirst, open the `AppDelegate` class and import the following classes:\n\n``` swift\n    import PushNotifications\n    import UserNotifications\n```\n\nNext, you need to extend the `AppDelegate` with the `` class. Then add the following code:\n\n``` swift\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n        // [...]    \n        \n        let center = UNUserNotificationCenter.current()\n        center.delegate = self\n        \n        let cancelAction = UNNotificationAction(\n            identifier: \"cancel\", \n            title: \"Reject\", \n            options: [.foreground]\n        )\n        \n        let acceptAction = UNNotificationAction(\n            identifier: \"accept\", \n            title: \"Accept Request\", \n            options: [.foreground]\n        )\n        \n        let category = UNNotificationCategory(\n            identifier: \"DriverActions\", \n            actions: [acceptAction, cancelAction], \n            intentIdentifiers: []\n        )\n        \n        center.setNotificationCategories([category])\n        \n        // [...]\n        \n        return true\n    }\n```\n\nIn the code above, we are specifying the [actions](https://developer.apple.com/documentation/usernotifications/unnotificationaction) we want our push notifications to display. \n\nIn the same `AppDelegate` class, add the following method which will handle the actions when they are selected on the push notification:\n\n``` swift\n    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -\u003e Void) {\n        let name = Notification.Name(\"status\")\n    \n        if response.actionIdentifier == \"cancel\" {\n            NotificationCenter.default.post(name: name, object: nil, userInfo: [\"status\": RideStatus.Neutral])\n        }\n        \n        if response.actionIdentifier == \"accept\" {\n            NotificationCenter.default.post(name: name, object: nil, userInfo: [\"status\": RideStatus.FoundRide])\n        }\n        \n        completionHandler()\n    }\n```\n\nIn the code, we just send a local notification when the push notification action is tapped. Next, we will add an observer in our view controller that will trigger some code when the notification is received.\n\nOpen the `MainViewController` class and add the following code in the `viewDidLoad` method:\n\n``` swift\n    NotificationCenter.default.addObserver(\n        self,\n        selector: #selector(changeStatusFromPushNotification),\n        name: Notification.Name(\"status\"),\n        object: nil\n    )\n```\n\nNext, add the `changeStatusFromPushNotification`  method to the class:\n\n``` swift\n    @objc private func changeStatusFromPushNotification(notification: Notification) {\n        guard\n            let data = notification.userInfo as? [String: RideStatus],\n            let status = data[\"status\"] else { return }\n        \n        sendStatusChange(status) { successful in\n            guard successful else { return }\n            \n            if status == .Neutral {\n                self.status = .FoundRide\n                self.cancelButtonPressed(UIButton())\n            }\n            \n            if status == .FoundRide {\n                self.status = .Searching\n                self.statusButtonPressed(UIButton())\n            }\n        }\n    }\n```\n\nThis callback just triggers the `sendStatusChange` method that we have already defined earlier in the tutorial.\n\n### Creating our notification service extension\nNext, we need to create our Notification Service Extension. \n\n\n\u003e 💡  When receiving a notification in an iOS app, you may want to be able to download content in response to it or edit the content before it is shown to the user. In iOS 10, Apple now allows apps to do this through a new **Notification Service Extension**. - [Codetuts](https://code.tutsplus.com/tutorials/ios-10-notification-service-extensions--cms-27550)\n\nIn Xcode, go to **File \u003e New \u003e Target…**  and select **Notification Service Extension** then give the target a name and click **Done**.\n\n![xcode new notification](//images.ctfassets.net/1es3ne0caaid/32GsnikME8MASUKcoYc64m/96b21f357f1d25baad3a1dc564e5b5df/Build-a-Simple-Ride-Sharing-Application-with-Push-Notifications-13_preview.png)\n\n\nIf you look in the file browser in Xcode, you should see the new target added with two new files: `NotificationService.swift` and `info.plist`. We will be modifying these files to make sure it gets and provides the right information for our push notification.\n\nOpen the `NotificationService` class and replace the `didReceive` method with the following:\n\n``` swift\n    override func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -\u003e Void) {\n        self.contentHandler = contentHandler\n        bestAttemptContent = (request.content.mutableCopy() as? UNMutableNotificationContent)\n        \n        func failEarly() {\n            contentHandler(request.content)\n        }\n        \n        guard\n            let content = (request.content.mutableCopy() as? UNMutableNotificationContent),\n            let apnsData = content.userInfo[\"data\"] as? [String: Any],\n            let mapURL = apnsData[\"attachment-url\"] as? String,\n            let attachmentURL = URL(string: mapURL.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)!),\n            let imageData = try? NSData(contentsOf: attachmentURL, options: NSData.ReadingOptions()),\n            let attachment = UNNotificationAttachment.create(imageFileIdentifier: \"image.png\", data: imageData, options: nil)\n        else {\n            return failEarly()\n        }\n                \n        content.attachments = [attachment]\n        contentHandler(content.copy() as! UNNotificationContent)\n    }\n```\n\nIn the code above, we try to get the content of the push notification. Since we want to display the map in the notification, we are expecting a static map URL from the custom data of the push notification. We use that and serve it as an `attachment` which we add the to content of the push. We finally pass the `content` to the `contentHandler`.\n\nNext, add the following extension to the same file:\n\n``` swift\n    extension UNNotificationAttachment {\n        \n        static func create(imageFileIdentifier: String, data: NSData, options: [NSObject : AnyObject]?) -\u003e UNNotificationAttachment? {\n            let fileManager = FileManager.default\n            let tmpSubFolderName = ProcessInfo.processInfo.globallyUniqueString\n            let tmpSubFolderURL = NSURL(fileURLWithPath: NSTemporaryDirectory()).appendingPathComponent(tmpSubFolderName, isDirectory: true)\n            \n            do {\n                try fileManager.createDirectory(at: tmpSubFolderURL!, withIntermediateDirectories: true, attributes: nil)\n                let fileURL = tmpSubFolderURL?.appendingPathComponent(imageFileIdentifier)\n                try data.write(to: fileURL!, options: [])\n                let imageAttachment = try UNNotificationAttachment(identifier: imageFileIdentifier, url: fileURL!, options: options)\n                return imageAttachment\n            } catch let error {\n                print(\"error \\(error)\")\n            }\n            \n            return nil\n        }\n    }\n```\n\nThe `create` method saves the static map to a temporary location on the device so it does not have to load from a URL.\n\nOne final change we want to make is in the `info.plist` file. Here we want to register all the action identifiers for the push notification. Open the `info.plist` file and add the following as highlighted in the image below;\n\n![plist again](//images.ctfassets.net/1es3ne0caaid/2gJuUviJCweaoGAGWOcgKS/3f9a7d54bc36c3a43ad993f0c10e76e2/Build-a-Simple-Ride-Sharing-Application-with-Push-Notifications-14_preview.png)\n\n\nThat’s all we need to do on the application side. Now we need to make sure the API sends the push notifications.\n\n\n## Sending push notifications from our Node.js API\n\nIn the Node.js project, open our `index.js` file and import the push notification package:\n\n``` swift\n    const PushNotifications = require('pusher-push-notifications-node')\n    const pushNotifications = new PushNotifications({\n        instanceId: 'YOUR_INSTANCE_ID_HERE',\n        secretKey: 'YOUR_SECRET_KEY_HERE'\n    })\n```\n\n\u003e 💡  You should replace the placeholder values with the values from your Pusher dashboard.\n\nNext, add the following helper functions:\n\n``` swift\n    function sendRiderPushNotificationFor(status) {\n        switch (status) {\n            case \"Neutral\":\n                var alert = {\n                    \"title\": \"Driver Cancelled :(\",\n                    \"body\": \"Sorry your driver had to cancel. Open app to request again.\",\n                }\n                break;\n            case \"FoundRide\":\n                var alert = {\n                    \"title\": \"🚕 Found a ride\",\n                    \"body\": \"The driver is on the way.\"\n                }\n                break;\n            case \"Arrived\":\n                var alert = {\n                    \"title\": \"🚕 Driver is waiting\",\n                    \"body\": \"The driver outside, please meet him.\"                \n                }\n                break;\n            case \"OnTrip\":\n                var alert = {\n                    \"title\": \"🚕 You are on your way\",\n                    \"body\": \"The driver has started the trip. Enjoy your ride.\"\n                }\n                break;\n            case \"EndedTrip\":\n                var alert = {\n                    \"title\": \"🌟 Ride complete\",\n                    \"body\": \"Your ride cost $15. Open app to rate the driver.\"\n                }\n                break;\n        }\n        if (alert != undefined) {\n            pushNotifications.publish(['rider'], {apns: {aps: {alert, sound: \"default\"}}})\n                .then(resp =\u003e console.log('Just published:', resp.publishId))\n                .catch(err =\u003e console.log('Error:', err))\n        }\n    }\n    \n    function sendDriverPushNotification() {\n        pushNotifications.publish(['ride_requests'], {\n            \"apns\": {\n                \"aps\": {\n                    \"alert\": {\n                        \"title\": \"🚗 New Ride Request\",\n                        \"body\": `New pick up request from ${rider.name}.`,\n                    },\n                    \"category\": \"DriverActions\",\n                    \"mutable-content\": 1,\n                    \"sound\": 'default'\n                },\n                \"data\": {\n                    \"attachment-url\": \"https://maps.google.com/maps/api/staticmap?markers=color:red|37.388064,-122.088426\u0026zoom=13\u0026size=500x300\u0026sensor=true\"\n                }\n            }\n        })\n        .then(response =\u003e console.log('Just published:', response.publishId))\n        .catch(error =\u003e console.log('Error:', error));\n    }\n```\n\nAbove we have two functions. The first is `sendRiderPushNotificationFor` which sends a notification to the rider based on the status of the trip. The second method is the `sendDriverPushNotification` which just sends a notification to the driver.\n\nIn the `sendDriverPushNotification` we can see the format for the push notification is a little different than the first. This is because we are supporting rich actions so we have to specify the `category` key and the `mutable-content` key. The `category` must match the name we specified in the `AppDelegate`.\n\nNext, you need to call the functions above in their respective routes. The first function should be added to the `POST /status` route above the `pusher.trigger` method call. The second function should be called in the `POST /request` route above the `pusher.trigger` method call. \n\nNow, when we run our applications, we should get push notifications on our devices.\n\n\n\u003e ⚠️  When working with push notifications on iOS, the server must be served in HTTPS.\n\nThat’s all there is to adding push notifications using Pusher. Heres a screen recording of our applications in action:\n\n![Side by side apps demo](//images.ctfassets.net/1es3ne0caaid/3oyOhCLwmsO4QeMyy2cwiC/f4663506f734992dea008287bd619418/Food-Delivery-App-with-Push-Notifications15.gif)\n\n## Conclusion\n\nIn this article, we created a basic ride sharing service and used that to demonstrate how to use Pusher to send push notifications with rich actions. Hopefully you learnt how you can use Pusher to simplify the process of sending Push Notifications to your users.\n\nThe source code to the repository is available on [GitHub](https://github.com/neoighodaro/ride-sharing-app).","metaTitle":"Build a ride sharing iOS app with push notifications","metaDescription":"Build a ride-sharing app for iOS using Xcode, Swift, Google Maps, Node.js and push notifications. Build both the driver and rider apps for a complete demonstration of push notification functionality."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3DJ22aI1OUQUiw66wiayKU","type":"Entry","createdAt":"2018-04-04T14:23:36.809Z","updatedAt":"2018-04-04T14:23:58.075Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to create a WebRTC video call app with Node.js","url":"webrtc-video-call-app-nodejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5KlhqILjZSg4wUSqY4Goqg","type":"Entry","createdAt":"2018-02-20T14:39:32.323Z","updatedAt":"2018-10-02T14:31:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Samuel Ogundipe","url":"samuel-ogundipe","email":"ayoogundipe2005@gmail.com","twitter":"https://twitter.com/fucked_down","github":"https://github.com/samuelayo","guestWriter":true}}],"projectRepo":"https://github.com/samuelayo/pusher_webrtc","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}}],"reviewDate":"2018-03-29","description":"A short tutorial showing how to quickly and easily create a video chat app with WebRTC, Node.js and Express.","prerequisite":"A basic understanding of Node.js and JavaScript will be helpful.","content":"Pusher is perfect for instantaneously distributing messages amongst people and devices. This is exactly why Pusher is a great choice for signaling in WebRTC, the act of introducing two devices in realtime so they can make their own peer-to-peer connection.\n\n**WebRTC** (Web Real-Time Communications) is a technology which enables web applications and sites to capture and optionally stream audio and/or video media, and to exchange arbitrary data between browsers without requiring an intermediary. The set of standards that comprises WebRTC makes it possible to share data and perform teleconferencing peer-to-peer, without requiring that the user install plug-ins or any other third-party software.\n\nIn this tutorial, we will build a video call app that allows you to make calls, accept and also reject calls.\nMaking your own video call application using WebRTC is simple thanks to the Pusher API.\n\n![webrtc-video-call-preview](//images.ctfassets.net/1es3ne0caaid/56baCUQiMMOimsAquAmqmq/3be16a2599f3a8c020b98f95214d41ec/webrtc-video-call-preview.gif)\n\n## Prerequisites\n\nA basic understanding of Node.js and client-side JavaScript is required for this tutorial.\n\n## Setting up a Pusher account and app\n\n[Pusher](https://pusher.com/) is a hosted service that makes it super-easy to add realtime data and functionality to web and mobile applications.\n\nPusher acts as a realtime layer between your servers and clients. Pusher maintains persistent connections to the clients - over Web-socket if possible and falling back to HTTP-based connectivity - so that as soon as your servers have new data they want to push to the clients they can do, via Pusher.\n\nIf you do not already have one, head over to Pusher and create a free account.\nWe will register a new app on the dashboard. The only compulsory options are the app name and cluster. A cluster represents the physical location of the Pusher server that will handle your app’s requests. Also, copy out your App ID, Key, and Secret from the App Keys section, as we will need them later on.\n\n## Setting up the project\n\nLet’s create a new node project by running:\n\n```\n    #create directory\n    mkdir pusher-webrtc\n    #move into the new directory\n    cd puhser-webrtc\n    #initialize a node project\n    npm init -y\n```\n\nNext, let’s move ahead by installing the required libraries:\n\n```\n    npm install body-parser express pusher --save\n```\n\nIn the command above, we have installed three libraries which are:\n\n- Express: fast, unopiniated, minimalistic web framework for Node.js.\n- Body-parser: parse incoming request bodies in a middleware before your handlers, available under the `req.body` property.\n- Pusher: the official Node.js library for Pusher.\n\n\n## Setting up the entry point\n\nCreate a file called `index.js` in the root folder and paste in:\n\n``` javascript\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    const app = express();\n    \n    \n    // Body parser middleware\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    // Session middleware\n    \n    // Create an instance of Pusher\n    const pusher = new Pusher({\n        appId: 'XXX-API-ID',\n        key: 'XXX-API-KEY',\n        secret: 'XXX-API-SECRET',\n        cluster: 'XXX-API-CLUSTER',\n        encrypted: true\n    });\n    \n    app.get('/', (req, res) =\u003e {\n        return res.sendFile(__dirname + '/index.html');\n    });\n    \n    //listen on the app\n    app.listen(3000, () =\u003e {\n        return console.log('Server is up on 3000')\n    });\n```\n\nIn the code block above, we have added the required libraries, used the `body-parser` middleware, and started an instance of Pusher, passing in the app id, key, secret, and cluster. \n\nNext, we defined the base route, in which we serve an `index.html` file (which we will create later on).\n\nFinally, we set the app to listen on port 3000.\n\n\n## Setting up the authentication route\n\nSince we are building a video call app, it will be nice to know who’s online at the moment. Pusher’s [presence channels](https://pusher.com/docs/client_api_guide/client_presence_channels) keeps a record of members online. We will use presence channels as opposed to the usual public channels.\n\nPusher’s presence channel subscriptions must be authenticated. Hence, we will have an authentication route. Add the route below to your `index.js` file:\n\n``` javascript\n    // get authentictation for the channel;\n    app.post(\"/pusher/auth\", (req, res) =\u003e {\n      const socketId = req.body.socket_id;\n      const channel = req.body.channel_name;\n      var presenceData = {\n        user_id:\n          Math.random()\n            .toString(36)\n            .slice(2) + Date.now()\n      };\n      const auth = pusher.authenticate(socketId, channel, presenceData);\n      res.send(auth);\n    });\n```\n\nIn the code above, we defined a new route at `/pusher/auth` which uses the usual `pusher.authenticate` method, but with an additional parameter which holds the details of the user trying to access the channel.  This parameter is expected to be an object with two keys which are: `user_id` and `user_info`. The user_info key is however optional. \n\n\n\u003e **Note:** In the example above, I am just passing a random unique id to each user. In a real-world application, you might need to pass in the user id from the database or other authentication methods as used in your app.\n\n\n## Creating the `index.html` file\n\nRemember while we were creating the entry point, we served a file called `index.html`  in the base route, which we were yet to create? Next, we will create a new file called `index.html`  in the root folder, and add:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \n    \u003chead\u003e\n        \u003ctitle\u003eWebRTC Audio/Video-Chat\u003c/title\u003e\n    \u003c/head\u003e\n    \n    \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n            \u003cspan id=\"myid\"\u003e \u003c/span\u003e\n            \u003cvideo id=\"selfview\"\u003e\u003c/video\u003e\n            \u003cvideo id=\"remoteview\"\u003e\u003c/video\u003e\n            \u003cbutton id=\"endCall\" style=\"display: none;\" onclick=\"endCurrentCall()\"\u003eEnd Call \u003c/button\u003e\n            \u003cdiv id=\"list\"\u003e\n                \u003cul id=\"users\"\u003e\n    \n                \u003c/ul\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/body\u003e\n    \n    \u003c/html\u003e\n```\n\nIn the code block above, we have a basic HTML setup with one span element which holds the ID of the current user, two video elements for both the caller and the receiver, a button to end the current call, with an `onclick` attribute if `endCurrentCall()` which we will define soon, and finally an `ul` element which holds the list of all users.\n\n\n## Displaying online users\n\nTo make video calls, we need to be able to see online users, which was the reason we opted for presence channels. Just before the `body` closing tag, paste in:\n\n``` javascript\n    \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n    var pusher = new Pusher(\"XXX-API-KEY\", {\n      cluster: \"XXX-API-CLUSTER\",\n      encrypted: true,\n      authEndpoint: \"pusher/auth\"\n    });\n    var usersOnline,\n      id,\n      users = [],\n      sessionDesc,\n      currentcaller,\n      room,\n      caller,\n      localUserMedia;\n    const channel = pusher.subscribe(\"presence-videocall\");\n    \n    channel.bind(\"pusher:subscription_succeeded\", members =\u003e {\n      //set the member count\n      usersOnline = members.count;\n      id = channel.members.me.id;\n      document.getElementById(\"myid\").innerHTML = ` My caller id is : ` + id;\n      members.each(member =\u003e {\n        if (member.id != channel.members.me.id) {\n          users.push(member.id);\n        }\n      });\n    \n      render();\n    });\n    \n    channel.bind(\"pusher:member_added\", member =\u003e {\n      users.push(member.id);\n      render();\n    });\n    \n    channel.bind(\"pusher:member_removed\", member =\u003e {\n      // for remove member from list:\n      var index = users.indexOf(member.id);\n      users.splice(index, 1);\n      if (member.id == room) {\n        endCall();\n      }\n      render();\n    });\n    \n    function render() {\n      var list = \"\";\n      users.forEach(function(user) {\n        list +=\n          `\u003cli\u003e` +\n          user +\n          ` \u003cinput type=\"button\" style=\"float:right;\"  value=\"Call\" onclick=\"callUser('` +\n          user +\n          `')\" id=\"makeCall\" /\u003e\u003c/li\u003e`;\n      });\n      document.getElementById(\"users\").innerHTML = list;\n    }\n    \u003c/script\u003e\n```\n\nHere, we have required the official client library for Pusher. Next, we start a new Pusher instance, passing in our app key, and also the authentication route we had created earlier.\n\nWe go on to define initial variables which we will use in the code:\n\n- `usersOnline`: the count of users online \n- `id`: the ID of the current user \n- `users`: an array that holds the details of all users\n- `sessionDesc`: the SDP offer being sent. SDP refers to the session description of the peer connection provided by WebRTC. (You would see more of this as we move on) \n- `room`: the identifier of the current people having a call. \n- `caller`: the peer connection object of the person calling/receiving a call. \n- `localUserMedia`: a reference to the local audio and video stream being transmitted from the caller.\n\nNext, we subscribe to a presence channel called `presence-videocall`. Once subscribed to our channel, it triggers an authentication, which returns an object. To access this object, we have to bind to the `pusher:subscription_succeeded` event. We then get the users count, the user id, append all members apart from the current user to the user’s array. We then call a render function. (The render function would be to display the online users. We will create this function soon).\n\nAlso, we bind to two more events which are: `pusher:member_added` and `pusher:member_removed` in which we add new members and delete logged out members from the array respectively.\n\nFinally, we define the render function which loops through all users and then appends them to the `ul` element as `li` tags with call buttons which have an `onclick` attribute of `callUser` which we will create soon.\n\n## Integrating WebRTC into the app\n\nNow we are all set, we can use Pusher to take care of signaling within the video call. First, let’s get the video call started. Paste the following after the `render` function in the `index.html` file:\n\n``` javascript\n    //To iron over browser implementation anomalies like prefixes\n    GetRTCPeerConnection();\n    GetRTCSessionDescription();\n    GetRTCIceCandidate();\n    //prepare the caller to use peerconnection\n    prepareCaller();\n    function GetRTCIceCandidate() {\n      window.RTCIceCandidate =\n        window.RTCIceCandidate ||\n        window.webkitRTCIceCandidate ||\n        window.mozRTCIceCandidate ||\n        window.msRTCIceCandidate;\n    \n      return window.RTCIceCandidate;\n    }\n    \n    function GetRTCPeerConnection() {\n      window.RTCPeerConnection =\n        window.RTCPeerConnection ||\n        window.webkitRTCPeerConnection ||\n        window.mozRTCPeerConnection ||\n        window.msRTCPeerConnection;\n      return window.RTCPeerConnection;\n    }\n    \n    function GetRTCSessionDescription() {\n      window.RTCSessionDescription =\n        window.RTCSessionDescription ||\n        window.webkitRTCSessionDescription ||\n        window.mozRTCSessionDescription ||\n        window.msRTCSessionDescription;\n      return window.RTCSessionDescription;\n    }\n    function prepareCaller() {\n      //Initializing a peer connection\n      caller = new window.RTCPeerConnection();\n      //Listen for ICE Candidates and send them to remote peers\n      caller.onicecandidate = function(evt) {\n        if (!evt.candidate) return;\n        console.log(\"onicecandidate called\");\n        onIceCandidate(caller, evt);\n      };\n      //onaddstream handler to receive remote feed and show in remoteview video element\n      caller.onaddstream = function(evt) {\n        console.log(\"onaddstream called\");\n        if (window.URL) {\n          document.getElementById(\"remoteview\").src = window.URL.createObjectURL(\n            evt.stream\n          );\n        } else {\n          document.getElementById(\"remoteview\").src = evt.stream;\n        }\n      };\n    }\n```\n\nIn the code block above, we called functions which we defined just after calling them. The first three functions `GetRTCPeerConnection()`, `GetRTCSessionDescription()` and  `GetRTCIceCandidate()` are used to iron out browser implementation anomalies for `RTCPeerConnection`, `RTCSessionDescription` and  such as web-kit or Mozilla Gecko browsers. You may wonder what are they?\n\nThe `RTCPeerConnection` interface represents a WebRTC connection between the local computer and a remote peer. It provides methods to connect to a remote peer, maintain and monitor the connection, and close the connection once it's no longer needed.\n\nThe `RTCSessionDescription` interface describes one end of a connection or potential connection and how it's configured. Each `RTCSessionDescription` comprises a description `type` indicating which part of the offer/answer negotiation process it describes and of the SDP descriptor of the session.\n\nThe `RTCIceCandidate` interface is part of the WebRTC API which represents a candidate Internet Connectivity Establishment (ICE) server which may establish an `RTCPeerConnection`.\n\nRemember we also called the `prepareCaller` function? So what is it about? This function sets a new `RTCPeerConnection` instance to the predefined `caller` variable while assigning functions for its `onicecandidate` and `onaddstream` event. In the event of an `icecandidate`, we call the `onIceCandidate` function, which we will define soon, while in the event of a newly added stream, we set the URL of the stream to be the URL of our remote video. i.e this is the second party’s video.\n\n### Defining the onIceCandidate function and using the candidate\nLet’s look at what our `onIceCandidate` function would look like. Paste the following into the script part of your `index.html` file:\n\n``` javascript\n    //Send the ICE Candidate to the remote peer\n    function onIceCandidate(peer, evt) {\n        if (evt.candidate) {\n            channel.trigger(\"client-candidate\", {\n                \"candidate\": evt.candidate,\n                \"room\": room\n            });\n        }\n    }\n    \n    channel.bind(\"client-candidate\", function(msg) {\n            if(msg.room==room){\n                console.log(\"candidate received\");\n                caller.addIceCandidate(new RTCIceCandidate(msg.candidate));\n            }\n        });\n```\n\nIn this function, we make a quick trigger to the other party, informing him that a new `iceCandidate` event has occurred. This function will be called whenever the local [ICE](https://developer.mozilla.org/en-US/docs/Glossary/ICE) agent needs to deliver a message to the other peer through the signaling server (In this case, Pusher). This lets the ICE agent perform negotiation with the remote peer without the browser itself needing to know any specifics about the technology being used for signaling; implement this method to use whatever messaging technology you choose to send the ICE candidate to the remote peer.\n\nOn the other end, we bind for the candidate and then add the `IceCandidate` to the current `RTCPeerConnection`\n\n### Calling a user\nCalling a user using WebRTC is simple. First, we need to get the caller’s stream, then create an offer to the peer you are calling. Here, we use Pusher to signal the other peer that an incoming call is waiting for him. \n\nIn the code below, you notice we trigger `client-events` rather than making a post request to the server which triggers an event that we bound to. \n\nThe reason for this is because we need not store this information on the server. Unless you need to, I’ll recommend that you use `client-events`. However, for `client-events`  to work, you need to have them enabled on your Pusher’s app dashboard.\nPaste the following in the script section of your `index.html` file:\n\n``` javascript\n    function getCam() {\n      //Get local audio/video feed and show it in selfview video element\n      return navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n    }\n    //Create and send offer to remote peer on button click\n    function callUser(user) {\n      getCam()\n        .then(stream =\u003e {\n          if (window.URL) {\n            document.getElementById(\"selfview\").src = window.URL.createObjectURL(\n              stream\n            );\n          } else {\n            document.getElementById(\"selfview\").src = stream;\n          }\n          toggleEndCallButton();\n          caller.addStream(stream);\n          localUserMedia = stream;\n          caller.createOffer().then(function(desc) {\n            caller.setLocalDescription(new RTCSessionDescription(desc));\n            channel.trigger(\"client-sdp\", {\n              sdp: desc,\n              room: user,\n              from: id\n            });\n            room = user;\n          });\n        })\n        .catch(error =\u003e {\n          console.log(\"an error occured\", error);\n        });\n    }\n    function toggleEndCallButton() {\n      if (document.getElementById(\"endCall\").style.display == \"block\") {\n        document.getElementById(\"endCall\").style.display = \"none\";\n      } else {\n        document.getElementById(\"endCall\").style.display = \"block\";\n      }\n    }\n```\n\nThe code has been explained above. However, notice we have an extra function called `toggleEndCallButton` . This is used to toggle the end call button, so you can end an active call.\n\nAlso, note we triggered a `client-event`. This event uses Pusher to notify the recipient he has a call. Here, instead of generating a unique room ID for the two users, we use the recipient's ID as the room id. Please use any unique identifier for the room.\n\n### Receiving a call\nReceiving a call is easy. First, the recipient needs to be notified that he has a call. Remember we emitted a client event earlier on while making the call? Now we need to bind and listen to it.\n\n``` javascript\n    channel.bind(\"client-sdp\", function(msg) {\n        if(msg.room == id){\n            var answer = confirm(\"You have a call from: \"+ msg.from + \"Would you like to answer?\");\n            if(!answer){\n                return channel.trigger(\"client-reject\", {\"room\": msg.room, \"rejected\":id});\n            }\n            room = msg.room;\n            getCam()\n            .then(stream =\u003e {\n                localUserMedia = stream;\n                toggleEndCallButton();\n                if (window.URL) {\n                    document.getElementById(\"selfview\").src = window.URL.createObjectURL(stream);\n                } else {\n                    document.getElementById(\"selfview\").src = stream;\n                }\n                caller.addStream(stream);\n                var sessionDesc = new RTCSessionDescription(msg.sdp);\n                caller.setRemoteDescription(sessionDesc);\n                caller.createAnswer().then(function(sdp) {\n                    caller.setLocalDescription(new RTCSessionDescription(sdp));\n                    channel.trigger(\"client-answer\", {\n                        \"sdp\": sdp,\n                        \"room\": room\n                    });\n                });\n    \n            })\n            .catch(error =\u003e {\n                console.log('an error occured', error);\n            })\n        }\n    });\n    channel.bind(\"client-answer\", function(answer) {\n      if (answer.room == room) {\n        console.log(\"answer received\");\n        caller.setRemoteDescription(new RTCSessionDescription(answer.sdp));\n      }\n    });\n    \n    channel.bind(\"client-reject\", function(answer) {\n      if (answer.room == room) {\n        console.log(\"Call declined\");\n        alert(\"call to \" + answer.rejected + \"was politely declined\");\n        endCall();\n      }\n    });\n    \n    function endCall() {\n      room = undefined;\n      caller.close();\n      for (let track of localUserMedia.getTracks()) {\n        track.stop();\n      }\n      prepareCaller();\n      toggleEndCallButton();\n    }    \n```\n\nIn the code above, we bind to the `client-sdp` event which was emitted when we made the call. Next, we check that the room is equal to the ID of the receiver (remember we used the receiver’s ID as the room. This way it doesn’t alert the wrong person). We move ahead to present a confirm box, prompting the user to accept or reject the call. If the user rejects. we return a client trigger of `client-reject`, passing in the room’s call that was rejected.\n\nIf the call isn’t rejected, we get the recipient's webcam, then set the reference to the stream (so we can stop the webcam while ending the call). We add the stream to the video output and the current `RTCPeerConnection` instance.\n\nWe set the remote description as the description of the `sdp` sent by the caller. Finally, we create an answer and then send the answer to the caller. \n\nIf the answer is not received, the call would not be connected. When the answer is received, the caller then sets his remote description to the `sdp` from the receiver.\n\nNotice the listener for the `client-reject` event calls the `endCall` function (this is because when a call is rejected, we want to end everything about the call). The end call function sets the room to its status quo, closes the \n, stops the media streaming, prepares the caller to make/receive new calls, then finally disable the end call button.\n\n\n## Wrapping it all up\n\nAt the end of the whole episode, here is what our JavaScript code looks like:\n\n``` javascript\n    var pusher = new Pusher(\"XXX-API-KEY\", {\n      cluster: \"mt1\",\n      encrypted: true,\n      authEndpoint: \"pusher/auth\"\n    });\n    var usersOnline,\n      id,\n      users = [],\n      sessionDesc,\n      currentcaller,\n      room,\n      caller,\n      localUserMedia;\n    const channel = pusher.subscribe(\"presence-videocall\");\n    \n    channel.bind(\"pusher:subscription_succeeded\", members =\u003e {\n      //set the member count\n      usersOnline = members.count;\n      id = channel.members.me.id;\n      document.getElementById(\"myid\").innerHTML = ` My caller id is : ` + id;\n      members.each(member =\u003e {\n        if (member.id != channel.members.me.id) {\n          users.push(member.id);\n        }\n      });\n    \n      render();\n    });\n    \n    channel.bind(\"pusher:member_added\", member =\u003e {\n      users.push(member.id);\n      render();\n    });\n    \n    channel.bind(\"pusher:member_removed\", member =\u003e {\n      // for remove member from list:\n      var index = users.indexOf(member.id);\n      users.splice(index, 1);\n      if (member.id == room) {\n        endCall();\n      }\n      render();\n    });\n    \n    function render() {\n      var list = \"\";\n      users.forEach(function(user) {\n        list +=\n          `\u003cli\u003e` +\n          user +\n          ` \u003cinput type=\"button\" style=\"float:right;\"  value=\"Call\" onclick=\"callUser('` +\n          user +\n          `')\" id=\"makeCall\" /\u003e\u003c/li\u003e`;\n      });\n      document.getElementById(\"users\").innerHTML = list;\n    }\n    \n    //To iron over browser implementation anomalies like prefixes\n    GetRTCPeerConnection();\n    GetRTCSessionDescription();\n    GetRTCIceCandidate();\n    prepareCaller();\n    function prepareCaller() {\n      //Initializing a peer connection\n      caller = new window.RTCPeerConnection();\n      //Listen for ICE Candidates and send them to remote peers\n      caller.onicecandidate = function(evt) {\n        if (!evt.candidate) return;\n        console.log(\"onicecandidate called\");\n        onIceCandidate(caller, evt);\n      };\n      //onaddstream handler to receive remote feed and show in remoteview video element\n      caller.onaddstream = function(evt) {\n        console.log(\"onaddstream called\");\n        if (window.URL) {\n          document.getElementById(\"remoteview\").src = window.URL.createObjectURL(\n            evt.stream\n          );\n        } else {\n          document.getElementById(\"remoteview\").src = evt.stream;\n        }\n      };\n    }\n    function getCam() {\n      //Get local audio/video feed and show it in selfview video element\n      return navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n    }\n    \n    function GetRTCIceCandidate() {\n      window.RTCIceCandidate =\n        window.RTCIceCandidate ||\n        window.webkitRTCIceCandidate ||\n        window.mozRTCIceCandidate ||\n        window.msRTCIceCandidate;\n    \n      return window.RTCIceCandidate;\n    }\n    \n    function GetRTCPeerConnection() {\n      window.RTCPeerConnection =\n        window.RTCPeerConnection ||\n        window.webkitRTCPeerConnection ||\n        window.mozRTCPeerConnection ||\n        window.msRTCPeerConnection;\n      return window.RTCPeerConnection;\n    }\n    \n    function GetRTCSessionDescription() {\n      window.RTCSessionDescription =\n        window.RTCSessionDescription ||\n        window.webkitRTCSessionDescription ||\n        window.mozRTCSessionDescription ||\n        window.msRTCSessionDescription;\n      return window.RTCSessionDescription;\n    }\n    \n    //Create and send offer to remote peer on button click\n    function callUser(user) {\n      getCam()\n        .then(stream =\u003e {\n          if (window.URL) {\n            document.getElementById(\"selfview\").src = window.URL.createObjectURL(\n              stream\n            );\n          } else {\n            document.getElementById(\"selfview\").src = stream;\n          }\n          toggleEndCallButton();\n          caller.addStream(stream);\n          localUserMedia = stream;\n          caller.createOffer().then(function(desc) {\n            caller.setLocalDescription(new RTCSessionDescription(desc));\n            channel.trigger(\"client-sdp\", {\n              sdp: desc,\n              room: user,\n              from: id\n            });\n            room = user;\n          });\n        })\n        .catch(error =\u003e {\n          console.log(\"an error occured\", error);\n        });\n    }\n    \n    function endCall() {\n      room = undefined;\n      caller.close();\n      for (let track of localUserMedia.getTracks()) {\n        track.stop();\n      }\n      prepareCaller();\n      toggleEndCallButton();\n    }\n    \n    function endCurrentCall() {\n      channel.trigger(\"client-endcall\", {\n        room: room\n      });\n    \n      endCall();\n    }\n    \n    //Send the ICE Candidate to the remote peer\n    function onIceCandidate(peer, evt) {\n      if (evt.candidate) {\n        channel.trigger(\"client-candidate\", {\n          candidate: evt.candidate,\n          room: room\n        });\n      }\n    }\n    \n    function toggleEndCallButton() {\n      if (document.getElementById(\"endCall\").style.display == \"block\") {\n        document.getElementById(\"endCall\").style.display = \"none\";\n      } else {\n        document.getElementById(\"endCall\").style.display = \"block\";\n      }\n    }\n    \n    //Listening for the candidate message from a peer sent from onicecandidate handler\n    channel.bind(\"client-candidate\", function(msg) {\n      if (msg.room == room) {\n        console.log(\"candidate received\");\n        caller.addIceCandidate(new RTCIceCandidate(msg.candidate));\n      }\n    });\n    \n    //Listening for Session Description Protocol message with session details from remote peer\n    channel.bind(\"client-sdp\", function(msg) {\n      if (msg.room == id) {\n        console.log(\"sdp received\");\n        var answer = confirm(\n          \"You have a call from: \" + msg.from + \"Would you like to answer?\"\n        );\n        if (!answer) {\n          return channel.trigger(\"client-reject\", { room: msg.room, rejected: id });\n        }\n        room = msg.room;\n        getCam()\n          .then(stream =\u003e {\n            localUserMedia = stream;\n            toggleEndCallButton();\n            if (window.URL) {\n              document.getElementById(\"selfview\").src = window.URL.createObjectURL(\n                stream\n              );\n            } else {\n              document.getElementById(\"selfview\").src = stream;\n            }\n            caller.addStream(stream);\n            var sessionDesc = new RTCSessionDescription(msg.sdp);\n            caller.setRemoteDescription(sessionDesc);\n            caller.createAnswer().then(function(sdp) {\n              caller.setLocalDescription(new RTCSessionDescription(sdp));\n              channel.trigger(\"client-answer\", {\n                sdp: sdp,\n                room: room\n              });\n            });\n          })\n          .catch(error =\u003e {\n            console.log(\"an error occured\", error);\n          });\n      }\n    });\n    \n    //Listening for answer to offer sent to remote peer\n    channel.bind(\"client-answer\", function(answer) {\n      if (answer.room == room) {\n        console.log(\"answer received\");\n        caller.setRemoteDescription(new RTCSessionDescription(answer.sdp));\n      }\n    });\n    \n    channel.bind(\"client-reject\", function(answer) {\n      if (answer.room == room) {\n        console.log(\"Call declined\");\n        alert(\"call to \" + answer.rejected + \"was politely declined\");\n        endCall();\n      }\n    });\n    \n    channel.bind(\"client-endcall\", function(answer) {\n      if (answer.room == room) {\n        console.log(\"Call Ended\");\n        endCall();\n      }\n    });\n```\n\nNext, let’s run our app by running:\n\n```\n    node index.js\n```\n\nFinally, navigate to `http://localhost:3000` to try the app out.\nBelow is an image of what we have built:\n\n![webrtc-video-call-preview](//images.ctfassets.net/1es3ne0caaid/56baCUQiMMOimsAquAmqmq/3be16a2599f3a8c020b98f95214d41ec/webrtc-video-call-preview.gif)\n\n\n## Conclusion\n\nIn this tutorial, you learned how to put together your own WebRTC chat application using Pusher as a signaling server. We covered setting up a WebRTC connection using simple JavaScript.\nFrom here you can take things further and explore more complex call applications by adding in better video security, notifications that a user is on another call, group video calls, and more!\n\nThe code base to this tutorial is hosted in a [public GitHub repository](https://github.com/samuelayo/pusher_webrtc). Play around with the code.\n\n","metaTitle":"How to create a WebRTC video call app with Node.js","metaDescription":"Learn how to create a video chat app with WebRTC, Node.js and Express."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"F4X1vbrUM8AYqGOk4y4qO","type":"Entry","createdAt":"2018-03-14T17:33:24.754Z","updatedAt":"2018-03-22T15:22:22.744Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a social poll app with counter using Node.js","url":"social-poll-realtime-counter","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/pollser","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N8l3o0yD6QK2ooI2ME8wW","type":"Entry","createdAt":"2018-02-12T15:09:06.190Z","updatedAt":"2018-02-26T12:31:10.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Polls","url":"live-polls","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WBKKiARVKggKEsq8gSuOS","type":"Entry","createdAt":"2018-02-12T15:10:05.476Z","updatedAt":"2018-02-26T12:31:10.466Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Counter","url":"live-counter","type":"use case"}}],"reviewDate":"2018-03-13","description":"A short tutorial showing how to quickly build a poll app using Node.js, with realtime vote count updates.","prerequisite":"This tutorial assumes you have Node.js, MongoDB and Express installed.","content":"Over the years, web apps have come a long way, incorporating various technologies and techniques to create a more engaging experience for the user. Realtime technologies are one such improvement. They provide a powerful means of transforming an app into a social activity.\n\nIn this article, we’ll build a polls app. The home page of our app will display a list of polls. A visitor can vote on as many polls as they wish from the home page. Each time a new vote is cast on any poll, the number of votes for the different choices in that poll will update in realtime. Here’s a demo of the app:\n\n![building-realtime-polls-nodejs-demo](//images.ctfassets.net/1es3ne0caaid/20MtO6eN5GEaW6UOAEE8Kw/053464117c55b3cbe0b7848a4b48ba19/building-realtime-polls-nodejs-demo.gif)\n\nYou can check out the source code of the completed application [on GitHub](https://github.com/shalvah/pollser).\n\n## Set up the project\nThis tutorial assumes you have Node.js and MongoDB installed. We’ll be using Express, a popular lightweight Node.js framework. Let’s get started by using the express application generator:\n\nIf you don't already have it installed:\n```\nnpm install express-generator -g\n```\n\nCreate a new express app with view engine set to Handlebars (hbs)\n```\nexpress --view=hbs pollser\ncd pollser \u0026\u0026 npm install\n```\n\nThen we’ll add our dependencies:\n```\nnpm install --save dotenv mongoose pusher\n```\n\nHere’s a breakdown of what each module is for:\n\n- We’re using MongoDB for our data store, so we’ll use Mongoose to map our models (JavaScript objects) to MongoDB documents.\n- We need Pusher to talk to Pusher’s APIs.\n- Lastly, dotenv is a small package that helps us load our private configuration variables (namely our Pusher app credentials) from a .env file. \n\nWe’ll store our polls in a polls collection. Here’s an example of what a single item in this collection will look like:\n\n``` javascript\n    {\n      \"topic\": \"Should dogs be allowed to fly?\"\n      \"choices\": [\n        {\n          \"value\": \"Yes\",\n          \"votes\": 2,\n          \"id\": 0\n        },\n        {\n          \"value\": \"No\",\n          \"votes\": 7,\n          \"id\": 1\n        },\n        {\n          \"value\": \"Perhaps\",\n          \"votes\": 17,\n          \"id\": 2\n        }\n      ]\n    }\n```\n\nLet’s define our Poll model. We’ll put this in `models/poll.js`:\n\n``` javascript\n    let mongoose = require('mongoose');\n\n    let Poll = mongoose.model('Poll', {\n        topic: String,\n        choices: [\n            {\n                value: String,\n                votes: Number\n            }\n        ]\n    });\n\n    module.exports = Poll;\n```\n\nNext up, let’s populate our database with some fake polls. Create a file called `seed.js` in the bin directory, with the following content:\n\n``` javascript\n    require('mongoose').connect('mongodb://localhost/pollser');\n\n    const topics = [\n        \"Should dogs be allowed to fly?\",\n        \"Should doors be shut at night?\",\n        \"Should developers use IDEs?\",\n        \"Should cars have four wheels?\",\n        \"Should humans be allowed to wear shoes?\"\n    ];\n    let Poll = require('../models/poll');\n\n    // empty the collection first\n    Poll.remove({})\n        .then(() =\u003e {\n            let polls = [];\n            for (let i = 0; i \u003c 5; i++) {\n                polls.push({\n                    topic: topics[i],\n                    choices: [\n                        {\n                            value: \"Yes\",\n                            votes: Math.round(Math.random() * 20)\n                        },\n                        {\n                            value: \"No\",\n                            votes: Math.round(Math.random() * 20)\n                        },\n                        {\n                            value: \"I really don't care\",\n                            votes: Math.round(Math.random() * 20)u\n                        }\n                    ]\n                });\n            }\n            return Poll.create(polls);\n        })\n        .then(() =\u003e {\n            process.exit();\n        })\n        .catch((e) =\u003e {\n            console.log(e);\n            process.exit(1);\n        });\n```\n\nRun the seed using node (remember to start your MongoDB server by running `mongod` first):\n\n```\nnode bin/seed.js\n```\n\n## Retrieving and rendering polls\n\nLet’s add our MongoDB connection setup to our app.js file, so the connection gets created when our app starts.\n\n``` javascript\n    // below this line:\n    var app = express();\n\n    // add this\n    require('mongoose').connect('mongodb://localhost/pollser');\nNext up is our route. Here, we’ll retrieve all polls from the database and pass them to the view. Replace the code in routes/index.js with this:\n\n    let router = require('express').Router();\n\n    let Poll = require('./../models/poll');\n\n    router.get('/', (req, res, next) =\u003e {\n        Poll.find().exec((err, polls) =\u003e {\n            res.render('index', { polls: polls });\n        });\n    });\n\n    module.exports = router;\n```\n\nLet’s build our view. We’ll implement a simple interface that shows each poll as a Bootstrap panel with the choices listed in the panel body, and the number of votes for each choice shown at the right edge.\n\nReplace the code in your `views/layout.hbs` with this:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang='en'\u003e\n    \u003chead\u003e\n        \u003ctitle\u003e{{title}}\u003c/title\u003e\n        \u003clink rel='stylesheet' href='/stylesheets/style.css'/\u003e\n        \u003clink rel='stylesheet' href='//netdna.bootstrapcdn.com/bootstrap/3.0.1/css/bootstrap.min.css'/\u003e\n    \u003c/head\u003e\n\n    \u003cbody\u003e\n    \u003cdiv class=\"container\"\u003e\n        {{{body}}}\n    \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nPut this in your views/index.hbs:\n\n``` html\n    \u003cdiv class=\"row\"\u003e\n\n        {{#each polls }}\n            \u003cdiv class=\"col-md-6\"\u003e\n                \u003cform onsubmit=\"vote(event);\" id=\"{{this._id}}\"\u003e\n                    \u003cdiv class=\"panel panel-primary\"\u003e\n                        \u003cdiv class=\"panel-heading\"\u003e\n                            \u003ch3 class=\"panel-title\"\u003e\n                                \u003cspan class=\"glyphicon glyphicon-arrow-right\"\u003e\u003c/span\u003e{{ this.topic }}\n                            \u003c/h3\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"panel-body\"\u003e\n                            \u003cul class=\"list-group\"\u003e\n                                {{#each this.choices }}\n                                    \u003cli class=\"list-group-item\"\u003e\n                                        \u003cdiv class=\"radio\"\u003e\n                                            \u003clabel\u003e\n                                                \u003cinput type=\"radio\" name=\"optionsRadios\" value=\"{{@index}}\"\u003e\n                                                {{ this.value }}\n                                                \u003cdiv class=\"alignright\" id=\"vote-count-{{../id}}-{{@index}}\"\u003e{{ this.votes }}\u003c/div\u003e\n                                            \u003c/label\u003e\n                                        \u003c/div\u003e\n                                    \u003c/li\u003e\n                                {{/each}}\n                            \u003c/ul\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"panel-footer\"\u003e\n                            \u003cinput type=\"submit\" id=\"vote-btn-{{this.id}}\" class=\"btn btn-primary btn-sm\" value=\"Vote\"\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n        {{/each}}\n    \u003c/div\u003e\n```\n\nLastly, replace the contents of your public/stylesheets/style.css with this:\n\n``` css\n    body {\n        padding: 50px;\n        margin-top: 20px;\n        font: 14px \"Lucida Grande\", Helvetica, Arial, sans-serif;\n    }\n\n    .panel-body:not(.two-col) {\n        padding: 0px\n    }\n\n    .glyphicon {\n        margin-right: 5px;\n    }\n\n    .glyphicon-new-window {\n        margin-left: 5px;\n    }\n\n    .panel-body .radio, .panel-body .checkbox {\n        margin-top: 0px;\n        margin-bottom: 0px;\n    }\n\n    .panel-body .list-group {\n        margin-bottom: 0;\n    }\n\n    .margin-bottom-none {\n        margin-bottom: 0;\n    }\n\n    .panel-body .radio label, .panel-body .checkbox label {\n        display: block;\n    }\n\n    .alignright {\n        float: right;\n    }\n```\n\nLet’s implement the voting logic. Laying out the steps we need to perform:\n\nA choice is selected on a certain poll, and the Vote button is clicked. This submits the containing form. \n\nOur registered onsubmit handler retrieves the choice selected and the poll ID from the form and makes an AJAX call to our vote endpoint. The handler also updates the UI to reflect the increased number of votes. \n\nThe vote endpoint finds the poll with the specified ID in the database, and increments the number of votes corresponding to the selected choice by 1.\nLet’s define our event handler. We’ll pull in Axios for API calls. Add this to your `index.hbs`:\n\n``` javascript\n    \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        var vote = function (event) {\n            event.preventDefault();\n            var pollId = event.target.id;\n            var choice = event.target.optionsRadios.value;\n            axios.post('/' + pollId + '/vote', {choice: choice});\n\n            // disable the button, so a user san't vote twice\n            document.querySelector('#vote-btn-' + pollId).disabled = true;\n            var voteCount = document.querySelector('#vote-count-' + pollId + '-' + choice);\n            voteCount.textContent++;\n            voteCount.style.color = 'green';\n            voteCount.style.fontWeight = '900';\n        };\n    \u003c/script\u003e\n```\n\nFor the vote endpoint, add this route in your routes/index.js:\n\n``` javascript\n    router.post('/:pollId/vote', (req, res, next) =\u003e {\n        const choice = req.body.choice;\n        const identifier = `choices.${choice}.votes`;\n        Poll.update({_id: req.params.pollId}, {$inc: {[identifier]: 1}}, {}, (err, numberAffected) =\u003e {\n            res.send('');\n        });\n\n    });\n```\n\nIn this code snippet, we find the poll with the specified ID then increment the number of votes associated with the specified choice using MongoDB’s $inc operator (you can read more about that here).\n\nYou can start your app by running npm start. If you select a choice and click “Vote”, you should see the number of votes displayed for your choice increase.\n\n## Messaging with Pusher \n\nThe final thing to do is modify our vote endpoint so it sends out a broadcast over Pusher after incrementing the number of votes for the poll. We’ll also need to modify our frontend so that it listens for these broadcasts and updates the UI accordingly.\n\nFirst off, create a Pusher account if you don’t already have one (it’s free). Then create an app and obtain your app credentials from the app dashboard. Create a file named `.env` in the root of your project with the following content:\n\n```\n    PUSHER_APP_ID=YOUR_APP_ID\n    PUSHER_APP_KEY=YOUR_APP_KEY\n    PUSHER_APP_SECRET=YOUR_APP_SECRET\n    PUSHER_APP_CLUSTER=YOUR_APP_CLUSTER\n```\n\nReplace YOUR_APP_ID, YOUR_APP_KEY, YOUR_APP_SECRET, and YOUR_APP_CLUSTER with your Pusher app ID, app key, app secret and cluster respectively.\nThen add this line to the top of your app.js. This is to setup dotenv so it pulls environment variables from our .env file:\n\n``` javascript\n    require('dotenv').config();\n```\n\nModify your `routes/index.js` so the vote endpoint looks like this:\n\n``` javascript\n    router.post('/:pollId/vote', (req, res, next) =\u003e {\n        const choice = req.body.choice;\n        const identifier = `choices.${choice}.votes`;\n        Poll.update({_id: req.params.pollId}, {$inc: {[identifier]: 1}}, {}, (err, numberAffected) =\u003e {\n            let Pusher = require('pusher');\n            let pusher = new Pusher({\n                appId: process.env.PUSHER_APP_ID,\n                key: process.env.PUSHER_APP_KEY,\n                secret: process.env.PUSHER_APP_SECRET,\n                cluster: process.env.PUSHER_APP_CLUSTER\n            });\n\n            let payload = { pollId: req.params.pollId, choice: choice };\n            pusher.trigger('poll-events', 'vote', payload, req.body.socketId);\n\n            res.send('');\n        });\n\n    });\n```\n\nYou’ll notice we include a fourth parameter in our call to pusher.trigger. This is the socket ID, a unique identifier that Pusher assigns to each client connection. This means that every browser window where our voting page is open will have its own socket ID. By passing the socket ID to pusher.trigger, we are ensuring that the client with that ID will not get notified. This is what we want, since that client already updated its view after the Vote button was clicked.\n\nNow, let’s add our listener to our index.hbs:\n\n``` javascript\n    \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        var pusher = new Pusher('your_app_key', { cluster: 'your_app_cluster' });\n        var socketId;\n\n        // retrieve the socket ID once we are connected\n        pusher.connection.bind('connected', function() {\n            socketId = pusher.connection.socket_id;\n        });\n\n        pusher.subscribe('poll-events')\n                .bind('vote', function (data) {\n                    var pollId = data.pollId;\n                    var choice = data.choice;\n                    var voteCount = document.querySelector('#vote-count-' + pollId + '-' + choice);\n                    voteCount.textContent++;\n                    // we'll flash the colour for a moment\n                    var color = voteCount.style.color;\n                    setTimeout(function () {\n                        voteCount.style.color = color;\n                    }, 2000);\n                    voteCount.style.color = 'green';\n                });\n    \u003c/script\u003e\n```\n\nRemember to replace your_app_key with your Pusher app key and your_app_cluster with your app cluster.\n\nWe’ll also have to add the socket ID to the POST request we make to the vote endpoint. Modify your vote handler so it looks like this:\n\n``` javascript\n    var vote = function (event) {\n        event.preventDefault();\n        var pollId = event.target.id;\n        var choice = event.target.optionsRadios.value;\n\n        // we add the socket ID to our POST data\n        axios.post('/' + pollId + '/vote', {choice: choice, socketId: socketId});\n        document.querySelector('#vote-btn-' + pollId).disabled = true;\n        var voteCount = document.querySelector('#vote-count-' + pollId + '-' + choice);\n        voteCount.textContent++;\n        voteCount.style.color = 'blue';\n        voteCount.style.fontWeight = '900';\n    };\n```\n\nStart up your MongoDB server by running mongod, then serve your app with npm start. \n\nNow visit your app on http://localhost:3000 in two browser windows. You should see that as you vote for an option in one window, the change shows up in the other too.\n\n## Conclusion\nRealtime technologies are a great way to make your app more of a social activity. By seeing the interactions of other users in realtime, users get to feel that they are part of a larger community. In this article, we’ve used Pusher to create a basic social polling app.","metaTitle":"Build a social poll app using Node.js","metaDescription":"Use Node.js and MongoDB to create a polling app with realtime vote count updates."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2WU4UkPiAEsQeAqS8iMEYY","type":"Entry","createdAt":"2018-03-14T17:33:37.268Z","updatedAt":"2018-03-14T17:33:37.268Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a serverless realtime presence counter with Node.js","url":"realtime-presence-counter-nodejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/tvass","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WBKKiARVKggKEsq8gSuOS","type":"Entry","createdAt":"2018-02-12T15:10:05.476Z","updatedAt":"2018-02-26T12:31:10.466Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Counter","url":"live-counter","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}}],"reviewDate":"2018-03-13","description":"Learn to quickly create a realtime presence counter with Node.js, AWS Lambda and Pusher.","prerequisite":"To follow this tutorial you will need an account with AWS. You need to have installed Node.js on your local machine.","content":"When building web apps, we typically divide our time between coding our app logic and maintaining servers to host our app. Serverless architecture allows us to focus on building our app’s logic, leaving all the server management to a cloud provider such as AWS. Serverless apps are also passive, in the sense that they use no resources when idle, so cost is saved as well.\n\nIn this tutorial, we’ll build a small web app to show how serverless and realtime can work together. Our app will have one page, where it displays the number of people currently viewing that page and updates it in realtime. We’ll run our app on AWS Lambda. Here’s a preview of our site in action:\n\n![serverless-node-aws-app-preview](//images.ctfassets.net/1es3ne0caaid/1lDOo3d3EY0EwckoGgOE4O/0d53706f7f1a27e73e244fb6a402eb7f/serverless-node-aws-app-preview.gif)\n\nYou can check out the source code of the complete application on [GitHub](http://github.com/shalvah/tvass).\n\n## Prerequisites\n- Node.js v6.5.0 or greater\n- An AWS account. You can sign up for a free account [here](https://aws.amazon.com/free/)\n- A Pusher account. Sign up [here](https://pusher.com/signup) (it’s free).\n\n## Setting up the project\n\nFirst, we’ll install the serverless framework, a CLI tool for building serverless apps:\n\n```\n    npm install -g serverless\n```\n\nNext, we’ll create a new service using the AWS Node.js template. Create a folder to hold your service (I’m calling mine “tvass”, short for **T**hat **V**ery **A**wesome **S**erverless **S**ite) and run the following command in it:\n\n```\n    serverless create --template aws-nodejs\n```\n\nThis will populate the current directory with a few files. Your directory should have the following structure:\n\n```\n    tvass\n    |- .gitignore\n    |- handler.js\n    |- serverless.yml\n```\n\n## Building the serverless component\n\nThe `serverless.yml` file describes our service so the serverless CLI can configure and deploy it to our provider. Let’s write our `serverless.yml`. Replace the contents of the file with the following:\n\n``` yaml\n    service: tvass\n    \n    provider:\n      name: aws\n      runtime: nodejs6.10\n    \n    functions:\n      home:\n        handler: handler.home\n        events:\n          - http:\n              path: /\n              method: get\n              cors: true\n```\n\nThe format is easy to understand:\n\n- In the **service** key, we state the name of our service.\n- In the **provider** key, we specify the name of our provider and the runtime environment we wish to use.\n- In the **functions** key, we list out the functions our app provides. Functions are the building blocks of our service. They’re used as entry points to the service to perform a specific action. For our service, our functions correspond to the routes in our app, which means we’ll have just one function, the one which renders the home page. The function is described by:\n  - a **handler**, which is the JavaScript function exported from our `handler.js` that will be executed when this function is triggered.\n  - **events** which trigger the function. In this case, our desired event is a GET request to the root URL of our app.\n\nWe defined `handler.home` as the handler for the `home` function. This means we need to write a `home` function and export it from `handler.js`. Let’s do that now.\n\nFirst, we’ll install handlebars, which is what we’ll use as our template engine. We’ll also install the Pusher SDK. Create a `package.json` file in your project root with the following content:\n\n``` json\n    {\n      \"dependencies\": {\n        \"handlebars\": \"^4.0.11\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nThen run `npm install`.\n\nNext up, let’s create the home page view (a handlebars template). Create a file named `home.hbs` with the following content:\n\n``` html\n    \u003cbody\u003e\n    \u003ch2 align=\"center\" id=\"visitorCount\"\u003e{{ visitorCount }}\u003c/h2\u003e\n    \u003cp align=\"center\"\u003eperson(s) currently viewing this page\u003c/p\u003e\n    \u003c/body\u003e\n```\n\n\nLastly, the handler itself. Replace the code in `handler.js` with the following:\n\n``` javascript\n    'use strict';\n    \n    const hbs = require('handlebars');\n    const fs = require('fs');\n    \n    let visitorCount = 0;\n    \n    module.exports.home = (event, context, callback) =\u003e {\n        let template = fs.readFileSync(__dirname + '/home.hbs', 'utf8');\n        template = hbs.compile(template);\n    \n        const response = {\n            statusCode: 200,\n            headers: { 'Content-type': 'text/html' },\n            body: template({ visitorCount })\n        };\n    \n        callback(null, response);\n    };\n```\n\n\nIn this function, we grab the template file, pass its contents to handlebars and render the result as a web page in the caller’s browser.\n\n## Building the realtime component\n\nWe’ve got the serverless part figured out. Time to solve the realtime part. How do we:\n\n- get the number of people viewing the page?\n- update this number when someone opens the page or leaves it?\n\nHere’s how we’ll do this with Pusher:\n\n1. Our backend will record the current count of visitors and pass this to the view before rendering. We could store this count in a cache like Redis, but we’ll just store it in memory to keep this demo simple.\n2. Whenever the page is rendered on a browser, it subscribes to two public Pusher channels:\n  1. An existing channel (let’s call this `visitor-updates`). This is the channel where it will receive updates on the number of visitors.\n  2. A new channel with a randomly generated name.  The purpose of this channel is to trigger a Pusher event called `channel_occupied`, which will be sent via a webhook to our backend. Also, when the user leaves the page, the Pusher connection will be terminated, resulting in a `channel_vacated` notification.\n3. When the backend receives the `channel_occupied` or `channel_vacated` notifications, it re-calculates the visitor count and broadcasts the new value on the `visitor-updates` channel. Pages subscribed to this channel can then update their UI to reflect the new value.\n\nWe’ve already got the code for (1) in our `handler.js` (the `visitorCount` variable). Let’s update the `home.hbs` view to behave as we set out in (2):\n\n``` javascript\n    \u003cbody\u003e\n    \u003ch2 align=\"center\" id=\"visitorCount\"\u003e{{ visitorCount }}\u003c/h2\u003e\n    \u003cp align=\"center\"\u003eperson(s) currently viewing this page\u003c/p\u003e\n    \n    \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        var pusher = new Pusher(\"{{ appKey }}\", {\n            cluster: \"{{ appCluster }}\",\n        });\n        pusher.subscribe(\"{{ updatesChannel }}\")\n                .bind('pusher:subscription_succeeded', function () {\n                    pusher.subscribe(Date.now() + Math.random().toString(36).replace(/\\W+/g, ''));\n                })\n                .bind('update', function (data) {\n                    document.getElementById('visitorCount').textContent = data.newCount;\n                });\n    \u003c/script\u003e\n    \n    \u003c/body\u003e\n```\n\n\nA few notes on the code snippet above:\n\n-  `appKey`, `appCluster` and `updatesChannel` are variables that will be passed by our backend to the view when compiling with handlebars.\n- We first subscribe to our `updatesChannel` and wait for the Pusher event `subscription_succeeded` before creating the new, random channel. This is so an `update` event is triggered immediately (since a new channel is created)\n\nNow, to the backend. First, we’ll update our `home` handler to pass the variables mentioned above to the view. Then we’ll add a second handler, to serve as our webhook that will get notified by Pusher of the `channel_occupied` and `channel_vacated` events.\n\n``` javascript\n    'use strict';\n    \n    const hbs = require('handlebars');\n    const fs = require('fs');\n    const Pusher = require('pusher');\n    \n    let visitorCount = 0;\n    const updatesChannel = 'visitor-updates';\n    \n    module.exports.home = (event, context, callback) =\u003e {\n        let template = fs.readFileSync(__dirname + '/home.hbs', 'utf8');\n        template = hbs.compile(template);\n    \n        const response = {\n            statusCode: 200,\n            headers: {\n                'Content-type': 'text/html'\n            },\n            body: template({\n                visitorCount,\n                updatesChannel,\n                appKey: process.env.PUSHER_APP_KEY,\n                appCluster: process.env.PUSHER_APP_CLUSTER,\n            })\n        };\n    \n        callback(null, response);\n    };\n    \n    module.exports.webhook = (event, context, callback) =\u003e {\n        let body = JSON.parse(event.body);\n        body.events.forEach((event) =\u003e {\n            // ignore any events from our public channel -- it's only for broadcasting\n            if (event.channel === updatesChannel) {\n                return;\n            }\n            visitorCount += event.name === 'channel_occupied' ? 1 : -1;\n        });\n    \n        // notify all clients of new figure\n        const pusher = new Pusher({\n            appId: process.env.PUSHER_APP_ID,\n            key: process.env.PUSHER_APP_KEY,\n            secret: process.env.PUSHER_APP_SECRET,\n            cluster: process.env.PUSHER_APP_CLUSTER,\n        });\n        pusher.trigger(updatesChannel, 'update', {newCount: visitorCount});\n    \n        // let Pusher know everything went well\n        callback(null, { statusCode: 200 });\n    };\n``` \n\n\nLastly, we need to declare this new endpoint (our webhook) as a function in our `serverless.yml`. We’ll also add environment variables to hold our Pusher credentials:\n\n``` yaml\n    service: tvass\n    \n    provider:\n      name: aws\n      runtime: nodejs6.10\n      environment:\n        PUSHER_APP_ID: your-app-id\n        PUSHER_APP_KEY: your-app-key\n        PUSHER_APP_SECRET: your-app-secret\n        PUSHER_APP_CLUSTER: your-app-cluster\n    \n    functions:\n      home:\n        handler: handler.home\n        events:\n        - http:\n            path: /\n            method: get\n            cors: true\n      webhook:\n        handler: handler.webhook\n        events:\n        - http:\n            path: /webhook\n            method: post\n            cors: true      \n```\n\n\nNote the `environment` section we added under the `provider`. It’s used for specifying environment variables that all our functions will have access to. You’ll need to log in to your [Pusher dashboard](http://dashboard.pusher.com/) and create a new app if you haven’t already done so. Obtain your app credentials from your dashboard and replace the stubs above with the actual values.\n\n## Deploying\n\nFirst, you’ll need to configure the serverless CLI to use your AWS credentials. Serverless has published a guide on that (in [video](https://www.youtube.com/watch?v=HSd9uYj2LJA) and [text](https://serverless.com/framework/docs/providers/aws/guide/credentials/) formats).\n\nNow run `serverless deploy` to deploy your service.\n\nWe’ll need the URLs of our two routes. Look at the output after `serverless deploy` is done. Towards the bottom, you should see the two URLs listed, something like this:\n\n```\n     GET - https://xxxxxxxxx.execute-api.yyyyyyy.amazonaws.com/dev/\n     POST - https://xxxxxxxxx.execute-api.yyyyyyy.amazonaws.com/dev/webhook\n```\n   \n\nTake note of those two—we’ll need them in a bit.\n\nOne last thing: you’ll need to enable **Channel existence** webhooks for our Pusher app. On your Pusher app dashboard, click on the “Webhooks” tab and select the “channel existence” radio button. In the text box, paste the URL of the webhook you obtained above, and click “Add”. Good to go!\n\nNow visit the URL  of the home page (the GET route) in a browser. Open it in multiple tabs and you should see the number of visitors go up or down as you open and close tabs.\n\n**Note:** you might observe a small bug in our application: the visitors’ count always shows up as 0 when the page is loaded, before getting updated. This is because you can’t actually persist variables in memory across Lambda Functions, which is what we’re trying to do with our `visitorsCount` variable. We could fix it by using an external data store like Redis or AWS S3, but that would add unnecessary complexity to this demo.\n\n## Conclusion\n\nIn this article, we’ve built a simple demo showing how we can integrate realtime capabilities in a serverless app. We could go on to display the number of actual users by filtering by IP address. If our app involved signing in, we could use [presence channels](https://pusher.com/docs/client_api_guide/client_presence_channels) to know **who** exactly was viewing the page. I hope you’ve gotten an idea of the possibilities available with serverless and realtime. Have fun trying out new implementations.","metaTitle":"Build a serverless presence counter with Node.js","metaDescription":"A tutorial showing you how to generate serverless realtime presence counter in a web app, using Node.js, AWS Lambda and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1i86k0I4cASq4UyMSqcmoy","type":"Entry","createdAt":"2018-02-22T15:02:44.929Z","updatedAt":"2018-03-13T14:51:01.847Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build live comments using JavaScript","url":"live-comments-javascript","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"wQhwNciAKWOW8SI2MSKww","type":"Entry","createdAt":"2018-02-13T10:47:12.980Z","updatedAt":"2018-02-14T10:09:05.816Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Rahat Khanna","url":"rahat-khanna","email":"rahat.khanna@yahoo.co.in","twitter":"https://twitter.com/mappmechanic","github":"https://github.com/mappmechanic","guestWriter":true}}],"projectRepo":"https://github.com/mappmechanic/flash-comments","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}}],"reviewDate":"2018-03-03","description":"Create a realtime comment feature for web applications using with JavaScript on frontend and Node.js on the backend.","prerequisite":"A basic understanding of JavaScript, HTML and CSS are needed to follow this tutorial.","content":"These days Social has become the buzzword and we all want our apps to be the centre of these amazing social conversations. Comments on a post, video, update or any feature of your new app is a great way to add fun and enriching social conversations to your app.\n\nIf these conversations can be Realtime, then it's even better, so in this blog post we will be discussing how we can create a realtime comment feature for our web apps using Pusher with Vanilla JavaScript on frontend and Node.js on the backend.\n\nWe will call this realtime comment system Flash Comments, which can be re-used for multiple posts/features in your app and can generate amazing conversations in real time. Our app will look something like this:\n\n![live-comments-javascript-demo](//images.contentful.com/1es3ne0caaid/1BhCVpuXIQck82ageYuwOs/b0a26816d2ea05c7d65176412506aae3/live-comments-javascript-demo.gif)\n \n*Skip the next section, if you have already signed up with Pusher.*\n\n## Signing up with Pusher\n\nYou can create a free account in Pusher [here](http://pusher.com/signup). After you signup and login for the first time, you will be asked to create a new app as seen in the picture below. You will have to fill in some information about your project and also the frontend library or backend language you will be building your app with. You also have an option to select the cluster of Pusher based on your users location distribution, I have chosen `ap2 (Mumbai, India)` as I may be building an app for the India region.\n\n![live-comments-javascript-pusher-create-app](//images.contentful.com/1es3ne0caaid/5xzHX5l0k06GOA0mscaWQ6/15e51b2e8bc2054428c4e68eb7e85199/live-comments-javascript-pusher-create-app.png)\n\nFor this particular blog post, we will be selecting Vanilla JavaScript for the frontend and Node.js for the backend as seen in the picture above. This will just show you a set of starter sample codes for these selections, but you can use any integration kit later on with this app.\n\n![live-comments-javascript-pusher-getting-started](//images.contentful.com/1es3ne0caaid/7JfFi9Ql7qoUuqUwwYcAUW/686e20ab6d067da94c6db2eb1acab4ea/live-comments-javascript-pusher-getting-started.png)\n\n## Node.js App\n\n### Initialising Node Project\n\nYou can create a new folder named flash-comments and run the following command at the root of the folder:\n\n```\nnpm init\n```\n\nIt will ask you bunch of information regarding the app and it will create a new package.json file inside your folder.\n\nWe will be using the fairly simple and popular Express framework in Node. Now, we will install the important packages that will be used in our minimal Express app.\n\n```\nnpm install -g express body-parser path --save\n```\n\nAfter installing all required `npm` modules, now we will create an entry point file for our Node app as `server.js` inside the root folder. Add the following basic code for a basic HTTP Server to be run using port `9000`.\n\n```\nvar express = require('express');\nvar path = require('path');\nvar bodyParser = require('body-parser');\n\nvar app = express();\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(express.static(path.join(__dirname, 'public')));\n\n// Error Handler for 404 Pages\napp.use(function(req, res, next) {\n    var error404 = new Error('Route Not Found');\n    error404.status = 404;\n    next(error404);\n});\n\nmodule.exports = app;\n\napp.listen(9000, function(){\n  console.log('Example app listening on port 9000!')\n});\n```\n\nPusher has an open source NPM module for Node.js integrations which we will be using. It provides a set of utility methods to integrate with Pusher APIs using a unique `appId`, `key` and a `secret`. We will first install the pusher `npm` module using the following command:\n\n```\nnpm install pusher --save\n```\nNow, we can use require to get the Pusher module and to create a new instance passing an options object with important keys to initialise our integration. For this blog post, I have put random keys; you will have to obtain it for your app from the Pusher dashboard.\n\n```\nvar Pusher = require('pusher');\n\nvar pusher = new Pusher({\n  appId: '303964',\n  key: '82XXXXXXXXXXXXXXXXXb5',\n  secret: '7bXXXXXXXXXXXXXXXX9e',\n  cluster: 'ap2',\n  encrypted: true\n});\n\nvar app = express();\n...\n```\n\nYou will have to replace the `appId`, `key` and `secret` with values specific to your own app. After this, we will write code for a new API which will be used to create a new comment. This api will expose the route `/comment` with HTTP `POST` method and will expect an object for comment with the properties name, email and comment. Add the following code to your `server.js` file before the app.listen part.\n\n```\napp.post('/comment', function(req, res){\n  console.log(req.body);\n  var newComment = {\n    name: req.body.name,\n    email: req.body.email,\n    comment: req.body.comment\n  }\n  pusher.trigger('flash-comments', 'new_comment', newComment);\n  res.json({ created: true });\n});\n```\nIn the above code, we have extracted the data from `req.body` into a `newComment` object and then used it to call the trigger method on Pusher instance.\n\n## Important Pusher Concepts\n\n### Channel\n\nIn Pusher, we have a conceptual grouping called channel and it provides the basic way to filter data in Pusher. A channel can represent many entities in a real world application. For example: In our comments app, a channel can be comments for a specific article, video, blog post, photo, live streaming of an event etc.\n\nWe would create a new unique channel id for each of these entities to uniquely identify or group data like comments associated with any one of these. Two unique live streaming videos should also have separate channel so that we can show the respective live comments stream on their respective pages.\n\nSo we will create a new unique channel for each entity with their unique id, so for example a Youtube video comments channel can be named `comments-youtube-234`.\n\nThere are three types of channel\n\n- **Public Channel** - can be subscribed by anyone who knows the name of the channel.\n- **Private Channel** - channel which can be subscribed by authorised users only. If the channel name has a `private-` prefix, it will be regarded as a private channel.\n- **Presence Channel** - this is a special channel type similar to private as only authorised users can subscribe, where the subscribers list is also maintained and notified to other users also. Channel name should have a prefix `presence-`\n \nWe will use a public channel in our blog post which we are naming as flash-comments but you should ideally use a private channel for commenting systems with unique name for each entity you want to enable commenting feature.\n\n### Event\n\nNow, the real data in pusher is transmitted through events which is the primary way of packaging messages. An event can be triggered by a backend or even client in special cases for any particular channel. A channel is required to ensure that your message reaches the intended recipient.\n\nWe give a unique name to each event so that we can setup handlers for receiving and processing these event messages at each of our client end who has subscribed to any channel.\n\n### Pusher Trigger Method\n\nNow we will understand our server side code for sending an Event to the pusher channel flash-comments.\n\n```\n...\npusher.trigger('flash-comments', 'new_comment', newComment);\n...\n```\nWe are using the `.trigger(channel-name,event-name, payload)`** to send an Event from the server whenever the `POST API` is called for creating a new comment. For the simplicity of this blog post, we will not use any database to save and persist the comments but in a production system, you would be required to store a comment corresponding to a unique entity id like a Youtube Video ID or a Blog Post ID.\n\nNow, we can run our server using `node server` command. Our web service will be accessible on the URL `http://localhost:9000/comment`.We can write a POST request using any chrome extension like POSTMan or even CURL to test if it returns `{ \"created\":\"true\" }` .\n\nThe Curl command to test your POST api will be as follows:\n\n``` \ncurl -H \"Content-Type: appliaction/json\" -X POST -d '{\"name\":\"Rahat Khanna\",\"email\":\"rahat.khanna@yahoo.co.in\",\"comment\":\"Creating a sample comment\"}' http://localhost:9000/comment\n```\n\n## Frontend using Vanilla JavaScript\n\nNow, we will be writing the most crucial part, the frontend code using Vanilla JavaScript. In the frontend code we will be developing a Comments box section which would have following 2 features:\n\n- **Display** all the Live Comments added to the channel with a smooth animation\n- **Add** new comment to the live comments by hitting the POST Api we have just created\n \n### Step 1: Create a folder named public and create an index.html\n\nWe have already written code in our `server.js` to serve static content from `public` folder, so we will write all our frontend code in this folder.\n\nPlease create a new folder `public` and also create an empty `index.html` for now.\n\n### Step 2: Add boilerplate Code to our index.html\n\nWe will be adding some basic boilerplate code to setup the base structure for our web app like Header, Sections where content like video or blog post can be put and also the section which will contain our **Flash Comments** box.\n\n```\n\u003c!DOCTYPE\u003e\n\u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eMaking Social Comments Realtime \u0026 Fun with Pusher using Javascript like the Flash\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://unpkg.com/purecss@0.6.2/build/pure-min.css\" integrity=\"sha384-UQiGfs9ICog+LwheBSRCt1o5cbyKIHbwjWscjemyBMT9YCUMZffs6UqUTd0hObXD\" crossorigin=\"anonymous\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Raleway:200\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"./style.css\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cheader\u003e\n            \u003cdiv class=\"logo\"\u003e\n                \u003cimg src=\"./assets/pusher-logo.png\" /\u003e\n            \u003c/div\u003e\n        \u003c/header\u003e\n        \u003csection\u003e\n            \u003cimg class=\"flash-logo\" src=\"./assets/flash-logo.jpg\" /\u003e\n            \u003ch2\u003eFlash Comments - Super Fast\u003c/h2\u003e\n            \u003cdiv class=\"post\"\u003e\n      \u003c!-- Put here Content like Youtube Video, Blog Post or Live Stream --\u003e\n            \u003c/div\u003e\n        \u003c/section\u003e\n        \u003csection\u003e\n\n           \u003cdiv class=\"flash-comments\"\u003e\n                \u003cdiv class=\"header\"\u003e\n                    \u003cdiv\u003e\u003cimg src=\"./assets/comments.png\"\u003e\u003c/div\u003e\n                    \u003cdiv class=\"text\"\u003eComments\u003c/div\u003e\n                \u003c/div\u003e\n                \u003cform class=\"pure-form\" id=\"comment-form\"\u003e\n                    \u003c!-- Here we will put a form to create new comment --\u003e\n                \u003c/form\u003e\n                 \u003cdiv class=\"comments-list\" id=\"comments-list\"\u003e\n                    \u003c!-- Here we will display live comments --\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/section\u003e\n    \u003c/body\u003e\n\u003c/html\u003e\n```\n### Step 3: Create style.css file\n\nNow we will also create a `style.css` file to contain the important css code for styling our web app and the **flash comments** component. We will add basic styles to render our skeleton.\n\n```\nbody{\n    margin:0;\n    padding:0;\n    overflow: hidden;\n    font-family: Raleway;\n}\n\nheader{\n    background: #2b303b;\n    height: 50px;\n    width:100%;\n    display: flex;\n    color:#fff;\n}\n\n.flash-logo{\n    height:60px;\n    border-radius: 8px;\n    float: left;\n    margin-right: 15px;\n}\n\n\nsection{\n    padding: 15px;\n    width:calc(100% - 45px);\n}\n\n.logo img{\n    height: 35px;\n    padding: 6px;\n    margin-left: 20px;\n}\n\n\n.flash-comments{\n    border:1px solid #aeaeae;\n    border-radius: 10px;\n    width:50%;\n    overflow: hidden;\n}\n\n.post{\n    padding-top:10px;\n}\n\n.flash-comments .header{\n    display: flex;\n    padding: 5px 20px;\n    border-bottom: 1px solid #eaeaea;\n}\n\n.flash-comments .header .text{\n    padding-left:15px;\n    line-height: 25px;\n}\n\n.flash-comments .comment{\n    display: flex;\n    border-bottom:1px solid #eaeaea;\n    padding: 4px;\n}\n```\n### Step 4: Add the Pusher JS library and create app.js\n\nNow we will add the Pusher Vanilla JavaScript Library available on its CDN to use it to integrate with the Pusher system using plain JavaScript code. Please add the following script tag at the end of the body before its closing tag:\n\n```\n...\n\u003cscript type=\"text/javascript\" src=\"https://js.pusher.com/3.2/pusher.min.js\"\u003e\u003c/script\u003e\n\u003c/body\u003e\n...\n```\n\nAlso, create a new `app.js` file where we will be writing all our code and also import the same in our `index.html` file after the script tag to import Pusher JS file.\n\n``` \n\u003cscript type=\"text/javascript\" src=\"https://js.pusher.com/3.2/pusher.min.js\"\u003e\u003c/script\u003e\n\u003cscript type=\"text/javascript\" src=\"./app.js\"\u003e\u003c/script\u003e\n\u003c/body\u003e\n```\n\nIn our file `app.js` now, we will write code to initialise the Pusher instance using the unique client API key we have got from the Pusher dashboard. We will also pass an object specifying the cluster and setting the flag encrypted to true so that all messaging \u0026 communication is encrypted. We will also use the `pusher.subscribe('channel-name')` to listen to all events for a specific channel.\n\nWe will create a JavaScript IIFE (Immediately Invoking Functions) to create a private scope so that we do not pollute global scope. Please add the following code to `app.js` file:\n\n```\n// Using IIFE for Implementing Module Pattern to keep the Local Space for the JS Variables\n(function() {\n    // Enable pusher logging - don't include this in production\n    Pusher.logToConsole = true;\n\n    var serverUrl = \"/\",\n        comments = [],\n        pusher = new Pusher('82XXXXXXXXXXXXXX5', {\n          cluster: 'ap2',\n          encrypted: true\n        }),\n        // Subscribing to the 'flash-comments' Channel\n        channel = pusher.subscribe('flash-comments');\n\n})();\n```\n\n### Step 5: Creating Form for adding new comment\n\nNow, we will create the form controls for letting the user input their name, email and comment text for creating a new comment using our Node API and Pusher. We will add the following HTML code inside the existing form tag to create form.\n\n```\n\u003cform class=\"pure-form\" id=\"comment-form\"\u003e\n  \u003cdiv class=\"comment-form\"\u003e\n      \u003cdiv class=\"left-side\"\u003e\n           \u003cdiv class=\"row\"\u003e\n               \u003cinput type=\"text\" required placeholder=\"enter your name\" id=\"new_comment_name\"\u003e\n               \u003cinput placeholder=\"enter valid email\" required type=\"email\" id=\"new_comment_email\"\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"row\"\u003e\n                \u003ctextarea placeholder=\"enter comment text\" required id=\"new_comment_text\" rows=\"3\"\u003e\u003c/textarea\u003e\n            \u003c/div\u003e\n      \u003c/div\u003e\n     \u003cdiv class=\"right-side\"\u003e\n            \u003cbutton type=\"submit\" class=\"button-secondary pure-button\"\u003eSend Comment\u003c/button\u003e\n     \u003c/div\u003e\n \u003c/div\u003e\n\u003c/form\u003e\n```\n\nIn the form code above, we have used HTML5 validations like required \u0026 type=email which would not allow user to keep these fields blank or submit an invalid email. These validations will automatically work in most browsers which support HTML5 form validations.\n\nAlso, we will be adding the following css to style the form:\n\n```\n.flash-comments form{\n    margin-bottom: 0px;\n}\n\n.flash-comments .comment-form{\n    display: flex;\n    padding: 6px;\n    border-bottom:1px solid #eaeaea;\n}\n\n.comment-form .left-side{\n    flex: 5;\n    display: flex;\n    flex-direction: column;\n    padding-right: 5px;\n}\n\n.comment-form .left-side .row{\n    flex: 0 auto;\n    display: flex;\n    align-content: center;\n}\n\n.comment-form .left-side .row input{\n    height: 32px;\n    width: 50%;\n}\n\n.comment-form .left-side .row textarea{\n    height: 42px;\n    margin-top:8px;\n}\n\n.comment-form .right-side{\n    flex:1;\n    display: flex;\n    justify-content: center;\n}\n\n.comment-form .right-side button{\n    white-space: pre-wrap;\n}\n\n.comment-form textarea{\n    width:100%;\n}\n\n.button-secondary {\n    background: rgb(66, 184, 221); /* this is a light blue */\n    color: white;\n    border-radius: 4px;\n    text-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);\n}\n```\n\nAfter building the visual form, now we need to attach an event handler to the Submit event of the form. We will do that using the following code in the `app.js` file probably at the top after the var declarations:\n\n```\nvar commentForm = document.getElementById('comment-form');\n\n// Adding to Comment Form Submit Event\ncommentForm.addEventListener(\"submit\", addNewComment);\n```\n\nNow, we will write the code for implementation of the handler `addNewComment` with the following code:\n\n```\nfunction addNewComment(event){\n      event.preventDefault();\n      var newComment = {\n        \"name\": document.getElementById('new_comment_name').value,\n        \"email\": document.getElementById('new_comment_email').value,\n        \"comment\": document.getElementById('new_comment_text').value\n      }\n\n      var xhr = new XMLHttpRequest();\n      xhr.open(\"POST\", serverUrl+\"comment\", true);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState != 4 || xhr.status != 200) return;\n\n        // On Success of creating a new Comment\n        console.log(\"Success: \" + xhr.responseText);\n        commentForm.reset();\n      };\n      xhr.send(JSON.stringify(newComment));\n}\n```\n\nWe are using native XHR request to make an AJAX request to the Node API. You can use either jQuery Ajax or any framework-specific Ajax method in your app. Now if we run our application, then fill the form and submit it, then we will see a `Success: { created: true }`message in our browser developer tools console.\n\nAlso, we can see the Pusher Dashboard to see the stats about Event Messages sent for any channel:\n\n![live-comments-javascript-pusher-debug-console](//images.contentful.com/1es3ne0caaid/3KcihUCGjCMqAemywQ6WMO/fc45f25b84487e5430754e5e29b41b14/live-comments-javascript-pusher-debug-console.png)\n\n### Step 6: Display list of comments received for this channel\n\nNow, we will bind to the `new_comment` event on this channel `flash-comments` so that we can receive any message about new comment creation done from any client in realtime, and we can display all those comments.\n\nWe will first add a template for a new comment in our `index.html` file inside the div tag with `id=\"comments-list\"`.\n\n```\n\u003cdiv class=\"comments-list\" id=\"comments-list\"\u003e\n    \u003cscript id=\"comment-template\" type=\"text/x-template\"\u003e\n        \u003cdiv class=\"user-icon\"\u003e\n            \u003cimg src=\"./assets/user.png\" /\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"comment-info\"\u003e\n            \u003cdiv class=\"row\"\u003e\n                  \u003cdiv class=\"name\"\u003e{{name}}\u003c/div\u003e\n                  \u003cdiv class=\"email\"\u003e{{email}}\u003c/div\u003e\n             \u003c/div\u003e\n             \u003cdiv class=\"row\"\u003e\n                   \u003cdiv class=\"text\"\u003e{{comment}}\u003c/div\u003e\n             \u003c/div\u003e\n         \u003c/div\u003e\n     \u003c/script\u003e\n\u003c/div\u003e\n```\n\nNow, we will write the JavaScript code to bind to the new_comment event on the pusher channel instance we have subscribed. Whenever the `new_comment` event will be fired, we will take the template innerHTML content and replace the placeholders `{{name}}, {{email}} \u0026 {{comment}}`with the data passed along with the event and append them to the `comments-list` div element.\n\n```\nvar commentsList = document.getElementById('comments-list'),\n    commentTemplate = document.getElementById('comment-template');\n\n// Binding to Pusher Event on our 'flash-comments' Channel\nchannel.bind('new_comment',newCommentReceived);\n\n// New Comment Received Event Handler\n    // We will take the Comment Template, replace placeholders \u0026 append to commentsList\n    function newCommentReceived(data){\n      var newCommentHtml = commentTemplate.innerHTML.replace('{{name}}',data.name);\n      newCommentHtml = newCommentHtml.replace('{{email}}',data.email);\n      newCommentHtml = newCommentHtml.replace('{{comment}}',data.comment);\n      var newCommentNode = document.createElement('div');\n      newCommentNode.classList.add('comment');\n      newCommentNode.innerHTML = newCommentHtml;\n      commentsList.appendChild(newCommentNode);\n    }\n\n```\n\nUsing the above code, a new div tag representing the new comment will automatically be created and appended to the `comments-list` container. We will now add the following css to nicely display the list of comments and also animate whenever a new comment appears on the list.\n\n```\n.flash-comments .user-icon{\n    flex: 0 80px;\n    display: flex;\n    justify-content: center;\n}\n\n.flash-comments .user-icon img{\n    height:45px;\n}\n\n.flash-comments .comment-info{\n    flex:5;\n}\n\n.flash-comments .comment-info .row{\n    display: flex;\n}\n\n.flash-comments .comment-info .name{\n    color: #000;\n}\n\n.flash-comments .comment-info .email{\n    color: #aeaeae;\n    margin-left: 10px;\n}\n\n.flash-comments .comment-info .text{\n    padding-top:6px;\n    font-size: 13px;\n}\n\n/* CSS Code for Animating Comment Element */\n.flash-comments .comment{\n  animation: animationFrames ease 1s;\n  animation-iteration-count: 1;\n  transform-origin: 50% 50%;\n  animation-fill-mode:forwards; /*when the spec is finished*/\n  -webkit-animation: animationFrames ease 1s;\n  -webkit-animation-iteration-count: 1;\n  -webkit-transform-origin: 50% 50%;\n  -webkit-animation-fill-mode:forwards; /*Chrome 16+, Safari 4+*/ \n  -moz-animation: animationFrames ease 1s;\n  -moz-animation-iteration-count: 1;\n  -moz-transform-origin: 50% 50%;\n  -moz-animation-fill-mode:forwards; /*FF 5+*/\n  -o-animation: animationFrames ease 1s;\n  -o-animation-iteration-count: 1;\n  -o-transform-origin: 50% 50%;\n  -o-animation-fill-mode:forwards; /*Not implemented yet*/\n  -ms-animation: animationFrames ease 1s;\n  -ms-animation-iteration-count: 1;\n  -ms-transform-origin: 50% 50%;\n  -ms-animation-fill-mode:forwards; /*IE 10+*/\n}\n\n@keyframes animationFrames{\n  0% {\n    opacity:0;\n    transform:  translate(-1500px,0px)  ;\n  }\n  60% {\n    opacity:1;\n    transform:  translate(30px,0px)  ;\n  }\n  80% {\n    transform:  translate(-10px,0px)  ;\n  }\n  100% {\n    opacity:1;\n    transform:  translate(0px,0px)  ;\n  }\n}\n\n@-moz-keyframes animationFrames{\n  0% {\n    opacity:0;\n    -moz-transform:  translate(-1500px,0px)  ;\n  }\n  60% {\n    opacity:1;\n    -moz-transform:  translate(30px,0px)  ;\n  }\n  80% {\n    -moz-transform:  translate(-10px,0px)  ;\n  }\n  100% {\n    opacity:1;\n    -moz-transform:  translate(0px,0px)  ;\n  }\n}\n\n@-webkit-keyframes animationFrames {\n  0% {\n    opacity:0;\n    -webkit-transform:  translate(-1500px,0px)  ;\n  }\n  60% {\n    opacity:1;\n    -webkit-transform:  translate(30px,0px)  ;\n  }\n  80% {\n    -webkit-transform:  translate(-10px,0px)  ;\n  }\n  100% {\n    opacity:1;\n    -webkit-transform:  translate(0px,0px)  ;\n  }\n}\n\n@-o-keyframes animationFrames {\n  0% {\n    opacity:0;\n    -o-transform:  translate(-1500px,0px)  ;\n  }\n  60% {\n    opacity:1;\n    -o-transform:  translate(30px,0px)  ;\n  }\n  80% {\n    -o-transform:  translate(-10px,0px)  ;\n  }\n  100% {\n    opacity:1;\n    -o-transform:  translate(0px,0px)  ;\n  }\n}\n\n@-ms-keyframes animationFrames {\n  0% {\n    opacity:0;\n    -ms-transform:  translate(-1500px,0px)  ;\n  }\n  60% {\n    opacity:1;\n    -ms-transform:  translate(30px,0px)  ;\n  }\n  80% {\n    -ms-transform:  translate(-10px,0px)  ;\n  }\n  100% {\n    opacity:1;\n    -ms-transform:  translate(0px,0px)  ;\n  }\n}\n```\n\nNow, you can run the app we have built, either in 2 different browsers or one in normal browser and the other in incognito window, and add multiple comments. We can see that the live comments will be added in realtime with a smooth animation.\n\n![live-comments-javascript-demo](//images.contentful.com/1es3ne0caaid/1BhCVpuXIQck82ageYuwOs/b0a26816d2ea05c7d65176412506aae3/live-comments-javascript-demo.gif)\n\nThe complete code for this tutorial is available on [Github](https://github.com/mappmechanic/flash-comments).\n\n## Conclusion\n\nWe have built a nice web app with live comments using Pusher, Node.js and Vanilla JavaScript. We can use this component with any of our applications and enable live comments for variety of social entities like Videos, Blog Post, Polls, Articles and live streams.\n\nWe have used the Node.js server to create a REST API to get a new comment and then trigger a Pusher event on a specific channel. For any real world application, we can take a unique id for each entity and use a unique channel name for any entity. In a production scenario we can also store the comments in a persistent storage and then later retrieve them.\n\nWe have also created a frontend app, which will connect to the Pusher API using Pusher JS library. We have created a form to hit the Node API which will trigger new_comment event. Comments are displayed in realtime with an animation using the bind method on the channel instance.","metaTitle":"Build live comments using JavaScript","metaDescription":"Create a realtime comment feature for web applications using with JavaScript on frontend and Node.js on the backend."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2uXH4790aAKiQUMswwWcmm","type":"Entry","createdAt":"2018-02-28T12:22:30.031Z","updatedAt":"2018-02-28T16:26:48.079Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Making Angular 5 realtime with WebSockets","url":"angular-realtime","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/angular5-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WBKKiARVKggKEsq8gSuOS","type":"Entry","createdAt":"2018-02-12T15:10:05.476Z","updatedAt":"2018-02-26T12:31:10.466Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Counter","url":"live-counter","type":"use case"}}],"reviewDate":"2018-02-23","description":"Build an app with realtime features in Angular 5 and Pusher.","prerequisite":"A basic understanding of Angular 5 and Node.js is needed to follow this tutorial.","content":"The demand for realtime functionality in applications these days has grown tremendously. People want to see how users interact with their applications in realtime. Here comes Pusher, allowing you to add realtime functionality to your application by using concepts such as events and channels. In this article, we are going to look at how to add realtime functionality to your Angular 5 application. \n\n\n## Introduction\n\nWe are going to make an application that gives realtime feedback when a picture is liked. In other words, you get to see in realtime when users like a picture - interesting, right? To do this, we will be using [Angular](https://angular.io) 5 and [Pusher](https://pusher.com) API. \n\n![angular-realtime-likes](//images.contentful.com/1es3ne0caaid/6DOzL2ede8i4E6KMYUA8sy/3b027d45e96b87e142bcb45b3b973c0a/angular-realtime-likes.png)\n\n## Getting started\n\nTo get started, you need to make sure your have [Node](https://nodejs.org) and [NPM](https://npmjs.com) installed on your machine. You can confirm you installation by running:\n\n```\n    npm --version\n    node --version\n```\n\nIf you get version numbers as results then you have them installed. Node 6+ and NPM 4+ should be your target.\n\n## Building the Angular 5 application\n\nNow we are not going to dwell too much on the intricacies of building an Angular application, rather, we will be more concerned about adding realtime functionality to the application itself.\n\nTo create your Angular application, you need to ensure that you have Angular 5 installed on your machine. You can confirm your installation by running:\n\n```\n    ng --version\n```\n\nIf you don’t have Angular installed or your version is less than 1.2, run this command in your terminal:\n\n```\n    npm install -g @angular/cli\n```\n\nFor more information about Angular basics, head [here](https://angular.io).\n\nWe can now create our application by running: \n\n```\n    ng new angular5-pusher\n```\n\nAfter running this, we get a basic Angular starter project which we are going to build upon.\n\n\n## App component \n\nNow the view of the application is pretty simple. We have an image, a button to like the image and the count of images that have been liked. The `app.component.html` file looks like this:\n\n```\n    \u003cdiv class=\"main-app\"\u003e\n      \u003ch1\u003e\n        {{ title }}!\n      \u003c/h1\u003e\n      \u003cimg width=\"300\" alt=\"Pusher Logo\" src=\"../assets/pusher.svg\" /\u003e\n      \u003cdiv class=\"like\"\u003e\n        \u003cdiv style=\"margin-right: 1rem\"\u003e\n          \u003ch2\u003e{{ likes }} likes\u003c/h2\u003e\n        \u003c/div\u003e\n        \u003cbutton class=\"btn btn-lg btn-success\" (click)=\"liked()\"\u003eLike Image\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nWe can see from the above that the `buttonClick` event has been tied to a function called `liked()` which we will take a look at now.\n\nIn our `app.component.ts` file, we have the following: \n\n```\n    import { Component, OnInit } from '@angular/core';\n    //..\n    \n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    \n    export class AppComponent implements OnInit {\n      title = 'Pusher Liker';\n      likes: any =  10;\n      \n      constructor() {\n        // the pusher service will be injected as part of the constructor later\n      }\n      ngOnInit() {\n        // ..\n      }\n      // add to the number of likes to the server\n      liked() {\n        this.likes = parseInt(this.likes, 10) + 1;\n        // ..\n      }\n    }\n```\n\nNow we can see when we examine the component that we specify the `title` and the number of `likes` for starters. \n\n**NB:** In a real world application, you will want to make a request to your backend server to get the actual number of likes instead of  using static data.\n\nWe can also see that we plan on injecting a `pusherService` in the constructor of our app component. We are going to explain more about this in the next section.\n\n## Adding Pusher to your application\n\nAt this point, we have our application that allows us to like pictures, but other users don’t get realtime feedback as to the number of likes the picture actually has. In comes [Pusher](https://pusher.com) to save the day. Pusher allows you to add realtime functionality to your application without you having to stress so much about the logic of making this work.\n\nAll you need to do is to  `subscribe` to a channel and then `listen` for `events` - in simpler terms it’s like turning on a TV to a football match (channel ) and then waiting for a team to score a goal ( event ).\n\nNow lets see how to add this to our existing Pusher Liker Application .To use Pusher with Angular, we first need to install and load Pusher’s client library:\n\n```\n    npm install --save pusher-js\n```\n\nNow that we have successfully installed the library, the next thing we need to do is to add it as one of the third party scripts that will be loaded by Angular when our page is being loaded.\n\nIn the `.angular-cli.json` we include the following:\n\n\n    //...\n    \n    \"scripts\": [\"../node_modules/pusher-js/dist/web/pusher.min.js\"]\n    \n    //...\n\nNow lets get to using the pusher client.\n\nEarlier on, we spoke about the `PusherService` and now we are going to see how it works. In angular, there is a concept called `services` - which, as the name suggests,  helps you to do one thing really well. \n\nWe create our `PusherService` by running the command:\n\n```\n    ng generate service Pusher\n```\n\nThis creates the `pusher.service.ts`  and `pusher.service.spec.``ts` files. We are only going to be concerned with the `pusher.service.ts`\n\nAt he top of the `pusher.service.``ts` file we declare our Pusher constant so that Angular knows that we know what we are doing, and we are going to use the `Pusher` class from an external script which we loaded earlier:\n\n```\n    // pusher.service.ts \n    declare const Pusher: any;\n    // ...\n```\n\n \n Then, we import the necessary classes we are going to need:\n \n```\n    // .... pusher.service.ts\n    import { Injectable } from '@angular/core';\n    import { environment } from '../environments/environment';\n    import { HttpClient } from '@angular/common/http';\n    // .....\n```\n \nIf you used older versions of Angular, the new `HttpClient` may seem strange to you because it was just introduced with this new version to make life easier for Angular developers. With this new `HttpClient`, responses are defaulted to `JSON` and interceptors are now being used for easier error handling. You can read more about it [here](https://angular.io/api/common/http/HttpClient).\n\nWe also included the `environment` class, which contains some enviroment variables for pusher to work. The `enviroment.ts` file looks like this:\n\n```\n    // ... environment.ts \n    export const environment = {\n      production: false,\n      pusher: {\n        key: 'PUSHER_API_KEY',\n        cluster: 'PUSHER_CLUSTER',\n      }\n    };\n```\n\nThese details can be obtained from your Pusher app [dashboard](https://dashboard.pusher.com/).\n\nTo create a new app:\n1. Click “Create New App” from the left sidebar.\n2. Configure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n  \n![angular-realtime-create-app](//images.contentful.com/1es3ne0caaid/4xyhbHkzOEWwYACWQMUsy8/77b6407f347fd38dd348ec6e9478c4b1/angular-realtime-create-app.png)\n \n Now, back to our `pusher.service.``ts` file:\n \n```\n    //...pusher.service.ts\n    @Injectable()\n    export class PusherService {\n      pusher: any;\n      channel: any;\n      constructor(private http: HttpClient) {\n        this.pusher = new Pusher(environment.pusher.key, {\n          cluster: environment.pusher.cluster,\n          encrypted: true\n        });\n        this.channel = this.pusher.subscribe('events-channel');\n      }\n      \n      like( num_likes ) {\n        his.http.post('http://localhost:3120/update', {'likes': num_likes})\n        .subscribe(data =\u003e {});\n      }\n    }\n```\n \nIn the constructor for the `PusherService` , we included the `HttpClient` and  then `subscribed` to the `events-channel` . We also have another function that makes a `POST` request to our backend server with the number of likes as part of the `body`  of the request when the `like` button is clicked. \n\n\u003e NB : The implementation details of our  backend server will be built later in the article\n\nNow we will go back to our `app.component.``ts` file to see how we factor in the new Pusher service:\n\n```\n    //-- app.component.ts\n    import { Component, OnInit } from '@angular/core';\n    import { PusherService } from './pusher.service';\n    \n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    export class AppComponent implements OnInit {\n      title = 'Pusher Liker';\n      likes: any =  10;\n      constructor(private pusherService: PusherService) {\n      }\n      ngOnInit() {\n        this.pusherService.channel.bind('new-like', data =\u003e {\n          this.likes = data.likes ;\n        });\n      }\n      // add to the number of likes to the server\n      liked() {\n        this.likes = parseInt(this.likes, 10) + 1;\n        this.pusherService.like( this.likes );\n      }\n    }\n```\n\nIn the above, we import the `pusherService` and then add it to our constructor. Now, when the component is created, we then bind the `pusherService` to the `new-like` event and we update the number of likes with the new number of likes that we get.\n\nNow you may be wondering, “it’s cool that we can now tell when the number of likes have increased and the update them, but what when someone actually clicks the button, what triggers the event?”\n\nAs we can see in the `liked()` function above, the `pusherService.like()` is also called to help make the request to the backend server to actually trigger the like event. \n\nNow that our front-end is ready, we can run the application by running:\n\n```\n    npm start\n```\n\n![angular-realtime-demo](//images.contentful.com/1es3ne0caaid/zuNaz7pMFaK8oeuey4As8/ef9d1369c3af410d0afc5d88a2e0be5f/angular-realtime-demo.gif)\n\n## Building the backend Server\n\nNow, we’ll take a quick look at the backend server that triggers the event and how it works. In the project directory we create a folder called `server` and in there is where we do all the work:\n\n```\n    mkdir server\n```\n\nIn the `server` directory, we run:\n\n```\n    npm init\n```\n\nAnd then we install the necessary modules we are going to need:\n\n```\n    npm install --save cors pusher express body-parser dotenv\n```\n\nOnce that’s done, we can now create our `server.js` in the same directory \n\nIn our `server.js` file, we do the following: \n\n### Import Node modules\n\n```\n    // -------------------------------\n    // Import Node Modules\n    // -------------------------------\n    require(\"dotenv\").config();\n    const cors = require(\"cors\");\n    const Pusher = require(\"pusher\");\n    const express = require(\"express\");\n    const bodyParser = require(\"body-parser\");\n```\n\n### Create app and load Middlewares\n\n```\n    // ------------------------------\n    // Create express app\n    // ------------------------------\n    const app = express();\n    // ------------------------------\n    // Load the middlewares\n    // ------------------------------\n    app.use(cors());\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n```\n\n### Create Pusher client\n\n```\n    // ....\n    const pusher = new Pusher({\n        appId: `${process.env.PUSHER_APP_ID}`,\n        key: `${process.env.PUSHER_API_KEY}`,\n        secret: `${process.env.PUSHER_API_SECRET}`,\n        cluster: `${process.env.PUSHER_APP_CLUSTER}`,\n        encrypted: true\n    });\n```\n\nNow add a `.env` file at the root of the `server`  folder with the following lines:\n\n```\n    PUSHER_APP_ID=[PUSHER_APP_ID]\n    PUSHER_API_KEY=[PUSHER_API_KEY]\n    PUSHER_API_SECRET=[PUSHER_API_SECRET]\n    PUSHER_APP_CLUSTER=[PUSHER_APP_CLUSTER]\n```\n\nThese details for the Pusher client can be obtained from your [Pusher dashboard](https://dashboard.pusher.com/).\n\n### Create application routes\n\n```\n    // -------------------------------\n    // Create app routes\n    // -------------------------------\n    app.post(\"/update\", function(req, res) {\n        // -------------------------------\n        // Trigger pusher event\n        // ------------------------------\n        pusher.trigger(\"events-channel\", \"new-like\", {\n          likes : `${req.body.likes}`\n        });\n    });\n```\nThis application only has one route that triggers the `new-like` event to the `events-channel` which our Angular frontend listens for and then updates accordingly.\n\n### Assign application\n\n```\n    app.listen(\"3120\");\n    console.log(\"Listening on localhost:3120\");\n```\n\nNow, the backend server will be run at `localhost:3120`.\n\n## Conclusion\n\nIn this article we have seen how to add realtime functionality to an Angular 5 application. The use cases for this are endless. You can give users realtime feedback as they interact with your applications — Twitter has a feature similar to this where you can actually see the number of likes, replies and retweets in realtime. \n\nThe ball is in your court now to implement that realtime feature you know your users will love to have.","metaTitle":"Making Angular 5 realtime with WebSockets","metaDescription":"Build an application that gives realtime feedback when a picture is liked with Angular 5 and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4ThkR9pRjG4c4UkESCooWy","type":"Entry","createdAt":"2018-02-28T12:41:54.176Z","updatedAt":"2018-06-07T09:00:00.429Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Send push notifications to a food delivery Swift app","url":"food-delivery-notifications-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/food-delivery-ios-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-02-23","description":"Push notifications are an essential feature for any food delivery app. Today we will focus on sending relevant push notifications to an iOS food delivery app.","prerequisite":"A basic understanding of Swift and Node.js is needed to follow this tutorial.","content":"Last mile delivery marketplaces make it easy to order delivery food from a mobile device and have it delivered to a user’s door while it’s still hot.\n\nMarketplaces like Deliveroo, Postmates, or Uber Eats use your device’s location to serve you a list of restaurants that are close enough and open so you can get your delivery as soon as possible.\n\nThis realtime experience between the customer, restaurant, and driver relies on transactional push notifications to move the order from the kitchen to the table seamlessly. Customers want push notifications to alert them when their order is on its way and when they need to meet the driver at the door. \n\nSetting up push notifications can be confusing and time consuming. However, with Pusher’s [Beams API](https://pusher.com/push-notifications), the process is a lot easier and faster. \n\nIn this article, we will be considering how you can build apps on iOS that have transactional push notifications. For this, we will be building a make-belief food delivery app.\n\n## Prerequisites\n- A Mac with Xcode installed. [Download Xcode here](https://developer.apple.com/xcode/).\n- Knowledge of using Xcode.\n- Knowledge of [Swift](https://developer.apple.com/swift/).\n- A Pusher account. [Create one here](https://dash.pusher.com/authenticate/register?ref=pn-food-delivery-ios).\n- Basic knowledge of JavaScript/Node.js ([Check out this tutorial](https://www.w3schools.com/nodejs/default.asp)).\n- Cocoapods [installed on your machine](https://guides.cocoapods.org/using/getting-started.html).\n\nOnce you have the requirements, let’s start.\n\n## Building our application – Planning\n\nBefore we start building our application, we need to do some planning on how we want the application to work. \n\nWe will be making three applications:\n- The backend application (Web using Node.js).\n- The client application (iOS using Swift).\n- The admin application (iOS using Swift).\n\n### The backend application\nThis will be the API. For simplicity, we will not add any sort of authentication to the API. We will be calling the API from our iOS applications. The API should be able to provide the food inventory, the orders, and also manage the orders. We will also be sending push notifications from the backend application.\n\n### The client application\nThis will be the application that will be with the customer. This is where the user will be able to order food from. For simplicity, we will not have any sort of authentication and everything will be straight to the point. A customer should be able to see the inventory and order one or more from the inventory. They should also be able to see the list of their orders and the status of each order.\n\n![food-delivery-notifications-swift-demo-client](//images.contentful.com/1es3ne0caaid/3diVDmxsV2KQqKSaoi84sa/5fb7c73c248015e2e3fd2c788a3c7811/food-delivery-notifications-swift-demo-client.gif)\n\n### The admin application\nThis will be the application that the company providing the service will use to fulfil orders. The application will display the available orders and the admin will be able to set the status for each order.\n\n![food-delivery-notifications-swift-demo-admin](//images.contentful.com/1es3ne0caaid/7nVr0Y2RlSwyIemmC6A4kY/b0374c809869f779116e31342c275637/food-delivery-notifications-swift-demo-admin.gif)\n\n## Building the backend application (API)\n\nThe first thing we want to build is the API. We will be adding everything required to support our iOS applications and then add push notifications later on.\n\nTo get started, create a project directory for the API. In the directory, create a new file called `package.json` and in the file paste the following:\n\n```\n    {\n      \"main\": \"index.js\",\n      \"scripts\": {},\n      \"dependencies\": {\n        \"body-parser\": \"^1.18.2\",\n        \"express\": \"^4.16.2\"\n      }\n    }\n```\n\nNext run the command below in your terminal: \n\n```\n    $ npm install\n```\n\nThis will install all the listed dependencies. Next, create an `index.js` file in the same directory as the `package.json` file and paste in the following code:\n\n```\n    // --------------------------------------------------------\n    // Pull in the libraries\n    // --------------------------------------------------------\n    \n    const app = require('express')()\n    const bodyParser = require('body-parser')\n    \n    // --------------------------------------------------------\n    // Helpers\n    // --------------------------------------------------------\n    \n    function uuidv4() {\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r \u0026 0x3 | 0x8);\n        return v.toString(16);\n      });\n    }\n    \n    \n    // --------------------------------------------------------\n    // In-memory database\n    // --------------------------------------------------------\n    \n    var user_id = null\n    \n    var orders = []\n    \n    let inventory = [\n        {\n            id: uuidv4(),\n            name: \"Pizza Margherita\",\n            description: \"Features tomatoes, sliced mozzarella, basil, and extra virgin olive oil.\",\n            amount: 39.99,\n            image: 'pizza1'\n        },\n        {\n            id: uuidv4(),\n            name: \"Bacon cheese fry\",\n            description: \"Features tomatoes, bacon, cheese, basil and oil\",\n            amount: 29.99,\n            image: 'pizza2'\n        }\n    ]\n    \n    \n    // --------------------------------------------------------\n    // Express Middlewares\n    // --------------------------------------------------------\n    \n    app.use(bodyParser.json())\n    app.use(bodyParser.urlencoded({extended: false}))\n    \n    \n    // --------------------------------------------------------\n    // Routes\n    // --------------------------------------------------------\n    \n    app.get('/orders', (req, res) =\u003e res.json(orders))\n    \n    app.post('/orders', (req, res) =\u003e {\n        let id = uuidv4()\n        user_id = req.body.user_id\n        let pizza = inventory.find(item =\u003e item[\"id\"] === req.body.pizza_id)\n    \n        if (!pizza) {\n            return res.json({status: false})\n        }\n    \n        orders.unshift({id, user_id, pizza, status: \"Pending\"})\n        res.json({status: true})\n    })\n    \n    app.put('/orders/:id', (req, res) =\u003e {\n        let order = orders.find(order =\u003e order[\"id\"] === req.params.id)\n    \n        if ( ! order) {\n            return res.json({status: false})\n        }\n    \n        orders[orders.indexOf(order)][\"status\"] = req.body.status\n    \n        return res.json({status: true})\n    })\n    \n    app.get('/inventory', (req, res) =\u003e res.json(inventory))\n    app.get('/', (req, res) =\u003e res.json({status: \"success\"}))\n    \n    \n    // --------------------------------------------------------\n    // Serve application\n    // --------------------------------------------------------\n    \n    app.listen(4000, _ =\u003e console.log('App listening on port 4000!'))\n```\n\nThe above code is a simple Express application. Everything is self-explanatory and has comments to guide you.\n\nIn the first route, `/orders`, we display the list of orders available from the in-memory data store. In the second route, the `POST /orders` we just add a new order to the list of `orders`. In the third route, `PUT /orders/:id` we just modify the status of a single order from the list of `orders`. In the fourth route, `GET /inventory` we list the inventory available from the list of `inventory` in the database.\n\nWe are done with the API for now and we will revisit it when we need to add the push notification code. If you want to test that the API is working, then run the following command on your terminal:\n\n```\n    $ node index.js\n```\n\nThis will start a new Node server listening on port **4000**.\n\n## Building the client application\n\nThe next thing we need to do is build the client application in Xcode. To start, launch Xcode and create a new ‘Single Application’ project. We will name our project **PizzaareaClient.**\n\nOnce the project has been created, exit Xcode and create a new file called `Podfile` in the root of the Xcode project you just created. In the file paste in the following code:\n\n```\n    platform :ios, '11.0'\n    \n    target 'PizzareaClient' do\n      use_frameworks!\n      pod 'PusherSwift', '~\u003e 5.1.1'\n      pod 'Alamofire', '~\u003e 4.6.0'\n    end\n```\n\nIn the file above, we specified the dependencies the project needs to run. **Remember to change the** `target` **above to the name of your project.** Now in your terminal, run the following command to install the dependencies:\n\n```\n    $ pod install\n```\n\nAfter the installation is complete, open the Xcode workspace file that was generated by Cocoapods. This should relaunch Xcode. \n\nWhen Xcode has been relaunched, open the `Main.storyboard` file and in there we will create the storyboard for our client application. Below is a screenshot of how we have designed our storyboard:\n\n![food-delivery-notifications-swift-storyboard](//images.contentful.com/1es3ne0caaid/5PwFNFslcAioiWMYQgyUCe/55d510f557f21ee1babfa6896b3e3db2/food-delivery-notifications-swift-storyboard.png)\n\nThe first scene is the navigation view controller which has a table view controller as the root controller. The navigation controller is the initial controller that is loaded when the application is launched.\n\n### Creating the pizza list scene\nThe second scene is the view controller that lists the inventory that we have available. \n\n![food-delivery-notifications-swift-root-view-controller](//images.contentful.com/1es3ne0caaid/2I1uUClu1qgQg8o4eKwYU2/880c43c08c7b45a5d51e0152c131af55/food-delivery-notifications-swift-root-view-controller.png)\n\nCreate a new file in Xcode called `PizzaTableListViewController.swift`, make it the custom class for the second scene and paste in the following code:\n\n```\n    import UIKit\n    import Alamofire\n    \n    class PizzaListTableViewController: UITableViewController {\n    \n        var pizzas: [Pizza] = []\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            navigationItem.title = \"Select Pizza\"\n            \n            fetchInventory { pizzas in\n                guard pizzas != nil else { return }            \n                self.pizzas = pizzas!\n                self.tableView.reloadData()\n            }\n        }\n    \n        private func fetchInventory(completion: @escaping ([Pizza]?) -\u003e Void) {\n            Alamofire.request(\"http://127.0.0.1:4000/inventory\", method: .get)\n                .validate()\n                .responseJSON { response in\n                    guard response.result.isSuccess else { return completion(nil) }\n                    guard let rawInventory = response.result.value as? [[String: Any]?] else { return completion(nil) }\n                    \n                    let inventory = rawInventory.flatMap { pizzaDict -\u003e Pizza? in\n                        var data = pizzaDict!\n                        data[\"image\"] = UIImage(named: pizzaDict![\"image\"] as! String)\n    \n                        return Pizza(data: data)\n                    }\n                    \n                    completion(inventory)\n                }\n        }\n        \n        @IBAction func ordersButtonPressed(_ sender: Any) {\n            performSegue(withIdentifier: \"orders\", sender: nil)\n        }\n        \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return pizzas.count\n        }\n    \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"Pizza\", for: indexPath) as! PizzaTableViewCell\n            \n            cell.name.text = pizzas[indexPath.row].name\n            cell.imageView?.image = pizzas[indexPath.row].image\n            cell.amount.text = \"$\\(pizzas[indexPath.row].amount)\"\n            cell.miscellaneousText.text = pizzas[indexPath.row].description\n    \n            return cell\n        }\n        \n        override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -\u003e CGFloat {\n            return 100.0\n        }\n        \n        override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n            performSegue(withIdentifier: \"pizza\", sender: self.pizzas[indexPath.row] as Pizza)\n        }\n            \n        override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n            if segue.identifier == \"pizza\" {\n                guard let vc = segue.destination as? PizzaViewController else { return }\n                vc.pizza = sender as? Pizza\n            }\n        }    \n    }\n```\n\nIn the `viewDidLoad` method, we call the `fetchInventory` method that uses `Alamofire` to fetch the inventory from our backend API then we save the response to the `orders` property of the controller.\n\nThe `ordersButtonPressed` is linked to the `Orders` button on the scene and this just presents the scene with the list of orders using a named segue `orders`. \n\nThe `tableView*` methods implement methods available to the `UITableViewDelegate` protocol and should be familiar to you.\n\nThe final method `prepare` simply sends the `pizza` to the view controller on navigation. This `pizza` is only sent over if the view controller being loaded is the `PizzaViewController` though.\n\nBefore we create the third scene, create a `PizzaTableViewCell.swift` class and paste in the following:\n\n```\n    import UIKit\n    \n    class PizzaTableViewCell: UITableViewCell {\n    \n        @IBOutlet weak var pizzaImageView: UIImageView!\n        @IBOutlet weak var name: UILabel!\n        @IBOutlet weak var miscellaneousText: UILabel!\n        @IBOutlet weak var amount: UILabel!\n    \n        override func awakeFromNib() {\n            super.awakeFromNib()\n        }\n    }\n```\n\n\u003e ⚠️  Make sure the custom class of the cells in the second scene is `PizzaTableViewCell` and that the reusable identifier is `Pizza`.\n\n### Creating the pizza view scene\nThe third scene in our storyboard is the Pizza view scene. This is where the selected inventory can be viewed.\n\n![food-delivery-notifications-swift-place-order](//images.contentful.com/1es3ne0caaid/5iHORfIGGcswQ6kEWQ8YoO/0196ca22a3278ff97cf1cc1fc5c22941/food-delivery-notifications-swift-place-order.png)\n\nCreate a `PizzaViewController.swift` file, make it the custom class for the scene above and paste in the following code:\n\n```\n    import UIKit\n    import Alamofire\n    \n    class PizzaViewController: UIViewController {\n        \n        var pizza: Pizza?\n    \n        @IBOutlet weak var amount: UILabel!\n        @IBOutlet weak var pizzaDescription: UILabel!\n        @IBOutlet weak var pizzaImageView: UIImageView!\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            navigationItem.title = pizza!.name\n            pizzaImageView.image = pizza!.image\n            pizzaDescription.text = pizza!.description\n            amount.text = \"$\\(String(describing: pizza!.amount))\"\n        }\n    \n        @IBAction func buyButtonPressed(_ sender: Any) {\n            let parameters = [\n                \"pizza_id\": pizza!.id,\n                \"user_id\": AppMisc.USER_ID\n            ]\n            \n            Alamofire.request(\"http://127.0.0.1:4000/orders\", method: .post, parameters: parameters)\n                .validate()\n                .responseJSON { response in\n                    guard response.result.isSuccess else { return self.alertError() }\n                    \n                    guard let status = response.result.value as? [String: Bool],\n                          let successful = status[\"status\"] else { return self.alertError() }\n    \n                    successful ? self.alertSuccess() : self.alertError()\n                }\n        }\n        \n        private func alertError() {\n            return self.alert(\n                title: \"Purchase unsuccessful!\",\n                message: \"Unable to complete purchase please try again later.\"\n            )\n        }\n        \n        private func alertSuccess() {\n            return self.alert(\n                title: \"Purchase Successful\",\n                message: \"You have ordered successfully, your order will be confirmed soon.\"\n            )\n        }\n        \n        private func alert(title: String, message: String) {\n            let alertCtrl = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n            alertCtrl.addAction(UIAlertAction(title: \"Okay\", style: .cancel) { action in\n                self.navigationController?.popViewController(animated: true)\n            })\n            \n            present(alertCtrl, animated: true, completion: nil)\n        }\n    }\n```\n\nIn the code above, we have multiple  `@IBOutlet`‘s and a single `@IBAction`. You need to link the outlets and actions to the controller from the storyboard.\n\nIn the `viewDidLoad` we set the outlets so they display the correct values using the `pizza` sent from the previous view controller. The `buyButtonPressed` method uses `Alamofire` to place an order by sending a request to the API. The remaining methods handle displaying the error or success response from the API.\n\n### Creating the orders list scene\nThe next scene is the Orders list scene. In this scene, all the orders are listed so the user can see them and their status:\n\n![food-delivery-notifications-swift-navigation-controller](//images.contentful.com/1es3ne0caaid/5XWMD6PTvGCY0iqgUQ8mIE/ee92605ef1c099be6f9be6365055730e/food-delivery-notifications-swift-navigation-controller.png)\n\nCreate a `OrderTableViewController.swift` file, make it the custom class for the scene above and paste in the following code:\n\n```\n    import UIKit\n    import Alamofire\n    \n    class OrdersTableViewController: UITableViewController {\n    \n        var orders: [Order] = []\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            navigationItem.title = \"Orders\"\n    \n            fetchOrders { orders in\n                self.orders = orders!\n                self.tableView.reloadData()\n            }\n        }\n    \n        private func fetchOrders(completion: @escaping([Order]?) -\u003e Void) {\n            Alamofire.request(\"http://127.0.0.1:4000/orders\").validate().responseJSON { response in\n                guard response.result.isSuccess else { return completion(nil) }\n                \n                guard let rawOrders = response.result.value as? [[String: Any]?] else { return completion(nil) }\n    \n                let orders = rawOrders.flatMap { ordersDict -\u003e Order? in\n                    guard let orderId = ordersDict![\"id\"] as? String,\n                          let orderStatus = ordersDict![\"status\"] as? String,\n                          var pizza = ordersDict![\"pizza\"] as? [String: Any] else { return nil }\n                    \n                    pizza[\"image\"] = UIImage(named: pizza[\"image\"] as! String)\n    \n                    return Order(\n                        id: orderId,\n                        pizza: Pizza(data: pizza),\n                        status: OrderStatus(rawValue: orderStatus)!\n                    )\n                }\n    \n                completion(orders)\n            }\n        }\n    \n        @IBAction func closeButtonPressed(_ sender: Any) {\n            dismiss(animated: true, completion: nil)\n        }\n        \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return orders.count\n        }\n    \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"order\", for: indexPath)\n            let order = orders[indexPath.row]\n    \n            cell.textLabel?.text = order.pizza.name\n            cell.imageView?.image = order.pizza.image\n            cell.detailTextLabel?.text = \"$\\(order.pizza.amount) - \\(order.status.rawValue)\"\n    \n            return cell\n        }\n        \n        override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -\u003e CGFloat {\n            return 100.0\n        }\n        \n        override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n            performSegue(withIdentifier: \"order\", sender: orders[indexPath.row] as Order)\n        }\n    \n        override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n            if segue.identifier == \"order\" {\n                guard let vc = segue.destination as? OrderViewController else { return }\n                vc.order = sender as? Order\n            }\n        }\n    }\n```\n\nThe code above is similar to the code in the `PizzaTableViewController` above. However, instead of fetching the inventory, it fetches the `orders` and instead of passing the `pizza` in the last method, it passes the `order` to the next controller. The controller also comes with a `closeButtonPressed` method that just dismisses the controller and returns to the inventory list scene.\n\n### Creating the Order Status Scene\nThe next scene is the Order scene. In this scene, we can see the status of the order:\n\n![food-delivery-notifications-swift-status](//images.contentful.com/1es3ne0caaid/2X6nPInSrKKCQSaSSucqo4/72a999533dc69e4053b3deb523a9ea59/food-delivery-notifications-swift-status.png)\n\n\u003e ⚠️  The scene above has an invisible view right above the status label. You need to use this view to create an `@IBOutlet` to the controller.\n\nCreate a `OrderViewController.swift` file, make it the custom class for the scene above and paste in the following code:\n\n```\n    import UIKit\n    \n    class OrderViewController: UIViewController {\n        \n        var order: Order?\n        \n        @IBOutlet weak var status: UILabel!\n        @IBOutlet weak var activityView: ActivityIndicator!\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            navigationItem.title = order?.pizza.name\n            \n            activityView.startLoading()\n            \n            switch order!.status {\n            case .pending:\n                status.text = \"Processing Order\"\n            case .accepted:\n                status.text = \"Preparing Order\"\n            case .dispatched:\n                status.text = \"Order is on its way!\"\n            case .delivered:\n                status.text = \"Order delivered\"\n                activityView.strokeColor = UIColor.green\n                activityView.completeLoading(success: true)\n            }\n        }\n    }\n```\n\nIn the code above, we are doing all the work in our `viewDidLoad` method. In there we have the `ActivityIndicator` class, which we will create next, referenced as an `@IBOutlet`.\n\n### Creating other parts of the application\nWe are using a third-party library called the `[ActivityIndicator](https://github.com/abdulKarim002/activityIndicator)` but since we the package is not available via Cocoapods, we have opted to creating it ourselves and importing it. Create a new file in Xcode called `ActivityIndicator` and paste [the code from the repo here](https://raw.githubusercontent.com/abdulKarim002/activityIndicator/master/libTest/activityIndicator.swift) into it.\n\nNext, create a new `Order.swift` file and paste in the following code:\n\n```\n    import Foundation\n    \n    struct Order {\n        let id: String\n        let pizza: Pizza\n        var status: OrderStatus\n    }\n    \n    enum OrderStatus: String {\n        case pending = \"Pending\"\n        case accepted = \"Accepted\"\n        case dispatched = \"Dispatched\"\n        case delivered = \"Delivered\"\n    }\n```\n\nFinally, create a `Pizza.swift` and paste in the following code:\n\n```\n    import UIKit\n    \n    struct Pizza {\n        let id: String\n        let name: String\n        let description: String\n        let amount: Float\n        let image: UIImage\n        \n        init(data: [String: Any]) {\n            self.id = data[\"id\"] as! String\n            self.name = data[\"name\"] as! String\n            self.amount = data[\"amount\"] as! Float\n            self.description = data[\"description\"] as! String\n            self.image = data[\"image\"] as! UIImage\n        }\n    }\n```\n\nThat is all for the client application. One last thing we need to do though is modify the `info.plist` file. We need to add an entry to the `plist` file to allow connection to our local server:\n\n![food-delivery-notifications-swift-allow-arbitrary-loads](//images.contentful.com/1es3ne0caaid/j8Vt5c32mskcguceeAs0E/f793b048a46325ce1ca09c20e641e0da/food-delivery-notifications-swift-allow-arbitrary-loads.png)\n\nLet’s move on to the admin application.\n\n## Building the admin application\n\nLaunch a new instance of Xcode and create a new ‘Single Application’ project. We will name our project **PizzaareaAdmin.**\n\nOnce the project has been created, exit Xcode and create a new file called `Podfile` in the root of the Xcode project you just created. In the file paste in the following code:\n\n```\n    platform :ios, '11.0'\n    \n    target 'PizzareaAdmin' do\n      use_frameworks!\n      pod 'PusherSwift', '~\u003e 5.1.1'\n      pod 'Alamofire', '~\u003e 4.6.0'\n    end\n```\n\nIn the file above, we specified the dependencies the project needs to run. **Remember to change the** `**target**` **above to the name of your project.** Now in your terminal, run the following command to install the dependencies:\n\n```\n    $ pod install\n```\n\nAfter the installation is complete, open the Xcode workspace file that was generated by Cocoapods. This should relaunch Xcode. \n\nWhen Xcode has been relaunched, open the `Main.storyboard` file and in there we will create the storyboard for our client application. Below is a screenshot of how we have designed our storyboard:\n\n![food-delivery-notifications-swift-app-flow](//images.contentful.com/1es3ne0caaid/2jObj403hq68Q22cUYQuKO/930e30909508a05cdabb4552043ad35d/food-delivery-notifications-swift-app-flow.png)\n\nAbove we have a navigation view controller that is the initial view controller.\n\n### Creating the orders list scene\nThe orders list scene is supposed to show the list of the clients orders and from there we can change the status of each order when we want.\n\nCreate a new file in Xcode called `OrdersListViewController.swift`, make it the custom class for the second scene and paste in the following code:\n\n```\n    import UIKit\n    import Alamofire\n    \n    class OrdersTableViewController: UITableViewController {\n    \n        var orders: [Order] = []\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            navigationItem.title = \"Client Orders\"\n            \n            fetchOrders { orders in\n                self.orders = orders!\n                self.tableView.reloadData()\n            }\n        }\n        \n        private func fetchOrders(completion: @escaping([Order]?) -\u003e Void) {\n            Alamofire.request(\"http://127.0.0.1:4000/orders\").validate().responseJSON { response in\n                guard response.result.isSuccess else { return completion(nil) }\n                \n                guard let rawOrders = response.result.value as? [[String: Any]?] else { return completion(nil) }\n                \n                let orders = rawOrders.flatMap { ordersDict -\u003e Order? in\n                    guard let orderId = ordersDict![\"id\"] as? String,\n                          let orderStatus = ordersDict![\"status\"] as? String,\n                          var pizza = ordersDict![\"pizza\"] as? [String: Any] else { return nil }\n                    \n                    pizza[\"image\"] = UIImage(named: pizza[\"image\"] as! String)\n                    \n                    return Order(\n                        id: orderId,\n                        pizza: Pizza(data: pizza),\n                        status: OrderStatus(rawValue: orderStatus)!\n                    )\n                }\n                \n                completion(orders)\n            }\n        }\n    \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return orders.count\n        }\n    \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"order\", for: indexPath)\n            let order = orders[indexPath.row]\n            \n            cell.textLabel?.text = order.pizza.name\n            cell.imageView?.image = order.pizza.image\n            cell.detailTextLabel?.text = \"$\\(order.pizza.amount) - \\(order.status.rawValue)\"\n            \n            return cell\n        }\n        \n        override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -\u003e CGFloat {\n            return 100.0\n        }\n        \n        override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n            let order: Order = orders[indexPath.row]\n            \n            let alertCtrl = UIAlertController(\n                title: \"Change Status\",\n                message: \"Change the status of the order based on the progress made.\",\n                preferredStyle: .actionSheet\n            )\n            \n            alertCtrl.addAction(createActionForStatus(.pending, order: order))\n            alertCtrl.addAction(createActionForStatus(.accepted, order: order))\n            alertCtrl.addAction(createActionForStatus(.dispatched, order: order))\n            alertCtrl.addAction(createActionForStatus(.delivered, order: order))\n            alertCtrl.addAction(createActionForStatus(nil, order: nil))\n            \n            present(alertCtrl, animated: true, completion: nil)\n        }\n        \n        private func createActionForStatus(_ status: OrderStatus?, order: Order?) -\u003e UIAlertAction {\n            let alertTitle = status == nil ? \"Cancel\" : status?.rawValue\n            let alertStyle: UIAlertActionStyle = status == nil ? .cancel : .default\n            \n            let action = UIAlertAction(title: alertTitle, style: alertStyle) { action in\n                if status != nil {\n                    self.setStatus(status!, order: order!)\n                }\n            }\n            \n            if status != nil {\n                action.isEnabled = status?.rawValue != order?.status.rawValue\n            }\n            \n            return action\n        }\n        \n        private func setStatus(_ status: OrderStatus, order: Order) {\n            updateOrderStatus(status, order: order) { successful in\n                guard successful else { return }\n                guard let index = self.orders.index(where: {$0.id == order.id}) else { return }\n    \n                self.orders[index].status = status\n                self.tableView.reloadData()\n            }\n        }\n        \n        private func updateOrderStatus(_ status: OrderStatus, order: Order, completion: @escaping(Bool) -\u003e Void) {\n            let url = \"http://127.0.0.1:4000/orders/\" + order.id\n            let params = [\"status\": status.rawValue]\n    \n            Alamofire.request(url, method: .put, parameters: params).validate().responseJSON { response in\n                guard response.result.isSuccess else { return completion(false) }\n                guard let data = response.result.value as? [String: Bool] else { return completion(false) }\n                \n                completion(data[\"status\"]!)\n            }\n        }\n    }\n```\n\nThe code above is similar to the code in the `PizzaListTableViewController` in the client application and has been explained before.\n\nThere is a `createActionForStatus` which is a helper for creating and configuring `UIAlertAction` object. There is a `setStatus` method that just attempts to set the status for an order and then the `updateOrderStatus` method that sends the update request using `Alamofire` to the API.\n\nNext, create the `Order.swift` and `Pizza.swift` classes like we did before in the client application:\n\n```\n    // Order.swift\n    import Foundation\n    \n    struct Order {\n        let id: String\n        let pizza: Pizza\n        var status: OrderStatus\n    }\n    \n    enum OrderStatus: String {\n        case pending = \"Pending\"\n        case accepted = \"Accepted\"\n        case dispatched = \"Dispatched\"\n        case delivered = \"Delivered\"\n    }\n    \n    \n    // Pizza.swift\n    import UIKit\n    \n    struct Pizza {\n        let id: String\n        let name: String\n        let description: String\n        let amount: Float\n        let image: UIImage\n        \n        init(data: [String: Any]) {\n            self.id = data[\"id\"] as! String\n            self.name = data[\"name\"] as! String\n            self.amount = data[\"amount\"] as! Float\n            self.description = data[\"description\"] as! String\n            self.image = data[\"image\"] as! UIImage\n        }\n    }\n```\n\nThat's all for the admin application. One last thing we need to do though is modify the `info.plist` file as we did in the client application.\n\n## Adding push notifications to our food delivery iOS app\n\nAt this point, the application works as expected out of the box. We now need to add push notifications to the application to make it more engaging even when the user is not currently using the application.\n\n\u003e ⚠️  You need to be [enrolled to the Apple Developer program](https://developer.apple.com/programs/enroll/) to be able to use the Push Notifications feature. Also Push Notifications do not work on Simulators so you will need an actual iOS device to test.\n\nPusher’s [Beams API](https://pusher.com/push-notifications) has first-class support for native iOS applications. Your iOS app instances subscribe to interests; then your servers send push notifications to those interests. Every app instance subscribed to that interest will receive the notification, even if the app is not open on the device at the time. \n\nThis section describes how you can set up an iOS app to receive transactional push notifications about your food delivery orders through Pusher.\n\n### Configure APNs\nPusher relies on Apple Push Notification service (APNs) to deliver push notifications to iOS application users on your behalf. When we deliver push notifications, we use your APNs Key. This page guides you through the process of getting an APNs Key and how to provide it to Pusher.\n\nHead over to the Apple Developer dashboard by clicking [here](https://developer.apple.com/account) and then create a new Key as seen below: \n\n![food-delivery-notifications-swift-create-new-key](//images.contentful.com/1es3ne0caaid/FRmSzjstAymmY42Yae2Sg/e9bd6cf292c5a671b0cb5b8c43bda1fa/food-delivery-notifications-swift-create-new-key.gif)\n\nWhen you have created the key, download it. Keep it safe as we will need it in the next section.\n\n\u003e ⚠️  You have to keep the generated key safe as you cannot get it back if you lose it. \n\n### Creating your Pusher application\nThe next thing you need to do is create a new Pusher Beams application from the [Pusher dashboard](https://dash.pusher.com). \n\n![food-delivery-notifications-swift-create-instance](//images.contentful.com/1es3ne0caaid/6It7s8zzpYWWOKSCwIe8eQ/85d5e21f2d2ed7118965b2518c1e7f89/food-delivery-notifications-swift-create-instance.png)\n\nWhen you have created the application, you should be presented with a Quickstart wizard that will help you set up the application.\n\nIn order to configure Beams you will need to get an APNs key from Apple. This is the same key as the one we downloaded in the previous section. Once you’ve got the key, upload it to the Quickstart wizard.\n\n![food-delivery-notifications-swift-apns-keys](//images.contentful.com/1es3ne0caaid/4F5z1zKnWMSUCoq6oUOOQw/d5fbfc2c052a0911a4c1708aa9bccffb/food-delivery-notifications-swift-apns-keys.png)\n\nEnter your Apple Team ID. You can get the Team ID from [here](https://developer.apple.com/account/#/membership). Click on the continue to proceed to the next step.\n\n### Updating your client application to support push notifications\nIn your client application, open the `Podfile` and add the following pod to the list of dependencies:\n\n```\n    pod 'PushNotifications'\n```\n\nNow run the `pod install` command as you did earlier to pull in the notifications package. When installation is complete, create a new class `AppMisc.swift` and in there paste the following:\n\n```\n    class AppMisc {\n      static let USER_ID = NSUUID().uuidString.replacingOccurrences(of: \"-\", with: \"_\")\n    }\n```\n\nIn the little class above, we generate a user ID for the session. In a real application, you would typically have an actual user ID after authentication.\n\nNext open the `AppDelegate` class and import the `PushNotifications` package:\n\n```\n    import PushNotifications\n```\n\nNow, as part of the `AppDelegate` class, add the following:\n\n```\n    let pushNotifications = PushNotifications.shared\n    \n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n      self.pushNotifications.start(instanceId: \"PUSHER_NOTIF_INSTANCE_ID\")\n      self.pushNotifications.registerForRemoteNotifications()\n      return true\n    }\n    \n    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n      self.pushNotifications.registerDeviceToken(deviceToken) {\n        try? self.pushNotifications.subscribe(interest: \"orders_\" + AppMisc.USER_ID)\n      }\n    }\n```\n\n\u003e 💡  Replace `PUSHER_PUSH_NOTIF_INSTANCE_ID` with the key given to you by the Pusher application.\n\nIn the code above, we set up push notifications in the `application(didFinishLaunchingWithOptions:)` method and then we subscribe in the `application(didRegisterForRemoteNotificationsWithDeviceToken:)` method.\n\nNext, we need to enable push notifications for the application. In the project navigator, select your project, and click on the *Capabilities* tab. [Enable Push Notifications](http://help.apple.com/xcode/mac/current/#/devdfd3d04a1) by turning the switch ON.\n\n![food-delivery-notifications-swift-on-slide](//images.contentful.com/1es3ne0caaid/1mMVY0HdKIqkeM28yuua06/0bdaaf36c998992135cb58e6a8660430/food-delivery-notifications-swift-on-slide.png)\n\n### Updating your admin application to support push notifications\nYour admin application also needs to be able to receive push notifications. The process is similar to the set up above. The only difference will be the interest we will be subscribing to in `AppDelegate` which will be **orders**.\n\n### Updating your API to send push notifications\nPush Notifications will be published using our backend server API which is written in Node.js. For this we will use the [Node.js SDK](https://docs.pusher.com/push-notifications/reference/server-sdk-node). `cd` to the backend project directory and run the following command:\n\n```\n    $ npm install @pusher/push-notifications-server --save\n```\n\nNext, open the `index.js` file and import the `@pusher/push-notifications-server` package:\n\n```\n    const PushNotifications = require('@pusher/push-notifications-server');\n    \n    let pushNotifications = new PushNotifications({\n        instanceId: 'PUSHER_PUSH_NOTIF_INSTANCE_ID',\n        secretKey: 'PUSHER_PUSH_NOTIF_SECRET_KEY'\n    });\n```\n\nNext, we want to add a helper function that returns a notification message based on the order status. In the `index.js` add the following:\n\n```\n    function getStatusNotificationForOrder(order) {\n        let pizza = order['pizza']\n        switch (order['status']) {\n            case \"Pending\":\n                return false;\n            case \"Accepted\":\n                return `⏳ Your \"${pizza['name']}\" is being processed.`\n            case \"Dispatched\":\n                return `😋🍕 Your \"${order['pizza']['name']}\" is on it’s way`\n            case \"Delivered\":\n                return `🍕 Your \"${pizza['name']}\" has been delivered. Bon Appetit.`\n            default:\n                return false;\n        }\n    }\n```\n\nNext, in the `PUT /orders/:id` route, add the following code before the return statement:\n\n```\n    let alertMessage = getStatusNotificationForOrder(order)\n    \n    if (alertMessage !== false) {\n       pushNotifications.publish([`orders_${user_id}`], {\n            apns: { \n                aps: {\n                    alert: {\n                        title: \"Order Information\",\n                        body: alertMessage,\n                    }, \n                    sound: 'default'\n                } \n            }\n        })\n        .then(response =\u003e console.log('Just published:', response.publishId))\n        .catch(error =\u003e console.log('Error:', error));\n    }\n```\n\nIn the code above, we send a push notification to the `**orders_${user_id}**` interest (`user_id` is the ID generated and passed to the backend server from the client) whenever the order status is changed. This will be a notification that will be picked up by our client application since we subscribed for that interest earlier.\n\nNext, in the `POST /orders` route, add the following code before the return statement:\n\n```\n    pushNotifications.publish(['orders'], {\n        apns: {\n            aps: {\n                alert: {\n                    title: \"⏳ New Order Arrived\",\n                    body: `An order for ${pizza['name']} has been made.`,\n                },\n                sound: 'default'\n            }\n        }\n    })\n    .then(response =\u003e console.log('Just published:', response.publishId))\n    .catch(error =\u003e console.log('Error:', error));\n```\n\nIn this case, we are sending a push notification to the **orders** interest. This will be sent to the admin application that is subscribed to the **orders** interest.\n\nThat’s all there is to adding push notifications using Pusher. Here are screen recordings of our applications in action:\n\n![food-delivery-notifications-swift-final-demo](//images.contentful.com/1es3ne0caaid/1IvWzEqIgkCQAWWo4S6EME/386bf16c07db53a02c44e25513d2e27f/food-delivery-notifications-swift-final-demo.gif)\n\n## Conclusion\n\nIn this article, we created a basic food delivery system and used that to demonstrate how to use Pusher to send push notifications in multiple applications using the same Pusher application. Hopefully you learnt how you can use Pusher to simplify the process of sending push notifications to your users.","metaTitle":"Send push notifications to a food delivery Swift app","metaDescription":"Learn how you can send push notifications to an iOS food delivery app using Swift and Node.js"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2jXImCuurO66mYOOuyUkSo","type":"Entry","createdAt":"2018-02-28T12:38:00.459Z","updatedAt":"2018-02-28T12:38:00.459Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a simple social network with Kotlin","url":"social-network-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/status-update-kotlin","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-02-19","description":"Social feed have become a major feature of many apps and websites. Learn how to build one with Kotlin and Node.js.","prerequisite":"A basic understanding of Kotlin and Node.js is needed to follow this tutorial.","content":"Social networks require live updates to your status stack. Take for instance, Facebook. If you are on your main profile page and you post a new status, it is reflected immediately on the page without need to refresh it.\n\nIt is engaging and saves users the extra muscle of having to click the refresh button. Taking this to a mobile context, if this feature is not present, we would have to restart the ativity or have to wait till the user closes the app and opens it again before he can see anything new. This is obviously a bad user experience.\n\n## What we will build\n\nIn this article, we will build a simple android app that shows our status as soon as it is posted.\n\n![social-network-kotlin-demo](//images.contentful.com/1es3ne0caaid/5a4CDFW9rqi2oM2KQIE8Sw/9a75e68b3c6f77616bd1558305b3f74b/social-network-kotlin-demo.gif)\n\n## Prerequisites \n\nYou need the following;\n\n- Knowledge of the Kotlin programming language\n- A Pusher application\n- Node JS - This is to enable us to setup a server.\n- [Android Studio](https://developer.android.com/studio/archive.html) - Android studio 3.0.1 is recommended as it is the latest stable version at the time of this publication and it integrates Kotlin support with ease.\n\n## Pusher app setup\n\nHead to the [Pusher dashboard](https://dashboard.pusher.com/), create an account if you have none, login to your dashboard, and create a new Pusher app.\n\n![social-network-kotlin-create-app](//images.contentful.com/1es3ne0caaid/5b4kPGLl8k2K6YcyUwgG4C/3ce3541b4296019db93c57021d0c43b8/social-network-kotlin-create-app.png)\n\nBe careful to take not of the cluster used, `eu` in our case. Open your app details and note the keys in the App Keys tab. You will need these later in the article.\n\n## Server setup\n\nWe will build a Node.js server and run it locally. We first create a new folder and name it accordingly, say `user-status-backend`.  `cd` to the folder, create a `package.json` file and paste this:\n \n```\n    {\n      \"name\": \"realtime-status-update\",\n      \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\"\n      },\n      \"keywords\": [],\n      \"author\": \"\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.18.2\",\n        \"express\": \"^4.16.2\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nWe also create an `index.js` file within the folder and paste this:\n\n```\n    // Load dependencies\n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const app = express()\n    \n    // App middlewares\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // Initialize Pusher\n    var Pusher = require('pusher');\n    var pusher = new Pusher({\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    \n    // app's routes\n    app.post('/update-status', (req, res) =\u003e {\n    \n        pusher.trigger('my-channel', 'my-event', {\n            \"message\": req.query.status\n        });\n    \n        res.json(req.query.status)\n    \n    })\n    \n    app.get('/', (req, res, next) =\u003e {\n        res.json(\"Yeaaaa!!!!\")\n    })\n    \n    app.listen(3000, () =\u003e console.log('Running application...'))\n```\n\nOur server has one major endpoint, `update-status` which accepts an `HTTP POST` method with the message to be posted sent as one of the parameters. \n\n\u003e Use your app keys in this file.\n\nWe then install the Node and Pusher modules in our folder directory using the following commands:\n\n```\n    npm install\n```\n\nFinally, we run the server:\n\n```\n    node index.js\n```\n\nWith this, our server is up and running on port `3000`, you can check it out on your browser first before forging ahead.\n\n## Building our realtime Kotlin application\n\n### Setting up the project\n\nOpen android studio and create a new project. Details to be provided include: the application name and the domain name. Click the “include kotlin support” checkbox to enable Kotlin in the project. \n\nNext up, you select the `minimum SDK` which is the least Android version our app will support. Choose Empty Activity when asked to add an activity.\n\n![social-network-kotlin-create-new-project](//images.contentful.com/1es3ne0caaid/2PevzqZ2UUeywQ8keIeIoq/df1386314dbdfd0db3857fcde0a05391/social-network-kotlin-create-new-project.png)\n\nThe next screen gives you a chance to customize the name of the activity. We will leave ours as the default `MainActivity`  and click finish. \n\n### Adding dependencies\n\nWe need the support library dependencies, Pusher client dependency and Retrofit dependency. The first will give us extra features to access while using the Android SDK, Pusher will provide us with the much needed real-time feature and Retrofit will enable us make network requests to our server. These dependencies will be added in our app-module `build.gradle`:\n\n```\n    // pusher dependency\n    compile 'com.pusher:pusher-java-client:1.5.0'\n    \n    // part of the support libraries\n    implementation 'com.android.support:design:26.1.0'\n    \n    // retrofit dependency\n    implementation 'com.squareup.retrofit2:retrofit:2.3.0'\n    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'\n```\n\nAfter adding the dependencies, we sync it so that it can be downloaded and made available for use in our app.\n\n### Setting up Retrofit\n\n[Retrofit](https://github.com/square/retrofit) is a type-safe HTTP client for Android and Java built by [Square, Inc](https://github.com/square). It is used for making network requests. For us to use Retrofit, we need an interface to define our endpoints. Create a new Kotlin file named `ApiInterface.kt` and paste this:\n\n```\n    import retrofit2.Call\n    import retrofit2.http.POST\n    import retrofit2.http.Query\n    \n    interface ApiInterface {\n        @POST(\"/update-status\")\n        fun updateStatus(@Query(\"status\") status:String): Call\u003cString\u003e\n    }\n```\n\nThereafter, we need to provide a Retrofit object. We will do this by creating a class named `RetrofitClient.kt` and pasting this: \n\n```\n    import okhttp3.OkHttpClient\n    import retrofit2.Retrofit\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    \n    class RetrofitClient {\n        fun getClient(): ApiInterface {\n            val httpClient = OkHttpClient.Builder()\n            val builder = Retrofit.Builder()\n                    .baseUrl(\"http://10.0.2.2:3000/\")\n                    .addConverterFactory(ScalarsConverterFactory.create())\n    \n            val retrofit = builder\n                    .client(httpClient.build())\n                    .build()\n            return retrofit.create(ApiInterface::class.java)\n        }\n    }\n```\n\nThe `getClient` function gives us an instance of Retrofit. While declaring the Retrofit object, the base url for our network requests and the converter to be used are defined.\n\n\n\u003e We are using `10.0.2.2`  because this is how the Android emulator recognizes localhost as against the usual  `127.0.0.1` \n\nWe also add the internet permission in the `AndroidManifest.xml` file. This should be done under the `\u003cmanifest\u003e` tag:\n\n```\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        package=\"YOUR_APP_PACKAGE_NAME\"\u003e\n    \n        \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n    \n    \u003c/manifest\u003e    \n```\n\n### Designing our layout\n\nIn this app, we will have just one screen. It will contain an `EditText` for our input, a `Button` to send the message inputted and trigger a request to the server, and finally a `RecyclerView` to display our status messages. This will be housed in the `activity_main.xml` layout file:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_margin=\"16dp\"\n        android:layout_height=\"match_parent\"\n        tools:showIn=\"@layout/activity_main\"\u003e\n    \n        \u003cLinearLayout\n            android:layout_width=\"match_parent\"\n            android:orientation=\"vertical\"\n            android:layout_height=\"wrap_content\"\u003e\n    \n            \u003cEditText\n                android:paddingLeft=\"10dp\"\n                android:hint=\"Whats on your mind?\"\n                android:background=\"@drawable/background\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:minHeight=\"100dp\"\n                android:id=\"@+id/newStatus\" /\u003e\n    \n            \u003cButton\n                android:layout_gravity=\"end\"\n                android:id=\"@+id/buttonPost\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"post\" /\u003e\n    \n            \u003candroid.support.v7.widget.RecyclerView\n                android:id=\"@+id/recyclerView\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"/\u003e\n    \n        \u003c/LinearLayout\u003e\n    \n    \u003c/ScrollView\u003e\n```    \n\nWe added a seprate drawable as background for the `EditText` tag. This gives it a box like look. Create a new drawable resource named `background.xml` and paste this:\n\n```\n    \u003cshape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:thickness=\"0dp\"\n        android:shape=\"rectangle\"\u003e\n        \u003csolid android:color=\"#FFFFFF\" /\u003e\n        \u003cstroke android:width=\"2dp\"\n            android:color=\"@color/colorAccent\"/\u003e\n    \n    \u003c/shape\u003e\n```\n\nIf you build the project right now our layout will look like this:\n\n\n![social-network-kotlin-app-ui](//images.contentful.com/1es3ne0caaid/7DAvEkCwRqOeKsAWkGA86g/40f69dce56f672d2ba0fdba46f76cc3f/social-network-kotlin-app-ui.png)\n\n\nThis takes the shape of a generic social media platform where status updates are made. Next up, we create an adapter to handle the display of status messages on a list. Create a new class `StatusAdapter.kt` and paste this:\n\n```\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.TextView\n    import java.util.*\n    \n    class StatusAdapter : RecyclerView.Adapter\u003cStatusAdapter.ViewHolder\u003e() {\n    \n        private var statusList = ArrayList\u003cString\u003e()\n        private var reversedList = ArrayList\u003cString\u003e()\n    \n        fun addMessage(newMessage: String){\n            statusList.add(newMessage)\n            reversedList = statusList\n            Collections.reverse(reversedList)\n            notifyDataSetChanged()\n        }\n    \n        override fun getItemCount(): Int {\n            return statusList.size\n        }\n    \n        override fun onCreateViewHolder(parent: ViewGroup?, viewType: Int): ViewHolder {\n            val view = LayoutInflater.from(parent!!.context).inflate(android.R.layout.simple_list_item_1,parent,false)\n            return ViewHolder(view)\n        }\n    \n        override fun onBindViewHolder(holder: ViewHolder?, position: Int) {\n            holder!!.statusText.text = reversedList[position]\n        }\n    \n        inner class ViewHolder(itemView: View?): RecyclerView.ViewHolder(itemView) {\n            var statusText: TextView = itemView!!.findViewById(android.R.id.text1)\n        }\n    \n    }\n```\n\nThe `onCreateViewHolder` function returns an instance of our `ViewHolder`  coupled with the view that gives us the layout design for each list item. The `addMessage` function adds a new message to the list. Still in this function, we also assign `list` to `reversedList` and reverse `reversedList` so that we can have the most recent updates on top of the list. The `reversedList` is used based on position to display each item in the `onBindViewHolder` function.\n\nIn the `MainActivity` class, paste this:\n\n```\n    import android.app.Activity\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.view.View\n    import android.view.inputmethod.InputMethodManager\n    import android.widget.Toast\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import kotlinx.android.synthetic.main.activity_main.*\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class MainActivity : AppCompatActivity() {\n    \n        lateinit var pusher:Pusher\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n    \n            // setup recycler view and adapter\n            val adapter = StatusAdapter()\n            recyclerView.layoutManager = LinearLayoutManager(this)\n            recyclerView.adapter = adapter\n    \n            // setup pusher to receive status update\n            val options = PusherOptions()\n            options.setCluster(PUSHER_CLUSTER)\n            pusher = Pusher(PUSHER_API_KEY, options)\n            val channel = pusher.subscribe(\"my-channel\")\n            channel.bind(\"my-event\") { channelName, eventName, data -\u003e\n                val jsonObject = JSONObject(data)\n                runOnUiThread { adapter.addMessage(jsonObject.getString(\"message\")) }\n            }\n    \n            // post status to server\n            buttonPost.setOnClickListener {\n    \n                if (newStatus.text.isNotEmpty())\n                    RetrofitClient().getClient().updateStatus(newStatus.text.toString()).enqueue(object : Callback\u003cString\u003e {\n                        override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {\n                            newStatus.text.clear()\n                            hideKeyboard()\n                        }\n    \n                        override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {\n                            Toast.makeText(this@MainActivity,\"Error occurred\",Toast.LENGTH_SHORT).show()\n                        }\n                    })\n            }\n    \n        }\n    \n        private fun hideKeyboard() {\n            val imm = this.getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager\n            var view = this.currentFocus\n            if (view == null)\n                view = View(this)\n            imm.hideSoftInputFromWindow(view.windowToken, 0)\n        }\n    \n        override fun onResume() {\n            super.onResume()\n            pusher.connect()\n        }\n    \n        override fun onPause() {\n            super.onPause()\n            pusher.disconnect()\n        }\n    \n    }\n```\n \nIn this snippet, we initialized the recycler view together with its adapter, we initialized Pusher using our keys from our dashboard and subscribed to a channel so as to get realtime updates, then we created a listener for our button that posts a message to the server when clicked. \n\nFinally, we connected and disconnected Pusher in the `onResume` and `onPause` functions.\n\nWith this, the application is ready! When we run it, we see results like this example:\n\n![social-network-kotlin-demo-2](//images.contentful.com/1es3ne0caaid/494w4EZhOMaquswAs2wAQ6/2ca493bb960040d48ea088c997afb0ec/social-network-kotlin-demo-2.gif)\n\n## Conclusion\n\nIn this article, we have used Pusher to quickly and easily add realtime updates to the social network app.","metaTitle":"Build a simple social network with Kotlin","metaDescription":"Learn how to build a live social feed with Kotlin and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2U9mAVUR3aeeW2YIM24W2O","type":"Entry","createdAt":"2018-02-22T15:02:42.776Z","updatedAt":"2018-02-28T14:43:57.656Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an activity feed in Android ","url":"activity-feed-android","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/feed-pusher-android","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-02-14","description":"Discover how you can create a realtime activity feed for your Android app.","prerequisite":"A basic understanding of Java and Node.js is needed to follow this tutorial.","content":"We'd like to track and visualize our applications in a central place. Feeds are great for this! Let's build an Android app with an activity feed showing the temperature of your home.\n\nIn this tutorial, using [Pusher](https://pusher.com), we are going to build a feed as an Android app to monitor the activity of a [Node.js](https://nodejs.org) REST API. Every time an endpoint of the API is hit, it will publish an event with some information (let's say temperatures) to a channel. This event will be received in realtime, on all the connected Android devices.\n\nThis is how our final Android app will look like:\n\n![activity-feed-android-demo](//images.contentful.com/1es3ne0caaid/1WGAtH6OC86GEaAKKWm2YS/1b76e83dad7a0470f499e2ccbd382b59/activity-feed-android-demo.gif)\n\nFor the back-end, we will be using [Node.js](https://nodejs.org) with [Express](https://expressjs.com) to create a simple REST API. A basic knowledge of Node/Express is required to understand the code, but we won't be using a database or anything special so you can replace this stack with the one you're most comfortable with. The source code of this part is also available on [Github](https://github.com/eh3rrera/node-api-pusher).\n\nSo let's get started!\n\n## Setting up Pusher\n\nCreate a free account at [https://pusher.com/signup](https://pusher.com/signup).\n\nWhen you first log in, you'll be asked to enter some configuration options:\n\n![activity-feed-android-create-app](//images.contentful.com/1es3ne0caaid/2yiZXxFDc4ys0Ui0acuK8E/e942424e38712df4c88e55a5e4d0ad44/activity-feed-android-create-app.png)\n\nEnter a name, choose *Android* as your front-end tech, and *Node.js* as your back-end tech. This will give you some sample code to get you started:\n\n![activity-feed-android-pusher-libraries](//images.contentful.com/1es3ne0caaid/4Yi7ILOJhCE46KmqeKC4yy/acef29d86deb38cdf3d95d1b1b739e12/activity-feed-android-pusher-libraries.png)\n\nBut don't worry, this won't lock you into this specific set of technologies, you can always change them. With Pusher, you can use any combination of libraries.\n\nThen go to the *App Keys* tab to copy your App ID, Key, and Secret credentials, we'll need them later.\n\n## The Node server\n\nFirst, let's create a default `package.json` configuration file with:\n\n``` \nnpm init -y\n```\n\nWe'll need Express, Pusher, and other dependencies, let's add them with:\n\n``` \nnpm install --save express body-parser pusher\n```\n\nIn case a future version of a dependency breaks the code, here's the dependencies section on the `package.json` file:\n\n```\n{\n  ...\n    \"dependencies\": {\n    \"body-parser\": \"1.16.0\",\n    \"express\": \"4.14.1\",\n    \"pusher\": \"1.5.1\"\n  }\n}\n```\n\nNext, create a [server.js](https://github.com/eh3rrera/node-api-pusher/blob/16b75dcd39cde3bb0f454bfed808a7e80e8c8c93/server.js) file. First, let's require the modules we're going to need:\n\n```\nvar express = require('express');\nvar bodyParser = require('body-parser');\nvar crypto = require('crypto');\nvar Pusher = require('pusher');\n```\n\nThen, configure the Express object:\n\n```\nvar app = express();\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n```\n\nNext, the Pusher object is created by passing the configuration object with the ID, key, and the secret for the app created in the [Pusher Dashboard](https://dashboard.pusher.com):\n\n```\nvar pusher = new Pusher({\n  appId      : process.env.PUSHER_APP_ID,\n  key        : process.env.PUSHER_APP_KEY,\n  secret     : process.env.PUSHER_APP_SECRET,\n  encrypted  : true,\n});\n```\n\nPusher will be used to publish any events that happen in our application. These events have a *channel*, which allows events to relate to a particular topic, an *event-name* used to identify the type of the event, and a *payload*, which you can attach any additional information to the message.\n\nWe are going to publish an event to a Pusher channel when an endpoint of our API is called to create/update/delete a record, and send the information as an attachment so we can show it in an activity feed.\n\nHere's the definition of our API's REST endpoints. Notice how an ID for the record is created using the first four characters of the `hex` string generated by `crypto.randomBytes(16)` (to avoid using an external library):\n\n```\napp.post('/api', function (req, res) {\n  var event = {\n    data: req.body.data,\n    id: crypto.randomBytes(16).toString('hex').substring(0, 4),\n  };\n\n  // Do something with the data...\n\n  // Publish event to the Pusher channel\n  pusher.trigger(channel, 'created', event);\n\n  res.status(200).json(event);\n});\n\napp.route('/api/:id')\n  // PUT  endpoint to update a record\n  .put(function (req, res) {\n    var event = {\n     data: req.body.data,\n     id: req.params.id,\n    };\n\n    // Do something with the data...\n\n    // Publish event to the Pusher channel\n    pusher.trigger(channel, 'updated', event);\n\n    res.status(200).json(event);\n  })\n\n  // DELETE  endpoint to delete a record\n  .delete(function (req, res) {\n    var event = {\n      id: req.params.id,\n    };\n\n    // Do something with the data...\n\n    // Publish event to the Pusher channel\n    pusher.trigger(channel, 'deleted', event);\n\n    res.status(200).json(event);\n  });\n```\n\nThis way, a POST request like this:\n\n``` \n{\n  \"data\": \"Temperature: 75°F\"\n}\n```\n\nWill return something like the following:\n\n``` \n{\n  \"data\": \"Temperature: 75°F\",\n  \"id\": \"d2t6\"\n}\n```\n\nWe start the server with:\n\n```\napp.listen(3000, function () {\n  console.log('Node server running on port 3000');\n});\n```\n\nAnd that's all. To run the server, execute the following command passing your Pusher credentials:\n\n``` \nPUSHER_APP_ID=XXXXXX PUSHER_APP_KEY=XXXXXX PUSHER_APP_SECRET=XXXXXX node server.js\n```\n\n## The android app\n\nOpen Android Studio and create a new project:\n\n![activity-feed-android-create-project](//images.contentful.com/1es3ne0caaid/1Kv2lAKIY4mwoY2Mywq0gI/8c26426d81ec3da7247246baff95fc9a/activity-feed-android-create-project.png)\n\nWe're not going to use anything special, so we can safely support a low API level:\n\n![activity-feed-android-target-device](//images.contentful.com/1es3ne0caaid/27mSDfxqYowQs80KIOcQAM/96714408b4c7866569e31c57eaa54aa3/activity-feed-android-target-device.png)\n\nNext, create an initial empty activity:\n\n![activity-feed-android-add-activity](//images.contentful.com/1es3ne0caaid/5LmK2Ij7NemKwsmoe4Es84/47eb17b20b83969fd71ce839df85865c/activity-feed-android-add-activity.png)\n\nAnd use the default name of `MainActivity` with backward compatibility:\n\n![activity-feed-android-customize-activity](//images.contentful.com/1es3ne0caaid/3q9QEPf3NmOKco6S2aiciM/121fdec6ed6f91779d08ddd69e0488b8/activity-feed-android-customize-activity.png)\n\nOnce everything is set up, let's install the project dependencies. In the `dependencies` section of the `build.gradle` file of your application module add:\n\n```\ndependencies {\n    ...\n    compile 'com.pusher:pusher-java-client:1.4.0'\n    compile 'com.android.support:recyclerview-v7:25.1.1'\n    compile 'com.android.support:cardview-v7:25.1.1'\n    compile 'com.github.curioustechizen.android-ago:library:1.3.2'\n    compile 'com.google.code.gson:gson:2.4'\n    ...\n}\n```\n\nAt the time of this writing, the latest SDK version is 25, so that's my target SDK version.\n\nWe're going to use the `RecyclerView` and `CardView` components from the [Support Library](https://developer.android.com/topic/libraries/support-library/features.html), so make sure you have it installed (in *Tools -\u003e Android -\u003e SDK Manager -\u003e SDK Tools tab* the *Android Support Repository* must be installed).\n\nSync the Gradle project so the modules can be installed and the project built.\n\nBefore we forget (I always do), let's add the `INTERNET` permission to the `AndroidManifest.xml` file. This is required so we can connect to Pusher and get the events in realtime:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.pusher.feed\"\u003e\n\n    \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n\n    \u003capplication\n        ...\n    \u003c/application\u003e\n\n\u003c/manifest\u003e\n```\n\nIf you want to modify the style of the app, in the `res/values` folder, modify the [colors.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/values/colors.xml) file so it looks like this:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\n\u003cresources\u003e\n    \u003ccolor name=\"primary\"\u003e#03A9F4\u003c/color\u003e\n    \u003ccolor name=\"primary_dark\"\u003e#0288D1\u003c/color\u003e\n    \u003ccolor name=\"primary_light\"\u003e#B3E5FC\u003c/color\u003e\n    \u003ccolor name=\"accent\"\u003e#FF4081\u003c/color\u003e\n    \u003ccolor name=\"primary_text\"\u003e#212121\u003c/color\u003e\n    \u003ccolor name=\"secondary_text\"\u003e#757575\u003c/color\u003e\n    \u003ccolor name=\"icons\"\u003e#FFFFFF\u003c/color\u003e\n    \u003ccolor name=\"divider\"\u003e#BDBDBD\u003c/color\u003e\n\u003c/resources\u003e\n```\n\nAs well as the [styles.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/values/styles.xml) file to match these color definitions:\n\n```\n\u003cresources\u003e\n\n    \u003c!-- Base application theme. --\u003e\n    \u003cstyle name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\"\u003e\n        \u003c!-- Customize your theme here. --\u003e\n        \u003citem name=\"colorPrimary\"\u003e@color/primary\u003c/item\u003e\n        \u003citem name=\"colorPrimaryDark\"\u003e@color/primary_dark\u003c/item\u003e\n        \u003citem name=\"colorAccent\"\u003e@color/accent\u003c/item\u003e\n    \u003c/style\u003e\n\n\u003c/resources\u003e\n```\n\nNow, modify the layout file [activity_main.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/layout/activity_main.xml) so it looks like this:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/activity_main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n    tools:context=\"com.pusher.feed.MainActivity\"\u003e\n\n    \u003candroid.support.v7.widget.RecyclerView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_alignParentTop=\"true\"\n        android:layout_alignParentLeft=\"true\"\n        android:layout_alignParentStart=\"true\"\n        android:id=\"@+id/recycler_view\"\n        android:scrollbars=\"vertical\" /\u003e\n\u003c/RelativeLayout\u003e\n```\n\nWe're going to use a [RecyclerView](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html) to display the events, which we'll store in a list. Each item in this list is displayed in an identical manner, so let's define another layout file to inflate each item.\n\nCreate the file [event_row.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/layout/event_row.xml) with the following content:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003candroid.support.v7.widget.CardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:card_view=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    card_view:cardCornerRadius=\"4dp\"\n    card_view:cardElevation=\"4dp\"\n    card_view:cardUseCompatPadding=\"true\"\n    card_view:contentPadding=\"8dp\"\u003e\n\n    \u003cRelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n\n        \u003cTextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textAppearance=\"?android:attr/textAppearanceLarge\"\n            android:text=\"Event\"\n            android:id=\"@+id/event\"\n            android:layout_alignParentTop=\"true\"\n            android:textAlignment=\"center\" /\u003e\n\n        \u003cTextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textAppearance=\"?android:attr/textAppearanceMedium\"\n            android:text=\"ID\"\n            android:id=\"@+id/id\"\n            android:layout_below=\"@+id/event\"\n            android:textAlignment=\"center\" /\u003e\n\n        \u003ccom.github.curioustechizen.ago.RelativeTimeTextView\n            android:id=\"@+id/timestamp\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textAppearance=\"?android:attr/textAppearanceSmall\"\n            android:layout_below=\"@+id/id\"\n            android:textAlignment=\"center\" /\u003e\n\n        \u003cTextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Data\"\n            android:id=\"@+id/data\"\n            android:layout_below=\"@+id/timestamp\"\n            android:textAlignment=\"center\"\n            android:layout_marginTop=\"8dp\" /\u003e\n    \u003c/RelativeLayout\u003e\n\n\u003c/android.support.v7.widget.CardView\u003e\n```\n\nHere we're using a [CardView](https://developer.android.com/reference/android/support/v7/widget/CardView.html) to show the information inside a card, with shadows and rounded corners. For each item, we're going to present:\n\n- A `TextView` for the name of the event (*created*, *updated*, or *deleted*).\n- A `TextView` for the ID of the record (for example, *c2d6*).\n- A [RelativeTimeTextView](https://github.com/curioustechizen/android-ago), a custom `TextView` that displays the relative time with respect to the reference point (the moment the event is received), automatically refreshing the text as needed.\n- A `TextView` for the data contained in the record (anything the user sends, for example, *Temperature: 80°F*).\n \nNow, to store the information of each event, let's create a class, [com.pusher.feed.Event](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/java/com/pusher/feed/Event.java):\n\n```\npublic class Event  {\n    private String name;\n    private String id;\n    private String data;\n\n    public Event(String name, String eventId, String data) {\n        this.name = name;\n        this.id = eventId;\n        this.data = data;\n    }\n\n    // Getters and setters\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getData() {\n        return data;\n   }\n}\n```\n\n`RecyclerView` works with an [Adapter](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html) to manage the items of its data source (in this case a list of `Event` instances), and a [ViewHolder](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewHolder.html) to hold a view representing a single list item, so first create the class [com.pusher.feed.EventAdapter](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/java/com/pusher/feed/EventAdapter.java) with the following code:\n\n```\npublic class EventAdapter extends RecyclerView.Adapter\u003cEventAdapter.EventViewHolder\u003e {\n    private List\u003cEvent\u003e items;\n\n    public EventAdapter(List\u003cEvent\u003e items) {\n        this.items = items;\n    }\n\n    public void addEvent(Event event) {\n        // Add the event at the beginning of the list\n        items.add(0, event);\n        // Notify the insertion so the view can be refreshed\n        notifyItemInserted(0);\n    }\n\n    @Override\n    public int getItemCount() {\n        return items.size();\n    }\n\n    @Override\n    public EventViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n\n    }\n\n    @Override\n    public void onBindViewHolder(EventViewHolder viewHolder, int i) {\n\n    }\n}\n```\n\nWe initialize the class with a list of `Event`, provide a method to add `Event` instances at the beginning of the list (`addEvent(Event)`) and then notify the insertion so the view can be refreshed, and implement `getItemCount` so it returns the size of the list.\n\nThen, let's add the `ViewHolder` as an inner class, it references the `View` components for each item in the list:\n\n```\npublic class EventAdapter extends RecyclerView.Adapter\u003cEventAdapter.EventViewHolder\u003e {\n    private ArrayList\u003cEvent\u003e items;\n\n    public static class EventViewHolder extends RecyclerView.ViewHolder {\n        // Card fields\n        public TextView event;\n        public TextView id;\n        public RelativeTimeTextView timestamp;\n        public TextView data;\n\n        public EventViewHolder(View v) {\n            super(v);\n            event = (TextView) v.findViewById(R.id.event);\n            id = (TextView) v.findViewById(R.id.id);\n            timestamp = (RelativeTimeTextView) v.findViewById(R.id.timestamp);\n            data = (TextView) v.findViewById(R.id.data);\n        }\n    }\n\n    ...\n}\n```\n\nAnd implement the methods `onCreateViewHolder` and `onBindViewHolder`:\n\n```\npublic class EventAdapter extends RecyclerView.Adapter\u003cEventAdapter.EventViewHolder\u003e {\n    ...\n\n    @Override\n    public EventViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n        View v = LayoutInflater.from(viewGroup.getContext())\n                .inflate(R.layout.event_row, viewGroup, false);\n\n        return new EventViewHolder(v);\n    }\n\n    @Override\n    public void onBindViewHolder(EventViewHolder viewHolder, int i) {\n        Event event = items.get(i);\n\n        viewHolder.event.setText(event.getName());\n        viewHolder.id.setText(event.getId());\n        viewHolder.timestamp.setReferenceTime(System.currentTimeMillis());\n        viewHolder.data.setText(event.getData());\n    }\n}\n```\n\nIn the `onCreateViewHolder` method, we inflate the layout with the content of the `event_row.xml` file we created earlier, and in `onBindViewHolder`, we set the values of the views with the event in turn. Notice how we set the reference time on `RelativeTimeTextView` so it can display a text like *Just now* or *10 minutes ago*.\n\nIn the class [com.pusher.feed.MainActivity](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/java/com/pusher/feed/MainActivity.java), let's start by defining the private fields we're going to need:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    private RecyclerView.LayoutManager lManager;\n    private EventAdapter adapter;\n    private Pusher pusher = new Pusher(\"ENTER_PUSHER_APP_KEY_HERE\");\n    private static final String CHANNEL_NAME = \"events_to_be_shown\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ....\n    }\n}\n```\n\n`RecyclerView` works with a [LayoutManager](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.html) to handle the layout and scroll direction of the list. We declare the `EventAdapter`, the `Pusher` object and the identifier for the Pusher channel. Remember to replace your Pusher app key, if you still don't have one, this would be a good time to [sign up for a free account](https://pusher.com/signup) and [create you app](https://dashboard.pusher.com).\n\nInside the `onCreate` method, let's assign a [LinearLayoutManager](https://developer.android.com/reference/android/support/v7/widget/LinearLayoutManager.html) to the `RecyclerView` and create the `EventAdapter` with an empty list:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // Get the RecyclerView\n        RecyclerView recycler = (RecyclerView) findViewById(R.id.recycler_view);\n\n        // Use LinearLayout as the layout manager\n        lManager = new LinearLayoutManager(this);\n        recycler.setLayoutManager(lManager);\n\n        // Set the custom adapter\n        List\u003cEvent\u003e eventList = new ArrayList\u003c\u003e();\n        adapter = new EventAdapter(eventList);\n        recycler.setAdapter(adapter);\n    }\n}\n```\n\nFor the Pusher part, we first subscribe to the channel:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...\n\n        Channel channel = pusher.subscribe(CHANNEL_NAME);\n}\n```\n\nThen, we create the listener that will be executed when an event arrives:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n    ...\n    SubscriptionEventListener eventListener = new SubscriptionEventListener() {\n            @Override\n            public void onEvent(String channel, final String event, final String data) {\n                runOnUiThread(new Runnable() {\n                    @Override\n                    public void run() {\n                        System.out.println(\"Received event with data: \" + data);\n                        Gson gson = new Gson();\n                        Event evt = gson.fromJson(data, Event.class);\n                        evt.setName(event + \":\");\n                        adapter.addEvent(evt);\n                        ((LinearLayoutManager)lManager).scrollToPositionWithOffset(0, 0);\n                    }\n                });\n            }\n        };\n    }\n}\n```\n\nHere, the JSON string that we receive is converted to an `Event` object, the name of the event is set to the name of the event received, and the object is added to the adapter. Finally, we move to the top of the list.\n\nNext, bind the events to this listener and call the `connect` method on the Pusher object:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...\n        channel.bind(\"created\", eventListener);\n        channel.bind(\"updated\", eventListener);\n        channel.bind(\"deleted\", eventListener);\n\n        pusher.connect();\n    }\n}\n```\n\nThe `connect` method can take a listener that can be helpful to debug problems you might have:\n\n```\npusher.connect(new ConnectionEventListener() {\n    @Override\n    public void onConnectionStateChange(ConnectionStateChange change) {\n        System.out.println(\"State changed to \" + change.getCurrentState() +\n            \" from \" + change.getPreviousState());\n    }\n\n   @Override\n    public void onError(String message, String code, Exception e) {\n        System.out.println(\"There was a problem connecting!\");\n        e.printStackTrace();\n    }\n});\n```\n\nFinally, `MainActivity` also needs to implement the `onDestroy()` method so we can have the opportunity to unsubscribe from Pusher when the activity is destroyed:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        pusher.disconnect();\n    }\n}\n```\n\nAnd that's all the code on the Android part. Let's test it.\n\n## Testing the app\n\nExecute the app, either on a real device or a virtual one:\n\n![activity-feed-android-deploy-app](//images.contentful.com/1es3ne0caaid/CFHd4HGgfYmmOc42MgO40/f530f27b6586deb77c4d711817697e80/activity-feed-android-deploy-app.png)\n\nYou'll be presented with an almost blank screen:\n\n![activity-feed-android-app](//images.contentful.com/1es3ne0caaid/63EKVtRYqcssUa6MmcwGY4/27d4d24fdb3dc81d4366dba37fc441f1/activity-feed-android-app.png)\n\nFor the back-end, you can use something to call the API endpoints with a JSON payload, like [cURL](https://curl.haxx.se/):\n\n``` \n# POST\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"data\":\"Temperature: 80°F\"}' http://localhost:3000/api\n# PUT\ncurl -H \"Content-Type: application/json\" -X PUT -d '{\"data\":\"Temperature: 85°F\"}' http://localhost:3000/api/aqw3\n# DELETE\ncurl -X DELETE http://localhost:3000/api/aqw3\n\n# In Windows, change single quotes to quotation marks and escape the ones inside curly brackets\ncurl -H \"Content-Type: application/json\" -X POST -d \"{\\\"data\\\":\\\"Temperature: 80°F\\\"}\" http://localhost:3000/api\n\n# Or use file, for example data.json\ncurl -H \"Content-Type: application/json\" -X POST --data @data.json http://localhost:3000/api\n```\n\nOr use a tool like [Postman](https://www.getpostman.com/):\n\n![activity-feed-android-postman](//images.contentful.com/1es3ne0caaid/3jUxsuEEgUM8c6mmEwiuGU/ab37f83253c98a637d66b8837a45baf9/activity-feed-android-postman.png)\n\nWhen a request is received on the API side, the event will show up in the app:\n\n![activity-feed-android-app-test](//images.contentful.com/1es3ne0caaid/4XKXil7es0EGkICAqgUA4S/cb52327f73792a6adb269b506bbd36fa/activity-feed-android-app-test.png)\n\nOr if you only want to test the app, you can use the [Pusher Debug Console on your dashboard](http://dashboard.pusher.com/):\n\n![activity-feed-android-pusher-debug-console](//images.contentful.com/1es3ne0caaid/74tDZ8NMlyosmg6MU6kWIG/1cfe3514ad6666e8578c3e196a53431b/activity-feed-android-pusher-debug-console.png)\n\n## Conclusion\n\nHopefully, this tutorial has shown you in an easy way how to build an activity feed for Android apps with Pusher. You can improve the app by changing the design, showing more information, or saving it to a database.\n\n## Further reading\n\n- [Pusher Java client](https://github.com/pusher/pusher-websocket-java)\n- [Android-ago](https://github.com/curioustechizen/android-ago)\n- [Activity's lifecycle](https://developer.android.com/guide/components/activities/activity-lifecycle.html)\n- [Creating Lists and Cards](https://developer.android.com/training/material/lists-cards.html)","metaTitle":"Build an activity feed in Android ","metaDescription":"Build a live activity feed in Android using Java, Node.js and Pusher for the realtime features."}}],"defaultValue":"Node.js","queryType":"tag","pages":19,"route":"/tutorials","query":{"tag":"Node.js","page":"14"}}},"page":"/tutorials","query":{"tag":"Node.js","page":"14"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Node.js&page=14 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:45:40 GMT -->
</html>