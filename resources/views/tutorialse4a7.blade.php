<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?page=21 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:43 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1">Learn &amp; Discover Pusher</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="1v9vy9q">.css-1v9vy9q{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;text-align:center;}@media all and (min-width:400px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1v9vy9q a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1v9vy9q a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:400px){.css-1v9vy9q{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1v9vy9q{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1v9vy9q{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1v9vy9q{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}</style><p scale="h5" class="css-1v9vy9q e5jrto45"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">447</span> tutorials to help you build great apps</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials0e67.html?product=Channels" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials1bbb.html?product=Beams" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value=""/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:none;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/react-jest-enzyme.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to unit test React applications with Jest and Enzyme</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This tutorial provides an introduction to unit testing React code using Jest and Enzyme. You will create a simple sample...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/cms-laravel-vue-part-6.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a CMS with Laravel and Vue - Part 6: Adding Realtime Comments</h3><p class="css-k12xad e5jrto45">This six part tutorial series will guide you through building a CMS using Laravel and Vue.js. The final product will inc...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/cms-laravel-vue-part-5.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a CMS with Laravel and Vue - Part 5: Completing our dashboards</h3><p class="css-k12xad e5jrto45">This six part tutorial series will guide you through building a CMS using Laravel and Vue.js. The final product will inc...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/presence-channels-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Implement online presence in a Laravel application</h3><p class="css-k12xad e5jrto45">This tutorial shows how to implement online presence and realtime updates in a Laravel application. You will use Laravel...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/cms-laravel-vue-part-4.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a CMS with Laravel and Vue - Part 4: Building the dashboard </h3><p class="css-k12xad e5jrto45">This six part tutorial series will guide you through building a CMS using Laravel and Vue.js. The final product will inc...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/search-laravel-vue.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live search feature with Laravel and Vue.js</h3><p class="css-k12xad e5jrto45">This short tutorial will show you how to build a simple live search feature using Laravel, Vue.js and SQLite. Users will...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/type-check-react-flow.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Type checking React Apps with Flow</h3><p class="css-k12xad e5jrto45">This brief tutorial introduces the concept of type checking. It discusses why it is helpful in dynamically typed languag...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/cms-laravel-vue-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a CMS with Laravel and Vue - Part 3: Building an API</h3><p class="css-k12xad e5jrto45">This six part tutorial series will guide you through building a CMS using Laravel and Vue.js. The final product will inc...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-news-feed-react.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live news feed with React</h3><p class="css-k12xad e5jrto45">This brief tutorial will show you how to build a live news feed app using React and Node.js. You will integrate NewAPI t...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsf62c.html?page=20" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials2679.html?page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials7537.html?page=19" class="css-za1ua3 edg0byb1">19</a><a href="tutorialsf62c.html?page=20" class="css-za1ua3 edg0byb1">20</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialse4a7.html?page=21" class="css-2wakph edg0byb1">21</a><a href="tutorials3c09.html?page=22" class="css-za1ua3 edg0byb1">22</a><a href="tutorials89ae.html?page=23" class="css-za1ua3 edg0byb1">23</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials02d1.html?page=50" class="css-5s6711 edg0byb1">50</a><a href="tutorials3c09.html?page=22" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":447,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"13AXhgYlHmE2mouUa6kM2C","type":"Entry","createdAt":"2018-10-11T21:52:44.601Z","updatedAt":"2018-10-11T21:52:44.601Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to unit test React applications with Jest and Enzyme","url":"react-jest-enzyme","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/jest-react","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-10-11","description":"This tutorial provides an introduction to unit testing React code using Jest and Enzyme. You will create a simple sample app and write tests for it, including snapshot tests to monitor for UI changes.","prerequisite":"You will need Node 6+ and Yarn installed on your machine.","content":"Writing automated tests is very important in any real world project, but it can been notoriously difficult to figure out especially in the frontend world.\n\nJest is a testing tool from Facebook that makes it easy to perform unit testing in JavaScript. Enzyme on the other hand, is React specific. It provides a bunch of helpful methods that enhance how we test React components.\n\nLet’s take a look at how Jest and Enzyme can be leveraged to create more robust React applications\n\n## Prerequisites\n\nTo follow through with this tutorial, you need [Node.js](https://nodejs.org/en/download/) (v6 and above) and [npm](https://www.npmjs.com/get-npm) installed on your machine. You also need to install `yarn` since that’s what `create-react-app` uses.\n\n```\n    npm install -g yarn\n```\n\n## Set up a React application\n\nBefore we can write any tests, we need to create an application we can test. We’ll create a simple counter app that increments a count once a button is clicked. Let’s bootstrap the project with [create-react-app](https://github.com/facebook/create-react-app) so we can get up and running with minimal fuss.\n\nInstall `create-react-app` by running the following command in your terminal:\n\n```\n    npm install -g create-react-app\n```\n\nThen create your React app with the following command:\n\n```\n    create-react-app counter-app\n```\n\nOnce the application has been created, `cd` into the `counter-app` directory and run `yarn start` to launch the development server. You should see a message confirming successful compilation and the ports where you can access the app.\n\n![react-jest-create-react-app](//images.ctfassets.net/1es3ne0caaid/1PZJVTnWvCe4kYsO4QQwUm/72f7e5bc3249ce05ba3d3901b6b51bd2/react-jest-create-react-app.png)\n\nNow, open the `counter-app` folder in your favorite text editor and locate `src/App.js`. Change its contents to look like this:\n\n``` javascript\n    // src/App.js\n    \n    import React, { Component } from 'react';\n    \n    class App extends Component {\n      constructor() {\n        super();\n        this.state = {\n          count: 0,\n        }\n      }\n    \n      makeIncrementer = amount =\u003e () =\u003e\n        this.setState(prevState =\u003e ({\n          count: prevState.count + amount,\n        }));\n    \n      increment = this.makeIncrementer(1);\n    \n      render() {\n        return (\n          \u003cdiv\u003e\n            \u003cp\u003eCount: {this.state.count}\u003c/p\u003e\n            \u003cbutton className=\"increment\" onClick={this.increment}\u003eIncrement count\u003c/button\u003e\n          \u003c/div\u003e\n        )\n      }\n    }\n    \n    export default App;\n```\n\nOur React app has some initial state `count` which is set to zero, and a button that, once clicked, increments this `count` state through the `increment` function which simply adds 1 to the value of `count` and updates the application state.\n\n## Jest basics\n\nNormally, we’d need to install and configure Jest before writing any tests, but since `create-react-app` ships with Jest already installed, we don’t have to do any of that. We can jump straight into writing our first test.\n\nIf you look at the `src/App.test.js`, you will see that a test has already been written for us. It tests that the App component can render without crashing.\n\n``` javascript\n    // src/App.test.js\n    \n    import React from 'react';\n    import ReactDOM from 'react-dom';\n    import App from './App';\n    \n    it('renders without crashing', () =\u003e {\n      const div = document.createElement('div');\n      ReactDOM.render(\u003cApp /\u003e, div);\n      ReactDOM.unmountComponentAtNode(div);\n    });\n```\n\nLet’s add a dummy test below this one in `App.test.js`:\n\n``` javascript\n    // src/App.test.js\n    \n    ...\n    \n    describe('Addition', () =\u003e {\n      it('knows that 2 and 2 make 4', () =\u003e {\n        expect(2 + 2).toBe(4);\n      });\n    });\n```\n\nWe can go ahead and run both tests using the `yarn test` command which runs `jest` under the hood. A success message should be printed out on the screen:\n\n![react-jest-yarn-test](//images.ctfassets.net/1es3ne0caaid/2V2GlYqI7uAyw6G084mw4K/d6be638fa0cc9623b0008f3575c084b6/react-jest-yarn-test.png)\n\nNow, let’s change one of the tests so that it fails. Within `src/App.test.js`, change the `Addition` test to look like this:\n\n``` javascript\n    // src/App.test.js\n    \n    describe('Addition', () =\u003e {\n      it('knows that 2 and 2 make 4', () =\u003e {\n        expect(2 + 2).toBe(5);\n      });\n    });\n```\n\nCheck your terminal output. You can see that the first test passes as before while the second one fails, and the reason for the failure is also printed.\n\n![react-jest-test-2](//images.ctfassets.net/1es3ne0caaid/522iguoaQ8mSyS4MGmwa20/924068fabc995ced9e3fd5de1e4d05a8/react-jest-test-2.png)\n\nA `describe()` function groups related tests together inside one test suite. It takes a `name` parameter, which should describe the component you’re testing, and a callback function where individual tests are defined with `it`.\n\nYou might see individual tests with `test` in some projects. To be sure, `it` and `test` are [one and the same thing](https://jestjs.io/docs/en/api.html#testname-fn-timeout). `it` is only an alias for `test`.\n\n``` javascript\n    // src/App.test.js\n    \n    describe('Addition', () =\u003e {\n      it('knows that 2 and 2 make 4', () =\u003e {\n        expect(2 + 2).toBe(4);\n      });\n      \n      // is equaivalent to\n      \n      test('knows that 2 and 2 make 4', () =\u003e {\n        expect(2 + 2).toBe(4);\n      });\n    });\n```\n\nWhat you want to test is wrapped in a call to the `expect()` function, before calling what is termed a “matcher” function on it. In the above example, `toBe()` is the matcher function used. It checks that the value provided equals the value that the code within the `expect()` function produces.\n\n\n## Writing your first test\n\nBefore we begin writing our own tests, we need to add a few packages to our application for it to be able to test via Enzyme’s shallow renderer:\n\n```\n    yarn add enzyme enzyme-adapter-react-16 --dev\n```\n\nEnzyme is built to support different versions of React. In this tutorial, I’m using the latest stable version of React which is 16.4.2, but you might be working with an older version of React, say React 15.x. So you also have to install an Adapter that corresponds to the version of React that you are using.\n\nYou also need to create a `setupTests.js` file within your `src` folder that tells Jest and Enzyme what Adapters you will be making use of. `create-react-app` has been configured to run this file automatically before any of our tests, so that Enzyme is set up correctly.\n\n``` javascript\n    // src/setupTests.js\n    \n    import { configure } from 'enzyme';\n    import Adapter from 'enzyme-adapter-react-16';\n    \n    configure({ adapter: new Adapter() });\n```\n\nNow, can can begin writing tests for our application. Jump to `src/App.test.js` and change its contents to look like this:\n\n``` javascript\n    // src/App.test.js\n    \n    import React from 'react';\n    import { shallow } from 'enzyme';\n    import App from './App';\n    \n    describe('App component', () =\u003e {\n      it('starts with a count of 0', () =\u003e {\n        const wrapper = shallow(\u003cApp /\u003e);\n        const text = wrapper.find('p').text();\n        expect(text).toEqual('Count: 0');\n      });\n    });\n```\n\nWe’re taking advantage of Enzyme’s shallow rendering to test our app’s initial state. A shallow render is a simulated render of a component tree that does not require a DOM. It renders only one level of components deep, and enables the inspection of the component’s contents as well as the simulation of user interaction.\n\nIn the above snippet, the shallow render of our `App` component is stored in the `wrapper` variable. We then grab the text inside the `p` tag within the component’s output and check if the text is the same was what we passed into the `toEqual` matcher function.\n\n![react-jest-test-3](//images.ctfassets.net/1es3ne0caaid/3Yl6wnqWs8QeQy40Q4WEgW/ac252bb25abf0e93265ed82af3bcbc10/react-jest-test-3.png)\n\n\n## Testing user interaction\n\nLet’s go ahead and write a new test that simulates a click on the button and confirms that the count output is incremented by 1.\n\nAdd this below the first test:\n\n``` javascript\n    // src/App.test.js\n    \n    describe('App component', () =\u003e {\n      ...\n      \n      it('increments count by 1 when the increment button is clicked', () =\u003e {\n        const wrapper = shallow(\u003cApp /\u003e);\n        const incrementBtn = wrapper.find('button.increment');\n        incrementBtn.simulate('click');\n        const text = wrapper.find('p').text();\n        expect(text).toEqual('Count: 1');\n      });\n    });\n```\n\nThe `simulate()` function on the `button` variable can simulate a number of DOM events on an element. Here we are simulating the `click` event on the button. We’ve also set up an expectation that the `count` should be equal to now.\n\nIf you check the terminal  output, you should observe that the test passes as expected.\n\nLet’s go ahead and do something a bit different. We’ll add a test for some functionality that doesn’t exist yet, then go ahead and write the code to make the test pass. This methodology of writing tests before the code is known as Test Driven Development (TDD).\n\nCreate another test within the `describe()` function that looks like this:\n\n``` javascript\n    // src/App.test.js\n    \n    describe('App component', () =\u003e {\n      ...\n    \n      it('decrements count by 1 when the decrement button is clicked', () =\u003e {\n        const wrapper = shallow(\u003cApp /\u003e);\n        const decrementBtn = wrapper.find('button.decrement');\n        decrementBtn.simulate('click');\n        const text = wrapper.find('p').text();\n        expect(text).toEqual('Count: -1');\n      });\n    });\n```    \n\nNow you should have a failing test in the terminal: `Method` `\"``simulate``\"` `is only meant to be run on a single node. 0 found instead`. If you’re not used to Enzyme, you might find the error message rather cryptic. What it means is that the `simulate()` method was called on an element that doesn’t exist yet.\n\n![react-jest-test-4](//images.ctfassets.net/1es3ne0caaid/639ywJe0YEwCige8isMQkK/e20fb45c60bf530f6295cd1eba1d22cb/react-jest-test-4.png)\n\nLet’s now go into the React component and write the code that will fix this test:\n\n``` javascript\n    // src/App.js\n    \n    import React, { Component } from 'react';\n    \n    class App extends Component {\n      constructor() {\n        super();\n        this.state = {\n          count: 0,\n        }\n      }\n    \n      makeIncrementer = amount =\u003e () =\u003e\n        this.setState(prevState =\u003e ({\n          count: prevState.count + amount,\n        }));\n    \n      increment = this.makeIncrementer(1);\n    \n      decrement = this.makeIncrementer(-1);\n    \n      render() {\n        return (\n          \u003cdiv\u003e\n            \u003cp\u003eCount: {this.state.count}\u003c/p\u003e\n            \u003cbutton className=\"increment\" onClick={this.increment}\u003eIncrement count\u003c/button\u003e\n            \u003cbutton className=\"decrement\" onClick={this.decrement}\u003eDecrement count\u003c/button\u003e\n          \u003c/div\u003e\n        )\n      }\n    }\n    \n    export default App;\n```\n\nWe added a decrement button after the increment button in the `render()` function and a `decrement()` function that decreases the value of `count` by 1 and updates the application state. At this point, all three tests should pass successfully.\n\n\n## Testing React components with snapshots\n\nSnapshot testing helps you check that the rendered output of a component is correct at all times. When you run a snapshot test, Jest renders the React component being tested and stores the output in a JSON file. \n\nOn further test runs, Jest will check that the output of the component has not deviated from what it saved previously. If you change the a component’s output, Jest will notify you and you can either update the snapshot to the latest version or fix the component so that it matches the snapshot again. This method of testing components helps you avoid accidental changes to your components because Jest will always notify you when a difference is detected.\n\nTo use Jest’s snapshot feature, we need an additional package, [react-test-renderer](https://www.npmjs.com/package/react-test-renderer), which can be installed through yarn:\n\n```\n    yarn add react-test-renderer --dev\n```\n\nThen import it at the top of `App.test.js`:\n\n``` javascript\n    // src/App.test.js\n    \n    import renderer from 'react-test-renderer';\n    \n    ...\n```\n\nNext, create a test below all the previously created ones:\n\n``` javascript\n    // src/App.test.js\n    \n    it('matches the snapshot', () =\u003e {\n      const tree = renderer.create(\u003cApp /\u003e).toJSON();\n      expect(tree).toMatchSnapshot();\n    });\n```\n\nThe first time this test is run, there is no snapshot for this component so Jest creates it. You can inspect the contents of the snapshots inside the `src/__snapshots__` directory. \n\nOpen up `App.test.js.snap`:\n\n``` html\n    // src/__snapshots__/App.test.js.snap\n    \n    // Jest Snapshot v1, https://goo.gl/fbAQLP\n    \n    exports[`App component matches the snapshot 1`] = `\n    \u003cdiv\u003e\n      \u003cp\u003e\n        Count: \n        0\n      \u003c/p\u003e\n      \u003cbutton\n        className=\"increment\"\n        onClick={[Function]}\n      \u003e\n        Increment count\n      \u003c/button\u003e\n      \u003cbutton\n        className=\"decrement\"\n        onClick={[Function]}\n      \u003e\n        Decrement count\n      \u003c/button\u003e\n    \u003c/div\u003e\n    `;\n```\n\nYou can see that the rendered output of the `App` component is saved in this file. The next time this test is run, Jest will confirm that the outputs are the same. We can demonstrate this concept by changing the rendered output of `App` slightly.\n\nLet’s assume that we accidentally changed the text of the increment button in `App.js` to **Increment count2**. The test should fail.\n\n![react-jest-test-5](//images.ctfassets.net/1es3ne0caaid/lSUi71Xrfq00UO68igAgG/5acf6b40a5216ed379b3653486541566/react-jest-test-5.png)\n\nSince we didn’t intend to make this change, we can simply undo the change and the test will pass again. \n\nLet’s make an actual change to the `App` component. Change the text of the increment button to **Increment** and the decrement button to **Decrement.** Your render function should look like this:\n\n``` javascript\n    // src/App.js\n    \n    render() {\n      return (\n        \u003cdiv\u003e\n          \u003cp\u003eCount: {this.state.count}\u003c/p\u003e\n          \u003cbutton className=\"increment\" onClick={this.increment}\u003eIncrement\u003c/button\u003e\n          \u003cbutton className=\"decrement\" onClick={this.decrement}\u003eDecrement\u003c/button\u003e\n        \u003c/div\u003e\n      )\n    }\n```\n\nThe tests should fail again. But since we actually intended to make this change, we need to update the snapshot to this latest version. We can do so by pressing `u` in the terminal window where the tests are being run. Everything should be green again!\n\n## Conclusion\n\nWe’ve looked at how Jest makes testing React components much easier and how you can use it in conjunction with Enzyme for unit testing and snapshot testing. You can grab all the code written in this tutorial [on GitHub](https://github.com/ayoisaiah/jest-react) for you to check out and run locally.","metaTitle":"How to unit test React applications with Jest and Enzyme","metaDescription":"Use Jest and Enzyme to run unit tests on a simple React app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"13YOGkybUAwmS4YIIysMSg","type":"Entry","createdAt":"2018-10-10T23:22:44.748Z","updatedAt":"2020-06-19T10:35:43.939Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a CMS with Laravel and Vue - Part 6: Adding Realtime Comments","url":"cms-laravel-vue-part-6","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/laravel-vue-cms","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-10-10","description":"This six part tutorial series will guide you through building a CMS using Laravel and Vue.js. The final product will include authentication, user roles, post creation and editing, and a realtime comments feature. In part six, add support for comments, including realtime updates.","prerequisite":"Basic knowledge of Laravel and Vue will be helpful. ","content":"In the [previous part](https://pusher.com/tutorials/cms-laravel-vue-part-5) of this series, we finished building the backend of the application using Vue. We were able to add the create and update component, which is used for creating a new post and updating an existing post.\n\nHere’s a screen recording of what we have been able to achieve:\n\n![laravel-vue-cms-demo-part-5](//images.ctfassets.net/1es3ne0caaid/3JaTirkHiEWyiOQCCqCu8g/99bd64562e3b0fc1a2ca835e3f323ee8/laravel-vue-cms-demo-part-5.gif)\n\nIn this final part of the series, we will be adding support for comments. We will also ensure that the comments on each post are updated in realtime, so a user doesn’t have to refresh the page to see new comments. \n\nWhen we are done, our application will have new features and will work like this:\n\n![laravel-vue-cms-demo-part-6](//images.ctfassets.net/1es3ne0caaid/2mEM9OrtLmEOGEUQe8iusG/25df38d5f7fee007f23d35ee72ed24c4/laravel-vue-cms-demo-part-6.gif)\n  \n## Prerequisites\n\nTo follow along with this series, a few things are required:\n\n\n- A Pusher account. Sign up [here](https://pusher.com).\n- Basic knowledge of PHP.\n- Basic knowledge of the [Laravel](https://laravel.com) framework.\n- Basic knowledge of JavaScript (ES6 syntax).\n- Basic knowledge of [Vue](https://vuejs.org).\n\n\n## Adding comments to the backend\n\nWhen we were creating the API, we did not add the support for comments to the post resource, so we will have to do so now. Open the API project in your text editor as we will be modifying the project a little.\n\nThe first thing we want to do is create a model, controller, and a migration for the comment resource. To do this, open your terminal and `cd` to the project directory and run the following command:\n\n```\n    $ php artisan make:model Comment -mc\n```\n\nThe command above will create a model called `Comment`, a controller called `CommentController`, and a migration file in the `database/migrations` directory.\n\n### Updating the comments migration file\n\nTo update the comments migration navigate to the `database/migrations` folder and find the newly created migration file for the `Comment` model. Let’s update the `up()` method in the file:\n\n``` php\n    // File: ./database/migrations/*_create_comments_table.php\n    public function up()\n    {\n        Schema::create('comments', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003etimestamps();\n            $table-\u003einteger('user_id')-\u003eunsigned();\n            $table-\u003einteger('post_id')-\u003eunsigned();\n            $table-\u003etext('body');\n        });\n    }\n```\n\nWe included `user_id` and `post_id` fields because we intend to create a link between the comments, users, and posts. The `body` field will contain the actual comment.\n\n### Defining the relationships among the Comment, User, and Post models\n\nIn this application, a comment will belong to a user and a post because a user can make a comment on a specific post, so we need to define the relationship that ties everything up.\n\nOpen the `User` model and include this method:\n\n``` php\n    // File: ./app/User.php\n    public function comments()\n    {\n        return $this-\u003ehasMany(Comment::class);\n    }\n```\n\nThis is a relationship that simply says that a user can have many comments. Now let’s define the same relationship on the `Post` model. Open the `Post.php` file and include this method:\n\n``` php\n    // File: ./app/Post.php\n    public function comments()\n    {\n        return $this-\u003ehasMany(Comment::class);\n    }\n```\n\nFinally, we will include two methods in the `Comment` model to complete the second half of the relationships we defined in the `User` and `Post` models. \n\nOpen the `app/Comment.php` file and include these methods:\n\n``` php\n    // File: ./app/Comment.php\n    public function user()\n    {\n        return $this-\u003ebelongsTo(User::class);\n    }\n    \n    public function post()\n    {\n        return $this-\u003ebelongsTo(Post::class);\n    }\n```\n\nSince we want to be able to mass assign data to specific fields of a comment instance during comment creation, we will include this array of permitted assignments in the `app/Comment.php` file:\n\n``` php\n    protected $fillable = ['user_id', 'post_id', 'body'];\n```\n\nWe can now run our database migration for our comments:\n\n```\n    $ php artisan migrate\n```\n\n## Configuring Laravel to broadcast events using Pusher\n\nWe already said that the comments will have a realtime functionality and we will be building this using Pusher, so we need to enable Laravel’s event broadcasting feature. \n\nOpen the `config/app.php` file and uncomment the following line in the `providers` array:\n\n```\n    App\\Providers\\BroadcastServiceProvider\n```\n\nNext, we need to configure the broadcast driver in the `.env` file:\n\n```\n    BROADCAST_DRIVER=pusher\n```\n\nLet’s pull in the Pusher PHP SDK using composer:\n\n```\n    $ composer require pusher/pusher-php-server\n```\n\n### Configuring Pusher\n\nFor us to use Pusher in this application, it is a prerequisite that you have a Pusher account. You can create a free Pusher account [here](https://pusher.com/signup) then login to your dashboard and create an app.\n\nOnce you have created an app, we will use the app details to configure pusher in the `.env` file:\n\n```\n    PUSHER_APP_ID=xxxxxx\n    PUSHER_APP_KEY=xxxxxxxxxxxxxxxxxxxx\n    PUSHER_APP_SECRET=xxxxxxxxxxxxxxxxxxxx\n    PUSHER_APP_CLUSTER=xx\n```\n\nUpdate the Pusher keys with the app credentials provided for you under the **Keys** section on the **Overview** tab on the Pusher dashboard.\n\n\n## Broadcasting an event for when a new comment is sent\n\nTo make the comment update realtime, we have to broadcast an event based on the comment creation activity. We will create a new event and call it `CommentSent`. It is to be fired when there is a successful creation of a new comment. \n\nRun command in your terminal:\n\n```\n    php artisan make:event CommentSent\n```\n\nThere will be a newly created file in the `app\\Events` directory, open the `CommentSent.php` file and ensure that it implements the `ShouldBroadcast` interface. \n\nOpen and replace the file with the following code:\n\n``` php\n    // File: ./app/Events/CommentSent.php\n    \u003c?php \n    \n    namespace App\\Events;\n    \n    use App\\Comment;\n    use App\\User;\n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Broadcasting\\PrivateChannel;\n    use Illuminate\\Broadcasting\\PresenceChannel;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n    \n    class CommentSent implements ShouldBroadcast\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n    \n        public $user;\n        \n        public $comment;\n    \n        public function __construct(User $user, Comment $comment)\n        {\n            $this-\u003euser = $user;\n            \n            $this-\u003ecomment = $comment;\n        }\n        \n        public function broadcastOn()\n        {\n            return new PrivateChannel('comment');\n        }\n    }\n```\n\nIn the code above, we created two public properties, `user` and `comment`, to hold the data that will be passed to the channel we are broadcasting on. We also created a private channel called `comment`. We are using a private channel so that only authenticated clients can subscribe to the channel.\n\n### Defining the routes for handling operations on a comment\n\nWe created a controller for the comment model earlier but we haven’t defined the web routes that will redirect requests to be handled by that controller.\n\nOpen the `routes/web.php` file and include the code below:\n\n``` php\n    // File: ./routes/web.php\n    Route::get('/{post}/comments', 'CommentController@index');\n    Route::post('/{post}/comments', 'CommentController@store');\n```\n\n### Setting up the action methods in the CommentController\n\nWe need to include two methods in the `CommentController.php` file, these methods will be responsible for storing and retrieving methods. In the `store()` method, we will also be broadcasting an event when a new comment is created.\n\nOpen the `CommentController.php` file and replace its contents with the code below:\n\n``` php\n    // File: ./app/Http/Controllers/CommentController.php\n    \u003c?php \n    \n    namespace App\\Http\\Controllers;\n    \n    use App\\Comment;\n    use App\\Events\\CommentSent;\n    use App\\Post;\n    use Illuminate\\Http\\Request;\n    \n    class CommentController extends Controller\n    {\n        public function store(Post $post)\n        {\n            $this-\u003evalidate(request(), [\n                'body' =\u003e 'required',\n            ]);\n            \n            $user = auth()-\u003euser();\n    \n            $comment = Comment::create([\n                'user_id' =\u003e $user-\u003eid,\n                'post_id' =\u003e $post-\u003eid,\n                'body' =\u003e request('body'),\n            ]);\n    \n            broadcast(new CommentSent($user, $comment))-\u003etoOthers();\n    \n            return ['status' =\u003e 'Message Sent!'];\n        }\n        \n        public function index(Post $post)\n        {\n            return $post-\u003ecomments()-\u003ewith('user')-\u003eget();\n        }\n    }\n```\n\nIn the `store` method above, we are validating then creating a new post comment. After the comment has been created, we broadcast the `CommentSent` event to other clients so they can update their comments list in realtime.\n\nIn the `index` method we just return the comments belonging to a post along with the user that made the comment.\n\n### Adding a layer of authentication\n\nLet’s add a layer of authentication that ensures that only authenticated users can listen on the private `comment` channel we created. \n\nAdd the following code to the `routes/channels.php` file:\n\n``` php\n    // File: ./routes/channels.php\n    Broadcast::channel('comment', function ($user) {\n        return auth()-\u003echeck();\n    });\n```\n\n## Adding comments to the frontend \n\nIn the second article of this series, we created the view for the single post landing page in the `single.blade.php` file, but we didn’t add the comments functionality. We are going to add it now. We will be using Vue to build the comments for this application so the first thing we will do is include Vue in the frontend of our application. \n\nOpen the master layout template and include Vue to its `\u003chead\u003e` tag. Just before the `\u003ctitle\u003e` tag appears in the `master.blade.php` file, include this snippet:\n\n``` html\n    \u003c!-- File: ./resources/views/layouts/master.blade.php --\u003e\n    \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\"\u003e\n    \u003cscript src=\"{{ asset('js/app.js') }}\" defer\u003e\u003c/script\u003e\n```\n\nThe `csrf_token()` is there so that users cannot forge requests in our application. All our requests will pick the randomly generated `csrf-token` and use that to make requests. \n\n**Related:** [**CSRF in Laravel: how VerifyCsrfToken works and how to prevent attacks**](https://blog.pusher.com/csrf-laravel-verifycsrftoken/)\n\nNow the next thing we want to do is update the `resources/assets/js/app.js` file so that it includes a template for the comments view.\n\n Open the file and replace its contents with the code below:\n \n``` javascript\n    require('./bootstrap');\n    \n    import Vue          from 'vue'\n    import VueRouter    from 'vue-router'\n    import Homepage from './components/Homepage'\n    import Create   from './components/Create'\n    import Read     from './components/Read'\n    import Update   from './components/Update'\n    import Comments from './components/Comments'\n    \n    Vue.use(VueRouter)\n    \n    const router = new VueRouter({\n        mode: 'history',\n        routes: [\n            {\n                path: '/admin/dashboard',\n                name: 'read',\n                component: Read,\n                props: true\n            },\n            {\n                path: '/admin/create',\n                name: 'create',\n                component: Create,\n                props: true\n            },\n            {\n                path: '/admin/update',\n                name: 'update',\n                component: Update,\n                props: true\n            },\n        ],\n    });\n    \n    const app = new Vue({\n        el: '#app',\n        components: { Homepage, Comments },\n        router,\n    });\n```\n\nAbove we imported the `Comment` component and then we added it to the list of components in the applications Vue instance.\n\nNow create a `Comments.vue` file in the `resources/assets/js/components` directory. This is where all the code for our comment view will go. We will populate this file later on.\n\n### Installing Pusher and Laravel Echo\n\nFor us to be able to use Pusher and subscribe to events on the frontend, we need to pull in both Pusher and Laravel Echo. We will do so by running this command:\n\n```\n    $ npm install --save laravel-echo pusher-js\n```\n\n\u003e [Laravel Echo](https://github.com/laravel/echo) is a JavaScript library that makes it easy to subscribe to channels and listen for events broadcast by Laravel.\n\nNow let’s configure Laravel Echo to work in our application. In the `resources/assets/js/bootstrap.js` file, find and uncomment this snippet of code:\n\n``` javascript\n    import Echo from 'laravel-echo'\n    \n    window.Pusher = require('pusher-js');\n    \n    window.Echo = new Echo({\n         broadcaster: 'pusher',\n         key: process.env.MIX_PUSHER_APP_KEY,\n         cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n         encrypted: true\n    });\n```\n\n\u003e The `key` and `cluster` will pull the keys from your `.env` file so no need to enter them manually again.\n\nNow let’s import the `Comments` component into the `single.blade.php` file and pass along the required the props. \n\nOpen the `single.blade.php` file and replace its contents with the code below:\n\n``` php\n    {{-- File: ./resources/views/single.blade.php --}}\n    @extends('layouts.master')\n    \n    @section('content')\n    \u003cdiv class=\"container\"\u003e\n      \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-lg-10 mx-auto\"\u003e\n          \u003cbr\u003e\n          \u003ch3 class=\"mt-4\"\u003e\n            {{ $post-\u003etitle }} \n            \u003cspan class=\"lead\"\u003eby \u003ca href=\"#\"\u003e{{ $post-\u003euser-\u003ename }}\u003c/a\u003e\u003c/span\u003e\n          \u003c/h3\u003e\n          \u003chr\u003e\n          \u003cp\u003ePosted {{ $post-\u003ecreated_at-\u003ediffForHumans() }}\u003c/p\u003e\n          \u003chr\u003e\n          \u003cimg class=\"img-fluid rounded\" src=\"{!! !empty($post-\u003eimage) ? '/uploads/posts/' . $post-\u003eimage : 'http://placehold.it/750x300' !!}\" alt=\"\"\u003e\n          \u003chr\u003e\n          \u003cdiv\u003e\n            \u003cp\u003e{{ $post-\u003ebody }}\u003c/p\u003e\n            \u003chr\u003e\n            \u003cbr\u003e\n          \u003c/div\u003e\n          \n          @auth\n          \u003cComments\n              :post-id='@json($post-\u003eid)' \n              :user-name='@json(auth()-\u003euser()-\u003ename)'\u003e\n          \u003c/Comments\u003e\n          @endauth\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    @endsection\n```\n\n### Building the comments view\n\nOpen the `Comments.vue` file and add the following markup template below:\n\n``` html\n    \u003ctemplate\u003e\n      \u003cdiv class=\"card my-4\"\u003e\n        \u003ch5 class=\"card-header\"\u003eLeave a Comment:\u003c/h5\u003e\n        \u003cdiv class=\"card-body\"\u003e\n          \u003cform\u003e\n            \u003cdiv class=\"form-group\"\u003e\n              \u003ctextarea ref=\"body\" class=\"form-control\" rows=\"3\"\u003e\u003c/textarea\u003e\n            \u003c/div\u003e\n            \u003cbutton type=\"submit\" @click.prevent=\"addComment\" class=\"btn btn-primary\"\u003e\n              Submit\n            \u003c/button\u003e\n          \u003c/form\u003e\n        \u003c/div\u003e\n        \u003cp class=\"border p-3\" v-for=\"comment in comments\"\u003e\n           \u003cstrong\u003e{{ comment.user.name }}\u003c/strong\u003e: \n           \u003cspan\u003e{{ comment.body }}\u003c/span\u003e\n        \u003c/p\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nNow, we’ll add a script that defines two methods:\n\n\n1. `fetchComments()` - this will fetch all the existing comments when the component is created.\n2. `addComment()` - this will add a new comment by hitting the backend server. It will also trigger a new event that will be broadcast so all clients receive them in realtime.\n\nIn the same file, add the following below the closing  `template` tag:\n\n``` javascript\n    \u003cscript\u003e\n    export default {\n      props: {\n        userName: {\n          type: String,\n          required: true\n        },\n        postId: {\n          type: Number,\n          required: true\n        }\n      },\n      data() {\n        return {\n          comments: []\n        };\n      },\n      \n      created() {\n        this.fetchComments();\n        \n        Echo.private(\"comment\").listen(\"CommentSent\", e =\u003e {\n            this.comments.push({\n              user: {name: e.user.name},\n              body: e.comment.body,\n            });\n        });\n      },\n      \n      methods: {\n        fetchComments() {\n          axios.get(\"/\" + this.postId + \"/comments\").then(response =\u003e {\n            this.comments = response.data;\n          });\n        },\n        \n        addComment() {\n          let body = this.$refs.body.value;\n          axios.post(\"/\" + this.postId + \"/comments\", { body }).then(response =\u003e {\n            this.comments.push({\n              user: {name: this.userName},\n              body: this.$refs.body.value\n            });\n            this.$refs.body.value = \"\";\n          });\n        }\n      }\n    };\n    \u003c/script\u003e\n```\n\nIn the `created()` method above, we first made a call to the `fetchComments()` method, then we created a listener to the private `comment` channel using Laravel Echo. Once this listener is triggered, the `comments` property is updated.\n\n\n## Testing the application\n\nNow let’s test the application to see if it is working as intended. Before running the application, we need to refresh our database so as to revert any changes. To do this, run the command below in your terminal:\n\n```\n    $ php artisan migrate:fresh --seed\n```\n\nNext, let’s build the application so that all the changes will be compiled and included as a part of the JavaScript file. To do this, run the following command on your terminal:\n\n```\n    $ npm run dev\n```\n\nFinally, let’s serve the application using this command:\n\n```\n    $ php artisan serve\n```\n\nTo test that our application works visit the application URL http://localhost:8000 on two separate browser windows, we will log in to our application on each of the windows as a different user. \n\nWe will finally make a comment on the same post on each of the browser windows and check that it updates in realtime on the other window:\n\n![laravel-vue-cms-demo-part-6](//images.ctfassets.net/1es3ne0caaid/2mEM9OrtLmEOGEUQe8iusG/25df38d5f7fee007f23d35ee72ed24c4/laravel-vue-cms-demo-part-6.gif)\n\n## Conclusion\n\nIn this final tutorial of this series, we created the comments feature of the CMS and also made it realtime. We were able to accomplish the realtime functionality using Pusher.\n\nIn this entire series, we learned how to build a CMS using Laravel and Vue. ","metaTitle":"Build a CMS with Laravel and Vue - Part 6","metaDescription":"Use Laravel and Vue.js to create a basic CMS. The final product will include authentication, user roles, post creation and editing, and a realtime comments feature. In part six, implement realtime comments."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1QZr3nz4aM6mUkAOGmEcsu","type":"Entry","createdAt":"2018-10-09T18:24:18.279Z","updatedAt":"2020-06-19T10:33:45.596Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a CMS with Laravel and Vue - Part 5: Completing our dashboards","url":"cms-laravel-vue-part-5","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/laravel-vue-cms","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-10-09","description":"This six part tutorial series will guide you through building a CMS using Laravel and Vue.js. The final product will include authentication, user roles, post creation and editing, and a realtime comments feature. In part five, finish implementing the admin functionality.","prerequisite":"Basic knowledge of Laravel and Vue will be helpful. ","content":"In the [previous part](https://pusher.com/tutorials/cms-laravel-vue-part-4) of this series, we built the first parts of the admin dashboard using Vue. We also made it into an SPA with the `VueRouter`, this means that visiting the pages does not cause a reload to the web browser.\n \nWe only built the wrapper component and the `Read` component that retrieves the posts to be loaded so an admin can manage them. \n\nHere’s a recording of what we ended up with, in the last article:\n\n![laravel-vue-cms-demo-part-4](//images.ctfassets.net/1es3ne0caaid/3yedKPRjGgoCooCuocGwyY/49de9d02930a8853ecb08c932beb95f8/laravel-vue-cms-demo-part-4.gif)\n\nIn this article, we will build the view that will allow users to create and update posts. We will start writing code in the `Update.vue` and `Create.vue` files that we created in the previous article.\n\nWhen we are done with this part, we will have additional functionalities like create and updating:\n\n![laravel-vue-cms-demo-part-5](//images.ctfassets.net/1es3ne0caaid/3JaTirkHiEWyiOQCCqCu8g/99bd64562e3b0fc1a2ca835e3f323ee8/laravel-vue-cms-demo-part-5.gif)\n\n\n## Prerequisites\n\nTo follow along with this series, a few things are required:\n\n\n- Basic knowledge of PHP.\n- Basic knowledge of the [Laravel](https://laravel.com) framework.\n- Basic knowledge of JavaScript (ES6 syntax).\n- Basic knowledge of [Vue](https://vuejs.org).\n\n## Including the new routes in VueRouter\n\nIn the previous article, we only defined the route for the `Read` component, we need to include the route configuration for the new components that we are about to build; `Update` and `Create`.\n\nOpen the `resources/assets/js/app.js` file and replace the contents with the code below:\n\n``` javascript\n    require('./bootstrap');\n    \n    import Vue from 'vue'\n    import VueRouter from 'vue-router'\n    import Homepage from './components/Homepage'\n    import Create from './components/Create'\n    import Read from './components/Read'\n    import Update from './components/Update'\n    \n    Vue.use(VueRouter)\n    \n    const router = new VueRouter({\n        mode: 'history',\n        routes: [\n            {\n                path: '/admin/dashboard',\n                name: 'read',\n                component: Read,\n                props: true\n            },\n            {\n                path: '/admin/create',\n                name: 'create',\n                component: Create,\n                props: true\n            },\n            {\n                path: '/admin/update',\n                name: 'update',\n                component: Update,\n                props: true\n            },\n        ],\n    });\n    \n    const app = new Vue({\n        el: '#app',\n        router,\n        components: { Homepage },\n    });\n```\n\nAbove, we have added two new components to the JavaScript file. We have the `Create` and `Read` components. We also added them to the `router` so that they can be loaded using the specified URLs.\n\n\n## Building the create view\n\nOpen the `Create.vue` file and update it with this markup template:\n\n``` html\n    \u003c!-- File: ./resources/app/js/components/Create.vue --\u003e\n    \u003ctemplate\u003e\n      \u003cdiv class=\"container\"\u003e\n        \u003cform\u003e\n          \u003cdiv :class=\"['form-group m-1 p-3', (successful ? 'alert-success' : '')]\"\u003e\n            \u003cspan v-if=\"successful\" class=\"label label-sucess\"\u003ePublished!\u003c/span\u003e\n          \u003c/div\u003e\n          \u003cdiv :class=\"['form-group m-1 p-3', error ? 'alert-danger' : '']\"\u003e\n            \u003cspan v-if=\"errors.title\" class=\"label label-danger\"\u003e\n              {{ errors.title[0] }}\n            \u003c/span\u003e\n            \u003cspan v-if=\"errors.body\" class=\"label label-danger\"\u003e \n              {{ errors.body[0] }} \n            \u003c/span\u003e\n            \u003cspan v-if=\"errors.image\" class=\"label label-danger\"\u003e \n              {{ errors.image[0] }} \n            \u003c/span\u003e\n          \u003c/div\u003e\n        \n          \u003cdiv class=\"form-group\"\u003e\n            \u003cinput type=\"title\" ref=\"title\" class=\"form-control\" id=\"title\" placeholder=\"Enter title\" required\u003e\n          \u003c/div\u003e\n          \n          \u003cdiv class=\"form-group\"\u003e\n            \u003ctextarea class=\"form-control\" ref=\"body\" id=\"body\" placeholder=\"Enter a body\" rows=\"8\" required\u003e\u003c/textarea\u003e\n          \u003c/div\u003e\n          \n          \u003cdiv class=\"custom-file mb-3\"\u003e\n            \u003cinput type=\"file\" ref=\"image\" name=\"image\" class=\"custom-file-input\" id=\"image\" required\u003e\n            \u003clabel class=\"custom-file-label\" \u003eChoose file...\u003c/label\u003e\n          \u003c/div\u003e\n          \n          \u003cbutton type=\"submit\" @click.prevent=\"create\" class=\"btn btn-primary block\"\u003e\n            Submit\n          \u003c/button\u003e\n        \u003c/form\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nAbove we have the template for the `Create` component. If there is an error during post creation, there will be a field indicating the specific error. When a post is successfully published, there will also a message saying it was successful.\n\nLet’s include the `script` logic that will perform the sending of posts to our backend server and read back the response. \n\nAfter the closing `template` tag add this:\n\n``` javascript\n    \u003cscript\u003e\n    export default {\n      props: {\n        userId: {\n          type: Number,\n          required: true\n        }\n      },\n      data() {\n        return {\n          error: false,\n          successful: false,\n          errors: []\n        };\n      },\n      methods: {\n        create() {\n          const formData = new FormData();\n          formData.append(\"title\", this.$refs.title.value);\n          formData.append(\"body\", this.$refs.body.value);\n          formData.append(\"user_id\", this.userId);\n          formData.append(\"image\", this.$refs.image.files[0]);\n          \n          axios\n            .post(\"/api/posts\", formData)\n            .then(response =\u003e {\n              this.successful = true;\n              this.error = false;\n              this.errors = [];\n            })\n            .catch(error =\u003e {\n              if (!_.isEmpty(error.response)) {\n                if ((error.response.status = 422)) {\n                  this.errors = error.response.data.errors;\n                  this.successful = false;\n                  this.error = true;\n                }\n              }\n            });\n            \n          this.$refs.title.value = \"\";\n          this.$refs.body.value = \"\";\n        }\n      }\n    };\n    \u003c/script\u003e\n```\n\nIn the script above, we defined a `create()` method that takes the values of the `input` fields and uses the [Axios](https://github.com/axios/axios) library to send them to the API interface on the backend server. Within this method, we also update the status of the operation, so that an admin user can know when a post is created successfully or not.\n\n\n## Building the update view\n\nLet’s start building the `Update` component. Open the `Update.vue` file and update it with this markup template:\n\n``` html\n    \u003c!-- File: ./resources/app/js/components/Update.vue --\u003e\n    \u003ctemplate\u003e\n      \u003cdiv class=\"container\"\u003e\n        \u003cform\u003e\n          \u003cdiv :class=\"['form-group m-1 p-3', successful ? 'alert-success' : '']\"\u003e\n            \u003cspan v-if=\"successful\" class=\"label label-sucess\"\u003eUpdated!\u003c/span\u003e\n          \u003c/div\u003e\n          \n          \u003cdiv :class=\"['form-group m-1 p-3', error ? 'alert-danger' : '']\"\u003e\n            \u003cspan v-if=\"errors.title\" class=\"label label-danger\"\u003e\n              {{ errors.title[0] }}\n            \u003c/span\u003e\n            \u003cspan v-if=\"errors.body\" class=\"label label-danger\"\u003e\n              {{ errors.body[0] }}\n            \u003c/span\u003e\n          \u003c/div\u003e\n                \n          \u003cdiv class=\"form-group\"\u003e\n            \u003cinput type=\"title\" ref=\"title\" class=\"form-control\" id=\"title\" placeholder=\"Enter title\" required\u003e\n          \u003c/div\u003e\n          \n          \u003cdiv class=\"form-group\"\u003e\n            \u003ctextarea class=\"form-control\" ref=\"body\" id=\"body\" placeholder=\"Enter a body\" rows=\"8\" required\u003e\u003c/textarea\u003e\n          \u003c/div\u003e\n          \n          \u003cbutton type=\"submit\" @click.prevent=\"update\" class=\"btn btn-primary block\"\u003e\n            Submit\n          \u003c/button\u003e\n        \u003c/form\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nThis template is similar to the one in the `Create` component. Let’s add the `script` for the component. \n\nBelow the closing `template` tag, paste the following:\n\n``` script\n    \u003cscript\u003e\n    export default {\n      mounted() {\n        this.getPost();\n      },\n      props: {\n        postId: {\n          type: Number,\n          required: true\n        }\n      },\n      data() {\n        return {\n          error: false,\n          successful: false,\n          errors: []\n        };\n      },\n      methods: {\n        update() {\n          let title = this.$refs.title.value;\n          let body = this.$refs.body.value;\n    \n          axios\n            .put(\"/api/posts/\" + this.postId, { title, body })\n            .then(response =\u003e {\n              this.successful = true;\n              this.error = false;\n              this.errors = [];\n            })\n            .catch(error =\u003e {\n              if (!_.isEmpty(error.response)) {\n                if ((error.response.status = 422)) {\n                  this.errors = error.response.data.errors;\n                  this.successful = false;\n                  this.error = true;\n                }\n              }\n            });\n        },\n        getPost() {\n          axios.get(\"/api/posts/\" + this.postId).then(response =\u003e {\n            this.$refs.title.value = response.data.data.title;\n            this.$refs.body.value = response.data.data.body;\n          });\n        }\n      }\n    };\n    \u003c/script\u003e\n```\n\nIn the script above, we make a call to the `getPosts()` method as soon as the component is `mounted`. The `getPosts()` method fetches the data of a single post from the backend server, using the `postId`.\n\nWhen Axios sends back the data for the post, we update the input fields in this component so they can be updated.\n\nFinally, the `update()` method takes the values of the fields in the components and attempts to send them to the backend server for an update. In a situation where the fails, we get instant feedback.\n\n\n## Testing the application\n\nTo test that our changes work, we want to refresh the database and restore it back to a fresh state. To do this, run the following command in your terminal:\n\n```\n    $ php artisan migrate:fresh --seed\n```\n\nNext, let’s compile our JavaScript files and assets. This will make sure all the changes we made in the Vue component and the `app.js` file gets built. To recompile, run the command below in your terminal:\n\n```\n    $ npm run dev\n```\n\nLastly, we need to serve the application. To do this, run the following command in your terminal window:\n\n```\n    $ php artisan serve\n```\n\n\n\u003e If you had the serve command running before, then you might need to restart it.\n\nWe will visit the application’s http://localhost:8000 and log in as an admin user. From the dashboard, you can test the create and update feature:\n\n![laravel-vue-cms-demo-part-5](//images.ctfassets.net/1es3ne0caaid/3JaTirkHiEWyiOQCCqCu8g/99bd64562e3b0fc1a2ca835e3f323ee8/laravel-vue-cms-demo-part-5.gif)\n\n## Conclusion\n\nIn this part of the series, we updated the dashboard to include the `Create` and `Update` component so the administrator can add and update posts.\n\nIn the next article, we will build the views that allow for the creation and updating of a post.\n\nThe source code for this project is available [here](https://github.com/neoighodaro/laravel-vue-cms) on Github.","metaTitle":"Build a CMS with Laravel and Vue - Part 5","metaDescription":"Use Laravel and Vue.js to create a basic CMS. The final product will include authentication, user roles, post creation and editing, and a realtime comments feature. In part five, finish the admin dashboard."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"Yl4xroGZkAMWEOMOe6CI2","type":"Entry","createdAt":"2018-10-09T20:43:19.141Z","updatedAt":"2020-06-19T12:52:41.321Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Implement online presence in a Laravel application","url":"presence-channels-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/laravel-pusher-presence","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}}],"reviewDate":"2018-10-09","description":"This tutorial shows how to implement online presence and realtime updates in a Laravel application. You will use Laravel, Vue, and SQLite to build a simple app where users can log in and post statuses. Posts will appear in realtime, and users' online presence will be reported.","prerequisite":"You will need the Laravel CLI installed on your machine. This tutorial uses Laravel 5.7. You will also need SQLite, and a basic knowledge of Laravel and PHP.","content":"When using certain applications, it is usually expected that the current user is able to see all other users currently using the service alongside them. For instance, [Dropbox Paper](/) shows all the users that are currently viewing a document. This is very useful and it helps stop users feeling like they are alone on your application.\n\nIn this tutorial, we are going to see how you can add online presence reporting to a Laravel application. To showcase this, we will be building an application where users can log in and leave quick updates on anything they want. Each online user will be able to see the list of logged in users.\n\nHere is the finished application in action:\n\n![laravel-presence-demo](//images.ctfassets.net/1es3ne0caaid/4YFICDIELmeYmuY066gQa6/6d5b3c2a5d73fc0fae587573c0ada351/laravel-presence-demo.gif)\n\n## Prerequisites\n\nBefore we get started, you need to have the following prerequisites:\n\n\n- Laravel CLI installed on your machine. [Installation guide](https://laravel.com/docs/5.7/installation#installation).\n- Node.js installed on your machine. Download the latest stable version [here](https://nodejs.org/en/download/).\n- SQLite (v3.x or later) installed on your machine. \n- A Pusher account. [Create one here](https://pusher.com).\n- Basic PHP/Laravel knowledge.\n- Basic CLI knowledge.\n\nIf you have the listed requirements, we can continue.\n\n\n## Setting up your Laravel project\n\nThe first thing we want to do is create a new Laravel project. To create a new Laravel project, run the following command in your terminal:\n\n```\n    $ laravel new updaytes # where \"updaytes\" is the name of the project\n```\n\nThis will create a new Laravel project that we can start working with. When the installation is complete, we will start installing the JavaScript dependencies using NPM.\n\n### Installing JavaScript dependencies\n\nOpen the `package.json` file that comes with your Laravel installation and replace the contents with the following code:\n\n``` json\n    {\n        \"private\": true,\n        \"scripts\": {\n            \"dev\": \"npm run development\",\n            \"development\": \"cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n            \"watch\": \"npm run development -- --watch\",\n            \"watch-poll\": \"npm run watch -- --watch-poll\",\n            \"hot\": \"cross-env NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js\",\n            \"prod\": \"npm run production\",\n            \"production\": \"cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\"\n        },\n        \"devDependencies\": {\n            \"axios\": \"^0.18.0\",\n            \"bootstrap\": \"^4.0.0\",\n            \"cross-env\": \"^5.1\",\n            \"jquery\": \"^3.2\",\n            \"laravel-mix\": \"^2.0\",\n            \"lodash\": \"^4.17.5\",\n            \"popper.js\": \"^1.12\",\n            \"vue\": \"^2.5.7\"\n        },\n        \"dependencies\": {\n            \"laravel-echo\": \"^1.4.0\",\n            \"pusher-js\": \"^4.3.1\"\n        }\n    }\n```\n\nIn your terminal, `cd`  to the root of your project and run the following command to install the JavaScript dependencies:\n\n```\n    $ npm install\n```\n\nAfter installation is complete, open the `webpack.mix.js` file and replace the contents with the following:\n\n``` javascript\n    const mix = require('laravel-mix');\n    \n    mix.js('resources/js/app.js', 'public/js')\n        .sass('resources/sass/signin.scss', 'public/css')\n        .sass('resources/sass/app.scss', 'public/css')\n        .sass('resources/sass/updates.scss', 'public/css');\n```\n\nAbove, we have added two new Sass files, `signin.scss` and `updates.scss`. In these files, we will be adding specific CSS for the sign in page and the updates page. Create these files in the `resources/sass` directory and leave them empty.\n\nNext, run the command below to build the assets:\n\n```\n    $ npm run watch\n```\n\n\u003e The `watch` script keeps the command line occupied. It automatically watches for changes to your assets and builds automatically when it detects changes. This is better than running the `build` script every time you make changes.\n\n### Setting up the database\n\nFor this tutorial, we will be using an SQLite database. It is easy to set up and is a good database engine for small projects. If you are building bigger projects though, you should use MySQL.\n\nCreate a new file named `database.sqlite` in the `database` directory and leave it empty. Next,  open the `.env` file in the root of your project and replace the following keys:\n\n```\n    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_DATABASE=homestead\n    DB_USERNAME=homestead\n    DB_PASSWORD=secret\n```\n\nWith\n\n```\n    DB_CONNECTION=sqlite\n    DB_DATABASE=/full/path/to/database.sqlite\n```\n\nNext, let’s add some classes that will help us manage our database and also seed the table with sample data. In your terminal, run the following command:\n\n```\n    $ php artisan make:model Update -mc\n```\n\n![laravel-presence-create-controller](//images.ctfassets.net/1es3ne0caaid/1gTQxCymwCqk6ao2AQy2Ss/b3c60de92fb159ede0ecdceba42ff754/laravel-presence-create-controller.png)\n\nAs seen from the screenshot, this command generates a model, migration, and a controller. Before we start updating any of those, let’s also generate a [model factory](https://laravel.com/docs/5.7/seeding#using-model-factories). Run the command below to generate a model factory:\n\n```\n    $ php artisan make:factory UpdateFactory\n```\n\nFinally, let’s generate a database seeder. Seeders are used to add dummy data to the database and should not be used in production. Run the command below to generate a database seeder:\n\n```\n    $ php artisan make:seed UsersTableSeeder\n```\n\nNow, let’s start updating the classes generated by the commands above. First, we will start with the migrations. Open the `*_create_users_table.php` migration in the `database/migrations` directory and replace the `up` method with the following:\n\n``` php\n    // File: database/migrations/*_create_users_table.php\n    // [...]\n    \n    public function up()\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003estring('name');\n            $table-\u003estring('email')-\u003eunique();\n            $table-\u003etimestamp('email_verified_at')-\u003enullable();\n            $table-\u003estring('password');\n            $table-\u003estring('avatar')-\u003enullable();\n            $table-\u003erememberToken();\n            $table-\u003etimestamps();\n        });\n    }\n    \n    // [...]\n```\n\nThe actual change we have from the previous code is the introduction of the `avatar` field. We will use this field to store URL to the avatar of the user.\n\nNext, open the `*_create_updates_table.php` file in the `database/migrations` directory and replace the `up` method with the following:\n\n``` php\n    // File: database/migrations/*_create_updates_table.php\n    // [...]\n    \n    public function up()\n    {\n        Schema::create('updates', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003eunsignedInteger('user_id');\n            $table-\u003estring('text', 280);\n            $table-\u003etimestamps();\n        });\n    }\n    \n    // [...]\n```\n\nAbove, we have the migration for the `updates` table. It has the `user_id` field which it’ll store the user ID of the user that made the update, and the `text` field that stores the update made.\n\nNow that we have defined the table structure using our migration files, let’s update the model for our tables.\n\nOpen the `User.php` file in the `app` directory and replace the class definition with the following code:\n\n``` php\n    // File: ./app/User.php\n    // [...]\n    \n    class User extends Authenticatable\n    {\n        use Notifiable;\n    \n        /**\n         * The attributes that are mass assignable.\n         *\n         * @var array\n         */\n        protected $fillable = [\n            'name', 'email', 'password', 'avatar',\n        ];\n    \n        /**\n         * The attributes that should be hidden for arrays.\n         *\n         * @var array\n         */\n        protected $hidden = [\n            'password', 'remember_token',\n        ];\n        \n        /**\n         * Update model relationship\n         *\n         * @return \\Illuminate\\Database\\Eloquent\\Relations\\HasMany\n         */\n        public function updates()\n        {\n            return $this-\u003ehasMany(Update::class);\n        }\n    }\n```\n\nThe changes above are:\n\n\n- We added the `avatar` field to the `fillable` array.\n- We added the `updates` method, which is for the relationship between the `User` and the `Update`. In this case, a user can have many updates, but an update can only belong to a user.\n\nNext, open the `Update.php` file in the `app` directory and replace the class definition with the following:\n\n``` php\n    // File: ./app/Update.php\n    // [...]\n    \n    class Update extends Model\n    {\n        /**\n         * The attributes that are mass assignable.\n         *\n         * @var array\n         */\n        protected $fillable = [\n            'user_id', 'text'\n        ];\n        \n        /**\n         * User model relationship\n         *\n         * @return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsTo\n         */\n        public function user()\n        {\n            return $this-\u003ebelongsTo(User::class);\n        }\n    }\n```\n\nAbove, we have a typical Laravel model. The `user` method is the relationship link from the `Update` model to the `User` model.\n\nNow that we have the models, let’s update the model factories. Open the `UserFactory.php` file in the `database/factories` directory and replace it with the following code:\n\n``` php\n    // File: ./database/factories/UserFactory.php\n    \u003c?php\n    \n    use Faker\\Generator as Faker;\n    \n    $factory-\u003edefine(App\\User::class, function (Faker $faker) {\n        $number = rand(10, 46);\n        $gender = rand(0, 1) ? 'men' : 'women';\n    \n        return [\n            'name' =\u003e $faker-\u003ename,\n            'email' =\u003e $faker-\u003eunique()-\u003esafeEmail,\n            'password' =\u003e '$2y$10$TKh8H1.PfQx37YgCzwiKb.KjNyWgaHb9cbcoQgdIVFlYg7B77UdFm', // secret\n            'avatar' =\u003e \"https://randomuser.me/api/portraits/${gender}/{$number}.jpg\",\n            'remember_token' =\u003e str_random(10),\n        ];\n    });\n```\n\nAbove, we have a model factory. When the factory is called to generate a user, the callback above is called and it returns a unique array of fields to be used when creating the sample user. The factory uses the [Faker library](https://github.com/fzaninotto/Faker) for this. For the avatar, we are using a photo from the [randomuser.me](https://randomuser.me) website.\n\nNext, open the `UpdateFactory.php` file in the `database/factories` directory and replace the contents with the following code:\n\n``` php\n    // File: ./database/factories/UpdateFactory.php\n    \u003c?php\n    \n    use Faker\\Generator as Faker;\n    \n    $factory-\u003edefine(App\\Update::class, function (Faker $faker) {\n        return [\n            'text' =\u003e $faker-\u003esentence()\n        ];\n    });\n```\n\nThe factory essentially does the same as the previous factory, only for the `Update` model.\n\nNext, open the `UsersTableSeeder.php` file in the `database/seeds` directory and replace the `run` method with the following:\n\n``` php\n    // File: ./database/seeds/UsersTableSeeder.php\n    // [...]\n    \n    public function run()\n    {\n        factory(App\\User::class, 10)-\u003ecreate()-\u003eeach(function ($user) {\n            $user-\u003eupdates()-\u003esave(factory(App\\Update::class)-\u003emake());\n        });\n    }\n    \n    // [...]\n```\n\nAbove, we have added the logic for the seeder. It will generate ten users using the `UserFactory`, and for each of the users, it will generate an update using the `UpdateFactory`. So basically, when the seeder is run, we will have ten dummy users with ten dummy posts.\n\nOpen the `DatabaseSeeder.php` file in the `database/seeds` directory and uncomment the line below:\n\n``` php\n    $this-\u003ecall(UsersTableSeeder::class);\n```\n\nWith this, we are ready to run our migration and seed the database with sample data. Run the command below to do this:\n\n```\n    $ php artisan migrate:fresh --seed\n```\n\n\u003e You can always run the command above to clear changes to the database. It will delete all the tables and run the migration and seed command from scratch.\n\n![laravel-presence-database-seeding](//images.ctfassets.net/1es3ne0caaid/oSz4wTtPOgeimuAAoSmWU/55ad04f6ee815657c89ea794aeba7653/laravel-presence-database-seeding.png)\n\n\n## Building our application\n\nNow we are done with the database set up. Let’s start building the application.\n\n### Creating the login page\n\nFirst, let’s add a login page. We will be using the `/` route as the login page and we will not need the `artisan make:auth` command that comes default with Laravel.\n\nFirst, open the `web.php` file in the `routes` directory and replace the contents with the following code:\n\n``` php\n    // File: ./routes/web.php\n    \u003c?php\n    \n    Route::post('logout', 'Auth\\LoginController@logout')-\u003ename('logout');\n    Route::post('/', 'Auth\\LoginController@login');\n    Route::view('/', 'signin')-\u003emiddleware('guest')-\u003ename('login');\n```\n\nAbove, we have defined three routes:\n\n\n1. `GET /logout` - this will log a user out of the application. It uses the `LoginController` that comes default with Laravel. We don’t need to do anything more.\n2. `POST /` - this will handle logging in. It also uses the `LoginController` and we do not need to do anything but send a `POST` request to it with the `email` and `password` field.\n3. `GET /` - this will display the login page. It uses a `guest` middleware that comes with Laravel by default. This will redirect all logged in users away from the page to the dashboard.\n\nNext, let’s create the signin page. In the `resources/views` directory, create a new file named `signin.blade.php` and paste the following code:\n\n``` php\n    \u003c!-- File: ./resources/views/signin.blade.php --\u003e\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003eUpdaytes | Sign in\u003c/title\u003e\n        \u003cmeta content=\"{{ csrf_token() }}\" name=\"csrf-token\"\u003e\n        \u003clink href=\"{{ asset('css/app.css') }}\" rel=\"stylesheet\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"{{ asset('css/signin.css') }}\"\u003e\n    \u003c/head\u003e\n    \n    \u003cbody class=\"text-center\"\u003e\n        \u003cform class=\"form-signin\" method=\"POST\" action=\"{{ route('login') }}\"\u003e\n            @csrf\n            \u003ch3 class=\"h3 mb-3 font-weight-normal\"\u003ePlease sign in\u003c/h3\u003e\n            \u003clabel for=\"inputEmail\" class=\"sr-only\"\u003eEmail address\u003c/label\u003e\n            \u003cinput type=\"email\" name=\"email\" class=\"form-control\" placeholder=\"Email address\" value=\"{{ old('email') }}\" required\u003e\n            \u003clabel for=\"inputPassword\" class=\"sr-only\"\u003ePassword\u003c/label\u003e\n            \u003cinput type=\"password\" name=\"password\" id=\"inputPassword\" class=\"form-control\" placeholder=\"Password\" required\u003e\n            \u003cbutton class=\"btn btn-lg btn-primary btn-block signin-btn\" type=\"submit\"\u003e\n                Sign in\n            \u003c/button\u003e\n        \u003c/form\u003e\n    \u003c/body\u003e\n    \n    \u003c/html\u003e\n```\n\nAbove, we have the HTML for the sign in page. In the `head` it is referencing the `signin.css` file, which at this point is empty. So let’s add the style for this page.\n\nOpen the `resources/sass/signin.scss` file and paste the following code:\n\n``` css\n    // File: ./resources/sass/signin.scss\n    html, body {\n        height: 100%;\n    }\n    body {\n        display: -ms-flexbox;\n        display: flex;\n        -ms-flex-align: center;\n        align-items: center;\n        padding-top: 40px;\n        padding-bottom: 40px;\n        background-color: #f5f5f5;\n    }\n    .form-signin {\n        width: 100%;\n        max-width: 330px;\n        padding: 15px;\n        margin: auto;\n    }\n    .form-signin .checkbox {\n        font-weight: 400;\n    }\n    .form-signin .form-control {\n        position: relative;\n        box-sizing: border-box;\n        height: auto;\n        padding: 10px;\n        font-size: 16px;\n    }\n    .form-signin .form-control:focus {\n        z-index: 2;\n    }\n    .form-signin input[type='email'] {\n        margin-bottom: -1px;\n        border-bottom-right-radius: 0;\n        border-bottom-left-radius: 0;\n    }\n    .form-signin input[type='password'] {\n        border-radius: 0;\n    }\n    .form-signin .signin-btn {\n        font-weight: bold;\n        font-size: 15px;\n        border-top-left-radius: 0;\n        border-top-right-radius: 0;\n    }\n```\n\nAbove, we have the style for the sign in page. Because we have the `npm run watch` command still running, the Sass file will be automatically compiled.\n\nRun the command below in a terminal window to start the Artisan server:\n\n```\n    $ php artisan serve\n```\n\nIn your browser, visit the URL http://localhost:8000/ and you should see the login screen. Great.\n\n![laravel-presence-login](//images.ctfassets.net/1es3ne0caaid/58JCDnTvuwGEIaGuSkGSm4/1eb433ab8dd4d057214be7c3f4078c47/laravel-presence-login.png)\n\nNow quit the serve command by pressing **ctrl + c** on your keyboard. Let’s create the updates page.\n\n### Creating the updates page\n\nBefore we start creating the pages for the updates view, let’s add some routes. Open the `web.php` file in the `routes` directory and add the following code:\n\n``` php\n    // [...]\n    \n    Route::get('home', 'UpdateController@index')-\u003ename('home');\n    Route::get('/updates', 'UpdateController@list');\n    Route::post('/updates', 'UpdateController@create');\n    Route::get('/updates/suggestions', 'UpdateController@userSuggestions');\n    \n    // [...]\n```\n\nAbove, we have four routes:\n\n\n1. `GET /home` - this will be the page where all the updates will be displayed.\n2. `GET /updates` - this will be an API endpoint that we will load from the `/home` route. It will return a JSON response of all the updates.\n3. `POST /updates` - this will be an API endpoint that we will use to add new updates. It will return a JSON response of the new update.\n4. `GET /updates/suggestions` - this will be an API endpoint that will return a JSON response of random users. Not really important, it’s just for aesthetics.\n\nNow that we have the routes, let’s update the `UpdateController`. Open the `UpdateController.php` file in the `app/Http/Controllers` directory and replace the contents with the following:\n\n``` php\n    \u003c?php\n    namespace App\\Http\\Controllers;\n    \n    use App\\User;\n    use App\\Update;\n    use Illuminate\\Http\\Request;\n    use App\\Events\\UpdateCreated;\n    \n    class UpdateController extends Controller\n    {\n        public function __construct()\n        {\n            $this-\u003emiddleware('auth');\n        }\n        \n        public function index()\n        {\n            return view('updates');\n        }\n        \n        public function create(Request $request)\n        {\n            $data = $request-\u003evalidate(['text' =\u003e 'required|min:1|max:280|string']);\n            \n            $update = auth()-\u003euser()-\u003eupdates()-\u003esave(new Update($data))-\u003eload('user');\n            \n            broadcast(new UpdateCreated($update))-\u003etoOthers();\n            \n            return response()-\u003ejson($update);\n        }\n        \n        public function list()\n        {\n            return response()-\u003ejson(Update::latest()-\u003ewith('user')-\u003elimit(15)-\u003eget());\n        }\n        \n        public function userSuggestions()\n        {\n            $user = auth()-\u003euser();\n            \n            return response()-\u003ejson(\n                User::where('id', '!=', $user-\u003eid)-\u003einRandomOrder()-\u003elimit(5)-\u003eget()\n            );\n        }\n    }\n```\n\nAbove, we have a few methods defined:\n\n\n- `__construct` - in here we add the `auth` middleware so that only authenticated users can visit any of the pages in this controller.\n- `index` - the updates page.\n- `create` - creates a new update, sends a broadcast to Pusher, and returns a JSON response.\n- `list` - returns a JSON response with the latest updates.\n- `userSuggestions` - returns a JSON response with random users.\n\nTo create the event we are broadcasting in the `create` method, run the following command below:\n\n```\n    $ php artisan make:event UpdateCreated\n```\n\nFor now, we will leave the generated class and move on.\n\nLet’s add the HTML and style for the updates page. Create a new `updates.blade.php` file in the `resources/views` directory and paste the following:\n\n``` php\n    \u003c!-- File: ./resources/views/updates.blade.php --\u003e\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003eUpdytes | Home\u003c/title\u003e\n        \u003cmeta content=\"{{ csrf_token() }}\" name=\"csrf-token\"\u003e\n        \u003clink href=\"{{ asset('css/app.css') }}\" rel=\"stylesheet\"\u003e\n        \u003clink href=\"{{ asset('css/updates.css') }}\" rel=\"stylesheet\"\u003e\n    \u003c/head\u003e\n    \n    \u003cbody class=\"bg-light updates\"\u003e\n        \u003cnav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"\u003e\n            \u003ca class=\"navbar-brand mr-auto mr-lg-0\" href=\"#\"\u003eUPDAYTES\u003c/a\u003e\n            \u003cdiv class=\"navbar-collapse offcanvas-collapse\" id=\"navbarsExampleDefault\"\u003e\n                \u003cul class=\"navbar-nav mr-auto\"\u003e\n                    \u003cli class=\"nav-item\"\u003e\n                        \u003ca class=\"nav-link\" href=\"{{ route('logout') }}\" onclick=\"event.preventDefault();\n                                            document.getElementById('logout-form').submit();\"\u003e\n                            {{ __('Logout') }}\n                        \u003c/a\u003e\n                        \u003cform id=\"logout-form\" action=\"{{ route('logout') }}\" method=\"POST\" style=\"display: none;\"\u003e\n                            @csrf\n                        \u003c/form\u003e\n                    \u003c/li\u003e\n                \u003c/ul\u003e\n                \u003cform class=\"form-inline my-2 my-lg-0\"\u003e\n                    \u003cinput class=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\"\u003e\n                    \u003cbutton class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\"\u003eSearch\u003c/button\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n        \u003c/nav\u003e\n        \n        \u003cdiv id=\"app\"\u003e\n            \u003cdiv class=\"nav-scroller bg-white shadow-sm clearfix\"\u003e\n                \u003cOnlineList :me='@json(auth()-\u003euser()-\u003etoArray())'\u003e\u003c/OnlineList\u003e\n            \u003c/div\u003e\n            \n            \u003cmain role=\"main\" class=\"container\"\u003e\n                \u003cdiv class=\"d-flex align-items-center p-3 my-3 text-white-50 bg-purple rounded shadow-sm\"\u003e\n                    \u003cdiv class=\"lh-100\"\u003e\n                        \u003ch6 class=\"mb-0 text-white lh-100\"\u003eBootstrap Forum\u003c/h6\u003e\n                        \u003csmall\u003eUpdates on the development of the community\u003c/small\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cUpdates\u003e\u003c/Updates\u003e\n                \u003cSuggestions\u003e\u003c/Suggestions\u003e\n            \u003c/main\u003e\n        \u003c/div\u003e\n        \n        \u003cscript src=\"{{ asset('js/app.js') }}\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nAbove, we have the HTML for the updates page. There are a few things to note in the markup above:\n\n\n- It references the `updates.css` style, which we have not yet created.\n- It has three Vue components referenced, `OnlineList`, `Updates`, and `Suggestions`, which we have not created.\n- It includes the `js/app.js` file which will contain our bundled JavaScript.\n\nLet’s add some styling to the page. Open the `updates.scss` file in the `resources/sass` directory and paste the following:\n\n``` css\n    // File: ./resources/sass/updates.scss\n    .updates {\n        .bg-purple {\n            background-color: #6f42c1;\n        }\n        .size-32 {\n            width: 32px;\n            height: 32px;\n        }\n        .nav-scroller .nav-link {\n            line-height: 32px;\n            display: inline-block;\n            margin-right: -9px;\n            float: right;\n        }\n        .squished {\n            padding-left: 0;\n            padding-right: 0;\n            \u0026:first-child,\n            \u0026:last-child {\n                margin-right: 15px;\n            }\n        }\n        .avatar {\n            border-radius: 50%;\n            text-indent: 1000px;\n            border-radius: 50%;\n            height: 34px;\n            line-height: 34px;\n            width: 34px;\n            border: 2px solid #fff;\n        }\n    }\n```\n\nAbove, we have the style for the updates page. Because we have the `npm run watch` command still running, the Sass file will be automatically compiled.\n\nNext, let’s create the Vue components referenced in the updates page. Create the following files in the `resources/js/components` directory:\n\n\n- `Updates.vue`\n- `Suggestions.vue`\n- `OnlineList.vue`\n\nNext, open the `resources/js/app.js` file and replace the contents with the following:\n\n``` javascript\n    require('./bootstrap');\n    require('axios');\n    \n    window.Vue = require('vue');\n    \n    Vue.component('updates', require('./components/Updates.vue'));\n    Vue.component('onlinelist', require('./components/OnlineList.vue'));\n    Vue.component('suggestions', require('./components/Suggestions.vue'));\n    \n    const app = new Vue({\n        el: '#app'\n    });\n```\n\nAbove, we imported [Axios](https://github.com/axios/axios), which we will use for HTTP requests, we also registered the Vue components we created earlier.\n\nLet’s update the contents of the Vue components. Open the `Updates.vue` file and paste the following code into it:\n\n``` html\n    \u003c!-- File: ./resources/js/components/Updates.vue --\u003e\n    \u003ctemplate\u003e\n        \u003cdiv class=\"my-3 p-3 bg-white rounded shadow-sm\"\u003e\n            \u003ch6 class=\"border-bottom border-gray pb-2 mb-0\"\u003eRecent updates\u003c/h6\u003e\n            \u003cdiv class=\"media text-muted pt-3\" v-if=\"updates.length == 0\"\u003e\n                Loading updates...\n            \u003c/div\u003e\n            \u003cdiv class=\"media text-muted pt-3 pb-3 border-bottom border-grey\" v-else\u003e\n                \u003cform class=\"form-inline\" v-on:submit.prevent=\"addUpdate\"\u003e\n                    \u003cdiv class=\"form-group mr-2\"\u003e\n                        \u003cinput type=\"text\" class=\"form-control\" v-model=\"update\" placeholder=\"What's happening?\"\u003e\n                    \u003c/div\u003e\n                    \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003eUpdate\u003c/button\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"media text-muted pt-3\" v-for=\"update in updates\" :key=\"update.id\"\u003e\n                \u003cimg :src=\"update.user.avatar\" class=\"size-32 mr-2 rounded\"\u003e\n                \u003cp class=\"media-body pb-3 mb-0 small lh-125 border-bottom border-gray\"\u003e\n                    \u003cstrong class=\"d-block text-gray-dark\"\u003e\n                        {{ update.user.name }}\n                    \u003c/strong\u003e\n                    {{ update.text }}\n                \u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n        name: 'Updates',\n        data() {\n            return {\n                update: '',\n                updates: [],\n            }\n        },\n        mounted () {\n            axios.get('/updates').then(res =\u003e (this.updates = res.data))\n        },\n        methods: {\n            addUpdate () {\n                if (this.update.trim() !== '') {\n                    axios.post('/updates', {text: this.update}).then(res =\u003e {\n                        this.update = ''\n                        this.updates.unshift(res.data)\n                    })\n                }\n            }\n        }\n    }\n    \u003c/script\u003e\n```\n\nAbove, the component is divided into `template` and `script`. The `template` contains the HTML for the component and the `script` contains the JavaScript.\n\nIn the `script` we load the updates in the `mounted` method. In the `template` we loop through all the `updates` and display each. We also have a form that we can use to post a new update. When submitted, this form calls the `addUpdate` function in the `methods` property.\n\nNext, open the `resources/js/components/Suggestions.vue` and paste the following code:\n\n``` html\n    \u003c!-- File: ./resources/js/components/Suggestions.vue --\u003e\n    \u003ctemplate\u003e\n        \u003cdiv class=\"my-3 p-3 bg-white rounded shadow-sm\"\u003e\n            \u003ch6 class=\"border-bottom border-gray pb-2 mb-0\"\u003eSuggestions\u003c/h6\u003e\n            \u003cdiv class=\"media text-muted pt-3\" v-if=\"users.length == 0\"\u003e\n                Loading users...\n            \u003c/div\u003e\n            \u003cdiv class=\"media text-muted pt-3\" v-for=\"user in users\" :key=\"user.id\"\u003e\n                \u003cimg :src=\"user.avatar\" :alt=\"user.name\" class=\"size-32 mr-2 rounded\"\u003e\n                \u003cdiv class=\"media-body pb-3 mb-0 small lh-125 border-bottom border-gray\"\u003e\n                    \u003cdiv class=\"d-flex justify-content-between align-items-center w-100\"\u003e\n                        \u003cstrong class=\"text-gray-dark\"\u003e{{ user.name }}\u003c/strong\u003e\n                        \u003ca href=\"#\"\u003eFollow\u003c/a\u003e\n                    \u003c/div\u003e\n                    \u003cspan class=\"d-block\"\u003eFollow my updates\u003c/span\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n        name: 'Suggestions',\n        data() {\n            return {\n                users: []\n            }\n        },\n        mounted () {\n            axios.get('/updates/suggestions').then(res =\u003e (this.users = res.data))\n        }\n    }\n    \u003c/script\u003e\n```\n\nJust like the `Updates` component, we have the `template` and `script` tag. The `script` loads the suggested users and the `template` loops over the `users` and displays them.\n\nFinally, open the file `resources/js/components/OnlineList.vue` and paste the following code:\n\n``` html\n    \u003c!-- File: ./resources/js/components/OnlineList.vue --\u003e\n    \u003ctemplate\u003e\n        \u003cul class=\"nav float-right\"\u003e\n            \u003cli class=\"nav-link squished\"\u003eOnline Users\u003c/li\u003e\n            \u003cli class=\"nav-link squished\" href=\"#\" v-for=\"user in users\" :key=\"user.id\"\u003e\n                \u003cimg class=\"avatar\" :src=\"user.avatar\" :alt=\"user.name\"\u003e\n            \u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n        name: 'OnlineList',\n        props: ['me'],\n        data () {\n            return {\n                users: []\n            }\n        },\n        mounted () {\n            this.users.push(this.me)\n        }\n    }\n    \u003c/script\u003e\n```\n\nLike the components before it, the `OnlineList` component has the `template` that loops through the data and the `script` that loads the data. \n\nWe have not yet implemented the who’s online feature so, in the `mounted` method, we just add the current user as the only online user. We will add the presence and realtime feature in the next section.\n\n### Adding the realtime and presence feature\n\nLet’s start from the Laravel PHP side. We will first activate the broadcasting feature, then we will update the configuration in our `.env` file, after which we will update the event file we created earlier.\n\nOpen the `config/app.php` file and uncomment the `BroadcastServiceProvider` line:\n\n``` php\n    App\\Providers\\BroadcastServiceProvider::class,\n```\n\nNext, open the `.env` file and change the `BROADCAST_DRIVER` from `log` to `pusher`. Finally, in the same file, update the keys below with the keys from your Pusher dashboard.\n\n```\n    PUSHER_APP_ID=\n    PUSHER_APP_KEY=\n    PUSHER_APP_SECRET=\n    PUSHER_APP_CLUSTER=\n```\n\nNext, open the `app/Events/UpdateCreated.php` file and replace the contents with the following:\n\n``` php\n    // File: app/Events/UpdateCreated.php\n    \u003c?php\n    namespace App\\Events;\n    \n    use App\\Update;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Broadcasting\\PrivateChannel;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n    \n    class UpdateCreated implements ShouldBroadcast\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n        \n        public $update;\n        \n        /**\n         * Create a new event instance.\n         *\n         * @return void\n         */\n        public function __construct(Update $update)\n        {\n            $this-\u003eupdate = $update;\n        }\n        \n        /**\n         * Get the channels the event should broadcast on.\n         *\n         * @return \\Illuminate\\Broadcasting\\Channel|array\n         */\n        public function broadcastOn()\n        {\n            return new PrivateChannel('updates');\n        }\n    }\n```\n\nAbove, we have a [Laravel event](https://laravel.com/docs/5.7/events) class. Notably, we have the `broadcastsOn`  method which defines the channel we want to broadcast this event on. In this case, we are using a private channel called `updates`.\n\n\n\u003e Note that we are implementing the `ShouldBroadcast` interface. If we don’t, the event will not be broadcasted to our Pusher instance.\n\nNext, open the `routes/channels.php` file and replace the contents with the following code:\n\n``` php\n    // File: ./routes/channel.php\n    \u003c?php\n    \n    Broadcast::channel('updates', function ($user) {\n        return auth()-\u003echeck();\n    });\n    \n    Broadcast::channel('online', function ($user) {\n        if (auth()-\u003echeck()) {\n            return $user-\u003etoArray();\n        }\n    });\n```\n\nBecause our channels are private, presence is private by default, we have to define the authentication logic. The first one checks if the current user is logged in. Only logged in users can listen in on the `updates` channel. \n\nThe second checks to see if the user can listen on the `online` presence channel. Unlike the first, the presence channel does not return a boolean. It returns details of the user if the user is authorized.\n\nOne last thing we need to do is pull in the Pusher PHP SDK. Run the following command in your terminal to do this:\n\n```\n    $ composer require pusher/pusher-php-server\n```\n\nNow, let’s go over to the JavaScript side. Open the `resources/js/bootstrap.js` file and uncomment the following lines at the bottom of the file:\n\n``` javascript\n    import Echo from 'laravel-echo'\n    \n    window.Pusher = require('pusher-js');\n    \n    window.Echo = new Echo({\n        broadcaster: 'pusher',\n        key: process.env.MIX_PUSHER_APP_KEY,\n        cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n        encrypted: true\n    });\n```\n\nThis will make [Laravel Echo](https://laravel.com/docs/5.7/broadcasting#installing-laravel-echo) available to us. We will use this library to interact with Pusher. \n\nNext, open the `Updates.vue` file and update the `mounted` method as seen below:\n\n``` javascript\n    // [...]\n    \n    mounted () {\n        axios.get('/updates').then(res =\u003e (this.updates = res.data)) \n        Echo.private('updates')\n            .listen('UpdateCreated', data =\u003e this.updates.unshift(data.update))\n    }\n    \n    // [...]\n```\n\nAbove, we are using Laravel Echo to listen for the `UpdateCreated` event on the `updates` channel. Every time a new update is added, the event above will be triggered and the callback inside the `listen` method will be invoked.\n\nIn the callback, we add the `update` to the top of the `updates` array. Because Vue is reactive, the data will be updated instantly on the UI.\n\nNext, open the `OnlineList.vue` file and update the `mounted` method as seen below:\n\n``` javascript\n    // [...]\n    \n    mounted () {\n        // [...]\n        \n        Echo.join('online')\n            .here(users =\u003e (this.users = users))\n            .joining(user =\u003e this.users.push(user))\n            .leaving(user =\u003e (this.users = this.users.filter(u =\u003e (u.id !== user.id))))\n    }\n    \n    // [...]\n```\n\nAbove we have the magic that handles online presence. We use Echo to `join` the `online` presence channel. Then the methods chained are:\n\n\n- `here` - this returns all the users currently in this presence channel. In the callback, we set the `users` array to the response.\n- `joining` - this is called when a new user comes online. In the callback, we simply `push` the new user to the `users` array.\n- `leaving` - this is called when a user disconnects or goes offline. In the callback, we filter out the user that disconnected from the `users` array.\n\nThat’s all. Now let’s test our application to see it in action.\n\n\n## Testing the application\n\nTo test the application, we need two accounts that we can log into. You can check the `users` table in the SQLite database but there is an easier way to get the users.\n\nIn your terminal, run the command below:\n\n```\n    $ php artisan tinker\n```\n\n\u003e Laravel Artisan's tinker is a [repl (read-eval-print loop)](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop). A repl translates to `read-eval-print-loop`, and it is an interactive language shell. It takes in a single user input, evaluates it, and returns the result to the user. - [Scotch.io](https://scotch.io/tutorials/tinker-with-the-data-in-your-laravel-apps-with-php-artisan-tinker)\n\nIn the interactive shell, run the following command:\n\n```\n    \u003e\u003e\u003e App\\User::inRandomOrder()-\u003elimit(2)-\u003eget()-\u003eimplode('email', \"  \")\n```\n\nThis will give us the emails of two random users.\n\n![laravel-presence-tinker](//images.ctfassets.net/1es3ne0caaid/7zEgaNBxSwQqYiAMMawKq0/84e7316b309e25e13e09f6b08a80be64/laravel-presence-tinker.png)\n\nWe can use these email addresses to log in as the demo users. The password is **secret** for all the demo users.\n\nRun the command below to exit `tinker` (you can also press **ctrl + c** on your keyboard):\n\n```\n    \u003e\u003e\u003e exit\n```\n\nNow run the command below to start your PHP server:\n\n```\n    $ php artisan serve\n```\n\nNow, open two different browsers. In both, visit the URL http://localhost:8000 and log in as both users on the different browsers. You should see the application in action like this:\n\n![laravel-presence-demo](//images.ctfassets.net/1es3ne0caaid/4YFICDIELmeYmuY066gQa6/6d5b3c2a5d73fc0fae587573c0ada351/laravel-presence-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have seen how easy it is to work with presence channels on a Laravel application. \n\nThe source code is available on [GitHub](https://github.com/neoighodaro/laravel-pusher-presence).","metaTitle":"Working with presence channels in a Laravel application","metaDescription":"Use Laravel, Vue and SQLite to create a simple app that reports online presence and shows status updates in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"Rm02qCvwMUYOGIIccKeOM","type":"Entry","createdAt":"2018-10-04T23:12:46.520Z","updatedAt":"2018-10-04T23:12:46.520Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a CMS with Laravel and Vue - Part 4: Building the dashboard ","url":"cms-laravel-vue-part-4","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/laravel-vue-cms","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-10-04","description":"This six part tutorial series will guide you through building a CMS using Laravel and Vue.js. The final product will include authentication, user roles, post creation and editing, and a realtime comments feature. In part four, create the admin dashboard.","prerequisite":"Basic knowledge of Laravel and Vue will be helpful. ","content":"In the [last article of this series](https://pusher.com/tutorials/cms-laravel-vue-part-3), we built the API interface and used Laravel API resources to return neatly formatted JSON responses. We tested that the API works as we defined it to using Postman.\n\nIn this part of the series, we will start building the admin frontend of the CMS. This is the first part of the series where we will integrate Vue and explore Vue’s magical abilities.\n\nWhen we are done with this part, our application will have some added functionalities as seen below:\n\n![laravel-vue-cms-demo-part-4](//images.ctfassets.net/1es3ne0caaid/3yedKPRjGgoCooCuocGwyY/49de9d02930a8853ecb08c932beb95f8/laravel-vue-cms-demo-part-4.gif)\n\n\u003e The source code for this project is available [here](https://github.com/neoighodaro/laravel-vue-cms) on GitHub.\n\n\n## Prerequisites\n\nTo follow along with this series, a few things are required:\n\n- Basic knowledge of PHP.\n- Basic knowledge of the [Laravel](https://laravel.com) framework.\n- Basic knowledge of JavaScript (ES6 syntax).\n- Basic knowledge of [Vue](https://vuejs.org).\n\n## Building the frontend\n\nLaravel ships with Vue out of the box so we do not need to use the Vue-CLI or reference Vue from a CDN. This makes it possible for us to have all of our application, the frontend, and backend, in a single codebase.\n\nEvery newly created instance of a Laravel installation has some Vue files included by default, we can see these files when we navigate into the `resources/assets/js/components` folder.\n\n### Setting up Vue and VueRouter\n\nBefore we can start using Vue in our application, we need to first install some dependencies using NPM. To install the dependencies that come by default with Laravel, run the command below:\n\n```\n    $ npm install\n```\n\nWe will be managing all of the routes for the admin dashboard using `vue-router` so let’s pull it in:\n\n```\n    $ npm install --save vue-router\n```\n\nWhen the installation is complete, the next thing we want to do is open the `resources/assets/js/app.js` file and replace its contents with the code below:\n\n``` javascript\n    // File: ./resources/assets/js/app.js\n    require('./bootstrap');\n    \n    import Vue from 'vue'\n    import VueRouter from 'vue-router'\n    import Homepage from './components/Homepage'\n    import Read from './components/Read'\n    \n    Vue.use(VueRouter)\n    \n    const router = new VueRouter({\n        mode: 'history',\n        routes: [\n            {\n                path: '/admin/dashboard',\n                name: 'read',\n                component: Read,\n                props: true\n            },\n        ],\n    });\n    \n    const app = new Vue({\n        el: '#app',\n        router,\n        components: { Homepage },\n    });\n```\n\nIn the snippet above, we imported the `VueRouter` and added it to the Vue application. We also imported a `Homepage` and a `Read` component. These are the components where we will write our markup so let’s create both files. \n\nOpen the `resources/assets/js/components` folder and create four files:\n\n1. `Homepage.vue` - this will be the parent component for the admin dashboard frontend.\n2. `Read.vue` - this will be component that displays all the available posts on the admin dashboard.\n3. `Create.vue` - this will be the component where an admin user can create a new post.\n4. `Update.vue` - this will be the component that displays the view where an admin user can update an existing post.\n  \n\u003e Note that we didn’t create a component file for the delete operation, this is because it is going to be possible to delete a post from the `Read` component. There is no need for a view.\n\nIn the `resources/assets/js/app.js` file, we defined a `routes` array and in it, we registered a `read` route. During render time, this route’s path will be mapped to the `Read` component.\n\nIn the previous article, we specified that admin users should be shown an `admin.dashboard` view in the `index` method, however, we didn’t create this view. Let’s create the view. Open the `resources/views` folder and create a new folder called `admin`. Within the new `resources/views/admin` folder, create a new file and called `dashboard.blade.php`. This is going to be the entry point to the admin dashboard, further from this route, we will let the `VueRouter` handle everything else.\n\nOpen the `resources/views/admin/dashboard.blade.php` file and paste in the following code:\n\n``` php\n    \u003c!-- File: ./resources/views/admin/dashboard.blade.php --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003ctitle\u003e Welcome to the Admin dashboard \u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n        \u003cstyle\u003e\n            html, body {\n            background-color: #202B33;\n            color: #738491;\n            font-family: \"Open Sans\";\n            font-size: 16px;\n            font-smoothing: antialiased;\n            overflow: hidden;\n            }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \n      \u003cscript src=\"{{ asset('js/app.js') }}\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nOur goal here is to integrate Vue into the application, so we included the `resources/assets/js/app.js` file with this line of code:\n\n```\n    \u003cscript src=\"{{ asset('js/app.js') }}\"\u003e\u003c/script\u003e\n```\n\nFor our app to work, we need a root element to bind our Vue instance unto. Before the `\u003cscript\u003e` tag, add this snippet of code:\n\n``` html\n    \u003cdiv id=\"app\"\u003e\n      \u003cHomepage \n        :user-name='@json(auth()-\u003euser()-\u003ename)' \n        :user-id='@json(auth()-\u003euser()-\u003eid)'\n      \u003e\u003c/Homepage\u003e\n    \u003c/div\u003e\n```\n\nWe earlier defined the `Homepage` component as the wrapping component, that’s why we pulled it in here as the root component. For some of the frontend components to work correctly, we require some details of the logged in admin user to perform CRUD operations. This is why we passed down the `userName` and `userId` props to the `Homepage` component.\n\nWe need to prevent the `CSRF` error from occurring in our Vue frontend, so include this snippet of code just before the `\u003ctitle\u003e` tag:\n\n``` html\n    \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\"\u003e\n    \u003cscript\u003e window.Laravel = { csrfToken: 'csrf_token() ' } \u003c/script\u003e\n```\n\nThis snippet will ensure that the correct token is always included in our frontend, Laravel provides the `CSRF` protection for us out of the box.\n\nAt this point, this should be the contents of your `resources/views/admin/dashboard.blade.php` file:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\"\u003e\n        \u003cscript\u003e window.Laravel = { csrfToken: 'csrf_token() ' } \u003c/script\u003e\n        \u003ctitle\u003e Welcome to the Admin dashboard \u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n        \u003cstyle\u003e\n          html, body {\n            background-color: #202B33;\n            color: #738491;\n            font-family: \"Open Sans\";\n            font-size: 16px;\n            font-smoothing: antialiased;\n            overflow: hidden;\n          }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \u003cdiv id=\"app\"\u003e\n      \u003cHomepage \n        :user-name='@json(auth()-\u003euser()-\u003ename)' \n        :user-id='@json(auth()-\u003euser()-\u003eid)'\u003e\n      \u003c/Homepage\u003e\n    \u003c/div\u003e\n    \u003cscript src=\"{{ asset('js/app.js') }}\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\n### Setting up the Homepage view\n\nOpen the `Homepage.vue` file that we created some time ago and include this markup template:\n\n``` html\n    \u003c!-- File: ./resources/app/js/components/Homepage.vue --\u003e\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n        \u003cnav\u003e\n          \u003csection\u003e\n            \u003ca style=\"color: white\" href=\"/admin/dashboard\"\u003eLaravel-CMS\u003c/a\u003e \u0026nbsp; ||  \u0026nbsp;\n            \u003ca style=\"color: white\" href=\"/\"\u003eHOME\u003c/a\u003e\n            \u003chr\u003e\n            \u003cul\u003e\n               \u003cli\u003e\n                 \u003crouter-link :to=\"{ name: 'create', params: { userId } }\"\u003e\n                   NEW POST\n                 \u003c/router-link\u003e\n               \u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/section\u003e\n        \u003c/nav\u003e\n        \u003carticle\u003e\n          \u003cheader\u003e\n            \u003cheader class=\"d-inline\"\u003eWelcome, {{ userName }}\u003c/header\u003e\n            \u003cp @click=\"logout\" class=\"float-right mr-3\" style=\"cursor: pointer\"\u003eLogout\u003c/p\u003e\n          \u003c/header\u003e\n          \u003cdiv\u003e \n            \u003crouter-view\u003e\u003c/router-view\u003e \n          \u003c/div\u003e\n        \u003c/article\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nWe added a `router-link` in this template, which routes to the `Create` component.\n\nWe are passing the `userId` data to the `create` component because a `userId` is required during `Post` creation.\n\nLet’s include some styles so that the page looks good. Below the closing `template` tag, paste the following code:\n\n``` css\n    \u003cstyle scoped\u003e\n      @import url(https://fonts.googleapis.com/css?family=Dosis:300|Lato:300,400,600,700|Roboto+Condensed:300,700|Open+Sans+Condensed:300,600|Open+Sans:400,300,600,700|Maven+Pro:400,700);\n      @import url(\"https://netdna.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.css\");\n      * {\n        -moz-box-sizing: border-box;\n        -webkit-box-sizing: border-box;\n        box-sizing: border-box;\n      }\n      header {\n        color: #d3d3d3;\n      }\n      nav {\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        right: 82%;\n        left: 0;\n        padding: 22px;\n        border-right: 2px solid #161e23;\n      }\n      nav \u003e header {\n        font-weight: 700;\n        font-size: 0.8rem;\n        text-transform: uppercase;\n      }\n      nav section {\n        font-weight: 600;\n      }\n      nav section header {\n        padding-top: 30px;\n      }\n      nav section ul {\n        list-style: none;\n        padding: 0px;\n      }\n      nav section ul a {\n        color: white;\n        text-decoration: none;\n        font-weight: bold;\n      }\n      article {\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        right: 0;\n        left: 18%;\n        overflow: auto;\n        border-left: 2px solid #2a3843;\n        padding: 20px;\n      }\n      article \u003e header {\n        height: 60px;\n        border-bottom: 1px solid #2a3843;\n      }\n    \u003c/style\u003e\n```\n\n\u003e We are using the scoped attribute on the `\u003cstyle\u003e` tag because we want the CSS to only be applied on the `Homepage` component.\n\nNext, let's add the `\u003cscript\u003e` section that will use the props we passed down from the parent component. We will also define the method that controls the `log out` feature here. Below the closing `style` tag, paste the following code:\n\n``` javascript\n    \u003cscript\u003e\n    export default {\n      props: {\n        userId: {\n          type: Number,\n          required: true\n        },\n        userName: {\n          type: String,\n          required: true\n        }\n      },\n      data() {\n        return {};\n      },\n      methods: {\n        logout() {\n          axios.post(\"/logout\").then(() =\u003e {\n            window.location = \"/\";\n          });\n        }\n      }\n    };\n    \u003c/script\u003e\n```\n\n### Setting up the Read view\n\nIn the `resources/assets/js/app.js` file, we defined the path of the `read` component as `/admin/dashboard`, which is the same address as the `Homepage` component. This will make sure the `Read` component always loads by default.\n\nIn the `Read` component, we want to load all of the available posts. We are also going to add **Update** and **Delete** options to each post. Clicking on these options will lead to the `update` and `delete` views respectively.\n\nOpen the `Read.vue` file and paste the following:\n\n``` html\n    \u003c!-- File: ./resources/app/js/components/Read.vue --\u003e\n    \u003ctemplate\u003e\n        \u003cdiv id=\"posts\"\u003e\n            \u003cp class=\"border p-3\" v-for=\"post in posts\"\u003e\n                {{ post.title }}\n                \u003crouter-link :to=\"{ name: 'update', params: { postId : post.id } }\"\u003e\n                    \u003cbutton type=\"button\" class=\"p-1 mx-3 float-right btn btn-light\"\u003e\n                        Update\n                    \u003c/button\u003e\n                \u003c/router-link\u003e\n                \u003cbutton \n                    type=\"button\" \n                    @click=\"deletePost(post.id)\" \n                    class=\"p-1 mx-3 float-right btn btn-danger\"\n                \u003e\n                    Delete\n                \u003c/button\u003e\n            \u003c/p\u003e\n            \u003cdiv\u003e\n                \u003cbutton \n                    v-if=\"next\" \n                    type=\"button\" \n                    @click=\"navigate(next)\" \n                    class=\"m-3 btn btn-primary\"\n                \u003e\n                  Next\n                \u003c/button\u003e\n                \u003cbutton \n                    v-if=\"prev\" \n                    type=\"button\" \n                    @click=\"navigate(prev)\" \n                    class=\"m-3 btn btn-primary\"\n                \u003e\n                  Previous\n                \u003c/button\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nAbove, we have the template to handle the posts that are loaded from the API. Next, paste the following below the closing `template` tag:\n\n``` javascript\n    \u003cscript\u003e\n    export default {\n      mounted() {\n        this.getPosts();\n      },\n      data() {\n        return {\n          posts: {},\n          next: null,\n          prev: null\n        };\n      },\n      methods: {\n        getPosts(address) {\n          axios.get(address ? address : \"/api/posts\").then(response =\u003e {\n            this.posts = response.data.data;\n            this.prev = response.data.links.prev;\n            this.next = response.data.links.next;\n          });\n        },\n        deletePost(id) {\n          axios.delete(\"/api/posts/\" + id).then(response =\u003e this.getPosts())\n        },\n        navigate(address) {\n          this.getPosts(address)\n        }\n      }\n    };\n    \u003c/script\u003e\n```\n\nIn the script above, we defined a `getPosts()` method that requests a list of posts from the backend server. We also defined a `posts` object as a data property. This object will be populated whenever posts are received from the backend server.\n\nWe defined `next` and `prev` data string properties to store pagination links and only display the pagination options where it is available.\n\nLastly, we defined a `deletePost()` method that takes the `id` of a post as a parameter and sends a `DELETE` request to the API interface using [Axios](https://github.com/axios/axios).\n\n### Testing the application\n\nNow that we have completed the first few components, we can serve the application using this command:\n\n```\n    $ php artisan serve\n```\n\nWe will also build the assets so that our JavaScript is compiled for us. To do this, will run the command below in the root of the project folder:\n\n```\n    $ npm run dev\n```\n\nWe can visit the application’s URL http://localhost:8000 and log in as an admin user, and delete a post:\n\n![laravel-vue-cms-demo-part-4](//images.ctfassets.net/1es3ne0caaid/3yedKPRjGgoCooCuocGwyY/49de9d02930a8853ecb08c932beb95f8/laravel-vue-cms-demo-part-4.gif)\n\n## Conclusion\n\nIn this part of the series, we started building the admin dashboard using Vue. We installed `VueRouter` to make the admin dashboard a SPA. We added the homepage view of the admin dashboard and included read and delete functionalities. \n\nWe are not done with the dashboard just yet. In the next part, we will add the views that lets us create and update posts.\n\nThe source code for this project is available [here](https://github.com/neoighodaro/laravel-vue-cms) on Github.","metaTitle":"Build a CMS with Laravel and Vue - Part 4","metaDescription":"Use Laravel and Vue.js to create a basic CMS. The final product will include authentication, user roles, post creation and editing, and a realtime comments feature. In part four, implement the admin dashboard."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7uCA97uiyIggW00uWuscK8","type":"Entry","createdAt":"2018-10-03T18:55:33.481Z","updatedAt":"2018-10-03T18:55:33.481Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live search feature with Laravel and Vue.js","url":"search-laravel-vue","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/realtime_search_pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-10-03","description":"This short tutorial will show you how to build a simple live search feature using Laravel, Vue.js and SQLite. Users will see results being filtered and returned as they type.","prerequisite":"You will need the Laravel CLI installed on your machine. This tutorial was created with Laravel 5.7.","content":"## Introduction\n\nToday we’ll be creating a realtime search engine. Realtime means that our users will get updates as soon as they occur. So using our application, our users can search data and get results instantly. We’ll be using Laravel for the backend part, Vue.js for creating our dynamic user interface and Pusher Channels to get realtime updates.\n\n\n## Prerequisites\n\nIn order to follow this tutorial a basic or good understanding of Vue.js and Laravel is required, as we’ll be using these technologies throughout this tutorial. Also ensure you have npm or Yarn on your machine.\n\nWe’ll be using these tools to build our application:\n\n\n- [Pusher](https://pusher.com/channels)\n- [Laravel 5.7](https://laravel.com)\n- [Vue.js](https://vuejs.org)\n- [Vuex](https://vuex.vuejs.org)\n- [Laravel CLI](https://laravel.com/docs/5.7/installation) installed on your machine\n\nHere’s a demo of the final product:\n\n![laravel-search-demo](//images.ctfassets.net/1es3ne0caaid/RmQBvTdxAqmkQ2eSeGWS0/fc1f9b2690eb152029996d91de3367fb/laravel-search-demo.gif)\n\n## Pusher setup\n\nHead over to the Pusher website and sign up for a free account. Select **Create new app** on the sidebar, and hit **Create my app** to create a new app after filling the form.\n\nOnce your app is created, retrieve your credentials from the **API Keys**  tab, and make note of it as we’ll use them later in the tutorial.\n\n## Initializing the project and installing dependencies\n\nTo get started we’ll install a new Laravel application using the Laravel CLI. We’ll run the following command:\n\n```\nlaravel new realtime_search_pusher\n```\n\nOnce the installation is finished run the following command to move to your app directory: \n\n```\ncd realtime_search_pusher.\n```\n\nNow we’ll install our node dependencies, first paste this in  your `package.json` file: \n\n``` json\n    {\n      \"private\": true,\n      \"scripts\": {\n        \"dev\": \"npm run development\",\n        \"development\": \"cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n        \"watch\": \"npm run development -- --watch\",\n        \"watch-poll\": \"npm run watch -- --watch-poll\",\n        \"hot\": \"cross-env NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js\",\n        \"prod\": \"npm run production\",\n        \"production\": \"cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\"\n      },\n      \"devDependencies\": {\n        \"axios\": \"^0.18\",\n        \"bootstrap\": \"^4.0.0\",\n        \"cross-env\": \"^5.1\",\n        \"jquery\": \"^3.2\",\n        \"laravel-mix\": \"^2.0\",\n        \"lodash\": \"^4.17.5\",\n        \"popper.js\": \"^1.12\",\n        \"vue\": \"^2.5.7\",\n        \"vuex\": \"^3.0.1\",\n        \"laravel-echo\": \"^1.4.0\",\n        \"pusher-js\": \"^4.2.2\"\n      }\n    }\n```\n\nThen run `npm install` or `yarn` to install the dependencies. It’s up to you.\n\nAfter this step, add the following to your  `.env` file in the root of your project directory. Ensure to replace the placeholders with your keys from Pusher.\n\n```\n    PUSHER_APP_ID=YOUR_PUSHER_APP_ID\n    PUSHER_APP_KEY=YOUR_PUSHER_APP_KEY\n    PUSHER_APP_SECRET=YOUR_PUSHER_APP_SECRET\n    PUSHER_APP_CLUSTER=YOUR_PUSHER_APP_CLUSTER\n```\n\n## Database setup\n\nIn this tutorial we’ll use SQLite as our database. Create a database.sqlite file in the database directory, and amend the .env file like this:\n\n```\n    DB_CONNECTION=sqlite\n    DB_DATABASE=/absolute/path/to/database.sqlite\n```\n\nRefer to this [section on Laravel website](https://laravel.com/docs/5.7/database) for more relevant information.\n\n\n## Building models and seeding our database\n\nNow, let’s build our database structure. We’ll use again Laravel CLI for that.\nRun this command: \n\n```\nphp artisan make:model Product -mc\n```\n\nThe above command will generate the Product model as well as its migration and its controller `ProductController.php`   for us.\n\nOpen your `Product.php` file and paste this:\n\n``` php\n    //realtime_search_pusher/app/Product.php\n    \n    \u003c?php\n    \n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    \n    class Product extends Model {\n    \n        //\n        protected $fillable = ['name', 'description', 'price', 'image'];\n    }\n```\n\n\nNext copy and paste this piece of code in your product migration file: \n\n``` php\n    //realtime_search_pusher/database/migrations/*_create_products_table.php\n    \n    \u003c?php\n    \n    use Illuminate\\Database\\Migrations\\Migration;\n    use Illuminate\\Database\\Schema\\Blueprint;\n    use Illuminate\\Support\\Facades\\Schema;\n    \n    class CreateProductsTable extends Migration\n    {\n        /**\n         * Run the migrations.\n         *\n         * @return void\n         */\n        public function up()\n        {\n            Schema::create('products', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003estring('name');\n                $table-\u003einteger('price');\n                $table-\u003estring('image');\n                $table-\u003estring('description');\n                $table-\u003etimestamps();\n            });\n        }\n    \n        /**\n         * Reverse the migrations.\n         *\n         * @return void\n         */\n        public function down()\n        {\n            Schema::dropIfExists('products');\n        }\n    }\n```\n\nThen run `php artisan migrate` to run the migration.\n\nNow, we’ll seed our database to avoid having to populate it manually because it can be tedious.\n\nExecute this command  `php artisan make:factory ProductFactory` to generate a factory for our Product model. Next copy and paste the following code inside our  `ProductFactory.php` file\n\n``` php\n    //realtime_search_pusher/database/factories/ProductFactory.php\n    \u003c?php\n    \n    use App\\Product;\n    use Faker\\Generator as Faker;\n    \n    $factory-\u003edefine(Product::class, function (Faker $faker) {\n        return [\n            'name'=\u003e $faker-\u003ename,\n            'price' =\u003e $faker-\u003enumberBetween(25, 850),\n            'description' =\u003e $faker-\u003etext(100),\n            'image' =\u003e $faker-\u003eimageUrl(850, 640, 'food',true),\n            //\n        ];\n    });\n```\n\nOur  `ProductFactory.php` sets a value for each of our Product model field as you can see in the above code.\nThe last step in this section is to tell Laravel to use our `ProductFactory`. Let’s do that, paste this code inside your `DatabaseSeeder.php` file: \n\n``` php\n    //realtime_search_pusher/database/seeds/DatabaseSeeder.php\n    \u003c?php\n    \n    use Illuminate\\Database\\Seeder;\n    \n    class DatabaseSeeder extends Seeder\n    {\n        /**\n         * Seed the application's database.\n         *\n         * @return void\n         */\n        public function run()\n        {\n            factory(App\\Product::class, 25)-\u003ecreate();\n        }\n    }\n```\n\nWe generate 25 instances of our  Product model. Finally run this command so that Laravel can seed the database with the factory we define: `php artisan db:seed`.\n\nIf you check your database, you can see that your database has been populated as well and it contains 25 rows. Great isn’t it!\n\n\n## Defining routes and creating the ProductController\n\nIn this section we’ll define our app endpoints and define the logic behind our `ProductController.php` .\n\nLet’s create a `get` route named `search` (which will be called when the user attempts to search for products), and another `get` route named `products` to fetch our products from database. Paste the following into `api.php`:\n\n``` php\n    //realtime_search_pusher/routes/api.php\n    use Illuminate\\Support\\Facades\\Route;\n    \n    Route::get('search','ProductController@search');\n    Route::get('products','ProductController@get');\n```\n\nWe should also define a get route named  `/` to return our app view. Copy this code and replace the existing one inside your `web.php` file:\n\n``` php\n    //realtime_search_pusher/routes/web.php\n    Route::get('/', function () {\n        return view('search');\n    });\n```\n\nNow let’s define our controller logic. Our controller functions will be responsible for actions to handle when some requests reach our API endpoints.\n\nOpen your `ProductController` file and paste the following code:\n\n``` php\n    //realtime_search_pusher/app/Http/Controllers/ProductController.php\n    \n    \u003c?php\n    \n    namespace App\\Http\\Controllers;\n    \n    use App\\Events\\SearchEvent;\n    use App\\Product;\n    use Illuminate\\Http\\Request;\n    \n    class ProductController extends Controller\n    {\n        //\n        public function search(Request $request)\n        {\n            $query = $request-\u003equery('query');\n            $products = Product::where('name', 'like', '%' . $query . '%')\n                -\u003eorWhere('description', 'like', '%' . $query . '%')\n                -\u003eget();\n    \n            //broadcast search results with Pusher channels\n            event(new SearchEvent($products));\n    \n            return response()-\u003ejson(\"ok\");\n        }\n    \n        //fetch all products\n        public function get(Request $request)\n        {\n            $products = Product::all();\n            return response()-\u003ejson($products);\n        }\n    }\n```\n\nIn the above code we have two functions `get`  and `search`:\n\n\n- `get` - this function returns all existing posts in our database\n- `search` - this function is a bit tricky. It gets the query sent in the request and returns every product whose name or description contains it. This is handled there:\n\n``` php\n    Product::where('name', 'like', '%' . $query . '%')\n                -\u003eorWhere('description', 'like', '%' . $query . '%')\n```\n\n### Emit event\n\nWell you may have noticed this line: `event(new SearchEvent($products))`. What is its purpose?\nIt broadcasts an event with search results to the client-side of our app using [Laravel broadcasting](https://laravel.com/docs/5.7/broadcasting). We’ll see how to create this event in the next part of the tutorial.\n\n## Create a search event with broadcasting\n\nBroadcast is a fancy way to say emit.\nOur  `SearchEvent` event will be emitted whenever the user searches for a product or initiates a search. Enough talk , let’s focus on the code. Let’s create our `SearchEvent` by running the following command in your terminal: `php artisan make:event SearchEvent`.\n\nNow open your `SearchEvent` file and paste the following:\n\n``` php\n    //realtime_search_pusher/app/Events/SearchEvent.php\n    \n    \u003c?php\n    \n    namespace App\\Events;\n    \n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcastNow;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Queue\\SerializesModels;\n    \n    class SearchEvent implements ShouldBroadcastNow\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n    \n        /**\n         * Create a new event instance.\n         *\n         * @return void\n         */\n    \n        public $products;\n    \n        public function __construct($products)\n        {\n            //\n            $this-\u003eproducts = $products;\n        }\n    \n        /**\n         * Get the channels the event should broadcast on.\n         *\n         * @return \\Illuminate\\Broadcasting\\Channel|array\n         */\n    \n        /**\n         * @return string\n         */\n        public function broadcastAs()\n        {\n            return 'searchResults';\n        }\n    \n        public function broadcastOn()\n        {\n            return new Channel('search');\n        }\n    }\n```\n\nOur class constructor initializes a set of products that are nothing but the search results from the database. We have two additional functions that may seem strange to you:\n\n\n- `broadcastAs`: customizes the broadcast name because by default Laravel uses the event’s class name.\n- `broadcastOn`: defines the channel `search` (which we’ll set up further on the tutorial) on which our event should be broadcast.\n\n\n### Broadcasting configuration\n\nAccording to Laravel documentation about [event broadcasting](https://laravel.com/docs/5.7/broadcasting), before broadcasting any events, you will first need to register the `App\\Providers\\BroadcastServiceProvider`. In fresh Laravel applications, you only need to uncomment this provider in the `providers` array of your `../config/app.php` configuration file. This provider will allow you to register the broadcast authorization routes and callbacks.\n\nIf this is done, you have to tell Laravel to use Pusher to broadcast events. Open your `.env` file and ensure you have this line: `*BROADCAST_DRIVER*``=pusher`\n\nAs we are broadcasting our events over [Pusher](https://pusher.com), we should install the Pusher PHP SDK using the Composer package manager:\n\n```\n    composer require pusher/pusher-php-server \"~3.0\"\n```\n\n### Setting up the broadcast channel\n\nLaravel broadcasts events on well defined channels. As said above our event should be broadcast on `search` channel. It’s time to set it up. Paste the following code in your `channels.php` file: \n\n``` php\n    //realtime_search_pusher/routes/channels.php\n    \n    Broadcast::channel('search', function () {\n        return true;\n    });\n```\n\nAs we aren’t using Laravel auth, we return `true` in the function callback so that everybody can use this channel to broadcast events.\n\n### Set up Laravel Echo\n\nWe’ll use [Laravel Echo](https://laravel.com/docs/5.7/broadcasting#installing-laravel-echo) to consume our events on the client-side.\n\nOpen your `resources/js/bootstrap.js`  file and uncomment this section of the code:\n\n``` javascript\n    import Echo from 'laravel-echo'\n    \n    window.Pusher = require('pusher-js');\n    \n    window.Echo = new Echo({\n        broadcaster: 'pusher',\n        key: process.env.MIX_PUSHER_APP_KEY,\n        cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n        encrypted: false\n    });\n```\n\nThe above code sets up Laravel Echo with Pusher. This will make our app aware of events broadcasted, and Laravel Echo will consume our events \n\nOur app is ready to broadcast and consume events in realtime using Pusher channels. Let’s focus now on the frontend of your app.\n\n\n## Set up Vuex store\n\nWe’ll be using the [Vuex](https://vuex.vuejs.org) library to centralize our data and control the way it is mutated throughout our application.\n\n### Create our state\n\nVuex state is a single object that contains all our application data. So let’s create  `../resources/js/store/state.js`  and paste this code inside:\n\n\n``` javascript    \n    let state = {\n        products: []\n    }\n    export default  state\n```\n\nThe code above is straightforward. The `products`  key is an array  responsible to store our database products\n\n### Create our getters\n\nWith help of getters we can compute derived based on our data store state. Create  `../resources/js/store/getters.js`  and paste this code inside\n\n``` javascript\n    let getters = {\n        products: state =\u003e {\n            return state.products\n        }\n    }\n    \n    export default getters\n```\n\n### Create our mutations\n\nMutations allow us to perform some changes on our data. Create `../resources/js/store/mutations.js` and paste this piece of code inside:\n\n``` javascript\n    let mutations = {\n        SET_PRODUCTS(state, products) {\n            state.products = products\n        }\n    }\n    \n    export default mutations\n```\n\nOur mutations object has a `SET_PRODUCTS` function with two arguments `state` and `products`; this function assigns the `products` array to our state products key.\n\n### Create our actions\n\nVuex actions allow us to perform asynchronous operations over our data. Create the file `../resources/js/store/actions.js`  and  paste the following code:\n\n``` javascript\n    let actions = {\n        SEARCH_PRODUCTS({commit}, query) {\n            let params = {\n                query\n            };\n            axios.get(`/api/search`, {params})\n                .then(res =\u003e {\n                    if (res.data === 'ok')\n                        console.log('request sent successfully')\n    \n                }).catch(err =\u003e {\n                console.log(err)\n            })\n        },\n        GET_PRODUCTS({commit}) {\n            axios.get('/api/products')\n                .then(res =\u003e {\n                    {\n                        commit('SET_PRODUCTS', res.data)\n                    }\n                })\n                .catch(err =\u003e {\n                    console.log(err)\n                })\n        }\n    }\n    \n    export default actions\n```\n\nWe have defined two actions and each of them responsible of a single operation, either products search or products search. They both perform asynchronous calls to our API routes. \n\n\n- `SEARCH_PRODUCTS`  sends a get request to our `/api/search`  endpoint to get products. This action is dispatched whenever the user is searching for something.\n\n- `GET_PRODUCTS` makes a get request to our `api/products` endpoint to get our database products and commits the request result with `SET_PRODUCTS` mutation.\n\n### Set up our store with Vue\n\nCreate the file `../resources/js/store/index.js` and paste this code inside:\n\n\n``` javascript    \n    import Vue from 'vue'\n    import Vuex from 'vuex'\n    import actions from './actions'\n    import mutations from './mutations'\n    import getters from './getters'\n    import state from \"./state\";\n    \n    Vue.use(Vuex);\n    \n    export default new Vuex.Store({\n        state,\n        mutations,\n        getters,\n        actions\n    })\n```\n\nThen, we export our store and add it to the Vue instance. Add this code to your `../resouces/js/app.js`  file.\n\n``` javascript\n    require('./bootstrap');\n    window.Vue = require('vue');\n    \n    import store from './store/index'\n    \n    Vue.component('searchbar', require('./components/Searchbar'));\n    Vue.component('product', require('./components/Product'))\n    Vue.component('products', require('./components/Products'))\n    \n    const app = new Vue({\n        el: '#app',\n        store\n    });\n```\n\nThe previous code also globally registers three Vue components, `Searchbar.vue` ,`Product.vue` and  `Products.vue` that we’ll build in the next part of this tutorial.\n\n\n## Building Vue components\n\nWe’ll build three Vue components for our app, a `Searchbar` component, a `Product` component and a `Products` component, each of them responsible for a single functionality.\n\n### Create the Product.vue component\n\nThe  `Product.vue` component is responsible for encapsulating details about a single product instance from the database and rendering it in a proper and styled way.\nPaste the following inside your `Product.vue` component.\n\n``` html\n    //../resources/js/components/Product.vue\n    \n    \u003ctemplate\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003cimg class=\"card-img-top\" :src=\"product.image\" :alt=\"product.name\"\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003ch5 class=\"card-title\"\u003e{{product.name}}\u003c/h5\u003e\n                \u003cp class=\"card-text\"\u003e{{product.description}}\u003c/p\u003e\n                \u003cspan class=\"text-danger font-weight-bold\"\u003e${{product.price}}\u003c/span\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n        export default {\n            name: \"Product\",\n            props: ['product']\n        }\n    \u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n        .card {\n            cursor: pointer;\n            margin-bottom: 8px;\n        }\n    \u003c/style\u003e\n```\n\nOur  `Product.vue` component takes a `product` property whose details we render in the component body. This code is straightforward as you may have noticed it. We are using the [Bootstrap framework](https://getbootstrap.com) to style our component.\n\n\n### Create the Products.vue component\n\nThis component will render products items from database. It’s that simple.\nSo create your  `Products.vue` component and paste this code inside:\n\n``` javascript\n    //../resources/js/components/Products.vue\n    \n    \u003ctemplate\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"row\" v-for=\"products in groupedProducts\"\u003e\n                \u003cdiv class=\"col-md-3 col-sm-6\" v-for=\"product in products\"\u003e\n                    \u003cproduct class=\"animated fadeIn\" :product=\"product\"\u003e\u003c/product\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col w-100\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n        import {mapGetters} from 'vuex'\n        import product from '../components/Product'\n    \n        export default {\n            name: \"Products\",\n            components: {\n                product\n            },\n            mounted() {\n                this.$store.dispatch('GET_PRODUCTS')\n    \n                window.Echo.channel('search')\n                    .listen('.searchResults', (e) =\u003e {\n                        this.$store.commit('SET_PRODUCTS', e.products)\n                    })\n    \n            },\n            computed: {\n                groupedProducts() {\n                    return _.chunk(this.products, 4);\n                },\n                ...mapGetters([\n                    'products'\n                ])\n            }\n        }\n    \u003c/script\u003e\n```\n\nThis component has a `groupedProducts` computed property which splits our products array and makes group of six.\n\nIn the  `mounted` hook function  we dispatch the  `GET_PRODUCTS` action, and we use Vuex helper function  `…mapGetters()` to access our products state. \n\n\nWe also use the Echo library here to listen to events.\n\n``` javascript\n    window.Echo.channel('search')\n                    .listen('.searchResults', (e) =\u003e {\n                        this.$store.commit('SET_PRODUCTS', e.products)\n    \n                        console.log(e)\n                    })\n```\n\nWe first subscribe to `search` channel, then we listen to the `searchResults` event triggered when the user searches for something. Then we commit `SET_PRODUCTS` mutation with the event payload. Yes it’s that simple.\n\n\n\u003e Note: You must append a dot to the event name so Laravel Echo can listen to your event.\n\u003e Otherwise you won’t be able to listen to any event.\n\n### Create our Searchbar.vue component\n\nThis component contains the input field with a search Button. Whenever the user enters their search query inside the input field, we’ll make a request to our backend to get realtime results.\n\nCopy and paste the following code in your `Searchbar.vue` component:\n\n``` javascript\n    \u003ctemplate\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"input-group mb-3\"\u003e\n                \u003cinput v-model=\"query\" type=\"text\" class=\"form-control\" placeholder=\"Product name or description\"\n                       aria-label=\"Product name or description\"\n                       aria-describedby=\"basic-addon2\"\u003e\n                \u003cdiv class=\"input-group-append\"\u003e\n                    \u003cbutton class=\"btn btn-primary\" @click=\"searchProducts\" @keyup.enter=\"searchProducts\" type=\"button\"\u003e\n                        Search\n                    \u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n        export default {\n            name: \"Searchbar\",\n            data() {\n                return {\n                    query: '',\n                }\n            },\n            watch: {\n                query: {\n                    handler: _.debounce(function () {\n                        this.searchProducts()\n                    }, 100)\n                }\n            },\n            methods: {\n                searchProducts() {\n                    this.$store.dispatch('SEARCH_PRODUCTS', this.query)\n                }\n            }\n        }\n    \u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n    \n    \u003c/style\u003e\n```\n\nWe bind the `query` data to our input field using Vue.js `v-model`, and we watch it. Whenever the query data changes we wait 100 ms and dispatch `SEARCH_PRODUCTS` action. This is what the following code is doing: \n\n``` javascript\n    query: {\n                    handler: _.debounce(function () {\n                        this.searchProducts()\n                    }, 100)\n                }\n```\n\n## Finalize the app\n\n Now, let’s create our `search.blade.php` file which contains our three Vue components. Paste this code inside:\n\n``` php\n    //../resources/views/search.blade.php\n    \n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\"\n              content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n    \n        \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\"\u003e\n    \n        \u003clink rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.3.1/css/all.css\"\n              integrity=\"sha384-mzrmE5qonljUremFsqc01SB46JvROS7bZs3IO2EmfFsd15uHvIt+Y8vEf7N7fWAU\" crossorigin=\"anonymous\"\u003e\n    \n        \u003clink href=\"https://fonts.googleapis.com/css?family=Montserrat\" rel=\"stylesheet\"\u003e\n        \u003clink href=\"https://fonts.googleapis.com/css?family=Lato\" rel=\"stylesheet\"\u003e\n        {{--bxslider--}}\n    \n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.5.2/animate.min.css\"/\u003e\n    \n        \u003clink rel=\"stylesheet\" href=\"{{mix('css/app.css')}}\"\u003e\n        \u003ctitle\u003eRealtime search engine with Pusher and Laravel\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \n    \n    \u003cdiv id=\"app\"\u003e\n    \n        \u003cdiv class=\"container\"\u003e\n            \u003ch5 class=\"text-center\" style=\"margin-top: 32px\"\u003eRealtime search engine with Laravel and Pusher\u003c/h5\u003e\n            \u003cbr\u003e\u003cbr\u003e\n            \u003csearchbar\u003e\u003c/searchbar\u003e\n            \u003cproducts\u003e\u003c/products\u003e\n        \u003c/div\u003e\n    \n    \u003c/div\u003e\n    \n    \u003cscript async src=\"{{mix('js/app.js')}}\"\u003e\u003c/script\u003e\n    \n    \u003c/body\u003e\n    \n    \u003c/html\u003e\n```\n\nWe are almost done. Now open your terminal and run `npm run dev` to build your app in a proper way. This can take a few seconds. After this step run `php artisan serve` and  open your browser at `localhost:8000`  to see your app working fine. Now try searching a product name or its description in the searchbar, you should get realtime results for your search. You are now a boss 😎\n\n![laravel-search-demo](//images.ctfassets.net/1es3ne0caaid/RmQBvTdxAqmkQ2eSeGWS0/fc1f9b2690eb152029996d91de3367fb/laravel-search-demo.gif)\n\n\u003e **Note**: If you encounter  a 500 error when trying to search, it’s possible that you have to disable Pusher encryption. Open these files  `../config/broadcasting.php` and  `../resources/js/bootstrap.js` and make sure you disable Pusher encryption `encrypted: false` in both of them.\n\n\n## Conclusion\n\nIn this tutorial we’ve created a realtime search engine using Laravel, Vue.js, and Pusher to provide realtime functionality. You can think up new ideas to extend the application. It’ll be fun to see what you come up with. The source code for this tutorial is available on  [GitHub](https://github.com/Ethiel97/realtime_search_pusher) here.","metaTitle":"Build a live search feature with Laravel and Vue.js","metaDescription":"Use Laravel, Vue.js and SQLite to create a simple live search feature. Users will see their results being filtered and returned as they type."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1TymXYucJKGc068KEc0eIG","type":"Entry","createdAt":"2018-10-03T18:53:30.971Z","updatedAt":"2018-10-03T18:53:30.971Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Type checking React Apps with Flow","url":"type-check-react-flow","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2iE6KIsESkeOEcCmEmCQM8","type":"Entry","createdAt":"2018-02-13T12:06:21.229Z","updatedAt":"2018-02-14T10:08:19.561Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Yomi Eluwande","url":"yomi-eluwande","email":"yomi.eluwande@gmail.com","twitter":"https://twitter.com/yomieluwande","github":"https://github.com/yomete","guestWriter":true}}],"projectRepo":"https://github.com/yomete/flowchecker","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-10-03","description":"This brief tutorial introduces the concept of type checking. It discusses why it is helpful in dynamically typed languages like JavaScript. It then works through a series of examples using Flow to type check React code.","prerequisite":"You will need Node 8+ and create-react-app installed on your machine. Some knowledge of React development is required.","content":"Type checkers help to identify certain types of problems before you even run your code. They can also improve developer workflow by adding features like auto-completion. It helps to annotate variables, functions, and it helps to detect mistakes early.\n\nIn this tutorial, readers will be introduced to type checking, Flow as a type checker,  and how to integrate into a React app.\n\n## Prerequisites\n\nBefore we begin the tutorial, the following bits are needed:\n\n\n- Some experience with the React library.\n- Knowledge of setting up an application with [create-react-app](https://github.com/facebook/create-react-app).\n- Basic knowledge of JavaScript and React\n- Node (8)\n- npm (5.2.0)\n\nPlease ensure you have Node and npm installed before starting the tutorial.\n\n## What is type checking?\n\nType checking means ensuring that the type of a property (variable, object, function, string) in a programming language is being used as it should be. It is the process of verifying and enforcing the constraints of types, and it can occur either at compile time or at runtime. It helps to detect and report errors.\n\nType checking can be divided into two: static type checking and dynamic type checking.\n\n### Static type checking\n\nStatic type checking is used in static-typed languages where the type of the variable is known at the compile time. This means that the type of the variable must be declared beforehand. \n\nAn advantage of static type checking is that it allows many type errors to be caught early in the development cycle. Static typing usually results in compiled code that executes more quickly because the compiler already knows the exact data types that are in use.\n\nExamples of statically-typed languages include C, C++, C#, and Java.\n\n### Dynamic type checking\n\nDynamic type checking is used in dynamic-typed languages where the type is usually known at runtime. This means that the type of the variable doesn’t need to be explicitly defined.\n\nIn a dynamically-typed language, once there are type errors, the program is most likely to fail at runtime. Therefore, dynamic type checking usually results in less optimized code than static type checking, although it does give room for a flexible and fast development experience as it allows you to build without the overhead of thinking about types.\n\nExamples of dynamically-typed languages include JavaScript, Lisp, Lua, Objective-C, and PHP.\n\n\n## Introduction to Flow\n\n[Flow](https://flow.org/) is a static type checker for JavaScript apps that aims to find and eliminate problems as you code. Designed by the [Facebook](https://github.com/facebook) team for JavaScript developers, it’s a static type checker that catches common errors in your application before they run.\n\nAs opposed to TypeScript, which is also a static type checker, Flow isn’t a programming language. Instead, it acts like a smart linter in the sense that it examines the `.js` files and checks for errors.\n\n\n## Integrating Flow in a React app\n\nTo get started with creating the React app, We’ll use the `create-react-app` package to bootstrap a new project.\n\n```\n    npx create-react-app flowchecker\n```\n\nOnce the command is done with the installation, you can proceed by navigating into the project folder. You can go ahead and add Flow to the project by running any of the commands below.\n\n```\n    npm install --save-dev flow-bin\n```\n\nAt the end of the installation,  the latest version of Flow will be in your project.\n\nThe next thing to do is add Flow to the `\"scripts\"` section of your `package.json` so that Flow can be used in the terminal. In the `package.json` file, add the code snippet below.\n\n```\n    \"scripts\": {\n      \"flow\": \"flow\",\n    }\n```\n\nFinally, for the Flow setup, run any of the commands below:\n\n```\n    npm run flow init\n```\n\nThis will help to create a Flow configuration file that should be committed. The Flow config file helps to determine the files that Flow should work with and what should be ignored. In this case, we’d not like to carry out static checking on `node_modules` files so edit the flow config file with the code below.\n\n```\n    [ignore]\n    .*/node_modules/.*\n    .*/src/registerServiceWorker\\.js\n    .*/src/index\\.js\n    .*\\.test\\.js\n    \n    \n    [include]\n    \n    [libs]\n    \n    [lints]\n    \n    [options]\n    all=true\n    \n    [strict]\n```\n\n\nIn the `options` section, we’re specifying that Flow works on all files with the exception of the files and folders in the `ignore` section.\n\nWith Flow installed and setup, let’s see how it can be used in a React app and its various APIs. To get started, add the line of code below to the top of the `App.js` file as that’s where we’ll be writing most of the code.\n\n```\n    //@flow\n```\n\nThat simply means notifying Flow that we’d like it to carry out static type checks in this file. Now run `npm run flow` in your terminal and you see should see an error like this below.\n\n![flow-type-check-1](//images.ctfassets.net/1es3ne0caaid/3iAMjhpJLWOkeY2Msqqo8G/413a941bffdcb5fcd787f281a30daa05/flow-type-check-1.png)\n\n### Components\n\nThe default React component isn’t compatible with Flow. Which is why there was an error above. Flow expects the Component property to have at least one type argument.\n\nHowever, there’s a fix for that. Edit the `App` component with the code block below.\n\n``` javascript\n    // src/App.js\n    \n    type TextProps = {\n      \n    }\n    \n    class App extends React.Component\u003cTextProps\u003e {\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cheader className=\"App-header\"\u003e\n              \u003cimg src={logo} className=\"App-logo\" alt=\"logo\" /\u003e\n              \u003ch1 className=\"App-title\"\u003eWelcome to React\u003c/h1\u003e\n            \u003c/header\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n```\n\nBy setting the argument to  `TextProps` which is an empty object, we are telling Flow that the component doesn’t need any property. If run the `npm run flow` command, you should see 0 errors now.\n\n![flow-type-check-2](//images.ctfassets.net/1es3ne0caaid/3qGfr8zTVKUSyA8ESGs062/d935865dae9e1b96220806e918e5b5c7/flow-type-check-2.png)\n\nNow let’s see how components can be created and used in line with Flow rules. Still in the `App.js` file, add the code below.\n\n``` javascript\n    // src/App.js\n    \n    type TextProps = {\n      name: string\n    }\n    \n    class Text extends React.Component\u003cTextProps\u003e {\n      render () {\n    \n        return (\n          \u003cReact.Fragment\u003e\n            \u003cp\u003e{this.props.name}\u003c/p\u003e\n          \u003c/React.Fragment\u003e\n        )\n      }\n    }\n```\n\nA `Text` component is created and it’s set to have the type of `TextProps`  and the `props.name` is set to a string type. This means that if we pass any other thing apart from a string, Flow is going to return an error. We can then include the `Text` component inside the `App` component.\n\n``` javascript\n    // src/App.js\n    \n    type TextProps = {\n      name: string\n    }\n    \n    class Text extends React.Component\u003cTextProps\u003e {\n      render () {\n    \n        return (\n          \u003cReact.Fragment\u003e\n            \u003cp\u003e{this.props.name}\u003c/p\u003e\n          \u003c/React.Fragment\u003e\n        )\n      }\n    }\n    \n    class App extends React.Component\u003c{}\u003e {\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cheader className=\"App-header\"\u003e\n              \u003cimg src={logo} className=\"App-logo\" alt=\"logo\" /\u003e\n              \u003ch1 className=\"App-title\"\u003eWelcome to React\u003c/h1\u003e\n            \u003c/header\u003e\n            \u003cText name={'Yomi'} /\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n```\n\nRun the `npm run flow` command and it should return an output of `0 errors`. So as to see Flow type checking in action, let’s see what would happen if a string was not passed. Go ahead to change the name props to be equal to 32.\n\n``` javascript\n    \u003cText name={32} /\u003e\n```\n\n![flow-type-check-3](//images.ctfassets.net/1es3ne0caaid/2paPBLX41mUwK8uGquMiS0/feeec1cf24ab1af1a95ef6a23a8c8404/flow-type-check-3.png)\n\n### Set state\n\nAdding a type for `state`  is straightforward, create a new object type called `State` and define the type you want and it can then be passed as an argument to `React.Component`. Modify the `Text` component with the code block below.\n\n``` javascript\n    // src/App.js\n    \n    type TextProps = {\n      name: string\n    }\n    \n    type State = {\n      count: number,\n    };\n    \n    class Text extends React.Component\u003cTextProps, State\u003e {\n    \n      state = {\n        count: 0,\n      };\n    \n      componentDidMount() {\n        setInterval(() =\u003e {\n          this.setState(prevState =\u003e ({\n            count: prevState.count + 1,\n          }));\n        }, 1000);\n      }\n    \n      render () {\n    \n        return (\n          \u003cReact.Fragment\u003e\n            \u003cp\u003eCount: {this.state.count}\u003c/p\u003e\n            \u003cp\u003e{this.props.name}\u003c/p\u003e\n          \u003c/React.Fragment\u003e\n        )\n      }\n    }\n```\n\n### Event handling\n\nTo deal with types and event handling, we make use of `SyntheticEvent\u003cT\u003e` type. The `SyntheticEvent\u003cT\u003e` types all take a single type argument which is the type of the HTML element the event handler was placed on.\n\n``` javascript\n    // src/App.js\n    \n    class EventComponent extends React.Component\u003c{}, { count: number }\u003e {\n      state = {\n        count: 0,\n      };\n      \n      handleClick = (event: SyntheticEvent\u003cHTMLButtonElement\u003e) =\u003e {\n        // To access your button instance use `event.currentTarget`.\n        (event.currentTarget: HTMLButtonElement);\n    \n        this.setState(prevState =\u003e ({\n          count: prevState.count + 1,\n        }));\n      };\n    \n      render() {\n        return (\n          \u003cdiv\u003e\n            \u003cp\u003eCount: {this.state.count}\u003c/p\u003e\n            \u003cbutton onClick={this.handleClick}\u003e\n              Increment\n            \u003c/button\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n```\n\nThe `EventComponent` can then be placed in the `App` component. If we run the `npm run flow` command, it should output `0 errors`.\n\n### Ref functions\n\n``` javascript\n    // src/App.js\n    \n    class CustomTextInput extends React.Component\u003c{}\u003e {\n    \n      handleSubmit = e =\u003e {\n        e.preventDefault();\n        console.log(this.textInput);\n      };\n    \n    \n      // tell Flow that we want to associate the textInput ref\n      // with an HTML Input button\n      textInput: ?HTMLInputElement;\n    \n      render() {\n        return (\n          \u003cdiv\u003e\n            \u003cform onSubmit={e =\u003e this.handleSubmit(e)}\u003e\n              \u003cinput type=\"text\" ref={textInput =\u003e (this.textInput = textInput)} /\u003e\n              \u003cbutton\u003eSubmit\u003c/button\u003e\n            \u003c/form\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n```\n\nTake a look at this `CustomTextInput` component above, it’s an example of how to check for `ref` types in React. The `ref` is created on the input field by using the [callback](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs) `ref` method.\n\n`textInput: ?HTMLInputElement` is simply letting Flow that we’d like the `ref` to be an [HTMLInputElement](https://flow.org/en/docs/react/types/#reactelementreftypeof-component-). The `?` in `?HTMLInputElement` is important because the first argument to `ref` will be `HTMLInputElement | null` as React will call your `[ref](https://facebook.github.io/react/docs/refs-and-the-dom.html#adding-a-ref-to-a-dom-element)` [callback with null](https://facebook.github.io/react/docs/refs-and-the-dom.html#adding-a-ref-to-a-dom-element) when the component is unmounted. \n\nTherefore, to correct that, the `?` is needed so that the `textInput` property on `CustomTextInput` will not be set until React is done with rendering.\n\nIf you run the `npm run flow` command, the terminal should output `0 errors` which means our types are correct. However, if we were to change things up a bit like below and create the ref on a `textarea`, Flow will return an error.\n\n``` javascript\n    // src/App.js\n    \n    class CustomTextInput extends React.Component\u003c{}\u003e {\n    \n      handleSubmit = e =\u003e {\n        e.preventDefault();\n        console.log(this.textInput);\n      };\n    \n    \n      // tell Flow that we want to associate the textInput ref\n      // with an HTML Input button\n      textInput: ?HTMLInputElement;\n    \n      render() {\n        return (\n          \u003cdiv\u003e\n            \u003cform onSubmit={e =\u003e this.handleSubmit(e)}\u003e\n              \u003ctextarea ref={textInput =\u003e (this.textInput = textInput)} /\u003e\n              \u003cbutton\u003eSubmit\u003c/button\u003e\n            \u003c/form\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n```\n\n![flow-type-check-4](//images.ctfassets.net/1es3ne0caaid/6Fo0MeKMXSqMOSqYcU0owy/d40c6da1023a364e2a7fce24bdaa2158/flow-type-check-4.png)\n\n## Conclusion\n\nIn this tutorial, we identified what type checking is and the different types of type checking, which are: static and dynamic type checking. We went ahead to explore static type checking by using Flow to type check a React app.\n\nWe also explored the importance of type checking and how it can be useful to detect bugs and errors early in the development stage.\n\nThe codebase for the React app above can be viewed on [GitHub](https://github.com/yomete/flowchecker).","metaTitle":"Type checking React Apps with Flow","metaDescription":"Learn how to use Flow to type check React code. Examine how type checking helps in developing error-free apps, especially with dynamically typed languages like JavaScript."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SVlbTIulOyssysKCCa40a","type":"Entry","createdAt":"2018-10-02T18:08:59.023Z","updatedAt":"2018-10-02T18:08:59.023Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a CMS with Laravel and Vue - Part 3: Building an API","url":"cms-laravel-vue-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/laravel-vue-cms","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-10-02","description":"This six part tutorial series will guide you through building a CMS using Laravel and Vue.js. The final product will include authentication, user roles, post creation and editing, and a realtime comments feature. In part three, create a simple API to handle CRUD operations.","prerequisite":"Basic knowledge of Laravel and Vue will be helpful. ","content":"In the [previous part of this series](https://pusher.com/tutorials/cms-laravel-vue-part-2), we initialized the posts resource and started building the frontend of the CMS. We designed the front page that shows all the posts and the single post page using Laravel’s templating engine, Blade. \n\nIn this part of the series, we will start building the API for the application. We will create an API for CRUD operations that an admin will perform on posts and we will test the endpoints using Postman.\n\n\u003e The source code for this project is available [here](https://github.com/neoighodaro/laravel-vue-cms) on GitHub.\n\n## Prerequisites\n\nTo follow along with this series, a few things are required:\n\n- Basic knowledge of PHP.\n- Basic knowledge of the [Laravel](https://laravel.com) framework.\n- Basic knowledge of JavaScript (ES6 syntax).\n- Basic knowledge of [Vue](https://vuejs.org).\n- [Postman](https://www.getpostman.com/) installed on your machine.\n\n## Building the API using Laravel’s API resources\n\nThe Laravel framework makes it very easy to build APIs. It has an [API resources](https://laravel.com/docs/5.6/eloquent-resources) feature that we can easily adopt in our project. You can think of API resources as a transformation layer between Eloquent models and the JSON responses that will be sent back by our API.\n\n### Allowing mass assignment on specified fields\n\nSince we are going to be performing CRUD operations on the posts in the application, we have to explicitly specify that it’s permitted for some fields to be mass-assigned data. For security reasons, Laravel [prevents mass assignment](https://laravel.com/docs/5.6/eloquent#mass-assignment) of data to model fields by default.\n\nOpen the `Post.php` file and include this line of code:\n\n``` php\n    // File: ./app/Post.php\n    protected $fillable = ['user_id', 'title', 'body', 'image'];\n```\n\n### Defining API routes\n\nWe will use the `apiResource()`method to generate only API routes. Open the `routes/api.php` file and add the following code:\n\n```\n    // File: ./routes/api.php\n    Route::apiResource('posts', 'PostController');\n```\n\n\u003e Because we will be handling the API requests on the `/posts` URL using the `PostController`, we will have to include some additional action methods in our post controller.\n  \n\n### Creating the Post resource\n\nAt the beginning of this section, we already talked about what Laravel’s API resources are. Here, we create a resource class for our `Post` model. This will enable us to retrieve `Post` data and return formatted JSON format.\n\nTo create a resource class for our `Post` model run the following command in your terminal:\n\n```\n    $ php artisan make:resource PostResource\n```\n\nA new `PostResource.php` file will be available in the `app/Http/Resources` directory of our application. Open up the `PostResource.php` file and replace the `toArray()` method with the following:\n\n``` php\n    // File: ./app/Http/Resources/PostResource.php\n    public function toArray($request)\n    {\n        return [\n            'id' =\u003e $this-\u003eid,\n            'title' =\u003e $this-\u003etitle,\n            'body' =\u003e $this-\u003ebody,\n            'image' =\u003e $this-\u003eimage,\n            'created_at' =\u003e (string) $this-\u003ecreated_at,\n            'updated_at' =\u003e (string) $this-\u003eupdated_at,\n        ];\n    }\n```\n\nThe job of this `toArray()` method is to convert our `P``ost` resource into an array. As seen above, we have specified the fields on our `Post` model, which we want to be returned as JSON when we make a request for posts.\n\nWe are also explicitly casting the dates, `created_at` and `update_at`, to strings so that they would be returned as date strings. The dates are normally an instance of [Carbon](https://carbon.nesbot.com/docs/).\n\nNow that we have created a resource class for our `Post` model, we can start building the API’s action methods in our `PostController` and return instances of the `PostResource` where we want.\n\n### Adding the action methods to the Post controller\n\nThe usual actions performed on a post include the following:\n\n1. Create - the process of creating a new post.\n2. Read - the process of reading one or more posts.\n3. Update - the process of updating an already published post.\n4. Delete - the process of deleting a post.\n\nIn the last article, we already implemented a kind of ‘Read’ functionality when we defined the `all` and `single` methods. These methods allow users to browse through posts on the homepage.\n\nIn this section, we will define the methods that will resolve our API requests for creating, reading, updating and deleting posts.\n\nThe first thing we want to do is import the `PostResource` class at the top of the `PostController.php` file:\n\n``` php\n    // File: ./app/Http/Controllers/PostController.php\n    use App\\Http\\Resources\\PostResource;\n```\n\n\u003e Because we created the `PostController` as a resource controller, we already have the resource action methods included for us in the `PostController.php` file, we will be updating them with fitting snippets of code.\n  \n\n### Building the handler action for the create operation\n\nIn the `PostController` update the `store()` action method with the code snippet below. It will allow us to validate and create a new post:\n\n``` php\n    // File: ./app/Http/Controllers/PostController.php\n    public function store(Request $request)\n    {\n        $this-\u003evalidate($request, [\n            'title' =\u003e 'required',\n            'body' =\u003e 'required',\n            'user_id' =\u003e 'required',            \n            'image' =\u003e 'required|mimes:jpeg,png,jpg,gif,svg',\n        ]);\n    \n        $post = new Post;\n    \n        if ($request-\u003ehasFile('image')) {\n            $image = $request-\u003efile('image');\n            $name = str_slug($request-\u003etitle).'.'.$image-\u003egetClientOriginalExtension();\n            $destinationPath = public_path('/uploads/posts');\n            $imagePath = $destinationPath . \"/\" . $name;\n            $image-\u003emove($destinationPath, $name);\n            $post-\u003eimage = $name;\n        }\n    \n        $post-\u003euser_id = $request-\u003euser_id;\n        $post-\u003etitle = $request-\u003etitle;\n        $post-\u003ebody = $request-\u003ebody;\n        $post-\u003esave();\n    \n        return new PostResource($post);\n    }\n```\n\nHere’s a breakdown of what this method does:\n\n1. Receives a new request.\n2. Validates the request.\n3. Creates a new post.\n4. Returns the post as a `PostResource`, which in turn returns a JSON formatted response.\n\n### Building the handler action for the read operations\n\nWhat we want here is to be able to read all the created posts or a single post. This is possible because the `apiResource()` method defines the API routes using standard REST rules.\n\nThis means that a `GET` request to this address, http://127.0.0.1:800/api/posts, should be resolved by the `index()` action method. Let’s update the `index` method with the following code:\n\n``` php\n    // File: ./app/Http/Controllers/PostController.php\n    public function index()\n    {\n        return PostResource::collection(Post::latest()-\u003epaginate(5));\n    }\n```\n\nThis method will allow us to return a JSON formatted collection of all of the stored posts. We also want to paginate the response as this will allow us to create a better view on the admin dashboard.\n\nFollowing the RESTful conventions as we discussed above, a `GET` request to this address, http://127.0.0.1:800/api/posts/id, should be resolved by the `show()` action method. Let’s update the method with the fitting snippet:\n\n``` php\n    // File: ./app/Http/Controllers/PostController.php\n    public function show(Post $post)\n    {\n        return new PostResource($post);\n    }\n```\n\nAwesome, now this method will return a single instance of a post resource upon API query.\n\n### Building the handler action for the update operation\n\nNext, let’s update the `update()` method in the `PostController` class. It will allow us to modify an existing post:\n\n``` php\n    // File: ./app/Http/Controllers/PostController.php\n    public function update(Request $request, Post $post)\n    {\n        $this-\u003evalidate($request, [\n            'title' =\u003e 'required',\n            'body' =\u003e 'required',\n        ]);\n    \n        $post-\u003eupdate($request-\u003eonly(['title', 'body']));\n        \n        return new PostResource($post);\n    }\n```\n\nThis method receives a request and a post `id` as parameters, then we use route model binding to resolve the `id` into an instance of a `Post`. First, we validate the `$request` attributes, then we update the title and body fields of the resolved post.\n\n### Building the handler action for the delete operation\n\nLet’s update the `destroy()` method in the `PostController` class. This method will allow us to remove an existing post:\n\n``` php\n    // File: ./app/Http/Controllers/PostController.php\n    public function destroy(Post $post)\n    {\n        $post-\u003edelete();\n        \n        return response()-\u003ejson(null, 204);\n    }\n```\n\nIn this method, we resolve the `Post` instance, then delete it and return a 204 response code.\n\nOur methods are complete. We have a method to handle our CRUD operations, however, we haven’t built the frontend for the admin dashboard.\n\nAt the end of the second article, we defined the `HomeController@index()` action method like this:\n\n``` php\n    public function index(Request $request)\n    {\n        if ($request-\u003euser()-\u003ehasRole('user')) {\n            return view('home');\n        }\n        \n        if ($request-\u003euser()-\u003ehasRole('admin')) {\n            return redirect('/admin/dashboard');\n        }\n    }\n```\n\nThis allowed us to redirect regular users to the view `home`, and admin users to the URL `/admin/dashboard`. At this point in this series, a visit to `/admin/dashboard` will fail because we have neither defined it as a route with a handler Controller nor built a view for it.\n\nLet’s create the `AdminController` with this command:\n\n```\n    $ php artisan make:controller AdminController\n```\n\nWe will add the `/admin/` route to our `routes/web.php` file:\n\n``` php\n    Route::get('/admin/{any}', 'AdminController@index')-\u003ewhere('any', '.*');\n```\n\n\u003e Note that we wrote `/admin/{any}` here because we intend to serve every page of the admin dashboard using the Vue router. When we start building the admin dashboard in the next article, we will let Vue handle all the routes of the `/admin` pages.\n  \n\nLet’s update the `AdminController.php` file to use the auth middleware and include an `index()` action method:\n\n``` php\n    // File: ./app/Http/Controllers/AdminController.php\n    \u003c?php \n    \n    namespace App\\Http\\Controllers;\n    \n    class AdminController extends Controller\n    {\n        public function __construct()\n        {\n            $this-\u003emiddleware('auth');\n        }\n        \n        public function index()\n        {\n            if (request()-\u003euser()-\u003ehasRole('admin')) {\n                return view('admin.dashboard');\n            }\n    \n            if (request()-\u003euser()-\u003ehasRole('user')) {\n                return redirect('/home');\n            }\n        }\n    }\n```\n\nIn the `index()`action method, we included a snippet that will ensure that only admin users can visit the admin dashboard and perform CRUD operations on posts.\n\nWe will not start building the admin dashboard in this article but will test that our API works properly. We will use Postman to make requests to the application.\n\n\n## Testing the application\n\nLet’s test that our API works as expected. We will, first of all, serve the application using this command:\n\n```\n    $ php artisan serve\n```\n\nWe can visit http://localhost:8000 to see our application and there should be exactly two posts available; these are the posts we seeded into the database during the migration:\n\n![laravel-vue-cms-demo-part-3](//images.ctfassets.net/1es3ne0caaid/1BfJKa5bwIwc8c44iyakIE/6e6cc5f832f8aeadf1236a09c7a2fb52/laravel-vue-cms-demo-part-3.gif)\n\n\u003e When testing with Postman always set the `Content-Type` header to `application/json`.  \n\nNow let’s create a new post over the API interface using Postman. Send a `POST` request as seen below:\n\n![laravel-vue-cms-postman-1](//images.ctfassets.net/1es3ne0caaid/4XhZDLkUL6SOQw6w42Mww0/b45e7b991d8f8f5ad0f61b4d9bd8c75f/laravel-vue-cms-postman-1.png)\n\nNow let’s update this post we just created. In Postman, we will pass only the `title` and `body` fields to a `PUT` request. \n\nTo make it easy, you can just copy the payload below and use the **raw** request data type for the **Body**:\n\n```\n    {\n      \"title\": \"We made an edit to the Post on APIs\",\n      \"body\": \"To a developer, 'What's an API?' might be a straightforward - if not exactly simple - question. But to anyone who doesn't have experience with code. APIs can come across as confusing or downright intimidating.\"\n    }\n```\n\n![laravel-vue-cms-postman-2](//images.ctfassets.net/1es3ne0caaid/4uIqfXRt56Qs8a4mOUYQum/0d17e9c6d4772b614c56c97b1f2772cc/laravel-vue-cms-postman-2.png)\n\n\u003e We could have used the PATCH method to make this update, the PUT and PATCH HTTP verbs both work well for editing an already existing item.\n  \nFinally, let’s delete the post using Postman:\n\n![laravel-vue-cms-postman-3](//images.ctfassets.net/1es3ne0caaid/5OEcbB7TLG2Y8MqisYuOgs/1599eff3decf48d53438db754cbf6b84/laravel-vue-cms-postman-3.png)\n\nWe are sure the post is deleted because the response status is `204 No Content` as we specified in the `PostController`.\n\n## Conclusion\n\nIn this chapter, we learned about Laravel’s API resources and we created a resource class for the Post model. We also used the `apiResources()` method to generate API only routes for our application. We wrote the methods to handle the API operations and tested them using Postman.\n\nIn the next part, we will build the admin dashboard and develop the logic that will enable the admin user to manage posts over the API.\n\nThe source code for this project is available [here](https://github.com/neoighodaro/laravel-vue-cms) on Github.","metaTitle":"Build a CMS with Laravel and Vue - Part 3","metaDescription":"Use Laravel and Vue.js to create a basic CMS. The final product will include authentication, user roles, post creation and editing, and a realtime comments feature. In part three, build the API to handle user actions."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1JFAD8AF6kqaoGyyo6seu8","type":"Entry","createdAt":"2018-10-01T19:58:43.290Z","updatedAt":"2018-10-02T15:29:17.907Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live news feed with React","url":"live-news-feed-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/react-news-feed","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-10-01","description":"This brief tutorial will show you how to build a live news feed app using React and Node.js. You will integrate NewAPI to allow users to receive a news feed on a given topic (this example uses Bitcoin articles). ","prerequisite":"You will need Node 6+ installed on your machine. Some knowledge of JavaScript and React will be helpful.","content":"There are several instances where it’s important to show new updates in realtime. This  could be in the form of displaying live activities for a sporting event, or updating a news feed with breaking news and headlines as they happen.\n\nIn this tutorial, we’ll explore how Pusher Channels can be used in conjunction with React to build a realtime news feed. If you want to play around with the code as you read this tutorial, visit this [GitHub repository](https://github.com/ayoisaiah/react-news-feed), which contains the final version of the code for you to check out and run locally.\n\n## Prerequisites\n\nTo follow along, a basic knowledge of JavaScript (ES6) and React is required. You also need to have the following installed on your machine:\n\n\n- [Node.js](https://nodejs.org/en/) (v6 and above)\n- [npm](https://www.npmjs.com/)\n\n## Getting started\n\nStart by creating a new empty directory `news-app` and run `npm init -y` from within it in order to initialize the project with a `package.json` file.\n\n### Get News API credentials\n\nHead over to [News API](https://newsapi.org) and [register for a free account](https://newsapi.org/register). Once your account is created, your API key will be presented to you. Take note of it as we’ll be using it shortly.\n\n### Get Pusher credentials\n\nVisit the Pusher website and create an account. Select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app. Once your app is created, check the **API Keys** tab to view your credentials.\n\nIn the root of your project directory, create a new file `variables.env` and populate it with the following contents:\n\n```\n    // variables.env\n    \n    PORT=5000\n    NEWS_API_KEY=\u003cyour news api key\u003e\n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\n## Set up the React app\n\nWe will bootstrap our React application with create-react-app. Install it globally on your computer by running the following command:\n\n```\n    npm install -g create-react-app\n```\n\nOnce the installation process is done, you can run the command below within the `news-app`  directory to set up your React application:\n\n```\n    create-react-app client\n```\n\nOnce the command has finished running, `cd` into the newly created `client` folder and install the other dependencies we will be needing to build the app frontend.\n\n```\n    npm install pusher-js pushid\n```\n\nThe `pusher-js` package is the client SDK for Pusher Channels, while `pushid` helps us generate a random ID string which we’ll be needing when creating the news feed.\n\nRun `yarn start` to launch the development server once all the dependencies have been installed.\n\n## Application logic\n\nOpen up `client/src/App.js` and change its contents to look like this:\n\n``` javascript\n    // client/src/App.js\n    \n    import React, { Component } from 'react';\n    import Pusher from 'pusher-js';\n    import pushid from 'pushid';\n    import './App.css';\n    \n    class App extends Component {\n      state = {\n        newsItems: [],\n      }\n    \n      componentDidMount() {\n        fetch('http://localhost:5000/live')\n          .then(response =\u003e response.json())\n          .then(articles =\u003e {\n            this.setState({\n              newsItems: [...this.state.newsItems, ...articles],\n            });\n          }).catch(error =\u003e console.log(error));\n    \n        const pusher = new Pusher('\u003cyour app key\u003e', {\n          cluster: '\u003cyour app cluster\u003e',\n          encrypted: true,\n        });\n    \n        const channel = pusher.subscribe('news-channel');\n        channel.bind('update-news', data =\u003e {\n          this.setState({\n            newsItems: [...data.articles, ...this.state.newsItems],\n          });\n        });\n      }\n    \n      render() {\n        const NewsItem = (article, id) =\u003e (\n          \u003cli key={id}\u003e\u003ca href={`${article.url}`}\u003e{article.title}\u003c/a\u003e\u003c/li\u003e\n        );\n        \n        const newsItems = this.state.newsItems.map(e =\u003e NewsItem(e, pushid()));\n    \n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003ch1 className=\"App-title\"\u003eLive Bitcoin Feed\u003c/h1\u003e\n    \n            \u003cul className=\"news-items\"\u003e{newsItems}\u003c/ul\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nOur application `state` contains only one property: `newsItems`, which will contain a list of all news articles. When the app loads, it will fetch a list of news items from the server and update the `newsItems` array which would trigger an update on  the page, causing a list of news items to be displayed.\n\nWe also subscribed the app to the `news-channel` channel, which is where our server will publish events to. Once the `update-news` event is received, the page will be updated with incoming news items.\n\nDon’t forget to replace the `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e` placeholders with the appropriate details from your Pusher account dashboard.\n\n## Add the application styles\n\nWithin the `client` directory, locate `src/App.css` and change its contents to look like this:\n\n``` css\n    // client/src/App.css\n    \n    .App {\n      width: 100%;\n      max-width: 700px;\n      margin: 0 auto;\n    }\n    \n    .App-title {\n      text-align: center;\n    }\n    \n    .text-input {\n      width: 100%;\n      border: 1px solid #f7f7f7;\n      padding: 10px;\n    }\n    \n    .text-input:hover {\n      box-shadow: 0 1px 4px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.25);\n    }\n    \n    .news-items {\n      list-style: none;\n      padding-left: 0;\n    }\n    \n    .news-items li {\n      margin-bottom: 10px;\n    }\n```\n\n## Set up the server\n\nLet’s set up a simple Express server for the purpose of fetching news items from https://newsapi.org and triggering realtime updates with Pusher.\n\n`cd` to the root of the `news-app` directory and install all the dependencies that are required to build the server:\n\n```\n    npm install express cors dotenv newsapi pusher --save\n```\n\nCreate a new `server.js` file and open it up in your text editor. Add the following code to `server.js`:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    \n    const express = require('express');\n    const cors = require('cors');\n    const Pusher = require('pusher');\n    const NewsAPI = require('newsapi');\n    \n    const app = express();\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    const newsapi = new NewsAPI(process.env.NEWS_API_KEY);\n    \n    const fetchNews = (searchTerm, pageNum) =\u003e\n      newsapi.v2.everything({\n        q: searchTerm,\n        language: 'en',\n        page: pageNum,\n        pageSize: 5,\n      });\n    \n    app.use(cors());\n    \n    function updateFeed(topic) {\n      let counter = 2;\n      setInterval(() =\u003e {\n        fetchNews(topic, counter)\n          .then(response =\u003e {\n            pusher.trigger('news-channel', 'update-news', {\n              articles: response.articles,\n            });\n            counter += 1;\n          })\n          .catch(error =\u003e console.log(error));\n      }, 5000);\n    }\n    \n    app.get('/live', (req, res) =\u003e {\n      const topic = 'bitcoin';\n      fetchNews(topic, 1)\n        .then(response =\u003e {\n          res.json(response.articles);\n          updateFeed(topic);\n        })\n        .catch(error =\u003e console.log(error));\n    });\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nOnce the `/live` endpoint is hit, news articles about bitcoin are retrieved from newsapi.org, and sent back to the client. We then make further requests every five seconds with  `setInterval` and use Pusher to trigger the `update-news` event with the incoming articles in the event payload.\n\nStart the server by running `node server.js` from the root of your project directory. At this point, you should have a news feed that updates in realtime.\n\n![react-news-feed-demo](//images.ctfassets.net/1es3ne0caaid/1Ii2mspYQImoWKKUISsWGA/d71c7248852d97e3cc6192a967180047/react-news-feed-demo.gif)\n\n## Conclusion\n\nIn this tutorial, you have learned how to build a news feed with React and how to set up Channels for adding realtime functionality to the feed. \n\nThanks for reading! Remember that you can find the source code of this app in this [GitHub repository](https://github.com/ayoisaiah/react-news-feed).","metaTitle":"Build a live news feed with React","metaDescription":"Use React and Node to create a live news feed. The example pulls in new stories about Bitcoin every few seconds, via the News API service."}}],"defaultValue":"","queryType":"","pages":50,"route":"/tutorials","query":{"page":"21"}}},"page":"/tutorials","query":{"page":"21"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?page=21 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:44 GMT -->
</html>