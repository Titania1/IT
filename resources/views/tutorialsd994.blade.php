<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Social&page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:41:51 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">68</span> tutorials for “<span class="css-npldjc ehwuahf2">Social</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsdf08.html?product=Channels&amp;tag=Social" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials19b3.html?product=Beams&amp;tag=Social" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Social"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/live-blog-ruby-rails.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Ruby<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Ruby on Rails<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a live blog app using Ruby on Rails</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Build a simple blog app with realtime post updates. Host images with Cloudinary and display new posts instantly.</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/comments-app-ruby-rails.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a comments app with Ruby on Rails</h3><p class="css-k12xad e5jrto45">This short tutorial demonstrates how to integrate realtime updates into a Ruby on Rails application. You will create a s...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/ios-chat-app-swift-chatkit-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an iOS chat app using Swift and Chatkit - Part 3: Building the iOS app</h3><p class="css-k12xad e5jrto45">Build a chat app for iOS, with a Laravel API backend. In part three, build the iOS application. By the end of this secti...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-comments-go-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live comments feed with Go and Vue.js</h3><p class="css-k12xad e5jrto45">Build a simple comments feed using Go, Vue.js and SQLite. Users can comment on a post, with the comments feed updating i...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-feed-go-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a photo feed with Go and Vue.js</h3><p class="css-k12xad e5jrto45">Build a photo feed application using Go, Vue.js and SQLite. Users can post pictures, and see each others&#x27; images appear ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/collaborative-painting-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a collaborative painting app using Vue.js</h3><p class="css-k12xad e5jrto45">Build a collaborative painting app using Vue.js. Two users can work together on one drawing, seeing each other&#x27;s changes...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-comments-ruby-rails-postgresql.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Ruby</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live comments app with Ruby on Rails and PostgreSQL</h3><p class="css-k12xad e5jrto45">Build a social commenting application using Ruby on Rails and PostgreSQL. App users can leave comments on a sample post,...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-sharing-ruby-rails.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Ruby</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a photo sharing app with Ruby on Rails and Cloudinary</h3><p class="css-k12xad e5jrto45">Build a simple photo sharing app using Ruby and Cloudinary. Users will be able to upload and caption photos, and receive...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/social-notifications-ios-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Send push notifications in a social network iOS app - Part 2: Build the app</h3><p class="css-k12xad e5jrto45">Learn to build a social network app for iOS, featuring push notifications. In part two, create the app and set up push n...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsebe0.html?tag=Social&amp;page=2" class="css-5s6711 edg0byb1">Prev</a><a href="tutorialsd0f0.html?tag=Social&amp;page=1" class="css-5s6711 edg0byb1">1</a><a href="tutorialsebe0.html?tag=Social&amp;page=2" class="css-5s6711 edg0byb1">2</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsd994.html?tag=Social&amp;page=3" class="css-2wakph edg0byb1">3</a><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials0121.html?tag=Social&amp;page=4" class="css-za1ua3 edg0byb1">4</a><a href="tutorialsd777.html?tag=Social&amp;page=5" class="css-za1ua3 edg0byb1">5</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials725b.html?tag=Social&amp;page=8" class="css-5s6711 edg0byb1">8</a><a href="tutorials0121.html?tag=Social&amp;page=4" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":68,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3HXaRCz90cI2UgoMassMMC","type":"Entry","createdAt":"2018-06-15T10:54:47.337Z","updatedAt":"2018-06-15T10:54:47.337Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a live blog app using Ruby on Rails","url":"live-blog-ruby-rails","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qeLNtkOw0ImAS2QcUcKcG","type":"Entry","createdAt":"2018-06-15T10:54:43.491Z","updatedAt":"2019-05-17T10:50:18.109Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Oreoluwa Ogundipe","url":"oreoluwa-ogundipe","email":"oreogundipe@gmail.com","twitter":"https://twitter.com/ogundipeore","github":"https://github.com/orehga","guestWriter":true}}],"projectRepo":"https://github.com/oreHGA/ruby-live-blog","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6S5luSjtlYk4i8eM8AyO4I","type":"Entry","createdAt":"2018-02-02T13:39:48.331Z","updatedAt":"2018-02-12T14:41:19.307Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby","url":"ruby","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"hPWAADkjVmomS68E6seqQ","type":"Entry","createdAt":"2018-02-12T14:48:52.613Z","updatedAt":"2018-02-12T14:48:52.613Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby on Rails","url":"ruby-on-rails","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-06-12","description":"Build a simple blog app with realtime post updates. Host images with Cloudinary and display new posts instantly.","prerequisite":"You will need Ruby 2.2+ and Rails 4.2+ installed on your machine. ","content":"With the advancements of technology came new ways of doing things. About 20 years ago, the major source of obtaining information was from printed publications. Now, people don’t buy as many printed publications as before. They visit the websites of media publications, consume information and then continue with the rest of their days. This has come with numerous advantages with the major advantage being how fast it is to get the new articles to the readers.\n\n\n## What we’ll build\n\nIn this article, we are going to create a live blog application that allows readers to see new posts in realtime as editors publish them. To do this, we are going to use Ruby on Rails and Pusher.\n\n![ruby-live-blog-demo](//images.ctfassets.net/1es3ne0caaid/7sOXPRNnpuq0OAeYiKCcAE/804ad02ee143d0bab36d8fae1797f5e6/ruby-live-blog-demo.gif)\n\n## Prerequisites\n\nTo follow through this tutorial, you’ll need the following:\n\n- Ruby installed on your machine\n- Rails on your machine\n\nTo confirm your installation, run the following command:\n\n```\n    rails --version # minimum version 4.2\n    ruby --version # minimum version 2.2.2 \n```\n\nIf you get their version numbers as results then you’re good to go.\n\n## Getting started\n\n### Creating a new Ruby project\nTo create a new rails project, run the following command:\n\n```\n    rails new ruby-live-blog\n```\n\nThis creates a starter project for you with the following structure:\n\n![ruby-live-blog-structure](//images.ctfassets.net/1es3ne0caaid/Den3gVCCWW4soMoCmusIm/a8e0845cdeafd4446c701c1b0788e6ad/ruby-live-blog-structure.png)\n\nNow, you can view the demo application by running:\n\n```\n    rails server --binding=127.0.0.1\n```\n\nOpen your browser and navigate to http://127.0.0.1:3000/ to see the application at work\n\n![youre-on-rails](//images.ctfassets.net/1es3ne0caaid/3sOsgC4S80gOKM8Waqkgui/87c5c9e64375cbb2f8f2516223f4e515/youre-on-rails.png)\n\n### Configuring the database\nTo display blog posts to users, there has to be a place where the application stores blog posts. To store the blog posts, we need a database. For this live blog application, we are going to use SQLite as the database for storing information.\n\nTo create your database, run the command:\n\n```\n    rake db:create\n```\n\nThis creates the database in the `db/` directory of the project if they weren’t automatically created before.\n\n### Creating the post model\nTo represent a sample blog post in our application, let’s create a model. A simple blog post will contain the following properties:\n\n- Title - the title of the post\n- Body - the post content\n- Author - the name of the author of the post\n- Media - a link to the post media\n\nCreate the model by running the command:\n\n```\n    rails generate model Post title:text body:text author:text media:text\n```\n\nThis creates the post model and a migration file for the new model located in the `db/migrate/`  directory. A migration file is a form of version control for the database. Your posts migration file will look like this:\n\n``` ruby\n    # db/migrate/{timestamp}_create_posts.rb\n    \n    class CreatePosts \u003c ActiveRecord::Migration[5.2]\n      def change\n        create_table :posts do |t|\n          t.text :title\n          t.text :body\n          t.text :author\n          t.text :media\n    \n          t.timestamps\n        end\n      end\n    end\n```    \n\nTo effect the changes in the database, run the migration by using the command:\n\n```\n    rails db:migrate\n```\n\nOn a successful run, you get the following output:\n\n```\n    ➜ rails db:migrate\n    == 20180609132632 CreatePosts: migrating ======================================\n    -- create_table(:posts)\n       -\u003e 0.0016s\n    == 20180609132632 CreatePosts: migrated (0.0017s) =============================\n```\n\nAt this stage, the database structure is all set and we have created the post model. The next thing to do now is to allow editors upload new blog posts.\n\n## Creating the homepage\n\nThe homepage displays created blog posts to readers when the page is loaded. Let’s create a controller that is responsible for fetching and displaying posts on the homepage. To do this, run the following command:\n\n```\n    rails generate controller Home index\n```   \n\nThis creates a new controller and related template files. Update the home controller to look like this:\n\n``` ruby\n    # app/controllers/home_controller.rb \n    \n    class HomeController \u003c ApplicationController\n      def index\n        @posts = Post.all.order(\"created_at DESC\")\n      end\n    end\n```    \n\nThe next thing to do is to then update the index view as follows:\n\n``` html\n    \u003c!-- app/views/home/index.html.erb --\u003e\n    \u003cdiv class=\"wrapper\"\u003e\n        \u003cdiv class=\"title\"\u003e\n            \u003ch1\u003eLive blog with Ruby and Pusher\u003c/h1\u003e\n            \u003cp\u003eNew posts will be displayed in realtime\u003c/p\u003e    \n        \u003c/div\u003e\n    \n        \u003cdiv class=\"posts\" id=\"post_section\"\u003e\n            \u003c% @posts.each do |post| %\u003e\n                \u003cdiv class=\"post-card\"\u003e\n                    \u003cimg class=\"image\" src=\"\u003c%= post.media %\u003e\"\u003e\n                    \u003cdiv class=\"title\"\u003e\n                        \u003ch2\u003e\u003c%= post.title %\u003e\u003c/h2\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"body-trunc\"\u003e\n                        \u003cp\u003e\u003c%= post.body %\u003e\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c% end %\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nThe index view also has the following styling:\n\n``` scss\n    // app/assets/stylesheets/home.scss\n    \n    * {\n      font-family: \"Lora\", serif;\n    }\n    \n    .title {\n      text-align: center;\n    }\n    \n    .posts {\n      margin-top: 50px;\n      display: flex;\n      flex-direction: row;  \n      justify-content: space-around;\n      flex-wrap: wrap;\n    }\n    \n    .post-card {\n      display: flex;\n      flex-direction: column;\n      min-width: 300px;\n      max-width: 300px;\n      height: 400px;\n      box-shadow: 1px 1px rgb(68, 68, 68);\n      border: 1px solid rgb(68, 68, 68);\n      border-radius: 5px;\n      margin: 20px 0px;\n    }\n    \n    .image {\n      width: 100%;\n      height: 170px;\n    }\n    \n    .body-trunc {\n      margin-left: 10px;\n      margin-right: 10px;\n    }\n``` \n\n## Creating and storing posts\n\nThe Post controller is responsible for accepting new post data and storing the post data in the database. To create the controller, run the following command:\n\n```\n    rails generate controller Post create store\n```\n\nThis command also creates route entries for the controller methods. At this point, your `routes.rb` file should look like this:\n\n``` ruby\n    # config/routes.rb\n    \n    Rails.application.routes.draw do\n      get 'post/create'\n      post 'post/store'\n      \n      root 'home#index'\n    end\n```\n\nThe `create` route is responsible for accepting the post data from the editor and the `store` route is responsible for storing the data in the database.\n\nUpdate the create view to look like this:\n\n``` html\n    \u003c!-- app/views/post/create.html.erb --\u003e\n    \n    \u003cdiv class=\"title\"\u003e\n        \u003ch1\u003eLive Blog\u003c/h1\u003e\n        \u003cp\u003eEditor View\u003c/p\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv style=\"text-align:center\"\u003e\n        \u003cp\u003e\u003cstrong\u003eFill and submit the form below to create a new post\u003c/strong\u003e\u003c/p\u003e\n    \n        \u003cform method=\"POST\" action=\"/post/store\" enctype=\"multipart/form-data\" class=\"post-form\"\u003e\n            \u003c%= token_tag %\u003e\n    \n            \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"title\"\u003eTitle\u003c/label\u003e\n                \u003cinput type=\"text\" name=\"title\" class=\"form-control\"\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"media\"\u003ePost Media\u003c/label\u003e\n                \u003cinput type=\"file\" name=\"media\" class=\"form-control media-upload\"\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"author\"\u003ePost Author\u003c/label\u003e\n                \u003cinput type=\"text\" name=\"author\" class=\"form-control\" /\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"body\"\u003ePost Content\u003c/label\u003e\n                \u003ctextarea name=\"body\" class=\"form-control\" cols=\"30\" rows=\"10\"\u003e\u003c/textarea\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"from-group\"\u003e\n                \u003cdiv\u003e\u003cinput type=\"submit\" value=\"Create Post\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/form\u003e\n    \n    \u003c/div\u003e\n```\n\nThe view also has the following styling:\n\n``` scss\n    // app/assets/stylesheets/posts.scss\n    \n    .post-form{\n        display: flex;\n        width: 50%;\n        flex-direction: column;\n        margin: 20px auto;\n    }\n    .form-group{\n        display: flex;\n        justify-content: space-between;\n        margin: 5px 0px;\n        align-items: center;\n    }\n    \n    input[type=\"submit\"]{\n        background-color: #333333;\n        border: none;\n        color: white;\n        padding: 10px 32px;\n        text-align: center;\n        text-decoration: none;\n        display: inline-block;\n        font-size: 16px;\n    }\n```\n\nWhen you navigate to the `/``post``/create` route on the web browser, you get the following view:\n\n![ruby-live-blog-create-post-1](//images.ctfassets.net/1es3ne0caaid/oWsqxLx9IGgc6Uk0s8iUY/ea6b016c0ee8a2964b1646d5c039f67a/ruby-live-blog-create-post-1.png)\n\nAt this point, the application is almost complete. Notice that in the create view, we specified that the form should be submitted to the `/post/store` route but we did not show how the post was saved. We will look at how to save posts in the next section.\n\n## Saving images with Cloudinary\n\nTo save images for the new posts, we will use [Cloudinary](https://cloudinary.com). Cloudinary takes care of all your image and video manipulation needs when building applications.\n\nCloudinary has a [Ruby gem](https://github.com/cloudinary/cloudinary_gem) that will be used to handle the file uploads.\n\nAdd the Cloudinary as a dependency in your `Gemfile`:\n\n```\n    # adding cloudinary to gemfile\n    gem 'cloudinary'\n```\n\nInstall it by running the command:\n\n```\n    bundle install\n```\n\n### Configuring Cloudinary\n\nTo use the Cloudinary gem, you need to have a Cloudinary developer account to use it in your applications. Head over [here](https://cloudinary.com/signup) to create one if you don’t have one already. \n\nCloudinary automatically checks for a `cloudinary.yml` in the `config` directory that contains the configuration file for your Cloudinary account. You can download your own customized file for your account [here](https://cloudinary.com/console/cloudinary.yml). Once it’s downloaded, place the file in the `config` directory. \n\n### Saving posts\n\nThe module will be used in the post controller as follows:\n\n``` ruby\n    # app/controllers/post_controller.rb\n    \n    class PostController \u003c ApplicationController\n      def create\n      end\n    \n      def store\n        # upload image to cloudinary\n        @image = Cloudinary::Uploader.upload(params[:media])\n        # create a new post object and save to db\n        @post = Post.new({:title =\u003e params[:title], :text =\u003e params[:text], :author =\u003e params[:author],  :media =\u003e @image['secure_url']})\n        @post.save\n        # trigger an event with pusher\n        [...]\n        redirect_to('/')\n      end\n    end\n```\n\nNow, when a post is created and saved, you can see it on the homepage:\n\n![ruby-live-blog-create-post-2](//images.ctfassets.net/1es3ne0caaid/1ofpCGnhUoAeYGsyiSe6CS/e0210ec4f1ad96b448cbb20e65540782/ruby-live-blog-create-post-2.png)\n\n![ruby-live-blog-display-posts](//images.ctfassets.net/1es3ne0caaid/l1bnDAg0SckGCM20segws/a94903baa75e7d68a72f737786850d70/ruby-live-blog-display-posts.png)\n\n## Adding realtime functionality with Pusher\n\nCurrently, the only way users get access to new posts is if they refresh their browsers. We need a way to automatically add new posts to the page as they are created and this is where Pusher comes in. Pusher allows you to integrate realtime functionality in your applications with ease without worrying about infrastructure. To get started with Pusher, sign up for a developer account here. When you’re done with that, create a new application and note your credentials as you’ll need them as we progress.\n\nPusher has a Ruby gem which we are going to use. To install it, add the following to your `Gemfile` :\n\n```\n    # adding Pusher to Gemfile\n    \n    gem 'pusher'\n```\n\nAnd then install the gem by running the command:\n\n```\n    bundle install\n```\n\nTo confirm your installation, run:\n\n```\n    bundle info pusher\n```\n\n**Configuring the Pusher package**\nCreate a `config/initializers/pusher.rb` file and add the following content to it:\n\n``` ruby\n    # config/initializers/pusher.rb\n    require 'pusher'\n    \n    Pusher.app_id = 'PUSHER_APP_ID'\n    Pusher.key = 'PUSHER_APP_KEY'\n    Pusher.secret = 'PUSHER_APP_SECRET'\n    Pusher.cluster = 'PUSHER_APP_CLUSTER'\n    Pusher.logger = Rails.logger\n    Pusher.encrypted = true\n```\n\nThe Pusher credentials can be obtained from the pusher application [dashboard](https://dashboard.pusher.com/).\n\n### Triggering events from controller\nTo trigger a new post event, update the post controller:\n\n``` ruby\n    # app/controllers/post_controller.rb\n    class PostController \u003c ApplicationController\n      def create\n      end\n    \n      def store\n        # upload image to cloudinary\n        @image = Cloudinary::Uploader.upload(params[:media])\n        # create a new post object and save to db\n        @post = Post.new({:title =\u003e params[:title], :body =\u003e params[:body], :author =\u003e params[:author],  :media =\u003e @image['secure_url']})\n       \n        if @post.save\n          # broadcasting posts using pusher\n          Pusher.trigger('posts-channel','new-post', {\n            id: @post.id,\n            title: @post.title,\n            media: @post.media,\n            body: @post.body\n          })\n        end \n        \n        redirect_to('/')\n      end\n    end\n```\n\nWhen a post is successfully saved in the database, a `new-post` event is triggered in the `posts-channel`. For debugging purposes, you can see events that have been triggered by your application on the Pusher dashboard.\n\n### Displaying new posts in realtime for readers\nTo use Pusher in the frontend of your application, you need to do the following:\n\nInclude the Pusher script in the header of the application layout:\n\n``` html\n    # app/views/layouts/application.html.erb\n    [...]\n      \u003chead\u003e\n        [...]\n        \n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n       \n         [...]\n      \u003c/head\u003e\n    [...]\n```\n\nAfterward, create a Pusher client in the home page view\n\n``` javascript\n    # app/views/home/index.html.erb\n    \u003cscript\u003e\n        var pusher = new Pusher('YOUR_APP_KEY', {\n          cluster: 'eu',\n          encrypted: true\n        });\n    \u003c/script\u003e\n    \n    \u003cdiv class=\"wrapper\"\u003e\n    [...]\n```\n\nFinally, you’ll need to subscribe to the `post-channel` and listen for `new-post` events. Update the `app/views/home/index.html.erb` to look like this:\n\n``` html\n    # app/views/home/index.html.erb\n    \n    \u003cscript\u003e\n        var pusher = new Pusher('YOUR_APP_KEY', {\n          cluster: 'eu',\n          encrypted: true\n        });\n    \u003c/script\u003e\n    \n    \u003cdiv class=\"wrapper\"\u003e\n      [...]\n    \u003c/div\u003e\n    \n    \u003cscript\u003e\n        var channel = pusher.subscribe('posts-channel');\n        channel.bind('new-post', function(data) {\n            let post_media = data.media;\n            let post_id = data.id\n            let post_body = data.body;\n            let post_title = data.title;\n    \n            let div = document.getElementById('post_section');\n            let new_content = document.createElement(\"div\");\n            new_content.innerHTML = `\n                \u003cdiv class=\"post-card\"\u003e\n                    \u003cimg class=\"image\" src=\"${post_media}\"\u003e\n                    \u003cdiv class=\"title\"\u003e\n                        \u003ch2\u003e${post_title}\u003c/h2\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"body-trunc\"\u003e\n                        \u003cp\u003e${post_body}\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e`;\n            div.insertBefore(new_content, div.firstChild);\n        });\n    \u003c/script\u003e \n```\n\nWhen an event is broadcast, we update the UI to show the new blog post. To see the application at work, start the rails server using the command:\n\n```\n    rails server --binding=127.0.0.1\n```\n\nNavigate to the home page and the editor view to see the application:\n \n![ruby-live-blog-demo](//images.ctfassets.net/1es3ne0caaid/6VoDt4JwWIqA4cyU4uYywq/d04b9e20abba3d88e84722a0c2dabaa2/ruby-live-blog-demo.gif)\n\n## Conclusion\n\nIn this article, we looked at how to use Ruby and Pusher to build a live blog with realtime updates when new posts are created. You can leverage the concepts shared here when building your own application that needs realtime functionality. The complete source code of this demo application is available on [GitHub](https://github.com/oreHGA/ruby-live-blog).","metaTitle":"Create a live blog app using Ruby on Rails","metaDescription":"This brief tutorial shows you how to create a blog application with realtime post updates, and images hosted with Cloudinary."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"76Wlp2erKwSOoMUgkikEa0","type":"Entry","createdAt":"2018-06-07T16:31:20.083Z","updatedAt":"2018-06-07T16:31:20.083Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a comments app with Ruby on Rails","url":"comments-app-ruby-rails","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/pusher-action-cable","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6S5luSjtlYk4i8eM8AyO4I","type":"Entry","createdAt":"2018-02-02T13:39:48.331Z","updatedAt":"2018-02-12T14:41:19.307Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby","url":"ruby","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"hPWAADkjVmomS68E6seqQ","type":"Entry","createdAt":"2018-02-12T14:48:52.613Z","updatedAt":"2018-02-12T14:48:52.613Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby on Rails","url":"ruby-on-rails","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-06-07","description":"This short tutorial demonstrates how to integrate realtime updates into a Ruby on Rails application. You will create a simple comments interface. Users will be able to add comments, and see comments appear for all users instantly.","prerequisite":"You will need Ruby and Rails installed on your machine.","content":"You see the way the web world is set up now yeah? No one wants to have to reload their pages anymore to get updates as to what is going one with their applications.  You probably would have experienced realtime features like this (seeing realtime the number of likes and re-tweets on a particular tweet on twitter)! Imagine not having to swipe down again to see a new tweet! Having such interesting features are some of the advantages of having realtime functionality on your applications.\n\n## What we’ll build \n\nIn this article, we will build a realtime commenting Ruby on Rails application using Pusher. This application has a simple interface. The user loads a page and can see existing comments on the page. The user can also add comments and see as comments are being made in realtime. Because this article is primarily to show how to add realtime functionality to your application, less emphasis will be placed on Rails syntax and more on making your application realtime\n\n\n## Requirements\n\nFor you to successfully follow through this article, you need to have the following set up:\n\n- Ruby installed on your machine\n- Rails installed on your machine\n\nTo confirm your installation, run the following :\n\n```\n    ruby -v\n    rails --version\n```\n\nIf you get version numbers as result then it means you’re good to go!\n\n## Building the application\n\nTo get started, generate a new project using rails by running the command : \n\n```\n    rails new pusher-realtime-ruby\n```\n\nThis gives us a starter project with this structure to work with. The starter project has the following structure.\n\n![ruby-rails-comments-app-directories](//images.ctfassets.net/1es3ne0caaid/2HqJgFjR4Ai2M6ssiIq40c/b0e43c3cdce00d0a2e686849356f6441/ruby-rails-comments-app-directories.png)\n\n## Creating controller and routes\n\nFor this application, we have two basic routes :\n\n- `/` - displays the homepage with an image and existing comments\n- `/comment/store` -  this route handles the logic for when a new comment is made on the page\n\nCreate a new controller by running :\n\n```\n    rails generate controller Comment store\n```\n\nThis creates a `Comment` controller with an action called `store` .\n\n### Specifying our routes\n\nNow, we need to define the routes we mentioned earlier so the rails server can know to handle requests made by users. To do this, edit the `config/routes.rb` file:\n\n``` ruby\n    // config/routes.rb\n    \n    Rails.application.routes.draw do\n      post 'comment/store'\n      root 'welcome#index'\n    end\n```\n\nThe `comment/store` route accepts a post request from the user and the root of the application is set to the `welcome#index` view.\n\n\u003e We will look at the `welcome#index` view in depth later on in the article\n\n### Adding controller logic\n\nNow that the `comment/store` route has been defined, the next thing to do is to edit the controller logic to do update the comments. The controller looks like this:\n\n``` ruby\n    # app/controllers/comment_controller.rb\n    class CommentController \u003c ApplicationController\n      def store\n        render plain: params[:comment].inspect\n      end\n    end\n```\n\nAt the moment, this just renders the new comment on  a new page. The intended feature is to store the comments in the database and update the comments in realtime. \n\n### Creating a database\n\nTo store comments in a database, a database driver is needed. With Ruby on Rails, `SQLite` is used as the default database driver, and for simplicity, we are going to continue with that.\n\nTo create your database, run the command:\n\n```\n    rake db:create\n```\n\nThis creates the databases for the application in the `db/` directory.\n\n### Creating the Comment model and running migrations\n\nTo populate the database, there need to be tables. Rails is an MVC based Framework and developers can create models to represent entities and structures in their database. To do this, run the command below:\n\n```\n     rails generate model Comment comment:text\n```\n\nThis creates a `Comment` model with a single property `comment`. Running this command will also automatically generate a migration file for the model at `db/migrate/{timestamp}_create_comments.rb`. Let’s take a look at the migration file:\n\n``` ruby\n    class CreateComments \u003c ActiveRecord::Migration[5.1]\n      def change\n        create_table :comments do |t|\n          t.text :comment\n          t.timestamps\n        end\n      end\n    end\n```\n\nWe can see from above that the `comment` field is also created. Now that we are satisfied with the migration, you can use a command to run it:\n\n```\n    rails db:migrate\n```\n\nOnce the run is complete, you get a result that looks like this:\n\n```\n    rails db:migrate\n    == 20180408165733 CreateComments: migrating ===================================\n    -- create_table(:comments)\n       -\u003e 0.0022s\n    == 20180408165733 CreateComments: migrated (0.0023s) ==========================\n```\n\nThis means the `comments` table has successfully been created in the database.\n\n### Storing new comments\n\nNow, let’s go back to the comment controller. To save the comments in the database, change the `store`  action to look like this:\n\n``` ruby\n    class CommentController \u003c ApplicationController\n      def store\n        @comment = Comment.new(comment_params)\n        @comment.save\n        redirect_to '/'\n      end\n    \n      private\n        def comment_params\n          params.require(:comment).permit(:comment)\n        end\n    end\n```\n\nThis creates a new comment, saves it in the database and then reloads the home page to the user showing the existing comments\n\nCreating the HomePage view\nNow, let’s take a quick look at the `welcome#index` view.  To display the view, there is a welcome controller created, with an action called `index`.\n\n```\n    rails generate controller Welcome index\n```\n\nEdit the created controller to look like this:\n\n``` ruby\n    # app/controllers/welcome_controller.rb\n    class WelcomeController \u003c ApplicationController\n      def index\n        @comments = Comment.all\n      end\n    end\n```\n\nThis fetches all the comments from the database and then passes it to the view being generated.\n\nThe index view should be edited to look like this:\n\n``` html\n    # app/views/welcome/index.html.rb\n    \n    \u003ch1 style=\"text-align:center\"\u003eReal-time Comments!\u003c/h1\u003e\n    \u003cdiv class=\"wrapper\"\u003e\n        \u003cimg src=\"https://image4.owler.com/logo/pusher_owler_20160228_200254_large.png\" height=\"150\"alt=\"Pusher\" /\u003e\n        \u003cdiv class=\"top\"\u003e\n            \u003c%= form_with scope: :comment, url: '/comment/store', local: true do |form| %\u003e\n            \u003cdiv class=\"form-group\"\u003e\n                \u003c%= form.label :comment %\u003e\n                \u003c%= form.text_field :comment %\u003e\n                \u003c%= form.submit %\u003e\n            \u003c/div\u003e\n            \n            \u003c% end %\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"bottom\" id=\"comment_section\"\u003e\n            \u003ch2\u003eComments\u003c/h2\u003e\n            \u003c% @comments.each do |comment| %\u003e\n                \u003cp\u003e\u003c%= comment.comment %\u003e\u003c/p\u003e\n            \u003c% end %\u003e\n        \u003c/div\u003e  \n    \u003c/div\u003e\n```    \n\nThe view displays an image and a form where users can comment on the image. When the submit button is clicked, the `/comment/store` route handles the request. In the same view, we also have a listing of all the existing comments that are saved in the database.\n\nTo add some minimal styling to the page, edit the `app/assets/stylesheets/welcome.scss` file to look like this:\n\n``` scss\n    // app/assets/stylesheets/welcome.scss\n    .wrapper{\n        display: flex;\n        justify-content: space-around;\n        flex-direction: column;\n        align-items: center;\n    }\n    \n    .top{\n        display: flex;\n        justify-content: space-around;\n    }\n    \n    .bottom{\n        display: flex;\n        justify-content: center;\n        flex-direction: column;\n    }\n    \n    input[type=submit]{\n       background-color: rgb(27, 96, 160);\n       border : 0px;\n       border-radius: 10px;\n       color: white;\n       height: 40px;\n       margin-left: 20px;\n    }\n    \n    input[type=text]{\n        height: 40px;\n        border-radius: 10px;\n        border: 1px solid rgb(155, 147, 147);\n    }\n    \n    label{\n        height: 40px;\n        margin-right: 10px;\n    }\n    h2{\n        margin-bottom : 0px;\n    }\n```    \n\nTo see the application at work, start the rails server using the command:\n\n```\n    rails server --binding=127.0.0.1\n```\n\nThis starts up a rails server with the port shown to you - in this case `127.0.0.1:3000` as specified with the `--binding` flag. When you visit the application, this is what you see:\n\n![ruby-rails-comments-welcome-view](//images.ctfassets.net/1es3ne0caaid/5LGxFRMZQQqO0eq0EikeSe/63b9fb2a56182312c457a5307e6de275/ruby-rails-comments-welcome-view.png)\n\nWhat we want are the comments to be updated in realtime for all users as changes are being made. Let’s take a look at how to do this.\n\n## Adding realtime functionality using Pusher\n\nLet’s see how to add realtime functionality using [Pusher](https://pusher.com). Pusher allows to seamlessly add realtime features to your applications without worrying about infrastructure.\n\nTo get started, create a [developer account](https://pusher.com/signup). Once that is done, [create your application](https://dashboard.pusher.com/#wizard-modal) and obtain your application keys. \n\nTo use Pusher with your rails application, you need to do a couple of things.\n\n### Install Pusher via Ruby Gems\n\nAdd pusher to your `Gemfile` \n\n```\n    # Gemfile\n    [...]\n    \n    gem 'pusher'\n    \n    [...]\n```\n\nAnd then install the new gem:\n\n```\n    bundle install\n```\n\nTo confirm your installation run:\n\n```\n    bundle info pusher\n```\n\nYou should get a result like this:\n\n``` ruby\n    $ bundle info pusher\n    * pusher (1.3.1)\n            Summary: Pusher API client\n            Homepage: http://github.com/pusher/pusher-http-ruby\n            Path: /home/captog/.rvm/gems/ruby-2.4.1/gems/pusher-1.3.1\n```\n\nImport the Pusher package\n\nCreate the  `config/initializers/pusher.rb` file and edit it to look like this:\n\n``` ruby\n    # config/initializers/pusher.rb\n    require 'pusher'\n    \n    Pusher.app_id = 'PUSHER_APP_ID'\n    Pusher.key = 'PUSHER_APP_KEY'\n    Pusher.secret = 'PUSHER_APP_SECRET'\n    Pusher.cluster = 'PUSHER_APP_CLUSTER'\n    Pusher.logger = Rails.logger\n    Pusher.encrypted = true\n```\n\nThe `PUSHER_APP_ID`, `PUSHER_APP_KEY`, `PUSHER_APP_SECRET` and `PUSHER_APP_CLUSTER`  can all be obtained from the [dashboard](https://dashboard.pusher.com) of your application.\n\n### Trigger events from controller\n\nEarlier on in the article, the Comment controller saved comments to the database and then rendered the homepage. Now, let’s tweak it a bit to trigger a new event. The comment controller will look like this:\n\n``` ruby\n    # app/controllers/comment_controller.rb\n    class CommentController \u003c ApplicationController\n      def store\n        @comment = Comment.new(comment_params)\n        @comment.save\n          # broadcasting comments using pusher\n          Pusher.trigger('comment-channel','new-comment', {\n            comment: @comment.comment\n          })\n        redirect_to '/'\n      end\n    \n      private\n        def comment_params\n          params.require(:comment).permit(:comment)\n        end\n    end\n```\n\nAfter the comment is saved, then a new event named `new-comment` is triggered in the `comment-channel`. From the Pusher dashboard, you can see when events are being triggered for debugging purpose. \n\n![ruby-rails-comments-debug-console](//images.ctfassets.net/1es3ne0caaid/ciMNcN7ybmuw6AG6scyay/9512d8a07979a34d3c33649bf18e8966/ruby-rails-comments-debug-console.png)\n\n### Displaying comments on the client side\n\nSo far, we have seen how to trigger events from the server. For the users to get the realtime experience, they need to be able to see the new comments pop up on their pages. To integrate Pusher to the front end of the application, you need to do the following:\n\nFirst, include the Pusher script in the header of the application in the `app/views/layouts/application.html.erb`\n\n``` html\n    # app/views/layouts/application.html.erb\n    [...]\n      \u003chead\u003e\n        [...]\n        \n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n       \n         [...]\n      \u003c/head\u003e\n    [...]\n```\n\nNext thing to do is to create a Pusher Client in the application header:\n\n``` javascript\n    # app/views/layouts/application.html.erb\n    [...]\n      \u003chead\u003e\n        [...]\n        // add pusher script\n        \u003cscript\u003e\n          var pusher = new Pusher('PUSHER_APP_KEY', {\n          cluster: 'eu',\n          encrypted: true\n        });\n        \u003c/script\u003e\n       \n         [...]\n      \u003c/head\u003e\n    [...]\n```\n\nFinally, subscribe to the `comment-channel` and listen for `new-comment` events. You can do this in the `welcome#index` view of the application. Tweak the view to look like this:\n\n``` javascript\n    # app/views/welcome/index.html.erb\n      [...]\n        \u003cdiv class=\"bottom\" id=\"comment_section\"\u003e\n            \u003ch2\u003eComments\u003c/h2\u003e\n            \u003c% @comments.each do |comment| %\u003e\n                \u003cp\u003e\u003c%= comment.comment %\u003e\u003c/p\u003e\n            \u003c% end %\u003e\n        \u003c/div\u003e\n        \u003cscript\u003e\n            var channel = pusher.subscribe('comment-channel');\n            channel.bind('new-comment', function(data) {\n                let comment = data.comment;\n                var div = document.getElementById('comment_section');\n                div.innerHTML += `\u003cp\u003e ${comment} \u003c/p\u003e`;\n            });\n        \u003c/script\u003e  \n    \u003c/div\u003e\n```\n\nIn the above, we subscribe to the `comment-channel` and listen for a `new-comment` event. Once we get that, the new comment is appended to the comment section of the page.\n\nNow, when you visit the page again, you get this:\n\n![ruby-rails-comments-demo](//images.ctfassets.net/1es3ne0caaid/5r9TjJB1WoqW8OkuuceywW/0aec7673f3133aec8d13636e2b561c7f/ruby-rails-comments-demo.gif)\n\n## Conclusion\n\nIn this article, we looked at how to add Realtime functionality to your Rails application without any hassle. Feel free to implement this for any other use cases you deem fit. Here’s a link to the full [GitHub](https://github.com/christiannwamba/pusher-action-cable) repository if you’re interested.","metaTitle":"Build a comments app with Ruby on Rails","metaDescription":"Use Ruby on Rails to build a realtime comments app. Users can add comments and see each others' comments display immediately."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5aeEXGAZZeeAQGmMc4mggo","type":"Entry","createdAt":"2018-06-05T12:52:45.191Z","updatedAt":"2020-06-19T14:25:43.622Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an iOS chat app using Swift and Chatkit - Part 3: Building the iOS app","url":"ios-chat-app-swift-chatkit-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/pusher/sample-chatroom-ios-chatkit","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2018-06-05","description":"Build a chat app for iOS, with a Laravel API backend. In part three, build the iOS application. By the end of this section you will have a working app with instant chat functionality.","prerequisite":"To follow this series you will need Xcode, Cocoapods, PHP and Laravel installed on your machine. Some knowledge of Xcode and Swift will be helpful.","content":"We previously created the API backend we need our iOS application to connect to. In this part, we will create the application itself using Xcode and Swift. We will be building out the application based on the prototypes we created in the first part of the series.\n\nHere are the prototypes we made using our prototyping tool:\n\n![Create-iOS-Chat-App-Using-Chatkit-prototype](//images.ctfassets.net/1es3ne0caaid/2OGOxROMGsikAgIMAksa66/810bd07140a87a274ee6f983235342c4/Create-iOS-Chat-App-Using-Chatkit-prototype.png)\n\n Let’s go through some requirements you need to have to follow this part of the article.\n\n## Creating our app’s storyboard in Xcode\n\nWe previously created the scenes of our application in Xcode using the Clean Swift templates. Now we are going to work on creating our storyboards and linking them to the view controllers we created.\n\n### Creating the launch scene\n\nFirst add a Navigation View Controller and a View Controller to the storyboard as seen below. The Navigation Controller will be the entry point to our application. Set the custom class for the second View Controller as the `LaunchViewController` we created in the first part of the article.\n\n![Create-iOS-Chat-App-Using-Chatkit-launch-scene-controller](//images.ctfassets.net/1es3ne0caaid/xgFRNtuy3YGiiSUMWsAYW/3e22912c68e4bcd6f09012d0c38d7ee0/Create-iOS-Chat-App-Using-Chatkit-launch-scene-controller.png)\n\nWe will use the `LaunchViewController` to determine which initial screen to present to the user when the app is launched. If the user is logged in we’ll present the contacts list, if not, we’ll present the Welcome scene so the user can log in or sign up.\n\n### Creating the welcome scene\nThe next scene we will create is the welcome scene. When a user is not logged in, they will be redirected to this scene. From here they can sign up or log in to their account. In the `Main.storyboard` add the View Controller and create a “Present Modally” manual segue from the launch controller to the controller you just created.\n\n![Create-iOS-Chat-App-Using-Chatkit-welcome-scene](//images.ctfassets.net/1es3ne0caaid/P1C4QxlOgKmQOwEkckUqs/31f6d0f2a15493825d2d33af23caaabe/Create-iOS-Chat-App-Using-Chatkit-welcome-scene.png)\n\nAfter creating the welcome view controller, you can start designing it to look like the prototype using a combination of `UILabel`s, `UIButton`s, and `UIView`s. Then set the name of the manual segue to **Welcome**. Finally, set the custom class for the view controller to `WelcomeViewController`\n\n### Creating the signup and login scene\n\nNext create two new View Controllers. The first will be for login and the second will be for sign up. Set theView Controller for the Signup controller to `SignupViewController` and the custom class for the login View Controller to `LoginViewController`.\n\nCreate a “Present Modally” segue from the **Sign In** button to the `LoginViewController` and from the **Don’t have an account? Sign up here** button to the `SignupViewController`. Name the segues **Login** and **Signup**.\n\n![Create-iOS-Chat-App-Using-Chatkit-signup-login-scene](//images.ctfassets.net/1es3ne0caaid/3Yp5Dp0gNaEG24i0aAWKcE/bddb6f073a6c86d080affba594de08be/Create-iOS-Chat-App-Using-Chatkit-signup-login-scene.png)\n\nIn the Signup view create three input fields and create an `@IBOutlet` for them in the `SignupViewController`, we named ours `emailTextField`, `nameTextField` and `passwordTextField`. Create an `@IBAction` called `cancelButtonWasPressed` for the cancel button and `signupButtonWasPressed`  for the sign up button.\n\nIn the login view, we will follow almost the same steps as the sign up controller, but, this time the  `@IBAction` will be named `loginButtonWasPressed` and there will be no `nameTextField`.\n\n### Creating the ListContacts and Chatroom scenes\n\nNext, create a Navigation controller and make sure the root controller for it is a `UITableViewController`. Create a manual segue named **ListMessages** from the `LaunchViewController` to the navigation controller and set the custom class of the `UITableViewController` to `ListContactsViewController`.\n\nCreate a “Present Modally” manual segue named **MainNavigator** between the navigation controller and the Login and Signup scenes. \n\nLastly, create a new `UIViewController` and create a segue named **Chatroom** from the Prototype Cells to the new View Controller, then set the custom class of the View Controller to `ChatroomViewController`.\n\nHere is a screenshot of our entire storyboard:\n\n![Create-iOS-Chat-App-Using-Chatkit-storyboard](//images.ctfassets.net/1es3ne0caaid/4bUz80F2Io4CSKSWA60mY0/131de2d7b16dd933cedd7b68eff1fd26/Create-iOS-Chat-App-Using-Chatkit-storyboard.png)\n\n## Adding functionality to our scenes\n\nNow that we have our scenes in place and hooked up to our View Controllers, let’s start adding the functionality to them. We will start at the very first piece of code that gets called when the application is launched: `AppDelegate`.\n\nIn the `AppDelegate` file, right below the `import` statement add the code block below:\n\n``` swift\n    struct AppConstants {\n        static let ENDPOINT: String = \"http://127.0.0.1:8000\"\n        static let CLIENT_ID: Int = API_CLIENT_ID\n        static let CLIENT_SECRET: String = \"API_CLIENT_SECRET\"\n        static let CHATKIT_INSTANCE_LOCATOR: String = \"CHATKIT_INSTANCE_LOCATOR\"\n    }\n```\n\nIn the `struct` above, we define some constants for our application. We will use this as some configuration value handler for our application. Replace the values for the `API_CLIENT_ID`, `API_CLIENT_SECRET` and `CHATKIT_INSTANCE_``LOCATOR` with the actual values.\n\n\n\u003e 💡  You can get the `API_CLIENT_*` key values from when you were setting up Passport in the previous part of the tutorial, and you can get the `CHATKIT_INSTANCE_``LOCATOR` from the Chatkit dashboard.\n\n### Launch scene\n\nOpen the `Scenes/Launch/LaunchSceneController` file and let us start adding some functionality to the class.\n\nIn the file, replace the code with [this](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Launch/LaunchViewController.swift)\n\nWe have simplified most of the code that comes with the Clean Swift template. In the `viewDidLoad` method, we check to see if the user is logged in using an `Authenticator` class, which we will create later. If the user is logged in then we route the user to the list messages page else we go to the welcome page.\n\nNext, open the `LaunchRouter` class and in the file paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Launch/LaunchRouter.swift)\n\nIn the router we have defined the `routeToWelcome` and `routeToListContacts` methods. Both methods do what is necessary to route the user to either the **Welcome** or **MainNavigator** segue.\n\nThis is all we need to do for the Launch scene. You can delete the other template files in the `Scenes/Launch` directory as we will not be using them.\n\n### Welcome scene\n\nFor our Welcome scene we do not need to do anything actually as the scene has no logic. In the `WelcomeViewController` you can just paste the code below:\n\n``` swift\n    import UIKit\n    \n    class WelcomeViewController: UIViewController {\n    }\n```\n\nYou can delete the other template files in the Welcome scene as we will not be needing them and they serve no purpose.\n\n### Login scene\n\nFor our Login scene we will start by adding the logic to our `LoginModels` class. The models will help us format the response from the API to what our application will be able to consume.\n\nIn the `LoginModels` file paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Login/LoginModels.swift). \n\nIn the code above we have defined a series of `struct`s and in them we have `Request` and `Response`. The `Request` standardises the parameters required for the request to the login endpoint while the `Response` takes the raw response from the API and saves them as either a  `ChatkitToken` or `UserToken` object. We will define the `ChatToken` and the `UserToken` object later in the article\n\nNext open the `LoginInteractor` and paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Login/LoginInteractor.swift) into the file.\n\nIn this class we have a `login` method that just calls a `login` method on the `UsersWorker` class. Depending on the response from that call, we either show a login error or we route to the contacts list.\n\nNext, open the `LoginRouter` class and in the file paste the following code:\n\n``` swift\n    import UIKit\n    \n    @objc protocol LoginRoutingLogic {\n        func routeToListContacts()\n    }\n    \n    class LoginRouter: NSObject, LoginRoutingLogic {\n        weak var viewController: LoginViewController?\n    \n        func routeToListContacts() {\n            let storyboard = UIStoryboard(name: \"Main\", bundle: nil)\n            let destinationVC = storyboard.instantiateViewController(withIdentifier: \"MainNavigator\") as! UINavigationController\n            \n            viewController!.show(destinationVC, sender: nil)\n        }\n    }\n```\n\nThe router above has just one method. This method routes the app to the list contacts page when called.\n\nThe last class we want to edit for this scene is the `LoginViewController`. This is the class that pieces the other classes above. Open the file and paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Login/LoginViewController.swift) into the file.\n\nIn the view controller we have the usual set up methods used by Clean Swift but we also have the `@IBAction`s and `@IBOutlet`s we created when we were creating our storyboards. \n\nIn the `cancelButtonPressed` method we just dismiss the login screen modal, in the `loginButtonPressed` method we call the `login` method on the interactor, and in the `showValidationError` method we show an alert with an error message.\n\n### Signup scene\n\nFor the Login scene functionality we will start with the models. Open the `SignupModels` file in the `Scene/Signup` directory and paste the code below into it:\n\n``` swift\n    import Foundation\n    \n    enum Signup {    \n        struct Request {\n            var name: String\n            var email: String\n            var password: String\n        }\n    \n        struct Response {\n            var user: User?\n            \n            init(data: [String:Any]) {\n                self.user = User(\n                    id: data[\"id\"] as! Int,\n                    name: data[\"name\"] as! String,\n                    email: data[\"email\"] as! String,\n                    chatkit_id: data[\"chatkit_id\"] as! String\n                )\n            }\n        }\n    }\n```\n\nIn the models we have Request and Response structs. Their functionality was described above.\n\nNext, paste the code below into the `SignupInteractor` class in the same directory:\n\n``` swift\n    import Foundation\n    \n    protocol SignupBusinessLogic {\n        func createAccount(request: Signup.Request)\n    }\n    \n    class SignupInteractor: SignupBusinessLogic {\n        var viewController: SignupFormErrorLogic?\n        var router: (NSObjectProtocol \u0026 SignupRoutingLogic)?\n        var worker = UsersWorker()\n    \n        func createAccount(request: Signup.Request) -\u003e Void {\n            self.worker.signup(request: request) { user, error in\n                guard error == nil else {\n                    self.viewController?.showValidationError(\"Error creating account!\")\n                    return\n                }\n                \n                self.router?.routeToListContacts()\n            }\n        }\n    }\n```\n\nIn the `createAccount` method, we call the `signup` method on the `UsersWorker` and then depending on the response we either route to the contacts list or show an error.\n\nNext, open the router class `SignupRouter` and paste the code below into it:\n\n``` swift\n    import UIKit\n    \n    @objc protocol SignupRoutingLogic {\n        func routeToListContacts()\n    }\n    \n    class SignupRouter: NSObject, SignupRoutingLogic {\n        weak var viewController: SignupViewController?\n        \n        func routeToListContacts() {\n            let storyboard = UIStoryboard(name: \"Main\", bundle: nil)\n            let destinationVC = storyboard.instantiateViewController(withIdentifier: \"MainNavigator\") as! UINavigationController\n            \n            viewController!.show(destinationVC, sender: nil)\n        }\n    }\n```\n\nAs in the login router, this method just routes the user to the contacts screen using the `MainNavigator` segue.\n\nFor the `SignupViewController`, use [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Signup/SignupViewController.swift).\n\nIn this view controller, we set up the Clean Swift components then in the `cancelButtonPressed` method we dismiss the signup modal and in the `signupButtonPressed` method we create the account using the interactor. The `showValidationError` shows an alert when it is called, usually when there is an error signing up.\n\n### ListContacts scene\n\nThe ListContacts scene is supposed to show a list of the contacts available to chat with. Open the `ListContactsModels` file and paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/ListContacts/ListContactsModels.swift) into the file.\n\nIn the code above we have the usual `Request` and `Response` (explained above). We also have a `ParseContact` struct that takes the raw data and an array of `rooms`. It parses it into a `Contact` model object with `User` and `PCRoom` object. We reference this in the `Response`s above so as to avoid duplication.\n\nWe also have a `ViewModel` struct that we use to format the data in a way the presenter needs to display the data to the user.\n\nNext open the `ListContactsInteractor` class and paste the code below into it: https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/ListContacts/ListContactsInteractor.swift\n\nIn the method above, we have `fetchContacts`, which uses the `UsersWorker` class to fetch the contacts from the API and also the `addContact` class, which also uses the same worker to add contacts.\n\nAfter a successful call, in both methods we call the presenter, which formats the data and makes a call to the View Controller and displays the content. \n\nLet’s update the code for the `ListContactsPresenter`. Open the file and paste the code below into the file:\n\n``` swift\n    import Foundation\n    \n    protocol ListContactsPresentationLogic {\n        func presentContacts(_ contacts: [Contact])\n        func presentAddedContact(_ contact: Contact)\n    }\n    \n    class ListContactsPresenter: ListContactsPresentationLogic {\n        weak var viewController: ListContactsDisplayLogic?\n        var displayedContacts: [ListContacts.Fetch.ViewModel.DisplayedContact] = []\n    \n        func presentContacts(_ contacts: [Contact]) {\n            displayedContacts = []        \n            for contact in contacts {\n                displayedContacts.append(ListContacts.Fetch.ViewModel.DisplayedContact(\n                    id: contact.user.chatkit_id,\n                    name: contact.user.name, \n                    isOnline: false\n                ))\n            }\n            displayContacts()\n        }\n        \n        func presentAddedContact(_ contact: Contact) {\n            displayedContacts.append(ListContacts.Fetch.ViewModel.DisplayedContact(\n                id: contact.user.chatkit_id,\n                name: contact.user.name, \n                isOnline: false\n            ))\n            displayContacts()\n        }\n        \n        private func displayContacts() {\n            let vm = ListContacts.Fetch.ViewModel(displayedContacts: displayedContacts)\n            viewController?.displayFetchedContacts(viewModel: vm)\n        }\n    }\n```\n\nThe code above has three methods. `presentContacts` and `presentAddedContact` do pretty much the same thing: format the contacts, append it to the `displayedContacts` array, and call the `displayContacts` method. The `displayContacts` method just calls `displayFetchedContacts` on the View Controller.\n\nLet us update the code for the `ListContactsViewController`. Paste the following into the controller:\n\n``` swift\n    import UIKit\n    import PusherChatkit\n    \n    protocol ListContactsDisplayLogic: class {\n        func displayFetchedContacts(viewModel: ListContacts.Fetch.ViewModel)\n    }\n    \n    class ListContactsViewController: UITableViewController, ListContactsDisplayLogic {\n        var interactor: ListContactsBusinessLogic?\n        var displayedContacts: [ListContacts.Fetch.ViewModel.DisplayedContact] = []\n        var router: (NSObjectProtocol \u0026 ListContactsRoutingLogic \u0026 ListContactsDataPassing)?\n      \n        override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {\n            super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)\n            setup()\n        }\n      \n        required init?(coder aDecoder: NSCoder) {\n            super.init(coder: aDecoder)\n            setup()\n        }\n      \n        private func setup() {\n            let viewController = self\n            let interactor = ListContactsInteractor()\n            let presenter = ListContactsPresenter()\n            let router = ListContactsRouter()        \n            viewController.interactor = interactor\n            viewController.router = router\n            interactor.presenter = presenter\n            presenter.viewController = viewController\n            router.viewController = viewController\n            router.dataStore = interactor\n        }\n          \n        override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n            if let scene = segue.identifier {\n                let selector = NSSelectorFromString(\"routeTo\\(scene)WithSegue:\")\n                if let router = router, router.responds(to: selector) {\n                    router.perform(selector, with: segue)\n                }\n            }\n        }\n    }\n```\n\nThis is the basic set up that comes with the Clean Swift templates. It just sets up the connections between all the **ListContacts** scene classes. Next, let’s add the methods below to the class. These are specific to our implementation:\n\n``` swift\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        navigationItem.title = \"Contacts\"\n        navigationController?.navigationBar.prefersLargeTitles = true\n        navigationItem.rightBarButtonItem = UIBarButtonItem(\n            title: \"Add\", \n            style: .plain, \n            target: self, \n            action: #selector(showAddContactPopup)\n        )\n                \n        initialiseChatkit()\n    }\n        \n    private func initialiseChatkit() {\n        let userId = CurrentUserIDDataStore().getID()\n    \n        let chatManager = ChatManager(\n            instanceLocator: AppConstants.CHATKIT_INSTANCE_LOCATOR,\n            tokenProvider: ChatkitTokenDataStore(),\n            userID: userId.id!\n        )\n        \n        chatManager.connect(delegate: self) { user, error in\n            guard error == nil else { return }\n            self.interactor?.currentUser = user\n            self.fetchContacts()\n        }\n    }\n    \n    var emailTextField: UITextField?\n    \n    @objc func showAddContactPopup(_ sender: Any) {\n        let alert = UIAlertController(\n            title: \"Add\",\n            message: \"Enter the users email address\",\n            preferredStyle: .alert\n        )\n    \n        alert.addTextField { emailTextField in\n            emailTextField.placeholder = \"Enter email address\"\n            self.emailTextField = emailTextField\n        }\n        \n        alert.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))\n        alert.addAction(UIAlertAction(title: \"Add Contact\", style: .default) { action in\n            let request = ListContacts.Create.Request(user_id: self.emailTextField!.text!)\n            self.interactor?.addContact(request: request)\n        })\n        \n        present(alert, animated: true, completion: nil)\n    }\n    \n    private func fetchContacts() {\n        interactor?.fetchContacts(request: ListContacts.Fetch.Request())\n    }\n    \n    func displayFetchedContacts(viewModel: ListContacts.Fetch.ViewModel) {\n        displayedContacts = viewModel.displayedContacts\n        tableView.reloadData()\n    }\n```\n\nIn the `viewDidLoad` method, we configure the navigation bar and add an “Add” button to it. We also set the title to “Contacts”. The `showAddContactPopup` method shows an alert controller with a text field for the contact you want to add. When you click add, the contact will be added. \n\nThe `initialiseChatkit` method connects to Chatkit and stores the `currentUser` in the interactor while the `fetchContacts` method gets all the contacts from the API while the `displayFetchedContacts` method simply displays them.\n\nNext we will add the class extension of `ListContactsViewController` that implements the `UITableViewDelegate` protocol. At the bottom of the `ListContactsViewController` paste the following:\n\n``` swift\n    extension ListContactsViewController {    \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n        \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return displayedContacts.count\n        }\n        \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            var cell = tableView.dequeueReusableCell(withIdentifier: \"ContactTableViewCell\")        \n            if cell == nil {\n                cell = UITableViewCell(style: .subtitle, reuseIdentifier: \"ContactTableViewCell\")\n            }\n    \n            let contact = displayedContacts[indexPath.row]\n            cell?.textLabel?.text = contact.name\n            cell?.detailTextLabel?.text = contact.isOnline ? \"online\" : \"Seen recently\"\n    \n            return cell!\n        }\n    }\n```\n\nThe method should be familiar to you as it just helps us feed data to the `UITableView` so our contacts display properly on the table.\n\nThe last bit of code for the ListContacts scene is the `ListContactsRouter`. This will manage the routing to the Chatroom scene. Open the `ListContactsRouter` class and add the following code:\n\n``` swift\n    import UIKit\n    \n    @objc protocol ListContactsRoutingLogic {\n        func routeToChatroom(segue: UIStoryboardSegue)\n    }\n    \n    protocol ListContactsDataPassing {\n        var dataStore: ListContactsDataStore? { get }\n    }\n    \n    class ListContactsRouter: NSObject, ListContactsRoutingLogic, ListContactsDataPassing {\n        var dataStore: ListContactsDataStore?\n        weak var viewController: ListContactsViewController?\n    \n        func routeToChatroom(segue: UIStoryboardSegue) {\n            let destinationVC = segue.destination as! ChatroomViewController\n            var destinationDS = destinationVC.router!.dataStore!\n            passDataToChatroom(source: dataStore!, destination: \u0026destinationDS)\n        }\n        \n        func passDataToChatroom(source: ListContactsDataStore, destination: inout ChatroomDataStore) {\n            let selectedRow = viewController?.tableView.indexPathForSelectedRow?.row\n            destination.contact = source.contacts?[selectedRow!]\n            destination.currentUser = source.currentUser\n        }\n    } \n```\n\nIn the `routeToChatroom` method we call `passDataToChatroom` which passes data (the `Contact` object and the current user) to the `ListContactsViewController` for usage.\n\n### Chatroom scene\nIn the Chatroom scene we will start with the `ChatroomModels`. Open the file and paste the following code:\n\n``` swift\n    import Foundation\n    import MessageKit\n    import PusherChatkit\n    \n    enum Chatroom {\n        struct Messages {        \n            struct Fetch {\n                struct Request {\n                    var room: PCRoom\n                }\n                \n                struct Response {\n                    var messages: [Message] = []                \n                    init(messages: [PCMessage]) {\n                        for message in messages {\n                            let res = Chatroom.Messages.Create.Response(message: message)\n                            self.messages.append(res.message)\n                        }\n                    }\n                }\n            }\n            \n            struct Create {\n                struct Request {\n                    var text: String\n                    var sender: Sender\n                    var room: PCRoom\n                }\n                \n                struct Response {\n                    var message: Message                \n                    init(message: PCMessage) {\n                        self.message = Message(\n                            text: message.text,\n                            sender: Sender(id: message.sender.id, displayName: message.sender.displayName),\n                            messageId: String(describing: message.id),\n                            date: ISO8601DateFormatter().date(from: message.createdAt)!\n                        )\n                    }\n                }\n            }\n        }\n    }\n```\n\nLike the other methods, we have the usual `Request` and `Response` struct (explained above).\n\nIn the `ChatroomInteractor.swift` file paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Chatroom/ChatroomInteractor.swift).\n\n\n\nIn the `subscribeToRoom` method, we subscribe the `currentUser` to a room. We also set the `PCRoomDelegate` to the interactor which means we can implement methods that handle events on the interactor.\n\nIn the `addChatMessage` method we add a new message to the room as the `currentUser`. When the user is added we pass the `messageId` to the completion handler.\n\nIn the extension class, we implement the `newMessage` method of the `PCRoomDelegate`. The method is fired automatically anytime there is a new message in the room. So we handle the new message by presenting it to the controller using the `ChatroomPresenter`s `presentMessages` method.\n\nNext, open the `ChatPresenter.swift` file and paste the code below into it:\n\n``` swift\n    import Foundation\n    \n    protocol ChatroomPresentationLogic {\n        func presentMessages(response: Chatroom.Messages.Fetch.Response)\n    }\n    \n    class ChatroomPresenter: ChatroomPresentationLogic {\n        weak var viewController: ChatroomDisplayLogic?\n        \n        func presentMessages(response: Chatroom.Messages.Fetch.Response) {\n            viewController?.displayChatMessages(response: response)\n        }\n    }\n```\n\nThe only method there is the `presentMessages` method. It just calls the `displayChatMessages` method on the view controller.\n\nNext, in the `ChatroomRouter` just paste in the following code:\n\n``` swift\n    import Foundation\n    \n    protocol ChatroomDataPassing {\n        var dataStore: ChatroomDataStore? { get }\n    }\n    \n    class ChatroomRouter: NSObject, ChatroomDataPassing {\n        weak var viewController: ChatroomViewController?\n        var dataStore: ChatroomDataStore?\n    }\n```\n\nThen in the `ChatroomViewController` we are going to split the controller into extensions as the code is lengthy. First paste the Clean Swift set up code into the file:\n\n``` swift\n    import UIKit\n    import MessageKit\n    import PusherChatkit\n    import MessageInputBar\n    \n    protocol ChatroomDisplayLogic: class {\n        func displayChatMessages(response: Chatroom.Messages.Fetch.Response)\n    }\n    \n    class ChatroomViewController: MessagesViewController, ChatroomDisplayLogic {\n        var messages: [Message] = []\n        var interactor: ChatroomBusinessLogic?\n        var router: (NSObjectProtocol \u0026 ChatroomDataPassing)?\n      \n        override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {\n            super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)\n            setup()\n        }\n      \n        required init?(coder aDecoder: NSCoder) {\n            super.init(coder: aDecoder)\n            setup()\n        }\n      \n        private func setup() {\n            let viewController = self\n            let interactor = ChatroomInteractor()\n            let presenter = ChatroomPresenter()\n            let router = ChatroomRouter()\n      \n            viewController.interactor = interactor\n            viewController.router = router\n            interactor.presenter = presenter\n            presenter.viewController = viewController\n            router.viewController = viewController\n            router.dataStore = interactor\n        }\n    }\n```\n\nNext, we will paste the class extension that handles the loading of the chat messages, and configures [MessageKit](https://messagekit.github.io/) and [Chatkit](https://pusher.com/chatkit) as the view is loaded:\n\n``` swift\n    extension ChatroomViewController {\n        override func viewDidLoad() {\n            super.viewDidLoad()\n            self.initialiseChatkit()\n            self.configureMessageKit()\n            self.navigationItem.title = router?.dataStore?.contact?.user.name\n        }\n        \n        private func initialiseChatkit() {\n            guard let room = router?.dataStore?.contact?.room else { return }\n            guard let currentUser = router?.dataStore?.currentUser else { return }\n            self.interactor?.currentUser = currentUser\n            self.interactor?.subscribeToRoom(room: room)\n        }\n        \n        private func configureMessageKit() {\n            messageInputBar.delegate = self\n            messagesCollectionView.messagesDataSource = self\n            messagesCollectionView.messagesLayoutDelegate = self\n            messagesCollectionView.messagesDisplayDelegate = self\n            scrollsToBottomOnKeyboardBeginsEditing = true\n            maintainPositionOnKeyboardFrameChanged = true\n        }\n        \n        func displayChatMessages(response: Chatroom.Messages.Fetch.Response) {\n            self.messages = response.messages\n            self.messagesCollectionView.reloadData()\n            self.messagesCollectionView.scrollToBottom()\n        }\n    }\n```\n\nIn the extension above we have the `initialiseChatkit` method. It takes the current user passed on from the ListContacts scene and saves it to the interactor. Then the next method is the `configureMessageKit` where we configure MessageKit. Lastly, we have the `displayChatMessages` method that displays the messages.\n\nNext, paste the extension below the previous class:\n\n``` swift\n    extension ChatroomViewController: MessagesDataSource {    \n        func isFromCurrentSender(message: MessageType) -\u003e Bool {\n            return message.sender == currentSender()\n        }\n    \n        func currentSender() -\u003e Sender {\n            return Sender(id: (interactor?.currentUser?.id)!, displayName: (interactor?.currentUser?.name)!)\n        }\n    \n        func numberOfSections(in messagesCollectionView: MessagesCollectionView) -\u003e Int {\n            return self.messages.count\n        }\n        \n        func messageForItem(at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e MessageType {\n            return self.messages[indexPath.section]\n        }\n    \n        func configureAvatarView(_ avatarView: AvatarView, for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) {\n            avatarView.initials = self.initials(fromName: message.sender.displayName)\n        }\n    \n        func messageTopLabelAttributedText(for message: MessageType, at indexPath: IndexPath) -\u003e NSAttributedString? {\n    \n            return NSAttributedString(\n                string: message.sender.displayName,\n                attributes: [NSAttributedString.Key.font: UIFont.preferredFont(forTextStyle: .caption1)]\n            )\n        }\n    \n        func messageBottomLabelAttributedText(for message: MessageType, at indexPath: IndexPath) -\u003e NSAttributedString? {\n    \n            struct ConversationDateFormatter {\n                static let formatter: DateFormatter = {\n                    let formatter = DateFormatter()\n                    formatter.dateStyle = .medium\n                    return formatter\n                }()\n            }\n    \n            return NSAttributedString(\n                string: ConversationDateFormatter.formatter.string(from: message.sentDate),\n                attributes: [NSAttributedStringKey.font: UIFont.preferredFont(forTextStyle: .caption2)]\n            )\n        }\n    }\n    \n    extension ChatroomViewController: MessagesLayoutDelegate {\n        func messageBottomLabelHeight(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e CGFloat {\n            return 16\n        }\n    \n        func messageTopLabelHeight(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e CGFloat {\n            return 16\n        }\n    \n        func avatarPosition(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e AvatarPosition {\n            return AvatarPosition(horizontal: .natural, vertical: .messageBottom)\n        }\n    \n        func messagePadding(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e UIEdgeInsets {\n            return isFromCurrentSender(message: message)\n                ? UIEdgeInsets(top: 0, left: 30, bottom: 0, right: 4)\n                : UIEdgeInsets(top: 0, left: 4, bottom: 0, right: 30)\n        }\n    \n        func footerViewSize(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e CGSize {\n            return CGSize(width: messagesCollectionView.bounds.width, height: 10)\n        }\n    \n        func heightForLocation(message: MessageType, at indexPath: IndexPath, with maxWidth: CGFloat, in messagesCollectionView: MessagesCollectionView) -\u003e CGFloat {\n            return 200\n        }\n    }\n    \n    extension ChatroomViewController: MessagesDisplayDelegate {\n    }\n    \n    extension ChatroomViewController: MessageInputBarDelegate {\n        func messageInputBar(_ inputBar: MessageInputBar, didPressSendButtonWith text: String) {\n            guard interactor?.currentUser != nil else { return }\n            guard let room = router?.dataStore?.contact?.room else { return }\n     \n            let request = Chatroom.Messages.Create.Request(text: text, sender: currentSender(), room: room)\n    \n            self.interactor?.addChatMessage(request: request) { id, error in\n                guard error == nil else { return }\n                inputBar.inputTextView.text = String()\n            }\n        }\n    }\n```\n\nThe first extension above extends the `[MessagesDataSource](https://messagekit.github.io/Protocols/MessagesDataSource.html)` protocol and has to conform to some of its methods. Here we implement `currentSender`, `numberOfMessages` and `messageForItem`, all self explanatory.\n\nThe next extension on the list is for the `[MessagesLayoutDelegate](https://messagekit.github.io/Protocols/MessagesLayoutDelegate.html)` protocol and it implements some of the methods but there are other methods you can implement to change the layouts display. There is also the implementation of `[MessagesDisplayDelegate](https://messagekit.github.io/Protocols/MessagesDisplayDelegate.html)`, which is empty but you can look through the documentation to see methods you can implement.\n\nLastly, we implement  `[MessageInputBarDelegate](https://messagekit.github.io/Protocols/MessageInputBarDelegate.html)` and in there we have the `messageInputBar` method, which is called after the send button is clicked on the chat screen. In this method we send the message using the interactor and then empty the input.\n\nWith this we are done with our scenes. Next, we will add the code for our supporting classes used in the scenes.\n\n\n## Implementing supporting classes for our application\n\nThe first set of supporting classes we will implement are the models. The models we want to implement are `User`, `Message`, `Contact`, `Room`, `UserToken`, and `ChatToken`. Here are the class contents:\n\n### Implementing the models\n\nTo implement the models, create a new folder/group in the root directory called **Models** and start creating the model files below in them. Get the code from the GitHub links.\n\n[The code for the `Message.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/Message.swift)\n\n[The code for the `Contact.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/Contact.swift) \n\n[The code for the `User.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/User.swift)\n\n[The code for `UserToken` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/UserToken.swift)\n\nIn the `UserToken` class above we implement the `NSCoding` protocol, we need this so we can save the `UserToken` object to UserDefaults.\n\n[The code to the `ChatToken.swift` model]( https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/ChatkitToken.swift)\n\nLike the `UserToken` model, the `ChatToken` does the same thing with the `NSCoding` protocol.\n\nWhen we have received a `chatkit_id` back from the server we want to store that in `UserDefaults` so that we can use it to connect to Chatkit.\n\n[The code to the `CurrentUserID.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/CurrentUserID.swift)\n\n### Implementing the services\nCreate a new folder/group in the root directory for the project on Xcode and name it **Services** and in there add the following files:\n\n`Authenticator.swift` class:\n\n``` swift\n    import Foundation\n    \n    class Authenticator {\n        func isLoggedIn() -\u003e Bool {\n            return getAccessToken().count \u003e 0\n        }\n    \n        private func getAccessToken() -\u003e String {\n            guard let token = ChatkitTokenDataStore().getToken().access_token, token.count \u003e 0 else {\n                return \"\"\n            }\n    \n            return token\n        }\n    } \n```\n\nThis `Authenticator` class checks if the user is logged in. It does this by checking if the token from the API is saved in UserDefaults.\n\n`UserTokenDataStore.swift` class:\n\n``` swift\n    import Foundation\n    \n    class UserTokenDataStore {\n        static var DATA_KEY = \"WORDS_API_TOKEN\"\n        \n        func getToken() -\u003e UserToken {\n            if let token = UserDefaults.standard.object(forKey: type(of: self).DATA_KEY) as! Data? {\n                return NSKeyedUnarchiver.unarchiveObject(with: token) as! UserToken\n            }\n    \n            return UserToken(token_type: nil, access_token: nil, expires_in: nil)\n        }\n        \n        func setToken(_ token: UserToken) {\n            let encodedData = NSKeyedArchiver.archivedData(withRootObject: token)\n            UserDefaults.standard.set(encodedData, forKey: type(of: self).DATA_KEY)\n        }\n    }\n```\n\nThe `UserDataTokenStore` class saves and fetches the token required to make calls to our backend API.\n\nAdd the `ChatTokenDataStore.swift` class with [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Services/ChatkitTokenDataStore.swift)\n\nThe class above does the same as the `UserTokenDataStore`, however it checks for the token required to make calls to the Chatkit API. It also extends the `[PCTokenProvider](https://github.com/pusher/chatkit-swift/blob/master/Source/PCTokenProvider.swift)` and thus we have the `fetchToken` method that fetches the token from the UserDefaults.\n\nAdd the `CurrentUserIDDataStore.swift` class with [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Services/CurrentUserIDDataStore.swift)\n\nThe class above does the same as the two token data stores. It takes some information, in this case the user’s Chatkit ID, and fetches and stores it in `UserDefaults`.\n\n### Implementing the global worker\nThe last class we want to implement is the `UsersWorker`. Create a `UsersWorker` class and paste the following into the file:\n\n``` swift\n    import UIKit\n    import Alamofire\n    \n    class UsersWorker {\n    }\n    \n    // MARK: Errors\n    \n    enum ContactsError: Error {\n        case CannotAdd\n        case CannotFetch\n    }\n    \n    enum UsersStoreError: Error {\n        case CannotLogin\n        case CannotSignup\n        case CannotFetchChatkitToken\n    }\n```\n\nNow we will start adding methods to the `UsersWorker` class. The first method is the `fetchContacts` method, which calls the API, using [Alamofire](https://github.com/Alamofire/Alamofire), to get a list of contacts for display:\n\n``` swift\n    func fetchContacts(currentUser: PCCurrentUser, completionHandler: @escaping ([Contact]?, ContactsError?) -\u003e Void){\n        let enc = JSONEncoding.default\n        let url = AppConstants.ENDPOINT + \"/api/contacts\"\n        let headers = authorizationHeader(token: nil)\n        \n        Alamofire\n            .request(url, method: .get, parameters: nil, encoding: enc, headers: headers)\n            .validate()\n            .responseJSON { response in\n                switch (response.result) {\n                case .success(let data):                \n                    DispatchQueue.main.async {\n                        let data = data as! [[String:Any]?]\n                        let res = ListContacts.Fetch.Response(for: currentUser, data:data)\n                        completionHandler(res.contacts, nil)\n                    }\n                case .failure(_):\n                    completionHandler(nil, ContactsError.CannotFetch)\n            }\n        }\n    }\n```\n\nThe next method to add to the class is the `addContact` method. The method makes the call to the API to add a contact:\n\n``` swift\n    func addContact(currentUser: PCCurrentUser, request: ListContacts.Create.Request, completionHandler: @escaping (Contact?, ContactsError?) -\u003e Void) {\n        let params = [\"user_id\": request.user_id]\n        let headers = authorizationHeader(token: nil)\n        \n        postRequest(\"/api/contacts\", params: params, headers: headers) { data in\n            guard data != nil else {\n                return completionHandler(nil, ContactsError.CannotAdd)\n            }\n            \n            DispatchQueue.main.async {\n                let response = ListContacts.Create.Response(for: currentUser, data: data!)\n                completionHandler(response.contact, nil)\n            }\n        }\n    }\n```\n\nThe next method to add to the class is the `login` method. The method makes a call to the API to login. The API returns the token for the API as the response. We make an additional call to the API to get the Chatkit token for the user so we can make calls to the Chatkit API on behalf of the user:\n\n``` swift\n    func login(request: Login.Account.Request, completionHandler: @escaping (UserToken?, UsersStoreError?) -\u003e Void) {\n        let params: Parameters = [\n            \"grant_type\": \"password\",\n            \"username\": request.email,\n            \"password\": request.password,\n            \"client_id\": AppConstants.CLIENT_ID,\n            \"client_secret\": AppConstants.CLIENT_SECRET,\n        ]\n        \n        postRequest(\"/oauth/token\", params: params, headers: nil) { data in\n            guard data != nil else {\n                return completionHandler(nil, UsersStoreError.CannotLogin)\n            }\n            \n            let response = Login.Account.Response(data: data!)\n            \n            let request = Login.Chatkit.Request(\n                username: request.email, \n                password: request.password, \n                token: response.userToken\n            )\n            \n            self.fetchChatkitToken(request: request) { token, error in\n                guard error == nil else {\n                    return completionHandler(nil, UsersStoreError.CannotFetchChatkitToken)\n                }\n                \n                ChatkitTokenDataStore().setToken(token!)\n                UserTokenDataStore().setToken(response.userToken)\n                \n                DispatchQueue.main.async {\n                    completionHandler(response.userToken, nil)\n                }\n            }\n        }\n    }\n```\n\nNext we will add the `signup` method, this will call the API to create a user and then it will log the user in and fetch the Chatkit token for that user:\n\n``` swift\n    func signup(request: Signup.Request, completionHandler: @escaping (User?, UsersStoreError?) -\u003e Void) {\n        let params: Parameters = [\n            \"name\": request.name,\n            \"email\": request.email,\n            \"password\": request.password\n        ]\n        \n        postRequest(\"/api/users/signup\", params: params, headers: nil) { data in\n            guard data != nil else {\n                return completionHandler(nil, UsersStoreError.CannotSignup)\n            }\n            \n            let response = Signup.Response(data: data!)\n            CurrentUserIDDataStore().setID(CurrentUserID(id: response.user?.chatkit_id))\n            \n            let request = Login.Account.Request(\n                email: request.email, \n                password: request.password\n            )\n            \n            self.login(request: request) { token, error in\n                guard error == nil else {\n                    return completionHandler(nil, UsersStoreError.CannotLogin)\n                }\n                \n                DispatchQueue.main.async {\n                    completionHandler(response.user, nil)\n                }\n            }\n        }\n    }\n```\n\nThe next method to add is the `fetchChatkitToken`. It fetches the Chatkit token from the API:\n\n``` swift\n    func fetchChatkitToken(request: Login.Chatkit.Request, completionHandler: @escaping (ChatkitToken?, UsersStoreError?) -\u003e Void) {\n        let headers = authorizationHeader(token: request.token.access_token!)\n        \n        postRequest(\"/api/chatkit/token\", params: nil, headers: headers) { data in\n            guard data != nil else {\n                return completionHandler(nil, UsersStoreError.CannotFetchChatkitToken)\n            }\n            \n            DispatchQueue.main.async {\n                let response = Login.Chatkit.Response(data: data!)\n                completionHandler(response.token, nil)\n            }\n        }\n    }\n```\n\nThe last two methods to add will be helpers, the `postRequest` and `authorizationHeader` methods:\n\n``` swift\n    private func postRequest(_ url: String, params: Parameters?, headers: HTTPHeaders?, completion: @escaping([String:Any]?) -\u003e Void) {\n        let enc = JSONEncoding.default\n        let url = AppConstants.ENDPOINT + url\n        \n        Alamofire\n            .request(url, method: .post, parameters:params, encoding:enc, headers:headers)\n            .validate()\n            .responseJSON { response in\n                switch (response.result) {\n                case .success(let data): completion((data as! [String:Any]))\n                case .failure(_): completion(nil)\n            }\n        }\n    }\n    \n    private func authorizationHeader(token: String?) -\u003e HTTPHeaders {\n        let accessToken = (token == nil) \n            ? UserTokenDataStore().getToken().access_token \n            : token\n        \n        return [\"Authorization\": \"Bearer \\(accessToken!)\"]\n    }\n```\n\nThe first method is a wrapper around Alamofire and the second method generates a HTTPHeaders array where we specify the token to send along with requests to the API.\n\nNow you can run the application in the emulator and it should work.\n\nIf you are running the API server locally XCode might not allow you to make requests to the local server. You can get around this by adding `App Transport Security Settings` to your `Info.plist` file and set `Allow Artibrary Loads` to `YES`.\n\n![Create-iOS-Chat-App-Using-Chatkit-allow-arbitrary-loads](//images.ctfassets.net/1es3ne0caaid/4ZHA4yRh4ss2SEY4GeMKSm/0d2667e4f46fb35c26aff64b96aab1a8/Create-iOS-Chat-App-Using-Chatkit-allow-arbitrary-loads.png)\n\n## Conclusion\n\nIn this part we were able to create the iOS application. \n\nThe source code to the application built in this series is available on [GitHub](https://github.com/neoighodaro/sample-chatroom-ios-chatkit).","metaTitle":"Build an iOS chat app using Swift and Chatkit - Part 3","metaDescription":"This tutorial series provides a detailed walkthrough of how to create a chat app for iOS, with a Laravel API backend. In this article you will create the iOS app. By the end of this section you will have a working chat app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XaCS1RWmcC6OQCW2OSceE","type":"Entry","createdAt":"2018-06-06T10:53:29.784Z","updatedAt":"2020-06-19T12:38:38.352Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live comments feed with Go and Vue.js","url":"live-comments-go-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-comments-go-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-06-04","description":"Build a simple comments feed using Go, Vue.js and SQLite. Users can comment on a post, with the comments feed updating instantly.","prerequisite":"You will need Go, and SQLite installed on your machine. Basic knowledge of Go and JavaScript will be helpful.","content":"The internet is a breeding ground for all kinds of social activities because it expands the possibilities of communication. In order to keep web applications social and enjoyable, it is important for them to have one or more interfaces for the users to interact through. One such interface is the comment section. \n\nThe comment section is where users can discuss a subject (post, video, picture) that they have access to. In the past, for a user to see a comment from another user, the user would have to refresh the browser window. However, with realtime comments now we can automatically pull in comments live. This article will cover how we can build realtime commenting using Pusher.\n\nBy the end of this article, we will have built an application that looks like this:\n\n![go-comments-demo](//images.ctfassets.net/1es3ne0caaid/3dhebYl8aAm4cCME4Os2ys/4d39432a0bd39156cf8556c15649a2f1/go-comments-demo.gif)\n\n## Requirements\n\nTo follow along with this article, you will need the following:\n\n- Go (version \u003e= 0.10.x) installed on your computer. Heres how you can [install Go](https://golang.org/doc/install).\n- SQLite (v3.x) installed on your machine. [Installation guide](http://www.sqlitetutorial.net).\n- Basic knowledge of the Go programming language.\n- Basic knowledge of JavaScript (ES6).\n- Basic knowledge of Vue.js.\n\n## Getting a Pusher Channels application\n\nThe first step will be to get a Pusher Channels application. We will need the application credentials for our realtime features to work.\n\nGo to the Pusher website and create an account. After creating an account, you should create a new application. Follow the application creation wizard and then you should be given your application credentials, we will use this later in the article.\n\n![go-comments-app-keys](//images.ctfassets.net/1es3ne0caaid/2h3e4hp58cIW6acMc8Mgy0/dfeac8f3cdffb41174e93ad567233cd0/go-comments-app-keys.png)\n\nNow that we have our application, let’s move on to the next step.\n\n## Setting up the codebase\n\nLet’s start by navigating into the `src` directory located in the `$GOPATH`. Then we’ll create a new directory for our app there.\n\n```\n    $ cd $GOPATH/src\n    $ mkdir go-realtime-comments\n    $ cd go-realtime-comments\n```\n\nCreate a `comments.go` file in this directory.\n\nBefore we write code, we need to import a few Go packages that will help run our projects. We will install the [Echo framework](https://echo.labstack.com) and the [SQLite packages](https://github.com/mattn/go-sqlite3). Run the following commands to pull in the packages:\n\n```\n    $ go get github.com/labstack/echo\n    $ go get github.com/labstack/echo/middleware\n    $ go get github.com/mattn/go-sqlite3\n```\n\n\u003e ⚠️  If you use Windows and you encounter the error ‘cc.exe: sorry, unimplemented: 64-bit mode not compiled in ‘, then you need a Windows gcc port, such as https://sourceforge.net/projects/mingw-w64/. Also see this [GitHub issue](https://github.com/mattn/go-sqlite3/issues/297).\n\nWith your favorite editor, open the `comments.go` file and paste in the following lines of code:\n\n``` go\n    package main\n    \n    import (\n        // \"database/sql\"\n    \n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/middleware\"\n        // _ \"github.com/mattn/go-sqlite3\"\n    )\n```\n\n\n## Configuring the database and routes\n\nEvery Go application must have a `main` function. This is where the execution of the application will start from, so let’s create our `main` function:\n\nIn the `comments.go` file, add the following below the imports:\n\n``` go\n    func main() {\n    \n        // Echo instance\n        e := echo.New()\n        \n        // Middleware\n        e.Use(middleware.Logger())\n        e.Use(middleware.Recover())\n            \n        // Define the HTTP routes\n        e.GET(\"/comments\", func(c echo.Context) error {\n            return c.JSON(200, \"GET Comments\")\n        })\n        \n        e.POST(\"/comment\", func(c echo.Context) error {\n            return c.JSON(200, \"POST a new Comment\")\n        })\n        \n        // Start server\n        e.Logger.Fatal(e.Start(\":9000\"))\n    }\n```\n\nIn the main function, we have defined some basic route handler functions, these functions basically return hard coded text to browser on request. The last line will start Go’s standard HTTP server using Echo’s start method and listen for requests port 9000.\n\nWe can test that the application works at this stage by running it and making some requests using [Postman](https://www.getpostman.com/).\n\nHere is how you can run the application:\n\n```\n    $ go run ./comments.go\n```\n\nWe can send HTTP requests using Postman. Here’s a sample GET request using Postman:\n\n![go-comments-get-example](//images.ctfassets.net/1es3ne0caaid/1hOAHfzR8C2SocUciKSaEi/de4455b61abfaed1da7f612a6b1c75f6/go-comments-get-example.png)\n\nPOST request with Postman:\n\n![go-comments-post-example](//images.ctfassets.net/1es3ne0caaid/1uCCDXGXBeus4mSKgSKYoi/a66e13b4921d54b799a3ceae40c2b4d1/go-comments-post-example.png)\n\nWe will create a function that will initialize a database and for that we need the SQL and SQLite3 drivers. We already added them to the `import` statement so uncomment them. We will also create a function that will migrate the database using a database schema defined inside the function.\n\nOpen the `comments.go` file and paste the following code before the `main` function:\n\n``` go\n    func initDB(filepath string) *sql.DB {\n        db, err := sql.Open(\"sqlite3\", filepath)\n        if err != nil {\n            panic(err)\n        }\n    \n        if db == nil {\n            panic(\"db nil\")\n        }\n        return db\n    }\n    \n    func migrate(db *sql.DB) {\n        sql := `\n        CREATE TABLE IF NOT EXISTS comments(\n                id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n                name VARCHAR NOT NULL,\n                email VARCHAR NOT NULL,\n                comment VARCHAR NOT NULL\n        );\n       `\n        _, err := db.Exec(sql)\n        if err != nil {\n            panic(err)\n        }\n    }\n```\n\nNext add the following code to the top of the `main` function:\n\n``` go\n    // [...]\n    \n    // Initialize the database\n    db := initDB(\"storage.db\")\n    migrate(db)\n    \n    // [...]\n```\n\nWe can now check that these functions are being called and the database is created during execution by running the application:\n\n```\n    go run comments.go\n```\n\n\u003e ⚠️  If you were already running the Go application you would need to kill the process using ctrl+c on your keyboard and then restart it to see changes.\n\nWhen the application is run for the first time, a `storage.db` file will be created in the working directory if it did not previously exist.\n\n\n## Setting up the handlers\n\nWe have tested that our application listens on the specified port 9000 and handles the HTTP requests as we configured it to. However, the current handler functions simply return hard-coded text to the browser so let’s create new handler functions to handle responses to the routes.\n\nCreate a new folder in the root directory named `handlers`:\n\n```\n    $ mkdir handlers\n    $ cd handlers\n```\n\nNext create a `handlers.go` file and paste the following:\n\n``` go\n    package handlers\n    \n    import (\n        \"database/sql\"\n        \"go-realtime-comments/models\"\n        \"net/http\"\n        \"github.com/labstack/echo\"\n    )\n```\n\nNow we need to go back to the `comments.go` file and import the handlers package:\n\n```\n    import (\n        \"go-realtime-comments/handlers\"\n    \n        // [...]\n    )\n```\n\nIn the same file, replace the route definitions from earlier with the ones below:\n\n``` go\n    // [...]\n    \n    // Define the HTTP routes\n    e.File(\"/\", \"public/index.html\")\n    e.GET(\"/comments\", handlers.GetComments(db))\n    e.POST(\"/comment\", handlers.PushComment(db))\n    \n    // [...]\n```\n\nNext paste the following code in the `handlers.go` file below the import statement:\n\n``` go\n    type H map[string]interface{}\n    \n    //GetComments handles the HTTP request that hits the /comments endpoint\n    func GetComments(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            return c.JSON(http.StatusOK, models.GetComments(db))\n        }\n    }\n    \n    func PushComment(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            var comment models.Comment\n    \n            c.Bind(\u0026comment)\n    \n            id, err := models.PushComment(db, comment.Name, comment.Email, comment.Comment)\n            if err == nil {\n                return c.JSON(http.StatusCreated, H{\n                    \"created\": id,\n                })\n            }\n            \n            return err\n        }\n    }\n```\n\nThe `GetComments` function fetches and returns comments from the database while the  `PushComment` saves comments to the database and returns a response.\n\n\n## Setting up the models\n\nTo create the model package, we need to create a new folder in the root directory of our application:\n\n```\n    $ mkdir models\n    $ cd models\n```\n\nNext create a `models.go` file and paste the following code:\n\n``` go\n    package models\n    \n    import (\n        \"database/sql\"\n        _ \"github.com/mattn/go-sqlite3\"\n    )\n```\n\nLet’s create a Comment `type`, which is a struct with four fields:\n\n- `ID` - the ID of the comment.\n- `Name` - the username of the user who made the comment.\n- `Email` - the email of the user who made the comment.\n- `Comment` - the comment.\n\nIn Go, we can add metadata to variables by putting them within backticks. We can use this to define what each field should look like when converted to `JSON`. This will also help the `c.Bind` function know how to map `JSON` data when registering a new comment.\n\nLet’s define the structs for `Comment` and `CommentCollection`. In the `models.go` file paste in the following below the imports:\n\n``` go\n    type Comment struct {\n        ID      int    `json:\"id\"`\n        Name    string `json:\"name\"`\n        Email   string `json:\"email\"`\n        Comment string `json:\"comment\"`\n    }\n    \n    type CommentCollection struct {\n        Comments []Comment `json:\"items\"`\n    }\n```\n\nNext, paste in the following code after the structs:\n\n``` go\n    func GetComments(db *sql.DB) CommentCollection {\n        sql := \"SELECT * FROM comments\"\n        rows, err := db.Query(sql)\n    \n        if err != nil {\n            panic(err)\n        }\n    \n        defer rows.Close()\n    \n        result := CommentCollection{}\n    \n        for rows.Next() {\n    \n            comment := Comment{}\n            err2 := rows.Scan(\u0026comment.ID, \u0026comment.Name, \u0026comment.Email, \u0026comment.Comment)\n            if err2 != nil {\n                panic(err2)\n            }\n    \n            result.Comments = append(result.Comments, comment)\n        }\n    \n        return result\n    }\n```\n\nThe `GetComments` function is responsible for retrieving all the available comments from the database and returning them as an instance of the `CommentCollection` that we defined. \n\nNext, paste in the following code below the one above:\n\n``` go\n    func PushComment(db *sql.DB, name string, email string, comment string) (int64, error) {\n        sql := \"INSERT INTO comments(name, email, comment) VALUES(?, ?, ?)\"\n        stmt, err := db.Prepare(sql)\n        if err != nil {\n            panic(err)\n        }\n    \n        defer stmt.Close()\n    \n        result, err2 := stmt.Exec(name, email, comment)\n        if err2 != nil {\n            panic(err2)\n        }\n    \n        return result.LastInsertId()\n    }\n```\n\nThe `PushComments` function adds a new comment to the database.\n\n\n## Building the frontend\n\nNext, create a `public` folder in our application’s root directory and create an `index.html` file inside it. \n\nOpen the `index.html` file and paste in this code:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e\n        \u003ctitle\u003eRealtime comments\u003c/title\u003e\n        \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003cstyle\u003e\n          @media (min-width: 48em) {\n            html {\n              font-size: 18px;\n            }\n          }\n          body {\n            font-family: Georgia, \"Times New Roman\", Times, serif;\n            color: #555;\n          }\n          h1, .h1, h2, .h2, h3, .h3, h4, .h4, h5, .h5, h6, .h6 {\n            font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n            font-weight: 400;\n            color: #333;\n          }\n          .blog-masthead {\n            margin-bottom: 3rem;\n            background-color: #428bca;\n            box-shadow: inset 0 -.1rem .25rem rgba(0,0,0,.1);\n          }\n          .nav-link {\n            position: relative;\n            padding: 1rem;\n            font-weight: 500;\n            color: #cdddeb;\n          }\n          .nav-link:hover, .nav-link:focus {\n            color: #fff;\n            background-color: transparent;\n          }\n          .nav-link.active {\n            color: #fff;\n          }\n          .nav-link.active::after {\n            position: absolute;\n            bottom: 0;\n            left: 50%;\n            width: 0;\n            height: 0;\n            margin-left: -.3rem;\n            vertical-align: middle;\n            content: \"\";\n            border-right: .3rem solid transparent;\n            border-bottom: .3rem solid;\n            border-left: .3rem solid transparent;\n          }\n          @media (min-width: 40em) {\n            .blog-title {\n              font-size: 3.5rem;\n            }\n          }\n          .sidebar-module {\n            padding: 1rem;\n          }\n          .sidebar-module-inset {\n            padding: 1rem;\n            background-color: #f5f5f5;\n            border-radius: .25rem;\n          }\n          .sidebar-module-inset p:last-child,\n          .sidebar-module-inset ul:last-child,\n          .sidebar-module-inset ol:last-child {\n            margin-bottom: 0;\n          }\n          .blog-post {\n            margin-bottom: 4rem;\n          }\n          .blog-post-title {\n            margin-bottom: .25rem;\n            font-size: 2.5rem;\n            text-align: center;\n          }\n          .blog-post-meta {\n            margin-bottom: 1.25rem;\n            color: #999;\n            text-align: center;\n          }\n          .blog-footer {\n            padding: 2.5rem 0;\n            color: #999;\n            text-align: center;\n            background-color: #f9f9f9;\n            border-top: .05rem solid #e5e5e5;\n          }\n          .blog-footer p:last-child {\n            margin-bottom: 0;\n          }\n          input{\n              width: 45% !important;\n              display: inline-block !important;\n          }\n          textarea {\n              width: 90%;\n              height: 150px;\n              padding: 12px 20px;\n              box-sizing: border-box;\n              border: 2px solid #ccc;\n              border-radius: 4px;\n              background-color: #f8f8f8;\n              resize: none;\n          }\n          textarea:focus, input:focus{\n              outline: none !important;\n          }\n          #comment-section{\n            background: rgb(178, 191, 214); \n            padding: 0.5em 2em; width: 90%;\n            margin: 10px 0;\n            border-radius: 15px;\n          }\n          #comment-section \u003e div \u003e p {\n            color: black;\n            display:inline;\n          }\n          img{\n          border-radius: 50%;\n          float: left;\n          }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \u003cdiv id=\"app\"\u003e\n        \u003cheader\u003e\n            \u003cdiv class=\"blog-masthead\"\u003e\n              \u003cdiv class=\"container\"\u003e\n                \u003cnav class=\"nav\"\u003e\n                  \u003ca class=\"nav-link active\" href=\"#\"\u003eHome\u003c/a\u003e\n                \u003c/nav\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/header\u003e\n    \n          \u003cmain role=\"main\" class=\"container\"\u003e\n    \n            \u003cdiv class=\"row\"\u003e\n    \n              \u003cdiv class=\"col-sm-12 blog-main\"\u003e\n    \n                \u003cdiv class=\"blog-post\"\u003e\n                  \u003ch2 class=\"blog-post-title\"\u003eRealtime Comments With Pusher\u003c/h2\u003e\n                  \u003cp class=\"blog-post-meta\"\u003eJanuary 1, 2018 by \u003ca href=\"#\"\u003eJordan\u003c/a\u003e\u003c/p\u003e\n                  \u003cp\u003eThis blog post shows a few different types of content that's supported and styled with Bootstrap. Basic typography, images, and code are all supported.This blog post shows a few different types of content that's supported and styled with Bootstrap. Basic typography, images, and code are all supported\n                  \u003c/p\u003e\n                  \u003cdiv class=\"comment-section\"\u003e\n            \u003cform class=\"form-signin\"\u003e\n            \u003ch5 class=\"comment\"\u003eComment\u003c/h5\u003e\n            \u003cinput type=\"username\" ref=\"username\" class=\"form-control\" placeholder=\"John Doe\" required autofocus\u003e\n            \u003cinput type=\"email\" ref=\"email\" class=\"form-control\" placeholder=\"Johndoe@gmail.com\" required\u003e\n            \u003ctextarea ref=\"comment\"\u003e\u003c/textarea\u003e\n            \u003cbutton class=\"btn btn-lg btn-primary\" @click.prevent=\"sendComment\" type=\"submit\"\u003eComment\u003c/button\u003e\n          \u003c/form\u003e\n          \u003cbr\u003e\n          \u003cdiv id=\"comment-section\" v-for=\"comment in comments\"\u003e\n            \u003cdiv\u003e\n              \u003cimg src=\"http://merritos.com/img/team/maleTeam.jpg\" width=\"65px\" height=\"65px\"\u003e\n               \u003cp\u003e\u0026nbsp;\u0026nbsp;{{comment.name}} \u0026nbsp;\u003c {{comment.email}} \u003e\u003c/p\u003e\n               \u003chr\u003e\n            \u003c/div\u003e\n            \u003cp style=\"color:black\"\u003e{{comment.comment}}\u003c/p\u003e\n          \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n    \n            \u003c/div\u003e\n    \n          \u003c/main\u003e\n    \n          \u003cfooter class=\"blog-footer\"\u003e\n            \u003cp\u003e\u003ca href=\"#\"\u003eBack to top\u003c/a\u003e\u003c/p\u003e\n          \u003c/footer\u003e\n    \n        \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNow in the same file, paste the following code before the closing `body` tag of the HTML:\n\n``` javascript\n    \u003cscript\u003e\n      var app = new Vue({\n        el: '#app',\n        data: {\n          comments : []\n        },\n        created: function() {\n          axios.get('/comments').then(response =\u003e { \n            this.comments = response.data.items ? response.data.items : [] \n          })\n        },\n        methods: {\n            sendComment: function(index) {\n              let comment = {\n                name: this.$refs.username.value,\n                email: this.$refs.email.value,\n                comment: this.$refs.comment.value\n              }\n              \n              axios.post('/comment', comment).then(response =\u003e { \n                this.$refs.username.value = '',\n                this.$refs.email.value = '',\n                this.$refs.comment.value = ''\n              })\n            }\n        }\n      })\n    \u003c/script\u003e\n```\n\nAbove we have the Vue.js code for our application and this is a summary of what it does:\n\n\n- We instantiate a comments array that will hold all the available comments.\n- In the `created()` method, we use [Axios](https://www.npmjs.com/package/axios) to pull in all the comments available from the API and store it in the `comments` array.\n- In the `sendComment` method, we send a request to the API to create a new `comment`.\n\nWe can build our application at this stage and visit http://localhost:9000, we should see this:\n\n```\n    $ go run comments.go\n```\n\nOur application should display like this:\n\n![go-comments-homepage](//images.ctfassets.net/1es3ne0caaid/2m7H3gsZCMIkEKGueSEuK/d014e440249b413da2ed8f509d91eae1/go-comments-homepage.png)\n\n### Making comments display in realtime\nThe next thing we need to do is make sure the comments are displayed in realtime. To do this, we need to trigger an event every time a new comment is added. We will do this in the backend using the [Pusher Go library](https://github.com/pusher/pusher-http-go).\n\nTo pull in the Pusher Go library run the following command:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\nNext let’s import the library. In our `models.go` file do the following in the imports statement:\n\n``` go\n    package models\n    \n    import (\n        // [...]\n        \n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n```\n\nIn the same file, before the `type` definition, paste in the following code:\n\n``` go\n    // [...]\n    \n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n    \n    // [...]\n```\n\nHere, we have initialized the Pusher client using the credentials from our earlier created app.\n\n\n\u003e ⚠️ Replace `PUSHER_APP_*` keys with your Pusher app credentials.\n\nNext, let’s trigger an event every time a comment is saved to the database. Replace the `PushComment` function with the following code:\n\n``` go\n    func PushComment(db *sql.DB, name string, email string, comment string) (int64, error) {\n        sql := \"INSERT INTO comments(name, email, comment) VALUES(?, ?, ?)\"\n        stmt, err := db.Prepare(sql)\n        if err != nil {\n            panic(err)\n        }\n    \n        defer stmt.Close()\n    \n        result, err2 := stmt.Exec(name, email, comment)\n        if err2 != nil {\n            panic(err2)\n        }\n    \n        newComment := Comment{\n            Name:    name,\n            Email:   email,\n            Comment: comment,\n        }\n    \n        client.Trigger(\"comment-channel\", \"new-comment\", newComment)\n        return result.LastInsertId()\n    }\n```\n\nIn this newer version of the function we create a `newComment` object that holds information for the last comment that was saved to the database. Whenever a new comment is created, we will send it to the Pusher channel `comment-channel` to be triggered on the event `new-comment`.\n\n**Displaying data in realtime on the client**\nTo receive comments we have to register the [Pusher JavaScript Client](https://github.com/pusher/pusher-js) in our frontend code. Add this line of code inside the head tag of our HTML in the index.html file:\n\n```\n    \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n```\n\nNext we will register a Pusher instance in the `created()` life cycle hook:\n\n``` go\n    created: function() {\n    \n        const pusher = new Pusher('PUSHER_APP_KEY', {\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n        \n        const channel = pusher.subscribe('comment-channel');\n        \n        channel.bind('new-comment', data =\u003e {\n          this.comments.push(data)\n        });\n    \n        // [...]    \n    }\n```\n\n\u003e ⚠️  Replace the `PUSHER_APP_*` keys with the credentials for your Pusher application.\n\nIn the code above, we are creating a Pusher instance and then subscribing to a channel. In that channel we are listening for the `new-comment` event.\n\nNow we can run our application:\n\n```\n    $ go run comments.go\n```\n\nWe can point a web browser to this address http://localhost:9000 and we should see the application in action:\n\n![go-comments-demo](//images.ctfassets.net/1es3ne0caaid/3dhebYl8aAm4cCME4Os2ys/4d39432a0bd39156cf8556c15649a2f1/go-comments-demo.gif)\n\n## Conclusion\n\nIn this article, we looked at how to build a realtime comment system using Go, Vue.js, and Pusher Channels. The source code to the application is available on [GitHub.](https://github.com/neoighodaro/realtime-comments-go-pusher)","metaTitle":"Build a live comments feed with Go and Vue.js","metaDescription":"Use Go and Vue.js to create a live comments feed. You will build a simple app, with a sample post. Users will be able to comment on the post and see all users' comments update in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"34QrjBOqpOcEcGQCssMcsS","type":"Entry","createdAt":"2018-06-06T10:51:18.709Z","updatedAt":"2020-06-19T12:51:14.059Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a photo feed with Go and Vue.js","url":"photo-feed-go-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-photofeed-pusher-go","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-06-04","description":"Build a photo feed application using Go, Vue.js and SQLite. Users can post pictures, and see each others' images appear in realtime.","prerequisite":"You will need Go and SQLite installed on your machine, as well as basic knowledge of Go and JavaScript.","content":"Many social media based applications allow users to upload photos and these photos are usually displayed in a timeline for their followers and others to see. In the past, you would have had to refresh your feed manually to see new photos uploaded to the timeline. However, with modern web technologies, you can see the updates in realtime without having to refresh the page manually.\n\nIn this article, we will consider how you can build a realtime photo feed using Pusher Channels, GO and a little Vue.js. [Pusher Channels](https://pusher.com) helps you “easily build scalable in-app notifications, chat, realtime graphs, geotracking and more in your web \u0026 mobile apps with our hosted pub/sub messaging API.”\n\nThis is a preview of what we will be building:\n\n![go-photo-feed-demo](//images.ctfassets.net/1es3ne0caaid/5vVy2T7aY8qoOiCuA8oGQK/abdfe10038a2935fa4a894296db6630d/go-photo-feed-demo.gif)\n\n## Prerequisites\n\nBefore we start building our application, make sure you have:\n\n- Basic knowledge of the [Go](https://golang.org/) programming language.\n- Basic JavaScript (Vue.js) knowledge.\n- Go (version \u003e= 0.10.x) installed on your machine. Check out the [installation guide](https://golang.org/doc/install).\n- SQLite (version \u003e= 3.x) installed on your machine.\n\nLet’s get started.\n\n\n## Getting a Pusher Channels application\n\nThe first step will be to get a Pusher Channels application. We will need the application credentials for our realtime features to work.\n\nGo to the Pusher website and create an account. After creating an account, you should create a new application. Follow the application creation wizard and then you should be given your application credentials, we will use this later in the article.\n\n![go-photo-feed-app-keys](//images.ctfassets.net/1es3ne0caaid/5mwD9r7FFmWugK6AyY08Ga/fdff5e30849724654dd10c6a5f3de29a/go-photo-feed-app-keys.png)\n\nNow that we have our application, let’s move on to the next step\n\n## Creating our Go application\n\nThe next thing we want to do is create the Go application. In your terminal, `cd` to your `$GOPATH` and create a new directory there.\n\n```\n    $ cd $GOPATH/src\n    $ mkdir gofoto\n    $ cd gofoto\n```\n\n\u003e 💡  It is recommended that you place the source code for your project in the `src` subdirectory (e.g., `$GOPATH/src/your_project` or `$GOPATH/src/github.com/your_github_username/your_project`.\n\nNext, we will create some directories to organize our application a little:\n\n```\n    $ mkdir database\n    $ mkdir public\n    $ mkdir public/uploads\n```\n\nThis will create a `database` and `public` directory, and also an `uploads` directory inside the public directory. We will store our database file inside the `database` directory, we will keep our public files: HTML and images, inside the `public` and `uploads` directory. Create a new `index.html` file in the `public` directory that was created.\n\nNow let’s create our first (and only) Go file for this article. We will try to keep everything simple by placing all our source code in a single file. Create a `main.go` file in the project root.\n\nIn the file paste the following:\n\n``` go\n    package main\n    \n    import (\n        \"database/sql\"\n        \"io\"\n        \"net/http\"\n        \"os\"\n        \n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/middleware\"\n        _ \"github.com/mattn/go-sqlite3\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n```\n\nAbove we have imported some packages we will be needing to work on our photo feed. We need the `database/sql` to run SQL queries, the `io` and `os` package for our file uploading process, and the `net/http` for our HTTP status codes.\n\nWe have some other external packages we imported. The `labstack/echo` package is the [Echo framework](https://github.com/labstack/echo) that we will be using. We also have the `mattn/go-sqlite3` package which is for SQLite. Finally, we imported the `pusher/pusher-http-go` package which we will use to trigger events to Pusher Channels.\n\n### Importing external Go packages\nBefore we continue, let’s pull in these packages using our terminal. Run the following commands below to pull the packages in:\n\n```\n    $ go get github.com/labstack/echo\n    $ go get github.com/labstack/echo/middleware\n    $ go get github.com/mattn/go-sqlite3\n    $ go get github.com/pusher/pusher-http-go\n```\n\n\u003e Note that the commands above will not return any confirmation output when it finishes installing the packages. If you want to confirm the packages were indeed installed you can just check the `$GOPATH/src/github.com` directory.\n\nNow that we have pulled in our packages, let’s create the `main` function. This is the function that will be the entry point of our application. In this function, we will set up our applications database, middleware, and routes.\n\nOpen the `main,go` file and paste the following code:\n\n``` go\n    func main() {\n        db := initialiseDatabase(\"database/database.sqlite\")\n        migrateDatabase(db)\n        \n        e := echo.New()\n    \n        e.Use(middleware.Logger())\n        e.Use(middleware.Recover())\n    \n        e.File(\"/\", \"public/index.html\")\n        e.GET(\"/photos\", getPhotos(db))\n        e.POST(\"/photos\", uploadPhoto(db))\n        e.Static(\"/uploads\", \"public/uploads\")\n    \n        e.Logger.Fatal(e.Start(\":9000\"))\n    }\n```\n\nIn the code above, we instantiated our database using the file path to the database file. This will create the SQLite file if it did not already exist. We then run the `migrateDatabase` function which migrates the database.\n\nNext, we instantiate Echo and then register some middlewares. The [logger middleware](https://echo.labstack.com/middleware/logger) is helpful for logging information about the HTTP request while the [recover middleware](https://echo.labstack.com/middleware/recover) “recovers from panics anywhere in the chain, prints stack trace and handles the control to the centralized [HTTPErrorHandler](https://echo.labstack.com/guide/customization#http-error-handler).”\n\nWe then set up some routes to handle our requests. The first handler is the `File` handler. We use this to serve the `index.html` file. This will be the entry point to the application from the frontend. We also have the `/photos` route which accepts a `POST` and `GET` request. We need these routes to act like API endpoints that are used for uploading and displaying the photos. The final handler is `Static`. We use this to return static files that are stored in the `/uploads` directory.\n\nWe finally use `e.Start` to start our Go web server running on port 9000. The port is not set in stone and you can choose any available and unused port you feel like.\n\nAt this point, we have not created most of the functions we referenced in the `main` function so let’s do so now.\n\n### Creating our database management functions\n\nIn the `main` function we referenced an `initialiseDatabase` and `migrateDatabase` function. Let’s create them now. In the `main.go` file, paste the following functions above the `main` function:\n\n``` go\n    func initialiseDatabase(filepath string) *sql.DB {\n        db, err := sql.Open(\"sqlite3\", filepath)\n        if err != nil || db == nil {\n            panic(\"Error connecting to database\")\n        }\n     \n        return db\n    }\n    \n    func migrateDatabase(db *sql.DB) {\n        sql := `\n            CREATE TABLE IF NOT EXISTS photos(\n                    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n                    src VARCHAR NOT NULL\n            );\n       `\n       \n        _, err := db.Exec(sql)\n        if err != nil {\n            panic(err)\n        }\n    }\n```\n\nIn the `initialiseDatabase` function, we create an instance of the SQLite database using the database file and return that instance. In the `migrateDatabase` function, we use the instance of the database returned in the previous function to execute the migration SQL.\n\nLet’s create the data structure for our photo and photo collection.\n\n### Creating our data structures\n\nThe next thing we will do is create the data structure for our object types. We will create a `Photo` structure and a `PhotoCollection` structure. The `Photo` struct will define how a typical photo will be represented while the `PhotoCollection` will define how a collection of photos will be represented.\n\nOpen the `main.go` file and paste the following code above the `initialiseDatabase` function:\n\n``` go\n    type Photo struct {\n        ID  int64  `json:\"id\"`\n        Src string `json:\"src\"`\n    }\n    \n    type PhotoCollection struct {\n        Photos []Photo `json:\"items\"`\n    }\n```\n\n### Creating our route handler functions\n\nNext let’s create the functions for our routes. Open the `main.go` file and paste the following file inside it:\n\n```go\n    func getPhotos(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            rows, err := db.Query(\"SELECT * FROM photos\")\n            if err != nil {\n                panic(err)\n            }\n            \n            defer rows.Close()\n    \n            result := PhotoCollection{}\n    \n            for rows.Next() {\n                photo := Photo{}\n                \n                err2 := rows.Scan(\u0026photo.ID, \u0026photo.Src)\n                if err2 != nil {\n                    panic(err2)\n                }\n    \n                result.Photos = append(result.Photos, photo)\n            }\n    \n            return c.JSON(http.StatusOK, result)\n        }\n    }\n    \n    func uploadPhoto(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            file, err := c.FormFile(\"file\")\n            if err != nil {\n                return err\n            }\n            \n            src, err := file.Open()\n            if err != nil {\n                return err\n            }\n    \n            defer src.Close()\n    \n            filePath := \"./public/uploads/\" + file.Filename\n            fileSrc := \"http://127.0.0.1:9000/uploads/\" + file.Filename\n    \n            dst, err := os.Create(filePath)\n            if err != nil {\n                panic(err)\n            }\n    \n            defer dst.Close()\n    \n            if _, err = io.Copy(dst, src); err != nil {\n                panic(err)\n            }\n    \n            stmt, err := db.Prepare(\"INSERT INTO photos (src) VALUES(?)\")\n            if err != nil {\n                panic(err)\n            }\n    \n            defer stmt.Close()\n    \n            result, err := stmt.Exec(fileSrc)\n            if err != nil {\n                panic(err)\n            }\n    \n            insertedId, err := result.LastInsertId()\n            if err != nil {\n                panic(err)\n            }\n    \n            photo := Photo{\n                Src: fileSrc,\n                ID:  insertedId,\n            }\n    \n            return c.JSON(http.StatusOK, photo)\n        }\n    }\n```\n\nIn the `getPhotos` method, we are simply running the query to fetch all the photos from the database and returning them as a JSON response to the client. In the `uploadPhoto` method we first get the file to be uploaded then upload them to the server and then we run the query to insert a new record in the `photos` table with the newly uploaded photo. We also return a JSON response from that function.\n\n### Adding realtime support to our Go application\n\nThe next thing we want to do is trigger an event when a new photo is uploaded to the server. For this, we will be using the [Pusher Go HTTP library](https://github.com/pusher/pusher-http-go). \n\nIn the `main.go` file paste the following above the type definitions for the `Photo` and `PhotoCollection`:\n\n``` go\n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n```\n\nThis will create a new Pusher client instance. We can then use this instance to trigger notifications to different channels we want. Remember to replace the `PUSHER_APP_*` keys with the keys provided when you created your Pusher application earlier.\n\nNext, go to the `uploadPhoto` function in the `main.go` file and right before the `return` statement at the bottom of the function, paste the following code:\n\n``` go\n    client.Trigger(\"photo-stream\", \"new-photo\", photo)\n```\n\nThis is the code that triggers a new event when a new photo is uploaded to our application.\n\nThat will be all for our Go application. At this point, you can build your application and compile it into a binary using the `go build` command. However, for this tutorial we will just run the binary temporarily:\n\n``` \n    $ go run main.go\n```\n\n![go-photo-feed-go-run](//images.ctfassets.net/1es3ne0caaid/3DPeaIV05GMOGMSUouAaO/ce811f6f30da4b86c8c659f8637fdc3e/go-photo-feed-go-run.png)\n\n## Building our frontend\n\nThe next thing we want to do is build out our frontend. We will be using the [Vue.js framework](https://vuejs.org/) and the [Axios library](https://github.com/axios/axios) to send requests.\n\nOpen the `index.html` file and in there paste the following code:\n\n``` html\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\"\u003e\n        \u003ctitle\u003ePhoto Feed\u003c/title\u003e\n        \u003cstyle type=\"text/css\"\u003e\n            #photoFile { display: none; }\n            #app img { max-width: 100%; }\n            .image-row { margin: 20px 0; }\n            .image-row .thumbnail { padding: 2px; border: 1px solid #d9d9d9; }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n        \n            \u003cnav class=\"navbar navbar-expand-lg navbar-light bg-light\"\u003e\n                \u003ca class=\"navbar-brand\" href=\"#\"\u003eGoFoto\u003c/a\u003e\n                \u003cdiv\u003e\n                    \u003cul class=\"navbar-nav mr-auto\"\u003e\n                        \u003cli class=\"nav-item active\"\u003e\n                            \u003ca class=\"nav-link\" v-on:click=\"filePicker\" href=\"#\"\u003eUpload\u003c/a\u003e\n                            \u003cinput type=\"file\" id=\"photoFile\" ref=\"myFiles\" @change=\"upload\" name=\"file\" /\u003e\n                        \u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n            \u003c/nav\u003e\n            \n            \u003cdiv class=\"container\"\u003e\n                \u003cdiv class=\"row justify-content-md-center\" id=\"loading\" v-if=\"loading\"\u003e\n                    \u003cdiv class=\"col-xs-12\"\u003e\n                        Loading photos...\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"row justify-content-md-center image-row\" v-for=\"photo in photos\"\u003e\n                    \u003cdiv class=\"col col-lg-4 col-md-6 col-xs-12\"\u003e\n                        \u003cimg class=\"thumbnail\" :src=\"photo.src\" alt=\"\" /\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \n        \u003c/div\u003e\n        \u003cscript src=\"//js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the HTML file above we have defined the design for our photostream. We are using Bootstrap 4 and we included the CSS in the HTML above. We are also using the Axios library, Pusher library, and Vue framework. We included the links to the scripts at the bottom of the HTML document.\n\nNext let’s add the Vue.js code. In the HTML file, add the following code right before the closing `body` tag:\n\n``` javascript\n    \u003cscript type=\"text/javascript\"\u003e\n        new Vue({\n            el: '#app',\n            data: {\n                photos: [],\n                loading: true,\n            },\n            mounted() {\n                const pusher = new Pusher('PUSHER_APP_KEY', {\n                    cluster: 'PUSHER_APP_CLUSTER',\n                    encrypted: true\n                });\n                \n                let channel = pusher.subscribe('photo-stream')\n                \n                channel.bind('new-photo', data =\u003e this.photos.unshift(data));\n                \n                axios.get('/photos').then(res =\u003e {\n                    this.loading = false\n                    this.photos = res.data.items ? res.data.items : []\n                })\n            },\n            methods: {\n                filePicker: function () {\n                    let elem = document.getElementById('photoFile');\n                    \n                    if (elem \u0026\u0026 document.createEvent) {\n                        let evt = document.createEvent(\"MouseEvents\");\n                        evt.initEvent(\"click\", true, false);\n                        elem.dispatchEvent(evt);\n                    }\n                },\n                upload: function () {\n                    let data = new FormData();\n                    data.append('file', this.$refs.myFiles.files[0]);\n    \n                    axios.post('/photos', data).then(res =\u003e console.log(res))\n                }\n            }\n        });\n    \u003c/script\u003e\n```\n\nAbove we created a Vue instance and stored the properties `photos` and `loading`. The `photos` property stores the photo list and the `loading` just holds a boolean that indicates if the photos are loading or not.\n\nIn the `mounted` method we create an instance of our Pusher library. We then listen on the `photo-stream` channel for the `new-photo` event. When the event is triggered we append the new photo from the event to the `photos` list. We also send a GET request to `/photos` to fetch all the photos from the API. Replace the `PUSHER_APP_*` keys with the one from your Pusher dashboard.\n\nIn the `methods` property, we added a few methods. The `filePicker` is triggered when the ‘Upload’ button is pressed on the UI. It triggers a file picker that allows the user to upload photos. The `upload` method takes the uploaded file and sends a POST request with the file to the API for processing. \n\nThat’s all for the frontend, you can save the file and head over to your web browser. Visit http://127.0.0.1:9000 to see your application in action.\n\nHere’s how it will look again:\n\n![go-photo-feed-demo](//images.ctfassets.net/1es3ne0caaid/5vVy2T7aY8qoOiCuA8oGQK/abdfe10038a2935fa4a894296db6630d/go-photo-feed-demo.gif)\n\n## Conclusion\n\nIn this article, we have been able to demonstrate how you can use Pusher Channels in your Go application to provide realtime features for your application. As seen from the code samples above, it is very easy to get started with Pusher Channels. Check the [documentation](https://pusher.com/docs) to see other ways you can use Pusher Channels to provide realtime features to your users.\n\nThe source code for this application is available on [GitHub](https://github.com/neoighodaro/realtime-photofeed-pusher-go).","metaTitle":"Build a photo feed with Go and Vue.js","metaDescription":"This short tutorial shows how to add realtime functionality to a Go web app. Use Go, Vue.js and SQLite to create a simple photo feed."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"66SrBNJDiMuUoCoWG2626Y","type":"Entry","createdAt":"2018-05-28T11:19:00.399Z","updatedAt":"2018-05-28T11:19:00.399Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a collaborative painting app using Vue.js","url":"collaborative-painting-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/HackAfro/vue-paintapp","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-05-27","description":"Build a collaborative painting app using Vue.js. Two users can work together on one drawing, seeing each other's changes update instantly.","prerequisite":"Ensure you have Node 6+ installed. A basic understanding of Node and Vue will be helpful.","content":"Today, we’ll be creating a realtime paint application. Using our application, users can easily collaborate while using the application and receive changes in realtime. We’ll be using Pusher’s pub/sub pattern to get realtime updates and Vue.js for creating the user interface.\n\nTo follow this tutorial a basic understanding of Vue and Node.js is required. Please ensure that you have at least Node version 6\u003e= installed before you begin.\n\nWe’ll be using these tools to build our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Vue](https://vuejs.org)\n\nHere’s a screenshot of the final product:\n\n![paint-app-vue-preview](//images.ctfassets.net/1es3ne0caaid/3hXHKZdF2gMeCmMC04aE0S/9c05dff7291313e9d156646685fdaade/paint-app-vue-preview.png)\n\n## Initializing the application and installing project dependencies\n\nTo get started, we will use the [vue-cli](https://github.com/vuejs/vue-cli/tree/dev) to bootstrap our application. First, we’ll install the CLI by running `npm install -g @vue/cli` in a terminal.\n\nTo create a Vuejs project using the CLI, we’ll run the following command:\n\n```\n    vue create vue-paintapp\n```\n\nAfter running this command, you will be asked by the CLI to pick a preset. Please select the default preset.\n\n\u003e **Note:** the @vue/cli 3.0 is still in beta and should not be used in production.  \n \nNext, run the following commands in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher\n    \n    // front-end dependencies\n    npm install pusher-js uuid\n```\n\nStart the app dev server by running `npm run serve` in a terminal in the root folder of your project.\n\nA browser tab should open on http://localhost:8080. The screenshot below should be similar to what you see in your browser:\n\n![paint-app-vue-start-page](//images.ctfassets.net/1es3ne0caaid/OaF6f8rd8kMAck28Iyyy6/ef1c29fe20e4d5ff560b74f3244a850d/paint-app-vue-start-page.png)\n\n## Building the server\n\nWe’ll build our server using [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/).\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: 'eu',\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\nThe calls to our endpoint will be coming in from a different origin. Therefore, we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nCreate a Pusher account and a new Pusher Channels app if you haven’t done so yet and get your `appId`, `key` and `secret`. \n\nCreate a file in the root folder of the project and name it `.env`. Copy the following snippet into the `.env` file and ensure to replace the placeholder values with your Pusher credentials.\n\n```\n    // .env\n    \n    // Replace the placeholder values with your actual pusher credentials\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_KEY=PUSHER_KEY\n    PUSHER_SECRET=PUSHER_SECRET\n```\n\nWe’ll make use of the `dotenv` library to load the variables contained in the `.env` file into the Node environment. The `dotenv` library should be initialized as early as possible in the application.\n\nStart the server by running `node server` in a terminal inside the root folder of your project.\n\n### Draw route\n\nLet’s create a post route named `draw`, the frontend of the application will send a request to this route containing the mouse events needed to show the updates of a guest user. \n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      ...\n    });\n    \n    \n    app.post('/paint', (req, res) =\u003e {\n      pusher.trigger('painting', 'draw', req.body);\n      res.json(req.body);\n    });\n    \n     ...\n```\n\n- The request body will be sent as the data for the triggered Pusher event. The same object will be sent as a response to the user.\n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`painting`), an event name (`draw`), and a payload.\n\n## Canvas directive\n\nWe’ll be creating and attaching a Vue [directive](https://vuejs.org/v2/guide/custom-directive.html) to the `canvas` element. Using the directive, we’ll listen for events on the host element and also bind attributes to it\n\nCreate a file called `canvas.directive.js` in the `src` folder of your project. Open the file and copy the code below into it:\n\n``` javascript\n    // canvas.directive.js\n    \n    import { v4 } from 'uuid';\n    \n    function inserted(el) {\n      const canvas = el;\n      const ctx = canvas.getContext('2d');\n      \n      canvas.width = 1000;\n      canvas.height = 800;\n      \n      ctx.lineJoin = 'round';\n      ctx.lineCap = 'round';\n      ctx.lineWidth = 5;\n      \n      let prevPos = { offsetX: 0, offsetY: 0 };\n      let line = [];\n      let isPainting = false;\n      const userId = v4();\n      const USER_STROKE = 'red';\n      const GUEST_STROKE = 'greenyellow';\n      \n      function handleMouseDown(e) {\n        const { offsetX, offsetY } = e;\n        isPainting = true;\n        prevPos = { offsetX, offsetY };\n      }\n      function endPaintEvent() {\n        if (isPainting) {\n          isPainting = false;\n          sendPaintData();\n        }\n      }\n      function handleMouseMove(e) {\n        if (isPainting) {\n          const { offsetX, offsetY } = e;\n          const offSetData = { offsetX, offsetY };\n          const positionInfo = {\n            start: { ...prevPos },\n            stop: { ...offSetData },\n          };\n          line = line.concat(positionInfo);\n          paint(prevPos, offSetData, USER_STROKE);\n        }\n      }\n      function sendPaintData() {\n        const body = {\n          line,\n          userId,\n        };\n        fetch('http://localhost:4000/paint', {\n          method: 'post',\n          body: JSON.stringify(body),\n          headers: {\n            'content-type': 'application/json',\n          },\n        }).then(() =\u003e (line = []));\n      }\n      function paint(prevPosition, currPosition, strokeStyle) {\n        const { offsetX, offsetY } = currPosition;\n        const { offsetX: x, offsetY: y } = prevPosition;\n        ctx.beginPath();\n        ctx.strokeStyle = strokeStyle;\n        ctx.moveTo(x, y);\n        ctx.lineTo(offsetX, offsetY);\n        ctx.stroke();\n        prevPos = { offsetX, offsetY };\n      }\n      canvas.addEventListener('mousedown', handleMouseDown);\n      canvas.addEventListener('mousemove', handleMouseMove);\n      canvas.addEventListener('mouseup', endPaintEvent);\n      canvas.addEventListener('mouseleave', endPaintEvent);\n    }\n    export default {\n      inserted,\n    };\n```    \n\n\n\u003e **Note:**  we use the `paint` event to describe the duration from a mouse down event to a mouse up or mouse leave event.\n\nSo here, we created a directive that we will be registering locally in our `App` component. Also, you’ll notice that we exported the `inserted` function as a property in an object. The `inserted` function is a hook for when the element has been inserted into the parent node.\n\nThere’s quite a bit going on in the file above. Let’s walk through it and explain each step.\n\nWe’ve set up event listeners on the host element to listen for mouse events. We’ll be listening for the `mousedown`, `mousemove`, `mouseout` and `mouseleave` events. Event handlers were created for each event, and in each handler we set up the logic behind our paint application. \n\n-  In the `onMouseDown` handler, we get the `offsetX`  and `offsetY` properties of the event. The `isPainting` variable is set to true and then we store the offset properties in the `prevPos` object.\n\n- The `onMouseMove` method is where the magic happens. Here we check if `isPainting` is set to true, then we create an `offsetData` object to hold the current `offsetX` and `offsetY` properties of the current event. We then create a `positionInfo` object containing the previous and current positions of the mouse. Then append the `positionData` object to the `line` array. Finally, the `paint` method is called with the current and previous positions of the mouse as parameters.\n\n- The `mouseup` and `mouseleave` events both use one handler. The `endPaintEvent` method checks if the user is currently painting. If true, the `isPainting` property is set to false to prevent the user from painting until the next `mousedown` event is triggered. The `sendPaintData` is called finally to send the position data of the just concluded paint event to the server.\n\n- `sendPaintData`:  this method sends a post request to the server containing the `userId` and the `line` array as the request body. The line array is then reset to an empty array after the request is complete. We use the browser’s native [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) API for making network requests.\n\n- In the `paint` method, three parameters are required to complete a paint event. The previous position of the mouse, current position and the stroke style. We used [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to get the properties of each parameter. The `ctx.moveTo` function takes the x and y properties of the previous position. A line is drawn from the previous position to the current mouse position using the `ctx.lineTo` function and  `ctx.stroke` visualizes the line.\n\nNow that the directive has been set up, let’s import the directive and register it locally in the `App.vue`  file. Update the `App.vue` file as so:\n\n``` html\n    // /src/App.vue\n    \n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cdiv class=\"main\"\u003e\n          \u003cdiv class=\"color-guide\"\u003e\n            \u003ch5\u003eColor Guide\u003c/h5\u003e\n            \u003cdiv class=\"user user\"\u003eUser\u003c/div\u003e\n            \u003cdiv class=\"user guest\"\u003eGuest\u003c/div\u003e\n          \u003c/div\u003e\n          \u003c!-- Bind the custom directive to the canvas element --\u003e\n          \u003ccanvas v-canvas\u003e\u003c/canvas\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    import canvas from './canvas.directive.js';\n    export default {\n      name: 'app',\n      // Here we register our custom directive\n      directives: {\n        canvas,\n      },\n    };\n    \u003c/script\u003e\n    \u003cstyle\u003e\n    #app {\n      font-family: 'Avenir', Helvetica, Arial, sans-serif;\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n      text-align: center;\n      color: #2c3e50;\n      margin-top: 60px;\n    }\n    canvas {\n      background: navy;\n    }\n    .main {\n      display: flex;\n      justify-content: center;\n    }\n    .color-guide {\n      margin: 20px 40px;\n    }\n    h5 {\n      margin-bottom: 10px;\n    }\n    .user {\n      padding: 7px 15px;\n      border-radius: 4px;\n      color: white;\n      font-size: 13px;\n      font-weight: bold;\n      background: red;\n      margin: 10px 0;\n    }\n    .guest {\n      background: greenyellow;\n      color: black;\n    }\n    \u003c/style\u003e\n```\n\nIn our template, we bound the custom directive to the `canvas` element. We imported and registered the directive in the `App` component. We added a color guide so users can tell their drawing apart. Finally, we added styles for the new elements added. \n\nRun `npm run serve`  in your terminal and visit http://localhost:8080 to have a look at the application. It should be similar to the screenshot below:\n\n![paint-app-vue-stage-1](//images.ctfassets.net/1es3ne0caaid/10sDQ2hxFcIOSimsy2oQ4S/dd0a0fbb83cfbffc4ca00e91683d5b2a/paint-app-vue-stage-1.png)\n\n## Introducing Pusher and realtime collaboration\n\nImport the Pusher library into the `canvas.directive.j``s` file. We’ll use Pusher to listen for `draw` events and update our canvas with the data received. Open the `canvas.directive.js` file, import the Pusher library, initialize it and listen for events:\n\n``` javascript\n    // /src/canvas.directive.js\n    import { v4 } from 'uuid';\n    import Pusher from 'pusher-js';\n    \n    function inserted(el) {\n      ...\n      ctx.lineCap = 'round';\n      ctx.lineWidth = 5;\n      \n      const pusher = new Pusher('PUSHER_KEY', {\n        cluster: 'eu',\n      });\n      const channel = pusher.subscribe('painting');\n      \n      ...\n      \n      canvas.addEventListener('mouseup', endPaintEvent);\n      canvas.addEventListener('mouseleave', endPaintEvent);\n      channel.bind('draw', (data) =\u003e {\n        const { userId: id, line } = data;\n        if (userId !== id) {\n          line.forEach((position) =\u003e {\n            paint(position.start, position.stop, GUEST_STROKE);\n          });\n        }\n      });\n      \n      ...  \n```\n\n- First, we initialize Pusher using the `appKey` provided during creation of the channels ap. \n- Below the event listeners, we subscribe to the `painting` channel and listen for `draw` events. In the callback, we get the `userId` and `line` properties in the `data` object returned; using object destructuring, the `userId` property of the `data` returned was renamed as `id`. \n- Finally, check if the `draw`  event came from a different user by comparing the ids. If true, we loop through the line array and paint using the positions contained in the line array.\n\n\n\u003e **Note**: ensure you replace the `PUSHER_KEY` string with your actual Pusher key.\n\n\n## Test application\n\nOpen two browsers side by side to observe the realtime functionality of the application. Drawings made on one browser should show up on the other with different stroke colors. Here’s a screenshot of two browsers side by side using the application:\n\n\u003e **Note:** Ensure both the server and the dev server are up by running `npm run serve` and `node server` on separate terminal sessions.\n\n![paint-app-vue-preview](//images.ctfassets.net/1es3ne0caaid/2nOLiZczyAQaSqSkoCGiSm/e146f487d238e8781c797d67eedecd44/paint-app-vue-preview.png)\n \n\n## Conclusion\n\nWe’ve created a collaborative drawing application using Vue.js, using Pusher to provide realtime functionality. You can extend the application to show each user’s mouse position. It’ll be fun to see where each person is at any point. The source code for this tutorial is available on [GitHub](https://github.com/HackAfro/vue-paintapp) here.","metaTitle":"Build a collaborative painting app using Vue.js","metaDescription":"This short tutorial shows how to create a social painting app using Vue.js. Two users, drawing on HTML5 canvas, can work together on one image."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5X3Bg7qOWIQ20KuwSWAwMs","type":"Entry","createdAt":"2018-05-28T11:19:58.087Z","updatedAt":"2018-05-28T11:19:58.087Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live comments app with Ruby on Rails and PostgreSQL","url":"live-comments-ruby-rails-postgresql","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/yemiwebby/live-comments-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6S5luSjtlYk4i8eM8AyO4I","type":"Entry","createdAt":"2018-02-02T13:39:48.331Z","updatedAt":"2018-02-12T14:41:19.307Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby","url":"ruby","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"hPWAADkjVmomS68E6seqQ","type":"Entry","createdAt":"2018-02-12T14:48:52.613Z","updatedAt":"2018-02-12T14:48:52.613Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby on Rails","url":"ruby-on-rails","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-05-27","description":"Build a social commenting application using Ruby on Rails and PostgreSQL. App users can leave comments on a sample post, and see other comments appear immediately as they are added.","prerequisite":"You will need Ruby, Rails and PostgreSQL installed on your machine.","content":"## Introduction\n\nIn this post, we will explore and build a basic realtime commenting application. We will create a fake post and assume that users read it and decided to leave a comment.\n\nThis is similar to what is obtainable in a real-world application, where you can have live commenting features implemented in your project and comments added by readers will update in realtime without the need to refresh the page.  \n\nThis basically increases the level of engagement and allows for a proper interaction and participation from users. By the time we are done, our application will look like this:\n\n ![live-comments-ruby-demo-1](//images.ctfassets.net/1es3ne0caaid/CUCtt2jfaKamewSYqWEss/905255d1b0f30d78395b67037ba50fc2/live-comments-ruby-demo-1.gif)\n\nThis application will be built with Ruby on Rails and the realtime functionality fully powered by Pusher.\n\n## Prerequisites\n\nA basic understanding of Ruby, CoffeeScript and PostgresSQL will help you with this tutorial. Ensure that you have PostgreSQL installed on your machine. Kindly check the documentation of [PostgreSQL](https://www.postgresql.org/download/), [Ruby](https://www.ruby-lang.org/en/downloads/) and [Rails](http://guides.rubyonrails.org/getting_started.html) for further installations procedures.\n\n## Creating the live comment application\n\nIt is important that you have both Ruby and Rails installed. Run the following code in your terminal to confirm the successful installation of both Ruby and Rails:\n\n```\n    $ ruby -v // 2.1 or above\n    $ rails -v // 4.2 or above\n```\n\nSecondly, we will run a command that will create a new Rails application in a folder called `live-comments-pusher`. Run the command below in your terminal:\n\n```\n    $ rails new live-comments-pusher -T --database=postgresql\n```\n\nThe `-T` flag was added to prevent generation of the default testing suite as we won’t be writing any tests.\n\nGo ahead and change directory into the newly created folder:\n\n```\n    $ cd live-comments-pusher\n```\n\nIn the root directory of this application, open the `Gemfile` and add the following gems:\n\n```\n    # Gemfile\n    \n    gem 'bootstrap', '~\u003e 4.1.0'\n    gem 'jquery-rails'\n    gem 'pusher'\n    gem 'figaro'\n```    \n\nand install them:\n\n```\n    $ bundle install\n```\n\n## Database setup\n\nTo set up the database for our application, create a database called `live-comments-pusher_development`. Check out this [article](https://www.digitalocean.com/community/tutorials/how-to-setup-ruby-on-rails-with-postgres) on how to create a Postgres database and an associated user and password.\n\nIn your `database.yml` file, under the `development` key, add the following code:\n\n``` yaml\n    # config/database.yml\n    \n    ...\n    development:\n      \u003c\u003c: *default\n      database: live-comments-pusher_development // add this line if it isn't already there\n      username: database_user // add this line\n      password: user_password // add this line\n    ...\n```\n\nThe username and password in the code above should have access to the `live-comments-pusher_development` database. Next, run the following code to setup the database:\n\n```\n    # setup database\n    $ rails db:setup\n```\n\n## Starting the web server\n\nStart the development server by running `rails s` from the terminal and visit http://localhost:3000 in your browser. Your page should look like this:\n\n![youre-on-rails](//images.ctfassets.net/1es3ne0caaid/3sOsgC4S80gOKM8Waqkgui/87c5c9e64375cbb2f8f2516223f4e515/youre-on-rails.png)\n\n## Signing up with Pusher\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). \n\n![ruby-create-pusher-account](//images.ctfassets.net/1es3ne0caaid/6uDbn5kOyIOiKyeSeOKqeS/6136b86bc4d9b6ceff7fcf8458375a19/ruby-create-pusher-account.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![ruby-channels-dashboard](//images.ctfassets.net/1es3ne0caaid/5IDtPf0HhC4aKg66gguYq8/183e0b23ec44fdfc23a38921e11fe9e3/ruby-channels-dashboard.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with, to be provided with boilerplate code:\n\n![ruby-new-pusher-app](//images.ctfassets.net/1es3ne0caaid/3qnLmThfu8ue2ImYKKSw8a/2e4f39b15b8787e0f6d3b4f2ea022d95/ruby-new-pusher-app.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![ruby-app-keys](//images.ctfassets.net/1es3ne0caaid/1XHWE3GCeoCeqsMCO8uM2q/52523148497d08f6e9ba4f52fe0750f6/ruby-app-keys.png)\n\nNow that you have your Pusher API keys, head over to `config/initializers` directory. Create a `pusher.rb` file and add the following code:\n\n``` ruby\n    # config/initializers/pusher.rb\n    \n    require 'pusher'\n    \n    Pusher.app_id = ENV[\"PUSHER_APP_ID\"]\n    Pusher.key = ENV[\"PUSHER_KEY\"]\n    Pusher.secret = ENV[\"PUSHER_SECRET\"]\n    Pusher.cluster = ENV[\"PUSHER_CLUSTER\"]\n    Pusher.logger = Rails.logger\n    Pusher.encrypted = true\n```\n\nIn your terminal, run:\n\n```\n    $ figaro install\n```\n\nThe command above will generate an `application.yml` file. Locate the newly generate file in `config/application.yml` and add the Pusher credentials obtained from your dashboard:\n\n``` yaml\n    # config/application.yml\n    \n    PUSHER_APP_ID: 'YOUR_APP_ID'\n    PUSHER_KEY: 'YOUR_APP_KEY'\n    PUSHER_SECRET: 'YOUR_APP_SECRET'\n    PUSHER_CLUSTER: 'CLUSTER'\n```\n\n\n## Setting up the model and controller\n\nWith our application up and running, we’ll use Rails’ scaffolding feature to quickly set up our comment model and controller:\n\n```\n    # generate comment model and controller\n    $ rails g scaffold comment message:text\n    \n    # run database migration\n    $ rails db:migrate\n```\n\n## Setting up the homepage\n\nRestart the development server and reload your browser page. You should still see the welcome page. We’re about to change all that.\n\nAdd the following code to your route file:\n\n```\n    # config/routes.rb\n    \n    ...\n    root 'comments#index'\n    ...\n```\n\nIn your `application.js` file, add the following code just before the last line:\n\n``` javascript\n    // app/assets/javascripts/application.js\n    \n    .....\n    //= require jquery3 # add this line\n    //= require popper # add this line\n    //= require bootstrap # add this line\n    //= require_tree .\n    ....\n```\n\nRename your `application.css` file to `application.scss`, import Bootstrap and add some custom styles:\n\n``` scss\n    // app/assets/stylesheets/application.scss\n    \n    \n     @import \"bootstrap\";\n     @import url('https://fonts.googleapis.com/css?family=Josefin+Sans');\n     body {\n      font-family: 'Josefin Sans', sans-serif;\n     }\n     .navbar-brand {\n       color: #FFF !important;\n       \u0026:hover {\n         background-color: unset;\n       }\n     }\n     .form-control {\n       outline: none !important;\n       \n       \u0026:focus {\n        border-color: transparent !important;\n        border: 1px !important;\n       }\n     }\n     #wrapper {\n         padding-top: 15px;\n     }\n      p {\n        line-height: 1.3125rem;\n      }\n      \n      .comments {\n        margin: 2.5rem auto 0;\n        max-width: 60.75rem;\n        padding: 0 1.25rem;\n      }\n      \n      .comment-wrap {\n        margin-bottom: 1.25rem;\n        display: table;\n        width: 100%;\n        min-height: 5.3125rem;\n      }\n      \n      .photo {\n        padding-top: 0.625rem;\n        display: table-cell;\n        width: 3.5rem;\n      }\n      .photo .avatar {\n        height: 2.25rem;\n        width: 2.25rem;\n        border-radius: 50%;\n        background-size: contain;\n      }\n      \n      .comment-block {\n        padding: 1rem;\n        background-color: #f5f5f5;\n        display: table-cell;\n        vertical-align: top;\n        border-radius: 0.1875rem;\n        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.08);\n      }\n      .comment-block textarea {\n        width: 100%;\n        resize: none;\n      }\n      \n      .comment-text {\n        margin-bottom: 1.25rem;\n      }\n      \n      .bottom-comment {\n        color: #acb4c2;\n        font-size: 0.875rem;\n      }\n      .comment-actions {\n        float: right;\n      }\n      .comment-actions li {\n        display: inline;\n        margin: -2px;\n        cursor: pointer;\n      }\n      .comment-actions li.show {\n        padding-right: 0.75rem;\n        border-right: 1px solid #e1e5eb;\n      }\n      .comment-actions li.destroy {\n        padding-left: 0.75rem;\n        padding-right: 0.125rem;\n      }\n```    \n\nAt the moment, if we restart the development server and reload the application, we should notice changes in the fonts of our page, this is because we have successfully included Bootstrap.\n\nIf you encounter any errors relating to `application.html.erb`  while trying to set up Bootstrap, in `config/boot.rb`, change the ExecJS runtime from Duktape to Node.\n\n``` ruby\n    # config/boot.rb\n    ENV['EXECJS_RUNTIME'] ='Node'\n```\n\n## Set up the view\n\nTo set up the view, replace the code in your `index.html.erb` file with the following:\n\n``` html\n    \u003c%# app/views/comments/index.html.erb %\u003e\n    \n    \u003cdiv id=\"wrapper\" class=\"container\"\u003e\n    \u003cdiv class=\"text-center\"\u003e\n      \u003ch1\u003eSample post\u003c/h1\u003e\n      \u003cp\u003eThis is an interesting sample post for Pusher \u003c/p\u003e\n    \u003c/div\u003e\n    \u003cdiv id=\"comments\" class=\"comments\"\u003e\n    \u003c% @comments.each do |comment| %\u003e\n     \u003cdiv class=\"col-6 offset-3\"\u003e\n      \u003cdiv class=\"comment-wrap\"\u003e\n            \u003cdiv class=\"photo\"\u003e\n                \u003cdiv class=\"avatar\" style=\"background-image: url('http://res.cloudinary.com/yemiwebby-com-ng/image/upload/v1525202285/avatar_xcah9z.svg')\"\u003e\u003c/div\u003e\n            \u003c/div\u003e        \n            \u003cdiv class=\"comment-block\"\u003e\n                \u003cp class=\"comment-text\"\u003e\u003c%= comment.message %\u003e\u003c/p\u003e\n                \u003cdiv class=\"bottom-comment\"\u003e\n                    \u003cul class=\"comment-actions\"\u003e\n                        \u003cli class=\"show\"\u003e\u003c%= link_to 'Show', comment %\u003e\u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e  \n    \u003c% end %\u003e\n    \u003c/div\u003e\n    \u003cdiv class='col-6 offset-4 col-sm-4'\u003e\n      \u003c%= render 'form', comment: @comment %\u003e\n    \u003c/div\u003e\n    \u003c/div\u003e\n```    \n\nUpdate the index method of the comments controller, to include the following:\n\n``` ruby\n    # app/controllers/comments_controller.rb\n    \n    class CommentsController \u003c ApplicationController\n      ...\n      def index\n        @comments = Comment.all\n        @comment = Comment.new # add this line\n      end\n      ...\n    end\n```\n\nThe code above adds Bootstrap styling to the table on our landing page. It also instantiates a new comment record in the `index` method of the comments controller. If you reload the landing page, you should see the form.\n\n## Post a comment\n\nCurrently adding a new comment record redirects us to a different page. We would like to handle that with AJAX instead. To achieve this, add `remote: true` and `format: :json` to your form. Replace the code in `_form.html.erb` with the following: \n\n``` html\n    // app/views/comments/_form.html.erb\n    \n    \u003c%= form_with(model: comment, remote: true, format: :json, id: 'add_comment') do |form| %\u003e\n      \u003c% if comment.errors.any? %\u003e\n        \u003cdiv id=\"error_explanation\"\u003e\n          \u003ch2\u003e\u003c%= pluralize(comment.errors.count, \"error\") %\u003e prohibited this comment from being saved:\u003c/h2\u003e\n          \u003cul\u003e\n          \u003c% comment.errors.full_messages.each do |message| %\u003e\n            \u003cli\u003e\u003c%= message %\u003e\u003c/li\u003e\n          \u003c% end %\u003e\n          \u003c/ul\u003e\n        \u003c/div\u003e\n      \u003c% end %\u003e\n      \u003cdiv class=\"field\"\u003e\n        \u003c%= form.label :message %\u003e\n        \u003c%= form.text_area :message, id: :comment_message, class: \"form-control\" %\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"actions\"\u003e\n        \u003c%= form.submit 'Add comment', class: \"btn btn-success\"%\u003e\n      \u003c/div\u003e\n    \u003c% end %\u003e\n```\n\nNow that our form uses AJAX, we’ll handle updating the page with CoffeeScript. Open `app/assets/javascripts/comments.coffee` and paste in the code below:\n\n``` coffeescript\n    # app/assets/javascripts/comments.coffee\n    \n    addComment = (data) -\u003e\n      $('#comments').append \"\"\"\n      \u003cdiv class=\"col-6 offset-3\"\u003e\n        \u003cdiv class=\"comment-wrap\"\u003e\n            \u003cdiv class=\"photo\"\u003e\n                \u003cdiv class=\"avatar\" style=\"background-image: url('http://res.cloudinary.com/yemiwebby-com-ng/image/upload/v1525202285/avatar_xcah9z.svg')\"\u003e\u003c/div\u003e\n            \u003c/div\u003e        \n            \u003cdiv class=\"comment-block\"\u003e\n                \u003cp class=\"comment-text\"\u003e#{data.message}\u003c/p\u003e\n                \u003cdiv class=\"bottom-comment\"\u003e\n                    \u003cul class=\"comment-actions\"\u003e\n                        \u003cli class=\"show\"\u003e\u003ca href=\"/comments/#{data.id}\"\u003eShow\u003c/a\u003e\u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n      \u003c/div\u003e\n      \u003c/div\u003e\n      \"\"\"\n      return\n    \n    $ -\u003e\n      $('#add_comment').on 'ajax:success', (data) -\u003e\n        $('#add_comment')[0].reset()\n        addComment data.detail[0]\n        return\n      return\n```\n\nIn the above code, we added an `ajax:success` event listener to our form courtesy of [jQuery-ujs](https://github.com/rails/jquery-ujs/wiki/ajax). Whenever we add a new comment, we get our newly added comment as a response and update our page with it.\n\nLet’s reload our page and add a few comments, they should pop up on the page as soon as we hit submit.\n\n## Realtime service with Pusher\n\nTo update our page in realtime, we will publish the new comment record to a channel and subscribe to it on the frontend of our app. In the comment model, we’ll add an `after_commit` callback, which will call a method that will publish the new comment. We'll use `after_commit` so data is published whenever we add or update a comment. \n\nAdd the following code to the comment model:\n\n``` ruby\n    # app/models/comment.rb\n    \n    class Comment \u003c ApplicationRecord\n      after_commit :notify_pusher, on: [:create, :update]\n      def notify_pusher\n      Pusher.trigger('comment', 'new', self.as_json)\n      end\n    end\n```\n\nHere, our initialized Pusher client triggers an event called `new` through a channel named `comment`.\n\n## Updating the frontend of the application\n\nSo the server is pushing data out on each change, now it’s up to the client to listen for those changes and do something with that data. To do this, we’ll rename our `comments.coffee` file to `comments.coffee.erb` so we can sprinkle some Ruby code in it.\n\nUpdate the file with the following code:\n\n``` ruby\n    # app/assets/javascripts/comments.coffee.erb\n    \n    addComment = (data) -\u003e\n      $('#comments').append \"\"\"\n      \u003cdiv class=\"col-6 offset-3\"\u003e\n        \u003cdiv class=\"comment-wrap\"\u003e\n            \u003cdiv class=\"photo\"\u003e\n                \u003cdiv class=\"avatar\" style=\"background-image: url('http://res.cloudinary.com/yemiwebby-com-ng/image/upload/v1525202285/avatar_xcah9z.svg')\"\u003e\u003c/div\u003e\n            \u003c/div\u003e        \n            \u003cdiv class=\"comment-block\"\u003e\n                \u003cp class=\"comment-text\"\u003e#{data.message}\u003c/p\u003e\n                \u003cdiv class=\"bottom-comment\"\u003e\n                    \u003cul class=\"comment-actions\"\u003e\n                        \u003cli class=\"show\"\u003e\u003ca href=\"/comments/#{data.id}\"\u003eShow\u003c/a\u003e\u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n      \u003c/div\u003e\n      \u003c/div\u003e\n      \"\"\"\n      return\n    \n    $ -\u003e\n      $('#add_comment').on 'ajax:success', (data) -\u003e\n        $('#add_comment')[0].reset()\n        return\n      pusher = new Pusher('\u003c%= ENV[\"PUSHER_KEY\"] %\u003e',\n        cluster: '\u003c%= ENV[\"PUSHER_CLUSTER\"] %\u003e'\n        encrypted: true)\n      channel = pusher.subscribe('comment')\n      channel.bind 'new', (data) -\u003e\n          addComment data\n          return\n      return\n```\n\nLastly, add the Pusher library inside the head tag in the `application.html.erb` file just before the `javascript_include_tag`:\n\n``` html\n    \u003c%# app/views/layouts/application.html.erb %\u003e\n    \n    \u003chead\u003e\n        \u003ctitle\u003eNewNestcomments\u003c/title\u003e\n        \u003c%= csrf_meta_tags %\u003e\n        \u003c%= csp_meta_tag %\u003e\n        \u003c%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e # add this line\n        \u003c%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %\u003e\n      \u003c/head\u003e\n```\n\n## Testing the application\n\nRestart the development server if it is currently running. Check your page on http://localhost:3000:\n\n![live-comments-ruby-demo-2](//images.ctfassets.net/1es3ne0caaid/4dRgYlqRkcOoaUWQ2o08AS/1f88024efd181c76eb7ff11e6f065a28/live-comments-ruby-demo-2.gif)\n\n## Conclusion\n\nIn this tutorial, we have been able to tap into one of the realtime services offered by Pusher to build a live comments application. This can be improved on by adding extra features as you deem fit. The complete source code for this application can be found [here on GitHub](https://github.com/yemiwebby/live-comments-pusher).","metaTitle":"Build a live comments app with Ruby on Rails and PostgreSQL","metaDescription":"This brief tutorial guides you through building a comments app. Use Ruby on Rails and PostgreSQL to create a simple app where users can comment on a sample post. Comments appear and update instantly as they are added."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4RHB3nderuk402K2gWw6qk","type":"Entry","createdAt":"2018-05-28T11:17:57.217Z","updatedAt":"2018-05-28T11:17:57.217Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a photo sharing app with Ruby on Rails and Cloudinary","url":"photo-sharing-ruby-rails","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/orehga/pusher-photofeed-ruby","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6S5luSjtlYk4i8eM8AyO4I","type":"Entry","createdAt":"2018-02-02T13:39:48.331Z","updatedAt":"2018-02-12T14:41:19.307Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby","url":"ruby","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"hPWAADkjVmomS68E6seqQ","type":"Entry","createdAt":"2018-02-12T14:48:52.613Z","updatedAt":"2018-02-12T14:48:52.613Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby on Rails","url":"ruby-on-rails","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-05-27","description":"Build a simple photo sharing app using Ruby and Cloudinary. Users will be able to upload and caption photos, and receive immediate updates when other users post.","prerequisite":"You will need Ruby and Rails installed on your machine.","content":"Some say moments are best when captured so we can relive them and quite frankly, they kind of have a point. This is why applications like Instagram have a lot of users. In this article, we are going to look at how to build a simple photo sharing application with Pusher, Cloudinary and Ruby.\n\n![photo-sharing-ruby-preview](//images.ctfassets.net/1es3ne0caaid/6yf4kdmU7Yqym20AAugUee/240af040fcbe7ab2d029cd744e14fe99/photo-sharing-ruby-preview.png)\n\n## Prerequisites \n\nFor you to successfully follow through this article, you need to have the following set up:\n\n- Ruby installed on your machine\n- Rails installed on your machine\n\nTo confirm your installation, run the following :\n\n```\n    ruby -v // minimum version 2.4\n    rails --version // minimum version 4.2\n```\n\nIf you get version numbers as result then it means you’re good to go!\n\n\n## Getting started\n\n### Creating a new Ruby project\n\nSince you already have Ruby installed on your machine, go ahead to create a new Rails application by running the command:\n\n```\n    rails new pusher-photofeeds\n```\n\nThis creates a sample rails project with the following structure:\n\n![photo-sharing-ruby-directory](//images.ctfassets.net/1es3ne0caaid/2jCr2dbmocqMAEcKS8Gm0E/1536575d10d23ec57fba46accc2f3eb4/photo-sharing-ruby-directory.png)\n\nYou can take the sample application for a spin by running the command:\n\n```\n    rails server --binding=127.0.0.1\n```\n\n### Configuring the database\n\nTo store posts in a database, a database driver is needed. With Ruby on Rails, SQLite is used as the default database driver, and for simplicity, we are going to continue with that.\n\nTo create your database, run the command:\n\n```\n    rake db:create\n```\n\nThis creates the database for the application in the `db/` directory of your project.\n\n### Creating the post model\n\nTo represent a sample post in our application, we need to create a model. Our simple post with have the following properties:\n\n- Link\n- Caption\n\nCreate the model by running the command:\n\n```\n    rails generate model Post link:text caption:text\n```\n\nThis creates a migration file for your new model that can be found in `db/migrate/{timestamp}_create_posts`. The file will look like this:\n\n``` ruby\n    # db/migrate/{timestamp}_create_posts\n    class CreatePosts \u003c ActiveRecord::Migration[5.2]\n      def change\n        create_table :posts do |t|\n          t.text :link\n          t.text :caption\n    \n          t.timestamps\n        end\n      end\n    end\n```\n\nNow, to store the data in the database, run the command:\n\n```\n    rails db:migrate\n```\n\nWhen you run that, you get the following output:\n\n```\n    ➜ rails db:migrate\n    == 20180520070732 CreatePosts: migrating ======================================\n    -- create_table(:posts)\n       -\u003e 0.0016s\n    == 20180520070732 CreatePosts: migrated (0.0022s) =============================\n```\n\nAt this point, we have our posts table created with the link and caption as fields we wanted.\n\n## Accepting posts\n\nRails is an MVC Framework and we need to create a controller that handles our route. Let’s create a `Photo` controller that perform the following actions:\n\n- Displays the existing photos in the feed\n- Stores a new photo\n\nTo do this, run the following command:\n\n```\n    rails generate controller Photo index store\n```\n\nThis creates the controller and the following files. Now, let’s edit the `index` view created by this command. Update your `photo/index.html.erb` file to look like this:\n\n``` html\n    \u003c!-- app/views/photo/index.html.erb --\u003e\n    \u003ch1 style=\"text-align: center\"\u003eRealtime PhotoFeeds!\u003c/h1\u003e\n    \u003cdiv class=\"wrapper\"\u003e\n        \u003cform class=\"uploads\" method=\"POST\" action=\"/photo/store\" enctype=\"multipart/form-data\"\u003e\n            \u003c%= token_tag %\u003e \n            \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"caption\"\u003eCaption\u003c/label\u003e\n                \u003cinput type=\"text\" name=\"caption\"\u003e\n            \u003c/div\u003e\n            \u003cdiv style=\"margin-left: 5px;\"\u003e\n                \u003cinput type=\"file\" name=\"image\"\u003e\n            \u003c/div\u003e\n            \u003cdiv\u003e\n                \u003cinput type=\"submit\" value=\"Upload\"\u003e\n            \u003c/div\u003e\n        \u003c/form\u003e\n        \u003cdiv class=\"images\"\u003e\n            \u003cdiv class=\"post\"\u003e\n                \u003cdiv\u003e\n                    \u003cimg class=\"post-image\" src=\"https://pbs.twimg.com/media/DOXI0IEXkAAkokm.jpg\"\u003e\n                \u003c/div\u003e\n                \u003cp class=\"post-caption\"\u003eLiving my best life\u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nThe view’s styling is controlled by `photo.scss`. Update the file to look like this:\n\n``` scss\n    // app/assets/stylesheets/photo.scss\n    .wrapper{\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    }\n    .uploads{\n        margin-top: 20px;\n        margin-bottom: 20px;\n        align-items: center;\n    }\n    .images{\n        .post{\n            width: 500px;\n            border-radius: 10px;\n            border: 1px solid rgb(214, 210, 210);\n            margin-bottom: 20px;\n        }\n    }\n    .post-image{\n        width: 100%;\n    }\n    .post-caption{\n        padding-left: 20px;\n    }\n    .uploads{\n        display: flex;\n        justify-content: space-between;\n    }\n    input[type=\"submit\"]{\n        background-color: #333333;\n        border: none;\n        color: white;\n        padding: 10px 32px;\n        text-align: center;\n        text-decoration: none;\n        display: inline-block;\n        font-size: 16px;\n    }\n```\n\nThe top bar allows the user to upload pictures to the feed and that is fixed to the top to make it easy to perform the action. The other part part is responsible for displaying the images on the screen to the user. \n\nNow let’s take a look at what happens when a submission is made for a new post to be created. When the **Post** button is clicked, a POST request is made to the ‘photo/store’ route.\n\nIn the `config/routes.rb` that houses the available routes for our application, we have the following:\n\n- `/` - To display the existing photos and upload form\n- `/photo/store` - To create a new post\n\n``` ruby\n    # config/routes.rb\n    Rails.application.routes.draw do\n      post 'photo/store'\n      root 'photo#index'\n    end\n```\n\nLet’s take a look at the controller logic to save the post uploaded by the user. Edit your `app/controllers/photo_controller.rb` to look like this:\n\n``` ruby\n    # app/controllers/photo_controller.rb\n    class PhotoController \u003c ApplicationController\n      def store\n        render plain: params[:caption].inspect\n      end\n      \n      def index\n        @posts = Post.all\n      end\n    end\n```\n\n\u003e The `index` method in the controller is responsible for fetching all the existing posts in the database.\n\nAt the moment, the controller only renders the caption on a new page. This is not what we want. We are going to further edit this controller to do the following:\n\n- Upload the image to Cloudinary and save the post in the database\n- Use Pusher to display posts in realtime\n\n## Uploading posts with Cloudinary\n\n[Cloudinary](https://cloudinary.com) is your one stop shop for all your image and video management needs when building applications. With Cloudinary, you no longer have to worry about writing the core code behind image and video manipulations, uploading images. You can read more about all Cloudinary features [here](https://cloudinary.com/solutions). \n\nCloudinary has a [Ruby gem](https://github.com/cloudinary/cloudinary_gem) and that is what will be used to handle the file uploads.\n\nAdd the Cloudinary as a dependency in your `Gemfile`:\n\n```\n    # adding cloudinary to gemfile\n    gem 'cloudinary'\n```\n\nInstall it by running the command:\n\n```\n    bundle install\n```\n\n### Configuring Cloudinary\nTo use the Cloudinary gem, you need to have a Cloudinary developer account to use it in your applications. Head over here to create one if you don’t have one already. \n\nCloudinary automatically checks for a `cloudinary.yml` in the `config` directory that contains the configuration file for your Cloudinary account. You can download your own customized file for your account [here](https://cloudinary.com/console/cloudinary.yml). Once it’s downloaded, place the file in the `config` directory.\n\n### Using the module\n\nWe are going to use the module in the Photo controller. Update the `app/controllers/photo_controller.rb` file:\n\n``` ruby\n    # app/controllers/photo_controller.rb\n    class PhotoController \u003c ApplicationController\n      \n      def index\n        @posts = Post.all.order(\"created_at DESC\")\n      end\n      \n      def store\n        # upload image to cloudinary\n        @value = Cloudinary::Uploader.upload(params[:image])\n        # create a new post object and save to db\n        @post = Post.new({:link =\u003e @value['secure_url'], :caption =\u003e params[:caption]})\n        @post.save\n        # trigger an event with pusher\n        [...]\n        redirect_to('/')\n      end\n    end\n```    \n\nNow, at this point, we’ve been able to upload a new image using Cloudinary and save the post in the database.\n\n## Adding realtime functionality with Pusher\n\nNow that the post has been created, you need to let all the users online know that there’s a new post without needing to refresh their browsers. To do this, let’s use Pusher. Pusher allows you to seamlessly add realtime features to your applications without worrying about infrastructure.\nTo get started, create a [developer account](https://pusher.com/signup). Once that is done, [create your application](https://dashboard.pusher.com/#wizard-modal) and obtain your application keys. \n\nTo use Pusher with your Rails application, you need to do a couple of things.\n\n### Install Pusher via Ruby gems\n\nAdd pusher to your `Gemfile` \n\n```\n    # Gemfile\n    [...]\n    \n    gem 'pusher'\n    \n    [...]\n```\n\nAnd then install the new gem:\n\n```\n    bundle install\n```\n\nTo confirm your installation run:\n\n```\n    bundle info pusher\n```\n\nYou should get a result like this:\n\n```\n    $ bundle info pusher\n    * pusher (1.3.1)\n            Summary: Pusher API client\n            Homepage: http://github.com/pusher/pusher-http-ruby\n            Path: /home/captog/.rvm/gems/ruby-2.4.1/gems/pusher-1.3.1\n```\n\n### Import the Pusher package\n\nCreate a  `config/initializers/pusher.rb` file to look like this:\n\n``` ruby\n    # config/initializers/pusher.rb\n    require 'pusher'\n    \n    Pusher.app_id = 'PUSHER_APP_ID'\n    Pusher.key = 'PUSHER_APP_KEY'\n    Pusher.secret = 'PUSHER_APP_SECRET'\n    Pusher.cluster = 'PUSHER_APP_CLUSTER'\n    Pusher.logger = Rails.logger\n    Pusher.encrypted = true\n\nThe `PUSHER_APP_ID`, `PUSHER_APP_KEY`, `PUSHER_APP_SECRET` and `PUSHER_APP_CLUSTER`  can all be obtained from the [dashboard](https://dashboard.pusher.com) of your application.\n```\n\n### Triggering events from the controller\n\nTo trigger a new event, update the `app/controlllers/photo_controller.rb` file:\n\n``` ruby\n    # app/controllers/photo_controller.rb\n    class PhotoController \u003c ApplicationController\n      def store\n        # upload image to cloudinary\n        @value = Cloudinary::Uploader.upload(params[:image])\n        # render plain: @value['secure_url']\n        # create a new post object and save to db\n        @post = Post.new({:link =\u003e @value['secure_url'], :caption =\u003e params[:caption]})\n        if @post.save\n          # broadcasting posts using pusher\n          Pusher.trigger('posts-channel','new-post', {\n            link: @post.link,\n            caption: @post.caption\n          })\n        end \n        redirect_to('/')\n      end\n    end\n```\n\nAfter the post is saved in the database, a `new-post` event is triggered in the `posts-channel`. The Pusher dashboard allows you to debug your application by seeing when events have been triggered.\n\n### Displaying posts on the client\n\nTo integrate Pusher to the frontend of your application, you’ll need to do the following:\n\nFirst, include the Pusher script in the header of the application in the `app/views/layouts/application.html.erb`\n\n``` html\n    # app/views/layouts/application.html.erb\n    [...]\n      \u003chead\u003e\n        [...]\n        \n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n       \n         [...]\n      \u003c/head\u003e\n    [...]\n```\n\nNext thing to do is to create a Pusher client in the application header:\n\n``` html\n    # app/views/layouts/application.html.erb\n    [...]\n      \u003chead\u003e\n        [...]\n        // add pusher script\n        \u003cscript\u003e\n          var pusher = new Pusher('PUSHER_APP_KEY', {\n          cluster: 'eu',\n          encrypted: true\n        });\n        \u003c/script\u003e\n       \n         [...]\n      \u003c/head\u003e\n    [...]\n```\n  \nFinally, subscribe to the `posts-channel` and listen for `new-post` events. You can do this in the `photo#index` view of the application. Update the `app/views/photo/index.html.erb` to look like this:\n\n``` html\n    # app/views/photo/index.html.erb\n    \u003ch1 style=\"text-align: center\"\u003eRealtime PhotoFeeds!\u003c/h1\u003e\n    \u003cdiv class=\"wrapper\"\u003e\n      [...]\n      \n       \u003cdiv class=\"images\" id=\"post_section\"\u003e\n          \u003c% @posts.each do |post| %\u003e\n              \u003cdiv class=\"post\"\u003e\n                      \u003cdiv\u003e\n                          \u003cimg class=\"post-image\" src=\"\u003c%= post.link %\u003e\"\u003e\n                      \u003c/div\u003e\n                      \u003cp class=\"post-caption\"\u003e\u003c%= post.caption %\u003e\u003c/p\u003e\n              \u003c/div\u003e\n          \u003c% end %\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n        \u003cscript\u003e\n        var channel = pusher.subscribe('posts-channel');\n        channel.bind('new-post', function(data) {\n            let post_link = data.link;\n            let post_caption = data.caption;\n            let div = document.getElementById('post_section');\n            let new_content = document.createElement(\"div\");\n            new_content.innerHTML = `\n                \u003cdiv class=\"post\"\u003e\n                    \u003cdiv\u003e\n                        \u003cimg class=\"post-image\" src=\"${post_link}\"\u003e\n                    \u003c/div\u003e\n                    \u003cp class=\"post-caption\"\u003e ${post_caption}\u003c/p\u003e\n                \u003c/div\u003e`;\n            div.insertBefore(new_content, div.firstChild);\n        });\n        \u003c/script\u003e  \n```\n\nHere, on the client, we subscribe to the `posts-channel` and listen for a `new-post` event. When an event is broadcasted we then update the UI to show the new post.\n\nTo see the application at work, start the rails server using the command:\n\n```\n    rails server --binding=127.0.0.1\n```\n\nThis starts up a rails server with the port shown to you - in this case `127.0.0.1:3000` as specified with the `--binding` flag. When you visit the application, this is what you see:\n\n![photo-sharing-ruby-demo](//images.ctfassets.net/1es3ne0caaid/50pJyIefdmk0EqmeYGIaCa/930228316f4843d1d58b5c48c05313ea/photo-sharing-ruby-demo.gif)\n\n## Conclusion\n\nIn this article, we’ve seen how to use Ruby and Pusher to make a simple realtime photosharing application. Feel free to apply these concepts and explore the Pusher documentation for more exciting features.Lastly, the complete source code of this demo application is on [GitHub](https://github.com/orehga/pusher-photofeed-ruby).","metaTitle":"Build a photo sharing app with Ruby on Rails and Cloudinary","metaDescription":"This short tutorial will show you how to create a simple photo sharing app using Ruby and Cloudinary. You will set up a Rails project, integrate Cloudinary, and build an app featuring realtime updates as users post images."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1OWZbq6ZlKgSE8CQo2m0OY","type":"Entry","createdAt":"2018-05-31T15:35:53.937Z","updatedAt":"2018-06-21T15:18:59.023Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Send push notifications in a social network iOS app - Part 2: Build the app","url":"social-notifications-ios-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro-articles/pusher-beams-ios-social-network","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}}],"reviewDate":"2018-05-25","description":"Learn to build a social network app for iOS, featuring push notifications. In part two, create the app and set up push notifications.","prerequisite":"To follow this tutorial you will need a Mac with Xcode installed, knowledge of Xcode and Swift, basic knowledge of PHP (including the Laravel framework), a Pusher account, and CocoaPods installed on your machine.","content":"In the [previous part,](https://pusher.com/tutorials/social-notifications-ios-part-1) we were able to set up our Pusher Beams application and also create our API backend with Laravel. We also added push notification support to the backend using the [pusher-beams](https://github.com/neoighodaro/pusher-beams) package.\n\nIn this part, we will continue where we left off. We will be creating the iOS application using Swift and then integrate push notifications to the application so we can receive notifications when they are sent.\n\n![ios-push-notifications-social-network-demo](//images.ctfassets.net/1es3ne0caaid/51GgQzYiqQEMAQWOK8AMgS/fd0d5bb1bbaa7f1f198fed340d25cd53/ios-push-notifications-social-network-demo.gif)\n\n## Prerequisites\n\nIn order to follow along in this tutorial you need to have the following:\n\n- Have completed [part one](https://pusher.com/tutorials/social-notifications-ios-part-1) of the article.\n\n\n## Building our iOS application using Swift\n\n### Creating our controllers\nIn Xcode, create a new class `LaunchViewController` and paste the contents of the file below into it:\n\n``` swift\n    import UIKit\n    \n    class LaunchViewController: UIViewController {\n        @IBOutlet weak var loginButton: UIButton!\n        @IBOutlet weak var signupButton: UIButton!\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            loginButton.isHidden = true\n            signupButton.isHidden = true\n    \n            loginButton.addTarget(self, action: #selector(loginButtonWasPressed), for: .touchUpInside)\n            signupButton.addTarget(self, action: #selector(signupButtonWasPressed), for: .touchUpInside)\n        }\n    \n        override func viewDidAppear(_ animated: Bool) {\n            super.viewDidAppear(animated)\n            \n            guard AuthService.shared.loggedIn() == false else {\n                SettingsService.shared.loadFromApi()\n                return performSegue(withIdentifier: \"Main\", sender: self)\n            }\n            \n            loginButton.isHidden = false\n            signupButton.isHidden = false\n        }\n            \n        private func loginButtonWasPressed() {\n            performSegue(withIdentifier: \"Login\", sender: self)\n        }\n        \n        private func signupButtonWasPressed() {\n            performSegue(withIdentifier: \"Signup\", sender: self)\n        }   \n    }\n```\n\nSet the controller as the custom class for the related storyboard scene.\n\nAbove we have two `@IBOutlet` buttons for login and signup. In the `viewDidLoad` method we hide the buttons and create a target callback for them when they are pressed. In the `viewDidAppear` method we check if the user is logged in and present the timeline if so. If the user is not logged in we unhide the authentication buttons.\n\nWe also have the `loginButtonWasPressed` and `signupButtonWasPressed` methods. These methods present the login and signup controllers.\n\nNext, create a `SignupViewController` class and paste the following code into the file:\n\n``` swift\n    import UIKit\n    import NotificationBannerSwift\n    \n    class SignupViewController: UIViewController {\n        @IBOutlet weak var nameTextField: UITextField!\n        @IBOutlet weak var emailTextField: UITextField!\n        @IBOutlet weak var passwordTextfield: UITextField!\n        @IBOutlet weak var signupButton: UIBarButtonItem!\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            activateSignupButtonIfNecessary()\n            \n            nameTextField.addTarget(self, action: #selector(textFieldChanged(_:)), for: .editingChanged)\n            emailTextField.addTarget(self, action: #selector(textFieldChanged(_:)), for: .editingChanged)\n            passwordTextfield.addTarget(self, action: #selector(textFieldChanged(_:)), for: .editingChanged)\n        }\n        \n        @IBAction func closeButtonWasPressed(_ sender: Any? = nil) {\n            dismiss(animated: true, completion: nil)\n        }\n        \n        @IBAction func signupButtonWasPressed(_ sender: Any) {\n            guard let credentials = textFields(), signupButton.isEnabled else {\n                return\n            }\n            \n            ApiService.shared.signup(credentials: credentials) { token, error in\n                guard let token = token, error == nil else {\n                    return StatusBarNotificationBanner(title: \"Signup failed. Try again.\", style: .danger).show()\n                }\n                \n                AuthService.shared.saveToken(token).then {\n                    self.closeButtonWasPressed()\n                }\n            }\n        }\n        \n        func textFields() -\u003e AuthService.SignupCredentials? {\n            if let name = nameTextField.text, let email = emailTextField.text, let pass = passwordTextfield.text {\n                return (name, email, pass)\n            }\n            \n            return nil\n        }\n    \n        func activateSignupButtonIfNecessary() {\n            if let field = textFields() {\n                signupButton.isEnabled = !field.name.isEmpty \u0026\u0026 !field.email.isEmpty \u0026\u0026 !field.password.isEmpty\n            }\n        }\n        \n        @objc func textFieldChanged(_ sender: UITextField) {\n            activateSignupButtonIfNecessary()\n        }\n    }\n```\n\nSet the controller as the custom class for the signup storyboard scene.\n\nAbove we have three `@IBOutlet`'s for our signup text fields and one `@IBOutlet` for our signup button. In the `viewDidLoad` method we add a callback for our text fields to be triggered when the text is changed. We also call the `activateSignupButtonIfNecessary` method, which activates the signup button if all the field’s contents are valid.\n\nWe have two `@IBAction` functions. The first for when the close button is pressed and the other for when the signup button is pressed. When the **Sign up** button is pressed, the `signupButtonWasPressed` method is called, which uses the `ApiService` to create an account for the user and log the user in. If the signup fails we use the [NotificationBanner](https://github.com/Daltron/NotificationBanner) package to display an error.\n\nWe also have other helper methods. The `textFields` method returns a tuple of the text fields contents and the `textFieldChanged` method is fired every time a text field’s content is modified.\n\nNext, create a `LoginViewController` class and paste the following code into the file:\n\n``` swift\n    import UIKit\n    import NotificationBannerSwift\n    \n    class LoginViewController: UIViewController {\n        @IBOutlet weak var emailTextField: UITextField!\n        @IBOutlet weak var passwordTextField: UITextField!\n        @IBOutlet weak var loginButton: UIBarButtonItem!\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            activateLoginButtonIfNecessary()\n            \n            emailTextField.addTarget(self, action: #selector(textFieldChanged(_:)), for: .editingChanged)\n            passwordTextField.addTarget(self, action: #selector(textFieldChanged(_:)), for: .editingChanged)\n        }\n    \n        @IBAction func closeButtonWasPressed(_ sender: Any? = nil) {\n            dismiss(animated: true, completion: nil)\n        }\n        \n        @IBAction func loginButtonWasPressed(_ sender: Any) {\n            guard let credentials = textFields(), loginButton.isEnabled else {\n                return\n            }\n            \n            ApiService.shared.login(credentials: credentials) { token, error in\n                guard let token = token, error == nil else {\n                    return StatusBarNotificationBanner(title: \"Login failed, try again.\", style: .danger).show()\n                }\n                \n                AuthService.shared.saveToken(token).then {\n                    self.closeButtonWasPressed()\n                }\n            }\n        }\n        \n        func textFields() -\u003e AuthService.LoginCredentials? {\n            if let email = emailTextField.text, let password = passwordTextField.text {\n                return (email, password)\n            }\n            \n            return nil\n        }\n        \n        func activateLoginButtonIfNecessary() {\n            if let field = textFields() {\n                loginButton.isEnabled = !field.email.isEmpty \u0026\u0026 !field.password.isEmpty\n            }\n        }\n    \n        @objc func textFieldChanged(_ sender: UITextField) {\n            activateLoginButtonIfNecessary()\n        }\n    }\n```\n\nSet the controller as the custom class for the login storyboard scene.\n\nThe controller above functions very similarly to the `SignupViewController`. When the `loginButtonWasPressed` method is called it uses the `ApiService` to log the user in and save the token.\n\nNext, we need to create the settings controller. This will be where the settings can be managed. Create a `SettingsTableViewController` and paste the following code into the file:\n\n``` swift\n    import UIKit\n    \n    class SettingsTableViewController: UITableViewController {\n        let settings = {\n            return SettingsService.shared.settings\n        }()\n        \n        private func shouldCheckCell(at index: IndexPath, with setting: String) -\u003e Bool {\n            let status = Setting.Notification.Comments(rawValue: setting)\n    \n            return (status == .off \u0026\u0026 index.row == 0) ||\n                   (status == .following \u0026\u0026 index.row == 1) ||\n                   (status == .everyone \u0026\u0026 index.row == 2)\n        }\n        \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = super.tableView(tableView, cellForRowAt: indexPath)\n            cell.accessoryType = .none\n            \n            if let setting = settings[\"notification_comments\"], shouldCheckCell(at: indexPath, with: setting) {\n                cell.accessoryType = .checkmark\n            }\n            \n            return cell\n        }\n    \n        override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n            let rowsCount = self.tableView.numberOfRows(inSection: indexPath.section)\n            \n            for i in 0..\u003crowsCount  {\n                let  rowIndexPath = IndexPath(row: i, section: indexPath.section)\n                \n                if let cell = self.tableView.cellForRow(at: rowIndexPath) {\n                    cell.accessoryType = indexPath.row == i ? .checkmark : .none\n                }\n            }\n            \n            let setting = indexPath.row == 0 ? \"Off\" : (indexPath.row == 1 ? \"Following\" : \"Everyone\")\n            \n            if let status = Setting.Notification.Comments(rawValue: setting) {\n                SettingsService.shared.updateCommentsNotificationSetting(status)\n            }\n        }\n    }\n```\n\nSet the controller as the custom class for the settings storyboard scene.\n\nIn the `SettingsTableViewController`, we load the settings from the `SettingsService` class, which we will create later. We then define a `shouldCheckCell` method, which will determine if the cell row should be checked by checking the users setting.\n\n![ios-push-notifications-social-network-settings](//images.ctfassets.net/1es3ne0caaid/4TH2I2tOQ82eAIcueuEoqC/4597c23c2705aaf92044a0dc69a08c70/ios-push-notifications-social-network-settings.png)\n\nAs seen from the storyboard scene, there are three possible settings for the comments notification section: ‘**Off**’, ‘**From people I follow**’ and ‘**From everyone**’. The settings controller attempts to update the setting locally and remotely using the `SettingsService` when the setting is changed.\n\nNext, create the `SearchTableViewController` and paste the following code into it:\n\n``` swift\n    import UIKit\n    import NotificationBannerSwift\n    \n    class SearchTableViewController: UITableViewController {\n    \n        var users: Users = []\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            ApiService.shared.fetchUsers { users in\n                guard let users = users else {\n                    return StatusBarNotificationBanner(title: \"Unable to fetch users.\", style: .danger).show()\n                }\n                \n                self.users = users\n                self.tableView.reloadData()\n            }\n        }\n        \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return self.users.count\n        }\n    \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let user = self.users[indexPath.row]\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"User\", for: indexPath) as! UserListTableViewCell\n            \n            cell.delegate = self\n            cell.indexPath = indexPath\n            cell.textLabel?.text = user.name\n            \n            if let following = user.follows {\n                cell.setFollowStatus(following)\n            }\n    \n            return cell\n        }\n        \n    }\n    \n    extension SearchTableViewController: UserListCellFollowButtonDelegate {\n        \n        func followButtonTapped(at indexPath: IndexPath) {\n            let user = self.users[indexPath.row]\n            let userFollows = user.follows ?? false\n            \n            ApiService.shared.toggleFollowStatus(forUserId: user.id, following: userFollows) { successful in\n                guard let successful = successful, successful else { return }\n                \n                self.users[indexPath.row].follows = !userFollows\n                self.tableView.reloadData()\n            }\n        }\n        \n    }\n```\n\nSet the controller as the custom class for the search storyboard scene.\n\nThough we have named the class `SearchTableViewController` we are actually not going to be doing any searches. We are going to have a make-believe search result, which will display the list of users on the service with a **Follow/Unfollow** button to make it easy to follow or unfollow a user.\n\nIn the `viewDidLoad` method we call the `fetchUsers` method on the `ApiService` class and then we load the users to the `users` property, which is then used as the table’s data. In the class extension, we implement the `UserListCellFollowButtonDelegate` protocol, which makes it easy for us to know when the **Follow/Unfollow** button is tapped. We use the [delegation pattern](https://www.appcoda.com/swift-delegate/) to make this possible.\n\nNext, create the `TimelineTableViewController` class and paste the following code into it:\n\n``` swift\n    import UIKit\n    import Alamofire\n    import NotificationBannerSwift\n    import PushNotifications\n    \n    class TimelineTableViewController: UITableViewController {\n        var photos: Photos = []\n        var selectedPhoto: Photo?\n        let picker = UIImagePickerController()\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            self.reloadButtonWasPressed()\n            self.picker.delegate = self\n        }\n        \n        @IBAction func userButtonWasPressed(_ sender: Any) {\n            AuthService.shared.logout()\n            dismiss(animated: true, completion: nil)\n        }\n        \n        @IBAction func reloadButtonWasPressed(_ sender: Any? = nil) {\n            ApiService.shared.fetchPosts { photos in\n                if let photos = photos {\n                    self.photos = photos\n                    self.tableView.reloadData()\n                }\n            }\n        }\n        \n        @IBAction func addButtonWasPressed(_ sender: Any) {\n            picker.sourceType = .photoLibrary\n            picker.mediaTypes = UIImagePickerController.availableMediaTypes(for: .photoLibrary)!\n            picker.modalPresentationStyle = .popover\n            picker.popoverPresentationController?.barButtonItem = nil\n            present(picker, animated: true, completion: nil)\n        }\n    \n        override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n            if let vc = segue.destination as? CommentsTableViewController, let photo = selectedPhoto {\n                selectedPhoto = nil\n                vc.photoId = photo.id\n                vc.comments = photo.comments\n            }\n        } \n    }\n```\n\nSet the controller as the custom class for the timeline storyboard scene.\n \nIn the controller above we have the `photos` property, which is an array of all the photos on the service, the `selectedPhoto`, which will temporarily hold the selected photo object, and the `picker` property, which we will use for the image picker when trying to upload images to the service.\n \n In the `viewDidLoad` method, we load the posts by calling the `reloadButtonWasPressed` method, then we set the class as the `picker.delegate`. We have the `@IBAction` method `addButtonWasPressed`, which launches the iOS image picker.\n \n The `prepare` method is called automatically when the controller is navigating to the comments controller. So in here, we set the comments to the comments controller so we have something to display immediately. We also set the `photoId` to the comments controller.\n\nNext, in the same class, paste the following at the bottom:\n\n``` swift\n    extension TimelineTableViewController {\n        \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return photos.count\n        }\n        \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let photo = photos[indexPath.row]\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"PhotoCell\", for: indexPath) as! PhotoListTableViewCell\n            \n            cell.delegate = self\n            cell.indexPath = indexPath\n            cell.nameLabel.text = photo.user.name\n            cell.photo.image = UIImage(named: \"loading\")\n            \n            Alamofire.request(photo.image).responseData { response in\n                if response.error == nil, let data = response.data {\n                    cell.photo.image = UIImage(data: data)\n                }\n            }\n    \n            return cell\n        } \n        \n    }\n    \n    extension TimelineTableViewController: PhotoListCellDelegate {\n        \n        func commentButtonWasTapped(at indexPath: IndexPath) {\n            self.selectedPhoto = photos[indexPath.row]\n            self.performSegue(withIdentifier: \"Comments\", sender: self)\n        }\n        \n    }\n```\n\nIn the code above, we have two extensions for the `TimelineTableViewController`. The first extension defines how we want to present the photos to the table view. The second extension is an implementation of the `PhotoListCellDelegate`, which is another implementation of the delegation pattern. The method defined here, `commentButtonWasTapped`, will be triggered when the Comment button is pressed on a photo cell.\n\nIn the same file add the last class extension at the bottom of the file:\n\n``` swift\n    extension TimelineTableViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {\n        \n        @objc func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {\n            if let selected = info[\"UIImagePickerControllerOriginalImage\"] as? UIImage {\n                guard let image = UIImageJPEGRepresentation(selected, 0) else { \n                    return \n                }\n                \n                let uploadPhotoHandler: (() -\u003e Void)? = {\n                    var caption: UITextField?\n                    \n                    let alert = UIAlertController(title: \"Add Caption\", message: nil, preferredStyle: .alert)\n                    alert.addTextField(configurationHandler: { textfield in caption = textfield })\n                    alert.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))\n                    alert.addAction(UIAlertAction(title: \"Save\", style: .default, handler: { action in\n                        var filename = \"upload.jpg\"\n                        let caption = caption?.text ?? \"No caption\"\n                        \n                        if let url = info[UIImagePickerControllerImageURL] as? NSURL, let name = url.lastPathComponent {\n                            filename = name\n                        }\n                        \n                        ApiService.shared.uploadImage(image, caption: caption, name: filename) { photo, error in\n                            guard let photo = photo, error == nil else {\n                                return StatusBarNotificationBanner(title: \"Failed to upload image\", style: .danger).show()\n                            }\n                            \n                            try? PushNotifications.shared.subscribe(interest: \"photo_\\(photo.id)-comment_following\")\n                            try? PushNotifications.shared.subscribe(interest: \"photo_\\(photo.id)-comment_everyone\")\n                            \n                            self.photos.insert(photo, at: 0)\n                            self.tableView.reloadData()\n                            \n                            StatusBarNotificationBanner(title: \"Uploaded successfully\", style: .success).show()\n                        }\n                    }))\n                    \n                    self.present(alert, animated: true, completion: nil)\n                }\n    \n                self.dismiss(animated: true, completion: uploadPhotoHandler)\n            }\n        }\n        \n    }\n```\n\nIn the extension above, we implement the `UIImagePickerControllerDelegate`, which let’s us handle image selection from the `UIImagePickerController`. When an image is selected, the method above will be called.\n\nWe handle it by getting the selected image, displaying an alert controller with a text field so we can get a caption for the image and then we send the image and the caption to the API using the `ApiService`.\n\nWhen the upload is complete, we add the newly added photo to the table and then we subscribe the user to the Pusher Beam Interest so they can receive push notifications when comments are made to the photo.\n\nAlso above we subscribed to two interests. The first is `photo_\\(id)-comment_following` and the second one is `photo_\\(id)-comment_everyone`. We do this so that we can segment notifications depending on the users setting. On the server, when a comment is added, if the photo owner sets the comment notification setting to following then the push notification will be published to the `photo_\\(id)-comment_following` interest.\n\nNext, create the `CommentsTableViewController` class and paste the following code into it:\n\n``` swift\n    import UIKit\n    import NotificationBannerSwift\n    \n    class CommentsTableViewController: UITableViewController {\n        var photoId: Int = 0\n        var commentField: UITextField?\n        var comments: PhotoComments = []\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            navigationItem.title = \"Comments\"\n            navigationController?.navigationBar.prefersLargeTitles = false\n            navigationItem.rightBarButtonItem = UIBarButtonItem(title: \"Add\", style: .plain, target: self, action: #selector(addCommentButtonWasTapped))\n            \n            if photoId != 0 {\n                ApiService.shared.fetchComments(forPhoto: photoId) { comments in\n                    guard let comments = comments else { return }\n                    \n                    self.comments = comments\n                    self.tableView.reloadData()\n                }\n            }\n        }\n        \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return comments.count\n        }\n        \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"Comment\", for: indexPath) as! CommentsListTableViewCell\n            let comment = comments[indexPath.row]\n            \n            cell.username?.text = comment.user.name\n            cell.comment?.text = comment.comment\n            \n            return cell\n        }\n        \n        @objc func addCommentButtonWasTapped() {\n            let alertCtrl = UIAlertController(title: \"Add Comment\", message: nil, preferredStyle: .alert)\n            alertCtrl.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))\n            alertCtrl.addTextField { textField in self.commentField = textField }\n            alertCtrl.addAction(UIAlertAction(title: \"Add Comment\", style: .default) { _ in\n                guard let comment = self.commentField?.text else { return }\n                \n                ApiService.shared.leaveComment(forId: self.photoId, comment: comment) { newComment in\n                    guard let comment = newComment else {\n                        return StatusBarNotificationBanner(title: \"Failed to post comment\", style: .danger).show()\n                    }\n    \n                    self.comments.insert(comment, at: 0)\n                    self.tableView.reloadData()\n                }\n            })\n    \n            self.present(alertCtrl, animated: true, completion: nil)\n        }\n    }\n```\n\nSet the controller as the custom class for the timeline storyboard scene.\n\nIn the `CommentsTableViewController` above we have the `comments` property, which holds all the comments for the photo, the `photoId` property, which holds the ID of the photo whose comments are being loaded and the `commentField` property, which is the text field that holds new comments.\n\nIn the `viewDidLoad` method we set up the controller title and add an ‘**Add**’ button to the right of the navigation bar. Next, we call the `fetchComments` method in the `ApiService` to load comments for the photo.\n\nWe have the `addCommentButtonWasTapped` method in the controller, which is activated when the ‘**Add**’ button on the navigation bar is pressed. This brings up an alert controller with a text field where we can get the comment text and then send the comment to the API using the `ApiService`.\n\n### Creating our custom view classes\n\nSince we have created the controllers, let’s create some custom view classes that we need for the cells we used in the controllers earlier.\n\nThe first custom cell we will create will be the `PhotoListTableViewCell` class. Create the class and paste the following code into the file:\n\n``` swift\n    import UIKit\n    \n    protocol PhotoListCellDelegate {\n        func commentButtonWasTapped(at indexPath: IndexPath)\n    }\n    \n    class PhotoListTableViewCell: UITableViewCell {\n        @IBOutlet weak var nameLabel: UILabel!\n        @IBOutlet weak var photo: UIImageView!\n        @IBOutlet weak var commentButton: UIButton!\n    \n        var indexPath: IndexPath?    \n        var delegate: PhotoListCellDelegate?\n        \n        override func awakeFromNib() {\n            super.awakeFromNib()\n            self.selectionStyle = .none\n            \n            commentButton.addTarget(self, action: #selector(commentButtonWasTapped), for: .touchUpInside)\n        }\n        \n        @objc func commentButtonWasTapped() {\n            if let indexPath = indexPath, let delegate = delegate {\n                delegate.commentButtonWasTapped(at: indexPath)\n            }\n        }\n    }\n```\n\nSet this class as the custom class for the cell in the timeline scene of the storyboard.\n\nIn the class above we have a few `@IBOutlet`'s for the name, photo and comment button. We have a `commentButtonWasTapped` method that fires the `commentWasTapped` method on a delegate of the cell.\n\nThe next cell we want to create is the `CommentsListTableViewCell`. Create the class and paste the following code into the file:\n\n``` swift\n    import UIKit\n    \n    class CommentsListTableViewCell: UITableViewCell {\n        @IBOutlet weak var username: UILabel!\n        @IBOutlet weak var comment: UILabel!\n    }\n```\n\nSet this class as the custom class for the cell in the comments scene of the storyboard.\n\nThe next cell we want to create is the `UsersListTableViewCell`. Create the class and paste the following code into the file:\n\n``` swift\n    import UIKit\n    \n    protocol UserListCellFollowButtonDelegate {\n        func followButtonTapped(at index:IndexPath)\n    }\n    \n    class UserListTableViewCell: UITableViewCell {\n        var indexPath: IndexPath?    \n        var delegate: UserListCellFollowButtonDelegate?\n        \n        @IBOutlet weak var followButton: UIButton!\n        \n        override func awakeFromNib() {\n            super.awakeFromNib()\n            self.selectionStyle = .none\n            \n            self.setFollowStatus(false)\n            self.followButton.layer.cornerRadius = 5\n            self.followButton.setTitleColor(UIColor.white, for: .normal)\n            self.followButton.addTarget(self, action: #selector(followButtonTapped(_:)), for: .touchUpInside)\n        }\n    \n        func setFollowStatus(_ following: Bool) {\n            self.followButton.backgroundColor = following ? UIColor.red : UIColor.blue\n            self.followButton.setTitle(following ? \"Unfollow\" : \"Follow\", for: .normal)\n        }\n        \n        @objc private func followButtonTapped(_ sender: UIButton) {\n            if let delegate = delegate, let indexPath = indexPath {\n                delegate.followButtonTapped(at: indexPath)\n            }\n        }\n    }\n```\n\nSet this class as the custom class for the cell in the search scene in the storyboard.\n\nIn the class above we have a custom cell to display a user’s name and a follow button. We have a `setFollowStatus` method that toggles the state of the follow button and we have a `followButtonTapped` method that calls the `followButtonTapped` method on a delegate of the cell.\n\nThat’s all for custom cell classes. Let’s move on to creating other classes and setting up push notification.\n\n### Adding other classes and setting up push notifications\n\nWe still need to create one last file.  Create an `AppConstants` file and paste the following code into the file:\n\n``` swift\n    import Foundation\n    \n    struct AppConstants {\n        static let API_URL = \"http://127.0.0.1:8000\"\n        static let API_CLIENT_ID = \"API_CLIENT_ID\"\n        static let API_CLIENT_SECRET = \"API_CLIENT_SECRET\"\n        static let PUSHER_INSTANCE_ID = \"PUSHER_INSTANCE_ID\n    }\n```\n\nIn the struct above we have some constants that we will be using throughout the application. These will be used to store application credentials and will be unchanged throughout the lifetime of the application.\n\n\n\u003e 💡  Replace the key values with the actual values gotten from your Passport installation and from your Pusher dashboard.\n\nNext, open the `AppDelegate` class and replace the contents with the following:\n\n``` swift\n    import UIKit\n    import PushNotifications\n    \n    @UIApplicationMain\n    class AppDelegate: UIResponder, UIApplicationDelegate {\n    \n        var window: UIWindow?\n        \n        let pushNotifications = PushNotifications.shared\n        \n        func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n            self.pushNotifications.start(instanceId: AppConstants.PUSHER_INSTANCE_ID)\n            self.pushNotifications.registerForRemoteNotifications()\n    \n            return true\n        }\n        \n        func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n            self.pushNotifications.registerDeviceToken(deviceToken)\n        }\n    }\n```\n\nIn the class above, we use the [Pusher Beams Swift SDK](https://docs.pusher.com/push-notifications/reference/ios) to register the device for push notifications.\n\nThat’s all for our application’s code.\n\n### Adding push notifications to our iOS new application\n\nNow that we have completed the logic for the application, let’s enable push notifications on the application in Xcode. \n\nIn the project navigator, select your project, and click on the **Capabilities** tab. [Enable Push Notifications](http://help.apple.com/xcode/mac/current/#/devdfd3d04a1) by turning the switch ON.\n\n![ios-push-notifications-social-network-enable-push-notifications](//images.ctfassets.net/1es3ne0caaid/nwh9O0inWCAwwsi82iq4o/efa381b5ae180d746608e151f4559f0e/ios-push-notifications-social-network-enable-push-notifications.png)\n\nThis will create an entitlements file in the root of your project. With that, you have provisioned your application to fully receive push notifications.\n\n### Adding rich push notifications\n\nLet’s take it one step further and add rich notifications. We will want to be able to see the photo commented on in the notification received as this can increase engagement.\n\nIn Xcode go to ‘File’ \u003e ‘New’ \u003e ‘Target’ and select ‘Notification Service Extension’. Enter the name of the extension and then click proceed. Make sure the extension is added and embedded to the Gram project. We will call our extension **Notification**.\n\nWhen the target has been created you will see a new `Notification` group (it may be different depending on what you chose to call your extension) with two files in them. Open the `NotificationService` class and replace the `didReceive`  method with the method below:\n\n``` swift\n    override func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -\u003e Void) {\n        self.contentHandler = contentHandler\n        bestAttemptContent = (request.content.mutableCopy() as? UNMutableNotificationContent)\n    \n        func failEarly() {\n            contentHandler(request.content)\n        }\n        \n        guard\n            let content = (request.content.mutableCopy() as? UNMutableNotificationContent),\n            let apnsData = content.userInfo[\"data\"] as? [String: Any],\n            let photoURL = apnsData[\"attachment-url\"] as? String,\n            let attachmentURL = URL(string: photoURL.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)!),\n            let imageData = try? NSData(contentsOf: attachmentURL, options: NSData.ReadingOptions()),\n            let attachment = UNNotificationAttachment.create(imageFileIdentifier: \"image.png\", data: imageData, options: nil)\n            else {\n                return failEarly()\n        }\n        \n        content.attachments = [attachment]\n        contentHandler(content.copy() as! UNNotificationContent)\n    }\n```\n\nAbove we are simply getting the notifications payload and then extracting the data including the `attachment-url`, which is the photo URL. We then create an attachment for the notification and add it to the notification’s content. That’s all we need to do to add the image as an attachment.\n\n\u003e ⚠️  Your image URL has to be a secure URL with HTTPS or iOS will not load the image. You can override this setting in your `info.plist` file but it is strongly recommended that you don’t.\n\nNext, create a new file in the Notification extension called `UNNotificationAttachment.swift` and paste the following into the file:\n\n``` swift\n    import Foundation\n    import UserNotifications\n    \n    extension UNNotificationAttachment {\n        \n        static func create(imageFileIdentifier: String, data: NSData, options: [NSObject : AnyObject]?) -\u003e UNNotificationAttachment? {\n            let fileManager = FileManager.default\n            let tmpSubFolderName = ProcessInfo.processInfo.globallyUniqueString\n            let tmpSubFolderURL = NSURL(fileURLWithPath: NSTemporaryDirectory()).appendingPathComponent(tmpSubFolderName, isDirectory: true)\n            \n            do {\n                try fileManager.createDirectory(at: tmpSubFolderURL!, withIntermediateDirectories: true, attributes: nil)\n                let fileURL = tmpSubFolderURL?.appendingPathComponent(imageFileIdentifier)\n                try data.write(to: fileURL!, options: [])\n                let imageAttachment = try UNNotificationAttachment(identifier: imageFileIdentifier, url: fileURL!, options: options)\n                return imageAttachment\n            } catch let error {\n                print(\"error \\(error)\")\n            }\n            \n            return nil\n        }\n    }\n```\n\nThe code above is a class extension for the `UNNotificationAttachment` class. The extension contains the `create` method that allows us to create a temporary image to store the image attachment that was sent as a push notification.\n\nNow you can build your application using Xcode. Make sure the Laravel application is running or the app won’t be able to fetch the data.\n\n### Allowing our application to connect locally\n\nIf you are going to be testing the app’s backend using a local server, then there is one last thing we need to do. Open the `info.plist` file and add an entry to the `plist` file to allow connection to our local server:\n\n![ios-push-notifications-social-network-connect-locally](//images.ctfassets.net/1es3ne0caaid/5UymGAiLeg22C46SEyay4U/0f66ae00ca879dc03852ece398c955f9/ios-push-notifications-social-network-connect-locally.png)\n\nThat’s it now. We can run our application. However, **remember that to demo the push notifications, you will need an actual iOS device as simulators cannot receive push notifications.**\n\nHere is a screen recording of the application in action:\n\n![ios-push-notifications-social-network-demo](//images.ctfassets.net/1es3ne0caaid/51GgQzYiqQEMAQWOK8AMgS/fd0d5bb1bbaa7f1f198fed340d25cd53/ios-push-notifications-social-network-demo.gif)\n\n## Conclusion\n\nIn this article, we have seen how you can use Pusher Beams to send push notifications from a Laravel backend and a Swift iOS client application. When creating social networks it is essential that the push notifications we send are relevant and not spammy and Pusher Beams can help with this.\n\nThe source code to the application is on [GitHub](https://github.com/neoighodaro-articles/pusher-beams-ios-social-network).","metaTitle":"Social notifications on iOS app - Part 2: Build the app","metaDescription":"This tutorial is part two of a two-part series. You will create a a social network app for iOS, featuring push notifications. In this part, you will use Xcode to build the iOS app."}}],"defaultValue":"Social","queryType":"tag","pages":8,"route":"/tutorials","query":{"tag":"Social","page":"3"}}},"page":"/tutorials","query":{"tag":"Social","page":"3"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Social&page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:41:53 GMT -->
</html>