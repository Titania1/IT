<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?page=19 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:39 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1">Learn &amp; Discover Pusher</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="1v9vy9q">.css-1v9vy9q{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;text-align:center;}@media all and (min-width:400px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1v9vy9q a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1v9vy9q a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:400px){.css-1v9vy9q{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1v9vy9q{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1v9vy9q{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1v9vy9q{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}</style><p scale="h5" class="css-1v9vy9q e5jrto45"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">447</span> tutorials to help you build great apps</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials0e67.html?product=Channels" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials1bbb.html?product=Beams" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value=""/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:none;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/building-message-delivery-status-swift.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Building a message delivery status in Swift</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">In this tutorial, we will learn how to implement message delivery status notifications in an iOS application using Swift...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/authorization-graphql.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">GraphQL</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Handling authorization in GraphQL</h3><p class="css-k12xad e5jrto45">This tutorial shows how to use GraphQL to manage authorization and user roles. You will build on a previous app to creat...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/memory-game-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a two-player memory game with React Native</h3><p class="css-k12xad e5jrto45">This tutorial will show you how to build a two-player memory game using React Native. Players sign in and are randomly a...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/getting-started-vapor-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with Vapor - Part 2: Deploying to Vapor Cloud</h3><p class="css-k12xad e5jrto45">This two part series introduces Vapor, a server-side Swift framework. In part two, take the API we built in part one, an...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/getting-started-vapor-part-one.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with Vapor - Part 1: Installation and creating a basic API</h3><p class="css-k12xad e5jrto45">This two-part series introduces Vapor, a server-side Swift framework. In part one, install Vapor and create an API that ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/microservice-problems-channels.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Solving microservice problems using Channels</h3><p class="css-k12xad e5jrto45">This article examines some common problems with microservice architecture, and evaluates several solutions, before looki...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chrome-extension-cryptocurrency-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a Chrome extension to track cryptocurrency prices - Part 2: Allowing user interaction</h3><p class="css-k12xad e5jrto45">This two part series will guide you through building, deploying and extending a Chrome extension. The extension displays...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chrome-extension-cryptocurrency-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a Chrome extension to track cryptocurrency prices - Part 1: Build the app</h3><p class="css-k12xad e5jrto45">This two part series will guide you through building, deploying and extending a Chrome extension. The extension displays...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/authentication-vue-vuex.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Authentication in Vue using Vuex</h3><p class="css-k12xad e5jrto45">Learn how to implement authentication in a Vue app with Vuex and a Node backend. Create a simple demo with a login page ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials9683.html?page=18" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials2679.html?page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials5c43.html?page=17" class="css-za1ua3 edg0byb1">17</a><a href="tutorials9683.html?page=18" class="css-za1ua3 edg0byb1">18</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials7537.html?page=19" class="css-2wakph edg0byb1">19</a><a href="tutorialsf62c.html?page=20" class="css-za1ua3 edg0byb1">20</a><a href="tutorialse4a7.html?page=21" class="css-za1ua3 edg0byb1">21</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials02d1.html?page=50" class="css-5s6711 edg0byb1">50</a><a href="tutorialsf62c.html?page=20" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":447,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7yjvUBFTrysqqic6OQQMGe","type":"Entry","createdAt":"2018-11-07T09:49:38.592Z","updatedAt":"2018-11-07T09:49:38.592Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Building a message delivery status in Swift","url":"building-message-delivery-status-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5xPFDNiTZY0Sa02SmmiWqc","type":"Entry","createdAt":"2018-11-07T09:48:14.186Z","updatedAt":"2018-11-07T09:48:14.186Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"José Maria Cunha","url":"jose-maria-cunha","email":"jose@pusher.com","twitter":"https://twitter.com/zemcunha","github":"https://github.com/josemcunha","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/message-delivery-status-ios","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2018-11-07","description":"In this tutorial, we will learn how to implement message delivery status notifications in an iOS application using Swift.","prerequisite":"Knowledge of iOS development with Swift and XCode\nPusher Channels App","content":"When building an application it's often useful to know when certain events take place. This enables your application to respond in realtime and can be used in a number of ways. In this article, we will focus on how to implement message delivery status in an iOS application.\n\nThis tutorial assumes you already have knowledge of Swift and Xcode, and does not go into too much detail on how to use Xcode or the Swift syntax.\n\n## What our application will do\n\nThe application will be an iOS chat application, and the application will allow you to post messages and see the delivery status of the message once it has been sent. This feature is similar to what you can find in chat applications like WhatsApp, Facebook Messenger, BBM and others.\n\n![How to build message delivery status in iOS using Pusher](https://dl.dropbox.com/s/qrml2une712my9f/message-delivery-status-on-ios-using-pusher-2.gif)\n\n\u003e Note: You will need a Pusher account to work with this tutorial. You can create one for free by [clicking here](https://pusher.com). Create a new application and note your cluster, app ID, secret and key; they will all be needed for this tutorial.\n\n### Getting started with our iOS application\n\nTo get started you will need XCode installed on your machine and you will also need Cocoapods package manager installed. If you have not installed Cocoapods, here's how to do so:\n\n``` language-shell\n$ gem install cocoapods\n```\nNow that you have that installed, launch Xcode and create a new project. We are calling ours Anonchat.\n\nNow close Xcode and then `cd` to the root of your project and run the command `pod init`. This should generate a `Podfile` for you. Change the contents of the `Podfile`:\n\n``` \n# Uncomment the next line to define a global platform for your project\nplatform :ios, '9.0'\n\ntarget 'anonchat' do\n  # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\n  use_frameworks!\n\n  # Pods for anonchat\n  pod 'Alamofire'\n  pod 'PusherSwift'\n  pod 'JSQMessagesViewController'\nend\n```\nNow run the command `pod install` so the Cocoapods package manager can pull in the necessary dependencies. When this is complete, close XCode (if open) and then open the `.xcworkspace` file that is in the root of your project folder.\n\n## Creating the views for our iOS application\n\nWe are going to be creating a couple of views that we will need for the chat application to function properly. The views will look something like the screenshot below:\n\n![Message delivery status for iOS using Pusher](https://dl.dropbox.com/s/8551jebu1vava4k/message-delivery-status-on-ios-using-pusher-3.png)\n\nWhat we have done above is create a the first ViewController which will serve as our welcome ViewController, and we have added a button which triggers navigation to the next controller which is a `Navigation Controller`. This Navigation Controller in turn has a View Controller set as the root controller.\n\n### Coding the message delivery status for our iOS application\n\nNow that we have set up the views using the interface builder on the `MainStoryboard`, let's add some functionality. The first thing we will do is create a `WelcomeViewController` and associate it with the first view on the left. This will be the logic house for that view; we won't add much to it for now though:\n\n``` language-swift\nimport UIKit\n\nclass WelcomeViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n}\n```\nNow that we have created that, we create another controller called the `ChatViewController`, which will be the main power house and where everything will be happening. The controller will extend the `JSQMessagesViewController` so that we automatically get a nice chat interface to work with out of the box, then we have to work on customising this chat interface to work for us.\n\n``` language-swift\nimport UIKit\nimport Alamofire\nimport PusherSwift\nimport JSQMessagesViewController\n\nclass ChatViewController: JSQMessagesViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        let n = Int(arc4random_uniform(1000))\n\n        senderId = \"anonymous\" + String(n)\n        senderDisplayName = senderId\n    }\n}\n```\nIf you notice on the `viewDidLoad` method, we are generating a random username and setting that to be the `senderId` and `senderDisplayName` on the controller. This extends the properties set in the parent controller and is required.\n\nBefore we continue working on the chat controller, we want to create a last class called the `AnonMessage` class. This will extend the `JSQMessage` class and we will be using this to extend the default functionality of the class.\n\n``` language-swift\nimport UIKit\nimport JSQMessagesViewController\n\nenum AnonMessageStatus {\n    case sending\n    case delivered\n}\n\nclass AnonMessage: JSQMessage {\n    var status : AnonMessageStatus\n    var id : Int\n\n    public init!(senderId: String, status: AnonMessageStatus, displayName: String, text: String, id: Int) {\n        self.status = status\n        self.id = id\n        super.init(senderId: senderId, senderDisplayName: displayName, date: Date.init(), text: text)\n    }\n\n    public required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n```\nIn the class above we have extended the `JSQMessage` class and we have also added some new properties to track; the `id` and the `status`. We also added an initialization method so we can specify the new properties before instantiating the `JSQMessage` class properly. We also added an `enum` that contains all the statuses the message could possibly have.\n\nNow returning to the `ChatViewController` let's add a few properties to the class that will be needed:\n\n``` language-swift\nstatic let API_ENDPOINT = \"http://localhost:4000\";\n\nvar messages = [AnonMessage]()\nvar pusher: Pusher!\n\nvar incomingBubble: JSQMessagesBubbleImage!\nvar outgoingBubble: JSQMessagesBubbleImage!\n```\nNow that it's done, we will start customizing the controller to suit our needs. First, we will add some logic to the `viewDidLoad` method:\n\n``` language-swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    let n = Int(arc4random_uniform(1000))\n\n    senderId = \"anonymous\" + String(n)\n    senderDisplayName = senderId\n\n    inputToolbar.contentView.leftBarButtonItem = nil\n\n    incomingBubble = JSQMessagesBubbleImageFactory().incomingMessagesBubbleImage(with: UIColor.jsq_messageBubbleBlue())\n    outgoingBubble = JSQMessagesBubbleImageFactory().outgoingMessagesBubbleImage(with: UIColor.jsq_messageBubbleGreen())\n\n    collectionView!.collectionViewLayout.incomingAvatarViewSize = CGSize.zero\n    collectionView!.collectionViewLayout.outgoingAvatarViewSize = CGSize.zero\n\n    automaticallyScrollsToMostRecentMessage = true\n\n    collectionView?.reloadData()\n    collectionView?.layoutIfNeeded()\n}\n```\nIn the above code, we started customizing the way our chat interface will look, using the parent class that has these properties already set. For instance, we are setting the `incomingBubble` to blue, and the `outgoingBubble` to green. We have also eliminated the avatar display because we do not need it right now.\n\nThe next thing we are going to do is override some of the methods that come with the parent controller so that we can display messages, customize the feel and more:\n\n``` language-swift\noverride func collectionView(_ collectionView: JSQMessagesCollectionView!, messageDataForItemAt indexPath: IndexPath!) -\u003e JSQMessageData! {\n    return messages[indexPath.item]\n}\n\noverride func collectionView(_ collectionView: JSQMessagesCollectionView!, attributedTextForCellBottomLabelAt indexPath: IndexPath!) -\u003e NSAttributedString! {\n    if !isAnOutgoingMessage(indexPath) {\n        return nil\n    }\n\n    let message = messages[indexPath.row]\n\n    switch (message.status) {\n    case .sending:\n        return NSAttributedString(string: \"Sending...\")\n    case .delivered:\n        return NSAttributedString(string: \"Delivered\")\n    }\n}\n\noverride func collectionView(_ collectionView: JSQMessagesCollectionView!, layout collectionViewLayout: JSQMessagesCollectionViewFlowLayout!, heightForCellBottomLabelAt indexPath: IndexPath!) -\u003e CGFloat {\n    return CGFloat(15.0)\n}\n\noverride func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -\u003e Int {\n    return messages.count\n}\n\noverride func collectionView(_ collectionView: JSQMessagesCollectionView!, messageBubbleImageDataForItemAt indexPath: IndexPath!) -\u003e JSQMessageBubbleImageDataSource! {\n    let message = messages[indexPath.item]\n    if message.senderId == senderId {\n        return outgoingBubble\n    } else {\n        return incomingBubble\n    }\n}\n\noverride func collectionView(_ collectionView: JSQMessagesCollectionView!, avatarImageDataForItemAt indexPath: IndexPath!) -\u003e JSQMessageAvatarImageDataSource! {\n    return nil\n}\n\noverride func didPressSend(_ button: UIButton, withMessageText text: String, senderId: String, senderDisplayName: String, date: Date) {\n    let message = addMessage(senderId: senderId, name: senderId, text: text) as! AnonMessage\n\n    postMessage(message: message)\n    finishSendingMessage(animated: true)\n}\n\nprivate func isAnOutgoingMessage(_ indexPath: IndexPath!) -\u003e Bool {\n    return messages[indexPath.row].senderId == senderId\n}\n```\nThe next thing we are going to do is create some new methods on the controller that will help us, post a new message, then another to hit the remote endpoint to send the message, then a last one to append the new message sent (or received) to the messages array:\n\n``` language-swift\nprivate func postMessage(message: AnonMessage) {\n    let params: Parameters = [\"sender\": message.senderId, \"text\": message.text]\n    hitEndpoint(url: ChatViewController.API_ENDPOINT + \"/messages\", parameters: params, message: message)\n}\n\nprivate func hitEndpoint(url: String, parameters: Parameters, message: AnonMessage? = nil) {\n    Alamofire.request(url, method: .post, parameters: parameters).validate().responseJSON { response in\n        switch response.result {\n        case .success:\n            if message != nil {\n                message?.status = .delivered\n                self.collectionView.reloadData()\n            }\n\n        case .failure(let error):\n            print(error)\n        }\n    }\n}\n\nprivate func addMessage(senderId: String, name: String, text: String) -\u003e Any? {\n    let leStatus = senderId == self.senderId\n        ? AnonMessageStatus.sending\n        : AnonMessageStatus.delivered\n\n    let message = AnonMessage(senderId: senderId, status: leStatus, displayName: name, text: text, id: messages.count)\n\n    if (message != nil) {\n        messages.append(message as AnonMessage!)\n    }\n\n    return message\n}\n```\nGreat. Now every time we send a new message, the `didPressSend` method will be triggered and all the other ones will fall into place nicely!\n\nFor the last piece of the puzzle, we want to create the method that listens for Pusher events and fires a callback when an event trigger is received.\n\n``` language-swift\nprivate func listenForNewMessages() {\n    let options = PusherClientOptions(\n        host: .cluster(\"PUSHER_CLUSTER\")\n    )\n\n    pusher = Pusher(key: \"PUSHER_KEY\", options: options)\n\n    let channel = pusher.subscribe(\"chatroom\")\n\n    channel.bind(eventName: \"new_message\", callback: { (data: Any?) -\u003e Void in\n        if let data = data as? [String: AnyObject] {\n            let author = data[\"sender\"] as! String\n\n            if author != self.senderId {\n                let text = data[\"text\"] as! String\n\n                let message = self.addMessage(senderId: author, name: author, text: text) as! AnonMessage?\n                message?.status = .delivered\n\n                self.finishReceivingMessage(animated: true)\n            }\n        }\n    })\n\n    pusher.connect()\n}\n```\nSo in this method, we have created a `Pusher` instance, we have set the cluster and the key. We attach the instance to a `chatroom` channel and then bind to the `new_message` event on the channel. **Remember to replace the key and cluster with the actual value you have gotten from your Pusher dashboard**.\n\nNow we should be done with the application and as it stands, it should work but no messages can be sent just yet as we need a backend application for it to work properly.\n\n### Building the backend Node application\n\nNow that we are done with the iOS and Xcode parts, we can create the NodeJS back end for the application. We are going to be using Express so that we can quickly whip something up.\n\nCreate a directory for the web application and then create two new files:\n\n``` language-javascript\n// index.js\nvar path = require('path');\nvar Pusher = require('pusher');\nvar express = require('express');\nvar bodyParser = require('body-parser');\n\nvar app = express();\n\nvar pusher = new Pusher({\n  appId: 'PUSHER_ID',\n  key: 'PUSHER_KEY',\n  secret: 'PUSHER_SECRET',\n  cluster: 'PUSHER_CLUSTER',\n  encrypted: true\n});\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n\napp.post('/messages', function(req, res){\n  var message = {\n    text: req.body.text,\n    sender: req.body.sender\n  }\n  pusher.trigger('chatroom', 'new_message', message);\n  res.json({success: 200});\n});\n\napp.use(function(req, res, next) {\n    var err = new Error('Not Found');\n    err.status = 404;\n    next(err);\n});\n\nmodule.exports = app;\n\napp.listen(4000, function(){\n  console.log('App listening on port 4000!')\n})\n```\nand **packages.json**\n\n``` json\n{\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"body-parser\": \"^1.16.0\",\n    \"express\": \"^4.14.1\",\n    \"path\": \"^0.12.7\",\n    \"pusher\": \"^1.5.1\"\n  }\n}\n```\nNow run `npm install` on the directory and then `node index.js` once the npm installation is complete. You should see *App listening on port 4000!* message.\n\n![How to build message delivery status in iOS using Pusher](https://dl.dropbox.com/s/cvwccr7x358r7to/message-delivery-status-on-ios-using-pusher-5.png)\n\n## Testing the application\n\nOnce you have your local node web server running, you will need to make some changes so your application can talk to the local web server.\n\nIn the `info.plist` file, make the following changes:\n\n![How to build message delivery status in iOS using Pusher](https://dl.dropbox.com/s/f9mwlct0eswxt14/message-delivery-status-on-ios-using-pusher-4.png)\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\n## Conclusion\n\nIn this tutorial, we have explored how to create an iOS chat application with a message delivery status message after the message is sent to other users. For practice, you can expand the statuses to support more instances.\n\nHave a question or feedback on the tutorial? Please ask below in the comment section. The repository for the application and the Node backend is available [here](https://github.com/neoighodaro/message-delivery-status-ios).","metaTitle":"Building a message delivery status in Swift","metaDescription":"In this tutorial we will learn how to implement message delivery status notifications in an iOS application using Swift."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2wIuIeFmtigsqWIcKaAgyu","type":"Entry","createdAt":"2018-11-06T11:46:07.300Z","updatedAt":"2018-11-06T11:46:07.300Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Handling authorization in GraphQL","url":"authorization-graphql","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5K3KWA2xvqw4SW2sYI8eCG","type":"Entry","createdAt":"2018-02-12T15:34:14.169Z","updatedAt":"2018-02-14T10:09:19.038Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Chimezie Enyinnaya","url":"chimezie-enyinnaya","email":"meziemichael@gmail.com","twitter":"https://twitter.com/ammezie","github":"https://github.com/ammezie","guestWriter":true}}],"projectRepo":"https://github.com/ammezie/graphql-authorization","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}}],"reviewDate":"2018-11-06","description":"This tutorial shows how to use GraphQL to manage authorization and user roles. You will build on a previous app to create an admin and a general user, and implement different permissions based on user role.","prerequisite":"You will need Node installed on your machine. Basic knowledge of JavaScript and GraphQL will be helpful.","content":"Authorization occurs after a successful authentication, it checks the access levels or privileges of the user, which will determine what the user can see or do with the application. Some time ago, I did a tutorial series on [handling authentication in GraphQL](https://blog.pusher.com/handling-authentication-in-graphql). So in this tutorial, I will be covering authorization.\n\n## Prerequisites\n\nThis tutorial assumes the following:\n\n- Node.js and NPM installed on your computer\n- Basic knowledge of JavaScript and Node.js\n- Basic knowledge of GraphQL\n- Understanding of handling authentication in GraphQL with JWT. You can check out this [tutorial](https://blog.pusher.com/handling-authentication-in-graphql-jwt/).\n\n## What we'll be building\n\nWe will be building on where we left off from [handling authentication in GraphQL – Part 2: JWT](https://blog.pusher.com/handling-authentication-in-graphql-jwt/). To demonstrate authorization, we will add two new features: fetching a list of all users and allowing users to edit their post. Only an admin user will be able to fetch a list of all users. Also, we will make it so users can only edit their own posts.\n\n## Getting started\n\nTo speed things up, we will start by cloning a boilerplate, which I have created for this tutorial:\n\n```\n    $ git clone --branch starter https://github.com/ammezie/graphql-authorization.git\n```\n\nNext, let’s install the project dependencies: \n\n```\n    $ cd graphql-authorization\n    $ npm install\n```\n\nNext, rename `.env.example` to `.env` then enter your JWT secret:\n\n```\n    // .env\n    \n    JWT_SECRET=somereallylongsecretkey\n```\n\nWe will be using SQLite, so create a new `database.sqlite3`  file in the project’s root directory.\n\n```\n    $ touch database.sqlite3\n```\n\nLastly, run the migration:\n\n```\n    $ node_modules/.bin/sequelize db:migrate\n```\n\nIf you followed from the handling authentication in GraphQL series, you will already be familiar with the project. I made some few changes though. The project has been migrated to [Apollo Server 2](https://www.apollographql.com/docs/apollo-server/v2) and the `User` model now has an `is_admin` column as well as a corresponding `isAdmin` field on the `User` type schema definition. Also, a new `Post` model and `Post` type have been added, as well a query to fetch a single post and mutation for creating a new post.\n\n## Creating dump data\n\nTo test out what we will be building, we need to have some data to play with. So let’s create some. First, let’s start the server:\n\n```\n    $ npm run dev\n```\n\nThe project has nodemon as a dev dependency, which will watch our files for changes and restarts the server. So we will leave this running for the rest of the tutorial.\n\nThe server should be running on http://localhost:4000/api. Apollo Server 2 now comes with Playground. Visiting the URL should load it up as seen in the image below:\n\n![graphql-auth-demo-1](//images.ctfassets.net/1es3ne0caaid/6oETHrz2H6CCksCCkAA8em/62aafd2bf961502e1255d3202c37414f/graphql-auth-demo-1.png)\n\nLet’s create two users and a new post created by one of the users. In Playground enter the mutations below one after the other.\n\n``` json\n    // Create first user\n    mutation {\n      signup (username: \"mezie\", email: \"chimezie@tutstack.io\", password: \"password\")\n    }\n    \n    // Create second user\n    mutation {\n      signup (username: \"johndoe\", email: \"johndoe@example.com\", password: \"password\")\n    }\n```\n\nNext, log in as one of the user:\n\n``` json\n    // Log in as the first user\n    mutation {\n      login (email: \"chimezie@tutstack.io\", password: \"password\")\n    }\n```\n\nThe mutation above will return a JWT, which we will attach as an `Authorization` header in our subsequent requests.\n\nClick on **HTTP HEADERS** at the bottom of Playground, then enter the JWT copied from above:\n\n``` json\n    {\n      \"Authorization\": \"Bearer ENTER JWT HERE\"\n    }\n```\n\n![graphql-auth-http-headers](//images.ctfassets.net/1es3ne0caaid/2Uih36qMXSqYak8eUQeS4w/fe209ce026c520ec4e0e6475a83709eb/graphql-auth-http-headers.png)\n\nNow, we can create a new post as the logged in user:\n\n``` json\n    // Create a new post\n    mutation {\n      createPost (title: \"Intro to GraphQL\", content: \"This is an intro to GraphQL.\"){\n        title\n        content\n      }\n    }\n```\n\nThe rest of this tutorial assumes you have at least two users and a post created by one of the users.\n\n## Using a resolver function\n\nWe will be looking at two different methods with which we can handle authorization in GraphQL. This first method is to add the authorization logic directly inside the resolver function, which is pretty straightforward. We will be using this method to implement editing a post.\n\nFirst, let’s define the mutation for editing a post. Open `schemas/index.js` and add the code below inside the `Mutation` object:\n\n``` javascript\n    // schemas/index.js\n    \n    type Mutation {\n      ...\n      editPost(id: Int!, title: String, content: String): Post\n    }\n```\n\nThis mutation accepts three arguments: the ID of the post, the title of the post and the content of the post. Only the `id` argument is required. \n\nNext, let’s write the resolver function for this mutation. Inside `resolvers/index.js`, add the code below immediately after the `createPost` resolver function in the `Mutation` object:\n\n``` javascript\n    // resolvers/index.js\n    \n    async editPost (root, { id, title, content }, { user }) {\n      if (!user) {\n        throw new Error('You are not authenticated!')\n      }\n      \n      const post = await Post.findById(id)\n        \n      if (!post) {\n        throw new Error('No post found')\n      }\n      \n      if (user.id !== post.user_id) {\n        throw new Error('You can only edit the posts you created!')\n      }\n      \n      await post.update({ title, content })\n      \n      return post\n    }\n```\n\nHere, we first check to make sure the user is authenticated. Then we get the post matching the supplied ID. If no match was found, we throw an appropriate error. Then we check to make sure the authenticated user trying to edit the post is the author of the post by checking the user ID against the `user_id` on the `post` object. If the authenticated user is not the author of the post, we throw an appropriate error. Otherwise, we update the post with the supplied details and return the newly updated post.\n\nLet’s test this out. First, let’s trying editing a post we didn’t create. We should get an error as in the image below:\n\n``` json\n    // Editing a post user didn’t create\n    mutation {\n      editPost (id:1, title: \"GraphQL 101\", content: \"This is an intro to GraphQL.\") {\n        title\n        content\n        author {\n          username\n        }\n      }\n    }\n```\n\nWe should get an error like below:\n\n``` json\n    {\n      ...\n      \"errors\": [\n        {\n          \"message\": \"You can only edit the posts you created!\",\n          ...\n        }\n      ]\n    }\n```\n\nBut if we trying to edit our own post, then we should see the updated post:\n\n``` json\n    {\n      \"data\": {\n        \"editPost\": {\n          \"title\": \"GraphQL 101\",\n          \"content\": \"This is an intro to GraphQL.\",\n          \"author\": {\n            \"username\": \"mezie\"\n          }\n        }\n      }\n    }\n```\n\n## Using custom directives\n\nNow, let’s allow an admin to fetch a list of users that have signed up. For this, we will be using the second method, which is using custom directives. A GraphQL directive starts with the `@` symbol. The core GraphQL specification includes two directives: `@include()` and `@skip()`. Visit the [GraphQL directives](https://graphql.org/learn/queries/#directives) page to learn more about directives.\n\nLet’s create the schema for fetching all users. Add the code below inside `schemas/index.js`:\n\n``` javascript\n    // schemas/index.js\n    \n    const typeDefs = gql`\n      directive @isAdmin on FIELD_DEFINITION\n      \n      ...\n      type Query {\n        allUsers: [User]! @isAdmin\n        ...\n      }\n      ...\n    `\n```\n\nFirst, we define a new directive called `@isAdmin`, which will be added to a field (hence, `FIELD_DEFINITION`). Then we define the query for fetching all users and use the `@isAdmin` directive on it. This means only admin users will be able to perform this query.\n\nNow, let’s create the `@isAdmin` implementation. Create a new `directives` directory in the project’s root. Then inside the `directives` directory, create a new `isAdmin.js` file and paste the code below in it:\n\n``` javascript\n    // directives/isAdmin.js\n    \n    const { SchemaDirectiveVisitor } = require('apollo-server-express')\n    const { defaultFieldResolver } = require('graphql')\n    \n    class IsAdminDirective extends SchemaDirectiveVisitor {\n      visitFieldDefinition (field) {\n        const { resolve = defaultFieldResolver } = field\n        \n        field.resolve = async function (...args) {\n          // extract user from context\n          const { user } = args[2]\n          \n          if (!user) {\n            throw new Error('You are not authenticated!')\n          }\n          \n          if (!user.is_admin) {\n            throw new Error('This is above your pay grade!')\n          }\n          \n          return resolve.apply(this, args)\n        }\n      }\n    }\n    \n    module.exports = IsAdminDirective\n```\n\nApollo Server 2 makes it easy to create custom directives by using `SchemaDirectiveVisitor`. We create a new `IsAdminDirective` class which extends `SchemaDirectiveVisitor`. Since we want the directive to be added to a field, we override the `visitFieldDefinition()`, which accepts the field the directive was added to. Inside the resolve function of the field, we get the authenticated user from the context. Then we perform the authentication and authorization checks and throw any appropriate errors.\n\nNext, let’s write the resolver function for the query. Inside `resolvers/index.js`, add the code below immediately after the `post` resolver function in the `Query` object:\n\n``` javascript\n    // resolvers/index.js\n    \n    async allUsers (root, args, { user }) {\n      return User.all()\n    }\n```\n\nBefore we test this out, let’s make our server be aware of the custom directive. Update `server.js` to reflect the changes below:\n\n``` javascript\n    // server.js\n    \n    ...\n    const IsAdminDirective = require('./directives/isAdmin')\n    ...\n    \n    const server = new ApolloServer({\n      typeDefs,\n      resolvers,\n      schemaDirectives: {\n        isAdmin: IsAdminDirective\n      },\n      context: ({ req }) =\u003e ({\n        user: req.user\n      })\n    })\n    ...\n```\n\nWe import the custom directive, then we add a new `schemaDirectives` object (which contains our custom directive) to the object passed to `ApolloServer`.\n\nTo test this out, let’s set one of the users we created earlier as an admin. To keep things simple, we will do this manually directly in the database. Just change the `is_admin` value of the user from `0` to `1`.\n\nIf we try to perform the fetch all users query as a non-admin user:\n\n``` json\n    // fetching all users as a non-admin user\n    \n    {\n      allUsers {\n        username\n        email\n      }\n    }\n```\n\nWe will get an error as below:\n\n``` json\n    {\n      ...\n      \"errors\": [\n        {\n          \"message\": \"This is above your pay grade!\",\n          ...\n        }\n      ]\n    }\n```\n\nOtherwise, we should get an array of all users:\n\n``` json\n    {\n      \"data\": {\n        \"allUsers\": [\n          {\n            \"username\": \"mezie\",\n            \"email\": \"chimezie@tutstack.io\"\n          },\n          {\n            \"username\": \"johndoe\",\n            \"email\": \"johndoe@example.com\"\n          }\n        ]\n      }\n    }\n```\n\n## Conclusion\n\nIn this tutorial, we saw how to handle authorization in GraphQL. We looked at two different methods of achieving it. Using custom directives has some advantages over using resolver function, which include reducing repetition in your resolver function, which in turn keeps your them lean. Another advantage is that it promotes reusability and it’s easier to maintain.\n\nThe complete code is available on [GitHub](https://github.com/ammezie/graphql-authorization).","metaTitle":"Handling authorization in GraphQL","metaDescription":"This tutorial shows how to use GraphQL to manage authorization and user roles. You will build on a previous app to create an admin and a general user, and implement different permissions based on user role."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5tl7of1DKEgoi2oqIUWScS","type":"Entry","createdAt":"2018-11-06T11:45:11.893Z","updatedAt":"2018-11-06T11:45:11.893Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a two-player memory game with React Native","url":"memory-game-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNMemory","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4IiTE4WzzyQkoeAoaOqgcu","type":"Entry","createdAt":"2018-02-12T15:10:28.101Z","updatedAt":"2018-02-26T12:31:12.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Multiplayer Game","url":"multiplayer-game","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-11-06","description":"This tutorial will show you how to build a two-player memory game using React Native. Players sign in and are randomly assigned an opponent. The game then involves searching for image pairs. The game board and score update in realtime.","prerequisite":"You will need Node, Yarn, ngrok and Expo installed on your machine. Some knowledge of React Native development is required.","content":"In this tutorial, we’ll build a realtime memory game app with React Native and Pusher Channels. \n\n\n## Prerequisites\n\nBasic knowledge of React Native is required.\n\nTo easily test the app on multiple devices, we’ll be using [Expo](https://expo.io/) to create it. Be sure to install their [Android](https://play.google.com/store/apps/details?id=host.exp.exponent\u0026hl=en) or [iOS](https://itunes.apple.com/us/app/expo-client/id982107779?mt=8) client apps. Log in to your Expo account on both the CLI and client apps. [Create one](https://expo.io/signup) if you don’t have it already.\n\nThese are the package versions used in creating the app:\n\n\n- Node 8.3.0\n- Yarn 1.7.0\n- Expo CLI 2.1.2\n- Expo SDK 30.0.0\n- Pusher 4.3.1\n\nLastly, you also need a [Pusher](https://pusher.com/) and [ngrok](https://ngrok.com/) account. We’ll use it to create a Pusher app instance and expose the local Pusher server to the internet.\n\n\n## App overview\n\nWe’re going to build a two-player memory game app. \n\nWhen they open the app, users will be greeted by a login screen where they have to enter their username:\n\n![rn-memory-demo-1](//images.ctfassets.net/1es3ne0caaid/7C8jOMvjDU4Su66c6qi4M2/cb7b88b8cf276fb80527cb7df91b0013/rn-memory-demo-1.png)\n\nWhen a user logs in, the app’s server component will pick two random users and they’re the ones who will play.\n\nOnce an opponent is found, both users are automatically navigated to the Game screen. By default, there will be a lot of question mark icons, these represent the cards that haven’t been opened yet:\n\n![rn-memory-demo-2](//images.ctfassets.net/1es3ne0caaid/45tgSa5DUA868yMSIsGyA8/4a35bfedcacbdae5e9de64f1e55e0e33/rn-memory-demo-2.png)\n\nTo play the game, users have to click on each one to reveal its content. Users can reveal the content of up to two cards before both of them closes. Once a user has selected a pair, they will stay open for the rest of the game.\n\nHere’s what the screen looks like while the two players are playing the game:\n\n![rn-memory-demo-3](//images.ctfassets.net/1es3ne0caaid/4osnUhZMPKyas6CmUCk4Mu/6e4c9a7c4fc29a95f2dec9eeef225bc6/rn-memory-demo-3.png)\n\nWhen one of the players accumulates the maximum score (in this case it’s 12), both players are notified that one of them already won and the UI is reset:\n\n![rn-memory-demo-4](//images.ctfassets.net/1es3ne0caaid/3UbXAG3a6s06k808Q4yIiM/a65c3ec37bfe970e1b4bbb2b548d5148/rn-memory-demo-4.png)\n\nYou can view the app’s source code in this [GitHub repo](https://github.com/anchetaWern/RNMemory).\n\n\n## Create a Pusher app\n\nYou need to create a Pusher app instance so you can use Pusher’s services.\n\nOn your Pusher account dashboard, create a new Pusher app and check the **Enable client events** in the app settings. This allows us to emit events directly from the app:\n\n![rn-memory-enable-client-events](//images.ctfassets.net/1es3ne0caaid/6pEk3EZMOc2m0aCsKO2yE4/90724fb8ba79aa2ca0e6504a594a27e6/rn-memory-enable-client-events.png)\n\n## Clone the starter project\n\nSo that we can focus on the main parts of the app, clone the app’s GitHub repo and switch to the `starter` branch:\n\n```\n    git clone https://github.com/anchetaWern/RNMemory\n    cd RNMemory\n    git checkout starter\n```\n\nThe `starter` branch contains all the screens of the app (Login and Game screen), helper functions, and the UI components that we will be using. The app screens and the server component are where we will do most of the work.\n\nNext, install all the packages the app and the server depend on:\n\n```\n    yarn install\n    cd server\n    npm install\n```\n\n## Starter project tour\n\nBefore we proceed to actually code the app, let’s first take a quick look at the files and folders that are already available in the starter project:\n\n\n- `app/screens` - this is where the app’s screens are stored. We only have two screens: Login and Game. Only a starter template with minimum output is available in the starter branch.\n- `app/helpers` - this is where the app’s helper functions are stored. In this case, we only have the `shuffleArray.js` file. It’s used to arrange the items in the array in random order. This is very useful for changing the location of the cards that need to be guessed in the screen.\n- `app/data` - this is where hard-coded data is stored. In this case, we only have the `cards.js` file which contains the definition for the unique cards that the app uses. We’re using [Expo’s vector icons](https://expo.github.io/vector-icons/) so the file contains the `name` of the icon, the `src` (for example, FontAwesome), and the `color` we want to apply to it.\n- `app/components` - this is where the UI components of the app are stored. In this case, we only have the `Card.js` which renders the individual cards, and `Score.js` which renders the score and name of the user.\n- `server` - this is where we will add the code for the server component of the app. Currently, it only has the `.env` file which contains the placeholder for Pusher app credentials.\n\n\n## Build the app\n\nWe’re now ready to start building the app. I encourage you to start running the app even if the code is still not complete. This allows you to visualize what the code does as we’re adding it:\n\n```\n    expo start\n```\n\n### Login screen\n\nIn the Login screen, start by importing all the packages we need:\n\n``` javascript\n    // app/screens/Login.js\n    import React, { Component } from \"react\";\n    import {\n      View,\n      Text,\n      TextInput,\n      Button,\n      Alert,\n      ActivityIndicator\n    } from \"react-native\";\n    \n    import Pusher from \"pusher-js/react-native\";\n    \n    // next: initialize state\n```\n\nNext, initialize the state and the user’s channel:\n\n``` javascript\n    state = {\n      username: \"\",\n      is_loading: false\n    };\n    \n    constructor(props) {\n      super(props);\n      this.pusher = null; // variable for storing the Pusher reference\n      this.my_channel = null; // variable for storing the channel assigned to this user\n    }\n    \n    // next: add render function\n```\n\nInside the `render` function, return the UI for the Login screen. In this case, we’re only asking the user’s username. The login button is visible by default, but it gets hidden in place of the activity indicator when the user clicks on it. It stays that way until such time that an opponent is found:\n\n``` javascript\n    render() {\n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cView style={styles.topContent}\u003e\n            \u003cText style={styles.bigText}\u003eRNMemory\u003c/Text\u003e\n          \u003c/View\u003e\n    \n          \u003cView style={styles.mainContent}\u003e\n            \u003cText style={styles.label}\u003eUsername\u003c/Text\u003e\n            \u003cTextInput\n              style={styles.text_field}\n              onChangeText={username =\u003e {\n                this.setState({ username });\n              }}\n              value={this.state.username}\n              placeholder=\"Enter your username\"\n            /\u003e\n    \n            {!this.state.is_loading \u0026\u0026 (\n              \u003cButton onPress={this.login} title=\"Enter\" color=\"#0064e1\" /\u003e\n            )}\n    \n            {this.state.is_loading \u0026\u0026 (\n              \u003cActivityIndicator size=\"large\" color=\"#0000ff\" /\u003e\n            )}\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nWhen the login button is clicked, the `login` function gets executed. This will connect the user to Pusher and subscribe them in their own unique channel. Subscribing the user to their own channel allows us to:\n\n\n- Send data to them once an opponent is found. \n- While the game is ongoing, we use it to receive updates of the opponent’s score.\n- When the current user wins, we use it to send an update to the opponent that they lose.\n\nHere’s the code:\n\n``` javascript\n    login = () =\u003e {\n      let username = this.state.username;\n      \n      if (username) {\n        this.setState({\n          is_loading: true // hide's login button and shows activity indicator\n        });\n        \n        // connect to Pusher:\n        this.pusher = new Pusher(\"YOUR_PUSHER_API_KEY\", {\n          authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n          cluster: \"YOUR_PUSHER_APP_CLUSTER\",\n          encrypted: true,\n          auth: {\n            params: { username: username }\n          }\n        });\n      \n        this.my_channel = this.pusher.subscribe(`private-user-${username}`); // subscribe to user's unique channel\n        \n        // subscription error occurred\n        this.my_channel.bind(\"pusher:subscription_error\", status =\u003e {\n          Alert.alert('Error', 'Subscription error occurred. Please restart the app');\n        });\n        \n        // subscription to their own channel succeeded\n        this.my_channel.bind(\"pusher:subscription_succeeded\", data =\u003e {\n          console.log(\"subscription ok: \", data);\n      \n          // next: add code for listening when opponent is found    \n        });\n      }\n    };\n```\n\nDon’t forget to add your Pusher App ID when connecting to Pusher. As for the `authEndpoint`, we’ll add it later once we run ngrok.\n\nNext, add the code for listening for the `opponent-found` event. This event is emitted from the server once two random users are matched. Both players are notified when that happens, and it will automatically navigate the user to Game screen:\n\n``` javascript\n    this.my_channel.bind(\"opponent-found\", data =\u003e {\n      console.log(\"opponent found: \", data);\n      \n      // determine who the opponent is, player one or player two?\n      let opponent =\n        username == data.player_one ? data.player_two : data.player_one;\n    \n      Alert.alert(\"Opponent found!\", `${opponent} will take you on!`);\n    \n      this.setState({\n        is_loading: false,\n        username: \"\"\n      });\n      \n      // navigate to the game screen\n      this.props.navigation.navigate(\"Game\", {\n        pusher: this.pusher, // Pusher connection\n        username: username, // current user's username\n        opponent: opponent, // opponent's username\n        my_channel: this.my_channel // current user's channel\n      });\n    });\n```\n\n### Game screen\n\nWe now move on to the Game screen. Start by importing the packages, helpers, data, and components we need:\n\n``` javascript\n    // app/screens/Game.js\n    import React, { Component } from \"react\";\n    import { View, Text, Button, FlatList, Alert } from \"react-native\";\n    import { FontAwesome, Entypo } from \"@expo/vector-icons\"; // the icon sources that the cards will use\n    \n    import Score from \"../components/Score\";\n    import Card from \"../components/Card\";\n    \n    import shuffleArray from \"../helpers/shuffleArray\"; // function for re-ordering the cards to be guessed\n    \n    import cards_data from \"../data/cards\"; // the unique card config\n    \n    // next: initialize state\n```\n\nNext, initialize the state:\n\n``` javascript\n    state = {\n      current_selection: [], // for storing the currently selected pairs. This always resets back to zero once two are selected \n      selected_pairs: [], // the pairs that had already been opened \n      score: 0, // current user's score\n      opponent_score: 0 // opponent's score\n    };\n    \n    // next: add the constructor\n```\n\nNext, add the `constructor`. This is where we add initial values for the Pusher channels and generate the cards, which will be rendered on the screen:\n\n``` javascript\n    constructor(props) {\n      super(props);\n    \n      this.pusher = null; // Pusher connection\n      this.my_channel = null; // current user's Pusher channel\n      this.opponent_channel = null; // opponent's Pusher channel\n      this.username = null; // current user's username\n      this.opponent = null; // opponent's username\n    \n      let sources = {\n        fontawesome: FontAwesome,\n        entypo: Entypo\n      };\n    \n      let clone = JSON.parse(JSON.stringify(cards_data)); // create a copy of the cards data\n    \n      this.cards = cards_data.concat(clone); // append the copy to its original\n      \n      // add a unique ID to each of the card\n      this.cards.map(obj =\u003e {\n        let id = Math.random()\n          .toString(36)\n          .substring(7);\n        obj.id = id;\n        obj.src = sources[obj.src];\n        obj.is_open = false;\n      });\n    \n      this.cards = shuffleArray(this.cards); // arrange the cards in random order\n    }\n    \n    // next: add componentDidMount\n```\n\nOnce the component is mounted, we pick up the navigation params that were passed from the Login screen earlier. This allows us to listen for events emitted by the opponent, and emit events from our own channel:\n\n``` javascript\n    componentDidMount() {\n      const { navigation } = this.props;\n      \n      // get Pusher connection and user's channel from the navigation param\n      this.pusher = navigation.getParam(\"pusher\");\n      this.my_channel = navigation.getParam(\"my_channel\");\n    \n      this.username = navigation.getParam(\"username\");\n      this.opponent = navigation.getParam(\"opponent\");\n      \n      // update the state with the cards generated inside the constructor earlier\n      this.setState({\n        cards: this.cards\n      });\n    \n      if (this.opponent) {\n        // subscribe to the opponent's channel\n        this.opponent_channel = this.pusher.subscribe(\n          `private-user-${this.opponent}`\n        );\n        this.opponent_channel.bind(\"pusher:subscription_error\", status =\u003e {\n          Alert.alert('Subscription error', 'Please restart the app');\n        });\n    \n        this.opponent_channel.bind(\"pusher:subscription_succeeded\", data =\u003e {\n          console.log(\"opponent subscription ok: \", data);\n          \n          // opponent's score is incremented\n          this.opponent_channel.bind(\"client-opponent-scored\", data =\u003e {\n            this.setState({\n              opponent_score: data.score\n            });\n          });\n          \n          // opponent won the game\n          this.opponent_channel.bind(\"client-opponent-won\", data =\u003e {\n            Alert.alert(\"You lose\", `${data.username} won the game`);\n            this.resetCards(); // close all the cards and reset the score\n          });\n        });\n      }\n    }\n```\n\nIn the code above, we’re listening for the `client-opponent-scored` event and the `client-opponent-won` event. The former allows the user to get updated of their opponent’s score. This is emitted by their opponent every time they open a matching pair.  The latter allows the user to get updated when their opponent wins the game. When this happens, we call the `resetCards` method to reset the UI. This allows both users to restart the game if they want. \n\nNext, we render the Game screen. Here, we use a FlatList to render all the cards. Below it, we use the Score component to render the username and score for both users:\n\n``` javascript\n    render() {\n      let contents = this.state.cards;\n    \n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cView style={styles.body}\u003e\n            \u003cFlatList\n              data={contents}\n              renderItem={this.renderCard}\n              numColumns={4}\n              keyExtractor={item =\u003e item.id}\n              columnWrapperStyle={styles.flatlistRow}\n            /\u003e\n          \u003c/View\u003e\n          \u003cView style={styles.bottomContent}\u003e\n            \u003cScore score={this.state.score} username={this.username} /\u003e\n            \u003cScore score={this.state.opponent_score} username={this.opponent} /\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nThe `renderCard` function renders each individual card. This is where we use the Card component to render each card. We pass in the data which determines how the card will look like as props. The `clickCard` prop is where we pass the function to be executed when the card is clicked:\n\n``` javascript\n    renderCard = ({ item }) =\u003e {\n      return (\n        \u003cCard\n          key={item.id}\n          src={item.src}\n          name={item.name}\n          color={item.color}\n          is_open={item.is_open}\n          clickCard={this.clickCard.bind(this, item.id)}\n        /\u003e\n      );\n    };\n```\n\nHere’s the `clickCard` function. This is where we process the card opened by the user. We only process cards that aren’t already guessed by the user and is not already opened. If both conditions are `true`, we add the card to the array of currently selected cards (`selected_pairs`):\n\n``` javascript\n    clickCard = id =\u003e {\n      let selected_pairs = [...this.state.selected_pairs]; // array containing the card pairs that had already been guessed by the user\n      let current_selection = this.state.current_selection; // array containing the currently selected cards\n      let score = this.state.score; // the user's current score\n      \n      // get the index of the card clicked by the user\n      let index = this.state.cards.findIndex(card =\u003e {\n        return card.id == id;\n      });\n    \n      let cards = [...this.state.cards]; // an array containing the cards rendered on the screen\n      \n      if (\n        cards[index].is_open == false \u0026\u0026\n        selected_pairs.indexOf(cards[index].name) === -1\n      ) { // only process the cards that isn't currently open and is not a part of the one's that have already been guessed by the user\n        cards[index].is_open = true; // open the card\n        \n        // add the card in the current selection\n        current_selection.push({\n          index: index,\n          name: cards[index].name\n        });\n    \n        // next: add code for checking if there are already two cards opened        \n      }\n    };\n    \n    // next: add code for resetting cards\n```\n\nOnce the user has already picked a pair of cards, we check whether their names are the same. If it does, we increment the user’s score by one and notify the opponent by emitting an event in the current user’s channel. This works because we’ve set up the current user to listen for events emitted from their opponent’s channel. So anytime we trigger an event on our own channel, the opponent gets notified. Once the current user accumulates the maximum score, we reset the UI and notify the opponent. On the other hand, if the pair selected by the user isn’t the same, we update the state to close the cards:\n\n``` javascript\n    if (current_selection.length == 2) {\n      if (current_selection[0].name == current_selection[1].name) {\n        score += 1;\n        selected_pairs.push(cards[index].name);\n        \n        // notify the opponent that their opponent have scored\n        this.my_channel.trigger(\"client-opponent-scored\", {\n          username: this.username,\n          score: score\n        });\n        \n        // all pairs have been opened\n        if (score == 12) {\n          // notify the user that they won\n          score = 0;\n          Alert.alert(\"Awesome!\", \"You won the game\");\n          // notify the opponent that they lose\n          this.my_channel.trigger(\"client-opponent-won\", {\n            username: this.username\n          });\n    \n          this.resetCards(); // reset the UI\n        }\n      } else {\n        cards[current_selection[0].index].is_open = false; // close the first card from the selected pair\n        \n        // close the second card from the selected pair after half a second\n        setTimeout(() =\u003e {\n          cards[index].is_open = false;\n          this.setState({\n            cards: cards\n          });\n        }, 500);\n      }\n    \n      current_selection = []; // reset the current selection\n    }\n    \n    // update the state\n    this.setState({\n      score: score,\n      cards: cards,\n      current_selection: current_selection\n    });\n```\n\nLastly, the `resetCards` function is where we reset the UI so the users can resume the game if they want to:\n\n``` javascript\n    resetCards = () =\u003e {\n      // close all cards\n      let cards = this.cards.map(obj =\u003e {\n        obj.is_open = false;\n        return obj;\n      });\n      \n      // re-shuffle the cards\n      cards = shuffleArray(cards);\n    \n      // update the state to reset the UI\n      this.setState({\n        current_selection: [],\n        selected_pairs: [],\n        cards: cards,\n        score: 0,\n        opponent_score: 0\n      });\n    };\n```\n\n## Server component\n\nNow we’re ready to add the server component. This is where we add the code for authenticating users as well as matching them so they can start playing the game.\n\nCreate a `server.js`  file inside the `server` folder and start importing the packages we need and initialize them:\n\n``` javascript\n    var express = require(\"express\");\n    var bodyParser = require(\"body-parser\");\n    var Pusher = require(\"pusher\"); // for authenticating users and emitting events from this server\n    \n    var app = express(); // for setting up the server\n    app.use(bodyParser.json()); // for parsing request body into JSON\n    app.use(bodyParser.urlencoded({ extended: false })); // for parsing URL encoded data in the request body\n    \n    require(\"dotenv\").config(); // for getting the environment variables\n```\n\nNext, initialize the array of users. This is where we will store the usernames of the users who log in to the app:\n\n``` javascript\n    var users = [];\n```\n\nNext, initialize the Pusher connection using the credentials from the `.env` file:\n\n``` javascript\n    var pusher = new Pusher({\n      appId: process.env.APP_ID,\n      key: process.env.APP_KEY,\n      secret: process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER\n    });\n```\n\nIf you haven’t done so already, this is a good chance to update the `server/.env` file with your Pusher app instance credentials:\n\n``` javascript\n    APP_ID=YOUR_PUSHER_APP_ID\n    APP_KEY=YOUR_PUSHER_APP_KEY\n    APP_SECRET=YOUR_PUSHER_APP_SECRET\n    APP_CLUSTER=YOUR_PUSHER_APP_CLUSTER\n    PORT=3000\n```\n\nNext, add a route for checking if the server is running. Try to access this later at `http://localhost:3000` on your browser once the server is running:\n\n``` javascript\n    app.get(\"/\", function(req, res) {\n      res.send(\"all green...\");\n    });\n```\n\nNext, add the function for returning a random integer (from zero) that’s not greater than the `max` passed as an argument:\n\n``` javascript\n    function randomArrayIndex(max) {\n      return Math.floor(Math.random() * max);\n    }\n```\n\nNext, add the route which receives the Pusher authentication request. From the login code of the `app/screens/Login.js` file earlier, we added the `username` in `auth.params`. This is what we’re accessing in the request body. A username should be unique so we first check if it already exists before processing the request further. If it doesn’t yet exist, we push it to the `users` array. Once there are at least two users, we pick two random users from there. Those two users will be the ones who will partake in the game. We trigger the `opponent-found` event on each of the user’s channel. The event contains the username of the two users. This allowed us to determine which of the users is the opponent and which is the current user from the `app/screens/Game.js` file earlier. Once that’s done, we authenticate the two users and return the authentication token as the response:\n\n``` javascript\n    app.post(\"/pusher/auth\", function(req, res) {\n      var username = req.body.username; // get the username passed as an additional param\n    \n      if (users.indexOf(username) === -1) {\n        users.push(username);\n    \n        if (users.length \u003e= 2) {\n          var player_one_index = randomArrayIndex(users.length);\n          var player_one = users.splice(player_one_index, 1)[0]; // pick a random user and remove them from the array\n    \n          var player_two_index = randomArrayIndex(users.length);\n          var player_two = users.splice(player_two_index, 1)[0]; // pick a random user and remove them from the array\n    \n          // trigger a message to player one and player two on their own channels\n          pusher.trigger(\n            [\"private-user-\" + player_one, \"private-user-\" + player_two],\n            \"opponent-found\",\n            {\n              player_one: player_one,\n              player_two: player_two\n            }\n          );\n        }\n        \n        // authenticate the user\n        var socketId = req.body.socket_id;\n        var channel = req.body.channel_name;\n        var auth = pusher.authenticate(socketId, channel);\n      \n        res.send(auth); // return the auth token\n      } else {\n        res.status(400);\n      }\n    });\n```\n\nLastly, serve it on the port you’ve specified in your `server/.env` file:\n\n``` javascript\n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\n## Run the app\n\nAt this point, we should be ready to run the server and expose it to the internet. \n\nExecute the following inside the `server` directory to run the server:\n\n```\n    node server.js\n```\n\nNext, navigate to where you downloaded the ngrok executable file and execute the following:\n\n```\n    ./ngrok http 3000\n```\n\nTry if the server is running correctly by accessing the https URL returned by ngrok on your browser. If it says “all green…”, the next step is to add the ngrok URL to your `app/screens/Login.js` file:\n\n``` javascript\n    this.pusher = new Pusher(\"YOUR PUSHER APP ID\", {\n      authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n      cluster: \"YOUR PUSHER APP CLUSTER\",\n      encrypted: true,\n      auth: {\n        params: { username: username }\n      }\n    });\n```\n\nOnce that’s done, the app should work fully:\n\n```\n    expo start\n```\n\n## Conclusion\n\nThat’s it! In this tutorial, we created a two-player memory game with React Native and Pusher. Along the way, you learned how to use Pusher in React Native. Specifically, you learned how to emit events from both the server and the client side.\n\nYou can view the app’s source code in this [GitHub repo](https://github.com/anchetaWern/RNMemory).","metaTitle":"Create a two-player memory game with React Native","metaDescription":"This tutorial will show you how to build a two-player memory game using React Native. Players sign in and are randomly assigned an opponent. The game then involves searching for image pairs. The game board and score update in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4GZ8FH497asQeyySSc4KIS","type":"Entry","createdAt":"2018-11-05T15:10:29.631Z","updatedAt":"2018-11-05T15:10:46.675Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with Vapor - Part 2: Deploying to Vapor Cloud","url":"getting-started-vapor-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"9VkyxkESQ0IQmyKy8wq6C","type":"Entry","createdAt":"2018-09-18T18:40:03.858Z","updatedAt":"2018-09-18T18:40:03.858Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christopher Batin","url":"christopher-batin","email":"chris@batin.me","twitter":"https://twitter.com/cjbatin","github":"https://github.com/cjbatin/","guestWriter":true}}],"projectRepo":"https://github.com/cjbatin/Getting-Started-With-Vapor","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2018-11-05","description":"This two part series introduces Vapor, a server-side Swift framework. In part two, take the API we built in part one, and deploy it to Vapor Cloud.","prerequisite":"You should have completed part one of this series. You will also need a GitHub account.","content":"## Introduction\n\nIn this second part of this tutorial series, we’re going to learn how to deploy to the Vapor Cloud. This means we can get deploy the code that we can access from anywhere in the world not just our local machine.\n\nIn the [first part of this tutorial](https://pusher.com/tutorials/getting-started-vapor-part-one), we built an API that could return random names from a list and accept data.\n\n## Prerequisites\n\nYou will need the following to complete this tutorial.\n\n- Completed [Part One](https://pusher.com/tutorials/getting-started-vapor-part-one) of this tutorial.\n- Vapor toolbox installed - Should be done if you completed Part One.\n- Source code from part one. Or another Vapor project.\n- A GitHub account.\n\n\n## Create a Vapor Cloud account\n\nVapor Cloud has a generous free tier and is easy to get started with. As well as scaling up your hosting you can add databases and caching in just a few simple clicks. More info on pricing can be found [here](https://vapor.cloud/pricing.html).\n\nVisit the signup page and create an account [here](https://dashboard.vapor.cloud/signup).\n\n![vapor-cloud-signup](//images.ctfassets.net/1es3ne0caaid/3UpLu1PNOoussAIYCKC6K8/73270261cf973cac3634783d8a01d005/vapor-cloud-signup.png)\n\nOnce you are on the dashboard create a project and assign it to this organization. Name it Vapor-Hello-World. You do this by selecting the projects tab from the navigation menu and pressing the plus button.\n\n\n## Uploading to Vapor Cloud\n\nGo to the working directory of your Vapor project in terminal and run the following command and enter your Vapor Cloud credentials. \n\n```\n    vapor cloud login\n```\n\nNow you are logged in to Vapor Cloud you can run the following command to being the deployment process.\n\n```\n    vapor cloud deploy\n```\n\nThis will begin the deployment process. If you haven’t created a git repo for this project yet you will be asked if you would like to. If you already have a git repo added you can ignore the next step. However you need to make sure your repo is **public**.\n\n### Add a git repo\n\nEnter **y** and press **Enter**. \nThis will open GitHub. From here you need to create a new public repository. Copy the HTTPS or SSH URL and paste it into terminal and into terminal and press **Enter**. \n\n### Continue with deployment\n\nWhen asked if you would like to create an application. \nEnter **y** and press **Enter.**\nAssign it to the project we created earlier.\n\nYou will now be asked to give the application a name. Previously we created a project, a project can have multiple applications such as:\n\n- Vapor-Hello-World-API-IOS\n- Vapor-Hello-World-API-Android\n- Vapor-Hello-World-WEB\n\nName ours `Vapor-Hello-World-API-IOS`.\n \nNext you will be asked to name a slug. Slugs are unique identifiers like bundle identifiers in iOS. I will be using `push-vapor-hello-world-api-ios`. You will need to use a different one. You will then be asked to confirm if the above information is correct. Enter **y** and press **Enter.**\n\n### Adding hosting\n\nYou’ll next be asked if you want to add hosting, approve this by entering **y** and pressing **Enter**. Followed by this it will detect your git repo, select the URL and confirm the information in the usual manner. \n\nYou’ll next be asked if you want to set up an environment. Confirm that you wish to do this. Applications can have many environments, such as a testing or staging environment as well as a production environment. We’ll name this one `production`. You’ll then be asked which git branch you want to build this against, enter `master` (assuming this is your production branch). Next you’ll be asked what tier of hosting you would like, select the **free tier** for this tutorial and confirm the information is correct.\n\nWe don’t want to add a database so enter **n** and press **Enter**. Finally we select how we want to build the application. There are three different types of builds:\n\n- **Incremental -** compiles the code using existing dependencies, this is the fastest build type.\n- **Update** **-** compiles the code and updates the dependencies as your manifest allows you to.\n- **Clean -** this builds the project from scratch.\n\nWe want to run the **clean** build so **3** and press **Enter**. Then confirm the above information is correct. Vapor cloud will now deploy your project from the project git repo and branch you selected.\n\nIt will become available at: `http://\u003cyour-slug\u003e.vapor.cloud`.\nYou can also visit `http://\u003cyour-slug\u003e.vapor.cloud/api/name` or post data using postman to this URL.\n\n\n## Conclusion\n\nWe’ve learnt how to deploy our application onto Vapor Cloud using the free tier and the Vapor toolbox.","metaTitle":"Getting started with Vapor - Part 2","metaDescription":"This two part series introduces Vapor, a server-side Swift framework. In part two, take the API we built in part one, and deploy it to Vapor Cloud."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"49TcykIZ7iIAOoauokqYge","type":"Entry","createdAt":"2018-11-05T15:08:52.007Z","updatedAt":"2018-11-05T15:12:46.051Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with Vapor - Part 1: Installation and creating a basic API","url":"getting-started-vapor-part-one","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"9VkyxkESQ0IQmyKy8wq6C","type":"Entry","createdAt":"2018-09-18T18:40:03.858Z","updatedAt":"2018-09-18T18:40:03.858Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christopher Batin","url":"christopher-batin","email":"chris@batin.me","twitter":"https://twitter.com/cjbatin","github":"https://github.com/cjbatin/","guestWriter":true}}],"projectRepo":"https://github.com/cjbatin/Getting-Started-With-Vapor","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2018-11-02","description":"This two-part series introduces Vapor, a server-side Swift framework. In part one, install Vapor and create an API that can handle basic requests.","prerequisite":"You will need Xcode 9.4+ and Swift 4.1+ installed on your machine, as well as a REST client such as Postman.","content":"## Introduction\n\n\nIn this part of the tutorial, we learn how to install Vapor and handle basic requests. \n\nIn the [second part](https://pusher.com/tutorials/getting-started-vapor-part-2) of this tutorial, we will also be looking at Vapor Cloud, as somewhere to easily deploy and manage your web applications.\n\nApple open sourced Swift in 2015, it didn’t take long for server based frameworks to appear. Since then Vapor has become one of the most popular frameworks with a strong community behind it. \n\nWhy is a server side Swift framework important though? It allows iOS developers to build both the application and backend server, without having to rely on a BAAS (backend as a service) such as Firebase without having to learn a new language.\n\n\n## Prerequisites\n\n\n  This tutorial uses the following:\n  - Xcode 9.4 or later - [Download Here](https://developer.apple.com/download/).\n  - Swift 4.1 - Including command line. This is bundled with Xcode 9.4+ or you can download it [here](https://swift.org/download/).\n  - MacOS - Vapor can be run on Linux but this tutorial will use MacOS. You can attempt to follow this tutorial on Linux still and use a text editor where this tutorial uses Xcode.\n  - REST client such as [Postman](https://www.getpostman.com/).\n\nSome experience using Xcode and Swift is preferred.\n\n\n## Installation\n\nFirst let’s check that your system is capable of using Vapor by running the following command.\n\n```\n    // MacOS\n    eval \"$(curl -sL check.vapor.sh)\"\n    // Linux\n    eval \"$(curl -sL https://apt.vapor.sh)\"\n```\n\n![vapor-check-system](//images.ctfassets.net/1es3ne0caaid/bLQ9AGRIl2CEuaI0ouGYe/c68189d103ab125a548e1da6855c360d/vapor-check-system.png)\n\nIf you receive any errors make sure you have Xcode 9.4 installed on MacOS and Swift 4.1 on Linux. \n\nTo install Vapor run the following commands.\n\n```\n    // MacOS\n    brew install vapor/tap/vapor\n    // Linux\n    sudo apt-get install vapor -y\n```\n\n## Create your first project\n\nLet’s create, build and run your first project. Run the following command in terminal:\n\n```\n    vapor new HelloWorld\n```\n\nThis will create a new project by cloning the Vapor template.\n\n![vapor-new-project](//images.ctfassets.net/1es3ne0caaid/6RevQ7p7XiQYqo26QqawWi/0383200342062cb0c6335c0d59d126b3/vapor-new-project.png)\n\nChange directory to the project you just created. \n\n```\n    cd HelloWorld\n```\n\nLet’s build and run your application. Run these two commands:\n\n```\n    vapor build\n    vapor run\n```\n\nThe Vapor build command may take some time the first time you run this command. Once the run command is complete you can visit http://localhost:8080/hello.  Once done close down the server using Control-C in the terminal.\n\n\n## Create your first route\n\nLet’s open the Xcode project, note this is the preferred way of opening Xcode as there is no Xcode project inside the directory. Run the following command in terminal:\n\n```\n    vapor xcode -y\n```\n\nThis will open an Xcode project for us, before we continue change the scheme to be the Run Scheme.\n\n![vapor-run-scheme](//images.ctfassets.net/1es3ne0caaid/15VpQD5vLOMegQgUYgIYGk/18b52e2b97bf73ee24dd7e7f15f20fd9/vapor-run-scheme.png)\n\nOpen `routes.swift` and delete the contents. Replace it with the following code.\n\n``` swift\n    // Sources/App/routes.swift\n    import Vapor\n    \n    public func routes(_ router: Router) throws {\n    \n        router.get(\"api\", \"name\") { req -\u003e String in\n            let namesArray = [\"Chris\", \"Sarah\", \"Bob\", \"Jess\"]\n            let number = getRandomNumber(0, 3)\n            return \"Hello, \\(namesArray[number])\"\n        }\n    }\n    \n    func getRandomNumber(_ min: Int, _ max: Int) -\u003e Int {\n        #if os(Linux)\n        return Int(random() % max) + min\n        #else\n        return Int(arc4random_uniform(UInt32(max)) + UInt32(min))\n        #endif\n    }\n```\n\nThis creates our first GET route at the following path: http://localhost:8080/api/name. We define the route’s path and tell the request what we expect to return from it. Make sure you build and run your project again by running the build and run command or if you are using Xcode press the play button.\n\nNotice how we have a function that we have a macro that determines if we are on Linux or not. This is because `arc4random_uniform` is not available on Linux. Swift 4.2 will add a random function directly on Int but that is not available in Xcode 9.4. This function will allow us to deploy to Vapor Cloud in part two as that is using Linux not MacOS. \n\n\n## Passing parameters to your route\n\nIn the previous example we randomly picked a name from an array, we may however want to pass some data to the server as a parameter. Below the route you created previously, add the following function:\n\n``` swift\n    router.get(\"api\", \"first_name\", String.parameter, \"last_name\", String.parameter) { req -\u003e String in\n      let firstName = try req.parameters.next(String.self)\n      let lastName = try req.parameters.next(String.self)\n      return \"Your name is \\(firstName) \\(lastName)\"\n    }\n```\n\nThis creates a new route that you can pass parameters into the path with. `String.parameter` specifies that the parameter can be any string that is passed into the request. You can then extract this from the request directly and assign them to variables.\n\n\n## Accepting data via POST\n\nVapor makes decoding JSON via post extremely easy thanks to Codable. We are going to use Postman to pass some data via a POST request. First add the following code below the two routes you have already created.\n\n``` swift\n    router.post(Person.self, at: \"api/name\") { req, data -\u003e String in\n        return \"Hello \\(data.firstName) \\(data.lastName ?? \"\")\"\n    }\n```\n\nThis creates a route that accepts a post request at http://localhost:8080/api/name. It takes in a Person object that we will now define. Place the following code below the routes function. \n\n``` swift\n    struct Person: Content {\n        let firstName: String\n        let lastName: String?\n    }\n```\n\nNotice how the struct conforms to `Content`, this is how Vapor decodes the data. It is a wrapper around Codable. See [Swift 4 decoding JSON using Codable](https://blog.pusher.com/swift-4-decoding-json-codable/) for more details on this. **Build and run** the server, and open Postman. \n\n- Set the request to be POST.\n- Set the URL http://localhost:8080/api/name.\n- Select the **Body** tab.\n- Select **form-data** as the type.\n- Create two keys `firstName` and `lastName`. Supply some values to each key.\n- Press **Send**.\n\n![vapor-postman-test](//images.ctfassets.net/1es3ne0caaid/4Cpltg220wOGiCayYGKcwg/10149d75387d7652bdea0ed83af3af8a/vapor-postman-test.png)\n\nNotice the response, in the body. You can also remove the `lastName` parameter from the parameters. This is because we set it as optional within the the struct above. We can also return JSON from the API. Simply change the above function to return the struct data instead.\n\n``` swift\n    router.post(Person.self, at: \"api/name\") { req, data -\u003e Person in\n        return data\n    }\n```\n\n\n## Conclusion\n\nWe’ve learnt why we might want to use Vapor for a backend service. We’ve also learnt how to install Vapor and create our first GET and POST routes. \n\nIn the [second part](https://pusher.com/tutorials/getting-started-vapor-part-2) of this tutorial, we’ll learn how to deploy our project to Vapor Cloud.\n\nThe source code for this project can be found [here.](https://github.com/cjbatin/Getting-Started-With-Vapor)","metaTitle":"Getting started with Vapor - Part 1","metaDescription":"This two part series introduces Vapor, a server-side Swift framework. In part one, install Vapor and create an API that can handle basic requests."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"Awcv4NDb32uI0syeOSAcS","type":"Entry","createdAt":"2018-11-22T15:39:12.991Z","updatedAt":"2018-11-22T16:08:47.699Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Solving microservice problems using Channels","url":"microservice-problems-channels","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4DQ1Z5QBGoiG2Ko86weiO2","type":"Entry","createdAt":"2018-10-31T14:13:52.636Z","updatedAt":"2018-10-31T14:13:52.636Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Fernando Doglio","url":"fernando-doglio","email":"deleteman@gmail.com","twitter":"https://www.twitter.com/deleteman123","github":"https://github.com/deleteman","guestWriter":true}}],"projectRepo":"https://gist.github.com/deleteman/1d8374579475ee08b0f71cae1ddbaf68","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-10-31","description":"This article examines some common problems with microservice architecture, and evaluates several solutions, before looking in detail at how to improve your architecture using Pusher Channels. ","prerequisite":"Some familiarity with software architecture will be helpful.","content":"Microservices are awesome, I love microservices, so much so I’ve written a [book about them](https://www.apress.com/la/book/9781484237144), they’re great at providing flexibility to an otherwise stiff architecture (one that would have a big part in “2001: A Space Odyssey” if you know what I mean). \n\nThat being said, microservices are also challenging,  they’re challenging at not being magical implementations that simply work out of the box for all situations. They’re challenging at making you think when implementing your own microservices-based architecture to make sure, you have the required support structure for them to do their job as expected. In this article I’m going to share some tips and tricks to help you get there and make the most out of your architecture.\n\n\n## Common problems with microservices\n\nLike with any other architectural pattern, Microservices aren’t the silver bullet to solve all problems. In fact, there are two particular challenges that they can’t solve by themselves (at least not without a massive amount of extra work done by the development team) and they are: \n\n- Handling a variable increase in traffic\n- Being able to communicate downtime to other services (especially relevant when other services depend on them).\n\nLet’s analyze the classical example of a microservices-based architecture:\n\n![microservices-architecture-diagram](//images.ctfassets.net/1es3ne0caaid/2MqWIz4c7e0W48U4gCe2uK/d1a01298e2bfc4a5ca904c59ace2a344/microservices-architecture-diagram.png)\n\nNothing really strange there, just a group of microservices working together to serve the needs of the web-app client application. And at first glance, there is nothing wrong with that design, everything seems to be correctly planned until, of course, your traffic increases, and now suddenly your search service starts receiving 300% more requests than before. You have a couple of options:\n\n\n- You can vertically scale your search service server, increasing its processing power, or its memory, to name a few examples. That’ll probably get you out of the woods for the time being.\n- You can horizontally scale your service. You already have your load balancer in place, so it should be relatively effortless. As long as your API is stateless, you can simply duplicate and evenly distribute the load between all servers. There, problem solved!\n\nYou can like one solution more than the other, but the reality in both cases is that you solved an immediate problem, but potentially caused a bunch of others you didn’t even consider.\nLook at the following image, which represents the aforementioned horizontal scaling solution:\n\n![horizontal-scaling-diagram](//images.ctfassets.net/1es3ne0caaid/1YKPieQRBqauQ44Y8S0wcu/40ea2c580d5087971f2a91afa9ea827f/horizontal-scaling-diagram.png)\n \nHere is the real problem and the reason for this article: you removed your bottleneck but without noticing you overloaded the next stage in the data flow, the authorization service, your database and your Elastic instance are now getting 300% more requests as well, are they ready for that kind of load?\n\nMaybe you even killed the authorization service, due to the increase in traffic, so now everything that depends on it, will also fail, because there is no way to notify them that something is wrong.\n\nAnd for both cases, a possible solution would be to add a buffer-like structure between services, something like that should allow you to:\n\n- Hold  messages between services for a time, for the cases when services go down and there is no one to consume them.\n- Allow the receiving end of messages to consume them as fast as they can, without being overwhelmed. \n- Use this channel as a heart beat channel as well, allowing services to send notifications of activity to other, interested, services.\n\nSo, with that being said, let’s look at how [Channels](https://pusher.com/channels) can help us solve these problems.\n\n## Channels to the rescue\n\nPusher’s Channels is an amazing infrastructure as a service product, which will provide the required pub/sub mechanics we’ll need for our buffer-like structure. The best part of this, is that since it’s a managed service, you don’t need to worry about the intricacies of scaling it when needed, making sure it’s always up and not losing messages, and so on.\n\nFor this particular use case, we will use some of the features of Channels, but just to get an idea of everything you can do with it, here are some of its most impressive capabilities:\n\n\n- **Pub/sub messaging**. It provides a very easy-to-use and flexible event based API to subscribe, send and react to messages received. \n- **Access control / authentication.** You also have access to private channels, which require authentication and authorization to access them. \n- **Live users lists.** Building on top of private channels, you can get the list of subscribed users, simplifying your job when it comes to creating features such as “Who’s online” lists.\n- **Integration.** You can integrate your data flow with external tools such as Slack and Datadog in order to provide metrics or notifications to your developers.\n\nAnother very positive aspect about Pusher’s Channels, is that they provide libraries for several languages such as PHP, Node, Ruby, Java and even  Android and iOS (with Swift and Objective-C)!\nFor our particular examples, as you might've guessed from the title of this article, I’m going to be using Node, but you can extrapolate to whatever language you feel like using from their documentation.\nWe’re going to look at both problems and see a little bit of code showing  a possible implementation of the solutions. Feel free to use the code on your own projects if you think it’ll help!\n\n### Increased traffic\n\nLet’s first take a look at this scenario in order to avoid overloading your own services by simply removing a bottleneck. To simplify the case and make sure it’s clear enough, let’s lower the number of microservices involved to just three, you can see below how the architecture would change from one scenario to the other.\n\n![buffer-microservices-diagram](//images.ctfassets.net/1es3ne0caaid/7DlYJoX3FYSsCIWIqoeYaO/edfe5c60841489952ab9930b3dfcbd3b/buffer-microservices-diagram.png)\n\nThe change is quite straightforward, but the benefits are substantial as already mentioned. The best part? All you need to add to your existing code is the lines required to publish and subscribe to channels, that’s it.\nLet’s take a look at that now:\n\n\n``` javascript    \n    const PusherServer = require('pusher');\n    const PusherClient = require('pusher-js');\n    const express = require('express');\n    const router = express.Router();\n    const config = require(\"config\");\n    \n    const pusherServer = new PusherServer(config.get('pusher.config'));\n    const pusherClient = new PusherClient(config.get('pusher.config.key'), {\n            cluster: config.get('pusher.config.cluster')\n    })\n    \n    /* POST main api for a processing job. */\n    router.post('/', function(req, res, next) {\n    \n      //code require to receive the message, parse it \n      //and maybe validate the data?\n      //then communicate with the processing service through Channels               \n       pusherServer.trigger('main-channel', 'message', {\n         \"message\": //... information for other services\n       });\n    \n        res.send(/* the response */);\n    });\n    \n    function messageHandler(data) {\n            ///your logic to handle new messsages\n    }\n    \n    module.exports = function  () {\n            const channel = pusherClient.subscribe('main-channel')        \n            channel.bind('message', messageHandler)\n            return router;\n    }\n```\n\nThe above code is not functional, basically because you need to fill in the part for your own microservice, but thinking about the example we’re trying to provide, here is the gist of it:\n\n\n- As you’ve probably figured out by reading it, it’s an example of an endpoint in an Express-based application.\n- Endpoints in this example add a few extra lines to post messages into  the “main-channel”. This is meant to communicate whatever information is required to other services. Keeping up with the diagram from above, it would be a message to the processing service. This is done using the server library (installed with  `npm install pusher`)\n- Any received message will be handled by the `messageHandler` function, which should have some sort of logic to make sure only the relevant messages are processed and the rest are ignored. In order to listen for new messages, you’ll need Pusher’s client library, which you can install with  `npm install pusher-js`. \n\nThis code sets up a very simple, yet powerful, message-based communication between services, essentially overwriting whatever REST interface you could’ve configure with Express. In essence, your service would end up having two interfaces, REST for client applications and Channels-based for other, internal microservices.\n\nAs an added note, the config object passed to the `Pusher` constructor can contain the following items (among others, you should check the [docs](https://pusher.com/docs/client_api_guide/client_connect) for more details):\n\n- **appId:**  the ID of the application you’ve created in Pusher’s website. In order to use their API, you’ll have to create a new app. This will grant you access to stats for your application, amongst other great things.\n- **key:** key provided to you once you’ve signed up on Pusher’s site.\n- **secret:** just like with the key, this secret code is provided to you once you’ve signed up.\n- **cluster:** the identifier of the cluster your application was create on, by default it’ll be “mt1”.\n\nAs you can see, the API is very straightforward and easy to use. There is more to it, of course, and you can read all about it on the official documentation, but the above example should be more than enough to get you started in the right direction.\n\n### Uptime notifications\n\nThe logic for solving this problem with Channels would be something similar to the previous one in the sense that we’ll make use of the pub/sub mechanics to broadcast specific messages. These messages, known as heart beats will be published periodically into a specific channel. \n\nWe’ll have one “heart beats” channel for each service. This should provide a clean way of linking services with each other. Basically if you subscribe a service to a heart beats channel, you’re linking that service to the one publishing into that channel.\n\nWe will, however, have to handle the reaction to the lack of heart beats locally though, since that behavior will depend on each service’s internal logic.\n\n``` javascript\n    const PusherServer = require('pusher')\n    const PusherClient = require(\"pusher-js\")\n    const config = require(\"config\")\n    \n    \n    const pusherServer = new PusherServer(config.get('pusher.config'));\n    const pusherClient = new PusherClient(config.get('pusher.config.key'), {\n            cluster: config.get('pusher.config.cluster')\n    })\n    \n    const HB_TIMEOUT = 10100;\n    let TIMEOUTS = {}\n    \n    // your routes definition goes here...\n    \n    function sendHeartBeat(modId) {\n            console.log(\"Sending hearbeat: \", Date.now())\n            pusherServer.trigger(modId + '-hb', 'heartbeat', {\n                    \"message\": {\n                            \"timestamp\": Date.now(),\n                            \"payload\": \"\"///other data goes here\n                    }\n            }, null, (err, req, resp) =\u003e {\n                    if(err) console.log(\"Error:: \", err)\n            })\n    }\n    \n    function handleHearbeat(serviceName) {\n    \n            return function () {\n                    ///your logic to handle hearbeats\n    \n                    clearTimeout(TIMEOUTS[serviceName]) //reset the timeout in case we actually get a hearbeat before it's up\n                    console.log(\"Hearbeat received from Module '\" + serviceName + \"' at: \", Date.now())\n                    TIMEOUTS[serviceName] = setTimeout(heartBeatNotReceived, HB_TIMEOUT, serviceName)\n            }\n    \n    }\n    \n    function heartBeatNotReceived(serviceName) {\n            console.log(\"WARNING: Module ='\" + serviceName + \"'= has not sent a heartbeat recently...\")\n    }\n    \n    \n    module.exports = function(modId, linkedServices) {\n    \n    \n            linkedServices.forEach((serviceName) =\u003e {\n                    let channel = pusherClient.subscribe(serviceName + '-hb')\n                    channel.bind('heartbeat', handleHearbeat(serviceName))\n            })\n            \n            setInterval(sendHeartBeat, 10000, modId); //send one every 10 seconds\n    \n    }\n```\n\nThis is a very simple example of how you can leverage Pusher’s Channels to extend your own modules or microservices and have them talk to each other. \nYou can simply require this file (provided you have the required modules listed at the beginning) and do something like:\n\n``` javascript\n    const serviceLinker = require(\"/path/to/file.js\")\n    \n    serviceLinker('myServiceName', [/* list of services this one depends on...*/])\n```\n\nAnd that’s it, now your service will start sending heartbeats automatically and will also be able to react to heartbeats sent by others (and the lack of them as well).\n\nIf you’re feeling a little crazy, you could even extend this concept, and use the same channel but different event types to distribute other type of application-relevant information amongst services, such as metrics, like number of requests per second, or free memory and disk space.\n\n\n## Conclusion\n\nHopefully by this point, I’ve been able to convince you that having a buffer-like structure as part of your microservices-based architecture can be beneficial in several ways. And the best part, is that adding it into an existing setup is not that complicated!\n\nThat’s it! Thanks for reading, remember you can read the code from this article[here](https://gist.github.com/deleteman/1d8374579475ee08b0f71cae1ddbaf68). See you on the next one!","metaTitle":"Solving microservice problems using Channels","metaDescription":"This article examines some common problems with microservice architecture, and evaluates several solutions, before looking in detail at how to improve your architecture using Pusher Channels. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mPaFoiQpHMCA8a4ymMwKY","type":"Entry","createdAt":"2018-10-29T05:31:39.265Z","updatedAt":"2018-10-29T05:31:39.265Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a Chrome extension to track cryptocurrency prices - Part 2: Allowing user interaction","url":"chrome-extension-cryptocurrency-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1N3HBqLEugWyeKsWEW0iYg","type":"Entry","createdAt":"2018-08-06T18:12:32.345Z","updatedAt":"2018-08-06T18:12:32.345Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Fisayo Afolayan","url":"fisayo-afolayan","email":"afolayanfisayo@gmail.com","twitter":"https://twitter.com/fisayoafolayan","github":"https://github.com/fisayoafolayan","guestWriter":true}}],"projectRepo":"https://github.com/fisayoafolayan/google-chrome-plugin-crypto","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kOTcNAC12gwWEyE6MimMY","type":"Entry","createdAt":"2018-02-12T15:08:28.581Z","updatedAt":"2018-02-26T12:31:12.766Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Trading","url":"trading","type":"use case"}}],"reviewDate":"2018-10-27","description":"This two part series will guide you through building, deploying and extending a Chrome extension. The extension displays cryptocurrency prices in realtime. In part two, allow users to interact with the extension and save their preferences.","prerequisite":"You will need Node 4+ and the Heroku CLI installed on your machine. Knowledge of JavaScript will be helpful.","content":"If you made it to this part of the guide, then by the end of this guide, you will realize building Chrome extensions is like building a website. Emphasis on **“Like”** 😃 .\n\nIn the [last part of the tutorial](https://pusher.com/tutorials/chrome-extension-cryptocurrency-part-1), we got into Chrome extensions and built our first extension. We connected it to our server using Pusher to get updates in realtime.\n\nFor this tutorial, we will allow users to customize their experience a little. \n\n## Prerequisites\n1. You have read the [first part](https://pusher.com/tutorials/chrome-extension-cryptocurrency-part-1) of this guide\n\n## New tools we will add\n- [Sqlite](https://www.sqlite.org/)\n- [Bcrypt](https://www.npmjs.com/package/bcrypt)\n- [Express](https://expressjs.com/)\n- [Body-parser](https://www.npmjs.com/package/body-parser)\n- [Jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken)\n\n## Creating our server with Express instead of HTTPS\n\nAh… yes. This is an important update to explain so you do not get confused. If you are familiar with Node.js, you would realize this is a no-brainer. If we were to use HTTPS to create our server, we would have to designed middlewares (maybe?) to check for the following:\n\n\n- Type of request we are receiving [GET, POST, PUT …]\n- The URI of the request\n- The body of the request\n- Create self-signed SSL certs for the HTTPS server to work\n- A few more other things we might not know off the top of our head until we proceed to use it\n\nWith Express and body-parser you will be handling requests like “Please, can I get a real challenge?” 💪. We still use HTTPS to make the request to CryptoCompare’s API because as of this writing, they do not support requests over HTTP.\n\nEnough talking, open your `index.js` file. To reduce confusions, we will assume that this file is empty. So feel free to wipe everything in it and start afresh.\n\n### Importing all we will need\n\n``` javascript\n    // index.js\n    \n    \"use strict\";\n    const cryptos   = require('./cryptos.json')\n    const jwt       = require('jsonwebtoken')\n    const bodyParser= require('body-parser')\n    const helpers   = require('./helpers')\n    const config    = require('./config')\n    const express   = require('express')\n    const bcrypt    = require('bcrypt')\n    const DB        = require('./db')\n```\n\nWe have a few additions here that we need to install and define. Let us start with what we need to install. Run the following command on your console\n\n```\n    $ npm install --save express body-parser jsonwebtoken sqlite3 bcrypt\n```\n\nNow, create the following files:\n\n```\n    $ touch helpers.js\n    $ touch db.js\n```\n\nWe shall define their contents soon.\n\n### Initial definitions of what we will need\n\nBack to `index.js` file, add the following definitions:\n\n``` javascript\n    //index.js\n    [...]\n    const db     = new DB(\"sqlitedb\")\n    const app    = express()\n    const router = express.Router()\n    \n    router.use(bodyParser.urlencoded({ extended: false }));\n    router.use(bodyParser.json());\n```\n\nAt this stage, we have imported our database manager and passed the name we want it to create the database with. Then we created an instance of `express` and `express.Router()` to allow us to create a server and define routes respectively.\n\nWe also informed our  `express.Router()` handler to use `body-parser` definitions, this will help us to  read data sent from the client either as `json` or regular form submission.\n\n### More initial definitions\n\n``` javascript\n    // index.js\n    \n    [...]\n    const {allowCrossDomain,fetchCoins,handleResponse,handleFavoriteResponse,generateUrl} = helpers\n    app.use(allowCrossDomain)\n    \n    const defaultUrl= generateUrl(cryptos.coins,cryptos.currencies)\n    fetchCoins(defaultUrl,handleResponse)\n    \n    // We will define our routes here\n    \n    app.use(router)\n    app.listen(process.env.PORT || 4003)\n```\n\nWe imported helper functions to help us process our requests and responses to users. We will create them shortly. The `allowCrossDomain` middleware will allow our Express application receive a request from a domain other than itself. For instance, if we run our app on `localhost:4000`, we can not make a call to it from `localhost:4001` without a pre-flight issue (CORS).\n\nThe `fetchCoins()` method fetches the coins and sends them to Pusher which will broadcast to all our users who are listening on that channel.\n\nFinally, we set our application to listen on either a dynamically assigned port or 4003. We are set to go at this point.\n\n## Setting up our authentication routes\n\nStill in the `index.js` file, let us start with the route to handle authentication:\n\n``` javascript\n    //index.js\n    \n    [...]\n    // We will define our routes here\n    \n    router.post('/auth', function(req, res) {\n      db.selectByEmail(req.body.email, (err,user) =\u003e {\n        if (err) return res.status(500).send(JSON.stringify({message : \"There was a problem getting user\"}))\n        if(user) {\n            if(!bcrypt.compareSync(req.body.password, user.user_pass)) {\n                return res.status(400).send(JSON.stringify({message : \"The email or password incorrect\"}))\n            }\n            let token = jwt.sign({ id: user.id }, config.secret, {\n                expiresIn: 86400 // expires in 24 hours\n            })\n            res.status(200).send(JSON.stringify({token: token, user_id:user.id}))\n        } else {\n            db.insertUser([req.body.email,bcrypt.hashSync(req.body.password, 8)],\n            function (err, id) {\n                if (err) return res.status(500).send(JSON.stringify({message : \"There was a problem getting user\"}))\n                else {\n                    let token = jwt.sign({ id: id }, config.secret, {\n                        expiresIn: 86400 // expires in 24 hours\n                    });\n                    res.status(200).send(JSON.stringify({token: token, user_id:id}))\n                }\n            }); \n        }\n      }) \n    })\n    \n    [...]\n```\n\nIn our `/auth` route, we are checking if the user exists. If the email and password matches what we stored, we log the user in and send them a token. If the email exists but the password does not match, we have to handle that as well.\n\n\n\u003e `jwt` creates a hashed token using the user’s ID and the secret we defined in our config.js file. It sets the token to expire in 24 hours but you can make this longer or shorter\n\nWhat we are sending back to the user is their token and ID to help them make requests in the future.\n\nWhen we cannot find the email address of a user in our database, we assume we have a new user and register them directly. We also generated a token and returned it to the user.\n\n\n\u003e **WARNING**❗\n\u003e For any reason whatsoever, do not implement your authentication in a production application like this. While it provides convenience for you, it is very bad for user experience. We did it for the sake of this guide to get quickly to the most important thing — the Chrome extension.\n\n\n## Setting up routes to fetch coins\n\n``` javascript\n    //index.js\n    \n    [...]\n    router.get('/coins', function(req, res) {\n      let token = req.headers['x-access-token'];\n      if (!token) return res.status(401).send(JSON.stringify({message: 'Unauthorized request!' }))\n      jwt.verify(token, config.secret, function(err, decoded) {\n        if (err) return res.status(500).send(JSON.stringify({message: 'Failed to authenticate token.' }))\n        res.status(200).send(JSON.stringify({coins : cryptos.coins}))\n      });\n    })\n    [...]\n```\n\nThe coins route is protected by the access token. This means only authenticated users can fetch the coins we track their prices.\n\n\n## Setting up routes to add our favorite coins\n\n``` javascript\n    //index.js\n    [...]\n    router.post('/favorite/add', function(req, res) {\n        let token = req.headers['x-access-token'];\n        jwt.verify(token, config.secret, function(err, decoded) {\n            if (err) return res.status(401).send(JSON.stringify({message: 'Unauthorized request' }))\n            db.insertFavorite([req.body.coin, decoded.id], (err,favs) =\u003e {\n            if (err) return res.status(500).send(JSON.stringify({message : \"There was a problem adding your favs\"}))\n            res.status(200).send(JSON.stringify({message: \"Coin added to your favorites\"}))\n            }); \n        });\n    })\n    [...]\n```\n\nThe good thing about our token is that we encoded it with the user’s ID. This means, once the user presents a valid token, we can find out who the user is from the token. Awesome right? \n\nOnce we find who the user is, we add the coin they chose to their favorites. Whenever they click on the link to see their favorites, we return it to them and track price changes in realtime.\n\n\n## Setting up routes to fetch our favorite coins\n\n``` javascript\n    //index.js\n    \n    [...]\n    router.get('/favorite', function(req, res) {\n      let token = req.headers['x-access-token'];\n      jwt.verify(token, config.secret, function(err, decoded) {\n        if (err) return res.status(401).send(JSON.stringify({message: 'Unauthorized request' }))\n         db.selectFavorite(decoded.id, (err,favs) =\u003e {\n            // We use the favs returned by the db manager\n               if (err) return res.status(500).send(JSON.stringify({message : \"There was a problem getting your favs\"}))\n                  let coins = []\n                  if (favs \u0026\u0026 favs.length \u003e 0) {\n                    favs.forEach( fav =\u003e coins.push(fav.coin))\n                    const url = generateUrl(coins,cryptos.currencies)\n                    const event = `user${decoded.id}` \n                    fetchCoins(url, handleFavoriteResponse, event)\n                    res.status(200).send(JSON.stringify({event : event}))\n                  } else {\n                    res.status(200).send(JSON.stringify({message : \"You do not have favs\"}))\n                  }\n                }); \n      });\n    })\n    [...]\n```\n\nThis is straightforward. If the token is invalid, we return `401: Unauthorised` to the user and that settles it. If the token is valid, then we decode it and retrieve the user’s favorite coins.\n\n\n\u003e `Sqlite3` returns an array of objects for us, so we take all the coins and push them into an array — coins. We use the coins array to construct the URL we will use to make requests. Then we generate an event for the user based on their `id`. This makes it possible for us to send a message that only the user will receive.\n\n\nOur route definitions are complete now. Let us define our helper functions.\n\n## Defining the helpers\n\nThe helpers are set of functions we stored in `helpers.js` file. Open the file and add the following\n\n``` javascript\n    const Pusher  = require('pusher')\n    const config  = require('./config')\n    const https   = require('https')\n    const pusher  = new Pusher(config)\n    \n    // The functions\n    \n    const allowCrossDomain = (req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header('Access-Control-Allow-Methods', '*');\n      res.header('Access-Control-Allow-Headers', '*');\n      next();\n    }\n    \n    \n    let fetchCoins = (url, handler, event = false) =\u003e {\n      setInterval(() =\u003e {\n        https.get(url, response =\u003e {\n          response.setEncoding('utf8')\n          .on('data', data =\u003e event? handler(data,event) : handler(data))\n          .on('error', e =\u003e console.error(e.message))\n        })\n      }, 10000)\n    }\n    \n    \n    let handleResponse = (data) =\u003e {\n      pusher.trigger('cryptowatch', 'prices', {\n        \"update\": data\n      });\n    }\n    \n    let handleFavoriteResponse = (data,event) =\u003e {\n      pusher.trigger('cryptowatch', event, {\n        \"update\": data\n      });\n    }\n    \n    \n    let generateUrl = (coins,currencies) =\u003e {\n      return `https://min-api.cryptocompare.com/data/pricemulti?fsyms=${coins.join()}\u0026tsyms=${currencies.join()}`\n    }\n    \n    module.exports = {\n      allowCrossDomain : allowCrossDomain,\n      fetchCoins : fetchCoins,\n      handleResponse : handleResponse,\n      handleFavoriteResponse : handleFavoriteResponse,\n      generateUrl : generateUrl\n    }\n```\n\nWe are using Pusher in one of the functions here, so it only makes sense we define it. We exported all the functions with their name so it is easy for us to import them where we need it. We created `allowCrossDomain` function to help us handle CORS. We also moved our `fetchCoins` method from part one into our helper file, this way the method is reusable especially when it comes to creating dynamic events on Pusher channel.\n\nFinally, we defined our `generateURL` method, which we will call to fetch our defined currencies or a user’s favorite.\n\n\n## The database manager\n\nThe database manager manages the database. We will define the queries to create the database, select from the database and insert into it. Because this is not part of our focus, I will gloss over the long code pasted below and explain things that may vary if you are familiar with MySQL.\n\nInsert the following content into our `db.js` file:\n\n``` javascript\n    //db.js\n    \"use strict\";\n    const sqlite3 = require('sqlite3').verbose();\n    \n    class Db {\n      constructor(file) {\n        this.db = new sqlite3.Database(file);\n        this.createTables()\n      }\n    \n      createTables() {\n        let sql = `\n          CREATE TABLE IF NOT EXISTS user (\n          id integer PRIMARY KEY, \n          email text NOT NULL UNIQUE, \n          user_pass text NOT NULL)`\n        this.db.run(sql);\n    \n        sql = `\n          CREATE TABLE IF NOT EXISTS favorite (\n          id integer PRIMARY KEY, \n          coin text NOT NULL, \n          user_id integer NOT NULL)`\n        this.db.run(sql);\n        return true\n      }\n    \n      selectByEmail(email, callback) {\n        return this.db.get(\n          `SELECT * FROM user WHERE email = ?`,\n          [email], (err,row) =\u003e {\n              callback(err,row)\n          }\n        )\n      }\n    \n      selectFavorite(user_id, callback) {\n        return this.db.all(\n          `SELECT * FROM favorite WHERE user_id = ?`,\n          [user_id], (err,row) =\u003e {\n              callback(err,row)\n          }\n        )\n      }\n    \n      insertUser(user, callback) {\n        return this.db.run(\n          'INSERT INTO user (email,user_pass) VALUES (?,?)',\n          user, function(err) {\n              callback(err,this.lastID)\n          }\n        )\n      }\n    \n      insertFavorite(favs, callback) {\n        return this.db.run(\n          'INSERT INTO favorite (coin,user_id) VALUES (?,?)',\n          favs, err =\u003e {\n              callback(err)\n          }\n        )\n      }\n    }\n    \n    module.exports = Db\n```\n\nA few things to know:\n\n\n1. We will execute `sqlite3` queries that will not return a row or rows with `.run()` method.\n2. When we want to fetch a single row, we will execute the query with a `.get()` method.\n3. When we want to fetch multiple rows, we will execute the query with a `.all()` method.\n4. To get the `id` of the last inserted item, we run `this.lastID` inside the callback function we passed to `.run()` method.\n5. All `sqlite3` methods are asynchronous, hence the callback functions we pass to each one.\n\nNow, let us modify our Chrome extension.\n\n## Updating our Chrome extension\n\nWe have explained Chrome extensions in details in the last post. This means we will get right to our customization.\n\nThe first thing we want to do is get permission for our extension to use Chrome storage. So, modify the `permissions` array in the `extension/manifest.json` file and add the following:\n\n```\n    [...]\n      \"permissions\": [\n       \"activeTab\",\n       \"storage\"\n      ]\n    [...]\n```\n\nLet us update our `extension/index.html` file\n\n``` html\n    //extension/index.html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003ctitle\u003eCrypto Watcher\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"./css/style.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003ch1\u003eWelcome to Crytowatcher\u003c/h1\u003e\n      \u003cdiv class=\"box hide\"\u003e\n        \u003ca href=\"/coins.html\" class=\"link\"\u003e1. All Coins\u003c/a\u003e\n        \u003ca href=\"/favorite.html\" class=\"link\"\u003e2. My Favorites\u003c/a\u003e\n        \u003ca href=\"/add-favorite.html\" class=\"link\"\u003e3. Add Favorites\u003c/a\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"login hide\"\u003e\n        \u003cform id=\"form\"\u003e\n          \u003cinput class=\"form-elements\" type=\"email\" name=\"email\" value=\"\" placeholder=\"email\" required\u003e\n          \u003cinput class=\"form-elements\" type=\"password\" name=\"password\" value=\"\" placeholder=\"password\" required\u003e\n          \u003cbutton class=\"form-elements btn\"\u003eSubmit\u003c/button\u003e\n        \u003c/form\u003e\n      \u003c/div\u003e\n      \u003cscript src=\"./js/index.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe removed the style we included in the page and then proceed to add it to an external stylesheet. We will create the external stylesheet later. \n\nThings to note:\n\n- The first thing you will notice is that we removed the Pusher scripts we had on this page before. We moved it to where we will need it shortly.\n- Next, we added links to other pages. We will create the pages very soon.\n- Then we have a form which will handle login.\n- It seems we are hiding both the link and the form. So what shows up?\n- We have removed the `script.js` file and created `index.js` in the `/js` directory.\n\nBefore we proceed, open you terminal to create the following folder and files.\n\n``` \n    $ mkdir extension/js\n    $ touch extension/js/index.js\n    $ touch extension/js/favorite.js\n    $ touch extension/js/auth.js\n    $ touch extension/js/add-favorite.js\n    $ mkdir extension/css\n    $ touch extension/css/base.css\n    $ touch extension/css/style.css\n    $ touch extension/favorite.html\n    $ touch extension/add-favorite.html\n    $ touch extension/coins.html\n```\n\nFinally, we want to move `pusher.min.js` and `scripts.js`file into our `js` folder. Run this command to move the file:\n\n```\n    mv extension/pusher.min.js extension/js\n    mv extension/scripts.js extension/js\n```\n\nNow, open the `extension/js/index.js` script and insert the following:\n\n``` javascript\n    //extension/js/index.js\n    window.addEventListener('load', function(evt) {\n      const form = document.getElementById('form')\n      document.getElementById('form').addEventListener('submit', function(e) {\n        e.preventDefault()\n    \n        let options = {\n          method : \"POST\",\n          body : JSON.stringify({\n            'email' : this.elements.email.value,\n            'password' : this.elements.password.value\n          }),\n          headers : new Headers({'content-type': 'application/json'})\n        }\n    \n        fetch(\"http://localhost:4003/auth\",options)\n        .then(res =\u003e {\n          if(res.ok) return res.json()\n          else throw new Error(res.status)\n        })\n        .then(data =\u003e {\n            storeToken(data, () =\u003e {\n              document.querySelector('.box').classList.remove('hide')\n              document.querySelector('.login').classList.add('hide')\n            })\n        })\n        .catch(error =\u003e {\n          console.log(error)\n        })\n      })\n      getToken(result =\u003e {\n        if(!result) {\n          document.querySelector('.login').classList.remove('hide')\n        }\n        else {\n          document.querySelector('.box').classList.remove('hide')\n        }\n      })\n    })\n    \n    function storeToken(data, callback){\n      let dt = new Date()\n      chrome.storage.local.set(\n        { \"access-token\": \n          {\n            'token' : data.token,\n            'user_id' : data.user_id,\n            'expires' : dt.setDate(dt.getDate()+1)\n          }\n        }, \n        () =\u003e callback()\n      );\n    }\n    \n    function getToken(callback){\n      chrome.storage.local.get(\"access-token\", result =\u003e {\n        let data = false\n        if (result['access-token']) {\n          let expires = new Date(result['access-token']['expires'])\n          let now = new Date()\n          if (expires \u003e now) {\n            data = true\n          }\n          else {\n            chrome.storage.local.remove(\"access-token\", () =\u003e {})\n          }\n        }\n        callback(data)\n      });\n    }\n```\n\nThese two methods handle our authorization token. One stores it in Chrome storage and the second retrieves it. Chrome storage works like local storage but it is asynchronous, hence the callback functions we defined.\n\nWhen we store tokens, we store a time they are to expire as well. This allows us to remove the token if it has expired without having to make a request to the server. Since we know the tokens typically last a day, we set the expiration time here on the frontend.\n\nWhen we retrieve a token, we check if it has expired or not. If it has expired, we remove it completely and so the user will not try to use it to make a request.\n\n\n## Defining our stylesheet for our index page\n\n``` css\n    /* extension/css/style.css*/\n    body {\n      min-width: 200px;\n      height: 300px;\n      padding: 10px;\n    }\n    h1 {\n      text-align: center;\n      margin-bottom: 2rem;\n    }\n    .box {\n      display: block;\n    }\n    .box .link {\n      transition: 0.2s all;\n      font-size: 16px;\n      font-weight: 900;\n      padding: 5px;\n      text-decoration: none;\n      color: #3A4A33;\n      display: block;\n    }\n    .box .link:hover {\n      transition: 0.1s linear;\n      opacity: 0.8;\n      font-weight: 300;\n      text-decoration: underline;\n    }\n    .hide {\n      display: none\n    }\n    .form-elements {\n      display: block;\n      height: 20px;\n      border-radius: 2px;\n      margin: 0 auto;\n      margin-bottom: 10px;\n      border: #eee 0.5px solid;\n      max-width: 100%;\n      padding: 5px;\n    }\n    .select-elements {\n      display: block;\n      height: 30px;\n      margin-bottom: 10px;\n      border: #eee 0.5px solid;\n      width: 100%;\n      padding: 5px;\n    }\n    select:required:invalid {\n      color :#AAAAAA;\n    }\n    option[value=''][disabled] {\n      display: none;\n    }\n    .btn {\n      height: auto;\n      transition: 0.5s all;\n      background: #4AA71B;;\n      color: #FFFFFF;\n      margin-top: 1rem;\n      padding: 0.5rem 2rem;\n      border-radius: 4px;\n    }\n    .btn:hover {\n      transition: 0.5s all;\n      background: #4A872B;\n      cursor: pointer;\n    }\n```\n\nNext, insert the following content into `base.css` file\n\n``` css\n    /* extension/css/base.css */\n    body {\n      min-width: 200px;\n      height: 300px;\n    }\n    .back-btn {\n      height: 1.2rem;\n      color: #FFFFFF;\n      font-size: 14px;\n      font-weight: 900em;\n      cursor: pointer;\n      border-radius: 4px;\n      background: #3A3A3B;\n      text-decoration: none;\n      padding: 0.2rem 1rem;\n      margin-top: 0.5rem;\n    }\n    nav {\n      display: grid;\n      grid-template-columns: auto auto; \n      grid-template-rows: auto; \n      justify-content: space-between;    \n      align-content: space-between;    \n    }\n```\n\n## Create a page to list all coins\n\nThe first page we want to make is the page to display all coins. \n\nOpen the file `extension/coins.html` and add the following content:\n\n``` html\n    // extension/coins.html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"\u003e\n      \u003ctitle\u003eCrypto Watcher\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"./css/base.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003cnav\u003e\n        \u003ch1\u003eCoin Prices\u003c/h1\u003e\n        \u003ca href=\"/index.html\" class=\"back-btn\"\u003e\u0026#8592;\u003c/a\u003e\n      \u003c/nav\u003e\n      \u003cmain\u003e\n        \u003col id=\"crypto-prices\"\u003eFetching coins...\u003c/ol\u003e\n      \u003c/main\u003e\n      \u003cscript src=\"./js/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"./js/auth.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"./js/scripts.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe changed a few little things:\n\n1. We added an `auth.js` script, which ensures only an authenticated user views this page.\n2. We moved the `scripts.js` file from in `/js` directory and changed nothing in it.\n3. We added a link to take us back to home page.\n4. We now have a `nav` and `main` section on our page.\n\n\n\n## Create a page to view all user defined favorite coins\n\nOpen the `extension/favorite.html` file and insert the following content\n\n``` html\n    // extension/favorite.html\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"\u003e\n      \u003ctitle\u003eCrypto Watcher\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"./css/base.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003cnav\u003e\n        \u003ch1\u003eMy Favorites\u003c/h1\u003e\n        \u003ca href=\"/index.html\" class=\"back-btn\"\u003e\u0026#8592;\u003c/a\u003e\n      \u003c/nav\u003e\n      \u003cmain\u003e\n        \u003col id=\"crypto-prices\"\u003eFetching coins...\u003c/ol\u003e\n      \u003c/main\u003e\n      \u003cscript src=\"./js/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"./js/auth.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"./js/favorite.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNow, let us create the content of our  `extension/js/favorite.js` file:\n\n``` javascript\n    //extension/js/favorite.js\n    \n    const pusher = new Pusher('Your-App-Key', {\n      cluster: 'Your-cluster-key',\n      encrypted: true\n    })\n    \n    function handleBinding(event){\n      let channel = pusher.subscribe('cryptowatch');\n      channel.bind(event, (data) =\u003e {\n        let priceLists = \"\"\n        let obj = JSON.parse(data.update)\n        Object.keys(obj).forEach( (key, index) =\u003e {\n           priceLists += `\u003cli\u003e${key}: \u003c/br\u003e`\n           let currencies = obj[key]\n           let currencyLists = \"\u003cul\u003e\"\n           Object.keys(currencies).forEach( (currency, index) =\u003e {\n             currencyLists += `\u003cli\u003e${currency} : ${currencies[currency]}\u003c/li\u003e`\n           });\n           currencyLists += \"\u003c/ul\u003e\"\n           priceLists += `${currencyLists}\u003c/li\u003e`\n         });\n         document.getElementById('crypto-prices').innerHTML = priceLists\n      });\n    }\n```\n\n\u003e Remember to replace ‘Your-App-Key’ and ‘Your-cluster-key’ with the values you generated from Pusher’s dashboard\n\nWe have a similar script running here to what we had in part one that fetches and updates realtime data. The only difference is that we took the channel subscription part and put it in a function. You will see why below:\n\n``` javascript\n    // favorite.js\n    [...]\n    window.addEventListener('load', function(evt) {\n      let xhr = new XMLHttpRequest();\n      getToken(function(result) {\n        xhr.open(\"GET\", 'http://localhost:4003/favorite', true);\n        xhr.setRequestHeader('x-access-token',result.token)\n        xhr.send();\n      })\n      xhr.onreadystatechange = function() {\n        if (xhr.readyState == 4) {\n          let res = JSON.parse(xhr.responseText)\n          if(res.event) handleBinding(res.event)\n          else document.getElementById('crypto-prices').innerHTML = res.message\n        }\n      }\n    })\n```\n\nAs you can see here, we make a request to our API to get the user’s favorites. Upon getting the result, we call the function where we defined the channel binding and pass the user’s unique event. This is how they will get custom coin price updates. Cool right? 😎\n\n\n## Create a page for users to add favorite coins\n\nOpen the `extension/add-favorite.html` file and insert the following content\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"\u003e\n      \u003ctitle\u003eCrypto Watcher\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"./css/base.css\"\u003e\n      \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"./css/style.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003cnav\u003e\n        \u003ch1\u003eAdd Favorite\u003c/h1\u003e\n        \u003ca href=\"/index.html\" class=\"back-btn\"\u003e\u0026#8592;\u003c/a\u003e\n      \u003c/nav\u003e\n      \u003cmain\u003e\n        \u003cform id=\"form\"\u003e\n          \u003cselect id=\"coin\" class=\"select-elements\" type=\"text\" name=\"coin\" required\u003e\n            \u003coption disabled\u003e-- Select Coin --\u003c/option\u003e\n          \u003c/select\u003e\n          \u003cbutton class=\"form-elements btn\"\u003eSubmit\u003c/button\u003e\n        \u003c/form\u003e\n      \u003c/main\u003e\n      \u003cscript src=\"./js/auth.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"./js/add-favorite.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nLet us create the content for out `add-favorite.js` file. It has two main parts. Open the file and edit as follows:\n\nThe first part fetches the coins\n\n``` javascript\n    //extension/js/add-favorite.js\n    window.addEventListener('load', function(evt) {\n      let xhr = new XMLHttpRequest();\n      let coinOptions = document.getElementById('coin')\n      getToken(result =\u003e {\n        xhr.open(\"GET\", \"http://localhost:4003/coins\", true)\n        xhr.setRequestHeader('x-access-token',result.token)\n        xhr.send()\n      })\n      xhr.onreadystatechange = function() {\n        if (xhr.readyState == 4) {\n          let result = JSON.parse(xhr.responseText)\n          result.coins.forEach(coin =\u003e {\n            let el = document.createElement('option')\n            el.value = coin\n            coinOptions.appendChild(el)\n            el.innerText = coin\n          })\n        }\n      }\n      // Form submission\n    })\n```\n\nAnd the second submits the form:\n\n``` javascript\n    //extension/js/add-favorite.js\n    [...]\n      document.getElementById('form').addEventListener('submit', function(e) {\n        e.preventDefault()\n        getToken(result =\u003e {\n          let options = {\n            method : \"POST\",\n            body : JSON.stringify({coin : this.elements.coin.value}),\n            headers : new Headers({\n              'content-type': 'application/json',\n              'x-access-token' : result.token\n            })\n          }\n          fetch('http://localhost:4003/favorite/add',options)\n          .then(res =\u003e {\n            if(res.ok) return res.json()\n            else throw new Error(res.status)\n          })\n          .then(data =\u003e {\n            window.location = \"/favorite.html\"\n          })\n          .catch(error =\u003e console.log(error))\n        })\n      })\n    [...]\n```\nFinally, we need to create our `auth.js` file\n\nOpen the `extension/js/auth.js` file and add the following content\n\n``` javascript\n    getToken(function(result) {\n      if(!result) {\n        window.location = \"/index.html\"\n      }\n    })\n    \n    function getToken(callback){\n      chrome.storage.local.get(\"access-token\", (result) =\u003e {\n        let data = false\n        if (result['access-token']) {\n          let expires = new Date(result['access-token']['expires'])\n          let now = new Date()\n          if (expires \u003e now) {\n            data = { \n                    'token' : result['access-token']['token'],\n                    'user_id' : result['access-token']['user_id']\n            }\n          }\n          else {\n            chrome.storage.local.remove(\"access-token\", () =\u003e {})\n          }\n        }\n        callback(data)\n      })\n    }\n```\n\nWe called the `getToken` function and check if we have a valid token. If we don’t, we redirect the user to the `index.html` file where they can log in.\n\n\n## Testing the extension\n\nIf you got to this point, then I am happy to tell you that we are done coding. Time to mount the extension and give it a trial. From your browser, open `chrome://extensions/` and click `Load Unpacked`. Then select your extension’s directory.\n\nIf you did not deploy your application to Heroku like we did in part one, you can run it locally to give it a trial. However, if you deployed to Heroku, please go through the code and replace `http://localhost:4003` with your Heroku app URL.\n\nTo run it locally:\n\n```\n    $ npm start\n```\n\nYour extension should look like this:\n\n![chrome-crypto-extension-demo-3](//images.ctfassets.net/1es3ne0caaid/3MqcfZZHocoGcC4qqK8uqw/edc882ec45634e6916ab939f9385cace/chrome-crypto-extension-demo-3.png)\n\n![chrome-crypto-extension-demo-4](//images.ctfassets.net/1es3ne0caaid/1GZYy2bAXiCmQYiquEsyu6/fa33a5e20bce1751fc1ec274b5f1974b/chrome-crypto-extension-demo-4.png)\n\n![chrome-crypto-extension-demo-5](//images.ctfassets.net/1es3ne0caaid/2UTAm9VwPY6m4MI20OSoAo/e32ec2cce86fa59ece84a2a20b9e6479/chrome-crypto-extension-demo-5.png)\n\n![chrome-crypto-extension-demo-6](//images.ctfassets.net/1es3ne0caaid/3f662xQg7uW2oa6UK4Musq/80d1abd8b4cad0780bd3f1b5090ece12/chrome-crypto-extension-demo-6.png)\n\n![chrome-crypto-extension-demo-7](//images.ctfassets.net/1es3ne0caaid/6v5qCXyePeSAUAOua4o4gW/549e59a8d04e696cc97c9e4dbf4f72f0/chrome-crypto-extension-demo-7.png)\n\n![chrome-crypto-extension-demo-8](//images.ctfassets.net/1es3ne0caaid/32EIfAZCEEe4COoAcAmaqc/51d45960739acb8a77eba5b447a9bf07/chrome-crypto-extension-demo-8.png)\n\n\n\u003e **NOTE:** On My Favorites page, there will be an initial delay of about ten seconds when trying to fetch the coin for the first time\n\n## Conclusion\n\nIn the last part, we said we would extend the extension to make it easy for a user to specify the tokens they want to track. Well, we have delivered that.\n\nAt the start of this tutorial, I mentioned that when you are done with it, you would realise building a Chrome extension is like making a webpage. There are a few things that change when you are building an extension.\n\nBefore you say “Wow! So this is all there is to Chrome extension”, let me pause you for a moment. A Chrome extension can interact with the webpage where it is loaded. It can also do so much more than what we have seen so far.\n\nThe source code to the application in this article is available on [GitHub](https://github.com/fisayoafolayan/google-chrome-plugin-crypto/tree/customization).","metaTitle":"Build a Chrome extension to track cryptocurrency - Part 2","metaDescription":"Use Node and Heroku to build and deploy a basic Chrome extension, designed to display cryptocurrency prices in realtime. In part two, allow users to interact with the extension, and save their preferences."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2iIRA0LXdKgGc88W64Y0QW","type":"Entry","createdAt":"2018-10-29T04:35:50.444Z","updatedAt":"2018-10-29T04:35:50.444Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a Chrome extension to track cryptocurrency prices - Part 1: Build the app","url":"chrome-extension-cryptocurrency-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1N3HBqLEugWyeKsWEW0iYg","type":"Entry","createdAt":"2018-08-06T18:12:32.345Z","updatedAt":"2018-08-06T18:12:32.345Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Fisayo Afolayan","url":"fisayo-afolayan","email":"afolayanfisayo@gmail.com","twitter":"https://twitter.com/fisayoafolayan","github":"https://github.com/fisayoafolayan","guestWriter":true}}],"projectRepo":"https://github.com/fisayoafolayan/google-chrome-plugin-crypto","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kOTcNAC12gwWEyE6MimMY","type":"Entry","createdAt":"2018-02-12T15:08:28.581Z","updatedAt":"2018-02-26T12:31:12.766Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Trading","url":"trading","type":"use case"}}],"reviewDate":"2018-10-26","description":"This two part series will guide you through building, deploying and extending a Chrome extension. The extension displays cryptocurrency prices in realtime. In part one, build the basic extension and deploy it to Heroku.","prerequisite":"You will need Node 4+ and the Heroku CLI installed on your machine. Knowledge of JavaScript will be helpful.","content":"In this tutorial, we will build a Chrome application that will serve cryptocurrency prices in realtime. We will use [CryptoCompare](https://www.cryptocompare.com/api/) that provides a free cryptocurrency API to get the live prices. We will use Pusher to update the prices we fetch from CryptoCompare.\n\nA Chrome extension is a very handy tool. It is a small program that can enhance a user’s browsing experience or provide on demand information. There are several million extensions on the Chrome web store by different developers. Some provide a unique solution, others provide a feature of a standalone application.\n\n## Prerequisites\n1. Knowledge of HTML, CSS and JavaScript\n2. Knowledge of [Node.js](https://nodejs.org) and Node.js(^4.*) installed on your local computer\n3. A [Pusher](http://pusher.com/) app for realtime price tracking\n4. A [Heroku](http://heroku.com) account\n5. Heroku CLI [tool kit](https://devcenter.heroku.com/articles/heroku-cli) installed on your local computer\n\n## Setting up the project\n\nTo start off, we need to create a Pusher account so we can get API keys for realtime updates. Go to [Pusher](https://pusher.com/) and create a free account.  Once you have a new account and you are signed in to the dashboard, create a new application and keep note of the keys. We will use the keys subsequently.\n\n### Create a new Node project\n\nCreate a directory that will hold our application files:\n\n```\n    $ mkdir cryptowatcher\n    $ cd cryptowatcher\n```\n\nNow, create a new node.js project in that directory:\n\n```\n    $ npm init -y\n```\n\nHere is what my setup looks like when I finished:\n\n``` json\n    {\n      \"name\": \"crytowatcher\",\n      \"version\": \"1.0.0\",\n      \"description\": \"A simple application to track live cryptocurrency prices\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\",\n        \"start\": \"node index.js\"\n      },\n      \"keywords\": [\n        \"crypto\", \n        \"pusher\",\n        \"chrome-extension\"\n      ],\n      \"author\": \"A retired superhero\",\n      \"license\": \"ISC\"\n    }\n```\n\n### Install Pusher and set it up\n\nNow, let us install pusher:\n\n```\n    $ npm install pusher --save\n```\n\nAfter installing pusher, create an `index.js` file in the root directory and add the following file:\n\n``` javascript\n    // /cryptowatcher/index.js\n    \"use strict\";\n    const Pusher  = require('pusher')\n    const https   = require('https');\n    const config  = require('./config')\n    const cryptos = require('./cryptos.json')\n    const pusher  = new Pusher(config)\n```\n\nWe have imported all the packages and configuration files we need to run our application. You may wonder “Why are we not using Express?” and that would be an excellent observation. For this application, we only want a server that will make requests to the API and return the modified response as we please. We do not intend for this application to receive any external requests, so there is no need to create a server.\n\nNow, let us assume we want to extend the application and add a database to store these prices as we fetch them. We might also want to store cryptos we want to track and currencies we want to check them against. We can even go further and decide to allow users customise the cryptos they want to watch and the currencies they want to get the prices in. At this point, it will be wise to create a server to allow external requests to our application. But for this guide, we are keeping things very simple.\n\n## Call the CryptoCompare API\n\nNext, let us define the call to the CryptoCompare API:\n\n``` javascript\n    // /cryptowatcher/index.js\n    [...]\n    setInterval(() =\u003e {\n        https.get(`https://min-api.cryptocompare.com/data/pricemulti?fsyms=${cryptos.coins.join()}\u0026tsyms=${cryptos.currencies.join()}`, (response) =\u003e {\n            response.setEncoding('utf8')\n            .on('data', data =\u003e handleResponse(data))\n            .on('error', e =\u003e console.error(e.message))\n        })\n    }, 10000)\n```\n\nWe are using Node’s built-in `https` get request function to make the call. We have to set the encoding to `utf8`. If we do not do this, it will return gibberish data. When we receive data, we pass the data to the `handleResponse` method that handles the response.\n\nLet us define the `handleResponse` method:\n\n``` javascript\n    // /cryptowatcher/index.js\n    [...]\n    let handleResponse = data =\u003e {\n        pusher.trigger('cryptowatch', 'prices', {\n                  \"update\": data\n        });\n    }\n```\n\nThe `handleResponse` triggers a Pusher broadcast over the `cryptowatch` channel. On the channel, we  will broadcast the message using the `prices` event. If you are thinking “Uhm… Can we have multiple events on a single Pusher channel?” then I am pleased to inform you that you are absolutely right. It is like having multiple channels on a cable TV.\n\nCreate an HTTPS server to allow us bind our application to a port when we deploy it:\n\n``` javascript\n    // /cryptowatcher/index.js\n    [...]\n    https.createServer().listen(process.env.PORT || 8080)\n```\n\n## Define config and crypto files\n\n Next, we will define the `config.js` file. Create the file:\n\n```\n    $ touch config.js\n```\n\nOpen the file and add the following to it:\n\n``` javascript\n    // /cryptowatcher/config.js\n    module.exports = {\n      appId: 'YOUR-APP-ID',\n      key: 'YOUR-APP-KEY',\n      secret: 'YOUR-APP-SECRET',\n      cluster: 'YOUR-APP-CLUSTER',\n      encrypted: true\n    };\n```\n\nPlease replace the values in the object above with the values you received after creating your Pusher application.\n\nNow, create the `cryptos.json` file:\n\n```\n    $ touch cryptos.json\n```\n\nOpen the file and add the following:\n\n``` json\n    // /cryptowatcher/cryptos.json\n    {\n            \"coins\"      : [\"BTC\",\"ETH\",\"LTC\",\"XRP\"],\n            \"currencies\" : [\"USD\",\"EUR\",\"GBP\"]\n    }\n```\n\nIf there are more coins or currencies you will like to track, just add them to the list.\n\nThe last thing we need to do is define the start script in our `package.json` file. Open the file and edit the `scripts` sections:\n\n``` javascript\n    // /cryptowatcher/index.js\n    [...]\n    \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\",\n        \"start\": \"node index\"\n      },\n    [...]\n```\n\n## Making the Chrome extension\n\nThere is one thing that defines a Chrome extension, without which your extension is never going to work — `manifest.json` file. It is to Chrome extensions what `package.json` is to Node applications (and even more).\n\nThe file contains important information the Chrome extension requires to function. Many extensions might not use the manifest file for so much more than starting up. The manifest specifies the popup for your extension shows, it gives it a name, sets the display icon and a host of other things.\n\n### Creating the manifest file\n\nWe will create a new directory inside our project folder to hold the extension files.\n\n```\n    $ mkdir extension\n```\n\nNow, create the `/cryptowatcher/extension/manifest.json` file and add the following to it:\n\n``` json\n    // /cryptowatcher/extension/manifest.json\n    {\n      \"manifest_version\": 2,\n      \"name\": \"Cryptowatcher\",\n      \"description\": \"A simple application to track live cryptocurrency prices\",\n      \"version\": \"1.0\",\n      \"browser_action\": {\n         \"default_icon\": \"icon.png\",\n         \"default_popup\": \"index.html\",\n         \"default_title\": \"Cryptowatcher\"\n      },\n      \"permissions\": [\n         \"activeTab\"\n      ]\n    }\n```\n\nWe need to make a tiny logo and replace `icon.png` with it. 19x19 logo would do just fine. For this tutorial, we will use [this](https://res.cloudinary.com/dv2546q8h/image/upload/v1533048145/icon.png). \n\nNow, let us make the `index.html` file. Create the file in the directory and add the following:\n\n``` html\n    // /cryptowatcher/extention/index.html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n            \u003cmeta charset=\"UTF-8\"\u003e\n            \u003ctitle\u003eCrypto Watcher\u003c/title\u003e\n            \u003cstyle type=\"text/css\"\u003e\n                    body {\n                      min-width: 200px;\n                      height: 300px;\n                    }\n            \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n            \u003ch1\u003eCoin Prices\u003c/h1\u003e\n            \u003col id=\"crypto-prices\"\u003e\u003c/ol\u003e\n            \u003cscript src=\"./pusher.min.js\"\u003e\u003c/script\u003e\n            \u003cscript src=\"./scripts.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nChrome extension security policy disallows the use of inline scripts or scripts from external sources, that is why we did not call Pusher script from Pusher’s CDN. This is to prevent XSS or any form of attack on a user. So, download the `pusher.min.js` file from [here](https://js.pusher.com/4.2/pusher.min.js), save it in this directory `/cryptowatcher/extensions/`.\n\nNow, create the `scripts.js` file and add the following:\n\n``` javascript\n    // /cryptowatcher/extensions/scripts.js\n    \n    const pusher = new Pusher('Your-App-Key', {\n      cluster: 'Your-cluster-key',\n      encrypted: true\n    })\n    \n    let channel = pusher.subscribe('cryptowatch');\n    channel.bind('prices', (data) =\u003e {\n            let priceLists = \"\"\n             let obj = JSON.parse(data.update)\n             Object.keys(obj).forEach( (key, index) =\u003e {\n                     priceLists += `\u003cli\u003e${key}: \u003c/br\u003e`\n                     let currencies = obj[key]\n                     let currencyLists = \"\u003cul\u003e\"\n                     Object.keys(currencies).forEach( (currency, index) =\u003e {\n                         currencyLists += `\u003cli\u003e${currency} : ${currencies[currency]}\u003c/li\u003e`\n                 });\n                     currencyLists += \"\u003c/ul\u003e\"\n                     priceLists += `${currencyLists}\u003c/li\u003e`\n             });\n             document.getElementById('crypto-prices').innerHTML = priceLists\n    });\n```\n\n\u003e Remember to replace ‘Your-App-Key’ and ‘Your-cluster-key’ with the values you generated from Pusher’s dashboard\n\nWe subscribed to the Pusher channel we created on our Node application and bind it to an event. When our Node application broadcasts data, we take it and present it on the popup. Think of it like buying a cable TV subscription (Pusher channel), tuning into a particular station (subscribing to event) then arguing with your friends about what is showing on TV (using the data broadcast).\n\n\nTo view the what we have achieved so far,  run this command on your terminal \n\n```\n    $ npm start\n```\n\nOnce Node is up, open up the `extensions/index.html` file on your browser, your output should look like this. It will take up to ten seconds before it fetches our coin details \n\n![chrome-crypto-extension-demo-1](//images.ctfassets.net/1es3ne0caaid/5PV69xxzRCm6ACOwsCcqeI/4be01416de251086799db35f5732d29b/chrome-crypto-extension-demo-1.png)\n\n\n## Deploy to Heroku\n\nWe are going to deploy the application to [Heroku](https://heroku.com). This will ensure our service keeps running and everyone that installs our Chrome extension will always get a price update.\n\nFirst, you need to create a Heroku app. If you have Heroku installed on your local system, then you can use your terminal. If not, you can visit Heroku’s [website](https://heroku.com) and deploy the application directly from GitHub.\n\nFor this tutorial, we will deploy the application using the terminal. First, we need to log in:\n\n```\n    $ heroku login \n```\n\nSupply your Heroku email address and password when prompted to log in on your local. This will allow you perform all the necessary actions from your terminal.\n\nNext, let us create an application. Run this command in the root of your application\n\n```\n    $ heroku create \n```\n\nWe did not specify an application name so that Heroku will automatically generate a name for us. However, if you have a name in mind, you can add it after `… create` and Heroku would use that name instead.\n\n\n\u003e Heroku app names are unique. There can be no two applications with the same name even if they are created by different users. Your app URL will take your app name, and that is a strong reason for this.\n\nPlease note the name of the app and git URL Heroku generates as we will use it for deployment.\n\nNext, we will initialize git and commit all the files in we have created. Because we do not want to commit our `node_modules` folder, we will add it to our gitignore file.\n\n```\n    $ touch .gitgnore \n    $ echo \"node_modules/*\" \u003e .gitignore\n    $ git init\n    $ git add .\n    $ git commit -am \"initial commit\"\n```\n\nNext, add the heroku app to your git remote\n\n```\n    $ heroku git:remote -a #app-name\n```\n\n\u003e Remember to change “app-name” to the name provided by Heroku\n\nYou can then push to your application to Heroku:\n\n```\n    $ git push heroku master\n```\n\nWhen the application is deployed, we need to scale it to keep it running.\n\n```\n    $ heroku ps:scale web=1\n```\n\n\u003e Heroku free accounts are equipped with 1 dyno. The caveat is that the dyno runs 18 out of 24 hours a day. When you want to take the application live, subscribe to any of Heroku’s plans to get full 24 hour uptime and heroku’s support.\n\nWith our implementation, anybody with the Chrome extension will automatically receive an update whenever our application publishes one.\n\nFrom your browser, open `chrome://extensions/` and click **Load Unpacked**\n\n![chrome-crypto-extension-load-unpacked](//images.ctfassets.net/1es3ne0caaid/39Z6uylaacQSK4GieCueYA/8356733ccf45f1fe1829265e919b4f57/chrome-crypto-extension-load-unpacked.png)\n\nThen select the directory containing your extension from the dropdown. Chrome will launch the extension and an icon will pop up on your extension bar.\n\n![chrome-crypto-extension-icon](//images.ctfassets.net/1es3ne0caaid/1SVFNNvW1uSM0QkOKYmmOk/b6b7c540cd1bda6470e3e813d69395ae/chrome-crypto-extension-icon.png)\n\nClick on it and see what our extension looks like at the moment\n\n![chrome-crypto-extension-demo-2](//images.ctfassets.net/1es3ne0caaid/61I4XrcpOwoGwWm4maKAUM/fd304a2da929332a03f352ff3603c6a7/chrome-crypto-extension-demo-2.png)\n\n## Conclusion\n\nIn this tutorial, we have built a working Chrome extension. I know it is way simpler than you might have imagined, but best believe this is real. We used Node. and Pusher to enable us build upon this current extension and make it robust.\n\nIn the next part of this tutorial, we will allow users set the preference for the coin they wish to track and we equally send them aggregates of price shifts over a month period to enable them know more about the coins. We can personalise this data feed in realtime, all thanks to Pusher’s realtime API. \n\nThe source code to the application in this article is available on [GitHub](https://github.com/fisayoafolayan/google-chrome-plugin-crypto).","metaTitle":"Build a Chrome extension to track cryptocurrency - Part 1","metaDescription":"Use Node and Heroku to build and deploy a basic Chrome extension, designed to display cryptocurrency prices in realtime. In part one, create the base app, and deploy to Heroku."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6DSHNLXQCQK6AMiEWIAEcA","type":"Entry","createdAt":"2018-10-29T04:25:16.280Z","updatedAt":"2018-10-29T04:25:16.280Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Authentication in Vue using Vuex","url":"authentication-vue-vuex","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/vuex-auth-jwt","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-10-25","description":"Learn how to implement authentication in a Vue app with Vuex and a Node backend. Create a simple demo with a login page and authentication server.","prerequisite":"You will need Node 8.9+ installed on your machine, and the Vue CLI 3.0. Some knowledge of Vue will be helpful.","content":"## Introduction\n\nAuthentication is one of the most important parts of any modern application, especially ones built with JavaScript. To successfully achieve this, there are numerous options available to developers when building web applications that involves protected routes.\n\nThe simplest option will be to set a unique `token` for each user in a `localStorage`. This means, whenever you need to access the user’s `token` or any other important user data for authentication purposes, we will need to fetch the token over and over again.\n\nTo handle this properly and ensure the we don’t have to reach out to the localStorage all the time, we need to persist the required data and easily access it whenever we want to. This will ensure that we have a centralized location for all our important data.\n\nIn this tutorial, we will be exploring the usage of Vuex to manage authentications within a Vue application.\n\n\n## Prerequisites\n\nA knowledge of JavaScript and Vue is required for this tutorial. Also ensure that you have [Node.js](http://nodejs.org/) (version 8.9 or above) and [Vue CLI 3.0](https://cli.vuejs.org/guide/) installed on your machine. If you have the previous versions of `vue-cli` installed globally already, kindly follow the installation guide [here](https://cli.vuejs.org/guide/installation.html) to upgrade to the latest version.\n\n\n## Setting up the application modules \n\nRun the command below to begin the setup of our application: \n\n```\n    $ vue create vuex-auth-jwt\n```\n\nChoose the “manually select features” options and check the features we will need for this project by pressing space on your computer to select one. As shown below I have selected Babel, Router, Vuex and Linter / Formatter. You can skip this selection process and have them installed later but to get started easily, I will advise you select them:\n\n![vuex-auth-setup](//images.ctfassets.net/1es3ne0caaid/7mXFeiSB1u6y42W2iUQI2s/5384724433078a954c7f04b79089e3fe/vuex-auth-setup.png)\n\nFor other instructions, type `y` to use history mode for router, this will ensure that history mode is enable within the router file that will automatically be generated for our project. In addition, select `ESLint with error prevention only` in order to pick a linter / formatter config. Next, select `Lint on save` for additional lint features and save your configuration in a dedicated config files for future projects. Type a name for your preset, I named mine `vuerc`:\n\n![vuex-auth-preset](//images.ctfassets.net/1es3ne0caaid/6HYm3UPHnq6yoYGQSEUKMS/d128043ca52de8dd64bc1d980ea0f88d/vuex-auth-preset.png)\n\n Finally, hit `enter` to continue the installation process:\n \n![vuex-auth-installation](//images.ctfassets.net/1es3ne0caaid/2XvpuJwTCUM4yE4kkWaCwy/12fc3790c3382b24c495e30467414737/vuex-auth-installation.png)\n\nWith this option, the Vue-CLI will automatically set up the `store` for Vuex and configure a file for router as well.\n\n\n## Install and configure Axios\n\nWe will need to perform HTTP requests within our application, for this, we will install axios. Open up the terminal and run the command below from your project directory:\n\n```\n    $ npm install axios --save\n```\n\n In addition, it is certain that we will be making use of axios across many of the components that will be created for our application, it will be preferable to import it once at the entry level and easily use it anywhere. Open the `./src/main.js` file and update it with the content below:\n \n``` javascript\n    // ./src/main.js\n    ...\n      import Axios from 'axios'\n      \n      Vue.prototype.$http = Axios;\n      const token = localStorage.getItem('token');\n      if (token) {\n        Vue.prototype.$http.defaults.headers.common['Authorization'] = token\n      }\n      \n    ...\n```\n\nA major benefit of the setup above is that it makes it very easy for us to call axios directly inside any of our application’s components by simply using `this.$http`. We also proceeded to set up `Authorization` header with a token that will be sent with our requests if required.\n\n\n## Setting up the server for authentication\n\nNext, we will set up a Node.js server for authentication. For this server, we will use SQLite as the database of choice for this tutorial. To install SQLite driver and other required dependencies for our server, run the command below:\n\n```\n    $ npm install --save sqlite3 bcryptjs jsonwebtoken body-parser\n```\n\nA quick look at some of the newly installed dependency:\n\n\n- [sqlite3](https://www.npmjs.com/package/sqlite3): asynchronous, non-blocking [SQLite3](http://sqlite.org/) bindings for [Node.js](http://nodejs.org/).\n- [bcryptjs](https://www.npmjs.com/package/bcryptjs): a library to help hash passwords for users\n- [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken): a [JSON Web Tokens](https://jwt.io/) package to manage user’s authentication\n- [body-parser](https://www.npmjs.com/package/body-parser): a package to help read the json data send to our server.\n\nOnce the installation is completed, then it’s time for us to proceed and create the Node.js server that will handle user authentication as mentioned earlier. Within the root folder of your project directory, create a new folder named `server` and create a JavaScript file called `app.js` inside of it. This is where configuration takes place to import the required libraries to easily set up our server.\n\nNow open the newly created file and add the following:\n\n``` javascript\n    // ./server/app.js\n      \n      \"use strict\";\n      const express = require('express');\n      const DB = require('./db');\n      const config = require('./config');\n      const bcrypt = require('bcryptjs');\n      const jwt = require('jsonwebtoken');\n      const bodyParser = require('body-parser');\n      const db = new DB(\"sqlitedb\")\n      const app = express();\n      const router = express.Router();\n      router.use(bodyParser.urlencoded({ extended: false }));\n      router.use(bodyParser.json());\n      \n      // CORS middleware\n      const enableCrossDomain = function (req, res, next) {\n          res.header('Access-Control-Allow-Origin', '*');\n          res.header('Access-Control-Allow-Methods', '*');\n          res.header('Access-Control-Allow-Headers', '*');\n          next();\n      }\n      app.use(enableCrossDomain)\n```\n\nWhat we have done in the file above is to require all the necessary packages for our server to run effectively as stated initially. A close look at the file again, you will notice that we are also requiring a database file  `DB` and configuration file `config`. We will create these files in a bit.\n\nLastly, we went further to set up a simple CORS middleware within a function named `enableCrossDomain`. This is to ensure that any cross origin resource errors are taken care of.\n\n### Define the authentication route\n\nNext, we will define the route for registering a new user and also a login route to authenticate whenever the user comes back to log in. To begin, go back to the `./server/app.js` file and include the code below immediately after the CORS middleware configuration:\n\n``` javascript\n    // ./server/app.js\n    \n    ...\n      router.post('/register', function (req, res) {\n          db.insert([\n              req.body.name,\n              req.body.email,\n              bcrypt.hashSync(req.body.password, 8)\n          ],\n              function (err) {\n                  if (err) return res.status(500).send(\"There was a problem registering the user.\")\n                  db.selectByEmail(req.body.email, (err, user) =\u003e {\n                      if (err) return res.status(500).send(\"There was a problem getting user\")\n                      let token = jwt.sign({ id: user.id }, config.secret, {\n                          expiresIn: 86400 // expires in 24 hours\n                      });\n                      res.status(200).send({ auth: true, token: token, user: user });\n                  });\n              });\n      });\n```\n\nThe content above is used to define the route for registering a new user. Here, we passed the request body to the `insert` method with our `database` class that will be created in the next section. We added a callback function to handle responses and provide accurate information of an authenticated user. \n\nAfter successfully registering a user, we used `email`, since it will be configured as a unique field later in the tutorial to retrieve the user data and create an authentication token for the user by using the `jwt` packaged installed via npm earlier. We also used a secret key to verify a token sent to the server to uniquely identify a user. The configuration file for the secret key will be created soon.\n\nNext, we will define the login route. Paste the content below within the `app.js` file right after the already configured `/register` route:\n\n``` javascript\n    // ./server/app.js \n    \n      router.post('/login', (req, res) =\u003e {\n          db.selectByEmail(req.body.email, (err, user) =\u003e {\n              if (err) return res.status(500).send('Error on the server.');\n              if (!user) return res.status(404).send('No user found.');\n              let passwordIsValid = bcrypt.compareSync(req.body.password, user.password);\n              if (!passwordIsValid) return res.status(401).send({ auth: false, token: null });\n              let token = jwt.sign({ id: user.id }, config.secret, {\n                  expiresIn: 86400 // expires in 24 hours\n              });\n              res.status(200).send({ auth: true, token: token, user: user });\n          });\n      })\n```\n\nWe basically received the request body containing the email and password of a user during the login process. We used bcrypt to easily compare the hashed password during registration with the supplied password and log the user in if there is a match, else we will throw an error.\n\nNext, add the content below to complete the setting up process of the server:\n\n``` javascript\n    // ./server/app.js\n    \n    ... \n      app.use(router)\n      let port = process.env.PORT || 3000;\n      let server = app.listen(port, function () {\n          console.log('Server listening on port ' + port)\n      });\n```\n\nWith the content above, our server will be available on `port:3000`. Now, we are done setting up our simple Node.js server. \n\n### Set up the database and config\n\nRemember we made reference to a configuration and database file earlier? First, to set up the configuration file, create a new file in the same `server` directory and call it `config.js`. Add the following contents to it:\n\n``` javascript\n    // ./server/config.js\n    \n      module.exports = {\n          'secret': 'applicationsecret'\n      };\n```\n\nFinally, create another file for the database within the `server` directory called `db.js` and use the following content:\n\n``` javascript\n    // ./server/db.js\n    \n    \"use strict\";\n    const sqlite3 = require('sqlite3').verbose();\n    class Db {\n        constructor(file) {\n            this.db = new sqlite3.Database(file);\n            this.createTable()\n        }\n        createTable() {\n            const sql = `\n                CREATE TABLE IF NOT EXISTS userAuth (\n                    id integer PRIMARY KEY, \n                    name text, \n                    email text UNIQUE, \n                    password text)`\n            return this.db.run(sql);\n        }\n        selectByEmail(email, callback) {\n            return this.db.get(\n                `SELECT * FROM userAuth WHERE email = ?`,\n                [email], function (err, row) {\n                    callback(err, row)\n                })\n        }\n        insert(user, callback) {\n            return this.db.run(\n                'INSERT INTO userAuth (name,email,password) VALUES (?,?,?)',\n                user, (err) =\u003e {\n                    callback(err)\n                })\n        }\n    }\n    module.exports = Db\n```\n\nHere, we created a database class with methods like:\n\n-  `createTable()`: to create a table named `userAuth` for the users\n-  `selectByEmail()`: to fetch user’s data from the database\n-  `insert()`: to insert user’s data into the database during the registration process\n\nIn case you missed any of the steps above, [check here](https://github.com/christiannwamba/vuex-auth-jwt/blob/master/server/app.js) for the complete `app.js` file.\n\n## Set up components for the application\n\nNow that we are done setting up the server, let’s create the required components for the application. First, locate the `src/components` folder and create a new folder named `auth` inside of it. This newly created folder will house both the `Login`  and `Register` components.\n\n### The Login component\n\nCreate a new file `Login.vue` within the `./src/components/auth` directory and add the content below:\n\n``` html\n     // ./src/components/auth/Login.vue\n     \n      \u003ctemplate\u003e\n       \u003cdiv\u003e\n         \u003cform class=\"login\" @submit.prevent=\"login\"\u003e\n           \u003ch1\u003eSign in\u003c/h1\u003e\n           \u003clabel\u003eEmail\u003c/label\u003e\n           \u003cinput required v-model=\"email\" type=\"email\" placeholder=\"Name\"/\u003e\n           \u003clabel\u003ePassword\u003c/label\u003e\n           \u003cinput required v-model=\"password\" type=\"password\" placeholder=\"Password\"/\u003e\n           \u003chr/\u003e\n           \u003cbutton type=\"submit\"\u003eLogin\u003c/button\u003e\n         \u003c/form\u003e\n       \u003c/div\u003e\n      \u003c/template\u003e\n      \u003cscript\u003e\n      export default {\n        data() {\n          return {\n            email: \"\",\n            password: \"\"\n          };\n        },\n        methods: {\n          login: function() {\n            let email = this.email;\n            let password = this.password;\n            this.$store\n              .dispatch(\"login\", { email, password })\n              .then(() =\u003e this.$router.push(\"/\"))\n              .catch(err =\u003e console.log(err));\n          }\n        }\n      };\n      \u003c/script\u003e\n```\n\nHere, in the `\u003ctemplate\u003e` section we created the required fields to log in a user and within  the `\u003cscript\u003e`, we added the data attributes that will bind to the HTML form. Lastly, we included a method to handle the login process. We are using a Vuex action named `login` to handle this authentication. We will set this up later.\n\n### The Register component\n\nNext, let’s create a component for registering users. To do this, create a new file `Register.vue` in the `.src/components/auth` folder and add the following to it:\n\n``` html\n    // ./src/components/auth/Register.vue\n    \n      \u003ctemplate\u003e\n        \u003cdiv\u003e\n          \u003ch4\u003eRegister\u003c/h4\u003e\n          \u003cform @submit.prevent=\"register\"\u003e\n            \u003clabel for=\"name\"\u003eName\u003c/label\u003e\n            \u003cdiv\u003e\n                \u003cinput id=\"name\" type=\"text\" v-model=\"name\" required autofocus\u003e\n            \u003c/div\u003e\n            \u003clabel for=\"email\" \u003eE-Mail Address\u003c/label\u003e\n            \u003cdiv\u003e\n                \u003cinput id=\"email\" type=\"email\" v-model=\"email\" required\u003e\n            \u003c/div\u003e\n            \u003clabel for=\"password\"\u003ePassword\u003c/label\u003e\n            \u003cdiv\u003e\n                \u003cinput id=\"password\" type=\"password\" v-model=\"password\" required\u003e\n            \u003c/div\u003e\n            \u003clabel for=\"password-confirm\"\u003eConfirm Password\u003c/label\u003e\n            \u003cdiv\u003e\n                \u003cinput id=\"password-confirm\" type=\"password\" v-model=\"password_confirmation\" required\u003e\n            \u003c/div\u003e\n            \u003cdiv\u003e\n                \u003cbutton type=\"submit\"\u003eRegister\u003c/button\u003e\n            \u003c/div\u003e\n          \u003c/form\u003e\n        \u003c/div\u003e\n      \u003c/template\u003e\n      \u003cscript\u003e\n      export default {\n        data() {\n          return {\n            name: \"\",\n            email: \"\",\n            password: \"\",\n            password_confirmation: \"\",\n          };\n        },\n        methods: {\n          register: function() {\n            let data = {\n              name: this.name,\n              email: this.email,\n              password: this.password,\n            };\n            this.$store\n              .dispatch(\"register\", data)\n              .then(() =\u003e this.$router.push(\"/\"))\n              .catch(err =\u003e console.log(err));\n          }\n        }\n      };\n      \u003c/script\u003e\n```\n\nSimilar to the `Login` component, we created a form with the required fields to register a user and set up a method to handle the registration process within the `\u003cscript\u003e` section. We also used a Vuex action named `register`.\n\n### The secure component\n\nOne of the main objectives of this application is to give a user access to a particular protected resource once they are authenticated. Let’s create this secured resource page. \n\nTo start, create a new folder named `resources` within the `components` folder and then create a new file called `Resources.vue` within it. Open `Resources.vue` and paste the content below in it:\n\n``` html\n    // ./src/components/resources/Resources.vue\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n        \u003ch1\u003eProtected resource page \u003c/h1\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\n## Update the base component\n\nOpen `./src/App.vue` file and update it with the content `\u003ctemplate\u003e` below:\n\n``` html\n    // ./src/App.vue\n    \n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cdiv id=\"nav\"\u003e\n          \u003crouter-link to=\"/\"\u003eHome\u003c/router-link\u003e |\n          \u003crouter-link to=\"/about\"\u003eAbout\u003c/router-link\u003e\n          \u003cspan v-if=\"isLoggedIn\"\u003e | \u003ca @click=\"logout\"\u003eLogout\u003c/a\u003e\u003c/span\u003e\n          \u003cspan v-else\u003e | \u003crouter-link to=\"/login\"\u003eLogin\u003c/router-link\u003e\u003c/span\u003e\n        \u003c/div\u003e\n        \u003crouter-view/\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nWe included a `Logout` method to check if a user is logged in. Paste the code below after the `\u003ctemplate\u003e` to include the `logout()` method:\n\n``` javascript\n    // ./src/App.vue\n    \n    \u003cscript\u003e\n    export default {\n      computed: {\n        isLoggedIn: function() {\n          return this.$store.getters.isLoggedIn;\n        }\n      },\n      methods: {\n        logout: function() {\n          this.$store.dispatch(\"logout\").then(() =\u003e {\n            this.$router.push(\"/login\");\n          });\n        }\n      }\n    };\n    \u003c/script\u003e\n```\n\nOnce a user clicks on the logout link, we dispatched a logout action to our vuex store and send the user to `login` page using `this.$router.push('/login')`.\n\n## Building out the auth module\n\nThere are four things that go into a Vuex module: the [initial state](https://vuex.vuejs.org/guide/state.html), [getters](https://vuex.vuejs.org/guide/getters.html), [mutations](https://vuex.vuejs.org/guide/mutations.html) and [actions](https://vuex.vuejs.org/guide/actions.html). We will set this up for our store. To begin, open `store.js` file and paste the code below in it:\n\n``` javascript\n    // ./src/store.js\n    \n    import Vue from 'vue'\n    import Vuex from 'vuex'\n    import axios from 'axios'\n    \n    Vue.use(Vuex)\n    export default new Vuex.Store({\n      state: {\n      status: '',\n        token: localStorage.getItem('token') || '',\n        user: {}\n      },\n      mutations: {\n      },\n      actions: {\n      },\n      getters: {\n      }\n    })\n```\n\nHere, we imported Vue, Vuex and axios and set the initial state for the authentication status, token and user information.\n\n\n## Set up Vuex actions\n\nOur application is a minimal one and we only require to set up three different actions. They are `login`, `register`, and `logout`. Actions in Vuex provides us with a way of committing mutations to the vuex store. Go back to the `store.js` file and update the `actions` with:\n\n``` javascript\n     // ./src/store.js\n     \n      actions: {\n          login({ commit }, user) {\n            return new Promise((resolve, reject) =\u003e {\n              commit('auth_request')\n              axios({ url: 'http://localhost:3000/login', data: user, method: 'POST' })\n                .then(resp =\u003e {\n                  const token = resp.data.token\n                  const user = resp.data.user\n                  localStorage.setItem('token', token)\n                  // Add the following line:\n                  axios.defaults.headers.common['Authorization'] = token\n                  commit('auth_success', token, user)\n                  resolve(resp)\n                })\n                .catch(err =\u003e {\n                  commit('auth_error')\n                  localStorage.removeItem('token')\n                  reject(err)\n                })\n            })\n          },\n          register({ commit }, user) {\n            return new Promise((resolve, reject) =\u003e {\n              commit('auth_request')\n              axios({ url: 'http://localhost:3000/register', data: user, method: 'POST' })\n                .then(resp =\u003e {\n                  const token = resp.data.token\n                  const user = resp.data.user\n                  localStorage.setItem('token', token)\n                  // Add the following line:\n                  axios.defaults.headers.common['Authorization'] = token\n                  commit('auth_success', token, user)\n                  resolve(resp)\n                })\n                .catch(err =\u003e {\n                  commit('auth_error', err)\n                  localStorage.removeItem('token')\n                  reject(err)\n                })\n            })\n          },\n          logout({ commit }) {\n            return new Promise((resolve, reject) =\u003e {\n              commit('logout')\n              localStorage.removeItem('token')\n              delete axios.defaults.headers.common['Authorization']\n              resolve()\n            })\n          }\n        }\n```\n\n### Login action\n\nThe login action will be used to authenticate a user before logging in into the application and then commit the user’s credentials to the Vuex store.\n\nWithin this action object, we made a call to the server’s login route and return the necessary data. We then store the token in local storage and then pass the token and user data to `auth_success` to update the store’s attributes.  Saving the token within the local storage instead of Vuex store will help to ensure that the user will still be logged in for as long as the token is still within the validity time.\n\n### Register action\n\nSimilar to the `Login` action, the will get the data of a user into our application and set a unique token in the local storage.\n\n### Logout action\n\nAfter all the activity within our application, the user needs to be able to logout and have all the data created during the authenticated session destroyed. Once a user clicks on the logout link, we will remove the token we stored earlier. \n\n\n## Defining the mutations\n\nNext, we will define mutators that will be used to change the state of data within the Vuex store. In the mutations object, add the following content:\n\n``` javascript\n    // ./src/store.js\n          auth_request(state) {\n            state.status = 'loading'\n          },\n          auth_success(state, token, user) {\n            state.status = 'success'\n            state.token = token\n            state.user = user\n          },\n          auth_error(state) {\n            state.status = 'error'\n          },\n          logout(state) {\n            state.status = ''\n            state.token = ''\n          },\n```\n\n## Create the getters\n\nWe will also add getters to get the value of the attributes of vuex state. Still within the `./src/store.js` add the content below to the `getters` object:\n\n``` javascript\n    ./src/store.js\n    \n    isLoggedIn: state =\u003e !!state.token,\n    authStatus: state =\u003e state.status,\n```\n\n\n## Defining routes for authenticated and unauthenticated pages\n\nAs pointed out earlier, we intend to hide certain resources or pages from an unauthenticated user. For this, we will use [vue-router](https://router.vuejs.org/) to control the access of a user to a protected route. Once the user is authenticated we will give them access to a protected page and then redirect unauthenticated users back to the login page. Open the `./src/router.js` file and import all the required component as shown below:\n\n``` javascript\n    // ./src/router.js\n    \n      import Vue from 'vue'\n      import Router from 'vue-router'\n      import store from './store.js'\n      import Home from './views/Home.vue'\n      import About from './views/About.vue'\n      import Login from './components/auth/Login.vue'\n      import Register from './components/auth/Register.vue'\n      import Resource from './components/resources/Resources.vue'\n      Vue.use(Router)\n      let router = new Router({\n        mode: 'history',\n        routes: [\n          {\n            path: '/',\n            name: 'home',\n            component: Home\n          },\n          {\n            path: '/login',\n            name: 'login',\n            component: Login\n          },\n          {\n            path: '/register',\n            name: 'register',\n            component: Register\n          },\n          {\n            path: '/resources',\n            name: 'resources',\n            component: Resource,\n            meta: {\n              requiresAuth: true\n            }\n          },\n          {\n            path: '/about',\n            name: 'about',\n            component: About,\n          }\n        ]\n      })\n      export default router \n```\n\nWe imported all the required components and then proceeded to define routes for the application. The only route requiring authentication here is the route that points to the page we want to protect. That is why we had to add a `meta` attribute to the route definition. If an unauthenticated user hits the `/resources` endpoint, he or she will be redirected back to the `Login` component.\nWe will set up the `requiresAuth` meta in the next section.\n\n\n## Handling unauthorized access cases\n\nTo check for unauthorized access, add the code below within the `router.js`  file just before the `export default router`:\n\n``` javascript\n    // ./src/router.js\n    \n    ...\n    router.beforeEach((to, from, next) =\u003e {\n      if (to.matched.some(record =\u003e record.meta.requiresAuth)) {\n        if (store.getters.isLoggedIn) {\n          next()\n          return\n        }\n        next('/login')\n      } else {\n        next()\n      }\n    })\n    ...\n```\n\n\n## Running the application\n\nLastly, to test the application, run the command below to start the Vue application:\n\n```\n    $ npm run serve\n```\n\nThis will start the development server for Vue on http://localhost:8080/, open that in your favorite browser to view the application.\n\nAnd next, start the Node.js server in another terminal with:\n\n```\n    $ node server/app\n```\n\nThis will print out a message to the console `Server listening on port 3000`;\n\n\n## Test the application\n\nNow, if you navigate to the endpoint for our protected page http://localhost:8080/resources, you will be redirected to the login page as you have not been authenticated yet:\n\n![vuex-auth-demo-1](//images.ctfassets.net/1es3ne0caaid/jYHp9UysTeY6QAMQquWiC/c9affdcdaa6550f046c5933632cee113/vuex-auth-demo-1.gif)\n\nProceed to the registration page http://localhost:8080/register and provide your details.\n\n![vuex-auth-demo-2](//images.ctfassets.net/1es3ne0caaid/1fOhjEb3FIqMgwwsMiqGkE/9f7ebea2fcc22a980fc09906bea1a4fe/vuex-auth-demo-2.png)\n\nOnce you are done, try to access the protected page again: \n\n![vuex-auth-demo-3](//images.ctfassets.net/1es3ne0caaid/3eJqmC8hy0YIgsKMMAuqUC/05ce709d18709cd09d9df692a907bf0e/vuex-auth-demo-3.gif)\n\n## Conclusion\n\nIn this tutorial, we were able to learn how to use Vuex to manage authentication within our application. We were also able to set up a protected route that only authenticated users can have access to and redirect any unauthenticated user to a login page. \n\nI hope you found this post helpful. Find the complete source code [here on GitHub](https://github.com/christiannwamba/vuex-auth-jwt).","metaTitle":"Authentication in Vue using Vuex","metaDescription":"Learn how to implement authentication in a Vue app with Vuex and a Node backend. Create a simple demo with a login page and authentication server."}}],"defaultValue":"","queryType":"","pages":50,"route":"/tutorials","query":{"page":"19"}}},"page":"/tutorials","query":{"page":"19"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?page=19 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:40 GMT -->
</html>