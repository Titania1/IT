<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:22:07 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1">Learn &amp; Discover Pusher</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="1v9vy9q">.css-1v9vy9q{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;text-align:center;}@media all and (min-width:400px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1v9vy9q a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1v9vy9q a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:400px){.css-1v9vy9q{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1v9vy9q{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1v9vy9q{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1v9vy9q{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}</style><p scale="h5" class="css-1v9vy9q e5jrto45"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">447</span> tutorials to help you build great apps</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials0e67.html?product=Channels" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials1bbb.html?product=Beams" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value=""/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:none;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/error-handling-angular-part-3.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">CSS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Introduction to error handling in Angular 7: Part 3 - Sentry </h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This tutorial series will introduce you to errors in Angular 7. In part three, learn about errors tracking in Angular 7 ...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/error-handling-angular-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">CSS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Introduction to error handling in Angular 7: Part 2 - HTTP error handling</h3><p class="css-k12xad e5jrto45">This tutorial series will introduce you to errors in JavaScript. In part two, learn about HTTP errors, how to use the `H...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/lifecycle-hooks-angular.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">TypeScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">A guide to lifecycle hooks in Angular</h3><p class="css-k12xad e5jrto45">Angular is a TypeScript framework which empowers developers to build applications that live on the web, mobile, or the d...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/game-device-sensors-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Gaming<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a game using device sensors in React Native</h3><p class="css-k12xad e5jrto45">Build a mobile game, taking advantage of React Native&#x27;s device sensors module. Use the gyroscope to detect the tilt of t...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/callkit-ios-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Implement the CallKit extension for iOS - Part 2: CallKit extension</h3><p class="css-k12xad e5jrto45">This tutorial will show you how to use Apple&#x27;s CallKit to create an iOS app that you can use to add names and numbers to...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/beams-api-demo-android.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Pusher Beams client API demo for Android</h3><p class="css-k12xad e5jrto45">This tutorial will help you understand what each part of the Beams API does in a client Android app. You will go you thr...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/callkit-ios-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Implement the CallKit extension for iOS - Part 1: User interface</h3><p class="css-k12xad e5jrto45">This tutorial will show you how to use Apple&#x27;s CallKit to create an iOS app that you can use to add names and numbers to...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/error-handling-angular-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">CSS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Introduction to error handling in Angular 7: Part 1 - Angular errorHandler</h3><p class="css-k12xad e5jrto45">This tutorial series will introduce you to errors in JavaScript and the try-catch concept. In part one, learn how the co...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/instagram-clone-ionic-part-4.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Cordova<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">CSS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">GraphQL<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Java</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an Instagram clone with Ionic: Part 4 - Testing your Ionic application on mobile devices</h3><p class="css-k12xad e5jrto45">This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functional...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials4658.html?page=2" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials2679.html?page=1" class="css-5s6711 edg0byb1">1</a><a href="tutorials4658.html?page=2" class="css-5s6711 edg0byb1">2</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials9ba9.html?page=3" class="css-2wakph edg0byb1">3</a><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialsfdb0.html?page=4" class="css-za1ua3 edg0byb1">4</a><a href="tutorialsaf4d.html?page=5" class="css-za1ua3 edg0byb1">5</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials02d1.html?page=50" class="css-5s6711 edg0byb1">50</a><a href="tutorialsfdb0.html?page=4" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":447,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5FRM3EepbjPzCpuNwDVXRY","type":"Entry","createdAt":"2019-08-02T17:22:47.938Z","updatedAt":"2019-08-02T17:22:47.938Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Introduction to error handling in Angular 7: Part 3 - Sentry ","url":"error-handling-angular-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55Vy5qUc2Hc2NxBxWerK1T","type":"Entry","createdAt":"2019-03-16T13:13:19.673Z","updatedAt":"2019-03-16T13:13:19.673Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lotanna Nwose","url":"lotanna-nwose","email":"viclotana@gmail.com","twitter":"https://twitter.com/viclotana","github":"https://github.com/viclotana","guestWriter":true}}],"projectRepo":"https://github.com/viclotana/ng-sentry","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2019-08-02","description":"This tutorial series will introduce you to errors in Angular 7. In part three, learn about errors tracking in Angular 7 using the errorHandler class and Sentry, and how to track these errors in a remote tracking environment.","prerequisite":"You will need to have Node 11, Node Package Manager 6.7+, Angular CLI 7+ and Angular 7+ installed on your machine.","content":"# Remote error tracking in Angular 7 with Sentry\nIn this tutorial, you will be introduced to errors tracking in Angular7 using the errorHandler class and Sentry.\n\n![angular-errorhandler-sentry-img1](//images.ctfassets.net/1es3ne0caaid/3UzmU1I84iFV73uvgeriNc/d83ca1092f3e7f57d1cdc5da8bd9c272/angular-errorhandler-sentry-img1.png)\n\nThis is the third part of the Angular 7 error handling series, you can refer to [the first part here](https://pusher.com/tutorials/error-handling-angular-part-1), and [the second here](https://pusher.com/tutorials/error-handling-angular-part-2).\n\n## Prerequisites\n\nTo be able to follow through in this tutorial's demonstration you should have:\n\n- Node version 11.0 installed on your machine.\n- Node Package Manager version 6.7 (usually ships with Node installation).\n- [Angular CLI](https://cli.angular.io/) version 7.0\n- The latest version of Angular (version 7)\n\n```\n    // run the command in a terminal\n    ng version\n```\n\nConfirm that you are using version 7, and update to 7 if you are not.\nOther things that will be nice-to-haves are:\n\n\n- A working knowledge of the Angular framework at a beginner level.\n- Familiarity with Angular services will be a plus but not a requirement.\n\nIn this series, you have been introduced earlier to handling client side errors and then HTTP errors gracefully in Angular 7 with tools like errorHandlers, Interceptors and even RxJS operators. In this post you will be shown how to track these errors in a remote tracking environment.\n\n## Tracking errors\n\nWhen your Angular application is running in the development server with ng serve you can easily track errors in the application. The fastest way you can do this for JavaScript errors is with the errorHandler as it was illustrated in [this introductory post here](https://pusher.com/tutorials/error-handling-angular-part-1). The errorHandler logs this error for you, the developer, in the browser console you test your application with. This is the standard procedure for the development environment. \n\n## The problem\n\nWhen you build out the application in production and ship it to your users however, there is a big problem that should be obvious by now. Testing the shipped applications become an issue. If your application is in say beta stage, you might maybe send it to family and friends to use, you have to also be on those different devices to be able to spot the errors in their various browser consoles. This is of course not a scalable solution if you have many users who might not even be in the same location as you. \n\n## Error reporting by users\n\nInitially, the solution to this problem will be to build a system in such a way that your users can report errors on the application. However, this is rarely the case as users have been reported to be really impatient and this is confirmed by the [statistics on the high churn rate of users](https://www.statista.com/statistics/384224/monthly-app-launches-churn/) with applications. The situation that is more commonly seen in the place of error reporting is one-star ratings and high churn rate. \n\nA user is more likely not to use your application and even give a bad review of it than they are to report the error experienced while using the app. This is very practical and it shows an underlying question of responsibility. The responsibility of reporting errors should not be on the user but the developer of the application. Although as you will see, you can make it easier for users to report errors on your application but only as a secondary option.\n\n## Remote error tracking\n\nWhat if there was a way you can still track errors in your application from all the users using the application in real time, remotely and in a centralized location. Thanks to advancement in code testing and monitoring services that has improved in web development over the years, you can now. There are a lot of services in the market right now that lets you do exactly that, some of which are Sentry, Rollbar, Airbrake, Raygun and a host of others. \n\nIn this tutorial, you will be introduced to Sentry.io and how it uses the Angular errorHandler class to remotely track and report errors in your Angular applications.\n\n## Introducing Sentry\n\n[Sentry](http://sentry.io) is an open source software as a service that was built to track errors by providing visibility across your Angular application, providing you with details that you need to fix bugs and handle errors gracefully before the users encounter them. It has an extensive API that handles events from every popular language or application supporting JavaScript and all the frameworks including Angular, Vue and React. It also supports Python, Ruby on Rails, PHP, Go, Swift, Perl and a lot more others. It also perfectly integrates with a lot of developer services like Slack, Trello, GitHub, Twilio and a host of many others.\n\n## Getting started\n\nVisit the [Sentry page here](http://sentry.io) and click on **Get started.** You will see a page with a lot of sign up options including through your mail address, through GitHub or even through an Azure Devops account. The process will go through authentication with whichever option you choose. \n\n\n![angular-errorhandler-sentry-img2](//images.ctfassets.net/1es3ne0caaid/6KBwnaIfHDT8MWRgkLDuDP/0e1e430360b63d21696d1e9d83781931/angular-errorhandler-sentry-img2.png)\n\nWhen you see a similar screen (I used GitHub to sign up), click on **New Account** and then confirm that your name and email address are accurate. You are also to create an organisation at this point, you can call it your own name if it is a personal account. \n\n\n![angular-errorhandler-sentry-img3](//images.ctfassets.net/1es3ne0caaid/1TjSZL1qRcWXGrNWBWrrae/b91077c6dd122eeb35b8a1769ae9fa7b/angular-errorhandler-sentry-img3.png)\n\nNext thing is to create a new project, a dashboard displaying a wide range of languages you can run Sentry on. Projects allow you to scope events to a specific application in your already created organization. Select **Angular** and give the project a name of your choosing then click on create project.\n\nThe next stage is a small questionnaire you are to fill telling Sentry your developer role and how you heard about Sentry, this is purely a marketing and data collection phase to help developers of Sentry improve the service and get it in front of more developers like yourself. \n\nWhen you click submit, the final stage where the API specific to Angular projects is saved for you to configure your Angular application with. It is basically a quick getting started guide. \nTake note of the dsn code inside the component provided for you, it should look like this:\n\n```\n    Sentry.init({\n      dsn: \"https://bla-bla-bla\"\n    });\n```\n\nFor in-depth instructions on integrating Sentry with Angular, you can view [the complete documentation](https://docs.sentry.io/platforms/javascript/angular/).\n\n## Using Sentry\n\nIf you have followed this post from the start, you should have Angular 7 all setup in your machine, you have also now setup a Sentry account and created a new project. Now download this demo project from our [introductory article here](https://github.com/viclotana/ng_errors). After unzipping it, open the project folder in VS Code and install Sentry for browser use in a terminal inside the project with this command:\n\n```\n    npm install @sentry/browser \n```\n\nThis installs the Sentry JavaScript SDK into the project, making the Angular API available for use. Now you have to make changes in two files, go into the `error.service.ts` file and copy in the code block below:\n\n```typescript\n    // src/app/error.service.ts\n    import { Injectable, ErrorHandler, Injector } from '@angular/core';\n    import { Router } from '@angular/router';\n    import { HttpErrorResponse } from '@angular/common/http'\n    import * as Sentry from \"@sentry/browser\";\n    Sentry.init({\n    dsn: \"COPY FROM YOUR DASHBOARD\"\n    });\n    @Injectable({\n    providedIn: 'root'\n    })\n    export class SentryErrorHandler implements ErrorHandler{\n    constructor(private injector: Injector) { }\n    handleError(error: any) {\n    const router = this.injector.get(Router);\n    const eventId = Sentry.captureException(error.originalError || error);\n    if (Error instanceof HttpErrorResponse) {\n    console.log(error.status);\n    }\n    else {\n    console.error(\"an error occured here broo\");\n    Sentry.showReportDialog({ eventId });\n    }\n    router.navigate(['error']);\n    }\n    }\n```\n\nHere, you have imported the Sentry you earlier installed through npm, now copy the dns code, the one you took note of earlier and paste it inside the code block above. The part \"copy from your dashboard\" should be changed to the dns code from your dashboard. Now you are done with the error service file, open your `app.module.ts` file and copy in the code block below:\n\n```typescript\n    // src/app/app.module.ts\n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule, ErrorHandler } from '@angular/core';\n    import { AppRoutingModule } from './app-routing.module';\n    import { AppComponent } from './app.component';\n    import { SentryErrorHandler } from './error.service';\n    import { ErrorComponent } from './error/error.component';\n    @NgModule({\n    declarations: [\n    AppComponent,\n    ErrorComponent\n    ],\n    imports: [\n    BrowserModule,\n    AppRoutingModule\n    ],\n    providers: [\n    {\n    provide: ErrorHandler,\n    useClass: SentryErrorHandler,\n    },\n    ],\n    bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n```\n\nThis registers the new Sentry error service class so that when your application is ran, exceptions can now be captured by Sentry. To test it, run your application in development environment:\n\n```\n    ng serve\n```\n\nThis displays our application below\n\n\n![angular-errorhandler-sentry-img4](//images.ctfassets.net/1es3ne0caaid/3qs8XW0FulnRJ2v8AjDXl7/ef4253cecd9bb2af13f87acedb453456/angular-errorhandler-sentry-img4.png)\n\nTo trigger an exception click the button with try catch, once you do that it navigates to the error page. Now go to your sentry dashboard in your browser and you will see the error tracked in real time.\n\n\n![angular-errorhandler-sentry-img5](//images.ctfassets.net/1es3ne0caaid/lQXc5ChpKnXL0YtGitjv5/1d2e0f59eb78621744bdd3af52edc572/angular-errorhandler-sentry-img5.png)\n\nIf you go ahead to click on the issue, Sentry provides you with a very extensive dashboard and great looking visualization of the error tracked. Most of the information reported about the user's browser include: the operating system, the type of error flagged, the console logged message, the IDE error message, the data on the browser where the error came from, the SDK version. You can spot the exact error code block and then resolve it, you can merge the resolution and many other fancy things you can do.\n\n\n![angular-errorhandler-sentry-img6](//images.ctfassets.net/1es3ne0caaid/6IqnZNIN3NctRCnBCoTrYF/882d5d00a7fc8f2d106e4203840779d3/angular-errorhandler-sentry-img6.gif)\n\nThe Sentry documentation is very legible and straightforward and if you want more features you can easily lookup the docs. By default Sentry has a user crash report feedback modal form pop up for willing users to report the error for the developer to get access to more information to help fix it. \n\n\n![angular-errorhandler-sentry-img7](//images.ctfassets.net/1es3ne0caaid/61RzXMTraDJ5jITMtpwQVp/47ac77b518ee4d3fc9fb6ddc53f78dca/angular-errorhandler-sentry-img7.png)\n\nYou also get email alerts of these exceptions as they are caught, in real time too, this is a pretty amazing feature.\n\n## Is my data safe?\n\nThis is next question any developer will ask. Sentry is safe and it shows how safe your data is by ensuring that it gives every single account (even free accounts) on its platform the following services:\n\n\n- Two-factor authentication\n- Single Sign On support\n- Organization audit log\n- Privacy Shield certified\n- PII data scrubbing\n- SSL encryption\n\nYou can get the complete code for this tutorial on [here on GitHub](https://github.com/viclotana/ng-sentry), you can also [learn more about Sentry Security here](https://sentry.io/security/).\n\n## Conclusion\n\nSentry is a great option for developers who build out their applications to production phase and deploy to users. The docs are very extensive and the error reporting is top notch with everything you will need and in realtime. Have you considered using an error tracking service for your Angular application?","metaTitle":"Introduction to error handling in Angular 7 - Part 3","metaDescription":"This tutorial series will introduce you to errors in Angular 7. In part three, learn about errors tracking in Angular 7 using the errorHandler class and Sentry, and how to track these errors in a remote tracking environment."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6boiZJVOKS91Fx6f3YrzA7","type":"Entry","createdAt":"2019-07-31T20:33:18.444Z","updatedAt":"2019-07-31T20:33:18.444Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Introduction to error handling in Angular 7: Part 2 - HTTP error handling","url":"error-handling-angular-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55Vy5qUc2Hc2NxBxWerK1T","type":"Entry","createdAt":"2019-03-16T13:13:19.673Z","updatedAt":"2019-03-16T13:13:19.673Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lotanna Nwose","url":"lotanna-nwose","email":"viclotana@gmail.com","twitter":"https://twitter.com/viclotana","github":"https://github.com/viclotana","guestWriter":true}}],"projectRepo":"https://github.com/viclotana/ng_HTTP","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2019-07-31","description":"This tutorial series will introduce you to errors in JavaScript. In part two, learn about HTTP errors, how to use the `HttpClient` with RxJS error handling operators, and how to use interceptors. ","prerequisite":"You will need to have Node 11+, Node Package Manager version 6+, Angular CLI 7+ and Angular 7+  installed on your machine.\n","content":"In this tutorial, you will be introduced to HTTP errors in JavaScript, and how to use the `HttpClient` with RxJS error handling operators and finally how to use the `HttpInterceptor` \n\n![angular-error-handling-http-img1](//images.ctfassets.net/1es3ne0caaid/7JYFGKMlKOAwJQPINY193W/ec8e4bc1db6965765fad9924de9e7cb6/angular-error-handling-http-img1.jpeg)\n\nThis is a deep dive into HTTP error handling in Angular 7, you might want to check out the introductory post on error handling [here](https://pusher.com/tutorials/error-handling-angular-part-1).\n\n## Prerequisites\n\nTo be able to follow through in this tutorial's demonstration you should have:\n\n- Node version 11.0 installed on your machine.\n- Node Package Manager version 6.7 (usually ships with Node installation).\n- [Angular CLI](https://cli.angular.io/) version 7.0\n- The latest version of Angular (version 7)\n\n```\n    // run the command in a terminal\n    ng version\n```\n\nConfirm that you are using version 7, and update to 7 if you are not.\nOther things that will be nice-to-haves are:\n\n\n- A working knowledge of the Angular framework at a beginner level.\n- Familiarity with Angular services will be a plus but not a requirement.\n\n## Outsider errors\n\nThese are errors that we call server side errors because they mainly come from the outside the Angular application and an `HttpErrorResponse` is always returned anytime they occur. It has properties like:\n\n- **Error name**: this states the name of the error.\n- **Error message**: this tries to explain the error in simple terms for easier understanding.\n- **Error status:** each type of server side error has a code assigned to it to differentiate it from the rest. These codes are usually three digit codes like 400 which, signifies the request sent was unexpected or 500 which, signals internal server error and so on.\n\n## Error handler in Angular\n\nAngular has a global error handling class called errorHandler that provides a hook for centralized exception handling inside your application. It basically intercepts all the errors that happen in your application, and logs all of them to the console, and stops the app from crashing.\nThe syntax looks like this:\n\n```javascript\n    class MyErrorHandler implements ErrorHandler {\n      handleError(error) {\n        // do something with the exception\n      }\n    }\n    @NgModule({\n      providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n    })\n    class MyModule {}\n```\n\nThis is a great way to handle errors in Angular, particularly the insider errors.\n\n## The limitation of errorHandler\n\nIf you followed from the [introductory post here](https://pusher.com/tutorials/error-handling-angular-part-1), you will see how the Angular errorHandler class was the ultimate solution to centralizing the try/catch concept of errors in our application. However, when we want to focus on server side errors, we discover that the errorHandler class cannot work directly with HTTP requests in our application. Good news is Angular provides a kind of interface where you can use the concept of the errorHandler class to deal directly with HTTP requests.\n\n## Solution 1: Angular HttpClient\n\nThe `[HttpClient](https://angular.io/api/common/http/HttpClient)` in `@angular/common/``[http](https://angular.io/api/common/http)` offers a simplified client HTTP API for Angular applications that rests on the `XMLHttpRequest` interface exposed by browsers. Additional benefits of `[HttpClient](https://angular.io/api/common/http/HttpClient)`include testability features, typed request and response objects, request and response interception, `Observable` APIs, and streamlined error handling. So using this client with some RxJS operators we can get a kind of try/catch way of error handling but this time directly communicating with the HTTP requests through an Angular application in a service. You will understand it better in action.\n\n## Demo\n![angular-error-handling-http-img2](//images.ctfassets.net/1es3ne0caaid/46JdAaUd6jzIrxH2olwXZK/6aafdc26662fca6a0e73b5333d130442/angular-error-handling-http-img2.gif)\n\nThis is a demo [jsonplaceholder](http://jsonplaceholder.typicode.com/) application where parts of the available data on the [jsonplaceholder](http://jsonplaceholder.typicode.com/) is displayed on the user interface, a perfect service to demonstrate server related concepts. If you have all the prerequisites stated at the beginning of the post ready, you can [download the project from GitHub here](https://github.com/viclotana/jsonplaceholder-demo-app). \nUnzip and open the project in VS Code and use the terminal to initialize the node modules:\n\n```\n    npm install\n```\n\nNow that your application is up and running, you have to first and foremost ensure that the module required for Angular applications to use any server service is active in your application. Navigate to your `app.module.ts` file and confirm that there is an import statement like this:\n\n```javascript\n    import { HttpClientModule } from '@angular/common/http';\n```\n\nYour application has four components: posts, sidebar, details and users. It also has a service called data service where all the HTTP requests are made. Your `data.service.ts` file should look like this:\n\n```typescript\n    // src/app/services/data.service.ts\n    import { Injectable } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n    @Injectable({\n    providedIn: 'root'\n    })\n    export class DataService {\n     constructor(private http: HttpClient) { }\n     getUsers() {\n      return this.http.get('https://jsonplaceholder.typicode.com/users')\n     }\n     getUser(userId) {\n      return this.http.get('https://jsonplaceholder.typicode.com/users/'+userId)\n     }\n     getPosts() {\n      return this.http.get('https://jsonplaceholder.typicode.com/posts')\n     }\n    }\n```\n\nThree requests are being made to the server, now if you pick one of these requests, say `getUsers()` and you want to add error handling with the HttpClient then you will:\n\n- Import the catchError object from RxJS operators.\n- Import throwError from RxJS.\n- Use the pipe method to introduce it in the desired HTTP request.\n- Create a method to handle the error\n\nIf you follow these, your `data.service.ts` file will look like this:\n\n```typescript\n    // src/app/services/data.service.ts\n    import { Injectable } from '@angular/core';\n    import { HttpClient, HttpErrorResponse } from '@angular/common/http';\n    import { catchError } from 'rxjs/operators'\n    import { throwError } from 'rxjs';\n    @Injectable({\n    providedIn: 'root'\n    })\n    export class DataService {\n    constructor(private http: HttpClient) { }\n    getUsers() {\n    return this.http.get('https://jsonplaceholder.typicode.com/usssers')\n    .pipe(\n    catchError(this.handleError)\n    );\n    }\n    getUser(userId) {\n    return this.http.get('https://jsonplaceholder.typicode.com/users/'+userId)\n    }\n    getPosts() {\n    return this.http.get('https://jsonplaceholder.typicode.com/posts')\n    }\n    handleError(error: HttpErrorResponse){\n    console.log(\"lalalalalalalala\");\n    return throwError(error);\n    }\n    }\n```\n\nYou will see that the get request was deliberately tampered with to ensure an error occurs. When you run the application, you will see the error logged with the log message we want. \n\n\n![angular-error-handling-http-img3](//images.ctfassets.net/1es3ne0caaid/5gGxmNLgjopNqYOgmCGQAy/f36dd4974ac212b1883b52c672bfdc9c/angular-error-handling-http-img3.png)\n\n Sometimes when you send a request to a well known slow server, you know it might take a while to get response or take a few tries to actually get response from the server, you can resend the request a number of times before throwing the error. \nThis can be achieved with the retry method in RxJS, so you import the retry operator then you can use it inside the pipe like it is used below:\n\n```typescript\n    // src/app/services/data.service.ts\n    import { Injectable } from '@angular/core';\n    import { HttpClient, HttpErrorResponse } from '@angular/common/http';\n    import { catchError, retry } from 'rxjs/operators'\n    import { throwError } from 'rxjs';\n    @Injectable({\n    providedIn: 'root'\n    })\n    export class DataService {\n    constructor(private http: HttpClient) { }\n    getUsers() {\n    return this.http.get('https://jsonplaceholder.typicode.com/usssers')\n    .pipe(\n    retry(2),\n    catchError(this.handleError)\n    );\n    }\n    getUser(userId) {\n    return this.http.get('https://jsonplaceholder.typicode.com/users/'+userId)\n    }\n    getPosts() {\n    return this.http.get('https://jsonplaceholder.typicode.com/posts')\n    }\n    handleError(error: HttpErrorResponse){\n    console.log(\"lalalalalalalala\");\n    return throwError(error);\n    }\n    }\n```\n\nIf you run the application, the console should look like this:\n\n\n![angular-error-handling-http-img4](//images.ctfassets.net/1es3ne0caaid/4p0QHIp6NxxhET1UmfW0jk/9f5fef5ca2b7916ca558441100e0eff9/angular-error-handling-http-img4.gif)\n\nYou see it first tries to get the response, then retries it twice just as we specified before throwing the error log message. \n\n\n\u003e It is also very important that your retry comes before the catchError so that the error message is not logged after every trial.\n\nThis solution works perfectly so long as your application has one service and probably one get request, but when your application is big and has many services or a lot more requests per service it becomes an inefficient solution. This is because you have to always copy the handle error function across services and repeat code even within a service. Imagine the memory cost of debugging and maintaining the codebase.\n\n## The best option: Angular HttpInterceptor\n\nJust like the name says, Angular provides an interface called the `HttpInterceptor` that can intercept `[HttpRequest](https://angular.io/api/common/http/HttpRequest)` and `[HttpResponse](https://angular.io/api/common/http/HttpResponse)` and creates a platform to handle them. This means we get direct access to our server requests, what better place to deal with server errors than here!\nThe syntax looks like this:\n\n```javascript\n    interface HttpInterceptor {\n    intercept(req: HttpRequest\u003cany\u003e, next: HttpHandler):   Observable\u003cHttpEvent\u003cany\u003e\u003e\n    }\n```\n\nTo use the `HttpInterceptor` , create a new service where you want your interceptor logic to go in with the Angular CLI:\n\n```\n    ng generate service services/interceptor\n```\n\nNow you have generated an interceptor service, navigate to your `app.module.ts` file to register it accordingly, like this:\n\n```typescript\n    // src/app/app.module.ts\n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule } from '@angular/core';\n    import { AppRoutingModule } from './app-routing.module';\n    import { AppComponent } from './app.component';\n    import { UsersComponent } from './components/users/users.component';\n    import { DetailsComponent } from './components/details/details.component';\n    import { PostsComponent } from './components/posts/posts.component';\n    import { SidebarComponent } from './components/sidebar/sidebar.component';\n    import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n    import { BrowserAnimationsModule } from '@angular/platform-browser/animations'\n    import { InterceptorService } from './services/interceptor.service';\n    @NgModule({\n    declarations: [\n    AppComponent,\n    SidebarComponent,\n    PostsComponent,\n    DetailsComponent,\n    UsersComponent\n    ],\n    imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    BrowserAnimationsModule\n    ],\n    providers: [\n    {\n    provide: HTTP_INTERCEPTORS,\n    useClass: InterceptorService,\n    multi: true\n    }\n    ],\n    bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n```\n\nNext step is to get rid of all the error handling logic in the `data.service.ts` file, the file should look like this when you are done:\n\n```typescript\n    // src/app/services/data.service.ts\n    import { Injectable } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n    @Injectable({\n    providedIn: 'root'\n    })\n    export class DataService {\n    constructor(private http: HttpClient) { }\n    getUsers() {\n    return this.http.get('https://jsonplaceholder.typicode.com/usersss')\n    }\n    getUser(userId) {\n    return this.http.get('https://jsonplaceholder.typicode.com/users/'+userId)\n    }\n    getPosts() {\n    return this.http.get('https://jsonplaceholder.typicode.com/posts')\n    }\n    }\n```\n\nCopy the code below into the `interceptor.service.ts` file:\n\n```typescript\n    // src/app/services/interceptor.service.ts\n    import { Injectable } from '@angular/core';\n    import {\n    HttpInterceptor, HttpRequest,\n    HttpHandler, HttpEvent, HttpErrorResponse\n    } from '@angular/common/http';\n    import { Observable, throwError } from 'rxjs';\n    import { catchError } from 'rxjs/operators';\n    @Injectable({\n    providedIn: 'root'\n    })\n    export class InterceptorService implements HttpInterceptor{\n     constructor() { }\n     handleError(error: HttpErrorResponse){\n      console.log(\"lalalalalalalala\");\n      return throwError(error);\n     }\n    intercept(req: HttpRequest\u003cany\u003e, next: HttpHandler):\n    Observable\u003cHttpEvent\u003cany\u003e\u003e{\n     return next.handle(req)\n     .pipe(\n      catchError(this.handleError)\n     )\n     };\n    }\n```\n\nIf you run the application, you can see that it logs our error message and throws the error just as we expect. This is the best method of handling server errors in your Angular project. You can test all the three requests at once for errors by tampering with them. When you do, you will find out that the interceptor catches all of them and logs our message for each, it is really amazing to watch.\n\n## Conclusion\n\nYou have been introduced to various ways to handle server side errors in your Angular applications. You have also seen when to use and when not to use the `HttpClient` with the RxJS operators and how the best way is using interceptors. In the [next tutorial](https://pusher.com/tutorials/error-handling-angular-part-3) in this series, you will be introduced to error tracking. The complete code for this tutorial is on GitHub and can be [found here](https://github.com/viclotana/ng_HTTP). Happy coding!","metaTitle":"Introduction to error handling in Angular 7 - Part 2","metaDescription":"This tutorial series will introduce you to errors in JavaScript. In part two, learn about HTTP errors, how to use the `HttpClient` with RxJS error handling operators, and how to use interceptors. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"42xTxRTY7RrBOFhz6yjyBw","type":"Entry","createdAt":"2019-07-31T16:08:06.460Z","updatedAt":"2019-07-31T16:08:06.460Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"A guide to lifecycle hooks in Angular","url":"lifecycle-hooks-angular","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55Vy5qUc2Hc2NxBxWerK1T","type":"Entry","createdAt":"2019-03-16T13:13:19.673Z","updatedAt":"2019-03-16T13:13:19.673Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lotanna Nwose","url":"lotanna-nwose","email":"viclotana@gmail.com","twitter":"https://twitter.com/viclotana","github":"https://github.com/viclotana","guestWriter":true}}],"projectRepo":"https://github.com/viclotana/ng-hooks","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"18J5ku8AMG7DNqxzvTy4tW","type":"Entry","createdAt":"2019-06-04T15:37:38.967Z","updatedAt":"2019-06-04T15:37:38.967Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Webhooks","url":"webhooks","type":"use case","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2019-07-31","description":"Angular is a TypeScript framework which empowers developers to build applications that live on the web, mobile, or the desktop. In this tutorial you will learn about all the hooks available for use in your Angular workflow for building awesome applications.\n","prerequisite":"You will need to have Node 11+, Node Package Manager version 6+, Angular CLI 7+ and Angular 7+ installed on your machine.","content":"Learn about all the hooks available for use in your Angular workflow for building awesome applications.\n\n## Angular\n\nAngular is a TypeScript framework for building web applications, mobile or desktop with over 49,000 stars on GitHub. Maintained by the Angular team at Google and a host of community members and organizations, it combines declarative templates, dependency injection, end to end tooling, and integrated best practices to solve development challenges. Angular empowers developers to build applications that live on the web, mobile, or the desktop. It has a very useful CLI tool for beginners to easily get started, there is even a GUI client called [Console](https://angularconsole.com/).\n\n## Prerequisites\n\nTo be able to follow through in this article's demonstration you should have:\n\n- Node version 11.0 installed on your machine.\n- Node Package Manager version 6.7 (usually ships with Node installation).\n- [Angular CLI](https://cli.angular.io/) version 7.0\n- The latest version of Angular (version 7)\n\n```\n    // run the command in a terminal\n    ng version\n```\n\nConfirm that you are using version 8, and update to 8 if you are not.\n\n- Download an Angular quick starter project [here](http://github.com/viclotana/ng_canvas) to follow through the demonstrations.\n- Unzip the project and initialize the Node modules in your terminal with this command:\n\n```\n    npm install\n```\n\nOther things that will be nice-to-haves are:\n\n- A working knowledge of the Angular framework at a beginner level.\n- Familiarity with the Angular constructor will be a plus but not a requirement.\n\n\n## Lifecycle hooks\n\nEvery Angular component goes through the process of creation, then Angular goes on to execute all the functions it was created to execute and then go to possible destruction, this is called the lifecycle of a component. Angular does this by creating the component, rendering it as well as creating and rendering all its children. Then Angular checks for changes in the data properties or in the DOM, and makes the appropriate updates and finally when it is done, destroys it then removes it from the DOM.\n\nAngular offers lifecycle hooks that provide visibility into these key life moments and the ability to act when they occur. \n\nThere are eight lifecycle hooks in Angular:\n\n1. ngOnChanges()\n2. ngOnInit()\n3. ngDoCheck()\n4. ngAfterContentInit()\n5. ngAfterContentChecked()\n6. ngAfterViewInit()\n7. ngAfterViewChecked()\n8. ngonDestroy()\n\n\n## New concept: content projection\n\nThis concept is very important and will help you to properly understand the four of the Angular lifecycle hooks: ngAfterContentInit(), ngAfterContentChecked(), ngAfterViewInit(), ngAfterViewChecked(). It will be briefly treated in this section. If you have a custom Angular component you are displaying in your template ```component.html``` file, you are allowed to have child elements inside your custom component. Here is a good example:\n\n```html\n    \u003cselect\u003e\n    \u003ch2\u003eVote your favorite halloween party\u003c/h2\u003e\n    \u003coption value=\"100\"\u003eVote APC\u003c/option\u003e\n    \u003coption value=\"100\"\u003eVote PDP\u003c/option\u003e\n    \u003coption value=\"100\"\u003eVote APGA\u003c/option\u003e\n    \u003c/select\u003e\n```\n\nThis is a select statement block for voting from a group of dumb party names to throw on Halloween. In Angular you can create your own custom element like the select statement like this:\n\n```html\n    \u003cmy-party-component\u003e\n    \u003ch2\u003eVote your favorite party\u003c/h2\u003e\n    \u003coption value=\"100\"\u003eVote APC\u003c/option\u003e\n    \u003coption value=\"100\"\u003eVote PDP\u003c/option\u003e\n    \u003coption value=\"100\"\u003eVote APGA\u003c/option\u003e\n    \u003c/my-party-component\u003e\n```\n\nThe problem that content projection solves is efficiency for working with child components. Using the above illustration, if you had in the CSS file two classes called pink and green that sets the background color of an element to pink or green. To apply the classes on the child component can look very cumbersome and with a lot of repetition.\n\n```html\n    \u003cmy-party-component\u003e\n    \u003ch2\u003eVote your favorite party\u003c/h2\u003e\n    \u003coption class=\"pink\" value=\"100\"\u003e\u003ch3\u003eVote APC\u003c/h3\u003e\u003c/option\u003e\n    \u003coption class=\"green\" value=\"100\"\u003e\u003cspan\u003eVote PDP\u003c/span\u003e\u003c/option\u003e\n    \u003coption class=\"pink\" value=\"100\"\u003e\u003ch3\u003eVote APC\u003c/h3\u003e\u003c/option\u003e\n    \u003c/my-party-component\u003e\n```\n\nThis can however be reduced to one line of code with content projection in the my-party-component definition:\n\n```html\n    \u003cng-content select=\"span\"\u003e\u003c/ng-content\u003e\n    \u003cng-content select=\"h3\"\u003e\u003c/ng-content\u003e\n```\n\n## Lifecycle hooks explained\n\nIn this article you will be introduced to every one of them, why they were built and how they are used. After creating a component by calling its constructor, Angular calls the lifecycle hook methods in the following sequence at specific moments:\n\n## ngOnChanges()\n\nThis is the very first lifecycle hook, it is called right after your class gets initialized and the component is created the ngOnChanges() is called. You might want to wonder why ngOnInit hook is not called first, but that is because Angular counts that very first class initialization as a data property change. So the hook that gets called once a data property change (like resetting values) occurs is ngOnChanges(). This hook is basically called after the constructor is called and any other time there is a property change inside your component.\n\nOpen up the starter project you downloaded in VS Code and open the `app.component.ts` file inside the app folder. It should look like this:\n\n```typescript\n    // src/app/app.component.ts\n    import { Component } from '@angular/core';\n    @Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n    title = 'ngcanvas';\n    }\n```\n\nTo test out the ngOnChanges hook, copy in the code below inside this file:\n\n```typescript\n    // src/app/app.component.ts\n    import { Component, OnChanges } from '@angular/core';\n    @Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n    })\n    export class AppComponent implements OnChanges {\n    ngOnChanges(changes: import(\"@angular/core\").SimpleChanges): void {\n    }\n    title = 'ngcanvas';\n    constructor(){\n    alert(\"1. on changes called\");\n    }\n    }\n```\n\nHere we have brought in the ngOnChanges hook from Angular and have initialized it with an alert statement in the constructor. If you run the application, the alert will pop up before the component will be loaded.\n\n## ngOnInit()\n\nThis is the second lifecycle hook called by Angular, it is called right after the very first ngOnChanges hook is called. It is only called once, it initializes the component, sets and displays component input properties. It is the most important lifecycle hook in Angular as it signals the activation of the created component. For the fact that this hook is called only once, it is therefore great for fetching data from external sources like servers and APIs.\n\nTo test this out, add the ngOnInit hook syntax to the class with the code below:\n\n```typescript\n    // src/app/app.component.ts\n    import { Component, OnChanges, OnInit } from '@angular/core';\n    @Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n    })\n    export class AppComponent implements OnChanges, OnInit {\n    ngOnInit(): void {\n    alert(\"2. on init is called\");\n    }\n    ngOnChanges(changes: import(\"@angular/core\").SimpleChanges): void {\n    }\n    title = 'ngcanvas';\n    constructor(){\n    alert(\"1. on changes called\");\n    }\n    }\n```\n\nYou will see the alerts pop up in the right sequence as it is called, this will be true even if ngOnInit comes first from a top-down analysis.\n\n## ngDoCheck()\n\nThis is the third Angular lifecycle hook that gets called on a component. It is called during every change detection run, Angular has an internal system that goes around the component processes every so often looking for changes that the compiler cannot detect on its own. This hook is called at every change detection run, usually after the ngOnInit hook is called.\n\nTo test this, copy in the code below into the `app.component.ts` file:\n\n```typescript\n    // src/app/app.component.ts\n    import { Component, OnChanges, OnInit, DoCheck } from '@angular/core';\n    @Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n    })\n    export class AppComponent implements OnChanges, OnInit, DoCheck {\n    ngDoCheck(): void {\n    alert(\"3. do check is called\");\n    }\n    ngOnInit(): void {\n    alert(\"2. on init is called\");\n    }\n    ngOnChanges(changes: import(\"@angular/core\").SimpleChanges): void {\n    }\n    title = 'ngcanvas';\n    constructor(){\n    alert(\"1. on changes called\");\n    }\n    }\n```\n\nYou will see the alerts pop up in the right sequence here again, not minding the hierarchy of presentation.\n\n## ngAfterContentInit()\n\nThis is the fourth lifecycle hook Angular calls after a component has been initialized. This hook is called only once immediately after the first ngDoCheck hook is called, it is a kind of ngDoCheck but for content projected into the component view with ng-content. You may refer to the brief content projection summary at the beginning of this post again.\n\nAt this point you must have noticed the amazing power of Angular with intellisense in VS Code to handle imports and also initialization of these hooks perfectly.\n\n```typescript\n    // src/app/app.component.ts\n    import { Component, OnChanges, OnInit, DoCheck, AfterContentInit } from '@angular/core';\n    @Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n    })\n    export class AppComponent implements OnChanges, OnInit, DoCheck, AfterContentInit {\n    ngAfterContentInit(): void {\n    alert(\"4. after content init called\");\n    }\n    ngDoCheck(): void {\n    alert(\"3. do check is called\");\n    }\n    ngOnInit(): void {\n    alert(\"2. on init is called\");\n    }\n    ngOnChanges(changes: import(\"@angular/core\").SimpleChanges): void {\n    }\n    title = 'ngcanvas';\n    constructor(){\n    alert(\"1. on changes called\");\n    }\n    }\n```\n\n## ngAfterContentChecked()\n\nThis is the fifth lifecycle hook Angular calls after a component has been initialized. It is called after the content projected into a component view is initialized, after the ngAfterContentInit hook and every subsequent ngDoCheck hook is called.\n\nExercise: To test this hook, follow the pattern in the previous hooks above and achieve create the alert for this. \n\n\n\u003e If you get any error warnings on your app component, hover over it to get a quick fix preview you can use.\n\n\n## ngAfterViewInit()\n\nThis is the sixth lifecycle hook Angular calls after a component has been initialized. It is called only once after the very first ngAfterContentChecked hook is called. It is called after Angular initializes component views and the subsequent child views under each component, this will have to include the views displayed through content projection too and that is why it is called after the ngAfterContentChecked hook.\n\nExercise: To test this hook, follow the pattern in the previous hooks above and achieve create the alert for this.\n\n## ngAfterViewChecked()\n\nThis is the seventh lifecycle hook Angular calls after a component has been initialized. It is called after Angular checks the component views and the subsequent child views under each component for changes, this includes the views displayed through content projection too. It is called after the ngAfterViewInit hook and every subsequent ngAfterContentChecked hook.\n\nExercise: To test this hook, follow the pattern in the previous hooks above and achieve create the alert for this.\n\n## ngOnDestroy()\n\nThis is the last Angular lifecycle hook, it is called just before the component is removed from the DOM. Inside it clean up of the component is done, from detaching event handlers to unsubscribing from observables.\n\nExercise: To test this hook, follow the pattern in the previous hooks above and achieve create the alert for this. You will also notice that ngOnDestroy hook is not called, that is because the DOM has not been removed, if you have an unsubscribe statement inside it for instance, it will get called.\nYour final `app.component.ts` file should look like this:\n\n```typescript\n    // src/app/app.component.ts\n    import { Component, OnChanges, OnInit, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy } from '@angular/core';\n    @Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n    })\n    export class AppComponent implements OnChanges, OnInit,\n    DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit,\n    AfterViewChecked, OnDestroy{\n    ngOnChanges(changes: import(\"@angular/core\").SimpleChanges): void {\n    }\n    ngOnInit(): void {\n    alert(\"2. on init is called\");\n    }\n    ngDoCheck(): void {\n    alert(\"3. do check is called\");\n    }\n    ngAfterContentInit(): void {\n    alert(\"4. after content init called\");\n    }\n    ngAfterContentChecked(): void {\n    alert(\"5. after content check called\");\n    }\n    ngAfterViewInit(): void {\n    alert('6. after view init called');\n    }\n    ngAfterViewChecked(): void {\n    alert('7. after view init checked');\n    }\n    ngOnDestroy(): void {\n    alert('8. on destroy called');\n    }\n    title = 'ngcanvas';\n    constructor(){\n    alert(\"1. on changes called\");\n    }\n    }\n```\n\nThe ideal behavior is for the ngDoCheck, ngAfterContentChecked and ngAfterViewChecked hooks to be called multiple times as changes occur so do not be surprised they get called more than once. \n\n\n## Conclusion\n\nYou have been introduced to the various lifecycle hooks in Angular, now you know the basics and the reason behind the hooks you have always used in your workflow. You also know about content projection and how it relates to Angular lifecycle hooks.Here is the [link to the complete project with all the hooks on GitHub](https://github.com/viclotana/ng-hooks). Happy hacking!","metaTitle":"A guide to lifecycle hooks in Angular","metaDescription":"Angular is a TypeScript framework which empowers developers to build applications that live on the web, mobile, or the desktop. In this tutorial you will learn about all the hooks available for use in your Angular workflow for building awesome applications."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6yL6067G9KWM8q9ua9XR9F","type":"Entry","createdAt":"2019-06-06T20:16:12.216Z","updatedAt":"2019-07-25T17:27:25.580Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a game using device sensors in React Native","url":"game-device-sensors-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNSensorDemo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6nDfV1cd5C6464wgCoOQii","type":"Entry","createdAt":"2018-02-12T15:08:13.901Z","updatedAt":"2018-02-26T12:31:12.764Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Gaming","url":"gaming","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2019-07-25","description":"Build a mobile game, taking advantage of React Native's device sensors module. Use the gyroscope to detect the tilt of the phone, allowing a player to manipulate objects on screen and dodge obstacles. The game includes a simple scoring system, and can be easily extended.","prerequisite":"You will need Node and React Native installed on your machine. Some knowledge of React Native development is expected.","content":"In this tutorial, we’ll take a look at how you can get the device’s accelerometer data to create a simple dodge game.\n\nMost modern smartphones are equipped with sensors such as the gyroscope, accelerometer, and magnetometer. These sensors are responsible for getting the data required for apps like the compass and your health app.\n\n## Prerequisites\n\nYou will need a good level of understanding of React Native, and familiarity with building and running apps in your development environment to follow this tutorial. \n\nThe following package versions are used to create the app:\n\n\n- Node 11.2\n- Yarn 1.13\n- React Native 0.59\n\nIf you have trouble running the app later on, try to use the versions above.\n\nYou will also need a real device for testing the app as you can’t really tilt in an emulator.\n\n\n## App overview\n\nThe app that we will create is a simple game of dodge. Blocks will be falling from the top part of the screen. The player will then have to slightly tilt their device to the left or to the right to move the ball so they can dodge the falling blocks. \n\nTilting the device to the right will make the ball go to the right, while tilting it to the left does the opposite. If the ball goes off all the way to the left or right where the player can’t see it, it automatically goes back to the middle part of the screen. The bottom part of the screen is where the floor is. \n\nOnce a block collides with the floor, it means that the player has successfully evaded it and their score will be incremented. At any point in the game, the player can also click on the **RESET** button to restart the game. We will be using [React Native Sensors](https://react-native-sensors.github.io/) to get the sensor data, [React Native Game Engine](https://github.com/bberak/react-native-game-engine) to implement the game, and [MatterJS](http://brm.io/matter-js/) as the physics engine.\n\nHere’s what the app will look like:\n\n![react-native-sensors-game-demo](//images.ctfassets.net/1es3ne0caaid/4iV6tUW5qvzeUHBuJ5mADH/bb1afbaf6a4c0cc1e8e056f316fe1340/react-native-sensors-game-demo.gif)\n\nYou can view the code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/RNSensorDemo).\n\n\n## Bootstrapping the app\n\nI’ve prepared a repo which you can clone in order to get the exact same package versions that I used for creating the app. Execute the following commands to bootstrap the app:\n\n```\n    git clone https://github.com/anchetaWern/RNSensorDemo.git\n    cd RNSensorDemo\n    git checkout starter\n    yarn\n    react-native eject\n```\n\nReact Native Sensors is a native module, so you have to follow the [additional steps in setting it up on their website](https://react-native-sensors.github.io/docs/Installation.html).\n\n\n## Building the app\n\nOnce you’ve bootstrapped the app, update the `App.js` file at the root of the project directory and add the following. This will import all the packages we’ve installed:\n\n```javascript\n    import React, { Component } from \"react\";\n    import { StyleSheet, Text, View, Dimensions, Button, Alert } from \"react-native\";\n    import {\n      accelerometer,\n      setUpdateIntervalForType,\n      SensorTypes\n    } from \"react-native-sensors\"; // for getting sensor data\n    \n    import { GameEngine } from \"react-native-game-engine\"; // for implementing the game\n    import Matter from \"matter-js\"; // for implementing game physics (gravity, collision)\n    \n    import randomInt from \"random-int\"; // for generating random integer\n    import randomColor from \"randomcolor\"; // for generating random hex color codes\n```\n\nNext, import the components for rendering the blocks and the ball. We will be creating these later:\n\n```javascript\n    import Circle from \"./src/components/Circle\";\n    import Box from \"./src/components/Box\";\n```\n\nEach of the blocks won’t be falling at the same rate, otherwise, it would be impossible for the player to dodge them all. MatterJS is responsible for implementing game physics. This way, all of the objects in the game (ball, blocks, and floor) will have their own physical attributes. One of the physical attributes which we can assign is the [frictionAir](http://brm.io/matter-js/docs/classes/Body.html#property_frictionAir). This allows us to define the air resistance of the object. The higher the value of this attribute, the faster it will travel through space. The `getRandomDecimal` helper allows us to generate a random value to make the blocks fall faster or slower. We will also create this later:\n\n```javascript\n    import getRandomDecimal from \"./src/helpers/getRandomDecimal\";\n```\n\nNext, get the device’s `height` and `width`. We will be using those to calculate either the position or the dimensions of each of the objects. Below, we also calculate for the middle part of the screen. We’ll use this later on as the initial position for the ball, as well as the position it goes back to if it goes out of the visible area:\n\n```javascript\n    const { height, width } = Dimensions.get('window');\n    \n    const BALL_SIZE = 20; // the ball's radius\n    const DEBRIS_HEIGHT = 70; // the block's height\n    const DEBRIS_WIDTH = 20; // the block's width\n    \n    const mid_point = (width / 2) - (BALL_SIZE / 2); // position of the middle part of the screen\n```\n\nNext, declare the physical attributes of the ball and blocks. The main difference between these two objects is that the ball is static. This means it cannot move on its own. It has to rely on the device’s accelerometer in order to calculate its new position. While the blocks are non-static, which means that they can be affected by physical phenomena such as gravity. This allows us to automatically make the blocks fall without actually doing anything:\n\n```javascript\n    const ballSettings = {\n      isStatic: true\n    };\n    \n    const debrisSettings = { // blocks physical settings\n      isStatic: false\n    };\n```\n\nNext, create the bodies to be used for each of the objects. For now, we’re only creating the bodies for the ball and the floor. Because the blocks needs to have varying physical attributes and positioning, we’ll generate their corresponding bodies when the component is mounted:\n\n```javascript\n    const ball = Matter.Bodies.circle(0, height - 30, BALL_SIZE, {\n      ...ballSettings, // spread the object\n      label: \"ball\" // add label as a property\n    });\n    \n    const floor = Matter.Bodies.rectangle(width / 2, height, width, 10, {\n      isStatic: true,\n      isSensor: true,\n      label: \"floor\"\n    });\n```\n\nThe code above uses the [Matter.Bodies.Circle](http://brm.io/matter-js/docs/classes/Bodies.html#method_circle) and [Matter.Bodies.Rectangle](http://brm.io/matter-js/docs/classes/Bodies.html#method_rectangle) methods from MatterJS to create a body with circular and rectangular frame. Both methods expect the `x` and `y` position of the body for the first and second arguments. While the third argument for the Circle is the radius, and the third and fourth argument for the Rectangle is the width and height of the body. The last argument is an object containing the object’s physical settings. A `label` is also added so we can easily tell each object apart when they collide.\n\nNext, set the update interval for a specific sensor type. In this case, we’re using the accelerometer and we want to update every 15 milliseconds. This means that the function for getting the accelerometer data will only fire off every 15 milliseconds:\n\n```javascript\n    setUpdateIntervalForType(SensorTypes.accelerometer, 15);\n```\n\n\u003e **Note**: For production apps, play around with the interval to come up with the best value to balance between the ball’s responsiveness and battery drain. 15 is just an arbitrary value I came up with during testing.\n\nNext, create the main app component and initialize the state. The state is mainly used for setting the ball’s position and keeping track of the score:\n\n```javascript\n    export default class App extends Component {\n      \n      state = {\n        x: 0, // the ball's initial X position\n        y: height - 30, // the ball's initial Y position\n        isGameReady: false, // game is not ready by default\n        score: 0 // the player's score\n      }\n      \n      // next: add constructor\n    \n    }\n```\n\nNext, add the constructor. This contains the code for initializing the objects (also called entities) in the game and setting up the collision handler:\n\n```javascript\n    constructor(props) {\n      super(props);\n    \n      this.debris = [];\n    \n      const { engine, world } = this._addObjectsToWorld(ball);\n      this.entities = this._getEntities(engine, world, ball);\n    \n      this._setupCollisionHandler(engine);\n    \n      this.physics = (entities, { time }) =\u003e {\n        let engine = entities[\"physics\"].engine; // get the reference to the physics engine\n        engine.world.gravity.y = 0.5; // set the gravity of Y axis\n        Matter.Engine.update(engine, time.delta); // move the game forward in time\n        return entities;\n      };\n    }\n    \n    // next: add componentDidMount\n```\n\nOnce the component is mounted, we subscribe to get the accelerometer data. In this case, we only need to get the data in the `x` axis because the ball is constrained to move only within the `x` axis. From there, we can set the ball’s current position by using the body’s `setPosition` method. All we have to do is add `x` to the current value of `x` in the state. This gives us the new position to be used for the ball:\n\n```javascript\n    componentDidMount() {\n      accelerometer.subscribe(({ x }) =\u003e {\n    \n        Matter.Body.setPosition(ball, {\n          x: this.state.x + x, \n          y: height - 30 // should be constant\n        });\n    \n        this.setState(state =\u003e ({\n          x: x + state.x\n        }), () =\u003e {\n          // next: add code for resetting the ball's position if it goes out of view\n        });\n    \n      });\n    \n      this.setState({\n        isGameReady: true\n      });\n    }\n    \n    // next: add componentWillUnmount\n```\n\nIf the ball goes off to the part of the screen which the user cannot see, we want to the\nbring it back to its initial position. That way, they can start controlling it again. `this.state.x` contains the current position of the ball, so we can simply check if its less than `0` (disappeared off to the left part of the screen) or greater than the device's width (disappeared off to the right part of the screen):\n\n```javascript\n    if (this.state.x \u003c 0 || this.state.x \u003e width) {\n      Matter.Body.setPosition(ball, {\n        x: mid_point,\n        y: height - 30\n      });\n    \n      this.setState({\n        x: mid_point\n      });\n    }\n```\n\nNext, unsubscribe from getting the accelerometer data once the component is unmounted. We don’t want to continuously drain the user’s battery if it’s no longer needed:\n\n```javascript\n    componentWillUnmount() {\n      this.accelerometer.stop();\n    }\n    \n    // next: _addObjectsToWorld\n```\n\nNext, add the code for adding the objects to the world. Earlier, we already created the objects for the ball and the floor. But we’re still yet to create the objects for the blocks. The physics engine is still unaware of the ball and floor object, so we have to add them to the world. Here’s the code for that:\n\n```javascript\n    _addObjectsToWorld = (ball) =\u003e {\n      const engine = Matter.Engine.create({ enableSleeping: true });\n      const world = engine.world;\n    \n      let objects = [\n        ball,\n        floor\n      ];\n      \n      // create the bodies for the blocks\n      for (let x = 0; x \u003c= 5; x++) {\n        const debris = Matter.Bodies.rectangle(\n          randomInt(1, width - 30), // x position\n          randomInt(0, 200), // y position\n          DEBRIS_WIDTH,\n          DEBRIS_HEIGHT,\n          {\n            frictionAir: getRandomDecimal(0.01, 0.5),\n            label: 'debris'\n          }\n        );\n    \n        this.debris.push(debris);\n      }\n    \n      objects = objects.concat(this.debris); // add the blocks to the array of objects \n      Matter.World.add(world, objects); // add the objects\n    \n      return {\n        engine,\n        world\n      }\n    }\n    \n    // next: add _getEntities\n```\n\nIn the above code, we’re using MatterJS to create the physics engine. `enableSleeping` is set to `true` so that the engine will stop updating and collision tracking objects that have come to rest. This setting is mostly used as a performance boost. Once the engine is created, we create six rectangle bodies. These are the blocks (or debris) that will fall from the top part of the screen. Their initial `y` position and `frictionAir` will vary depending on the random numeric value that’s generated. Once all the blocks are generated, we add it to the array of objects and add them to the world.\n\nNext, add the code for getting the entities to be rendered by React Native Game Engine. Note that each of these corresponds to a MatterJS object (ball, floor, and blocks). Each entity has a `body`, `size`, and `renderer`. The `color` we assigned to the `gameFloor` and `debris` is just passed to its renderer as a prop. As you’ll see in the code for the Box component later, the `color` is assigned as the background color:\n\n```javascript\n    _getEntities = (engine, world, ball) =\u003e {\n      const entities = {\n        physics: {\n          engine,\n          world\n        },\n    \n        playerBall: {\n          body: ball,\n          size: [BALL_SIZE, BALL_SIZE], // width, height\n          renderer: Circle\n        },\n    \n        gameFloor: {\n          body: floor,\n          size: [width, 10],\n          color: '#414448',\n          renderer: Box\n        }\n      };\n    \n      for (let x = 0; x \u003c= 5; x++) { // generate the entities for the blocks\n        Object.assign(entities, {\n          ['debris_' + x]: {\n            body: this.debris[x],\n            size: [DEBRIS_WIDTH, DEBRIS_HEIGHT],\n            color: randomColor({\n              luminosity: 'dark', // only generate dark colors so they can be easily seen\n            }),\n            renderer: Box\n          }\n        });\n      }\n    \n      return entities;\n    }\n    \n    // next: _setupCollisionHandler\n```\n\nNext, add the code for setting up the collision handler. In the code below, we listen for the [collisionStart event](http://brm.io/matter-js/docs/classes/Engine.html#event_collisionStart). This event is triggered when any of the objects in the world starts colliding. `event.pairs` stores the information on which objects have started colliding. If a block hits the floor, it means the player have successfully evaded it. We don’t really want to generate new objects as the game proceeds so we simply reuse the existing objects. We can do this by setting a new initial position, that way, it can start falling again. In the case that the ball hit a block, we loop through all the blocks and set them as a static object. This will have a similar effect to gravity being turned off, so the blocks are actually frozen in mid air. At this point, the game is considered over:\n\n```javascript\n    _setupCollisionHandler = (engine) =\u003e {\n      Matter.Events.on(engine, \"collisionStart\", (event) =\u003e {\n        var pairs = event.pairs;\n    \n        var objA = pairs[0].bodyA.label;\n        var objB = pairs[0].bodyB.label;\n    \n        if(objA === 'floor' \u0026\u0026 objB === 'debris') {\n          Matter.Body.setPosition(pairs[0].bodyB, { // set new initial position for the block\n            x: randomInt(1, width - 30),\n            y: randomInt(0, 200)\n          });\n          \n          // increment the player score\n          this.setState(state =\u003e ({\n            score: state.score + 1\n          }));\n        }\n    \n        if (objA === 'ball' \u0026\u0026 objB === 'debris') {\n          Alert.alert('Game Over', 'You lose...');\n          this.debris.forEach((debris) =\u003e {\n            Matter.Body.set(debris, {\n              isStatic: true\n            });\n          });\n        }\n      });\n    }\n    // next: add render\n```\n\nNext, render the UI. The GameEngine component from React Native Game Engine is used to render the entities that we’ve generated earlier. Inside it is the button for resetting the game, and a text for showing the player’s current score:\n\n```javascript\n    render() {\n      const { isGameReady, score } = this.state;\n    \n      if (isGameReady) {\n        return (\n          \u003cGameEngine\n            style={styles.container}\n            systems={[this.physics]}\n            entities={this.entities}\n          \u003e\n            \u003cView style={styles.header}\u003e\n              \u003cButton\n                onPress={this.reset}\n                title=\"Reset\"\n                color=\"#841584\"\n              /\u003e\n              \u003cText style={styles.scoreText}\u003e{score}\u003c/Text\u003e\n            \u003c/View\u003e\n          \u003c/GameEngine\u003e\n        );\n      }\n      return null;\n    }\n    \n    // next: add reset\n```\n\nHere’s the code for resetting the game:\n\n```javascript\n    reset = () =\u003e {\n      this.debris.forEach((debris) =\u003e { // loop through all the blocks\n        Matter.Body.set(debris, {\n          isStatic: false // make the block susceptible to gravity again\n        });\n        Matter.Body.setPosition(debris, { // set new position for the block\n          x: randomInt(1, width - 30),\n          y: randomInt(0, 200)\n        });\n      });\n    \n      this.setState({ \n        score: 0 // reset the player score\n      });\n    }\n```\n\nLastly, here are the styles:\n\n```javascript\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        backgroundColor: '#F5FCFF',\n      },\n      header: {\n        padding: 20,\n        alignItems: 'center'\n      },\n      scoreText: {\n        fontSize: 25,\n        fontWeight: 'bold'\n      }\n    });\n```\n\n### Box component\n\nHere’s the code for the Box component:\n\n```javascript\n    // src/components/Box.js\n    import React, { Component } from \"react\";\n    import { View } from \"react-native\";\n    \n    const Box = ({ body, size, color }) =\u003e {\n      const width = size[0];\n      const height = size[1];\n     \n      const x = body.position.x - width / 2;\n      const y = body.position.y - height / 2;\n    \n      return (\n        \u003cView\n          style={{\n            position: \"absolute\",\n            left: x,\n            top: y,\n            width: width,\n            height: height,\n            backgroundColor: color\n          }}\n        /\u003e\n      );\n    };\n    \n    export default Box;\n```\n\n### Circle component\n\nHere’s the code for the Circle component:\n\n```javascript\n    // src/components/Circle.js\n    import React, { Component } from \"react\";\n    import { View, StyleSheet, Dimensions } from \"react-native\";\n    \n    const { height, width } = Dimensions.get('window');\n    \n    const BODY_DIAMETER = Math.trunc(Math.max(width, height) * 0.05);\n    const BORDER_WIDTH = Math.trunc(BODY_DIAMETER * 0.1);\n    \n    const Circle = ({ body }) =\u003e {\n      const { position } = body;\n      const x = position.x - BODY_DIAMETER / 2;\n      const y = position.y - BODY_DIAMETER / 2;\n      return \u003cView style={[styles.head, { left: x, top: y }]} /\u003e;\n    };\n    \n    export default Circle;\n    \n    const styles = StyleSheet.create({\n      head: {\n        backgroundColor: \"#FF5877\",\n        borderColor: \"#FFC1C1\",\n        borderWidth: BORDER_WIDTH,\n        width: BODY_DIAMETER,\n        height: BODY_DIAMETER,\n        position: \"absolute\",\n        borderRadius: BODY_DIAMETER * 2\n      }\n    });\n```\n\n### Random decimal helper\n\nHere’s the code for generating a random decimal:\n\n```javascript\n    // src/helpers/getRandomDecimal.js\n    const getRandomDecimal = (min, max) =\u003e {\n      return Math.random() * (max - min) + min;\n    }\n    \n    export default getRandomDecimal;\n```\n\n## Running the app\n\nAt this point, you should be able to run the app and play the game:\n\n```\n    react-native run-android\n    react-native run-ios\n```\n\n## Conclusion\n\nIn this tutorial, you learned how to get the device’s accelerometer data from a React Native app and use it to control the ball. \n\nYou can view the code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/RNSensorDemo).","metaTitle":"Build a game using device sensors in React Native","metaDescription":"Build a mobile game, taking advantage of React Native's device sensors module. Use the gyroscope to detect the tilt of the phone, allowing a player to manipulate objects on screen and dodge obstacles. The game includes a simple scoring system, and can be easily extended."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"32pX328VlWKs0hx7pybXo7","type":"Entry","createdAt":"2019-07-23T19:34:39.047Z","updatedAt":"2019-07-23T19:34:39.047Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Implement the CallKit extension for iOS - Part 2: CallKit extension","url":"callkit-ios-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2GvYfvJlzFPjwmlWvF5u9L","type":"Entry","createdAt":"2019-07-20T21:48:16.439Z","updatedAt":"2019-07-20T21:48:16.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Paul Wilkinson","url":"paul-wilkinson","email":"paulw@wilko.me","twitter":"https://twitter.com/PaulWilko","github":"https://github.com/paulw11","guestWriter":true}}],"projectRepo":"https://github.com/paulw11/CallKitTutorial","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2019-07-23","description":"This tutorial will show you how to use Apple's CallKit to create an iOS app that you can use to add names and numbers to a caller ID list, and add numbers to a block list. In part two, create the CallKit extension.\n","prerequisite":"You will need Xcode 10+ installed on your machine.","content":"## Introduction\n\nApple's CallKit framework for iOS is often used to create integrated VoIP apps for the iPhone.\nCallKit also lets you add numbers to the phone block list and Caller ID lists. This is the capability we will be exploring in this tutorial series.\n\nIn [part one](https://pusher.com/tutorials/callkit-ios-part-1) of this tutorial you created an iOS app that you can use to add names and numbers to a caller ID list and add numbers to a block list.\nIn this, the second part, you will create a CallKit extension that provides these lists to the iOS phone app.\n\nThe key concepts covered by this tutorial are:\n\n- Sharing Core Data between an iOS app and an iOS extension\n- Reloading a CallKit extension from an iOS app\n- Debugging an iOS app extension\n\n### Prerequisites\n\n- A Mac with Xcode 10\n- An iPhone (You cannot use the simulator to test CallKit extensions)\n- Familiarity with Xcode and storyboards\n- Familiarity with general UIKit programming\n\n## Building the App Extension\n\n### Getting Started\nStart by opening the `CallKitTutorial` project that you created in part one.\n\n1. Select the **File-\u003eNew-\u003eTarget...** menu item.\n2. Select **Call Directory Extension** from the available items and click **Next**\n3. Use  `CallKitTutorialExtension` for the name and click **Finish.**\n4. Activate the new scheme if prompted by Xcode.\n\n\n![callkit-extension-ios-part2-img1](//images.ctfassets.net/1es3ne0caaid/2UFkK5Enjlil3OQdow4gxT/c1f2ad34b2d828f6159f86ac4e1945bf/callkit-extension-ios-part2-img1.png)\n\n\nXcode has created a new folder, `CallKitTutorialExtension`, in the project navigator. Inside this folder you will see the file `CallDirectoryHandler.swift`. This file contains sample code that uses fixed strings to identify and block numbers. We will replace this with code that fetches numbers from the Core Data repository we created in part one.\n\nIn part one, we created the `CallerData` framework to hold the Core Data code. We need to add this framework to the `CallKitTutorial` extension.\n\n1. Select the blue `CallKitTutorial` project node at the top of the project navigator.\n2. Select the `CallKitTutorialExtension` target from the **TARGETS** list.\n3. Click the '+' sign under ***Linked Frameworks and Libraries****.*\n4. Select `CallerData.framework` from the pop up window.\n5. Click **Add**.\n\nWe also create an Application Group in part one. This lets the app and the extension share data. We need to allow the extension to access this Application Group:\n\n1. Select the CallKitTutorialExtension target\n2. Select the **Capabilities** tab\n3. Turn on the switch next to **App Groups**\n4. Select the app group you created in part one. It will end with `.CallKitTutorial` if you followed the suggestion in part one.\n\n### Extension operation\n\nOpen `CallDirectoryHandler.swift`. You will see that it subclasses the `[CXCallDirectoryProvider](https://developer.apple.com/documentation/callkit/cxcalldirectoryprovider)` class. This protocol defines all of the functions that a CallKit Directory extension needs to implement.\n\nYou might imagine that these functions would receive the number of an incoming call and return either identification or blocking information. This isn't, however, how the directory extension operates. Providing incoming call details to the extension would violate the user's privacy.\nThe directory extension actually provides identification and blocking data to iOS when requested. iOS incorporates this data into the phone application. It is the phone application that blocks or identifies callers.\n\niOS requests data from the extension when:\n\n- The phone starts up.\n- The extension is enabled in the Settings App.\n- The app that hosts the extension requests an extension reload\n\nWhen iOS requests data the following happens:\n\n1. The extension's `beginRequest` function is called. This function receives an instance of `CXCallDirectoryExtensionContext`\n2. The extension adds blocking and identification details by calling `addBlockingEntry` and `addIdentificationEntry` on the context\n3. The extension calls `completeRequest` on the context when it has finished adding entries.\n\n### Modify the template code\n\nThe first function you will see in `CallDirectoryHandler.swift` is `beginRequest`:\n```swift\n    // CallKitTutorialExtension/CallDirectoryHandler.swift\n    \n    override func beginRequest(with context: CXCallDirectoryExtensionContext) {\n        context.delegate = self\n    \n        // Check whether this is an \"incremental\" data request. If so, only provide the set of phone number blocking\n        // and identification entries which have been added or removed since the last time this extension's data was loaded.\n        // But the extension must still be prepared to provide the full set of data at any time, so add all blocking\n        // and identification phone numbers if the request is not incremental.\n        if context.isIncremental {\n            addOrRemoveIncrementalBlockingPhoneNumbers(to: context)\n    \n            addOrRemoveIncrementalIdentificationPhoneNumbers(to: context)\n        } else {\n            addAllBlockingPhoneNumbers(to: context)\n    \n            addAllIdentificationPhoneNumbers(to: context)\n        }\n    \n        context.completeRequest()\n    }\n```\n\nYou can see that iOS can request an *incremental* or *complete* update. The `isIncremental` property of the `context` indicates the type of update that iOS is requesting. To actually perform an incremental update, we need to know the date \u0026 time of the previous update. `UserDefaults` provides a convenient place to store this information.\n\nChange the function so that it looks like this:\n```swift\n    // CallKitTutorialExtension/CallDirectoryHandler.swift\n    \n    override func beginRequest(with context: CXCallDirectoryExtensionContext) {\n        context.delegate = self\n    \n        // Check whether this is an \"incremental\" data request. If so, only provide the set of phone number blocking\n        // and identification entries which have been added or removed since the last time this extension's data was loaded.\n        // But the extension must still be prepared to provide the full set of data at any time, so add all blocking\n        // and identification phone numbers if the request is not incremental.\n    \n        let defaults = UserDefaults.standard\n    \n        if let lastUpdate = defaults.object(forKey: \"lastUpdate\") as? Date, context.isIncremental {\n            addOrRemoveIncrementalBlockingPhoneNumbers(to: context, since: lastUpdate)\n    \n            addOrRemoveIncrementalIdentificationPhoneNumbers(to: context, since: lastUpdate)\n        } else {\n            addAllBlockingPhoneNumbers(to: context)\n    \n            addAllIdentificationPhoneNumbers(to: context)\n        }\n    \n        defaults.set(Date(), forKey:\"lastUpdate\")\n    \n        context.completeRequest()\n    }\n```\n\nNow the code only performs an incremental update if the last update time is available. Once the updates are complete, the time of this update is stored in `UserDefaults`.\nAdding the `since` parameter to `addOrRemoveIncrementalBlockingPhoneNumbers` and `addOrRemoveIncrementalIdentificationPhoneNumbers` will cause errors. Don't worry. We will fix that shortly.\n\nThe example code provided in the template uses fixed data. We want to get our data from the Core Data store we set up in part one. The `CallerData` framework already has the functions we need to do that.\n\nFirst, lets ensure we can access our `CallerData` framework and Core Data. Add:\n```swift\n    // CallKitTutorialExtension/CallDirectoryHandler.swift\n    \n    import CallerData\n    import CoreData\n```\n\nto the imports at the top of `CallDirectoryHandler.swift`. \n\nNow add a property and a function to the `CallDirectoryHandler` class:\n```swift\n    // CallKitTutorialExtension/CallDirectoryHandler.swift\n    \n    private let callerData = CallerData()\n    \n    private func callers(blocked: Bool, includeRemoved: Bool = false, since date: Date? = nil) throws -\u003e [Caller]  {\n        let fetchRequest:NSFetchRequest\u003cCaller\u003e = self.callerData.fetchRequest(blocked: blocked, includeRemoved: includeRemoved, since: date)\n        let callers = try self.callerData.context.fetch(fetchRequest)\n        return callers\n    }\n```\n\nThe `callerData` property provides an instance of the `CallerData` class that we created in part one. \nWe will use the `callers` function to fetch the data we will need.\n\nReplace `addAllBlockingPhoneNumbers` with the following:\n```swift\n    // CallKitTutorialExtension/CallDirectoryHandler.swift\n    \n    private func addAllBlockingPhoneNumbers(to context: CXCallDirectoryExtensionContext) {\n        if let callers = try? self.callers(blocked: true) {\n            for caller in callers {\n                context.addBlockingEntry(withNextSequentialPhoneNumber: caller.number)\n            }\n        }\n    }\n```\n\nThat was easy. Omitting the `includeRemoved` and `since` parameters from the call to `self.callers` means that code uses default values of `false` and `nil` from the function declaration, returning all numbers in the data store.\n\n\u003e Note the name of the parameter to `addBlockingEntry` - `withNextSequentialPhoneNumber`. You must provide numbers to CallKit in ascending order. There is a sort clause in the Core Data fetch that takes care of that for us. If you are writing your own extension make sure you sort your data.\n\nNext, replace the `addOrRemoveIncrementalBlockingPhoneNumbers` from the template with this code:\n```swift\n    // CallKitTutorialExtension/CallDirectoryHandler.swift\n    \n    private func addOrRemoveIncrementalBlockingPhoneNumbers(to context: CXCallDirectoryExtensionContext, since date: Date) {\n        if let callers = try? self.callers(blocked: true, includeRemoved: true, since: date) {\n            for caller in callers {\n                if caller.isRemoved {\n                    context.removeBlockingEntry(withPhoneNumber: caller.number)\n                } else {\n                    context.addBlockingEntry(withNextSequentialPhoneNumber: caller.number)\n                }\n            }\n        }\n    }\n```\n\nWe use the `since` date to identify changes that have occurred after the previous update. We also need to consider the case where a number was *unblocked* by removing it from the blocking list. The record's `isRemoved` property determines whether to add or remove the number.\n\nAdding identification entries is very similar; the only difference is that both a name and number are required.\n\nReplace `addAllIdentificationPhoneNumbers` and `addOrRemoveIncrementalIdentificationPhoneNumbers` with:\n```swift\n    // CallKitTutorialExtension/CallDirectoryHandler.swift\n    \n    private func addAllIdentificationPhoneNumbers(to context: CXCallDirectoryExtensionContext) {\n            if let callers = try? self.callers(blocked: false) {\n                for caller in callers {\n                    if let name = caller.name {\n                        context.addIdentificationEntry(withNextSequentialPhoneNumber: caller.number, label: name)\n                    }\n                }\n            }\n        }\n    \n    private func addOrRemoveIncrementalIdentificationPhoneNumbers(to context: CXCallDirectoryExtensionContext, since date: Date) {\n        if let callers = try? self.callers(blocked: false, includeRemoved: true, since: date) {\n            for caller in callers {\n                if caller.isRemoved {\n                    context.removeIdentificationEntry(withPhoneNumber: caller.number)\n                } else {\n                    if let name = caller.name {\n                        context.addIdentificationEntry(withNextSequentialPhoneNumber: caller.number, label: name)\n                    }\n                }\n            }\n        }\n    }\n```\n\nWe are almost ready to run the app. The last thing we need to provide a method for the main app to trigger the `beginRequest` function in the CallKit extension.  We can’t do this directly due to the iOS sandbox.  Rather, we must submit a request to iOS, asking it to notify the extension that there is new data.  We can use `[CXCallDirectoryManager](https://developer.apple.com/documentation/callkit/cxcalldirectorymanager)` [](https://developer.apple.com/documentation/callkit/cxcalldirectorymanager)to do this.\n\nOpen the `ViewController.swift` file from part 1 and find the `reloadTapped` function. Add the code to tell the extension that there is changed data:\n```swift\n    // CallKitTutorial/ViewController.swift \n    \n    @IBAction func reloadTapped(_ sender: UIButton) {\n        CXCallDirectoryManager.sharedInstance.reloadExtension(withIdentifier: \"me.wilko.CallKitTutorial.CallKitTutorialExtension\", completionHandler: { (error) in\n            if let error = error {\n                print(\"Error reloading extension: \\(error.localizedDescription)\")\n            }\n        })\n    }\n```\nYou will need to change the string in `reloadExtension(withIdentifier:)` to the bundle id for your extension. You can find this in the settings for the `CallKitTutorialExtension` target in Xcode.\n\nOpen the `Main.storyboard` file and select the `Reload extension` button. Drag from **touch up inside** in the connections inspector to the view controller object and select `reloadTapped` from the popup. This will call the `reloadTapped` function when the user taps on the button.\n\n### Ready to run\n\nWe can now run the app. Select `CallKitTutorial` from the scheme drop down at the top of the Xcode window and hit the \"play\" button. Make sure that you have selected your iPhone from the device drop down. Hit the \"+\" sign and add an entry for a number from which you can make a call. Make sure you use the full 'e.164' number format as discussed in part one.\n\n\n\u003e **Note**: Your phone's contacts will override a CallKit extension. If the calling number matches an entry in your contacts then the phone shows that name. The phone blocks a number in the block list even if you have a matching contact.\n\n### Enable the extension\n\nInstalling the app on your phone also installed the CallKit extension, but it won't do anything until you enable it.\n\nOpen the *Settings* application and find *Call blocking and identification* under *Phone*.  You will see a switch next to “CallKitTutorial”.  Turn it on to enable your extension.\n\nNow call your iPhone. You should see the name you entered as the caller identification, along with an indication that the name came from our app.\n\nOpen the CallKit Tutorial app again. Remove the number from the **ID** list and add it to the **Block** list. Tap the **Reload extension** button.\n\nNow call your iPhone again. This time your call should go straight to voicemail (or you may get a busy tone - it depends on what call forwarding you have enabled on your service).\nCongratulations; you have created a working CallKit directory extension!\n\n### Debugging the extension\n\nThe Xcode debugger is a powerful tool that lets you examine your code in operation. You may have used it to debug your apps. You can also use it to debug extensions. The process is a little different to debugging an app as you don't directly launch an extension.\n\nOpen `CallDirectoryHandler.swift` and click in the margin next to the first line in the `beginRequest` function. The blue flag indicates that a *breakpoint* has been set. When execution reaches this line, program execution will be suspended and Xcode will enter the debugger.\n\n\n![callkit-extension-ios-part2-img2](//images.ctfassets.net/1es3ne0caaid/7Dyz64sPnuaT0sJ89bdzXy/5a6dbffe998376edfa91114ef34efec8/callkit-extension-ios-part2-img2.png)\n\n\nOnce you have set the breakpoint you need to run your code. Select *CallKitTutorialExtension* and your device in the target drop down. Hit the **play** button to launch your code as usual. At this point you will see something different. Xcode will ask which app you want to launch as you can't run the extension itself.\n\n\n![callkit-extension-ios-part2-img3](//images.ctfassets.net/1es3ne0caaid/5nG8hxIfcJFp68uT48u3hA/a963eece8d630c11c11fcea1ca48b44a/callkit-extension-ios-part2-img3.png)\n\n\nSelect **CallKitTutorial** and tap **Run**.\n\nOnce the app has launched on your phone, tap the **Reload extension** button. After a few seconds the Xcode debugger will open with the line where we added the breakpoint selected. You can step through the code and examine variables to observe how the extension operates.\n\nFor example, we can determine if this is an incremental update request or not. At the green *(lldb)* prompt in the bottom right window, enter the command `po context.isIncremental` and press return. The debugger will show the value of this variable, either `true` or `false`.\n\n\u003e The `po` command is an alias for the `expression` command (type `help po` at the (lldb) prompt for more information). In this case we used it to evaluate a property value, but it can evaluate more complex expressions. For example, entering `po if context.isIncremental { print(\"Is incremental\")}` will print Is incremental if `isIncremental` is `true`.\n\nUse the **step over** and **step into** buttons to execute your extension code one line at a time and observe how it works.\n\n## Conclusion\n\nIn this tutorial we have created a CallKit extension that uses shared Core Data to identify and block callers.\n\n- We added an app extension to an existing iOS app.\n- We re-used the Core Data framework that we created in part one.\n- We explored debugging app extensions using the Xcode debugger.\n\nThe completed code for parts one and two of this tutorial series is [available on GitHub](https://github.com/paulw11/CallKitTutorial).","metaTitle":"Implement the CallKit extension for iOS - Part 2","metaDescription":"This tutorial will show you how to use Apple's CallKit to create an iOS app that you can use to add names and numbers to a caller ID list, and add numbers to a block list. In part two, create the CallKit extenstion.\n"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3GEmN2QbB18biFiAR7tHx9","type":"Entry","createdAt":"2019-07-22T19:18:56.676Z","updatedAt":"2019-07-22T19:18:56.676Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Pusher Beams client API demo for Android","url":"beams-api-demo-android","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"58WBWjhcWcuAMI6qIAyiC4","type":"Entry","createdAt":"2018-12-13T20:46:00.073Z","updatedAt":"2018-12-13T20:46:36.867Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Suragch","url":"suragch","email":"studymongolian@gmail.com","twitter":"https://twitter.com/suragch","github":"https://github.com/suragch","guestWriter":true}}],"projectRepo":"https://github.com/suragch/android_beams_api_demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}}],"reviewDate":"2019-07-22","description":"This tutorial will help you understand what each part of the Beams API does in a client Android app. You will go you through code examples to explore what each method does, and an Android project with pointers for how to set the demo up and how to send push notifications to test it.","prerequisite":"Some knowledge of Android development and familiarity with sending POST requests will be helpful.","content":"## Introduction\n\nThe purpose of this tutorial is to help you understand what each part of the Beams API does in a client Android app. Consider this a supplement to the [Beams documentation](https://pusher.com/docs/beams/reference/android) if you need a little extra explanation. I'll take you through code examples and explain what each method does. The whole demo project is available on [GitHub](https://github.com/suragch/android_beams_api_demo) so that you can see the code in context.\n\n\n## Prerequisites\n\nThis is more of a reference material rather than a step-by-step tutorial, but since it does contain an Android project demonstrating the full API of the Android Beams SDK, I’ll give you some pointers for how to set the demo up and how to send push notifications to test it.\n\nIf you running the demo project, these are the prerequisites:\n\n- Knowledge of Android development. (I used [Android Studio 3.4](https://developer.android.com/studio/), Kotlin, and the AndroidX support library to make the demo.)\n- Able to [set up a basic Beams project.](https://pusher.com/docs/beams/getting-started/android/configure-fcm)\n- Familiarity with sending POST requests. I’ll give you the [curl](https://curl.haxx.se/) commands to initiate push notifications, but you are welcome to use another tool like [Postman](https://www.getpostman.com/downloads/).\n- Knowledge of server side development (mostly optional). You do ***not*** need a backend server to send push notifications to device interests. However, to send notifications to authenticated users, a server is required. This will only apply to the “setUserId()” section of this article (the **Set ID** button of the demo). The other parts of the demo app do not require a server. I’ll be using the Dart server from [a previous tutorial](https://pusher.com/tutorials/push-notifications-dart-android-ios), but you are free to port that code to any [server language that Pusher supports](https://pusher.com/docs/beams/reference/all-libraries).\n\nThis project was tested with Pusher Beams Android SDK version 1.4.2.\n\n\n## Demo setup\n\nThe demo app I’ll be using has [a layout](https://github.com/suragch/android_beams_api_demo/blob/master/app/src/main/res/layout/activity_main.xml) with buttons to show each part of the Beams SDK. \n\n![android-beams-api-demo-img1](//images.ctfassets.net/1es3ne0caaid/1nBIvqwVU4VeEJofY5l00e/0ce6b1eddb05472968c2db0ce52fadeb/android-beams-api-demo-img1.png)\n\nTo set up this demo app, perform the following tasks:\n\n\n1. Clone the [GitHub repo](https://github.com/suragch/android_beams_api_demo)\n2. Create a [Beams instance and configure FCM](https://pusher.com/docs/beams/getting-started/android/configure-fcm). You can follow the quick start guide. The Android package name is `com.example.beamsapidemo`. Enter the FCM Server Key and download the `google-service.json` file. At that point you can quit the quick start wizard. Go to your [Beams dashboard](https://dash.pusher.com/beams), open your new instance, and go to the **Credentials** tab. You will find your Instance ID and Secret Key there. \n3. In the cloned repo, replace `app/google-services.json` with the one you downloaded from the FCM setup.\n4. In the cloned repo’s `MainActivity.kt` file, set the `INSTANCE_ID` constant to your Instance ID.\n5. Run the app on the Android emulator.\n\nThe interesting parts of the repo (with code comments) are here:\n\n- [AndroidManifest.xml](https://github.com/suragch/android_beams_api_demo/blob/master/app/src/main/AndroidManifest.xml)\n- [MainActivity.kt](https://github.com/suragch/android_beams_api_demo/blob/master/app/src/main/java/com/example/beamsapidemo/MainActivity.kt)\n- [NotificationMessagingService.kt](https://github.com/suragch/android_beams_api_demo/blob/master/app/src/main/java/com/example/beamsapidemo/NotificationsMessagingService.kt)\n\nI will describe the aspects related to sending push notifications below.\n\n\n## How to send a notification\n\nIn the descriptions throughout this article I will direct you to send push notifications to test the app. You could do that from a server, but for simplicity we'll use curl. (Alternatively, you could use Postman if you are more comfortable with that.)\n\nBelow are some curl commands that you will find useful. Replace the `SSSSSSSSSSSSSSSSS` with your Beams Secret Key and replace `IDIDIDIDIDIDID` with your Beams Instance ID, both of which you can find in your [Beams dashboard](https://dash.pusher.com/beams) under the **Credentials** tab for your instance.\n\nSending an FCM push notification for the device interest `apple`:\n\n```\n    curl -H \"Content-Type: application/json\" \\\n         -H \"Authorization: Bearer SSSSSSSSSSSSSSSSS\" \\\n         -X POST \"https://IDIDIDIDIDIDID.pushnotifications.pusher.com/publish_api/v1/instances/IDIDIDIDIDIDID/publishes/interests\" \\\n         -d '{\"interests\":[\"apple\"],\"fcm\":{\"notification\":{\"title\":\"My title\",\"body\":\"Body message\"}}}'\n```\n\nYou can change apple to something else or include multiple interests. That is, replace `[\"apple\"]` with `[\"apple\",\"pear\"]`.\n\nSending an FCM push notification to an authenticated user `Mary`:\n\n```\n    curl -H \"Content-Type: application/json\" \\\n         -H \"Authorization: Bearer SSSSSSSSSSSSSSSSS\" \\\n         -X POST \"https://IDIDIDIDIDIDID.pushnotifications.pusher.com/publish_api/v1/instances/IDIDIDIDIDIDID/publishes/users\" \\\n         -d '{\"users\":[\"Mary\"],\"fcm\":{\"notification\":{\"title\":\"My title\",\"body\":\"Hey, Mary\"}}}'\n```\n\nThis one is the same as the interests request, except that the string `interests` is replaced with `users` (in the path and in the JSON key), and the JSON value for `users` includes `\"Mary\"` in the array. I changed the message body a little, too.\n\n\n## SDK\n\nIn each section below I’ll describe what the methods of the SDK do.\n\n### start()\n\nYou always need to call the `start()` method first. If you try to run other methods before calling this one, your app will crash. Normally you would call it in your activity's `onCreate()` method, but in the demo app I put it in a button clicked method. This lets you see the app crash if you are so inclined.\n\n```\n    PushNotifications.start(this, INSTANCE_ID)\n```\n\nThe start method takes two parameters. The first is the context. Since we are in an Activity, I used `this`. The second is the instance ID. I added the instance ID as a constant at the top of [the class](https://github.com/suragch/android_beams_api_demo/blob/master/app/src/main/java/com/example/beamsapidemo/MainActivity.kt):\n\n```kotlin\n    companion object {\n        // replace this with your Beams instance ID\n        const val INSTANCE_ID = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n    }\n```\n\nMy instance ID is different than yours will be. You can get it from your [Beams dashboard](https://dash.pusher.com/beams).\n\n### stop()\n\nCalling `stop()` means that you won't get any more notifications. The state (device interests and Beams token) is deleted on the local device and on the remote Pusher server. \n\n```\n    PushNotifications.stop()\n```\n\nIf you want to start getting messages again, you will need to call `start()` and resubscribe to any interests that you want (since the state was deleted). Calling another method without calling `start()` first may cause the app to crash (Although, in my tests I could manipulate the device interests without causing a crash. At best, the state should be considered undefined.)\n\nOne use case for `stop` would be if a user wanted to opt out of receiving all notifications.\n\nWhen a user logs out, prefer using `clearAllState()`. See the “User” section below.\n\n### Testing it out\n\nStart must be called first:\n\n\n- Do a fresh run of the app \n- Don't click the **Start** button\n- Click some other buttons\n- See the app crash\n\nStopping clears the state:\n\n\n- Click the **Start** button\n- Click the **Add** button\n- Add the \"apple\" device interest\n- Click the **Get** button\n- Note that \"apple\" is an interest\n- Click the **Stop** button\n- Click the **Get** button\n- Note that there are no interests\n\n![android-beams-api-demo-img2](//images.ctfassets.net/1es3ne0caaid/2WPV9sLrkD9bn9417bHYJu/9db55a463c9f6424e77217fdc0e90a00/android-beams-api-demo-img2.gif)\n\nStopping prevents notifications from being delivered:\n\n\n- Click the **Start** button\n- Click the **Add** button \n- Choose \"apple\"\n- Click the **Stop** button\n- Exit the app to put it in the background\n- Send a notification to users subscribed to the \"apple\" interest (Refer back to the \"How to send a notification\" section for help)\n- You should not receive a message\n\n\n## Device Interests\n\nInterests are topics that a device can subscribe to. A device can subscribe to multiple topics in the form of a list of strings. When the server sends a push notification for a string that is in the device's list of interests, that device will receive a notification.\n\n### getDeviceInterests()\n\nThis method returns `Set\u003cString\u003e`, which is a list of all of the interests that the device is subscribed to.\n\n```\n    val interests = PushNotifications.getDeviceInterests()\n```\n\nAs long as you don't call `stop()`, `clearInterests()`, or `clearAllState()`, the interests will still be available between runs of the app, even if the device powers down and restarts.\n\n### setDeviceInterests()\n\nWith `setDeviceInterests` you can choose a new list of interests to subscribe to. This replaces any old list that the device might have had. The device will receive push notifications for all interests in this list, but not for any interests outside of this list.\n\n```\n    PushNotifications.setDeviceInterests(interests)\n```\n\nThe type of the parameter `interests` is `Set\u003cString\u003e`. In the case of the demo app, this Set is obtained from a CheckBox alert dialog.\n\n### clearDeviceInterests()\n\nThere is nothing difficult about `clearDeviceInterests()`. It does what it says and removes any interests that the device is subscribed to. The device will no longer receive push notifications for any interests.\n\n```\n    PushNotifications.clearDeviceInterests()\n```\n\n### addDeviceInterest()\n\nThis method adds an interest to the list of interests that the device is already subscribed to. The device will receive push notifications for this interest.\n\n```\n    PushNotifications.addDeviceInterest(interest)\n```\n\nThe type for the parameter `interest` is a `String`.\n\nAdding the same interest twice does not cause a crash. It's the same as adding it once.\n\n### removeDeviceInterest()\n\nThis method removes an interest from the list of interests that the device is already subscribed to. The device will no longer receive push notifications for this interest.\n\n```\n    PushNotifications.removeDeviceInterest(interest)\n```\n\nThe type for the parameter `interest` is a `String`.\n\nTrying to remove an interest that the device is not subscribed to does not cause a crash.\n\n### Testing it out\n\nThese tests assume that you have already clicked the **Start** button to start the SDK.\n\nAdding an interest allows the device to receive a notification\n\n\n- Click the **Add** button\n- Choose \"apple\"\n- Put the app in the background\n- Send a push notification for \"apple\"\n- Note that the device receives the notification\n\n\n![android-beams-api-demo-img3](//images.ctfassets.net/1es3ne0caaid/qb5OOjU37oMhW4loZYDg7/3ead293a1ef6c81d01e10b2d67068b2e/android-beams-api-demo-img3.gif)\n\nRemoving an interest causes the device to not receive notification:\n\n\n- Continuing from the last test, click the **Remove** button\n- Choose \"apple\"\n- Put the app in the background\n- Send a push notification for \"apple\"\n- Note that the device doesn't receive a notification\n\nSetting a list of interests replaces the old list:\n\n\n- Click the **Set** button\n- Choose \"apple\" and \"banana\"\n- Click the **Get** button\n- Note that \"apple\" and \"banana\" are in the list\n- Click the **Set** button again\n- Choose \"banana\" and \"orange\"\n- Click the **Get** button again\n- Note that \"banana\" and \"orange\" are in the list but \"apple\" is not\n\n\n## User\n\nWhile interests are for sending push notifications to a large numbers devices by topic, user notifications can be sent to specific authenticated users. The notification will go to every device on which the user is logged in.\n\n### setUserId()\n\nOf all the methods in the Beams SDK, this one is the most complex. Part of the reason is security. You have to prove who you are before Pusher will send you user specific notifications. Otherwise you could just say you're me and then get all of my private notifications.\n\nThe way it works is like this. First of all, a user who wants to receive private notifications gets a Beams token from the app server (not Pusher). This could be a one-step process using basic authentication with a username and password. Or it could be a two-step process of first logging in to get a session token and then using it to get a Pusher token. The server creates the Pusher token by signing a JWT payload with the instance's secret key. After the user has the Pusher token, it is sent to Pusher to prove they are who they say are. Only then will Pusher send them personal notifications.\n\nHere is the sequence diagram taken from the [Beams documentation](https://pusher.com/docs/beams/concepts/authenticated-users#authentication-process):\n\n![android-beams-api-demo-img4](//images.ctfassets.net/1es3ne0caaid/3eEKxd4k8O8Mnk8LgnicRA/14e9ec81e8fd49ba39f16a32c671214c/android-beams-api-demo-img4.png)\n\nThe process above is somewhat hidden by the Beams Android client API. The `setUserId` method takes three parameters:\n\n```\n    PushNotifications.setUserId(\n        userId: String, \n        tokenProvider: TokenProvider, \n        callback: BeamsCallback\u003cVoid, PusherCallbackError\u003e\n    ) \n```\n\n- The `userId` is the username that the app server knows the user as, and also what Pusher will use. When the app server wants to send a notification to a user, it will use this ID.\n- The [`TokenProvider`](https://github.com/pusher/push-notifications-android/blob/master/pushnotifications/src/main/java/com/pusher/pushnotifications/auth/TokenProvider.kt) is an interface with a single method, that is, `fetchToken(userId: String)`. You pass in the user ID and get back the Beams token. The Android SDK uses this method to get the Beams token from your server whenever it needs it. You could write your own implementation of the `TokenProvider` interface, but the SDK already has one called `BeamsTokenProvider`. The source code is [here](https://github.com/pusher/push-notifications-android/blob/master/pushnotifications/src/main/java/com/pusher/pushnotifications/auth/BeamsTokenProvider.kt) if you want to see what it does. \n- The `callback` allows you to handle the success or failure of the `setUserId` request.\n\nSince `setUserId` requires a `TokenProvider` and most people will use the `BeamsTokenProvider`, lets take a look at it. It has two parameters:\n\n```\n    BeamsTokenProvider(\n        authUrl: String,\n        authDataGetter: AuthDataGetter\n    )\n```\n\n- The `authUrl` is the endpoint on your server where you request the Beams token. It could be something like `https://www.example.com/beamstoken`.\n- Your server also needs other authentication data like an auth header or query parameters. This is where `AuthDataGetter` comes in. It’s an interface with a single method `getAuthData()`, which returns an `AuthData` instance. `AuthData` is data class to hold the headers and query parameters.\n\n```\n    AuthData(\n        headers: Map\u003cString, String\u003e,\n        queryParams: Map\u003cString, String\u003e\n    )\n```\n\n- The `headers` are a map of whatever auth data your server uses to authenticate a user. For example, the key would probably be `Authorization` and the value might be `Bearer sometoken`.\n- Some authentication setups provide the session token as a query parameter, in which case you would set it in `queryParams`. If you are not using it, though, you can leave this parameter out.\n\nSo after all that explanation, here is what setting the user ID looks like in the [demo app](https://github.com/suragch/android_beams_api_demo/blob/master/app/src/main/java/com/example/beamsapidemo/MainActivity.kt):\n\n```kotlin\n    // basic authentication credentials\n    val userId = \"Mary\"\n    val password = \"mypassword\"\n    val text = \"$userId:$password\"\n    val data = text.toByteArray()\n    val base64 = Base64.encodeToString(data, Base64.NO_WRAP)\n    \n    // Token Provider\n    val serverUrl = \"http://10.0.2.2:8888/token\"\n    val tokenProvider = BeamsTokenProvider(\n        serverUrl,\n        object: AuthDataGetter {\n            override fun getAuthData(): AuthData {\n                return AuthData(\n                    headers = hashMapOf(\n                        \"Authorization\" to \"Basic $base64\"\n                    )\n                )\n            }\n        }\n    )\n    \n    // Get the Beams token and send it to Pusher\n    PushNotifications.setUserId(\n        userId,\n        tokenProvider,\n        object : BeamsCallback\u003cVoid, PusherCallbackError\u003e {\n            override fun onFailure(error: PusherCallbackError) {\n                Log.e(\"BeamsAuth\",\n                    \"Could not login to Beams: ${error.message}\")\n            }\n            override fun onSuccess(vararg values: Void) {\n                Log.i(\"BeamsAuth\", \"Beams login success\")\n            }\n        }\n    )\n```\n\nI'm just using basic authentication to simplify the code.\n\nBefore publishing this article, I reached out to the Pusher Beams developers (at [betterbeams@pusher.com](mailto:betterbeams@pusher.com)) for advice. Here is one of their comments:\n\n\n\u003e One final thing to explain in the `setUserId` method is that you should always call it whenever the app starts and you know the user is logged in.\n\u003e \n\u003e For example, consider the Facebook app. When you open it, it will check if the previous logged in user still has a valid session, and if so, proceed to display the news feed. It is at this point that `setUserId` should be called again. If at this point, the app realises the user is no longer logged in, then `clearAllState` should be called.\n\u003e \n\u003e This keeps the device in sync with the server and deletes with cases such as server-side user deletion.\n\n### clearAllState()\n\nI could have put this method with the other SDK methods because internally it basically just calls `stop()` and then `start()`. However, the main use for `clearAllState()` is for when a user is logging out.\n\n```\n    PushNotifications.clearAllState()\n```\n\nThe Beams token (and any interests) will be deleted and the user will not receive any personal notifications on this device. In my tests, calling `clearAllState` did not remove the listeners (see next section). \n\n### Testing it out\n\nWith how the Android SDK is set up, there isn't really a way to use curl or Postman alone. You need to have a backend server to provide Beams tokens. Doing that is beyond the scope of this article, but you can find documentation for many server SDKs in the [Beams documentation](https://pusher.com/docs/beams/reference/all-libraries). Make special note of the `generateToken()` method. If you want to use a Dart server that is already configured for this demo, [check out my previous tutorial](https://pusher.com/tutorials/push-notifications-dart-android-ios). You will need to replace the Secrert Key and Instance ID with your own. \n\nThese tests assume that you have already clicked the **Start** button to start the SDK. Make sure your server is running, too.\n\nSetting the user ID allows user to receive personal notification\n\n\n- Click the **Set ID** button\n- Put the app the background\n- Send a personal notification (See the \"How to send a notification\" section for help.)\n- Note that the device receives a personal notification\n\n![android-beams-api-demo-img5](//images.ctfassets.net/1es3ne0caaid/6ay4KFbQWmTzmStMteVsJP/d4affe48f0eb607fcf0ab8ac3ef49280/android-beams-api-demo-img5.gif)\n\nClearing the state prevents the device from receiving a notification:\n\n\n- Click the **Clear State** button\n- Put the app the background\n- Send a personal notification\n- Note that the device does not receive the notification\n\n\n## Listeners\n\nYou have a few options for getting updates about incoming messages and changes in the SDK.\n\n### setOnDeviceInterestsChangedListener()\n\nSetting this listener allows you to handle changes to the list of interests that the device is subscribed to. This method is Activity specific. That is, you should set the listener in each activity that you need it.\n\n```kotlin\n    PushNotifications.setOnDeviceInterestsChangedListener(object : SubscriptionsChangedListener {\n        override fun onSubscriptionsChanged(interests: Set\u003cString\u003e) {\n            Toast.makeText(applicationContext, \n                \"interests changed to: $interests\", \n                Toast.LENGTH_SHORT).show()\n        }\n    })\n```\n\nThe `SubscriptionsChangedListener` is an interface with a single method `onSubscriptionsChanged`, which provides you with the new list of interests. Subscriptions is the old way to refer to device interests. For example, the deprecated version of this method is called `setOnSubscriptionsChangedListener`.\n\n### setOnMessageReceivedListenerForVisibleActivity()\n\nThe thing about push notifications is that they only appear when your app is in the background. So if a user gets one while they are using your app, they won't see it. You can overcome this problem by setting a listener to tell you when a message comes in.\n\nYou should set this listener in your activity's `onResume()` method. Like the previous listener, this listener must be set in every activity where you want to handle it.\n\n```kotlin\n    override fun onResume() {\n        super.onResume()\n        \n        PushNotifications.setOnMessageReceivedListenerForVisibleActivity(this, object :\n            PushNotificationReceivedListener {\n            override fun onMessageReceived(remoteMessage: RemoteMessage) {\n                showInSnackBar(rootView,\n                    \"Message received: \" +\n                            \"Title: \\\"${remoteMessage.notification?.title}\\\"\" +\n                            \"Body \\\"${remoteMessage.notification?.body}\\\"\"\n                )\n            }\n        })\n    }\n```\n\n`PushNotificationReceivedListener` is an interface with one method, `onMessageReceived`, which provides you with a `RemoteMessage`. This is a Firebase object that you can read more about [here](https://firebase.google.com/docs/reference/android/com/google/firebase/messaging/RemoteMessage). \n\nBy extracting the data from the `RemoteMessage`, you are able to update the UI or make a custom notification.\n\n### MessagingService\n\nThe two previous listeners were activity specific. If you want to make a general listener that works no matter what activity you are in and even while the app is in the background, you can create a `MessagingService` subclass.\n\nTo do that, as I noted earlier, you need to register the service in your `AndroidManifest`:\n\n```html\n    \u003cservice android:name=\".NotificationsMessagingService\"\u003e\n        \u003cintent-filter android:priority=\"1\"\u003e\n            \u003caction android:name=\"com.google.firebase.MESSAGING_EVENT\" /\u003e\n        \u003c/intent-filter\u003e\n    \u003c/service\u003e\n```\n\nwhere `NotificationsMessagingService` is a Kotlin class:\n\n```kotlin\n    // app/src/main/java/com/example/beamsapidemo/NotificationsMessagingService.kt\n    \n    package com.example.beamsapidemo\n    \n    import android.util.Log\n    import com.google.firebase.messaging.RemoteMessage\n    import com.pusher.pushnotifications.fcm.MessagingService\n    \n    class NotificationsMessagingService : MessagingService() {\n        override fun onMessageReceived(remoteMessage: RemoteMessage) {\n            Log.i(\"MessagingService\", \"Remote message was received\")\n        }\n        // This method is only for integrating with other 3rd party services.\n        // For most use cases you can omit it.\n        override fun onNewToken(token: String) {\n            Log.i(\"MessagingService\", \"FCM token was changed\")\n        }\n    }\n```\n\n`MessagingService` is a wrapper (with some extra processing) around [`FirebaseMessagingService`](https://firebase.google.com/docs/reference/android/com/google/firebase/messaging/FirebaseMessagingService). It exposes `onMessageReceived` and `onNewToken`.\n\nIn the demo app I just print messages to the log output, but you could use this service to create a custom notification in `onMessageReceived`. [Here is a related example for Firebase.](https://gist.github.com/jirawatee/85d4b46a89b9ae821b63c31f5d5189de)  Note that if the app is in the background, this method will not get called unless the notification has a data-only payload. By \"data\" I mean a custom JSON structure for the `data` key in the FCM.\n\n```json\n    {\n        \"data\": {\n            \"key\": \"value\",\n        },\n    }\n```\n\nThis one is not a data-only FCM because there is a `notification` key:\n\n```json\n    {\n        \"notification\": {\n            \"title\": \"Hello\",\n            \"body\": \"Hello, World!\",\n        }\n        \"data\": {\n            \"key\": \"value\",\n        },\n    }\n```\n\nThe `MessagingService` listener would not respond for that FCM while the app is in the background. It would display as a normal notification. While the app is in the foreground, though, the message would be caught.\n\nOverriding `onNewToken` provides you with an FCM device token. If you don’t know what that is for, then you probably don’t need it. It’s not necessary to override this method for the majority of use cases. Pusher already takes care of handling the FCM token for you behind the scenes. However, if you need the token to integrate with other 3rd party push notification services, you can get it here. \n\n### Test it out\n\nThese tests assume that you have already clicked the **Start** button to start the SDK.\n\nActivity listener handles changed interests:\n\n\n- Click the **Interests Changed** button to set the listener\n- Click the **Add** button \n- Add any interest\n- Note that a Toast is displayed, indicating a change\n- Add the same interest again\n- Note that there is no Toast because there was no change\n\nActivity listener handles received messages while in foreground:\n\n\n- Click the **Message Received** button to set the listener\n- Click the **Add** button\n- Add the \"apple\" interest\n- Keep the activity in the foreground\n- Send a push notification for the \"apple\" interest\n- Note that the activity UI responds with a snackbar message\n\n\n![android-beams-api-demo-img6](//images.ctfassets.net/1es3ne0caaid/5zSHmD1tx9uGleEQQp3Vlk/0cecd954ffa4e4d02f232f15a4857749/android-beams-api-demo-img6.gif)\n\nMessaging service handles received messages in foreground app:\n\n\n- Make sure you are still subscribed to the \"apple\" interest\n- Click the **Messaging Service** button to start a new activity\n- Keep the app in the foreground\n- Send a push notification for the \"apple\" interest\n- Note the logcat message when the push notification is received\n\nMessaging service handles data only payload notifications while app in background:\n\n\n- Make sure you are still subscribed to the \"apple\" interest\n- Put the app in the background\n- Send a push notification for the \"apple\" interest, but use a data only FCM payload (See the “MessagingService” section above.)\n- Note the logcat message when the push notification is received\n\nMessaging service does not handle notifications while app in background when the FCM has a `notification` payload:\n\n\n- Make sure you are still subscribed to the \"apple\" interest\n- Put the app in the background\n- Send a push notification for the \"apple\" interest, where the FCM payload includes the `notification` key (See the “MessagingService” section above.)\n- Note the absence of a logcat message and the existence of the standard notification\n\n\n## Conclusion\n\nI hope this explanation of the full Android client API for the Beams SDK has helped you to understand it better. Bookmark this page for future reference.\n\nThe demo app is available on [GitHub](https://github.com/suragch/android_beams_api_demo).","metaTitle":"Pusher Beams client API demo for Android","metaDescription":"This tutorial will help you understand what each part of the Beams API does in a client Android app. You will go you through code examples to explore what each method does, and an Android project with pointers for how to set the demo up and how to send push notifications to test it."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3juxmThJAXDQ7zLXiMlFar","type":"Entry","createdAt":"2019-07-20T21:49:02.706Z","updatedAt":"2019-07-20T21:49:02.706Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Implement the CallKit extension for iOS - Part 1: User interface","url":"callkit-ios-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2GvYfvJlzFPjwmlWvF5u9L","type":"Entry","createdAt":"2019-07-20T21:48:16.439Z","updatedAt":"2019-07-20T21:48:16.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Paul Wilkinson","url":"paul-wilkinson","email":"paulw@wilko.me","twitter":"https://twitter.com/PaulWilko","github":"https://github.com/paulw11","guestWriter":true}}],"projectRepo":"https://github.com/paulw11/CallKitTutorial","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2019-07-20","description":"This tutorial will show you how to use Apple's CallKit to create an iOS app that you can use to add names and numbers to a caller ID list, and add numbers to a block list. In part one we will build the user interface.\n","prerequisite":"You will need Xcode 10+ installed on your machine.","content":"## Introduction\n\nApple's [CallKit framework](https://developer.apple.com/documentation/callkit) for iOS is often used to create integrated VoIP apps for the iPhone.\nCallKit also lets you add numbers to the phone block list and Caller ID lists. This is the capability we will be exploring in this tutorial series.\n\nIn this tutorial you will create an iOS app that you can use to add names and numbers to a caller ID list and add numbers to a block list.\n\nIn the [second part](https://pusher.com/tutorials/callkit-ios-part-2) you will create a CallKit extension that provides these lists to the iOS phone app.\n\nThe key concepts covered by this tutorial are:\n\n- Sharing Core Data between an iOS app and an iOS extension\n- Reloading a CallKit extension from an iOS app\n- Debugging an iOS app extension\n\n### Prerequisites\n\n- A Mac with Xcode 10\n- An iPhone (You cannot use the simulator to test CallKit extensions)\n- Familiarity with Xcode and storyboards\n- Familiarity with general UIKit programming\n\n## Building the App\n\n### Getting Started\nStart by opening Xcode and creating a new iOS Single View application and naming it CallKitTutorial. Make sure you select **Swift** as the language and that you tick **Use Core Data**.\n\nThe app has a simple user interface. It has a table view that lists the numbers that we want to identify and to block.\n\n![callkit-extension-ios-img1](//images.ctfassets.net/1es3ne0caaid/3OhdVDh1Ztj3L1YYn2DgHQ/41091087f9fe4cfb25c185715b542bf4/callkit-extension-ios-img1.png)\n\n\n### Setting the scene\n\nOpen the `Main.Storyboard` file and select the view controller. From the **Editor** menu select **Embed In-\u003eNavigation Controller**. This will add a navigation bar to the top of the scene.\n\n\n\u003e You can downloaded a [completed storyboard file](https://github.com/paulw11/CallKitTutorial/blob/master/CallKitTutorial/Base.lproj/Main.storyboard) from this tutorial’s [GitHub repository](https://github.com/paulw11/CallKitTutorial).\n\nNow, let's add a segmented control to the navigation bar. This will select between the *ID* and *Block* lists.\n\n1. Drag a **Segmented Control** to the middle of the navigation bar in the View Controller scene.\n2. A blue outline will appear. Drop the segmented control and it will appear in the navigation bar.\n3. Select the Segmented Control. Using the property inspector, change the title of the first segment to \"ID\" and the second segment to \"Block\".\n\nNext, we will add the \"+\" button to the right hand side of the navigation bar:\n\n1. Drag a **Bar Button Item** from the object library and drop it on the right hand side of the navigation bar\n2. Using the property inspector, change the bar button's **System Item** to **Add**\n\nWe need a button to refresh the CallKit extension:\n\n1. Drag a **Button** from the object library and drop it near the bottom, center of the scene.\n2. Select the button.\n3. Use the **Add New Constraints** button (|⁃◻︎⁃|) to add a constraint between the bottom of the button and the nearest neighbor, which is the main view for the scene.\n4. Set the value to 8.\n5. Use the **Add New Alignment Constraint** button |⊟ to add a \"Horizontally in container\" constraint\n6. Change the button's title to \"Reload extension\"\n\nThe final item we need in this scene is a table view that will display the numbers:\n\n1. Drag a Table View from the object library to the center of the scene.\n2. Use the **Add New Constraints** button (|⁃◻︎⁃|) to add constraints with a value of **0** on the top, left and right and **12** to the bottom.\n\n\n![callkit-extension-ios-img2](//images.ctfassets.net/1es3ne0caaid/1UgEQ1yfpyCtdEj1IsieJp/6911a828bb94724d9177e1ccac158ef7/callkit-extension-ios-img2.png)\n\n\nThe table view needs a cell to display names and numbers.\nSelect the table view and use the property inspector to add and configure a prototype cell:\n\n1. Use the properties inspector to set the number of **Prototype Cells** to 1.\n2. Select the added cell and set its style to **Subtitle**\n3. Set the cell's **Reuse Identifier** to **CallerCell**\n\n### Making connections\n\nWe need to connect the items in the view controller scene to the view controller code. Open `ViewController.swift`. Add properties for the table view \u0026 the segmented control and set the `datasource` and `delegate` for our table view:\n\n```swift\n    // CallKitTutorial/ViewController.swift\n    \n      @IBOutlet weak var callerType: UISegmentedControl!\n      @IBOutlet weak var tableView: UITableView!\n    \n      override func viewDidLoad() {\n        super.viewDidLoad()\n        self.tableView.dataSource = self\n        self.tableView.delegate = self\n        self.loadData()\n      }\n```\n\nSwitch back to the `Main.storyboard` and use the **Connections inspector** to connect from **new referencing outlet** to the **View Controller**:\n\n1. Connect the table view to the `tableView` outlet.\n2. Connect the segmented control to the `callerType` outlet.\n\nIf you run your app at this point you should see something like the screen shot above.\n\n###Core Data\n\nWhile it is tempting to think of Core Data as a database, it is actually an object persistence system. A *persistent store* saves these objects. The most frequently used persistent store type is an SQLite database.\n\nIn Swift you can create objects and those objects can hold values in their properties. Those values can be simple, such as integers or strings, or they can be a reference to other objects. Core Data is very similar.\n\nIn Core Data you define *entities*, rather that object classes. Entities have *attributes* rather than properties. Xcode creates Swift code that defines objects with properties that correspond to your entities and attributes.\n\nOur application needs to store a list of numbers. They might be numbers we want to block, or numbers we want to identify. Numbers we want to identify need an associated name. We will track number update and deletion to provide changes to the CallKit extension.\n\n| Attribute   | Type       | Notes                                                                 |\n| ----------- | ---------- | --------------------------------------------------------------------- |\n| isBlocked   | Boolean    | true if this number is on the \"block\" list                            |\n| isRemoved   | Boolean    | true if this number has been removed from its list                    |\n| name        | String     | The name associated with the number (if it isn't on the \"block\" list) |\n| number      | Integer 64 | The phone number                                                      |\n| updatedDate | Date       | The updated date/time for the entry                                   |\n\n\n\n\u003e **Phone number formats:** You may be wondering why `number` is a 64-bit integer and not, say, a string. There are lots of different ways to represent a phone number. Local, national, international: \"8123-1234\", \"(02) 8123-1234\" and \"+61 2 8123-1234\" are all different ways of writing the same phone number. The last form is [e.164](https://en.wikipedia.org/wiki/E.164). If you strip away the formatting (+, - and spaces) you get a string of digits \"61281231234\". These digits can be stored as an integer. The largest value of a 64-bit integer is 9,223,372,036,854,775,807. That is enough to store any current phone number.\n\nSelecting **Use Core Data** when we created the app caused Xcode to create an empty data model, `CallKitTutorial.xcdatamodeld`, and add Core Data code to the `AppDelegate.swift` file.\n\nWe need to add an entity and some attributes to the Core Data model.\n\n1. Open the `CallKitTutorial.xcdatamodeld` file.\n2. Click **Add Entity**\n3. Change the entity name to `Caller`\n4. Click the \"+\" sign under the attribute list to add a new attribute\n5. Change the attribute name to `isBlocked` and set the type to `Boolean`\n6. Add another attribute `isRemoved`, type `Boolean`\n7. Add `name`, type `String`\n8. Add `number` type `Integer 64`\n9. Add `updatedDate` type `Date`\n\nYour Core Data model should now look like this:\n\n![callkit-extension-ios-img3](//images.ctfassets.net/1es3ne0caaid/4HeriYMzTvH7BEqhzL7sxj/fc28eec28932b925660e1dca3ad00d89/callkit-extension-ios-img3.png)\n\nThe Single View App template puts the Core Data code into the `AppDelegate.swift` file. This is OK for a stand-alone app, but we are going to need Core Data code in our app and in the CallKit extension.\n\nWe will create a Framework to hold the Core Data code. This will make it easier to share code between the app and the extension.\n\n1. Select File-\u003eNew-\u003eTarget...\n2. Scroll to the bottom of the new target window and select **Cocoa Touch Framework**\n3. Name it `CallerData`\n\nYou will see a new folder, `CallerData` in the project navigator. Let's move our Core Data model into the new framework.\n\n1. Drag the `CallKitTutorial.xcdatamodeld` file into the `CallerData` folder in the project navigator pane.\n2. Select the data model file. Use the checkboxes to change its **Target Membership**, in the file properties pane, from **CallKitTutorial** to **CallerData**.\n\n\n![callkit-extension-ios-img4](//images.ctfassets.net/1es3ne0caaid/6OkVFQKly7zbTAanVeaHZg/b841f93d35d2fc2001e9fc873b228ef4/callkit-extension-ios-img4.png)\n\nWe will need a file in the framework to hold our Core Data code. Press ⌘-N to create a new file.  Select **Swift File** and name it `CallerData.swift`.  Make sure that it is being added to the **CallerData** framework target.\n\nOpen this new file and add the following lines to import Core Data and add a class declaration:\n\n```swift\n    // CallerData/CallerData.swift\n    \n    import Foundation\n    import CoreData\n    \n    public final class CallerData {\n    \n        public init() {\n    \n        }\n    }\n```\n\nIf you open the `AppDelegate.swift` file and look for the Core Data stack section. You will see a declaration for a variable named `persistentContainer` and a function `saveContext`. It will look like this:\n\n```swift\n    // CallKitTutorial/AppDelegate.swift\n    \n    // MARK: - Core Data stack\n    \n      lazy var persistentContainer: NSPersistentContainer = {\n    \n          let container = NSPersistentContainer(name: \"CallKitTutorial\")\n          container.loadPersistentStores(completionHandler: { (storeDescription, error) in\n              if let error = error as NSError? {\n                  fatalError(\"Unresolved error \\(error), \\(error.userInfo)\")\n              }\n          })\n          return container\n      }()\n    \n      // MARK: - Core Data Saving support\n    \n      func saveContext () {\n          let context = persistentContainer.viewContext\n          if context.hasChanges {\n              do {\n                  try context.save()\n              } catch {\n                  let nserror = error as NSError\n                  fatalError(\"Unresolved error \\(nserror), \\(nserror.userInfo)\")\n              }\n          }\n      }\n```\n\n1. Select that text (be careful not to select the last } in the file) and cut it to the clipboard\n2. Open `CallerData.swift` and paste the code in after the `init` function.\n3. Change the `applicationWillTerminate` function in `AppDelegate.swift` to remove the line `self.saveContext()`\n\n\n\u003e **Note:**  The `saveContext` function needs to be declared as `public` to ensure that we can still call it from our app after moving it into the `CallerData` framework.  Simply add the `public` modifier as you see below\n\n`CallerData.swift` should now look like:\n\n```swift\n    // CallerData/CallerData.swift\n    \n    import Foundation\n    import CoreData\n    \n    public final class CallerData {\n    \n        public init() {\n    \n        }\n    \n        // MARK: - Core Data stack\n    \n        lazy var persistentContainer: NSPersistentContainer = {\n    \n            let container = NSPersistentContainer(name: \"CallKitTutorial\")\n            container.loadPersistentStores(completionHandler: { (storeDescription, error) in\n                if let error = error as NSError? {\n                    fatalError(\"Unresolved error \\(error), \\(error.userInfo)\")\n                }\n            })\n            return container\n        }()\n    \n        // MARK: - Core Data Saving support\n    \n        public func saveContext () {\n            let context = persistentContainer.viewContext\n            if context.hasChanges {\n                do {\n                    try context.save()\n                } catch {\n                    let nserror = error as NSError\n                    fatalError(\"Unresolved error \\(nserror), \\(nserror.userInfo)\")\n                }\n            }\n        }\n    \n    }\n```\n\n### Playing outside the sandbox\n\nApps on iOS run inside a sandbox. This is a limited environment that ensures an app can only access its own data. It is an important part of iOS security.\n\nUsually, the sandbox isn't a problem. Your app only needs to access its own data or system data (such as contacts or photos) with the user's permission. For this app, we need to share data with our CallKit extension. Even though you are creating both the app and the extension, they each have their own sandbox.\n\nIt turns out that iOS provides a solution for this problem; App Groups. Apps (and extensions) that are signed by the same developer team can use an App Group to share files and KeyChain items securely.\n\nWe will need to set up an App Group for our project. The first step is to enable the *App Groups* capability.  To do this, select the top-level project item (CallKitTutorial) in the project navigator and then select the CallKitTutorial target.  Turn on the switch next to **App Groups** in the **Capabilities** tab.\n\nXcode will update your application provisioning profile to add the App Group entitlement. Once complete, you will see three ticks under **Steps**.\n\nWe now need to add an App Group that the app and the extension will share. App group names must be unique and start with \"group.\". Apple recommends adopting a reverse domain name style, as with app bundle IDs.  Use something like `group.com.mydomain.CallKitTutorial`.\n\n1. Click the + sign under \"App Groups\"\n2. Enter your App Group name in the dialog box\n3. Click \"OK\"\n\nOnce again, you will see Xcode updating your provisioning profile. If you haven't chosen a unique name, you will get an error. Uncheck the group with the error and try again with a different name.\nNow that we have associated our app with the App Group, the Core Data code that Xcode added for us needs to change to use it.\n\nChange the `persistentContainer` variable declaration in `CallerData.swift` to:\n\n```swift\n    // CallerData/CallerData.Swift\n    \n    lazy var persistentContainer: NSPersistentContainer = {\n        let momdName = \"CallKitTutorial\"\n        let groupName = \"YOUR_APP_GROUP_NAME\"\n        let fileName = \"demo.sqlite\"\n    \n        guard let modelURL = Bundle(for: type(of: self)).url(forResource: momdName, withExtension:\"momd\") else {\n            fatalError(\"Error loading model from bundle\")\n        }\n    \n        guard let mom = NSManagedObjectModel(contentsOf: modelURL) else {\n            fatalError(\"Error initializing mom from: \\(modelURL)\")\n        }\n    \n        guard let baseURL = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: groupName) else {\n            fatalError(\"Error creating base URL for \\(groupName)\")\n        }\n    \n        let storeUrl = baseURL.appendingPathComponent(fileName)\n    \n        let container = NSPersistentContainer(name: momdName, managedObjectModel: mom)\n    \n        let description = NSPersistentStoreDescription()\n    \n        description.url = storeUrl\n    \n        container.persistentStoreDescriptions = [description]\n    \n        container.loadPersistentStores(completionHandler: { (storeDescription, error) in\n            if let error = error as NSError? {\n                fatalError(\"Unresolved error \\(error), \\(error.userInfo)\")\n            }\n        })\n        return container\n    }()\n```\n\n\u003e **Tip:** Make sure you change the `groupName` value to match the group you created earlier.\n\nThis purpose of this code is to:\n\n- Get the URL for the Core Data model from the application bundle.\n- Initialize an instance of `NSManagedObjectModel` using the model.\n- Get a URL that refers to the container for our application group. This is a directory that is accessible to the apps that share access to the application group.\n- Append a filename to this directory. This filename will be hold the sqlite database used by the Core Data store.\n- Create an `NSPersistentContainer` that uses the managed object model\n- Create an `NSPersistentStoreDescription` that uses the application group file.\n- Tell the container to use persistent store description.\n- And finally, load the persistent store.\n\n### Putting things into context\n\nWhen working with Core Data, you frequently need access to the relevant `NSManagedObjectContext`. The managed object context we will need can be retrieved through the `viewContext` property of the `persistentContainer`. To make this a bit easier, we will add a computed variable to `CallerData.swift` that provides access to this property:\n\n```swift\n    public var context: NSManagedObjectContext {\n      return self.persistentContainer.viewContext\n    }\n```\n\n### Fetching results\n\nIt is quite common to use table views and Core Data together. Apple has provided an object that helps with this task; The `NSFetchedResultsController`.\n\nYou provide the controller with an `NSFetchRequest` that retrieves the data you need.\n\nThe controller calls its `delegate` with results that initially match the query and when the set of results changes. This makes it easy to update the tableview as items are inserted and deleted in Core Data.\n\nFor our application we will need two sets of results; Numbers to block and numbers to identify. Let's add a function to `CallData.swift` that will return a `NSFetchedRequest` for either of these lists. We will also include options for a \"since\" date and whether to include \"removed\" items. We will use these later in the CallKit extension.\n\nAdd the following function to `CallerData.swift`:\n\n```swift\n    // CallerData/CallerData.swift\n    \n    public func fetchRequest(blocked: Bool, includeRemoved: Bool = false, since date: Date? = nil) -\u003e NSFetchRequest\u003cCaller\u003e {\n      let fr: NSFetchRequest\u003cCaller\u003e = Caller.fetchRequest()\n      var predicates = [NSPredicate]()\n    \n      let blockedPredicate = NSPredicate(format:\"isBlocked == %@\",NSNumber(value:blocked))\n      predicates.append(blockedPredicate)\n    \n      if !includeRemoved {\n          let removedPredicate = NSPredicate(format:\"isRemoved == %@\",NSNumber(value:false))\n          predicates.append(removedPredicate)\n      }\n    \n      if let dateFrom = date {\n          let datePredicate = NSPredicate(format:\"updatedDate \u003e %@\", dateFrom as NSDate)\n          predicates.append(datePredicate)\n      }\n    \n      let predicate = NSCompoundPredicate(andPredicateWithSubpredicates: predicates)\n      fr.predicate = predicate\n      fr.sortDescriptors = [NSSortDescriptor(key: \"number\", ascending: true)]\n      return fr\n    }\n```\n\nThe function creates several predicates:\n\n- One to select either blocked or non-blocked numbers.\n- One to filter removed numbers if `includeRemoved` is `false`\n- One to return records only after any specified date\n\nThese predicates are then combined using an `and` condition using `NSCompoundPredicate(andPredicateWithSubpredicates: predicates)` and applied to the `NSFetchRequest`. The fetched objects will be sorted in ascending order of `number`.\n\nThe final `CallerData.swift` should look like this:\n\n```swift\n    // CallerData/CallerData.swift\n    \n    import Foundation\n    import CoreData\n    \n    public final class CallerData {\n      public init() {\n      }\n    \n      // MARK: - Core Data stack\n    \n      lazy var persistentContainer: NSPersistentContainer = {\n          let momdName = \"CallKitTutorial\"\n          let groupName = \"group.me.wilko.CallKitTutorial\"\n          let fileName = \"demo.sqlite\"\n    \n          guard let modelURL = Bundle(for: type(of: self)).url(forResource: momdName, withExtension:\"momd\") else {\n              fatalError(\"Error loading model from bundle\")\n          }\n    \n          guard let mom = NSManagedObjectModel(contentsOf: modelURL) else {\n              fatalError(\"Error initializing mom from: \\(modelURL)\")\n          }\n    \n          guard let baseURL = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: groupName) else {\n              fatalError(\"Error creating base URL for \\(groupName)\")\n          }\n    \n          let storeUrl = baseURL.appendingPathComponent(fileName)\n    \n          let container = NSPersistentContainer(name: momdName, managedObjectModel: mom)\n    \n          let description = NSPersistentStoreDescription()\n    \n          description.url = storeUrl\n    \n          container.persistentStoreDescriptions = [description]\n    \n          container.loadPersistentStores(completionHandler: { (storeDescription, error) in\n              if let error = error as NSError? {\n                  fatalError(\"Unresolved error \\(error), \\(error.userInfo)\")\n              }\n          })\n    \n          return container\n      }()\n    \n      public var context: NSManagedObjectContext {\n          return self.persistentContainer.viewContext\n      }\n    \n      public func saveContext () {\n          let context = persistentContainer.viewContext\n          if context.hasChanges {\n              do {\n                  try context.save()\n              } catch {\n                  let nserror = error as NSError\n                  fatalError(\"Unresolved error \\(nserror), \\(nserror.userInfo)\")\n              }\n          }\n      }\n    \n      public func fetchRequest(blocked: Bool, includeRemoved: Bool = false, since date: Date? = nil) -\u003e NSFetchRequest\u003cCaller\u003e {\n          let fr: NSFetchRequest\u003cCaller\u003e = Caller.fetchRequest()\n          var predicates = [NSPredicate]()\n          let blockedPredicate = NSPredicate(format:\"isBlocked == %@\",NSNumber(value:blocked))\n          predicates.append(blockedPredicate)\n    \n          if !includeRemoved {\n              let removedPredicate = NSPredicate(format:\"isRemoved == %@\",NSNumber(value:false))\n              predicates.append(removedPredicate)\n          }\n    \n          if let dateFrom = date {\n              let datePredicate = NSPredicate(format:\"updatedDate \u003e %@\", dateFrom as NSDate)\n              predicates.append(datePredicate)\n          }\n    \n          let predicate = NSCompoundPredicate(andPredicateWithSubpredicates: predicates)\n          fr.predicate = predicate\n    \n          fr.sortDescriptors = [NSSortDescriptor(key: \"number\", ascending: true)]\n          return fr\n      }\n    }\n```\n\n### Adding data to the view\n\nNow we are ready to connect the data to the view controller.\nOpen `CallKitTutorial/ViewController.swift` and add the following imports to the top of the file:\n\n```swift\n    // CallKitTutorial/ViewController.swift\n    \n    import CoreData\n    import CallKit\n    import CallerData\n```\n\nThese lines tell the compiler that we are going to use the `CoreData` \u0026 `CallKit` frameworks as well as our own `CallerData` framework.\nWe need to add some more properties to the view controller code:\n\n```swift\n    // CallKitTutorial/ViewController.swift\n    \n    private var showBlocked: Bool {\n        return self.callerType.selectedSegmentIndex == 1\n    }\n    \n    lazy private var callerData = CallerData()\n    private var resultsController: NSFetchedResultsController\u003cCaller\u003e!\n```\n\n- The first is a computed variable that returns `true` if the segmented control has \"Blocked\" (item 1) selected.\n- The second is an instance of our `CallerData` object that we use to interact with CoreData. It is `lazy`, which means that it won't be created until the first time it is used.\n- The final property is the `NSFetchedResultsController` that provides the data for the table view. It is an implicitly unwrapped optional (`!`) so it must be assigned a value before it is referenced or the app will crash.\n\nLet's add code to do that:\n\n```swift\n    // CallKitTutorial/ViewController.swift\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        self.tableView.dataSource = self\n        self.tableView.delegate = self\n        self.loadData()\n    }\n    private func loadData() {\n        self.navigationItem.title = self.showBlocked ? \"Blocked\":\"ID\"\n    \n        let fetchRequest:NSFetchRequest\u003cCaller\u003e = self.callerData.fetchRequest(blocked: self.showBlocked)\n    \n        self.resultsController = NSFetchedResultsController(fetchRequest: fetchRequest, managedObjectContext: self.callerData.context, sectionNameKeyPath: nil, cacheName: nil)\n        self.resultsController.delegate = self\n        do {\n            try self.resultsController.performFetch()\n            self.tableView.reloadData()\n        } catch {\n            print(\"Failed to fetch data: \\(error.localizedDescription)\")\n        }\n    }\n    \n    @IBAction func callerTypeChanged(_ sender: UISegmentedControl) {\n        self.loadData()\n    }\n    \n    @IBAction func unwindFromSave(_ sender: UIStoryboardSegue) {\n    }\n```\n\nThis adds a function, `loadData`, that creates an `NSFetchedResultsController` to get the data we need and reload the table view. You can see how the `showBlocked` variable provides a convenient shortcut to the segmented control’s value.\n\nThe `loadData` function is called when the view controller is loaded and when the segmented control’s value is changed.  The `callerTypeChanged` function handles this second case.\n\nThe Add/Edit scene, that we will add shortly, will use the `unwindFromSave` function and we will use the `reloadTapped` function in part two of this tutorial.\n\nDon’t panic if you see an error on the line `self.resultsController.delegate = self`. We will fix this shortly.\n\n### Laying it on the table\n\nHaving fetched the data, we want to display it in the table view. To do that we need to implement the `UITableViewDataSource` protocol.\n\nScroll to the bottom of `ViewController.swift` and add the following lines:\n\n```swift\n    // CallKitTutorial/ViewController.swift\n    \n    extension ViewController: UITableViewDataSource, UITableViewDelegate {\n        func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return self.resultsController.sections?.count ?? 0\n        }\n    \n        func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return self.resultsController.fetchedObjects?.count ?? 0\n        }\n    \n        func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"CallerCell\", for: indexPath)\n            let caller = self.resultsController.fetchedObjects![indexPath.row]\n    \n            cell.textLabel?.text = caller.isBlocked ? String(caller.number) : caller.name ?? \"\"\n            cell.detailTextLabel?.text = caller.isBlocked ? \"\" : String(caller.number)\n    \n            return cell\n        }\n    \n         func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {\n            switch editingStyle {\n            case .delete:\n                if let caller = self.resultsController.fetchedObjects?[indexPath.row] {\n                    caller.isRemoved = true\n                    caller.updatedDate = Date()\n                    self.callerData.saveContext()\n                }\n            default:\n                break\n            }\n        }\n    }\n```\n\nThis adds an *extension* to the `ViewController` class that tells the compiler that it conforms to the `UITableViewDataSource` and `UITableViewDelegate` protocols.\n\nThere are three functions that provide the data to the table through the `UITableViewDataSource` protocol:\n\n1. `numberOfSections` - This returns the number of sections from the fetched results controller or 0 if there are no sections. We will have 1 section.\n2. `numberOfRowsInSection` - This returns the number of rows in the tableview. This is either the number of objects fetched or 0 if there are none.\n3. `cellForRowAt` - This returns a table view cell for the nominated row. We retrieve a cell and a `Caller` object from the results. If blocked numbers are being shown then we show the number. If identification numbers are being shown we show the name and the number.\n\nThe final function is part of the `UITableViewDelegate` protocol. The table view calls this function when the user performs when an editing operation on the table. The only editing operation we want to support is the `delete` operation. This operation results from the user swiping left on the table row and tapping the **delete** button.\n\nWhen this happens the `isRemoved` property is set to `true`, the `updatedDate` property is set to the current date \u0026 time and the updated `Caller` object is saved.\n\n\u003e **Why isn't the Caller simply deleted?** We will see later that the CallKit extension can process incremental updates. To do this, the data needs to hold transactions rather than only the current records.\n\n### Fetched results delegate\n\nThe `NSFetchedResultsController` makes it easy to react to changes in the set of fetched objects. Whenever there is an update to an object that matches the query, the controller calls its `delegate` to provide details of the event.\n\nAdd another extension to implement the `NSFetchedResultsControllerDelegate`:\n\n```swift\n    // CallKitTutorial/ViewController.swift\n    \n    extension ViewController: NSFetchedResultsControllerDelegate {\n    \n        // 1. Changes are coming from the NSFetchedResultsController`\n        func controllerWillChangeContent(_ controller: NSFetchedResultsController\u003cNSFetchRequestResult\u003e) {\n            self.tableView.beginUpdates()\n        }\n    \n        // 2. Process a change...\n        func controller(_ controller: NSFetchedResultsController\u003cNSFetchRequestResult\u003e, didChange anObject: Any, at indexPath: IndexPath?, for type: NSFetchedResultsChangeType, newIndexPath: IndexPath?) {\n    \n            let newIndexPath: IndexPath? = newIndexPath != nil ? IndexPath(row: newIndexPath!.row, section: 0) : nil\n            let currentIndexPath: IndexPath? = indexPath != nil ? IndexPath(row: indexPath!.row, section: 0) : nil\n    \n            switch type {\n            case .insert:\n                self.tableView.insertRows(at: [newIndexPath!], with: .automatic)\n    \n            case .delete:\n                self.tableView.deleteRows(at: [currentIndexPath!], with: .fade)\n    \n            case .move:\n                self.tableView.moveRow(at: currentIndexPath!, to: newIndexPath!)\n    \n            case .update:\n                self.tableView.reloadRows(at: [currentIndexPath!], with: .automatic)\n    \n            @unknown default:\n                fatalError()\n            }\n        }\n    \n        //3.  All changes have been delivered\n        func controllerDidChangeContent(_ controller: NSFetchedResultsController\u003cNSFetchRequestResult\u003e) {\n            self.tableView.endUpdates()\n        }\n    }\n```\n\nThere are three functions in this extension:\n\n1. `controllerWillChangeContent` - This is called prior to one or more updates being delivered to the delegate. Our code tells the tableview that updates are coming. The tableview will hold any visual updates until a subsequent call to `endUpdates`\n2. `didChange` - This is called when the result objects change. There are four possible updates:\n    - `insert` - A new object has been inserted into the results. We tell the table view about this by calling `insertRows`.\n    - `delete` - An object has been removed from the results. We tell the table view about this by calling `deleteRows`.\n    - `move` - An object has been moved up or down the list. We tell the table view about this by calling `moveRow`.\n    - `update` - An object has been updated. We ask the table view to reload the relevant row so that the new data is shown.\n3. `controllerDidChangeContent` - This is called after all updates have been delivered to `didChange`. Our code tells the table view that updates are now complete and it can perform any required visual updates (inserting, removing or reloading rows).\n\n### Adding data\n\nIf you run the app now, you will be able to select between the two number lists, but there is no data to display. Let's make that \"+\" do something.\n\nFirst, let's prepare our existing view controller:\n\n1. Open the `Main.storyboard` file\n2. Select the segmented control.\n3. Using the *Connections Inspector*, make a connection between \"Value Changed\" and the `callerTypeChanged` function.\n4. Drag a *View Controller* from the object library.\n5. Click on the \"+\" button in the navigation bar of the first scene and, while holding *ctrl*, drag a connection to the new view controller.\n6. When you release the mouse select \"Show\" from the popup menu.\n7. Select the new segue object between the two scenes and set its *identifier* to \"addCaller\"\n8. Click on the *Caller Cell* item in the first scene's object list.\n9. *ctrl*-drag to the second scene and select \"show\" from the popup menu.\n10. Again, select the new segue object between the two scenes and set its *identifier* to \"editCaller\"\n\nNow we need to add some controls to the new View Controller so that we can enter and save data.\n\n1. Drag a \"Navigation Item\" from the object library to the new view controller.\n2. Drag a \"Bar Button Item\" to the right hand side of the navigation bar.\n3. Change the button's \"System Item\" to \"Save\" in the attribute inspector\n4. *ctrl-drag* from the yellow \"View Controller\" icon at the top of the scene to the \"Exit icon\" and select **unwindFromSave** from the popup.\n5. Select the new **Unwind segue** from the left hand object navigator and set its identifier to \"unwindFromSave\"\n6. Drag a label from the object library to the top left of the view controller. The exact position doesn't matter.\n7. Change the label to \"Caller name\"\n8. Place a text field beside this label.\n9. Select both the label and the text field (select one and then select the other while holding  *command*).\n10. Select \"Editor-\u003eEmbed in-\u003eStack view menu item.\n11. Place a label under the first label and change it to \"Number\"\n12. Place another text field next to this label.\n13. Embed the label and text field in a stack view as you did with the first pair.\n14. Select the two stack views and embed them in a stack view.\n15. Select this newest stack view and use the |⁃◻︎⁃| button to add top, left and right constraints with a value of 20.\n16. Set the **Alignment** of the newest stack view to **fill.**\n17. Select the first text field and ctrl-drag to the second and select \"Equal Widths\" from the popup menu.\n\nYour new scene should look like this:\n\n![callkit-extension-ios-img5](//images.ctfassets.net/1es3ne0caaid/1rvJihUFZQz2I2NtSGmDSK/bc0d7bb519dfe7c50155a8e726c8de72/callkit-extension-ios-img5.png)\n\nNow we can create some code for this scene.  Create a new **Cocoa Touch Class** by pressing ⌘-N.  Make it a subclass of `UIViewController` and name it `AddEditViewController`.  Ensure you add it to the CallKitTutorial target\n\nOpen the new `AddEditViewController.swift` file and add \n\n```swift\n    // CallKitTutorial/ViewController.swift\n    \n    import CallerData\n```\n\nto the top of the file.  We also need to add the following properties:\n\n```swift\n    // CallKitTutorial/ViewController.swift\n    \n    @IBOutlet weak var callerName: UITextField!\n    @IBOutlet weak var callerNumber: UITextField!\n    @IBOutlet weak var saveButton: UIBarButtonItem!\n    \n    var caller: Caller? {\n        didSet {\n            self.updateUI()\n        }\n    }\n    \n    var callerData: CallerData!\n    var isBlocked = false\n```\n\nThese define:\n\n- Properties for the name and number text fields.\n- A property for the save button in the navigation bar.\n- A property for the `Caller` that we are adding or editing.\n- A property for our `CallerData` Core Data framework object.\n- A property that tracks whether we are displaying a blocking number or an identification number.\n\nOpen the new view controller scene in `Main.Storyboard` file. Use the identity inspector to set the scene's class to `AddEditViewController`.\n\n\n![callkit-extension-ios-img6](//images.ctfassets.net/1es3ne0caaid/1pJZx1JbQPoyUo8TOOOMqN/c59be0d3ad8fd499ddf1f46f353b92e8/callkit-extension-ios-img6.png)\n\nUse the connections inspector to connect the two text fields and the save button to the outlets we defined in the class.\n\n### It's the little things\n\nAttention to small details can really improve the user's experience of your app. There are a couple of details we can address in our add/edit screen:\n\n1. Ensure that the **Save** button is disabled if the data isn't correct.\n2. Ensure that only digits can be entered into the number field\n\nAdd the following code to `AddEditViewController.swift`:\n\n```swift\n    // CallKitTutorial/AddEditViewController.swift\n    \n    override func viewWillAppear(_ animated: Bool) {\n        super.viewWillAppear(animated)\n        self.updateUI()\n    }\n    \n    private func updateUI() {\n    \n        guard let caller = self.caller,\n            let callerName = self.callerName,\n            let callerNumber = self.callerNumber else {\n                return\n        }\n    \n        callerName.text = caller.name\n        callerNumber.text = caller.number != 0 ? String(caller.number):\"\"\n        self.navigationItem.title = caller.name\n    \n        self.updateSaveButton()\n    \n    }\n    \n    private func updateSaveButton() {\n        self.saveButton.isEnabled = false\n        guard let name = self.callerName.text,\n            let number = self.callerNumber.text else {\n                return\n        }\n        self.saveButton.isEnabled = !(name.isEmpty || number.isEmpty)\n    }\n    \n    @IBAction func textChanged(_ sender: UITextField) {\n        self.updateSaveButton()\n    }\n```\n\nThis code calls the `updateUI` function when the view is about to appear.\n\n`UpdateUI` verifies that the `Caller` property has a value and that that object has both a `callerName` and a `callerNumber`. These values are put into the text field. The screen title is also updated to the caller's name.\n\n`updateSaveButton` ensures that the save button is only enabled if the `Caller`'s name and number are not empty.\n\n`textChanged` is an action function that we will used to update the save button state as the text fields change.\n\nThis takes care of our first requirement.\n\nWe can meet the second requirement by checking whether we have a valid number after the user enters each character. This requires a `UITextFieldDelegate` function. Add the following code to the bottom of `AddEditViewController.swift`:\n\n```swift\n    // CallKitTutorial/AddEditViewController.swift\n    \n    extension AddEditViewController: UITextFieldDelegate {\n        func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -\u003e Bool {\n            guard let text = textField.text,\n                let textRange = Range(range, in: text) else {\n                    return false\n            }\n            let updatedText = text.replacingCharacters(in: textRange,\n                                                       with: string)\n            if textField == self.callerNumber {\n                if updatedText.isEmpty {\n                    return true\n                }\n                if Int64(updatedText) == nil {\n                    return false\n                }\n            } else if textField == self.callerName {\n                self.navigationItem.title = updatedText\n            }\n            return true\n        }\n    }\n```\n\nEntering a character triggers this delegate function. Returning `true` permits the change. Returning `false` prevents it.\n\nThe function uses the existing text field value and the proposed change to determine the new value for the field.\n\nThe function permits the change if the text field is the number field and the new value can convert to an `Int64`.\n\nIf the text field is the name field, the change is always permitted. The code also assigns the new value to the screen title.\n\nIn order for code to be called, we need to set our view controller as the `delegate` for the text fields.  Replace the `viewDidLoad` function in `CallKitTutorial/AddEditViewController.swift` with the following:\n\n```swift\n    // CallKitTutorial/AddEditViewController.swift\n    \n    override func viewDidLoad() {\n      super.viewDidLoad()\n      self.callerName.delegate = self\n      self.callerNumber.delegate = self\n      self.title = \"\"\n    }\n```\n\nFinally, we need to add a \"save\" function to `CallKitTutorial/AddEditViewController`:\n\n```swift\n    // CallKitTutorial/AddEditViewController.swift\n    \n    @IBAction func saveTapped(_ sender: UIBarButtonItem) {\n        if let numberText = self.callerNumber.text,\n            let number = Int64(numberText)  {\n            let caller = self.caller ?? Caller(context: self.callerData.context)\n            caller.name = self.callerName.text\n            caller.number  = number\n            caller.isBlocked = self.isBlocked\n            caller.isRemoved = false\n            caller.updatedDate = Date()\n            self.callerData.saveContext()\n        }\n        self.performSegue(withIdentifier: \"unwindFromSave\", sender: self)\n    }\n```\n\nThis code first ensures that both text fields have valid data.\n\nIf an entry is being edited, it retrieves the `Caller` Core Data object supplied by the previous view controller. If we are adding a new entry, it creates a new `Caller` object. The properties of this object are then set and saved.\n\nFinally, the `unwindFromSave` segue is then invoked to exit this view controller.\n\nThe storyboard scene requires connections for these functions to work.\n\nOpen the `AddEditViewController` scene in `Main.storyboard`. Using the Connections Inspector:\n\n- Connect **Editing Changed** in the **Sent Event** section and the `textChanged` function for both text fields.\n- Connect the **selector** outlet of the save button and `saveTapped` function in the view controller.\n\n### Passing the caller\n\nWe have one last piece of code to add to add to `ViewController.swift`. We need code to pass the `CallerData` object and the object to be edited to the `AddEditViewController`. This is done in `prepareForSegue`.\n\nOpen `ViewController.swift` and add the following function:\n\n```swift\n    // CallKitTutorial/AddEditViewController.swift\n    \n    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n        if let dest = segue.destination as? AddEditViewController {\n            dest.isBlocked = self.showBlocked\n            dest.callerData = self.callerData\n            if let cell = sender as? UITableViewCell,\n                let indexPath = tableView.indexPath(for: cell),\n                let caller = self.resultsController.fetchedObjects?[indexPath.row] {\n                dest.caller = caller\n            }\n        }\n    }\n```\n\nThis function is called when a segue is triggered. It sets the `isBlocked` and `callerData` properties.\n\nIf the `sender` (The item that triggered the segue) is a table view cell, we know that the user wants to edit a row. We find the row for the cell and the object for that row. That object is passed to the `AddEditViewController`.\n\nAt this point you can run the app and you will be able to add, edit and remove both identification and block numbers.\n\n## Conclusion\n\nIn this tutorial we have created a simple application that uses Core Data to store phone number blocking and identification lists.\n\n- We extracted the Core Data code into a framework so that it is available for re-use in part two.\n- We used an Application Group so that the extension we create in part two can access the data from this app\n- We implemented basic data validation for the data entered.\n\nIn [part two](https://pusher.com/tutorials/callkit-ios-part-2) we will create a CallKit Extension that provides the entered data to iOS for use in blocking and identifying callers.\n\nIf you are looking for a further challenge, you could use [PhoneNumberKit](https://github.com/marmelroy/PhoneNumberKit) to format and display the phone numbers. This framework can also be used to allow the user to enter numbers in common formats.\n\nThe completed code for parts one and two of this tutorial series is [available on GitHub](https://github.com/paulw11/CallKitTutorial).","metaTitle":"Implement the CallKit extension for iOS - Part 1","metaDescription":"This tutorial will show you how to use Apple's CallKit to create an iOS app that you can use to add names and numbers to a caller ID list, and add numbers to a block list. In part one we will build the user interface."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3vtuHZ9yJZJSf1iAJF9jNj","type":"Entry","createdAt":"2019-07-21T22:15:24.110Z","updatedAt":"2019-07-31T20:34:30.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Introduction to error handling in Angular 7: Part 1 - Angular errorHandler","url":"error-handling-angular-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55Vy5qUc2Hc2NxBxWerK1T","type":"Entry","createdAt":"2019-03-16T13:13:19.673Z","updatedAt":"2019-03-16T13:13:19.673Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lotanna Nwose","url":"lotanna-nwose","email":"viclotana@gmail.com","twitter":"https://twitter.com/viclotana","github":"https://github.com/viclotana","guestWriter":true}}],"projectRepo":"https://github.com/viclotana/ng_errors","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2019-07-20","description":"This tutorial series will introduce you to errors in JavaScript and the try-catch concept. In part one, learn how the concept is used, and how to handle internal errors in Angular with the Angular errorHandler, with a focus on client side JavaScript errors.","prerequisite":"You will need to have Node 11+, Node Package Manager version 6+, Angular CLI 7+ and Angular 7+  installed on your machine.\n","content":"In this tutorial, you will be introduced to errors in JavaScript, the try-catch concept and how it is used and a little introduction to handling internal errors with the Angular errorHandler.\n\n![angular-errorhandler-javascript-img1](//images.ctfassets.net/1es3ne0caaid/5kTaLTwUl9i27ciBHr2CKR/d70a36ff76eb3068ca511a80831364c4/angular-errorhandler-javascript-img1.jpeg)\n\n## Errors\n\nOne of my favorite movie stars, Samuel L. Jackson, was the very first person I heard the phrase \"to err is human\" from, and although I cannot remember the title of the particular movie now you can agree with me that the same thing happens with errors when writing code. As an Angular developer, you already know errors can be caused by personal mistakes, like having an import statement with the file extension name in Angular 7 and it shows up in your browser if you fail to catch it.\n\n```\n    import { DataService } from 'src/app/services/data.service.ts';\n```\n\nErrors can arise from lack of testing, server communications, or even ambiguity of the Angular project you are working on. We are human beings and so are prone to errors, that is one reason a good editor like VS Code will always draw squeaky lines when you start derailing.\n\n## Prerequisites\n\nTo be able to follow through in this article's demonstration you should have:\n\n- Node version 11.0 installed on your machine.\n- Node Package Manager version 6.7 (usually ships with Node installation).\n- [Angular CLI](https://cli.angular.io/) version 7.0\n- The latest version of Angular (version 7)\n\n```\n    // run the command in a terminal\n    ng version\n```\n\nConfirm that you are using version 7, and update to 7 if you are not.\nOther things that will be nice-to-haves are:\n\n- A working knowledge of the Angular framework at a beginner level.\n- Familiarity with Angular services will be a plus but not a requirement.\n\n## Types of errors\n\nThere are many types of errors but I will be grouping them in two main categories: insider and outsider errors.\n\n- **Insider errors:** (also known as client side errors) These are the ones you can be held responsible for, the syntax errors, package manager errors, reference errors, type errors and all types of client side errors that can be fixed by the developer within the Angular application. \n- **Outsider errors:** (also known as server side errors) These ones can span from server errors, which mostly come with three digit status codes like 500 to internet network errors, to even browser specific errors. These are basically errors that are out of the reach of the Angular application hence the name outsider.\n\nThis article will focus on the insider errors and then a subsequent article will focus on the outsider errors.\n\n## Baby steps: throw and catch!\n\nWhen you run a function in JavaScript, that function joins a kind of function execution queue and as the application runs and gets to its turn it leaves the queue and gets executed. So, if an error occurs, JavaScript throws an exception, which will immediately remove all the operations in the queue until the exception is handled. \nOn a basic level, exceptions are handled with try/catch blocks, the whole application crashes if the compiler does not see this try/catch block. \nThe try/catch syntax looks like this:\n\n```javascript\n    try {\n     throw new Error('An error occurred');\n    }\n    catch (error) {\n     console.error('Here is the error message', error);\n    }\n    console.log('Execution continues');\n```\n\nYou will see the usefulness in a little demonstration. Create a new Angular project with the CLI, call it  `ngapp`\n\n```\n    ng new ngapp\n```\n\nAccept the router settings and choose plain CSS as the style sheet. Go to the `app.component.ts` file and copy in the code below:\n\n```typescript\n    // src/app/app.component.ts\n    import { Component } from '@angular/core';\n    @Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n    normalError() {\n     const babies = foo;\n     console.log(\"This is normal error without a try catch\");\n     }\n    }\n```\n\nCopy these into the `app.component.html`\n\n```html\n    \u003c!-- src/app/app.component.html --\u003e\n    \u003cbutton (click)=\"normalError()\"\u003e\n     Fire Normal Error\n    \u003c/button\u003e\n```\n\nThen copy these basic styling into the `app.component.css`\n```css\n    // src/app/app.component.css\n    button {\n    background-color: #4CAF50; /* Green */\n    border: none;\n    color: white;\n    padding: 15px 32px;\n    margin: 5px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    }\n```\n\nRun the application in development like this:\n\n```\n    ng serve\n```\n\nIn some cases it will fail to compile, when this happens re-run it and it will compile.\n\n![angular-errorhandler-javascript-img2](//images.ctfassets.net/1es3ne0caaid/fMFAgkZb8ThyXLPAMiOBE/995bcfcedc9db7f979796fdd1c956192/angular-errorhandler-javascript-img2.gif)\n\nThis shows in the console and most of the time, breaks the entire application immediately as you can see the message we logged did not show. The try/catch block handles these exceptions gracefully and the application continues running. So, if you had another button with a try catch block this time, you can spot the difference. Copy this in the `app.component.html file` :\n\n```html\n    \u003c!-- src/app/app.component.html --\u003e\n    \u003cbutton (click)=\"normalError()\"\u003e\n    Fire Normal Error\n    \u003c/button\u003e\n    \u003cbr\u003e\n    \u003cbutton (click)=\"errorWithCatch()\"\u003e\n    Fire Error With Try Catch\n    \u003c/button\u003e\n```\n\nCopy the code below in the `app.component.ts` file:\n\n```typescript\n    // src/app/app.component.ts\n    import { Component } from '@angular/core';\n    @Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n    normalError() {\n    const babies = foo;\n    console.log(\"This is normal error without a try catch\");\n    }\n    errorWithCatch() {\n    try {\n    const babies = foo;\n    } catch (error) {\n    console.log(' — Error is handled gracefully: ', error.name);\n    }\n    console.log(' — Execution continues without app breaking');\n    }\n    }\n```\n\nThe code in bold shows the same reference error instance, but this time around it is wrapped in a try-catch block so it can be handled gracefully. When you run the app again, it should look like this:\n\n![angular-errorhandler-javascript-img3](//images.ctfassets.net/1es3ne0caaid/6c3x7B8SDVuNtLoJ9gZO9d/2b561f215b8ca081fdcb36e30abb872b/angular-errorhandler-javascript-img3.gif)\n\n## Limitations of try/catch\n\nAs great as try/catch is, thinking about the application you already see how it is not sustainable. This is because you can not go about adding these try/catch blocks in every function in your application, that is not resource effective. The good news is, Angular has a kind of global try/catch that we can use in one centralized location to catch all exceptions.\n\n## Error handler\n\nAngular has a global error handling class called errorHandler that provides a hook for centralized exception handling inside your application. It basically intercepts all the errors that happen in your application, and logs all of them to the console, and stops the app from crashing (this was why your first button did not crash the app).\nThe syntax looks like this:\n\n```javascript\n    class MyErrorHandler implements ErrorHandler {\n      handleError(error) {\n        // do something with the exception\n      }\n    }\n    \n    @NgModule({\n      providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n    })\n    class MyModule {}\n```\n\nThis lets us modify the default behaviour of logging errors to the console to our own logic after we have added it to our providers list in our app module. Go to the the `app.component.ts` file and copy the code below in it:\n\n```typescript\n    // src/app/app.component.ts\n    import { Component } from '@angular/core';\n    @Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n     normalError() {\n      const babies = foo;\n    }\n    errorWithCatch() {\n     const babies = foo;\n     }\n    }\n```\n\nThe try catch block has been removed, so you should have two squeaky lines (or problems) in your code editor signifying two reference errors. Now to test the Angular global error handler, navigate to the `app.module.ts` file and copy the code below:\n\n```typescript\n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule, ErrorHandler } from '@angular/core';\n    import { AppRoutingModule } from './app-routing.module';\n    import { AppComponent } from './app.component';\n    export class MyErrorHandler implements ErrorHandler {\n     constructor() {}\n     handleError(error: Error) {\n      if (Error) {\n       console.log(\"hi\");\n      }\n      else console.log(\"hello\");\n      }\n     }\n    @NgModule({\n    declarations: [\n    AppComponent\n    ],\n    imports: [\n    BrowserModule,\n    AppRoutingModule\n    ],\n    providers: [\n     {\n      provide: ErrorHandler,\n      useClass: MyErrorHandler,\n     },\n    ],\n    bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n```\n\nThe changes made just like the syntax suggests we created a global error handler class that implements the Angular error handler and then registered it in the provider section.\nOur logic simply checks for errors and logs a message for any errors found. If you save this and run the application you will see the texts logged in the console for every error and the application working just like it was a try-catch. \n\n## Error service\n\nNow you can see all our error logic is inside the core app module, this is not the way Angular encourages us to write code. So in line with keeping everything modular, we use a service. you will call it error service and all the logic on how to handle your errors will be kept in it. \nFirst of all, generate an Angular service with the CLI:\n\n```\n    ng generate service error\n```\nor\n```\n    ng g s error\n```\n\nThen you have to remove the error handler logic in your `app.module.ts` file so that it will look like this:\n\n```typescript\n    // src/app/app.component.ts\n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule, ErrorHandler } from '@angular/core';\n    import { AppRoutingModule } from './app-routing.module';\n    import { AppComponent } from './app.component';\n    import { ErrorService } from './error.service';\n    import { ErrorComponent } from './error/error.component';\n    @NgModule({\n    declarations: [\n    AppComponent,\n    ErrorComponent\n    ],\n    imports: [\n    BrowserModule,\n    AppRoutingModule\n    ],\n    providers: [\n     {\n      provide: ErrorHandler,\n      useClass: ErrorService,\n     },\n    ],\n    bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n```\n\nAfter that use the CLI to generate an error component where the user can be redirected to if an error occurs.\n\n```\n    ng g c error\n```\n\nNow you have the error component you do no not need to modify it, navigate to the `error.service.ts` file and copy the code below in it:\n\n```typescript\n    // src/app/error.service.ts\n    import { Injectable, ErrorHandler, Injector } from '@angular/core';\n    import { Router } from '@angular/router';\n    import { HttpErrorResponse } from '@angular/common/http'\n    @Injectable({\n    providedIn: 'root'\n    })\n    export class ErrorService implements ErrorHandler{\n     constructor(private injector: Injector) { }\n     handleError(error: any) {\n      const router = this.injector.get(Router);\n      if (Error instanceof HttpErrorResponse) {\n       console.log(error.status);\n      }\n      else {\n       console.error(\"an error occurred here broo\");\n      }\n      router.navigate(['error']);\n      }\n    }\n```\n\nHere the logic is modified a bit to first check the kind of error it is, if it is an insider error then it navigates the user to an error page as the error occurs. So make sure your `app-routing.module.ts` file is updated with the route like this:\n\n```typescript\n    // src/app/app-routing.module.ts\n    import { NgModule } from '@angular/core';\n    import { Routes, RouterModule } from '@angular/router';\n    import { ErrorComponent } from './error/error.component';\n    const routes: Routes = [\n    { path: 'error', component: ErrorComponent}\n    ];\n    @NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule]\n    })\n    export class AppRoutingModule { }\n```\n\nFinally, your `app.component.html` file should look like this:\n\n```html\n    \u003cdiv\u003e\n    \u003cbutton (click)=\"normalError()\"\u003e\n    Fire Normal Error\n    \u003c/button\u003e\n    \u003cbr\u003e\n    \u003cbutton (click)=\"errorWithCatch()\"\u003e\n    Fire Error With Try Catch\n    \u003c/button\u003e\n    \u003c/div\u003e\n    \u003crouter-outlet\u003e\u003c/router-outlet\u003e\n```\n\nIf you followed the post to this point, you can run the application in development again, your errors will be gracefully handled as expected. \n\n## Conclusion\n\nYou have been introduced to errors and the concept behind handling them in Angular with the errorHandler class with focus on client side JavaScript errors. The [next tutorial](https://pusher.com/tutorials/error-handling-angular-part-2) will go deep into outsider errors, the HTTP interceptors and error tracking with a remote service building on all the concepts you have learnt in this post. The complete code for this tutorial is on GitHub and can be [found here.](https://github.com/viclotana/ng_errors) ","metaTitle":"Introduction to error handling in Angular 7 - Part 1","metaDescription":"This tutorial series will introduce you to errors in JavaScript and the try-catch concept. In part one, learn how the concept is used, and how to handle internal errors in Angular with the Angular errorHandler, with a focus on client side JavaScript errors."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7yewCXxjJklEoqK6pkJvnA","type":"Entry","createdAt":"2019-07-15T19:05:47.959Z","updatedAt":"2019-07-15T19:05:47.959Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an Instagram clone with Ionic: Part 4 - Testing your Ionic application on mobile devices","url":"instagram-clone-ionic-part-4","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qeLNtkOw0ImAS2QcUcKcG","type":"Entry","createdAt":"2018-06-15T10:54:43.491Z","updatedAt":"2019-05-17T10:50:18.109Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Oreoluwa Ogundipe","url":"oreoluwa-ogundipe","email":"oreogundipe@gmail.com","twitter":"https://twitter.com/ogundipeore","github":"https://github.com/orehga","guestWriter":true}}],"projectRepo":"https://github.com/oreHGA/ionic-insta-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2019-07-15","description":"This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functionalities. In this fourth and final part, make your servers publicly accessible so you could test the application on mobile devices.","prerequisite":"You will need Node 10+, Node Package Manager 6+, Cordova 8+ and Docker 18+ installed on your machine.","content":"Through the series, our GraphQL and event server have been accessible via `localhost`. Since we have been viewing the application on our local browser, the browser can access the localhost without any issues. These servers need to be accessible on a public URL so that the mobile device can connect to them.\n\n\n## Prerequisites\n- You should have followed through the earlier parts of the series.\n- Basic knowledge of JavaScript.\n- [Node](http://www.nodejs.org) installed on your machine (v10.13.0)\n- [Node Package Manager](https://www.npmjs.com/) installed on your machine (v 6.4.1)\n- [Cordova](https://cordova.apache.org/) installed on your machine (v 8.1.2)\n- Docker installed on your machine. (version 18.09.2) Download [here](https://www.docker.com/community-edition).\n\n\n## Using localhost.run to share your localhost\n\nTo share your localhost on a public URL, let’s use [localhost.run](https://localhost.run). There are no downloads required to use this service. Just open your terminal and paste a code:\n\n```\n    ssh -R 80:localhost:\u003cPORT_YOU_WANT_TO_SHARE\u003e ssh.localhost.run\n```\n\n\u003e Remember to replace `PORT_YOU_WANT_TO_SHARE` with the actual port on the local server your application is running on.\n\n\n## Making the GraphQL server publicly accessible\n\nNow, your GraphQL server was accessible on port 4466 of your local machine, go ahead and then run this in the terminal:\n\n```\n    ssh -R 80:localhost:4466 ssh.localhost.run\n```\n\n\u003e Ensure that the GraphQL server is running by checking docker on your machine\n\nThis command returns a URL as a response. Go ahead and then paste the URL in your `app.module.ts` as the link to your GraphQL server:\n\n```typescript\n    // src/app/app.module.ts\n    \n    // [...] \n    \n    export class AppModule {\n      constructor(apollo: Apollo, httpLink: HttpLink) {\n        apollo.create({\n          link: httpLink.create({ uri: 'LINK_TO_PUBLICLY_ACCESIBLE_URL' }), // uri specifies the endpoint for our graphql server\n          cache: new InMemoryCache()\n        })\n      }\n    }\n```    \n\n\n## Making the event server publicly accessible\n\nEarlier in the series, we created the event server and served it on port 3128 of the localhost. To make it public accessible too, run this command:\n\n```\n    ssh -R 80:localhost:3128 ssh.localhost.run\n```\n\n\u003e Ensure that the event server is still running. If it isn’t running, navigate to the `server/` of the project and run `node server.js`\n\nYou will be provided with a publicly accessible URL for the event server. Now, let’s update the places where requests were made to the event server in the code.\n\nFirst, update the `uploadPost` method in the `CreatePost` page:\n\n```typescript\n    // src/pages/create-post/create-post.ts\n    \n    // [...]\n    \n    export class CreatePostPage {\n      // [...]\n    \n      public uploadPost() {\n        this.apollo.mutate({\n          mutation: createUserPost,\n          variables: {\n            image_url: this.image_url,\n            description: this.description,\n            likes: 10,\n            postedAt: this.posted_at,\n            user: { \"connect\": { \"id\": this.user_id } }\n          }\n        }).subscribe((data) =\u003e {\n          console.log('uploaded successfuly');\n          // after sucessful upload, trigger pusher event\n          let post_response: any = data;\n          this.http.post('LINK_TO_PUBLICLY_ACCESSIBLE_URL/trigger-post-event', post_response.data.createPost)\n            .subscribe(() =\u003e {\n              this.showAlert('Post Shared', 'Your post has been shared with other users');\n              this.navCtrl.push(HomePage);\n            });\n        }, (error) =\u003e {\n          this.showAlert('Error', 'There was an error sharing your post, please retry');\n          console.log('there was an error sending :the query', error);\n        })\n      }\n    \n      // [...]\n    }\n```\n\nAlso, go ahead to update the `postComment` method in the `CommentPage`:\n\n```typescript\n    // src/pages/comment/comment.ts\n    \n    // [...]\n    \n    export class CommentPage {\n      // [...]\n    \n      public postComment() {\n        this.apollo.mutate({\n          mutation: makeComment,\n          variables: {\n            message: this.user_comment,\n            postedAt: (new Date()).toISOString(),\n            user: { connect: { id: \"YOUR_USER_ID_FROM_GRAPHQL_SERVER\" } },\n            post: { connect: { id: this.post_id } }\n          }\n        }).subscribe((data) =\u003e {\n          let post_response: any = data;\n          // after successful upload, trigger new comment event\n          this.http.post('LINK_TO_PUBLICLY_ACCESSIBLE_URL/trigger-comment-event', post_response.data.createComment)\n            .subscribe(() =\u003e {\n              this.showAlert('Success', 'Comment posted successfully');\n            });\n        }, (error) =\u003e {\n          this.showAlert('Error', 'Error posting comment');\n        });\n      }\n    \n      // [...]\n    }\n```\n\nNow that this is all done, we can access both the GraphQL server and event server anywhere the code is run.\n\nNow, navigate to the root directory of your project and run your application:\n\n```\n    ionic serve -c\n```\n\n## Using the IonicDevApp\n\nTo test the application on your mobile device, download the [IonicDevApp](https://ionicframework.com/docs/pro/devapp/) on your mobile device. Ensure that your device and computer are on the same network and you should see this demo application listed there:\n\n\n![instagram-clone-ionic-testing-img1](//images.ctfassets.net/1es3ne0caaid/4lxO3Esb7emGocD27lhtHh/1e6d9a96e8ea8fe1fd802025de0d711b/instagram-clone-ionic-testing-img1.png)\n\nNow, testing with the device, we get the following:\n\n\n![instagram-clone-ionic-testing-img2](//images.ctfassets.net/1es3ne0caaid/2Uhn25upplCXU6iqyfadGh/92b3d3b1fd292f82349c25bce0023faa/instagram-clone-ionic-testing-img2.png)\n![instagram-clone-ionic-testing-img3](//images.ctfassets.net/1es3ne0caaid/6gYK4Js7v0ntF3UXwhaxnO/caf9582f605168f8cb54e474a3e280e3/instagram-clone-ionic-testing-img3.png)\n\n\n\n![instagram-clone-ionic-testing-img4](//images.ctfassets.net/1es3ne0caaid/36egj1E86rMXIeLUUCjhKR/6b8f5656c0e7dcbf2955ae4b07649ddf/instagram-clone-ionic-testing-img4.png)\n![instagram-clone-ionic-testing-img5](//images.ctfassets.net/1es3ne0caaid/1wh9dpUDH4P7aI8UsyEJpq/3f8416656595940fb1b6cefd0af4121d/instagram-clone-ionic-testing-img5.png)\n\n\n![instagram-clone-ionic-testing-img6](//images.ctfassets.net/1es3ne0caaid/36bEcaL8xNWD7uqYYn8mvl/bcda487222cf8b454f33ad01f5509d2f/instagram-clone-ionic-testing-img6.gif)\n\n\nHead over [here](https://ionicframework.com/docs/v3/intro/deploying/) for more information on how to deploy to target devices.\n\n\n## Conclusion\n\nIn this four-part series, we walked through building a simple Instagram clone with Ionic. In the [first part](https://pusher.com/tutorials/instagram-clone-ionic-part-1) of the series, we looked at how to build the interface of the application. In the [second part](https://pusher.com/tutorials/instagram-clone-ionic-part-2), we went through an introduction to GraphQL and how to fetch data dynamically in the application. The [third part](https://pusher.com/tutorials/instagram-clone-ionic-part-3) of the series walked through uploading posts and comments from the application using [Cloudinary](https://cloudinary.com) and Pusher to enable realtime functionality. Finally, in this part of the series, we looked at steps to making your servers publicly accessible so we could test the application on mobile devices.\n\nFeel free to use the concepts learned in this series when you’re building your own applications. Here’s a link to the full [GitHub](https://github.com/oreHGA/ionic-insta-clone) repository.","metaTitle":"Build an Instagram clone with Ionic - Part 4","metaDescription":"This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functionalities. In this fourth and final part, make your servers publicly accessible so you could test the application on mobile devices."}}],"defaultValue":"","queryType":"","pages":50,"route":"/tutorials","query":{"page":"3"}}},"page":"/tutorials","query":{"page":"3"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:22:15 GMT -->
</html>