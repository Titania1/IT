<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=iOS&page=4 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:39:45 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">43</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; iOS</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials3aba.html?tag=iOS" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsb729.html?product=Beams&amp;tag=iOS" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials0e67.html?product=Channels" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#C223CE"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; iOS"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/live-blog-swift-go.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a live blog app using Swift and Go</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Build a live blogging app for iOS with Swift. Create a backend using Go. Admin users will be able to add blog posts, wit...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/ios-chat-app-swift-chatkit-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an iOS chat app using Swift and Chatkit - Part 3: Building the iOS app</h3><p class="css-k12xad e5jrto45">Build a chat app for iOS, with a Laravel API backend. In part three, build the iOS application. By the end of this secti...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-geolocation-arkit-corelocation.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">AR-VR<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime geolocation app with ARKit and CoreLocation</h3><p class="css-k12xad e5jrto45">Discover how to build a AR experience for ride hailing apps focused on location and realtime features.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-map-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime map with Swift</h3><p class="css-k12xad e5jrto45">Learn how to build your own realtime map on iOS with Swift and Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-table-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime table using Swift</h3><p class="css-k12xad e5jrto45">Learn how to use iOS  to create a table that is updated across all your devices in realtime. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chart-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Realtime Chart</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime chart in Swift</h3><p class="css-k12xad e5jrto45">Create a simple realtime chart in iOS using Swift, Node.js and Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/user-status-update-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a user status update in Swift</h3><p class="css-k12xad e5jrto45">Create an iOS application with realtime user status updates, similar to WhatsApp.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/read-receipts-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build read receipts using Swift</h3><p class="css-k12xad e5jrto45">Create an iOS chat application with a message delivery status using Swift, Node.js and Pusher for realtime functionality...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/collaborative-text-editor-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Collaboration</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a collaborative text editor using Swift</h3><p class="css-k12xad e5jrto45">Build a realtime collaborative text editor on iOS using Swift and Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials1750.html?product=Channels&amp;tag=iOS&amp;page=3" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials5d28.html?product=Channels&amp;tag=iOS&amp;page=1" class="css-5s6711 edg0byb1">1</a><a href="tutorials9593.html?product=Channels&amp;tag=iOS&amp;page=2" class="css-5s6711 edg0byb1">2</a><a href="tutorials1750.html?product=Channels&amp;tag=iOS&amp;page=3" class="css-5s6711 edg0byb1">3</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials9672.html?product=Channels&amp;tag=iOS&amp;page=4" class="css-2wakph edg0byb1">4</a><a href="tutorialsfc3a.html?product=Channels&amp;tag=iOS&amp;page=5" class="css-5s6711 edg0byb1">5</a><a href="tutorialsfc3a.html?product=Channels&amp;tag=iOS&amp;page=5" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":43,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mROLAeJqdUOeyyeIOaY6e","type":"Entry","createdAt":"2018-06-22T15:26:32.144Z","updatedAt":"2020-06-19T12:35:25.717Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a live blog app using Swift and Go","url":"live-blog-swift-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/liveblog-swift-go-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2018-06-20","description":"Build a live blogging app for iOS with Swift. Create a backend using Go. Admin users will be able to add blog posts, with the homepage showing the updates in realtime.","prerequisite":"You will need Xcode, Go, SQLite and Cocoapods installed on your machine. Some knowledge of Swift will be helpful.","content":"Live blogs allow users to follow events live without audio or video. It's particularly useful when you are in situations where you cannot consume audio/video media. Live blogs have been used to cover things like football commentary, political commentary, and more.\n\nIn this article, we are going to consider how to build a live blogging application. We will be building it using Swift for iOS and we will use Go as the backend language for the application.\nWhen we are done with the application, this is what it will look like:\n\n![swift-liveblog-demo](//images.ctfassets.net/1es3ne0caaid/DXndn8OaXYOsmIYImoc4g/57197aefae945c69127b5289f6566b3c/swift-liveblog-demo.gif)\n\n## Prerequisites\n\nTo get started you need the following:\n\n\n- Xcode (v9.x) running on your machine. [Download Xcode](https://developer.apple.com/xcode/).\n- Go (v0.10 or later) installed on your machine. [Installation guide](https://golang.org/doc/install#install).\n- SQLite installed on your machine.\n- Knowledge of the Swift programming language.\n- Basic knowledge of the Go programming language.\n- Knowledge of using the Xcode IDE.\n- Cocoapods installed on your machine. [Installation guide](https://guides.cocoapods.org/using/getting-started.html).\n  \n\nLet's get started.\n\n## Creating the Swift application\n\nLaunch Xcode and create a new 'Single View App' project. We will creatively name ours ... *drum rolls* ... LiveBlog. Next, close Xcode and `cd` to the root directory of your Xcode project and run the following command:\n\n```\n    $ pod init\n```\n\nThis command will create a new `Podfile` in the root of your project. Open the `Podfile` in your code editor and paste the following code:\n\n```\n    platform :ios, '11.0'\n    \n    target 'LiveBlog' do\n      use_frameworks!\n    \n      pod 'Alamofire', '~\u003e 4.7.2'\n      pod 'PusherSwift', '~\u003e 6.1.0'\n      pod 'PushNotifications', '~\u003e 0.10.8'\n      pod 'NotificationBannerSwift', '~\u003e 1.6.3'\n    end\n```\n\nNext, run the following command to install the packages listed above using Cocoapods:\n\n```\n    $ pod install\n```\n\nWhen the installation is complete, you will see a `LiveBlog.xcworkspace` file in the project directory. Open this file in Xcode.\n\nLet's create our application's storyboard. Open the `Main.storyboard` file and what we want to do is create something similar to the board below:\n\n![swift-liveblog-storyboard](//images.ctfassets.net/1es3ne0caaid/4KTjm5s42c84E4OU0EyqcW/9fd1fe99e09b565aec3f032cd4a34b7d/swift-liveblog-storyboard.png)\n\nTo create this, we added a new navigation controller and made it the entry point of the storyboard. We then assigned a reuse identifier to the cell on the table view controller called post. We also set the title of the view controller using the interface builder.\n\nNext, create a table view controller called `PostsTableViewController` and set this as the custom class for the table view controller in the main storyboard.\n\nIn the `PostsTableViewController` paste in the following code:\n\n``` swift\n    import UIKit\n    import Alamofire\n    import NotificationBannerSwift\n    \n    struct Post: Codable {\n        let id: Int64\n        let content: String\n    }\n    \n    struct Posts: Codable {\n        var items: [Post]\n    }\n    \n    class PostsTableViewController: UITableViewController {\n    \n        var posts = Posts(items: [])\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n    \n            Alamofire.request(\"http://127.0.0.1:9000/posts\").validate().responseJSON { resp in\n                guard resp.result.isSuccess, let data = resp.data else {\n                    return StatusBarNotificationBanner(title: \"Unable to fetch posts\", style: .danger).show()\n                }\n    \n                if let posts = try? JSONDecoder().decode(Posts.self, from: data) {\n                    self.posts = posts\n                    self.tableView.reloadData()\n                }\n            }\n        }\n    \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return posts.items.count\n        }\n    \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"post\", for: indexPath)\n            let post = posts.items[indexPath.row]\n    \n            cell.textLabel?.text = post.content\n    \n            return cell\n        }\n    \n    }\n```\n\nAbove we have a two `Codable` structs for the `Post` and `Posts` objects. We will decode the response from the API to these objects and make working with JSON responses easier.\n\n**Recommended:** [**Decoding JSON using Codable in Swift 4**](https://blog.pusher.com/swift-4-decoding-json-codable/)\n\nIn our `viewDidLoad` method, we make a request to the API to fetch the posts and then we save them to the `posts` property of the controller then we reload the `tableView`.\nThe rest of the methods in the controller should be familiar to you. They are used to override the table view's rendering.\n\n### Adding realtime functionality\nBecause we are creating a live blog, we want to add the realtime functionality to the application so that when a new post is made, we get an instant update.\n\nIn the `PostsTableViewController`, import the Pusher Swift SDK:\n\n``` swift\n    import PusherSwift\n```\n\nNow in the `viewDidLoad` method, we can add our Pusher functionality. At the top of the method after `super.viewDidLoad()`, add the following code:\n\n``` swift\n    let pusher = Pusher(\n        key: \"PUSHER_APP_KEY\", \n        options: PusherClientOptions(\n            host: .cluster(\"PUSHER_APP_CLUSTER\")\n        )\n    )\n    \n    let channel = pusher.subscribe(\"live-blog-stream\")\n    \n    let _ = channel.bind(eventName: \"new-post\") { data in\n        if let data = data as? [String: AnyObject] {\n            if let id = data[\"id\"] as? Int64, let content = data[\"content\"] as? String {\n                self.posts.items.insert(Post(id: id, content: content), at: 0)\n                self.tableView.reloadData()\n            }\n        }\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the value from your Pusher dashboard.\n\nIn the code above, we create an instance of the Pusher SDK and then we `subscribe` to the `live-blog-stream` channel. We then `bind` a callback to the `new-post` event on the channel.\n\nWhenever this event is triggered, the callback is fired. In the callback, we update the `posts` with the new post that was passed with the event then we reload the `tableView` so the changes are reflected immediately.\n\nWith those few lines, we have implemented realtime functionality to the application. Easy right?\n\n## Creating the Go backend for our realtime application\n\nThe next thing we want to do is create the backend for our application. We will make it as simple as possible so we can easily demonstrate how to trigger events on a channel in Pusher using Go.\n\nCreate a new project directory for the Go application. Let's call it `liveblog-backend` and in that directory create a `public` directory:\n\n```\n    $ mkdir liveblog-backend\n    $ cd liveblog-backend\n    $ mkdir public\n```\n\nIn the root directory, create a new file called `main.go` and in here is where all our Go code will reside.\n\nOpen the `main.go` file in your favorite editor and paste the following code into the file:\n\n``` go\n    package main\n    \n    import (\n        \"database/sql\"\n        \"net/http\"\n    \n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/middleware\"\n        _ \"github.com/mattn/go-sqlite3\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    func main() {\n        e := echo.New()\n    \n        e.Use(middleware.Logger())\n        e.Use(middleware.Recover())\n    \n        db := initialiseDatabase(\"./storage.db\")\n        migrateDatabase(db)\n    \n        e.File(\"/admin\", \"public/admin.html\")\n        e.GET(\"/posts\", getPosts(db))\n        e.POST(\"/posts\", savePost(db))\n    \n        e.Logger.Fatal(e.Start(\":9000\"))\n    }\n```\n\nAbove, we import the packages we will need for the Go application to function properly. We also defined a `main` function which will be the sole entry point of the application.\n\nIn the `main` function, we instantiated the [Echo framework](https://echo.labstack.com/) and we added some middlewares to the instance of `echo`.\n\nNext, we initialized the database and ran a migration on the database. This will create a `storage.db` file in the root directory. This is the file SQLite will use to operate. Finally, we defined some routes for our application and specified the port we want our application to start on, 9000.\nIn the `main` function, we referenced some functions we had not created so let's add these functions.\n\nIn the `main.go` file, add the following above the `main` function:\n\n``` go\n    func initialiseDatabase(filepath string) *sql.DB {\n        db, err := sql.Open(\"sqlite3\", filepath)\n    \n        if err != nil {\n            panic(err)\n        }\n    \n        if db == nil {\n            panic(\"db nil\")\n        }\n    \n        return db\n    }\n    \n    func migrateDatabase(db *sql.DB) {\n        sql := `\n            CREATE TABLE IF NOT EXISTS posts(\n                    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n                    content TEXT\n            );\n    `\n        _, err := db.Exec(sql)\n        if err != nil {\n            panic(err)\n        }\n    }\n    \n    func getPosts(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            rows, err := db.Query(\"SELECT * FROM posts ORDER BY id DESC\")\n            if err != nil {\n                panic(err)\n            }\n    \n            defer rows.Close()\n    \n            result := PostCollection{}\n    \n            for rows.Next() {\n                post := Post{}\n                err2 := rows.Scan(\u0026post.ID, \u0026post.Content)\n                if err2 != nil {\n                    panic(err2)\n                }\n    \n                result.Posts = append(result.Posts, post)\n            }\n    \n            return c.JSON(http.StatusOK, result)\n        }\n    }\n    \n    func savePost(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            postContent := c.FormValue(\"content\")\n            stmt, err := db.Prepare(\"INSERT INTO posts (content) VALUES(?)\")\n            if err != nil {\n                panic(err)\n            }\n    \n            defer stmt.Close()\n    \n            result, err := stmt.Exec(postContent)\n            if err != nil {\n                panic(err)\n            }\n    \n            insertedID, err := result.LastInsertId()\n            if err != nil {\n                panic(err)\n            }\n    \n            post := Post{\n                ID:      insertedID,\n                Content: postContent,\n            }\n    \n            client.Trigger(\"live-blog-stream\", \"new-post\", post)\n    \n            return c.JSON(http.StatusOK, post)\n        }\n    }\n```\n\nAbove, we have four functions. The first is the `initialiseDatabase` function. We use this to create the database file if it does not exist and then create a connection to the database once it exists. The `migrateDatabase` function does just what the name suggests. It executes migrations for the database if it was not previously run.\n\nThe `getPosts` function gets the list of posts from the database and returns it as a JSON response. The `savePost` function saves a new post to the database and triggers an update to Pusher on the `live-blog-stream` channel.\n\nThe `savePost` function is referencing a Pusher client instance that does not exist so let's create that. In the `main.go` file right after the `import` statements, add the following:\n\n``` go\n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the keys from your Pusher application dashboard.\n\nIn the above, we instantiate the Pusher Go client with the credentials from the dashboard. This will make it possible to trigger events using the Pusher instance.\n\nThe final thing we want to do is add the object structures for our `Post` and `PostCollection`. In the same `main.go` file, add the following code below the Pusher instance above:\n\n``` go\n    // Post type\n    type Post struct {\n        ID      int64  `json:\"id\"`\n        Content string `json:\"content\"`\n    }\n    \n    // PostCollection type\n    type PostCollection struct {\n        Posts []Post `json:\"items\"`\n    }\n```\n\nNow save and close the file.\n\nCreate a new `admin.html` file in the `public` directory and paste the following into it:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003ctitle\u003eAdmin Panel\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\"\u003e\n        \u003cstyle\u003e\n            .container {\n                max-width: 500px;\n            }\n            .logo-space {\n                text-align: center;\n                padding: 50px 0;\n                background-color: #bada55;\n                margin: 10px 0;\n            }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n            \u003cdiv class=\"container\"\u003e\n                \u003cdiv class=\"logo-space\"\u003e\n                    \u003ch1\u003eLive Blog\u003c/h1\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"alert alert-success\" role=\"alert\" v-show=\"successfulPost\"\u003e\n                    Post added successfully!\n                \u003c/div\u003e\n                \u003cform action=\"/posts\" method=\"POST\" id=\"post-stuff\" v-on:submit.prevent=\"submitForm\"\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003ctextarea class=\"form-control\" v-model=\"content\" placeholder=\"Enter Post\"\u003e\u003c/textarea\u003e\n                    \u003c/div\u003e\n                    \u003cinput type=\"submit\" class=\"form-control btn btn-primary\" name=\"submit\" value=\"Update Stream\"\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript\u003e\n            new Vue({\n                el: \"#app\",\n                data: {\n                    content: \"\",\n                    successfulPost: false\n                },\n                methods: {\n                    submitForm() {\n                        if (this.content.length \u003e 0 \u0026\u0026 this.content !== \"\") {\n                            let data = new FormData()\n                            data.append(\"content\", this.content)\n    \n                            axios.post(\"/posts\", data).then(res =\u003e {\n                                this.content = \"\"\n                                this.successfulPost = true\n                                setTimeout(() =\u003e this.successfulPost = false, 3000)\n                            })\n                        }\n                    }\n                }\n            })\n        \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe code above is for the admin page where we can add our new posts. This will then make a POST request to the API to add a new post to the database. When the post is added to the database, an event will be triggered by the Pusher Go client. This event will then be picked up by the Swift application and the iOS app will be updated in realtime.\n\nSave the file and execute the following command to run our Go application:\n\n```\n    $ go run main.go\n```\n\nThis will start a server on port 9000.\n\n## Testing our live blogging application\n\nThe next thing we need to do is test our application. Open your project in Xcode using the `.xcworkspace` file. Before building the application though, we need to do one last thing. Open the `info.plist` file and apply the following changes:\n\n![swift-liveblog-info-plist](//images.ctfassets.net/1es3ne0caaid/3soymv0P2Miks2EsGQEEOk/a8fad768891f219b1ae10f7710047207/swift-liveblog-info-plist.png)\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\n![swift-liveblog-demo](//images.ctfassets.net/1es3ne0caaid/DXndn8OaXYOsmIYImoc4g/57197aefae945c69127b5289f6566b3c/swift-liveblog-demo.gif)\n\n## Conclusion\n\nIn this article, we have seen how we can easily create a live blog using Swift, Go and Pusher Channels.\n\nPusher Channels makes it very easy to implement realtime features into almost any application in all languages. You should check out the [documentation](https://pusher.com/docs) here to get started.\nThe source code for this article is available on [GitHub](https://github.com/neoighodaro/liveblog-swift-go-pusher).","metaTitle":"Create a live blog app using Swift and Go","metaDescription":"Use Swift and Go to create an iOS app that allows admins to publish blog posts quickly. The homepage shows new posts in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5aeEXGAZZeeAQGmMc4mggo","type":"Entry","createdAt":"2018-06-05T12:52:45.191Z","updatedAt":"2020-06-19T14:25:43.622Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an iOS chat app using Swift and Chatkit - Part 3: Building the iOS app","url":"ios-chat-app-swift-chatkit-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/pusher/sample-chatroom-ios-chatkit","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2018-06-05","description":"Build a chat app for iOS, with a Laravel API backend. In part three, build the iOS application. By the end of this section you will have a working app with instant chat functionality.","prerequisite":"To follow this series you will need Xcode, Cocoapods, PHP and Laravel installed on your machine. Some knowledge of Xcode and Swift will be helpful.","content":"We previously created the API backend we need our iOS application to connect to. In this part, we will create the application itself using Xcode and Swift. We will be building out the application based on the prototypes we created in the first part of the series.\n\nHere are the prototypes we made using our prototyping tool:\n\n![Create-iOS-Chat-App-Using-Chatkit-prototype](//images.ctfassets.net/1es3ne0caaid/2OGOxROMGsikAgIMAksa66/810bd07140a87a274ee6f983235342c4/Create-iOS-Chat-App-Using-Chatkit-prototype.png)\n\n Let’s go through some requirements you need to have to follow this part of the article.\n\n## Creating our app’s storyboard in Xcode\n\nWe previously created the scenes of our application in Xcode using the Clean Swift templates. Now we are going to work on creating our storyboards and linking them to the view controllers we created.\n\n### Creating the launch scene\n\nFirst add a Navigation View Controller and a View Controller to the storyboard as seen below. The Navigation Controller will be the entry point to our application. Set the custom class for the second View Controller as the `LaunchViewController` we created in the first part of the article.\n\n![Create-iOS-Chat-App-Using-Chatkit-launch-scene-controller](//images.ctfassets.net/1es3ne0caaid/xgFRNtuy3YGiiSUMWsAYW/3e22912c68e4bcd6f09012d0c38d7ee0/Create-iOS-Chat-App-Using-Chatkit-launch-scene-controller.png)\n\nWe will use the `LaunchViewController` to determine which initial screen to present to the user when the app is launched. If the user is logged in we’ll present the contacts list, if not, we’ll present the Welcome scene so the user can log in or sign up.\n\n### Creating the welcome scene\nThe next scene we will create is the welcome scene. When a user is not logged in, they will be redirected to this scene. From here they can sign up or log in to their account. In the `Main.storyboard` add the View Controller and create a “Present Modally” manual segue from the launch controller to the controller you just created.\n\n![Create-iOS-Chat-App-Using-Chatkit-welcome-scene](//images.ctfassets.net/1es3ne0caaid/P1C4QxlOgKmQOwEkckUqs/31f6d0f2a15493825d2d33af23caaabe/Create-iOS-Chat-App-Using-Chatkit-welcome-scene.png)\n\nAfter creating the welcome view controller, you can start designing it to look like the prototype using a combination of `UILabel`s, `UIButton`s, and `UIView`s. Then set the name of the manual segue to **Welcome**. Finally, set the custom class for the view controller to `WelcomeViewController`\n\n### Creating the signup and login scene\n\nNext create two new View Controllers. The first will be for login and the second will be for sign up. Set theView Controller for the Signup controller to `SignupViewController` and the custom class for the login View Controller to `LoginViewController`.\n\nCreate a “Present Modally” segue from the **Sign In** button to the `LoginViewController` and from the **Don’t have an account? Sign up here** button to the `SignupViewController`. Name the segues **Login** and **Signup**.\n\n![Create-iOS-Chat-App-Using-Chatkit-signup-login-scene](//images.ctfassets.net/1es3ne0caaid/3Yp5Dp0gNaEG24i0aAWKcE/bddb6f073a6c86d080affba594de08be/Create-iOS-Chat-App-Using-Chatkit-signup-login-scene.png)\n\nIn the Signup view create three input fields and create an `@IBOutlet` for them in the `SignupViewController`, we named ours `emailTextField`, `nameTextField` and `passwordTextField`. Create an `@IBAction` called `cancelButtonWasPressed` for the cancel button and `signupButtonWasPressed`  for the sign up button.\n\nIn the login view, we will follow almost the same steps as the sign up controller, but, this time the  `@IBAction` will be named `loginButtonWasPressed` and there will be no `nameTextField`.\n\n### Creating the ListContacts and Chatroom scenes\n\nNext, create a Navigation controller and make sure the root controller for it is a `UITableViewController`. Create a manual segue named **ListMessages** from the `LaunchViewController` to the navigation controller and set the custom class of the `UITableViewController` to `ListContactsViewController`.\n\nCreate a “Present Modally” manual segue named **MainNavigator** between the navigation controller and the Login and Signup scenes. \n\nLastly, create a new `UIViewController` and create a segue named **Chatroom** from the Prototype Cells to the new View Controller, then set the custom class of the View Controller to `ChatroomViewController`.\n\nHere is a screenshot of our entire storyboard:\n\n![Create-iOS-Chat-App-Using-Chatkit-storyboard](//images.ctfassets.net/1es3ne0caaid/4bUz80F2Io4CSKSWA60mY0/131de2d7b16dd933cedd7b68eff1fd26/Create-iOS-Chat-App-Using-Chatkit-storyboard.png)\n\n## Adding functionality to our scenes\n\nNow that we have our scenes in place and hooked up to our View Controllers, let’s start adding the functionality to them. We will start at the very first piece of code that gets called when the application is launched: `AppDelegate`.\n\nIn the `AppDelegate` file, right below the `import` statement add the code block below:\n\n``` swift\n    struct AppConstants {\n        static let ENDPOINT: String = \"http://127.0.0.1:8000\"\n        static let CLIENT_ID: Int = API_CLIENT_ID\n        static let CLIENT_SECRET: String = \"API_CLIENT_SECRET\"\n        static let CHATKIT_INSTANCE_LOCATOR: String = \"CHATKIT_INSTANCE_LOCATOR\"\n    }\n```\n\nIn the `struct` above, we define some constants for our application. We will use this as some configuration value handler for our application. Replace the values for the `API_CLIENT_ID`, `API_CLIENT_SECRET` and `CHATKIT_INSTANCE_``LOCATOR` with the actual values.\n\n\n\u003e 💡  You can get the `API_CLIENT_*` key values from when you were setting up Passport in the previous part of the tutorial, and you can get the `CHATKIT_INSTANCE_``LOCATOR` from the Chatkit dashboard.\n\n### Launch scene\n\nOpen the `Scenes/Launch/LaunchSceneController` file and let us start adding some functionality to the class.\n\nIn the file, replace the code with [this](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Launch/LaunchViewController.swift)\n\nWe have simplified most of the code that comes with the Clean Swift template. In the `viewDidLoad` method, we check to see if the user is logged in using an `Authenticator` class, which we will create later. If the user is logged in then we route the user to the list messages page else we go to the welcome page.\n\nNext, open the `LaunchRouter` class and in the file paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Launch/LaunchRouter.swift)\n\nIn the router we have defined the `routeToWelcome` and `routeToListContacts` methods. Both methods do what is necessary to route the user to either the **Welcome** or **MainNavigator** segue.\n\nThis is all we need to do for the Launch scene. You can delete the other template files in the `Scenes/Launch` directory as we will not be using them.\n\n### Welcome scene\n\nFor our Welcome scene we do not need to do anything actually as the scene has no logic. In the `WelcomeViewController` you can just paste the code below:\n\n``` swift\n    import UIKit\n    \n    class WelcomeViewController: UIViewController {\n    }\n```\n\nYou can delete the other template files in the Welcome scene as we will not be needing them and they serve no purpose.\n\n### Login scene\n\nFor our Login scene we will start by adding the logic to our `LoginModels` class. The models will help us format the response from the API to what our application will be able to consume.\n\nIn the `LoginModels` file paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Login/LoginModels.swift). \n\nIn the code above we have defined a series of `struct`s and in them we have `Request` and `Response`. The `Request` standardises the parameters required for the request to the login endpoint while the `Response` takes the raw response from the API and saves them as either a  `ChatkitToken` or `UserToken` object. We will define the `ChatToken` and the `UserToken` object later in the article\n\nNext open the `LoginInteractor` and paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Login/LoginInteractor.swift) into the file.\n\nIn this class we have a `login` method that just calls a `login` method on the `UsersWorker` class. Depending on the response from that call, we either show a login error or we route to the contacts list.\n\nNext, open the `LoginRouter` class and in the file paste the following code:\n\n``` swift\n    import UIKit\n    \n    @objc protocol LoginRoutingLogic {\n        func routeToListContacts()\n    }\n    \n    class LoginRouter: NSObject, LoginRoutingLogic {\n        weak var viewController: LoginViewController?\n    \n        func routeToListContacts() {\n            let storyboard = UIStoryboard(name: \"Main\", bundle: nil)\n            let destinationVC = storyboard.instantiateViewController(withIdentifier: \"MainNavigator\") as! UINavigationController\n            \n            viewController!.show(destinationVC, sender: nil)\n        }\n    }\n```\n\nThe router above has just one method. This method routes the app to the list contacts page when called.\n\nThe last class we want to edit for this scene is the `LoginViewController`. This is the class that pieces the other classes above. Open the file and paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Login/LoginViewController.swift) into the file.\n\nIn the view controller we have the usual set up methods used by Clean Swift but we also have the `@IBAction`s and `@IBOutlet`s we created when we were creating our storyboards. \n\nIn the `cancelButtonPressed` method we just dismiss the login screen modal, in the `loginButtonPressed` method we call the `login` method on the interactor, and in the `showValidationError` method we show an alert with an error message.\n\n### Signup scene\n\nFor the Login scene functionality we will start with the models. Open the `SignupModels` file in the `Scene/Signup` directory and paste the code below into it:\n\n``` swift\n    import Foundation\n    \n    enum Signup {    \n        struct Request {\n            var name: String\n            var email: String\n            var password: String\n        }\n    \n        struct Response {\n            var user: User?\n            \n            init(data: [String:Any]) {\n                self.user = User(\n                    id: data[\"id\"] as! Int,\n                    name: data[\"name\"] as! String,\n                    email: data[\"email\"] as! String,\n                    chatkit_id: data[\"chatkit_id\"] as! String\n                )\n            }\n        }\n    }\n```\n\nIn the models we have Request and Response structs. Their functionality was described above.\n\nNext, paste the code below into the `SignupInteractor` class in the same directory:\n\n``` swift\n    import Foundation\n    \n    protocol SignupBusinessLogic {\n        func createAccount(request: Signup.Request)\n    }\n    \n    class SignupInteractor: SignupBusinessLogic {\n        var viewController: SignupFormErrorLogic?\n        var router: (NSObjectProtocol \u0026 SignupRoutingLogic)?\n        var worker = UsersWorker()\n    \n        func createAccount(request: Signup.Request) -\u003e Void {\n            self.worker.signup(request: request) { user, error in\n                guard error == nil else {\n                    self.viewController?.showValidationError(\"Error creating account!\")\n                    return\n                }\n                \n                self.router?.routeToListContacts()\n            }\n        }\n    }\n```\n\nIn the `createAccount` method, we call the `signup` method on the `UsersWorker` and then depending on the response we either route to the contacts list or show an error.\n\nNext, open the router class `SignupRouter` and paste the code below into it:\n\n``` swift\n    import UIKit\n    \n    @objc protocol SignupRoutingLogic {\n        func routeToListContacts()\n    }\n    \n    class SignupRouter: NSObject, SignupRoutingLogic {\n        weak var viewController: SignupViewController?\n        \n        func routeToListContacts() {\n            let storyboard = UIStoryboard(name: \"Main\", bundle: nil)\n            let destinationVC = storyboard.instantiateViewController(withIdentifier: \"MainNavigator\") as! UINavigationController\n            \n            viewController!.show(destinationVC, sender: nil)\n        }\n    }\n```\n\nAs in the login router, this method just routes the user to the contacts screen using the `MainNavigator` segue.\n\nFor the `SignupViewController`, use [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Signup/SignupViewController.swift).\n\nIn this view controller, we set up the Clean Swift components then in the `cancelButtonPressed` method we dismiss the signup modal and in the `signupButtonPressed` method we create the account using the interactor. The `showValidationError` shows an alert when it is called, usually when there is an error signing up.\n\n### ListContacts scene\n\nThe ListContacts scene is supposed to show a list of the contacts available to chat with. Open the `ListContactsModels` file and paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/ListContacts/ListContactsModels.swift) into the file.\n\nIn the code above we have the usual `Request` and `Response` (explained above). We also have a `ParseContact` struct that takes the raw data and an array of `rooms`. It parses it into a `Contact` model object with `User` and `PCRoom` object. We reference this in the `Response`s above so as to avoid duplication.\n\nWe also have a `ViewModel` struct that we use to format the data in a way the presenter needs to display the data to the user.\n\nNext open the `ListContactsInteractor` class and paste the code below into it: https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/ListContacts/ListContactsInteractor.swift\n\nIn the method above, we have `fetchContacts`, which uses the `UsersWorker` class to fetch the contacts from the API and also the `addContact` class, which also uses the same worker to add contacts.\n\nAfter a successful call, in both methods we call the presenter, which formats the data and makes a call to the View Controller and displays the content. \n\nLet’s update the code for the `ListContactsPresenter`. Open the file and paste the code below into the file:\n\n``` swift\n    import Foundation\n    \n    protocol ListContactsPresentationLogic {\n        func presentContacts(_ contacts: [Contact])\n        func presentAddedContact(_ contact: Contact)\n    }\n    \n    class ListContactsPresenter: ListContactsPresentationLogic {\n        weak var viewController: ListContactsDisplayLogic?\n        var displayedContacts: [ListContacts.Fetch.ViewModel.DisplayedContact] = []\n    \n        func presentContacts(_ contacts: [Contact]) {\n            displayedContacts = []        \n            for contact in contacts {\n                displayedContacts.append(ListContacts.Fetch.ViewModel.DisplayedContact(\n                    id: contact.user.chatkit_id,\n                    name: contact.user.name, \n                    isOnline: false\n                ))\n            }\n            displayContacts()\n        }\n        \n        func presentAddedContact(_ contact: Contact) {\n            displayedContacts.append(ListContacts.Fetch.ViewModel.DisplayedContact(\n                id: contact.user.chatkit_id,\n                name: contact.user.name, \n                isOnline: false\n            ))\n            displayContacts()\n        }\n        \n        private func displayContacts() {\n            let vm = ListContacts.Fetch.ViewModel(displayedContacts: displayedContacts)\n            viewController?.displayFetchedContacts(viewModel: vm)\n        }\n    }\n```\n\nThe code above has three methods. `presentContacts` and `presentAddedContact` do pretty much the same thing: format the contacts, append it to the `displayedContacts` array, and call the `displayContacts` method. The `displayContacts` method just calls `displayFetchedContacts` on the View Controller.\n\nLet us update the code for the `ListContactsViewController`. Paste the following into the controller:\n\n``` swift\n    import UIKit\n    import PusherChatkit\n    \n    protocol ListContactsDisplayLogic: class {\n        func displayFetchedContacts(viewModel: ListContacts.Fetch.ViewModel)\n    }\n    \n    class ListContactsViewController: UITableViewController, ListContactsDisplayLogic {\n        var interactor: ListContactsBusinessLogic?\n        var displayedContacts: [ListContacts.Fetch.ViewModel.DisplayedContact] = []\n        var router: (NSObjectProtocol \u0026 ListContactsRoutingLogic \u0026 ListContactsDataPassing)?\n      \n        override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {\n            super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)\n            setup()\n        }\n      \n        required init?(coder aDecoder: NSCoder) {\n            super.init(coder: aDecoder)\n            setup()\n        }\n      \n        private func setup() {\n            let viewController = self\n            let interactor = ListContactsInteractor()\n            let presenter = ListContactsPresenter()\n            let router = ListContactsRouter()        \n            viewController.interactor = interactor\n            viewController.router = router\n            interactor.presenter = presenter\n            presenter.viewController = viewController\n            router.viewController = viewController\n            router.dataStore = interactor\n        }\n          \n        override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n            if let scene = segue.identifier {\n                let selector = NSSelectorFromString(\"routeTo\\(scene)WithSegue:\")\n                if let router = router, router.responds(to: selector) {\n                    router.perform(selector, with: segue)\n                }\n            }\n        }\n    }\n```\n\nThis is the basic set up that comes with the Clean Swift templates. It just sets up the connections between all the **ListContacts** scene classes. Next, let’s add the methods below to the class. These are specific to our implementation:\n\n``` swift\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        navigationItem.title = \"Contacts\"\n        navigationController?.navigationBar.prefersLargeTitles = true\n        navigationItem.rightBarButtonItem = UIBarButtonItem(\n            title: \"Add\", \n            style: .plain, \n            target: self, \n            action: #selector(showAddContactPopup)\n        )\n                \n        initialiseChatkit()\n    }\n        \n    private func initialiseChatkit() {\n        let userId = CurrentUserIDDataStore().getID()\n    \n        let chatManager = ChatManager(\n            instanceLocator: AppConstants.CHATKIT_INSTANCE_LOCATOR,\n            tokenProvider: ChatkitTokenDataStore(),\n            userID: userId.id!\n        )\n        \n        chatManager.connect(delegate: self) { user, error in\n            guard error == nil else { return }\n            self.interactor?.currentUser = user\n            self.fetchContacts()\n        }\n    }\n    \n    var emailTextField: UITextField?\n    \n    @objc func showAddContactPopup(_ sender: Any) {\n        let alert = UIAlertController(\n            title: \"Add\",\n            message: \"Enter the users email address\",\n            preferredStyle: .alert\n        )\n    \n        alert.addTextField { emailTextField in\n            emailTextField.placeholder = \"Enter email address\"\n            self.emailTextField = emailTextField\n        }\n        \n        alert.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))\n        alert.addAction(UIAlertAction(title: \"Add Contact\", style: .default) { action in\n            let request = ListContacts.Create.Request(user_id: self.emailTextField!.text!)\n            self.interactor?.addContact(request: request)\n        })\n        \n        present(alert, animated: true, completion: nil)\n    }\n    \n    private func fetchContacts() {\n        interactor?.fetchContacts(request: ListContacts.Fetch.Request())\n    }\n    \n    func displayFetchedContacts(viewModel: ListContacts.Fetch.ViewModel) {\n        displayedContacts = viewModel.displayedContacts\n        tableView.reloadData()\n    }\n```\n\nIn the `viewDidLoad` method, we configure the navigation bar and add an “Add” button to it. We also set the title to “Contacts”. The `showAddContactPopup` method shows an alert controller with a text field for the contact you want to add. When you click add, the contact will be added. \n\nThe `initialiseChatkit` method connects to Chatkit and stores the `currentUser` in the interactor while the `fetchContacts` method gets all the contacts from the API while the `displayFetchedContacts` method simply displays them.\n\nNext we will add the class extension of `ListContactsViewController` that implements the `UITableViewDelegate` protocol. At the bottom of the `ListContactsViewController` paste the following:\n\n``` swift\n    extension ListContactsViewController {    \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n        \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return displayedContacts.count\n        }\n        \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            var cell = tableView.dequeueReusableCell(withIdentifier: \"ContactTableViewCell\")        \n            if cell == nil {\n                cell = UITableViewCell(style: .subtitle, reuseIdentifier: \"ContactTableViewCell\")\n            }\n    \n            let contact = displayedContacts[indexPath.row]\n            cell?.textLabel?.text = contact.name\n            cell?.detailTextLabel?.text = contact.isOnline ? \"online\" : \"Seen recently\"\n    \n            return cell!\n        }\n    }\n```\n\nThe method should be familiar to you as it just helps us feed data to the `UITableView` so our contacts display properly on the table.\n\nThe last bit of code for the ListContacts scene is the `ListContactsRouter`. This will manage the routing to the Chatroom scene. Open the `ListContactsRouter` class and add the following code:\n\n``` swift\n    import UIKit\n    \n    @objc protocol ListContactsRoutingLogic {\n        func routeToChatroom(segue: UIStoryboardSegue)\n    }\n    \n    protocol ListContactsDataPassing {\n        var dataStore: ListContactsDataStore? { get }\n    }\n    \n    class ListContactsRouter: NSObject, ListContactsRoutingLogic, ListContactsDataPassing {\n        var dataStore: ListContactsDataStore?\n        weak var viewController: ListContactsViewController?\n    \n        func routeToChatroom(segue: UIStoryboardSegue) {\n            let destinationVC = segue.destination as! ChatroomViewController\n            var destinationDS = destinationVC.router!.dataStore!\n            passDataToChatroom(source: dataStore!, destination: \u0026destinationDS)\n        }\n        \n        func passDataToChatroom(source: ListContactsDataStore, destination: inout ChatroomDataStore) {\n            let selectedRow = viewController?.tableView.indexPathForSelectedRow?.row\n            destination.contact = source.contacts?[selectedRow!]\n            destination.currentUser = source.currentUser\n        }\n    } \n```\n\nIn the `routeToChatroom` method we call `passDataToChatroom` which passes data (the `Contact` object and the current user) to the `ListContactsViewController` for usage.\n\n### Chatroom scene\nIn the Chatroom scene we will start with the `ChatroomModels`. Open the file and paste the following code:\n\n``` swift\n    import Foundation\n    import MessageKit\n    import PusherChatkit\n    \n    enum Chatroom {\n        struct Messages {        \n            struct Fetch {\n                struct Request {\n                    var room: PCRoom\n                }\n                \n                struct Response {\n                    var messages: [Message] = []                \n                    init(messages: [PCMessage]) {\n                        for message in messages {\n                            let res = Chatroom.Messages.Create.Response(message: message)\n                            self.messages.append(res.message)\n                        }\n                    }\n                }\n            }\n            \n            struct Create {\n                struct Request {\n                    var text: String\n                    var sender: Sender\n                    var room: PCRoom\n                }\n                \n                struct Response {\n                    var message: Message                \n                    init(message: PCMessage) {\n                        self.message = Message(\n                            text: message.text,\n                            sender: Sender(id: message.sender.id, displayName: message.sender.displayName),\n                            messageId: String(describing: message.id),\n                            date: ISO8601DateFormatter().date(from: message.createdAt)!\n                        )\n                    }\n                }\n            }\n        }\n    }\n```\n\nLike the other methods, we have the usual `Request` and `Response` struct (explained above).\n\nIn the `ChatroomInteractor.swift` file paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Chatroom/ChatroomInteractor.swift).\n\n\n\nIn the `subscribeToRoom` method, we subscribe the `currentUser` to a room. We also set the `PCRoomDelegate` to the interactor which means we can implement methods that handle events on the interactor.\n\nIn the `addChatMessage` method we add a new message to the room as the `currentUser`. When the user is added we pass the `messageId` to the completion handler.\n\nIn the extension class, we implement the `newMessage` method of the `PCRoomDelegate`. The method is fired automatically anytime there is a new message in the room. So we handle the new message by presenting it to the controller using the `ChatroomPresenter`s `presentMessages` method.\n\nNext, open the `ChatPresenter.swift` file and paste the code below into it:\n\n``` swift\n    import Foundation\n    \n    protocol ChatroomPresentationLogic {\n        func presentMessages(response: Chatroom.Messages.Fetch.Response)\n    }\n    \n    class ChatroomPresenter: ChatroomPresentationLogic {\n        weak var viewController: ChatroomDisplayLogic?\n        \n        func presentMessages(response: Chatroom.Messages.Fetch.Response) {\n            viewController?.displayChatMessages(response: response)\n        }\n    }\n```\n\nThe only method there is the `presentMessages` method. It just calls the `displayChatMessages` method on the view controller.\n\nNext, in the `ChatroomRouter` just paste in the following code:\n\n``` swift\n    import Foundation\n    \n    protocol ChatroomDataPassing {\n        var dataStore: ChatroomDataStore? { get }\n    }\n    \n    class ChatroomRouter: NSObject, ChatroomDataPassing {\n        weak var viewController: ChatroomViewController?\n        var dataStore: ChatroomDataStore?\n    }\n```\n\nThen in the `ChatroomViewController` we are going to split the controller into extensions as the code is lengthy. First paste the Clean Swift set up code into the file:\n\n``` swift\n    import UIKit\n    import MessageKit\n    import PusherChatkit\n    import MessageInputBar\n    \n    protocol ChatroomDisplayLogic: class {\n        func displayChatMessages(response: Chatroom.Messages.Fetch.Response)\n    }\n    \n    class ChatroomViewController: MessagesViewController, ChatroomDisplayLogic {\n        var messages: [Message] = []\n        var interactor: ChatroomBusinessLogic?\n        var router: (NSObjectProtocol \u0026 ChatroomDataPassing)?\n      \n        override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {\n            super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)\n            setup()\n        }\n      \n        required init?(coder aDecoder: NSCoder) {\n            super.init(coder: aDecoder)\n            setup()\n        }\n      \n        private func setup() {\n            let viewController = self\n            let interactor = ChatroomInteractor()\n            let presenter = ChatroomPresenter()\n            let router = ChatroomRouter()\n      \n            viewController.interactor = interactor\n            viewController.router = router\n            interactor.presenter = presenter\n            presenter.viewController = viewController\n            router.viewController = viewController\n            router.dataStore = interactor\n        }\n    }\n```\n\nNext, we will paste the class extension that handles the loading of the chat messages, and configures [MessageKit](https://messagekit.github.io/) and [Chatkit](https://pusher.com/chatkit) as the view is loaded:\n\n``` swift\n    extension ChatroomViewController {\n        override func viewDidLoad() {\n            super.viewDidLoad()\n            self.initialiseChatkit()\n            self.configureMessageKit()\n            self.navigationItem.title = router?.dataStore?.contact?.user.name\n        }\n        \n        private func initialiseChatkit() {\n            guard let room = router?.dataStore?.contact?.room else { return }\n            guard let currentUser = router?.dataStore?.currentUser else { return }\n            self.interactor?.currentUser = currentUser\n            self.interactor?.subscribeToRoom(room: room)\n        }\n        \n        private func configureMessageKit() {\n            messageInputBar.delegate = self\n            messagesCollectionView.messagesDataSource = self\n            messagesCollectionView.messagesLayoutDelegate = self\n            messagesCollectionView.messagesDisplayDelegate = self\n            scrollsToBottomOnKeyboardBeginsEditing = true\n            maintainPositionOnKeyboardFrameChanged = true\n        }\n        \n        func displayChatMessages(response: Chatroom.Messages.Fetch.Response) {\n            self.messages = response.messages\n            self.messagesCollectionView.reloadData()\n            self.messagesCollectionView.scrollToBottom()\n        }\n    }\n```\n\nIn the extension above we have the `initialiseChatkit` method. It takes the current user passed on from the ListContacts scene and saves it to the interactor. Then the next method is the `configureMessageKit` where we configure MessageKit. Lastly, we have the `displayChatMessages` method that displays the messages.\n\nNext, paste the extension below the previous class:\n\n``` swift\n    extension ChatroomViewController: MessagesDataSource {    \n        func isFromCurrentSender(message: MessageType) -\u003e Bool {\n            return message.sender == currentSender()\n        }\n    \n        func currentSender() -\u003e Sender {\n            return Sender(id: (interactor?.currentUser?.id)!, displayName: (interactor?.currentUser?.name)!)\n        }\n    \n        func numberOfSections(in messagesCollectionView: MessagesCollectionView) -\u003e Int {\n            return self.messages.count\n        }\n        \n        func messageForItem(at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e MessageType {\n            return self.messages[indexPath.section]\n        }\n    \n        func configureAvatarView(_ avatarView: AvatarView, for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) {\n            avatarView.initials = self.initials(fromName: message.sender.displayName)\n        }\n    \n        func messageTopLabelAttributedText(for message: MessageType, at indexPath: IndexPath) -\u003e NSAttributedString? {\n    \n            return NSAttributedString(\n                string: message.sender.displayName,\n                attributes: [NSAttributedString.Key.font: UIFont.preferredFont(forTextStyle: .caption1)]\n            )\n        }\n    \n        func messageBottomLabelAttributedText(for message: MessageType, at indexPath: IndexPath) -\u003e NSAttributedString? {\n    \n            struct ConversationDateFormatter {\n                static let formatter: DateFormatter = {\n                    let formatter = DateFormatter()\n                    formatter.dateStyle = .medium\n                    return formatter\n                }()\n            }\n    \n            return NSAttributedString(\n                string: ConversationDateFormatter.formatter.string(from: message.sentDate),\n                attributes: [NSAttributedStringKey.font: UIFont.preferredFont(forTextStyle: .caption2)]\n            )\n        }\n    }\n    \n    extension ChatroomViewController: MessagesLayoutDelegate {\n        func messageBottomLabelHeight(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e CGFloat {\n            return 16\n        }\n    \n        func messageTopLabelHeight(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e CGFloat {\n            return 16\n        }\n    \n        func avatarPosition(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e AvatarPosition {\n            return AvatarPosition(horizontal: .natural, vertical: .messageBottom)\n        }\n    \n        func messagePadding(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e UIEdgeInsets {\n            return isFromCurrentSender(message: message)\n                ? UIEdgeInsets(top: 0, left: 30, bottom: 0, right: 4)\n                : UIEdgeInsets(top: 0, left: 4, bottom: 0, right: 30)\n        }\n    \n        func footerViewSize(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e CGSize {\n            return CGSize(width: messagesCollectionView.bounds.width, height: 10)\n        }\n    \n        func heightForLocation(message: MessageType, at indexPath: IndexPath, with maxWidth: CGFloat, in messagesCollectionView: MessagesCollectionView) -\u003e CGFloat {\n            return 200\n        }\n    }\n    \n    extension ChatroomViewController: MessagesDisplayDelegate {\n    }\n    \n    extension ChatroomViewController: MessageInputBarDelegate {\n        func messageInputBar(_ inputBar: MessageInputBar, didPressSendButtonWith text: String) {\n            guard interactor?.currentUser != nil else { return }\n            guard let room = router?.dataStore?.contact?.room else { return }\n     \n            let request = Chatroom.Messages.Create.Request(text: text, sender: currentSender(), room: room)\n    \n            self.interactor?.addChatMessage(request: request) { id, error in\n                guard error == nil else { return }\n                inputBar.inputTextView.text = String()\n            }\n        }\n    }\n```\n\nThe first extension above extends the `[MessagesDataSource](https://messagekit.github.io/Protocols/MessagesDataSource.html)` protocol and has to conform to some of its methods. Here we implement `currentSender`, `numberOfMessages` and `messageForItem`, all self explanatory.\n\nThe next extension on the list is for the `[MessagesLayoutDelegate](https://messagekit.github.io/Protocols/MessagesLayoutDelegate.html)` protocol and it implements some of the methods but there are other methods you can implement to change the layouts display. There is also the implementation of `[MessagesDisplayDelegate](https://messagekit.github.io/Protocols/MessagesDisplayDelegate.html)`, which is empty but you can look through the documentation to see methods you can implement.\n\nLastly, we implement  `[MessageInputBarDelegate](https://messagekit.github.io/Protocols/MessageInputBarDelegate.html)` and in there we have the `messageInputBar` method, which is called after the send button is clicked on the chat screen. In this method we send the message using the interactor and then empty the input.\n\nWith this we are done with our scenes. Next, we will add the code for our supporting classes used in the scenes.\n\n\n## Implementing supporting classes for our application\n\nThe first set of supporting classes we will implement are the models. The models we want to implement are `User`, `Message`, `Contact`, `Room`, `UserToken`, and `ChatToken`. Here are the class contents:\n\n### Implementing the models\n\nTo implement the models, create a new folder/group in the root directory called **Models** and start creating the model files below in them. Get the code from the GitHub links.\n\n[The code for the `Message.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/Message.swift)\n\n[The code for the `Contact.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/Contact.swift) \n\n[The code for the `User.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/User.swift)\n\n[The code for `UserToken` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/UserToken.swift)\n\nIn the `UserToken` class above we implement the `NSCoding` protocol, we need this so we can save the `UserToken` object to UserDefaults.\n\n[The code to the `ChatToken.swift` model]( https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/ChatkitToken.swift)\n\nLike the `UserToken` model, the `ChatToken` does the same thing with the `NSCoding` protocol.\n\nWhen we have received a `chatkit_id` back from the server we want to store that in `UserDefaults` so that we can use it to connect to Chatkit.\n\n[The code to the `CurrentUserID.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/CurrentUserID.swift)\n\n### Implementing the services\nCreate a new folder/group in the root directory for the project on Xcode and name it **Services** and in there add the following files:\n\n`Authenticator.swift` class:\n\n``` swift\n    import Foundation\n    \n    class Authenticator {\n        func isLoggedIn() -\u003e Bool {\n            return getAccessToken().count \u003e 0\n        }\n    \n        private func getAccessToken() -\u003e String {\n            guard let token = ChatkitTokenDataStore().getToken().access_token, token.count \u003e 0 else {\n                return \"\"\n            }\n    \n            return token\n        }\n    } \n```\n\nThis `Authenticator` class checks if the user is logged in. It does this by checking if the token from the API is saved in UserDefaults.\n\n`UserTokenDataStore.swift` class:\n\n``` swift\n    import Foundation\n    \n    class UserTokenDataStore {\n        static var DATA_KEY = \"WORDS_API_TOKEN\"\n        \n        func getToken() -\u003e UserToken {\n            if let token = UserDefaults.standard.object(forKey: type(of: self).DATA_KEY) as! Data? {\n                return NSKeyedUnarchiver.unarchiveObject(with: token) as! UserToken\n            }\n    \n            return UserToken(token_type: nil, access_token: nil, expires_in: nil)\n        }\n        \n        func setToken(_ token: UserToken) {\n            let encodedData = NSKeyedArchiver.archivedData(withRootObject: token)\n            UserDefaults.standard.set(encodedData, forKey: type(of: self).DATA_KEY)\n        }\n    }\n```\n\nThe `UserDataTokenStore` class saves and fetches the token required to make calls to our backend API.\n\nAdd the `ChatTokenDataStore.swift` class with [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Services/ChatkitTokenDataStore.swift)\n\nThe class above does the same as the `UserTokenDataStore`, however it checks for the token required to make calls to the Chatkit API. It also extends the `[PCTokenProvider](https://github.com/pusher/chatkit-swift/blob/master/Source/PCTokenProvider.swift)` and thus we have the `fetchToken` method that fetches the token from the UserDefaults.\n\nAdd the `CurrentUserIDDataStore.swift` class with [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Services/CurrentUserIDDataStore.swift)\n\nThe class above does the same as the two token data stores. It takes some information, in this case the user’s Chatkit ID, and fetches and stores it in `UserDefaults`.\n\n### Implementing the global worker\nThe last class we want to implement is the `UsersWorker`. Create a `UsersWorker` class and paste the following into the file:\n\n``` swift\n    import UIKit\n    import Alamofire\n    \n    class UsersWorker {\n    }\n    \n    // MARK: Errors\n    \n    enum ContactsError: Error {\n        case CannotAdd\n        case CannotFetch\n    }\n    \n    enum UsersStoreError: Error {\n        case CannotLogin\n        case CannotSignup\n        case CannotFetchChatkitToken\n    }\n```\n\nNow we will start adding methods to the `UsersWorker` class. The first method is the `fetchContacts` method, which calls the API, using [Alamofire](https://github.com/Alamofire/Alamofire), to get a list of contacts for display:\n\n``` swift\n    func fetchContacts(currentUser: PCCurrentUser, completionHandler: @escaping ([Contact]?, ContactsError?) -\u003e Void){\n        let enc = JSONEncoding.default\n        let url = AppConstants.ENDPOINT + \"/api/contacts\"\n        let headers = authorizationHeader(token: nil)\n        \n        Alamofire\n            .request(url, method: .get, parameters: nil, encoding: enc, headers: headers)\n            .validate()\n            .responseJSON { response in\n                switch (response.result) {\n                case .success(let data):                \n                    DispatchQueue.main.async {\n                        let data = data as! [[String:Any]?]\n                        let res = ListContacts.Fetch.Response(for: currentUser, data:data)\n                        completionHandler(res.contacts, nil)\n                    }\n                case .failure(_):\n                    completionHandler(nil, ContactsError.CannotFetch)\n            }\n        }\n    }\n```\n\nThe next method to add to the class is the `addContact` method. The method makes the call to the API to add a contact:\n\n``` swift\n    func addContact(currentUser: PCCurrentUser, request: ListContacts.Create.Request, completionHandler: @escaping (Contact?, ContactsError?) -\u003e Void) {\n        let params = [\"user_id\": request.user_id]\n        let headers = authorizationHeader(token: nil)\n        \n        postRequest(\"/api/contacts\", params: params, headers: headers) { data in\n            guard data != nil else {\n                return completionHandler(nil, ContactsError.CannotAdd)\n            }\n            \n            DispatchQueue.main.async {\n                let response = ListContacts.Create.Response(for: currentUser, data: data!)\n                completionHandler(response.contact, nil)\n            }\n        }\n    }\n```\n\nThe next method to add to the class is the `login` method. The method makes a call to the API to login. The API returns the token for the API as the response. We make an additional call to the API to get the Chatkit token for the user so we can make calls to the Chatkit API on behalf of the user:\n\n``` swift\n    func login(request: Login.Account.Request, completionHandler: @escaping (UserToken?, UsersStoreError?) -\u003e Void) {\n        let params: Parameters = [\n            \"grant_type\": \"password\",\n            \"username\": request.email,\n            \"password\": request.password,\n            \"client_id\": AppConstants.CLIENT_ID,\n            \"client_secret\": AppConstants.CLIENT_SECRET,\n        ]\n        \n        postRequest(\"/oauth/token\", params: params, headers: nil) { data in\n            guard data != nil else {\n                return completionHandler(nil, UsersStoreError.CannotLogin)\n            }\n            \n            let response = Login.Account.Response(data: data!)\n            \n            let request = Login.Chatkit.Request(\n                username: request.email, \n                password: request.password, \n                token: response.userToken\n            )\n            \n            self.fetchChatkitToken(request: request) { token, error in\n                guard error == nil else {\n                    return completionHandler(nil, UsersStoreError.CannotFetchChatkitToken)\n                }\n                \n                ChatkitTokenDataStore().setToken(token!)\n                UserTokenDataStore().setToken(response.userToken)\n                \n                DispatchQueue.main.async {\n                    completionHandler(response.userToken, nil)\n                }\n            }\n        }\n    }\n```\n\nNext we will add the `signup` method, this will call the API to create a user and then it will log the user in and fetch the Chatkit token for that user:\n\n``` swift\n    func signup(request: Signup.Request, completionHandler: @escaping (User?, UsersStoreError?) -\u003e Void) {\n        let params: Parameters = [\n            \"name\": request.name,\n            \"email\": request.email,\n            \"password\": request.password\n        ]\n        \n        postRequest(\"/api/users/signup\", params: params, headers: nil) { data in\n            guard data != nil else {\n                return completionHandler(nil, UsersStoreError.CannotSignup)\n            }\n            \n            let response = Signup.Response(data: data!)\n            CurrentUserIDDataStore().setID(CurrentUserID(id: response.user?.chatkit_id))\n            \n            let request = Login.Account.Request(\n                email: request.email, \n                password: request.password\n            )\n            \n            self.login(request: request) { token, error in\n                guard error == nil else {\n                    return completionHandler(nil, UsersStoreError.CannotLogin)\n                }\n                \n                DispatchQueue.main.async {\n                    completionHandler(response.user, nil)\n                }\n            }\n        }\n    }\n```\n\nThe next method to add is the `fetchChatkitToken`. It fetches the Chatkit token from the API:\n\n``` swift\n    func fetchChatkitToken(request: Login.Chatkit.Request, completionHandler: @escaping (ChatkitToken?, UsersStoreError?) -\u003e Void) {\n        let headers = authorizationHeader(token: request.token.access_token!)\n        \n        postRequest(\"/api/chatkit/token\", params: nil, headers: headers) { data in\n            guard data != nil else {\n                return completionHandler(nil, UsersStoreError.CannotFetchChatkitToken)\n            }\n            \n            DispatchQueue.main.async {\n                let response = Login.Chatkit.Response(data: data!)\n                completionHandler(response.token, nil)\n            }\n        }\n    }\n```\n\nThe last two methods to add will be helpers, the `postRequest` and `authorizationHeader` methods:\n\n``` swift\n    private func postRequest(_ url: String, params: Parameters?, headers: HTTPHeaders?, completion: @escaping([String:Any]?) -\u003e Void) {\n        let enc = JSONEncoding.default\n        let url = AppConstants.ENDPOINT + url\n        \n        Alamofire\n            .request(url, method: .post, parameters:params, encoding:enc, headers:headers)\n            .validate()\n            .responseJSON { response in\n                switch (response.result) {\n                case .success(let data): completion((data as! [String:Any]))\n                case .failure(_): completion(nil)\n            }\n        }\n    }\n    \n    private func authorizationHeader(token: String?) -\u003e HTTPHeaders {\n        let accessToken = (token == nil) \n            ? UserTokenDataStore().getToken().access_token \n            : token\n        \n        return [\"Authorization\": \"Bearer \\(accessToken!)\"]\n    }\n```\n\nThe first method is a wrapper around Alamofire and the second method generates a HTTPHeaders array where we specify the token to send along with requests to the API.\n\nNow you can run the application in the emulator and it should work.\n\nIf you are running the API server locally XCode might not allow you to make requests to the local server. You can get around this by adding `App Transport Security Settings` to your `Info.plist` file and set `Allow Artibrary Loads` to `YES`.\n\n![Create-iOS-Chat-App-Using-Chatkit-allow-arbitrary-loads](//images.ctfassets.net/1es3ne0caaid/4ZHA4yRh4ss2SEY4GeMKSm/0d2667e4f46fb35c26aff64b96aab1a8/Create-iOS-Chat-App-Using-Chatkit-allow-arbitrary-loads.png)\n\n## Conclusion\n\nIn this part we were able to create the iOS application. \n\nThe source code to the application built in this series is available on [GitHub](https://github.com/neoighodaro/sample-chatroom-ios-chatkit).","metaTitle":"Build an iOS chat app using Swift and Chatkit - Part 3","metaDescription":"This tutorial series provides a detailed walkthrough of how to create a chat app for iOS, with a Laravel API backend. In this article you will create the iOS app. By the end of this section you will have a working chat app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"20S3RCpd722OmkKW4kO8ci","type":"Entry","createdAt":"2018-03-05T16:13:08.393Z","updatedAt":"2018-03-06T11:54:25.659Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":13,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime geolocation app with ARKit and CoreLocation","url":"realtime-geolocation-arkit-corelocation","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/ARKitCarGeolocation","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4FiKU27gk88US4gKMGI222","type":"Entry","createdAt":"2018-02-12T15:08:02.376Z","updatedAt":"2018-02-26T12:31:12.773Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"AR-VR","url":"ar-vr","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-12-11","description":"Discover how to build a AR experience for ride hailing apps focused on location and realtime features.","prerequisite":"A basic understanding of Swift is needed to follow this tutorial.","content":"Augmented Reality (AR) has a lot of interesting and practical use cases. One of them is location.\n\nWith iOS 11, the ability to use ARKit to create AR apps and combine them with multiple libraries has opened a lot of possibilities.\n\nIn this tutorial, we’re going to combine the power of ARKit, CoreLocation, and Pusher to create a geolocation AR app. \n\nLet’s think of a taxi service. Some services allow you to track on a map the car that is going to pick you up, but wouldn’t be great to have an AR view to see the route of the car and how it gets closer to you?\n\nSomething like this:\n\nhttps://www.youtube.com/watch?v=XBe65KD3CL4\u0026\n\nAs you can see, the information to position the car in the AR world is not always accurate, both on the CoreLocation side and on the ARKit side, however, for this use case, most of the time it will be enough.\n\nHere’s what you’ll need:\n\n- A device with an A9 or later processor (iPhone 6s or better, iPhone SE, any iPad Pro, or the 2017 iPad)\n- iOS 11\n- [Xcode 9.1](https://developer.apple.com/download/)  (or newer)\n- A 3D model of a car (in DAE format)\n\nYou can find free 3D models on sites like [Free3D](https://free3d.com), [Turbosquid](https://www.turbosquid.com/), or [Google’s Poly](https://poly.google.com). \n\nThe most common format is OBJ (with the its textures defined in a MTL file), which can be converted to DAE with a program like Blender.\n\nFor this project I chose [this model](https://free3d.com/3d-model/low-poly-car-40967.html), which it’s available in DAE format.\n\nThe math for this project is a bit heavy. I’ll dedicate more time to explain the operations related to geolocation than the ones related to rotating and translating a model with ARKit. \n\nIf you don’t know about transformation matrices or how to convert your 3D model to the DAE format, take a look at my previous [tutorial about ARKit](https://blog.pusher.com/building-an-ar-app-with-arkit-and-scenekit/).\n\nLet’s start by setting up a Pusher app.\n\n\n## Setting up Pusher\n\nIf you haven’t already, create a free account at [Pusher](https://pusher.com/). Then, go to your Dashboard and create an app, choosing a name, the cluster closest to your location, and *iOS* as your front-end technology:\n\n![realtime-geolocation-arkit-corelocation-create-app](//images.contentful.com/1es3ne0caaid/2BPxSA65lik4WEyyOySMCS/2a050a70c16fab5e19175de1f681aa41/realtime-geolocation-arkit-corelocation-create-app.png)\n\nThis will give you some sample code to get started:\n\n![realtime-geolocation-arkit-corelocation-sample-code](//images.contentful.com/1es3ne0caaid/48VCUradlucio8uU8ccKg4/145dfc2af882e9289104f0bfd0d6d522/realtime-geolocation-arkit-corelocation-sample-code.png)\n\nSave your app id, key, secret and cluster values. We’ll need them later. \n\nFinally, go to the *App Setting* tab, check the option *Enable client events* and click on *Update*:\n\n![realtime-geolocation-arkit-corelocation-app-settings-enable-client-events](//images.contentful.com/1es3ne0caaid/4aUiNklNVuaKGQWOg40Ywy/b3fe51cd46f255507434facb2439b817/realtime-geolocation-arkit-corelocation-app-settings-enable-client-events.png)\n\nThrough this app, the drivers will send their locations as latitude/longitude coordinates along with the direction they’re heading (in degrees) as a client [event](https://pusher.com/docs/client_api_guide/client_events).\n\nBut let’s not get ahead of ourselves, let’s set up the Xcode project first.\n\n## Setting up the project\n\nOpen Xcode 9 and create a new *Single View App*: \n\n![realtime-geolocation-arkit-corelocation-single-view-app](//images.contentful.com/1es3ne0caaid/2NQrFCbyL6EIkek0EEcCeS/7080003f5de1796b6f5118efbbb35b09/realtime-geolocation-arkit-corelocation-single-view-app.png)\n\nWe’re choosing this option because we are going to manually set up an AR view along with other controls.\n\nEnter the project information, choosing *Swift* as the language:\n\n![realtime-geolocation-arkit-corelocation-new-project](//images.contentful.com/1es3ne0caaid/283bRIrm3qG6GMEYAUu6ao/7623035dc93c6e197c5d69f5df496861/realtime-geolocation-arkit-corelocation-new-project.png)\n\nCreate the project and close it. We’re going to use [CocoaPods](https://cocoapods.org/) to install the project’s dependencies. Open a terminal window, go to the root directory of your project and, in case you don’t have CocoaPods installed (or if you want to update it), execute:\n\n```\n    sudo gem install cocoapods\n```\n\nOnce installed, create the file `Podfile` with the command:\n\n```\n    pod init\n```\n \nEdit this file to set the platform to iOS 11 and add the [Pusher’s Swift library](https://github.com/pusher/pusher-websocket-swift) as a dependency of the project:\n\n```\n    # Uncomment the next line to define a global platform for your project\n     platform :ios, '11.0'\n    \n    target 'ARKitCarGeolocation' do\n      # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\n      use_frameworks!\n    \n      # Pods for ARKitCarGeolocation\n      pod 'PusherSwift', '~\u003e 5.0.1'\n    end \n```\n\nOnce you’ve edited the `Podfile`, execute the following command to install the dependency:\n\n```\n    pod install\n```\n\nIn case version 5.0.1 (or later) is not installed (the output of the installation will tell you the installed version), you can update your CocoaPod repository and install the latest version of the library with the command:\n\n```\n    pod install --repo-update\n```\n\nNow open the Xcode workspace instead of the project file. The workspace has the dependency already configured:\n\n``` swift\n    open ARKitCarGeolocation.xcworkspace\n```\n\nIf you build your project at this point, a couple of warnings may show up, but the operation should be successful.\n\nNext, select the file `Info.plist`, add a row of type *Privacy - Camera Usage Description* (`NSCameraUsageDescription`) and give it a description. This is required for ARKit to access the camera.\n\nWe’ll also need a row of type *Privacy - Location When In Use Usage Description* (`NSLocationWhenInUseUsageDescription`). This is required to get the location from your device’s GPS (only when the app is being used, not all the time):\n\n![realtime-geolocation-arkit-corelocation-privacy-camera-location](//images.contentful.com/1es3ne0caaid/32iLL63z8QIsMsgkCss4CU/1d2e2851d141d8a6489eac7dceb2d2e9/realtime-geolocation-arkit-corelocation-privacy-camera-location.png)\n\nFinally, configure a team so you can run the app on your device:\n\n![realtime-geolocation-arkit-corelocation-team-none](//images.contentful.com/1es3ne0caaid/2cAxRPwM0YkiWCoEQY6Uqe/8e17160f8f97d328f0404e95c354b289/realtime-geolocation-arkit-corelocation-team-none.png)\n\nNow let’s build the user interface.\n\n## Building the user interface \n\nGo to `Main.storyboard` and drag an *ARKit SceneKit View* to the view:\n\n![realtime-geolocation-arkit-corelocation-controller-scene-view](//images.contentful.com/1es3ne0caaid/6sz6zrtewMogOS8MKU2SmO/c8891405447dc7236d3077569686dc01/realtime-geolocation-arkit-corelocation-controller-scene-view.png)\n\nNext, add constraints to all sides of this view so that it fills the entire screen. You do this by pressing the `ctrl` key while dragging a line from the ARSCNView to each side of the parent view and choosing leading, top, trailing, and bottom to the superview, with a value of `0`:\n\n![realtime-geolocation-arkit-corelocation-add-constraints-arscnview](//images.contentful.com/1es3ne0caaid/44MZcus1cIIMog2KQ4COky/e1dd766cf1d6ff7722ad888ea0506d78/realtime-geolocation-arkit-corelocation-add-constraints-arscnview.png)\n\nNext, add a text view and disable its *Editable* and *Selectable* behaviors in the *Attributes inspector:*\n\n![realtime-geolocation-arkit-corelocation-text-view](//images.contentful.com/1es3ne0caaid/14vAOITk4ACQ6qkG4IKmg8/de6952a765af291b2200ab8eb201ef31/realtime-geolocation-arkit-corelocation-text-view.png)\n\nChange its background color (I chose a white color with `50%` opacity):\n\n![realtime-geolocation-arkit-corelocation-text-view-background](//images.contentful.com/1es3ne0caaid/23XPYoLBzuCmoAMmWU4OEK/87b76d3a5487af017b37bef99ab3c101/realtime-geolocation-arkit-corelocation-text-view-background.png)\n\nAdd a height constraint with a value of `90` and leading, top, and trailing constraints with the value `0` so it remains fixed to the top of the screen:\n\n![realtime-geolocation-arkit-corelocation-text-view-constraints](//images.contentful.com/1es3ne0caaid/ZAptCvyKyIw0QUwMAuo02/4acf0e021c00577b58d5059195d6ae8d/realtime-geolocation-arkit-corelocation-text-view-constraints.png)\n\nIn `ViewController.swift`, import ARKit:\n\n``` swift\n    import ARKit\n```\n\nThen, create two `IBOutlet`s, one to the scene view and another one to the text view:\n\n![realtime-geolocation-arkit-corelocation-iboutlets](//images.contentful.com/1es3ne0caaid/4GLk4xx3ywCeaeGoMcWgem/d58b8c89e032a44586e1ba3edf0bb76b/realtime-geolocation-arkit-corelocation-iboutlets.png)\n\nYou’re ready to start coding the app, but before that, let me explain what needs to be done. However, if you’re already familiar with geolocation concepts or if you’re not interested, feel free to skip the next section.\n\n## Understanding how the app works\n\nImagine you are standing at some point in the world. It doesn’t matter where or in what direction you’re looking at.\n\nYour location is given by two numbers, latitude and longitude.\n\nLatitude is the distance between the North or the South Pole and the equator (an imaginary circle around the Earth halfway between the poles).  It goes from `0º` to `90º` for places to the north of the equator, and `0º` to `-90º` for places to the south of the equator.\n\nLongitude is the distance from the prime meridian (an imaginary line running from north to south through Greenwich, England) to a point at the west or east. It goes from `0º` to `180º` for places to the east of the prime meridian, and `0º` to `-180º` for places to the west of the prime meridian.\n\nFor example, if you’re in Brazil, your latitude and longitude will be negative because you are on the southwest side of the Earth:\n\n![realtime-geolocation-arkit-corelocation-map-brazil](//images.contentful.com/1es3ne0caaid/1SKZuR9fvSS00A6qgecek4/a12c4f85ac4b8f279ba11f13c1cc4e17/realtime-geolocation-arkit-corelocation-map-brazil.png)\n\nAnd if you’re in Japan, for example, your latitude and longitude will be positive because you are on the northeast side of the Earth:\n\n![realtime-geolocation-arkit-corelocation-map-japan](//images.contentful.com/1es3ne0caaid/1q9SM0sdMI2CIs02AOKUoY/bdf979d5361a4373c7bf70ab3c2a914c/realtime-geolocation-arkit-corelocation-map-japan.png)\n\nThis app will take into account your position and the driver’s position in a latitude and longitude coordinate system:\n\n![realtime-geolocation-arkit-corelocation-driver-location](//images.contentful.com/1es3ne0caaid/kAcdEX88yO0mYWcmMug6e/79b8933804fcad3e35ca9fa1b5208b61/realtime-geolocation-arkit-corelocation-driver-location.png)\n\nBut if it’s easier to you, you can think of your position as the origin (`0`, `0`):\n\n![realtime-geolocation-arkit-corelocation-origin](//images.contentful.com/1es3ne0caaid/5c2gs1JCAg8Y2MgemMq62k/3db4c763c03ffd5f876694f8d03fa788/realtime-geolocation-arkit-corelocation-origin.png)\n\nYou need to calculate two things:\n\n- The distance between you and the driver \n- The angle between the north (or south) line of the Earth and the line connecting you and the driver, which is called [bearing](https://en.wikipedia.org/wiki/Bearing_(navigation)).\n\n![realtime-geolocation-arkit-corelocation-bearing-distance](//images.contentful.com/1es3ne0caaid/5jBer4ROXeQeayC2W2Yq0U/f2304f50098a9734d3e07f67f9d6edc5/realtime-geolocation-arkit-corelocation-bearing-distance.png)\n\nThe distance will tell you how far you have to position the 3D model in the AR world.\n\nThe bearing will help you create a rotation transformation to position your model in the right direction at the above distance.\n\nIf we were talking about a simple `x` and `y` coordinate system, we could get those calculations by applying the [Pythagorean theorem](https://en.wikipedia.org/wiki/Pythagorean_theorem) and some simple trigonometry, with [sine](https://en.wikipedia.org/wiki/Sine) and [cosine](https://en.wikipedia.org/wiki/Law_of_cosines) operations.\n\nBut we are talking about latitudes and longitudes of the Earth. And as the Earth is not a flat plane, the math gets more complex.\n\nThe distance is calculated by calling just a [method](https://developer.apple.com/documentation/corelocation/cllocation/1423689-distance) of the class [CLLocation](https://developer.apple.com/documentation/corelocation/cllocation). It uses the [Haversine Formula](http://www.igismap.com/haversine-formula-calculate-geographic-distance-earth/) which, from two different latitude/longitude pairs of values, calculates the distance by tracing a line between them that follows the curvature of the Earth.\n\nOn the other hand, we have to calculate the bearing between two different latitude/longitude pairs of values manually. [This is the formula](http://www.igismap.com/formula-to-find-bearing-or-heading-angle-between-two-points-latitude-longitude/):\n\n``` swift\n    atan2 ( X, Y )\n```\n\nWhere `X` equals:\n\n``` swift\n    sin(long2 - long1) * cos(long2)\n```\n\nAnd `Y` equals:\n\n``` swift\n    cos(lat1) * sin(lat2) - sin(lat1) * cos(lat2) * cos(long2 - long1)\n```\nAnother thing to consider is that for the matrix transformation, you’ll have to use [radians](https://en.wikipedia.org/wiki/Radian) instead of degrees as angle units. As the length of an entire circumference is equal to `2π` radians ( `360º`), one radian is equal to `180/π` degrees. \n\nSo this is the plan.\n\nUsing Pusher, the drivers will publish their location and direction they’re heading in realtime.\n\nUsing CoreLocation, the AR app is going to get your location. It will also listen to the driver’s location updates.\n\nWhen a location update is received, using the formulas explained above, the app will place a 3D model of a car in a position relative to your location inside the AR world, and it will orient the model to the same direction the driver is heading.\n\nThe app is only going to get your location once, so it assumes your location is fixed (which is true most of the time).\n\nIn addition, an arrow emoji (⬇️) will be shown on top of the model at all times so you can spot it easily, and the text view you added in the last section will show the status of the app and the distance between you and the car.\n\nNow that you know what to do, let’s get into the code.\n\n## Building the app with ARKit and CoreLocation\n\nLet’s start by defining two extensions.\n\nOne to provide conversion methods to radians and degrees to all floating point types. Create a new Swift file, `FloatingPoint+Extension.swift`, with the following content:\n\n``` swift\n    import Foundation\n    \n    extension FloatingPoint {\n        func toRadians() -\u003e Self {\n            return self * .pi / 180\n        }\n        \n        func toDegrees() -\u003e Self {\n            return self * 180 / .pi\n        }\n    }\n```\n\nAnd another extension to create an image from a string. Create another Swift file, `String+Extension.swift`, with the following content (taken from this [StackOverflow answer](https://stackoverflow.com/a/47164529/3593852)):\n\n``` swift\n    import UIKit\n    \n    extension String {\n        func image() -\u003e UIImage? {\n            let size = CGSize(width: 100, height: 100)\n            UIGraphicsBeginImageContextWithOptions(size, false, 0)\n            UIColor.clear.set()\n            let rect = CGRect(origin: CGPoint(), size: size)\n            UIRectFill(CGRect(origin: CGPoint(), size: size))\n            (self as NSString).draw(in: rect, withAttributes: [NSAttributedStringKey.font: UIFont.systemFont(ofSize: 90)])\n            let image = UIGraphicsGetImageFromCurrentImageContext()\n            UIGraphicsEndImageContext()\n            return image\n        }\n    }\n```\n\nYou’ll use this extension to create an image out of the arrow emoji (a string). It creates a rectangle of width `100` and height `100` , with a transparent background, to draw the string inside of it with a font size of `90`.\n\nNext, open the *New File* dialog and scroll down to choose the *Asset Catalog* type:\n\n![realtime-geolocation-arkit-corelocation-assets-catalog](//images.contentful.com/1es3ne0caaid/5b67DLlS2QqaK8OIWm4Ig/a9045fb5b9d2478f3e329d05d797a474/realtime-geolocation-arkit-corelocation-assets-catalog.png)\n\nEnter `art.scnassets` as the file name (confirming the use of the extension `scnassets`):\n\n![realtime-geolocation-arkit-corelocation-confirm-extension](//images.contentful.com/1es3ne0caaid/Hfu7f39xIcImoE88M6GSW/654f347952f50535d3111bb99a1e1ea9/realtime-geolocation-arkit-corelocation-confirm-extension.png)\n\nNow copy your model to this folder:\n\n![realtime-geolocation-arkit-corelocation-import-model](//images.contentful.com/1es3ne0caaid/3EF3mAODwQWc06gQGG0GQC/621fd22e3fc946c8b6442cf983c9cda8/realtime-geolocation-arkit-corelocation-import-model.png)\n\nOpen the Scene Graph View, select the main node of your model and, in the properties tab, give it a name, which you’ll use to reference it in the code:\n\n![realtime-geolocation-arkit-corelocation-model-car](//images.contentful.com/1es3ne0caaid/6xtL4bGfsWMkyqkIaEG2kC/a5d3765469225414d45fdbd652f6cfb7/realtime-geolocation-arkit-corelocation-model-car.png)\n\nBack to `ViewController.swift`, let’s add the `import` statements we’ll need:\n\n``` swift\n    import SceneKit\n    import CoreLocation\n    import PusherSwift\n```\n\nAnd the delegates the controller will use:\n\n``` swift\n    class ViewController: UIViewController, ARSCNViewDelegate, CLLocationManagerDelegate {\n      ...\n    }\n```\n\nNext, let’s add some instance variables.\n\nFirst, a `CLLocationManager` to request the user location and another variable to store it:\n\n``` swift\n    class ViewController: UIViewController, ARSCNViewDelegate, CLLocationManagerDelegate {\n      ...\n      let locationManager = CLLocationManager()\n      var userLocation = CLLocation()\n      \n      ...\n    }\n```\n\nThen, a variable to store the direction the drivers are heading, the distance between them and the user, and the status of the app:\n\n``` swift\n    class ViewController: UIViewController, ARSCNViewDelegate, CLLocationManagerDelegate {\n      ...\n      var heading : Double! = 0.0\n      var distance : Float! = 0.0 {\n        didSet {\n          setStatusText()\n        }\n      }\n      var status: String! {\n        didSet {\n          setStatusText()\n        }\n      }\n      \n      ...\n      \n      func setStatusText() {\n        var text = \"Status: \\(status!)\\n\"\n        text += \"Distance: \\(String(format: \"%.2f m\", distance))\"\n        statusTextView.text = text\n      }\n    }\n```\n\nWhenever a new value for the distance or the status is set, the text view will be updated. Notice that the distance is calculated in meters.\n\nNext, a variable to store the root node of the car model and the name of this node, which should be the same than the one you set at the SceneKit editor:\n\n``` swift\n    class ViewController: UIViewController, ARSCNViewDelegate, CLLocationManagerDelegate {\n      ...\n      var modelNode:SCNNode!\n      let rootNodeName = \"Car\"\n      \n      ...\n    }\n```\n\nYou’ll also need the original (first) transformation of that node:\n\n``` swift\n    class ViewController: UIViewController, ARSCNViewDelegate, CLLocationManagerDelegate {\n      ...\n      var originalTransform:SCNMatrix4!\n      \n      ...\n    }\n```\n\nWhy?\nTo calculate the orientation (rotation) of the model in the best possible way.\nIdeally, the driver’s device will always give you the correct heading so you can take the first received reading, rotate the model in that direction, and then calculate the next rotations relative to the first one.\n\nHowever, if the first reading is wrong (which happens sometimes), the next rotations will be wrong even if the rest of the readings are correct.\n\nSo you always need to calculate the orientation as if it was the first time you rotate the model, because once you rotate the model a certain angle the following rotations will be done relative to that angle. Resetting the rotation to `0º` won’t work either because of the way transformations work (matrix multiplication).\n\nFinally, you’ll need to store the Pusher object and channel to receive the updates:\n\n``` swift\n    class ViewController: UIViewController, ARSCNViewDelegate, CLLocationManagerDelegate {\n      ...\n      let pusher = Pusher(\n        key: \"YOUR_PUSHER_APP_KEY\",\n        options: PusherClientOptions(\n            authMethod: .inline(secret: \"YOUR_PUSHER_APP_SECRET\"),\n            host: .cluster(\"YOUR_PUSHER_APP_CLUSTER\")\n        )\n      )\n      var channel: PusherChannel!\n      \n      ...\n    }\n```\n\nNotice the value of the `authMethod` option.\n\nYou’ll be receiving the updates through a private channel. They need to be authenticated by a server. However, at development time, you can use the `inline` option to bypass the need to set up an auth endpoint as part of a server. \n\nYou can learn more about the object’s options [here](https://github.com/pusher/pusher-websocket-swift#configuration).  If you need it, you can learn how to create an [authentication endpoint on this page](https://pusher.com/docs/authenticating_users#implementing_endpoints).\n\nIn the `viewDidLoad` function, set up the SceneKit scene and the location service:\n\n``` swift\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        // Set the view's delegate\n        sceneView.delegate = self\n            \n        // Create a new scene\n        let scene = SCNScene()\n            \n        // Set the scene to the view\n        sceneView.scene = scene\n            \n        // Start location services\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        \n        // Set the initial status\n        status = \"Getting user location...\"\n            \n        // Set a padding in the text view\n        statusTextView.textContainerInset = UIEdgeInsetsMake(20.0, 10.0, 10.0, 0.0)\n    }\n```\n\nNext, configure the AR session:\n\n``` swift\n    override func viewWillAppear(_ animated: Bool) {\n        super.viewWillAppear(animated)\n            \n        // Create a session configuration\n        let configuration = ARWorldTrackingConfiguration()\n        configuration.worldAlignment = .gravityAndHeading\n    \n        // Run the view's session\n        sceneView.session.run(configuration)\n    }\n        \n    override func viewWillDisappear(_ animated: Bool) {\n        super.viewWillDisappear(animated)\n            \n        // Pause the view's session\n        sceneView.session.pause()\n    }\n```\n\nThe option [gravityAndHeading](https://developer.apple.com/documentation/arkit/arconfiguration.worldalignment/2873776-gravityandheading) will set the y-axis to the direction of gravity as detected by the device, and the x- and z-axes to the longitude and latitude directions as measured by Location Services.\n\nFor the users position, when they have authorized the use of the location services, you have to request the location (the [requestLocation](https://developer.apple.com/documentation/corelocation/cllocationmanager/1620548-requestlocation) method is used so the location is requested only once):\n\n``` swift\n    //MARK: - CLLocationManager\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        // Implementing this method is required\n        print(error.localizedDescription)\n    }\n        \n    func locationManager(_ manager: CLLocationManager, \n          didChangeAuthorization status: CLAuthorizationStatus) {\n        if status == .authorizedWhenInUse {\n            locationManager.requestLocation()\n        }\n    }\n```\n\nOnce the user’s location is received, take the last element of the array, update the status, and connect to Pusher (it doesn’t make sense to connect to Pusher before having the users location because all the calculations will be wrong):\n\n``` swift\n    func locationManager(_ manager: CLLocationManager, \n          didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n          userLocation = location\n          status = \"Connecting to Pusher...\"\n                \n          self.connectToPusher()\n        }\n    }\n```\n\nIn the method `connectToPusher` you subscribe to `private-channel` and, when a `client-new-location` event is received, extract the driver’s latitude, longitude, and heading and update the status and location of the 3D model with the method `updateLocation`:\n\n``` swift\n    //MARK: - Utility methods\n    func connectToPusher() {\n        // subscribe to channel and bind to event\n        let channel = pusher.subscribe(\"private-channel\")\n            \n        let _ = channel.bind(eventName: \"client-new-location\", callback: { (data: Any?) -\u003e Void in\n          if let data = data as? [String : AnyObject] {\n            if let latitude = Double(data[\"latitude\"] as! String),\n                let longitude = Double(data[\"longitude\"] as! String),\n                let heading = Double(data[\"heading\"] as! String)  {\n                    self.status = \"Driver's location received\"  \n                    self.heading = heading\n                    self.updateLocation(latitude, longitude)\n            }\n          }\n        })\n            \n        pusher.connect()\n        status = \"Waiting to receive location events...\"\n    }\n```\n\nIn `updateLocation`, create a [CLLocation](https://developer.apple.com/documentation/corelocation/cllocation) object to calculate the distance between the user and the driver. Remember that the [distance](https://developer.apple.com/documentation/corelocation/cllocation/1423689-distance) is calculated in meters:\n\n``` swift\n    func updateLocation(_ latitude : Double, _ longitude : Double) {\n        let location = CLLocation(latitude: latitude, longitude: longitude)\n        self.distance = Float(location.distance(from: self.userLocation))\n    }\n```\n\nIf this is the first update received, `self.modelNode` will be `nil`, so you have to instantiate the model:\n\n``` swift\n    func updateLocation(_ latitude : Double, _ longitude : Double) {\n        ...\n        if self.modelNode == nil {\n            let modelScene = SCNScene(named: \"art.scnassets/Car.dae\")!\n            self.modelNode = modelScene.rootNode.childNode(withName: rootNodeName, recursively: true)!\n            \n        }\n    }\n```\n\nNext, you need to move the [pivot](https://developer.apple.com/documentation/scenekit/scnnode/1408044-pivot) of the model to its center in the y-axis, so it can be rotated without changing its position:\n\n``` swift\n    func updateLocation(_ latitude : Double, _ longitude : Double) {\n        ...\n        if self.modelNode == nil {\n            ...\n            // Move model's pivot to its center in the Y axis\n            let (minBox, maxBox) = self.modelNode.boundingBox\n            self.modelNode.pivot = SCNMatrix4MakeTranslation(0, (maxBox.y - minBox.y)/2, 0)\n        }\n    }\n```\n\nSave the model’s transform to calculate future rotations, position it, and add it to the scene:\n\n``` swift\n    func updateLocation(_ latitude : Double, _ longitude : Double) {\n        ...\n        if self.modelNode == nil {\n            ...\n            // Save original transform to calculate future rotations\n            self.originalTransform = self.modelNode.transform\n                \n            // Position the model in the correct place\n            positionModel(location)\n                \n            // Add the model to the scene\n            sceneView.scene.rootNode.addChildNode(self.modelNode)\n        }\n    }\n```\n\nNotice that there’s no need to create an [ARAnchor](https://developer.apple.com/documentation/arkit/aranchor) to add the node as a child of it. An `ARAnchor` gives you the ability to track positions and orientations of models relative to the camera.\n\nBut in this case, it’s better to work with the child directly. Mostly because you cannot delete or change the position of the whole `ARAnchor` manually -only of its children.\n\nFinally, create the arrow from an emoji, position it on top of the car (using the y-axis, I got the value by trial and error), and add it as a child of the model (so it stays with it at all times):\n\n``` swift\n    func updateLocation(_ latitude : Double, _ longitude : Double) {\n        ...\n        if self.modelNode == nil {\n            ...\n            // Create arrow from the emoji\n            let arrow = makeBillboardNode(\"⬇️\".image()!)\n            // Position it on top of the car\n            arrow.position = SCNVector3Make(0, 4, 0)\n            // Add it as a child of the car model\n            self.modelNode.addChildNode(arrow)\n        }\n    }\n```\n \nThis is the definition of the `makeBillboardNode` method (taken from this [StackOverflow answer](https://stackoverflow.com/a/44403042/3593852), modifying the width and height of the plane so the arrow can be properly seen):\n\n``` swift\n    func makeBillboardNode(_ image: UIImage) -\u003e SCNNode {\n        let plane = SCNPlane(width: 10, height: 10)\n        plane.firstMaterial!.diffuse.contents = image\n        let node = SCNNode(geometry: plane)\n        node.constraints = [SCNBillboardConstraint()]\n        return node\n    } \n```\n\nNow, if this is not the first update, you just need to position the model, animating the movement so it looks nice:\n\n``` swift\n    func updateLocation(_ latitude : Double, _ longitude : Double) {\n        ...\n        if self.modelNode == nil {\n            ...\n        } else {\n            // Begin animation\n            SCNTransaction.begin()\n            SCNTransaction.animationDuration = 1.0\n                \n            // Position the model in the correct place\n            positionModel(location)\n                \n            // End animation\n            SCNTransaction.commit()\n        }\n    }\n```\n\nTo position the model, you just need to rotate first, then translate it to the correct position and scale it:\n\n``` swift\n    func positionModel(_ location: CLLocation) {\n        // Rotate node\n        self.modelNode.transform = rotateNode(Float(-1 * (self.heading - 180).toRadians()), self.originalTransform)\n            \n        // Translate node\n        self.modelNode.position = translateNode(location)\n            \n        // Scale node\n        self.modelNode.scale = scaleNode(location)\n    }\n```\n\nThe order is important because of how matrix multiplication works (`a * b` is not the same than `b * a`).\n\nIn ARKit, rotation in the y-axis is counterclockwise (and handled in radians), so we need to subtract `180º` and make the angle negative. This is the definition of the method `rotateNode`:\n\n``` swift\n    func rotateNode(_ angleInRadians: Float, _ transform: SCNMatrix4) -\u003e SCNMatrix4 {\n        let rotation = SCNMatrix4MakeRotation(angleInRadians, 0, 1, 0)\n        return SCNMatrix4Mult(transform, rotation)\n    }\n```\n\nI scale the node in proportion to the distance. They are inversely proportional -the greater the distance, the less the scale. In my case, I just divide `1000` by the distance and don’t allow the value to be less than `1.5` or great than `3`:\n\n``` swift\n    func scaleNode (_ location: CLLocation) -\u003e SCNVector3 {\n        let scale = min( max( Float(1000/distance), 1.5 ), 3 )\n        return SCNVector3(x: scale, y: scale, z: scale)\n    }\n```\n\nI got these values from trial and error. They will vary depending on the model you’re using.\n\nTo translate the node, you have to calculate the transformation matrix and get the position values from that matrix (from its fourth column, referenced by a zero-based index):\n\n``` swift\n    func translateNode (_ location: CLLocation) -\u003e SCNVector3 {\n        let locationTransform = \n            transformMatrix(matrix_identity_float4x4, userLocation, location)\n        return positionFromTransform(locationTransform)\n    }\n    \n    func positionFromTransform(_ transform: simd_float4x4) -\u003e SCNVector3 {\n        return SCNVector3Make(\n            transform.columns.3.x, transform.columns.3.y, transform.columns.3.z\n        )\n    }\n```\n\nTo calculate the transformation matrix: \n\n- You use an identity matrix (you don’t have to use the matrix of the camera or something like that, the position and orientation of the driver are independent of your position and orientation.\n- You have to calculate the bearing using the formula explained in the previous section:\n    atan2 ( \n        sin(long2 - long1) * cos(long2),\n        cos(lat1) * sin(lat2) - sin(lat1) * cos(lat2) * cos(long2 - long1)\n    )\n- Using an identity matrix, get a rotation matrix in the y-axis using that bearing.\n- The distance is given by the z-axis, so create a four element vector with the distance in the z position to get a translation matrix.\n- Multiply both matrices (remember, the order is important) to combine them.\n- Get the final transformation by multiplying the result of the previous step with the matrix passed as an argument. \n\nAll this is done with the following methods:\n\n``` swift\n    func transformMatrix(_ matrix: simd_float4x4, _ originLocation: CLLocation, _ driverLocation: CLLocation) -\u003e simd_float4x4 {\n        let bearing = bearingBetweenLocations(userLocation, driverLocation)\n        let rotationMatrix = rotateAroundY(matrix_identity_float4x4, Float(bearing))\n            \n        let position = vector_float4(0.0, 0.0, -distance, 0.0)\n        let translationMatrix = getTranslationMatrix(matrix_identity_float4x4, position)\n            \n        let transformMatrix = simd_mul(rotationMatrix, translationMatrix)\n            \n        return simd_mul(matrix, transformMatrix)\n    }\n        \n    func getTranslationMatrix(_ matrix: simd_float4x4, _ translation : vector_float4) -\u003e simd_float4x4 {\n        var matrix = matrix\n        matrix.columns.3 = translation\n        return matrix\n    }\n        \n    func rotateAroundY(_ matrix: simd_float4x4, _ degrees: Float) -\u003e simd_float4x4 {\n        var matrix = matrix\n        \n        matrix.columns.0.x = cos(degrees)\n        matrix.columns.0.z = -sin(degrees)\n            \n        matrix.columns.2.x = sin(degrees)\n        matrix.columns.2.z = cos(degrees)\n        return matrix.inverse\n    }\n        \n    func bearingBetweenLocations(_ originLocation: CLLocation, _ driverLocation: CLLocation) -\u003e Double {  \n        let lat1 = originLocation.coordinate.latitude.toRadians()\n        let lon1 = originLocation.coordinate.longitude.toRadians()\n            \n        let lat2 = driverLocation.coordinate.latitude.toRadians()\n        let lon2 = driverLocation.coordinate.longitude.toRadians()\n            \n        let longitudeDiff = lon2 - lon1\n            \n        let y = sin(longitudeDiff) * cos(lat2);\n        let x = cos(lat1) * sin(lat2) - sin(lat1) * cos(lat2) * cos(longitudeDiff);\n            \n        return atan2(y, x)\n    }\n```\n\nAbout how to rotate in the y-axis, the method returns the inverse of the matrix because rotations in ARKit are counterclockwise. [Here’s an answer from Mathematics Stack Exchange that explains rotation matrices pretty well](https://math.stackexchange.com/a/1616461).\n\nAnd that’s it, time to test the app.\n\n\nThe first time you run the app, you’ll have to give permissions to the camera:\n\n![realtime-geolocation-arkit-corelocation-camera-permission](//images.contentful.com/1es3ne0caaid/1len5eGbVm0aMcAQMYseo8/2133654186603aed30f295ff245e649c/realtime-geolocation-arkit-corelocation-camera-permission.png)\n\nAnd to the location service:\n\n![realtime-geolocation-arkit-corelocation-location-permission](//images.contentful.com/1es3ne0caaid/2YLXGZu19miIY0uWWgsEGm/548ce8a657e39d8de95e9abcfab5653f/realtime-geolocation-arkit-corelocation-location-permission.png)\n\nAnd wait for a few seconds so the app can get the location and connect to Pusher.\n\nTo test it, you’ll need someone that publishes location events while driving.\n\nOn [this GitHub repository](https://github.com/eh3rrera/PublishLocationiOSPusher), you can find an app for iOS that publishes location events. \n\nIt uses CoreLocation, and the code is pretty similar to the one shown in the previous section but it requests the location information every one or two seconds. \n\nAs a note, for the heading measurement, it’s important to hold the device in the direction the driver is heading.\n\nFor a quick test, you can use the [following Node.js script](https://gist.github.com/eh3rrera/6a643e77d5dfdc6564b84921372f51ad) to manually send some location coordinates (that you can get [from this site](https://www.latlong.net/convert-address-to-lat-long.html)) every two seconds:\n\n``` javascript\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: 'YOUR_PUSHER_APP_',\n      key: 'YOUR_PUSHER_APP_KEY',\n      secret: 'YOUR_PUSHER_APP_SECRET',\n      cluster: 'YOUR_PUSHER_APP_CLUSTER',\n      encrypted: true\n    });\n    \n    const locations = [\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"}\n    ];\n    \n    locations.forEach((loc, index) =\u003e {\n        setTimeout(() =\u003e {\n            console.log(loc);\n            pusher.trigger('private-channel', 'client-new-location', loc);\n        }, 2000*index);\n    });\n```\n\nOnce you have Node.js installed, you just have to copy this script to a file, let’s say `publish.js`, create a `package.json` file with the command:\n\n``` javascript\n    npm init\n```\n\nInstall the [Pusher Node.js library](https://github.com/pusher/pusher-http-node) with:\n\n``` javascript\n    npm install --save pusher\n```\n\nEnter your Pusher and location info and execute the script with:\n\n```  javascript\n    node publish.js\n```\n\nOnce the app starts receiving location events, the 3D model of the car will appear in the direction where it is in the real world (with a small size if it’s far from you):\n\nhttps://www.youtube.com/watch?v=XBe65KD3CL4\u0026\n\n## Conclusion\n\nYou have learned how to combine the power of ARKit, CoreLocation and Pusher to create an AR app.\n\nYou can add more features to make it more useful:\n\n- Adding more information to the screen. For example, you can [convert the coordinates of the driver to an address](https://stackoverflow.com/a/38977983/3593852).\n- Adding a map so, in addition to seeing the 3D model moving in the world, you can see in which street the car is at any given time.\n- Add more car models.\n- Change the mechanism to get the car orientation. For example, by using deltas of the location.\n\nHowever, keep in mind that the app depends on the quality of the information received.\n\nIn my tests, for a few seconds after starting the driver’s app, the heading information was completely wrong, and overall, the position was off a few meters. \n\nARKit occasionally gets confused too. Sometimes this can be a problem, and it is another area of improvement. However, we’re just at the beginning. Without a doubt, these frameworks will be improved over time.","metaTitle":"Build a realtime geolocation app with ARKit and CoreLocation","metaDescription":"In this tutorial, build futuristic features for you ride hailing app by including a AR experience to find where is your car using ARKit, CoreLocation and Pusher for the realtime capabilities."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7M7YZNm920YYw6AkgisaI6","type":"Entry","createdAt":"2018-02-27T11:55:03.501Z","updatedAt":"2018-02-27T11:55:03.501Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime map with Swift","url":"realtime-map-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/Sample-Realtime-Map-on-iOS","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2017-12-05","description":"Learn how to build your own realtime map on iOS with Swift and Pusher.","prerequisite":"A basic understanding of Swift and Node.js is needed to follow this tutorial.","content":"Realtime maps are very popular nowadays. Especially now that there are many on-demand transportation services like Uber and Lyft that have realtime location reporting. In this article, we are going to learn how to build a realtime map on iOS using Pusher. \n\nBefore we continue, you’ll need to make sure you have all of the following requirements:\n\n- A MacBook (Xcode only runs on Mac).\n- [Xcode](https://developer.apple.com/xcode/) installed on your machine.\n- Knowledge of JavaScript (Node.js).\n- Knowledge of Swift and using Xcode. You can get started [here](https://developer.apple.com/library/content/referencelibrary/GettingStarted/DevelopiOSAppsSwift/).\n- [NPM and Node.js](https://docs.npmjs.com/getting-started/installing-node) installed locally.\n- [Cocoapods](https://guides.cocoapods.org/using/getting-started.html) package manager installed locally.\n- A Google iOS API key. See [here](https://developers.google.com/maps/documentation/ios-sdk/start#step_4_get_an_api_key) for instructions on how to get a key.\n- A Pusher application. Create one [here](https://pusher.com). \n\nAssuming you have all of the requirements, let us begin. This is a screen recording of what we will be building:\n\n![realtime-map-swift-demo](//images.contentful.com/1es3ne0caaid/4uiuiRcoQo4UMS8cokGMMS/b0a31ed0f3a9d201ebd168d686b3c1b7/realtime-map-swift-demo.gif)\n\nAs you can see in the demo, every time the location is updated, the change is reflected on both devices. This is what we want to replicate. Let’s get started.\n\n## Setting up our iOS application\n\nLaunch Xcode and create a new \"Single-app” project. You can call the project whatever you please.\n\n![realtime-map-swift-new-project](//images.contentful.com/1es3ne0caaid/2m5tzkS3ZCewGCWmg0yikM/0ac3873b0d512bca288015fa07a56ada/realtime-map-swift-new-project.png)\n\nWhen the project is created, close Xcode. Open your terminal, `cd` to the root directory of your application and run the command below to initialize Cocoapods on the project:\n\n```\n    $ pod init\n```\n\nThe command above will create a `Podfile` in the root directory of our application. In this `Podfile`, we will specify our project dependencies and let Cocoapods pull and manage them. Open the `Podfile` and replace the content of the file with the content below:\n\n```\n    platform :ios, '10.0'\n    target 'application_name' do\n      use_frameworks!\n    \n      pod 'GoogleMaps'\n      pod 'Alamofire', '~\u003e 4.4.0'\n      pod 'PusherSwift', '~\u003e 4.1.0'\n    end\n```\n\n\u003e ⚠️ Replace `application_name` with the name of your application.\n\nRun the command below to start installing the packages we specified in our `Podfile`:\n\n```\n    $ pod install\n```\n\nWhen the installation is complete, open the `*.xcworkspace` file that was added to the root of your application directory. This should launch Xcode.\n\n\n## Setting up our Node.js simulator app\n\nBefore going back into our iOS application, we need to create a simple Node.js application. This application will send events with data to Pusher. The data sent to Pusher will be simulated GPS coordinates. When our iOS application picks up the event’s data from Pusher, it will update the map’s marker to the new coordinates.\n\nCreate a new directory that will hold our Node.js application. Open your terminal and `cd` to the directory of your Node.js application. In this directory, create a new `package.json` file. Open that file and paste the JSON below:\n\n```\n    {\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.16.0\",\n        \"express\": \"^4.14.1\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nNow run the command below to install the NPM packages listed as dependencies:\n\n```\n    $ npm run install\n```\n\nCreate a new `index.js` file in the directory and paste the code below into the file:\n\n```\n    //\n    // Load the required libraries\n    //\n    let Pusher     = require('pusher');\n    let express    = require('express');\n    let bodyParser = require('body-parser');\n    \n    //\n    // initialize express and pusher\n    //\n    let app        = express();\n    let pusher     = new Pusher(require('./config.js'));\n    \n    //\n    // Middlewares\n    //\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    \n    //\n    // Generates 20 simulated GPS coords and sends to Pusher\n    //\n    app.post('/simulate', (req, res, next) =\u003e {\n      let loopCount = 0;\n      let operator = 0.001000  \n      let longitude = parseFloat(req.body.longitude)\n      let latitude  = parseFloat(req.body.latitude)\n    \n      let sendToPusher = setInterval(() =\u003e {\n        loopCount++;\n    \n        // Calculate new coordinates and round to 6 decimal places...\n        longitude = parseFloat((longitude + operator).toFixed(7))\n        latitude  = parseFloat((latitude - operator).toFixed(7))\n    \n        // Send to pusher\n        pusher.trigger('mapCoordinates', 'update', {longitude, latitude})\n    \n        if (loopCount === 20) {\n          clearInterval(sendToPusher)\n        }\n      }, 2000);\n      res.json({success: 200})\n    })\n    \n    \n    //\n    // Index\n    //\n    app.get('/', (req, res) =\u003e {\n      res.json(\"It works!\");\n    });\n    \n    \n    //\n    // Error Handling\n    //\n    app.use((req, res, next) =\u003e {\n        let err = new Error('Not Found');\n        err.status = 404;\n        next(err);\n    });\n    \n    \n    //\n    // Serve app\n    //\n    app.listen(4000, function() {\n        console.log('App listening on port 4000!')\n    });\n```\n\nThe code above is a simple Express application. We have initialized the Express `app` and the `pusher` instance. In the `/simulate` route, we run a loop in 2-second intervals and break the loop after the 20th run. Every time the loop runs, new GPS coordinates are generated and sent over to Pusher. \n\nCreate a new `config.js` file and paste the code below into it:\n\n```\n    module.exports = {\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n    };\n```\n\nReplace the values of `*PUSHER_APP_ID*`, `*PUSHER_APP_KEY*`, `PUSHER_APP_SECRET` and `PUSHER_APP_CLUSTER` with the values in your Pusher application dashboard. Our Node.js application is now ready to simulate GPS coordinates when our application triggers it.\n\nNow that we are done creating the Node.js application we can return to creating the iOS application.\n\n## Creating the views of our realtime map in Xcode\n\nReopen Xcode with our project and open the `Main.storyboard` file. In the `ViewController` we will add a `UIView`, and in that `UIView` we will add a simulate button. Something like this:\n\n![realtime-map-swift-storyboard](//images.contentful.com/1es3ne0caaid/20qOWt7NkEU48k08s8CSmw/be3f819128f2acd0479aa1a16dafaf86/realtime-map-swift-storyboard.png)\n\nCreate an `@IBAction` from the button to the `ViewController`. To do this, click on “Show the Assistant Editor” on the top right of the Xcode tool set. This will split the screen into storyboard and code editor. Now `ctrl` and drag from the button to the code editor to create the `@IBAction`. We will call the method `simulateMovement`.\n\n![realtime-map-swift-viewcontroller](//images.contentful.com/1es3ne0caaid/MFvx5WoAyQiWaK6a4gwao/f084a0183f2d5adf2e1aa9b6c21ec96d/realtime-map-swift-viewcontroller.png)\n\nNext, click the “Show standard editor” button on the Xcode toolbar to close the split screen and display just the `Main.storyboard`. Add another `UIView` starting from the bottom of the last `UIView` to the bottom of the screen. This view will be where the map will be displayed.\n\nSet the `UIView`'s custom class in the “Identity inspector” to `GMSMapView`. Now click the “Show the Assistant Editor” on the top right of the Xcode tool set. `ctrl` and drag from the `UIView` to the code editor. Create an `@IBOutlet` and name it `mapView`. \n\nClick on the “Show standard editor” button on the Xcode toolbar to close the split view. Open the `ViewController` file and replace the content with the code below:\n\n``` language-swift\n    //\n    // Import libraries\n    //\n    import UIKit\n    import PusherSwift\n    import Alamofire\n    import GoogleMaps\n    \n    //\n    // View controller class\n    //\n    class ViewController: UIViewController, GMSMapViewDelegate {\n        // Marker on the map\n        var locationMarker: GMSMarker!\n        \n        // Default starting coordinates\n        var longitude = -122.088426\n        var latitude  = 37.388064\n        \n        // Pusher\n        var pusher: Pusher!\n        \n        // Map view\n        @IBOutlet weak var mapView: GMSMapView!\n        \n        //\n        // Fires automatically when the view is loaded\n        //\n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            //\n            // Create a GMSCameraPosition that tells the map to display the coordinate\n            // at zoom level 15.\n            //\n            let camera = GMSCameraPosition.camera(withLatitude:latitude, longitude:longitude, zoom:15.0)\n            mapView.camera = camera\n            mapView.delegate = self\n            \n            //\n            // Creates a marker in the center of the map.\n            //\n            locationMarker = GMSMarker(position: CLLocationCoordinate2D(latitude: latitude, longitude: longitude))\n            locationMarker.map = mapView\n            \n            //\n            // Connect to pusher and listen for events\n            //\n            listenForCoordUpdates()\n        }\n        \n        //\n        // Send a request to the API to simulate GPS coords\n        //\n        @IBAction func simulateMovement(_ sender: Any) {\n            let parameters: Parameters = [\"longitude\":longitude, \"latitude\": latitude]\n            \n            Alamofire.request(\"http://localhost:4000/simulate\", method: .post, parameters: parameters).validate().responseJSON { (response) in\n                switch response.result {\n                case .success(_):\n                    print(\"Simulating...\")\n                case .failure(let error):\n                    print(error)\n                }\n            }\n        }\n        \n        //\n        // Connect to pusher and listen for events\n        //\n        private func listenForCoordUpdates() {\n            // Instantiate Pusher\n            pusher = Pusher(key: \"PUSHER_APP_KEY\", options: PusherClientOptions(host: .cluster(\"PUSHER_APP_CLUSTER\")))\n            \n            // Subscribe to a Pusher channel\n            let channel = pusher.subscribe(\"mapCoordinates\")\n            \n            //\n            // Listener and callback for the \"update\" event on the \"mapCoordinates\"\n            // channel on Pusher\n            //\n            channel.bind(eventName: \"update\", callback: { (data: Any?) -\u003e Void in\n                if let data = data as? [String: AnyObject] {\n                    self.longitude = data[\"longitude\"] as! Double\n                    self.latitude  = data[\"latitude\"] as! Double\n                    \n                    //\n                    // Update marker position using data from Pusher\n                    //\n                    self.locationMarker.position = CLLocationCoordinate2D(latitude: self.latitude, longitude: self.longitude)\n                    self.mapView.camera = GMSCameraPosition.camera(withTarget: self.locationMarker.position, zoom: 15.0)\n                }\n            })\n            \n            // Connect to pusher\n            pusher.connect()\n        }\n    }\n```\n\nIn the controller class above, we import all the required libraries. Then we instantiate a few properties on the class. In the `viewDidLoad` method we set the coordinates on the `mapView`, and also add the `locationMarker` to it. \n\nIn the same method, we make a call to `listenForCoordUpdates()`. In the `listenForCoordUpdates` method we create a connection to Pusher and listen for the `update` event on the `mapCoordinates` channel. \n\nWhen the `update` event is triggered, the callback takes the new coordinates and updates the `locationMarker` with them. Remember, you need to change the `PUSHER_APP_KEY` and `PUSHER_APP_CLUSTER` to the actual values provided for your Pusher application.\n\nIn the `simulateMovement` method we just send a request to our local web server (the Node.js application we created earlier). The request will instruct the Node.js application to generate several GPS coordinates.\n\n\n\u003e 💡 The URL of the endpoint we are hitting (http://localhost:3000/simulate) is a local web server. This means that you will need to change the endpoint URL when building for real cases.\n\n\n## Configuring Google Maps for iOS\n\nWe will need to configure the Google Maps iOS SDK to work with our application. First, [create a Google iOS SDK key](https://developers.google.com/maps/documentation/ios-sdk/start#step_4_get_an_api_key) and then, when you have the API key, open the `AppDelegate.swift` file in Xcode.\n\nIn the class, look for the class below:\n\n```\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n        // Override point for customization after application launch.\n        return true\n    }\n```\n\nand replace it with this:\n\n``` language-swift\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n        GMSServices.provideAPIKey(\"GOOGLE_IOS_API_KEY\")\n        return true\n    }\n```\n\n\u003e 💡 You need to replace the `GOOGLE_IOS_API_KEY` with the key you got when you created the Google iOS API key.\n\nAt the top of the same file, look for `import UIKit` and add the following under it:\n\n```\n    import GoogleMaps\n```\n\nWith that, we are done configuring Google Maps to work on iOS.\n\n\n## Testing our realtime iOS map\n\nTo test our application, we need to start the Node.js application, instruct iOS to allow connections to the local web server, and then run our iOS application.\n\nTo run the Node.js application, `cd`  to the Node.js application directory using your terminal and run the command below to start the Node application:\n\n```\n    $ node index.js\n```\n\nNow, before we launch our application we need to make some final changes so our iOS application can connect to our `localhost` backend. Open the `info.plist` file in Xcode and make the following adjustments:\n\n![realtime-map-swift-allow-arbitrary-loads](//images.contentful.com/1es3ne0caaid/4JjlooynOMIg8YggSiiSmc/89adbb85fef2cbd2b2347d53087af5b2/realtime-map-swift-allow-arbitrary-loads.png)\n\nThis change will make it possible for our application to connect to localhost. To be clear, this step will not be needed in production environments.\n\nNow build your application. You should see that the iOS application now displays the map and the marker on the map. Clicking the simulate button hits the endpoint which in turn sends the new coordinates to Pusher. Our listener catches the event and updates the `locationMarker`, thereby moving our marker.\n\n\n## Conclusion\n\nIn this article, we have seen how we can use Pusher and Swift to build a realtime map on iOS. Hope you learned a few things on how to create realtime iOS applications. If you have any questions or suggestions, leave a comment below. ","metaTitle":"Build a realtime map with Swift","metaDescription":"Build a realtime map on iOS with Swift and Pusher and create your own Uber or Lyft."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6gOYXmezZu0UoO2WOgSs0c","type":"Entry","createdAt":"2018-02-28T12:33:45.623Z","updatedAt":"2018-02-28T12:33:45.623Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime table using Swift","url":"realtime-table-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/Build-a-realtime-table-using-Swift","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}}],"reviewDate":"2017-11-22","description":"Learn how to use iOS  to create a table that is updated across all your devices in realtime. ","prerequisite":"A basic understanding of Swift and Node.js is needed to follow this tutorial.","content":"More often than not, when you build applications to be consumed by others, you will need to represent the data in some sort of table or list. Think of a list of users for example, or a table filled with data about the soccer league. Now, imagine the data that populated the table was to be reordered or altered, it would be nice if everyone viewing the data on the table sees the changes made instantaneously.\n\nIn this article, you will see how you can use iOS and Pusher to create a table that is updated across all your devices in realtime. You can see a screen recording of how the application works below.\n\n![realtime-table-swift-demo](//images.contentful.com/1es3ne0caaid/6Pa1574luoa8IueEUMocse/e60fe70c372dff917eb79f4d42bcb0ec/realtime-table-swift-demo.gif)\n\nIn the recording above, you can see how the changes made to the table on the one device gets mirrored instantly to the other device. Let us consider how to make this using Pusher and Swift.\n\n## Requirements for building a realtime table on iOS\n\nFor you to follow this tutorial, you will need all of the following requirements:\n- A MacBook Pro\n- [Xcode](https://developer.apple.com/xcode/) installed on your machine\n- Basic knowledge of [Swift](https://developer.apple.com/swift/) and using Xcode \n- Basic knowledge of JavaScript (Node.js)\n- [Node.js](https://docs.npmjs.com/getting-started/installing-node) and NPM installed on your machine \n- [Cocoapods](http://www.raywenderlich.com/12139/introduction-to-cocoapods) ****installed on your machine.\n- A [Pusher](https://pusher.com) application.\n\nOnce you have you have all the following then let us continue in the article.\n\n## Preparing our environment to create our application\n\nLaunch Xcode and create a new project. Follow the new application wizard and create a new **Single-page application**. Once the project has been created, close Xcode and launch the terminal.\n\nIn the terminal window, `cd` to the root of the app directory and run the command `pod init`. This will generate a **Podfile**. \n\nUpdate the contents of the **Podfile** to the contents below (replace `PROJECT_NAME` with your project name):\n\n```\n    platform :ios, '9.0'\n    target 'PROJECT_NAME' do\n      use_frameworks!\n      pod 'PusherSwift', '~\u003e 4.1.0'\n      pod 'Alamofire', '~\u003e 4.4.0'\n    end\n```\n\nSave the **Podfile** and then run the command: `pod install` on your terminal window. Running this command will install all the third-party packages we need to build our realtime app. \n\nOnce the installation is complete, open the `**.xcworkspace**` file in your project directory root. This should launch Xcode. Now we are ready to start creating our iOS application.\n\n## Building the User Interface of our realtime table on iOS\n\nOnce Xcode has finished loading, we can now start building our interface.\n\nOpen the `Main.storyboard` file. Drag and drop a Navigation Controller to the storyboard and set the entry point to the new Navigation Controller. You should now have something like this in your storyboard:\n\n![realtime-table-swift-storyboard](//images.contentful.com/1es3ne0caaid/7iRoyG2cBqgCEW6AMgUs0C/70af0ffdbd577441808bee84585bf7cc/realtime-table-swift-storyboard.png)\n\nAs seen in the screenshot, we have a simple navigation controller and we have made the table view controller attached to it our Root View Controller.\n\nNow we need to add a reuse identifier to our table cells. Click on the prototype cell and add a new reuse identifier.\n\n![realtime-table-swift-identifier](//images.contentful.com/1es3ne0caaid/1BXitDL9AEQqgmAM0aCA8K/093fb5565bc98f5f018c628d3dfb6274/realtime-table-swift-identifier.png)\n\nWe have named our reuse identifier **user** but you can call the reuse identifier whatever you want. Next, create a new `TableViewController` and attach to it to the root view controller using the storyboard’s identity inspector as seen below:\n\n![realtime-table-swift-custom-class](//images.contentful.com/1es3ne0caaid/4P5MNYuu48a2ii6gokoOiI/cab45f092e589a14c4d89ca25f131541/realtime-table-swift-custom-class.png)\n\nGreat! Now we are done with the user interface of the application, let us start creating the logic that will populate and make our iOS table realtime.\n\n\n## Populating our iOS table with user data and manipulating it\n\nThe first thing we want to do is populate our table with some mock data. Once we do this, we can then add and test all the possible manipulations we want the table to have such as moving rows around, deleting rows and adding new rows to the table.\n\nOpen your `UserTableViewController`. Now remove all the functions of the file except `viewDidLoad` so that we have clarity in the file. You should have something like this when you are done:\n\n```\n    import UIKit\n    \n    class UserTableViewController: UITableViewController {\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n        }\n    }\n```\n\nNow let us add some mock data. Create a new function that is supposed to load the data from an API. For now, though, we will hardcode the data. Add the function below to the controller:\n\n```\n    private func loadUsersFromApi() {\n        users = [\n            [\n                \"id\": 1,\n                \"name\" : \"John Doe\",\n            ],\n            [\n                \"id\": 2,\n                \"name\": \"Jane Doe\"\n            ]\n        ]\n    }\n```\n\nNow instantiate the `users` property on the class right under the class declaration:\n\n```\n    var users:[NSDictionary] = [] \n```\n\nAnd finally, in the `viewDidLoad` function, call the `loadUsersFromApi` method:\n\n```\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        loadUsersFromApi()\n    }\n```\n\nNext, we need to add all the functions that’ll make our table view controller compliant with the \n`UITableViewController` and thus display our data. Add the functions below to the view controller:\n\n```\n    // MARK: - Table view data source\n        \n    override func numberOfSections(in tableView: UITableView) -\u003e Int {\n        return 1\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n        return users.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"user\", for: indexPath)\n        cell.textLabel?.text = users[indexPath.row][\"name\"] as! String?\n        return cell\n    }\n    \n    override func tableView(_ tableView: UITableView, moveRowAt sourceIndexPath: IndexPath, to destinationIndexPath: IndexPath) {\n        let movedObject = users[sourceIndexPath.row]\n        users.remove(at: sourceIndexPath.row)\n        users.insert(movedObject, at: destinationIndexPath.row)\n    }\n    \n    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath) {\n        if editingStyle == .delete {\n            self.users.remove(at: indexPath.row)\n            self.tableView.deleteRows(at: [indexPath], with: .automatic)\n        }\n    }\n```\n\nThe above code has 5 functions. The first function tells the table how many sections our table has. The next function tells the table how many users (or rows) the table has. The third function is called every time a row is created and is responsible for populating the cell with data. The fourth and fifth function are callbacks that are called when data is moved or deleted respectively.\n\nNow, if you run your application, you should see the mock data displayed. However, we cannot see the add or edit button. So let us add that functionality.\n\nIn the `viewDidLoad` function add the following lines:\n\n```\n    navigationItem.title = \"Users List\"\n    navigationItem.rightBarButtonItem = self.editButtonItem\n    navigationItem.leftBarButtonItem = UIBarButtonItem(barButtonSystemItem: .add, target: self, action: #selector(showAddUserAlertController))\n```\n\nIn the code above, we have added two buttons, the left, and right button. The left being the add button and the right being the edit button.\n\nIn the add button, it calls a `showAddUserAlertController` method. We don’t have that defined yet in our code so let us add it. Add the function below to your view controller:\n\n```\n    public func showAddUserAlertController() {\n        let alertCtrl = UIAlertController(title: \"Add User\", message: \"Add a user to the list\", preferredStyle: .alert)\n        \n        // Add text field to alert controller\n        alertCtrl.addTextField { (textField) in\n            self.textField = textField\n            self.textField.autocapitalizationType = .words\n            self.textField.placeholder = \"e.g John Doe\"\n        }\n        \n        // Add cancel button to alert controller\n        alertCtrl.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))\n        \n        // \"Add\" button with callback\n        alertCtrl.addAction(UIAlertAction(title: \"Add\", style: .default, handler: { action in\n            if let name = self.textField.text, name != \"\" {\n                self.users.append([\"id\": self.users.count, \"name\" :name])\n                self.tableView.reloadData()\n            }\n        }))\n        \n        present(alertCtrl, animated: true, completion: nil)\n    }\n```\n\nThe code simply creates an alert when the add button is clicked. The alert has a `textField` which will take the name of the user you want to add and append it to the `users` property.\n\nNow, let us declare the `textField` property on the controller right after the class declaration:\n\n```\n    var textField: UITextField!\n```\n\nNow, we have a working prototype that is not connected to any API. If you run your application at this point, you will be able to see all the functions and they will work, but won’t be persisted since it is hardcoded.\n\n\n![realtime-table-swift-add-user](//images.contentful.com/1es3ne0caaid/6pP8M8XB7yEmGUuOOcc4iO/4031850f3c230ddde76d7dde3830570f/realtime-table-swift-add-user.png)\n\n\nGreat, but now we need to add a data source. To do this, we will need to create a Node.js backend and then our application will be able to call this to retrieve data. Also, when the data is modified by reordering or deleting, the request is sent to the backend and the changes are stored there.\n\n\n## Adding API calls to our iOS table application\n\nNow, let us start by retrieving the data from a remote source that we have not created yet (we will create this later in the article).\n\n### Loading users from the API\nGo back to the `loadUsersFromApi` method and replace the contents with the following code:\n\n```\n    private func loadUsersFromApi() {\n        indicator.startAnimating()\n        \n        Alamofire.request(self.endpoint + \"/users\").validate().responseJSON { (response) in\n            switch response.result {\n            case .success(let JSON):\n                self.users = JSON as! [NSDictionary]\n                self.tableView.reloadData()\n                self.indicator.stopAnimating()\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n```\n\nThe method above uses **Alamofire** to make calls to a `self.endpoint` and then stores the response to `self.users`. It also calls an `indicator.startAnimating()`, this is supposed to show an indicator that data is loading.\n\nBefore we create the loading indicator, let us `import Alamofire`. Under the `import UIKit` statement, add the line of code below:\n\n```\n    import Alamofire\n```\n\nThat’s all! Now, let’s create the loading indicator that is already being called in the `loadUsersFromApi` function above.\n\nFirst, declare the `indicator` and the `endpoint` in the class right after the controller class declaration:\n\n```\n    var endpoint = \"http://localhost:4000\"\n    var indicator = UIActivityIndicatorView()\n```\n\n\u003e 💡 The `endpoint` would need to be changed to the URL of your web server when you are developing for a live environment.\n\nNow, create a function to initialize and configure the loading indicator. Add the function below to the controller:\n\n```\n    private func setupActivityIndicator() {\n        indicator = UIActivityIndicatorView(frame: CGRect(x: 0, y: 0, width: 50, height: 50))\n        indicator.activityIndicatorViewStyle = .white\n        indicator.backgroundColor = UIColor.darkGray\n        indicator.center = self.view.center\n        indicator.layer.cornerRadius = 05\n        indicator.hidesWhenStopped = true\n        indicator.layer.zPosition = 1\n        indicator.isOpaque = false\n        indicator.tag = 999\n        tableView.addSubview(indicator)\n    }\n```\n\nThe function above will simply set up our `UIActivityIndicatorView`, which is just a spinner that indicates that our data is loading. After setting up the loading view, we then add it to the table view. \n\n\n\u003e 💡 We set the `hidesWhenStopped` property to `true`, this means that every time we stop the indicator using `stopAnimating` the indicator will automatically hide.\n\nNow, in the `viewDidLoad` function, above the call to `loadUsersFromApi`,  add the call to `setupActivityIndicator`:\n\n```\n    override func viewDidLoad() {\n        // other stuff...\n        setupActivityIndicator()\n        loadUsersFromApi()\n    }\n```\n\nAdding this before calling the `loadUsersFromApi` call will ensure the indicator has been created before it is referenced in the load users function call.\n\n### Adding users to the API then to the table locally\nNow, let’s hook the “Add” button to our backend so that when the user is added using the textfield, a request is sent to the endpoint.\n\nIn the `showAddUserAlertController` we will make some modifications. Replace the lines below:\n\n```\n    if let name = self.textField.text, name != \"\" {\n        self.users.append([\"id\": self.users.count, \"name\" :name])\n        self.tableView.reloadData()\n    }\n```\n\nwith this:\n\n```\n    if let name = self.textField.text, name != \"\" {\n        let payload: Parameters = [\"name\": name, \"deviceId\": self.deviceId]\n        \n        Alamofire.request(self.endpoint + \"/add\", method: .post, parameters:payload).validate().responseJSON { (response) in\n            switch response.result {\n            case .success(_):\n                self.users.append([\"id\": self.users.count, \"name\" :name])\n                self.tableView.reloadData()\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n```\n\nNow, in the block of code above, we are sending a request to our endpoint instead of just directly manipulating the `users` property. If the request is successful, we then append the new data to the `users` property. If you notice, however, in the `payload` we referenced `self.deviceId`, so we need to create this property. Add the code below right after the class declaration:\n\n```\n    let deviceId = UIDevice.current.identifierForVendor!.uuidString\n```\n\n\u003e 💡 We are adding the device ID so we can differentiate who made what call to the backend and avoid manipulating the data multiple times if it was the same device that sent the request. When we integrate Pusher, the listener will be doing the same manipulations to the `user` property. However, if it’s the same device that made the request then it should skip updating the property. \n\n### Moving users in the API then to the table locally\nThe next thing is adding the remote move functionality. Let’s hook that up to communicate with the endpoint.\n\nIn your code, replace the function below:\n\n```\n    override func tableView(_ tableView: UITableView, moveRowAt sourceIndexPath: IndexPath, to destinationIndexPath: IndexPath) {\n        let movedObject = users[sourceIndexPath.row]\n        users.remove(at: sourceIndexPath.row)\n        users.insert(movedObject, at: destinationIndexPath.row)\n    }\n```\n\nwith this:\n\n```\n    override func tableView(_ tableView: UITableView, moveRowAt sourceIndexPath: IndexPath, to destinationIndexPath: IndexPath) {\n        let movedObject = users[sourceIndexPath.row]\n        \n        let payload:Parameters = [\n            \"deviceId\": self.deviceId,\n            \"src\":sourceIndexPath.row,\n            \"dest\": destinationIndexPath.row,\n            \"src_id\": users[sourceIndexPath.row][\"id\"]!,\n            \"dest_id\": users[destinationIndexPath.row][\"id\"]!\n        ]\n        \n        Alamofire.request(self.endpoint+\"/move\", method: .post, parameters: payload).validate().responseJSON { (response) in\n            switch response.result {\n            case .success(_):\n                self.users.remove(at: sourceIndexPath.row)\n                self.users.insert(movedObject, at: destinationIndexPath.row)\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n```\n\nIn the code above, we set the payload to send to the endpoint and send it using **Alamofire**. Then, if we receive a successful response from the API, we make changes to the `user`  property.\n\n### Deleting a row in the API then locally on the table\nThe next thing we want to do is delete the data from the API before deleting it locally. To do this, look for the function below:\n\n```\n    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath) {\n        if editingStyle == .delete {\n            self.users.remove(at: indexPath.row)\n            self.tableView.deleteRows(at: [indexPath], with: .automatic)\n        }\n    }\n```\n\nand replace it with the following code:\n\n```\n    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath) {\n        if editingStyle == .delete {\n            let payload: Parameters = [\n                \"index\":indexPath.row,\n                \"deviceId\": self.deviceId,\n                \"id\": self.users[indexPath.row][\"id\"]!\n            ]\n            \n            Alamofire.request(self.endpoint + \"/delete\", method: .post, parameters:payload).validate().responseJSON { (response) in\n                switch response.result {\n                case .success(_):\n                    self.users.remove(at: indexPath.row)\n                    self.tableView.deleteRows(at: [indexPath], with: .automatic)\n                case .failure(let err):\n                    print(err)\n                }\n            }\n        }\n    }\n```\n\nJust like the others, we have just sent the payload we generated to the API and then, if there is a successful response, we delete the row from the `users` property.\n\nNow, the next thing would be to create the backend API. However, before we do that, let us add the realtime functionality into the app using Pusher.\n\n## Adding realtime functionality to our table on iOS\n\nNow that we are done with hooking up the API, we need to add some realtime functionality so that any other devices will pick up the changes instantly without having to reload the table manually.\n\nFirst, import the Pusher SDK to your application. Under the `import Alamofire` statement, add the following:\n\n```\n    import PusherSwift\n```\n\nNow, let us declare the `pusher` property in the class right under the class declaration:\n\n```\n    var pusher: Pusher!\n```\n\nGreat. Now add the function below to the controller:\n \n```\n    private func listenToChangesFromPusher() {\n        // Instantiate Pusher\n        pusher = Pusher(key: \"PUSHER_APP_KEY\", options: PusherClientOptions(host: .cluster(\"PUSHER_APP_CLUSTER\")))\n        \n        // Subscribe to a pusher channel\n        let channel = pusher.subscribe(\"userslist\")\n        \n        // Bind to an event called \"addUser\" on the event channel and fire \n        // the callback when the event is triggerred\n        let _ = channel.bind(eventName: \"addUser\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String : AnyObject] {\n                if let name = data[\"name\"] as? String {\n                \n                    // We only want to run this block if the update was from a \n                    // different device\n                    if (data[\"deviceId\"] as! String) != self.deviceId {\n                        self.users.append([\"id\": self.users.count, \"name\": name])\n                        self.tableView.reloadData()\n                    }\n                }\n            }\n        })\n        \n        // Bind to an event called \"removeUser\" on the event channel and fire \n        // the callback when the event is triggerred\n        let _ = channel.bind(eventName: \"removeUser\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String : AnyObject] {\n                if let _ = data[\"index\"] as? Int {\n                    let indexPath = IndexPath(item: (data[\"index\"] as! Int), section:0)\n                    \n                    // We only want to run this block if the update was from a \n                    // different device\n                    if (data[\"deviceId\"] as! String) != self.deviceId {\n                        self.users.remove(at: indexPath.row)\n                        self.tableView.deleteRows(at: [indexPath], with: .automatic)\n                    }\n                }\n            }\n        })\n        \n        // Bind to an event called \"moveUser\" on the event channel and fire \n        // the callback when the event is triggerred\n        let _ = channel.bind(eventName: \"moveUser\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String : AnyObject] {\n                if let _ = data[\"deviceId\"] as? String {\n                    let sourceIndexPath = IndexPath(item:(data[\"src\"] as! Int), section:0)\n                    let destinationIndexPath = IndexPath(item:(data[\"dest\"] as! Int), section:0)\n                    let movedObject = self.users[sourceIndexPath.row]\n                    \n                    // We only want to run this block if the update was from a \n                    // different device\n                    if (data[\"deviceId\"] as! String) != self.deviceId {\n                        self.users.remove(at: sourceIndexPath.row)\n                        self.users.insert(movedObject, at: destinationIndexPath.row)\n                        self.tableView.reloadData()\n                    }\n                }\n            }\n        })\n        \n        pusher.connect()\n    }\n```\n\nIn this block of code, we have done quite a lot. First, we instantiate Pusher with our application’s key and cluster (replace with the details provided to you on your Pusher application dashboard). Next, we subscribed to the channel `userslist`. We will listen for events on this channel.\n\nIn the first `channel.bind` block, we bind to the `addUser` event and then when an event is picked up, the callback runs.\n\nIn the callback, we check for the device ID and, if it is not a match, we append the new user to the local `user` property. It does the same for the next two blocks of `channel.bind`. However, in the others, it removes and moves the position respectively.\n\nThe last part is `pusher.connect` which does exactly what it says.\n\nTo listen to the changes, add the call to the bottom of the  `viewDidLoad` function:\n\n```\n    override func viewDidLoad() {\n        // other stuff...\n        listenToChangesFromPusher()\n    }\n```\n\nThat is all! We have created a realtime table that is responsive to changes received when the data is manipulated. The last part is creating the backend that will be used to save the data and to trigger Pusher events.\n\n\n## Creating the Backend for our realtime iOS table\n\nTo get started, create a directory for the web application and then create some new files inside the directory:\n\nFirst, create a file called **package.json:**\n\n```\n    {\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"bluebird\": \"^3.5.0\",\n        \"body-parser\": \"^1.16.0\",\n        \"express\": \"^4.14.1\",\n        \"pusher\": \"^1.5.1\",\n        \"sqlite\": \"^2.8.0\"\n      }\n    }\n```\n\nThis file will contain all the packages we intend to use to build our backend application.\n\nNext file to create will be **config.js:**\n\n```\n    module.exports = {\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n    };\n```\n\nThis will be the location of all your configuration values. Fill in the values using the data from your Pusher application’s dashboard.\n\nNext, create an empty `database.sqlite` file in the root of your web app directory.\n\nNext, create a directory called `migrations` inside the web application directory and inside it create the next file **001-initial-schema.sql** and paste the content below:\n\n```\n    -- Up\n    CREATE TABLE Users (\n        id INTEGER NOT NULL,\n        name TEXT,\n        position INTEGER NOT NULL,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        PRIMARY KEY (id)\n    );\n    INSERT INTO Users (id, name, position) VALUES (1, 'John Doe', 1);\n    -- Down\n    DROP TABLE Users;\n```\n\nIn the above, we declare the migrations to run when the application is started. \n\n\u003e 💡 The `-- Up` marks the migrations that should be run and the `-- Down` is the rollback of the migration if you want to step back and undo the migration.\n\nNext we will create the main file **index.js:**\n\n```\n    // ------------------------------------------------------\n    // Import all required packages and files\n    // ------------------------------------------------------\n    let Pusher     = require('pusher');\n    let express    = require('express');\n    let bodyParser = require('body-parser');\n    let Promise    = require('bluebird');\n    let db         = require('sqlite');\n    let app        = express();\n    let pusher     = new Pusher(require('./config.js'));\n    // ------------------------------------------------------\n    // Set up Express\n    // ------------------------------------------------------\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    // ------------------------------------------------------\n    // Define routes and logic\n    // ------------------------------------------------------\n    app.get('/users', (req, res, next) =\u003e {\n      try {\n        // Fetch all users from the database\n        db.all('SELECT * FROM Users ORDER BY position ASC, updated_at DESC')\n          .then(result =\u003e res.json(result))\n      } catch (err) {\n        next(err)\n      }\n    })\n    app.post(\"/add\", (req, res, next) =\u003e {\n      try {\n        let payload = {name:req.body.name, deviceId: req.body.deviceId}\n        // Add the user to the database\n        db.run(\"INSERT INTO Users (name, position) VALUES (?, (SELECT MAX(id) + 1 FROM Users))\", payload.name).then(query =\u003e {\n          payload.id = query.stmt.lastID\n          pusher.trigger('userslist', 'addUser', payload)\n          return res.json(payload)\n        })\n      } catch (err) {\n        next(err)\n      }\n    })\n    app.post(\"/delete\", (req, res, next) =\u003e {\n      try {\n        let payload = {id:parseInt(req.body.id), index:parseInt(req.body.index), deviceId: req.body.deviceId}\n        // Delete the user from the database\n        db.run(`DELETE FROM Users WHERE id=${payload.id}`).then(query =\u003e {\n          pusher.trigger('userslist', 'removeUser', payload)\n          return res.json(payload)\n        })\n      } catch (err) {\n        next(err)\n      }\n    })\n    app.post(\"/move\", (req, res, next) =\u003e {\n      try {\n        let payload = {\n          deviceId: req.body.deviceId,\n          src: parseInt(req.body.src),\n          dest: parseInt(req.body.dest),\n          src_id: parseInt(req.body.src_id),\n          dest_id: parseInt(req.body.dest_id),\n        }\n        // Update the position of the user\n        db.run(`UPDATE Users SET position=${payload.dest + 1}, updated_at=CURRENT_TIMESTAMP WHERE id=${payload.src_id}`).then(query =\u003e {\n          pusher.trigger('userslist', 'moveUser', payload)\n          res.json(payload)\n        })\n      } catch (err) {\n        next(err)\n      }\n    })\n    app.get('/', (req, res) =\u003e {\n      res.json(\"It works!\");\n    });\n    \n    // ------------------------------------------------------\n    // Catch errors\n    // ------------------------------------------------------\n    app.use((req, res, next) =\u003e {\n        let err = new Error('Not Found');\n        err.status = 404;\n        next(err);\n    });\n    \n    // ------------------------------------------------------\n    // Start application\n    // ------------------------------------------------------\n    Promise.resolve()\n      .then(() =\u003e db.open('./database.sqlite', { Promise }))\n      .then(() =\u003e db.migrate({ force: 'last' }))\n      .catch(err =\u003e console.error(err.stack))\n      .finally(() =\u003e app.listen(4000, function(){\n        console.log('App listening on port 4000!')\n      }));\n```    \n\nIn the code above, we loaded all the required packages including Express and Pusher. After instantiating them, we create the routes we need.\n\nThe routes are designed to do pretty basic things such as adding a row to the database, deleting a row from the database and updating rows in the database. For the database, we are using the [SQLite NPM package](https://www.npmjs.com/package/sqlite).\n\nIn the last block, we migrate the database using the `/migrations/001-initial-schema.sql` file into the `database.sqlite`  file. Then we start the express application after everything is done.\n\nOpen the terminal and `cd` to the root of the web application directory and run the commands below to install the NPM dependencies and run the application respectively:\n\n```\n    $ npm install\n    $ node index.js\n```\n\nWhen the installation is complete and the application is ready you should see the message **App listening on port 4000!**\n\n## Testing the application\n\nOnce you have your local node web server running, you will need to make some changes so your application can talk to the local web server. In the `info.plist` file, make the following changes:\n\n\n![realtime-table-swift-allow-arbitraty-loads](//images.contentful.com/1es3ne0caaid/2UBUYNiSaIuSY0CGeogqcQ/02991eeddc02d31124786b02fa0014a5/realtime-table-swift-allow-arbitraty-loads.png)\n\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\n## Conclusion\n\nThis article has demonstrated how you can create tables in iOS that respond in realtime to changes made on other devices. This is very useful and can be applied to data that has to be updated dynamically and instantly across all devices.","metaTitle":"Build a realtime table using Swift","metaDescription":"Learn how to use iOS  to create a table or list that is updated across all your devices in realtime. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2g7hdVlJWICOksEsWgW8gW","type":"Entry","createdAt":"2018-02-22T15:02:41.356Z","updatedAt":"2018-02-28T11:28:42.463Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime chart in Swift","url":"chart-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/Realtime-iOS-Chart","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2017-10-11","description":"Create a simple realtime chart in iOS using Swift, Node.js and Pusher.","prerequisite":"A basic understanding of Swift and Node.js is needed to follow this tutorial.","content":"Nowadays, gathering data is one of the keys to understanding how products are perceived. Gathering some data from users can help you build better products and understand your users. However, all the data in the world would be useless without a way to visualize it.  \n\nIn this article, we will explore how to create a simple realtime chart in iOS. The chart will receive data and update in realtime to the screens of everyone currently logged into your application. We will assume this is a chart that monitors how many visitors are using a website. Let’s begin.\n\nFor context, here is a sample of what we will be building:\n\n![realtime-chart-swift-demo](//images.contentful.com/1es3ne0caaid/jZfPcqCZIkYMW2saIqGSE/d3a698f353264b1b64fe76fa7a1bc99b/realtime-chart-swift-demo.gif)\n\n## Requirements for building a realtime chart in iOS\n\nBefore we begin this tutorial, you will need to have the following requirements settled:\n- A MacBook Pro.\n- [Xcode](https://developer.apple.com/xcode/) installed on your machine.\n- Basic knowledge of [Swift](https://developer.apple.com/swift/) and using Xcode. \n- Basic knowledge of JavaScript (Node.js).\n- [Node.js](https://docs.npmjs.com/getting-started/installing-node) and NPM installed on your machine. \n- [Cocoapods](http://www.raywenderlich.com/12139/introduction-to-cocoapods) ****installed on your machine.\n- A [Pusher](https://pusher.com) application.\n\nWhen you have all the requirements, then we can begin.\n\n## Preparing to create our realtime chart application in Xcode\n\nLaunch Xcode on your Mac and create a new project (call it whatever you want). Follow the new application wizard and create a new **Single-page application**. Once the project has been created, close Xcode and launch your terminal application.\n\nIn the terminal, `cd` to the root of the application directory. Then run the command `pod init`. This will generate a **Podfile**. Update the contents of the Podfile to the contents below (replace `PROJECT_NAME` with your project name):\n\n```\n    platform :ios, '9.0'\n    target 'PROJECT_NAME' do\n      use_frameworks!\n      pod 'Charts', '~\u003e 3.0.2'\n      pod 'PusherSwift', '~\u003e 4.1.0'\n      pod 'Alamofire', '~\u003e 4.4.0'\n    end\n```\n\nSave the Podfile and then go to your terminal and run the command: `pod install`. \n\nRunning this command will install all the third-party packages we need to build our realtime iOS chart application. \n\nThe first package it will install is [Charts](https://github.com/danielgindi/Charts), which is a package for making beautiful charts on iOS. The second package is the Pusher swift SDK. The last package is [Alamofire](https://github.com/Alamofire/Alamofire), a package for making HTTP requests on iOS.\n\nOnce the installation is complete, open the `**.xcworkspace**` file in your project directory root. This should launch Xcode. Now we are ready to start creating our iOS application.\n\n## Creating our realtime chart application views in Xcode\n\nTo begin, we will create the necessary views we need for our realtime chart application. Open the **Main.storyboard** file and let’s start designing our view.\n\nFirst, create a rectangular view from edge to edge at the top of the View Controller in the storyboard. In that view, add a button and add the title “Simulate Visits”. Next, create another view that is also a rectangle, spanning from the end of the first view above to the bottom of the screen. This view will be where we will render the realtime chart.\n\nWhen you are done creating the views, you should have something like shown in the image below. \n\n![realtime-chart-swift-ui](//images.contentful.com/1es3ne0caaid/1O88STS0FuocckSk40waUe/1b585fe12cbece8c88e3b5be91c56d84/realtime-chart-swift-ui.png)\n\nAs it currently stands, the views do nothing. Let us connect some functionality to the iOS chart application view.\n\n## Adding basic functionality to our iOS chart application\n\nAs said before, our application’s views and buttons are not connected to our `ViewController` so let’s fix that.\n\nIn Xcode, while the storyboard is still open, click on the “Show the Assistant Editor” button on the top right of the page to split the view into storyboard and code view. Now, click once on the button you created, and while holding `ctrl`, click and drag the link to the code editor. Then create an `@IBaction` as seen in the images below:\n\n![realtime-chart-swift-building-ui](//images.contentful.com/1es3ne0caaid/1D1EaEKqyEUkmWWMI8cmyw/5116f984e303f60879ac8c79e6430947/realtime-chart-swift-building-ui.png)\n\n![realtime-chart-swift-button-pressed](//images.contentful.com/1es3ne0caaid/6A57x8tLIQA0qoy6KOwyWE/58dcc55659a10f164cd364e26cf36fc7/realtime-chart-swift-button-pressed.png)\n\nWhen the link is complete, you should see something like this added to the code editor:\n\n```\n    @IBAction func simulateButtonPressed(_ sender: Any) {\n    }\n```\n\nGreat! Now that you have created the first link, we will have to create one more link to the chart view.\n\nOn your storyboard, click the view and on the “Identity Inspection” tab, make sure the view is connected to `LineChartView`  as seen below.\n\n![realtime-chart-swift-linechartview](//images.contentful.com/1es3ne0caaid/4OGvHi0ILma0S8YACG0qEa/ca3086f6078f88e2a69e9d12cf1e6b3d/realtime-chart-swift-linechartview.png)\n\nNow that the view is connected to a view class, repeat the same as we did before to link the button, only this time instead of creating an `@IBAction` we will create an `@IBOutlet`. Images are shown below:\n\n![realtime-chart-swift-insert-outlet](//images.contentful.com/1es3ne0caaid/UkxSeK3PoqGiUwwgOmCQs/412ba6c5d70f5a770e9211dd39bb74e8/realtime-chart-swift-insert-outlet.png)\n\n![realtime-chart-swift-outlet](//images.contentful.com/1es3ne0caaid/5ZTSOoHCne2GCoOCwSYkAG/745a9f6c6b6d95c29c56359008ff4cb7/realtime-chart-swift-outlet.png)\n\nWhen the link is complete, you should see something like this added to the code editor:\n\n```\n    @IBOutlet weak var chartView: LineChartView!\n```\n\nFinally, at the top of the `ViewController` import the Charts package. You can add the code below right under `import UIKit` in the `ViewController`.\n\n```\n    import Charts\n```\n\nNow that we have linked both elements to our code, every time the **Simulate Visits** button is pressed, the **simulateButtonPressed** function will be called.\n\n\n## Adding realtime functionality to our iOS chart application\n\nThe final piece of the puzzle will be displaying a chart and making it update in realtime across all devices viewing the chart.\n\nTo achieve this, we will do the following:\n- Create a function that updates our chart depending on the numbers.\n- Make our request button call the backend which will in turn send simulated data to Pusher.\n- Create a function that listens for events from Pusher and, when one is received, it triggers the update chart function we created earlier.\n\n### Create a trigger function to update our chart\nLet’s create the function that updates our chart depending on the numbers supplied to it. Open the `ViewController`, and in it declare a class property right under the class declaration. We will use this property to track the visitors:\n\n```\n    var visitors: [Double] = []\n```\n\nNext, we will add the function that will do the actual update to the chart view:\n\n```\n    private func updateChart() {\n        var chartEntry = [ChartDataEntry]()\n        \n        for i in 0..\u003cvisitors.count {\n            let value = ChartDataEntry(x: Double(i), y: visitors[i])\n            chartEntry.append(value)\n        }\n        \n        let line = LineChartDataSet(values: chartEntry, label: \"Visitor\")\n        line.colors = [UIColor.green]\n        \n        let data = LineChartData()\n        data.addDataSet(line)\n        \n        chartView.data = data\n        chartView.chartDescription?.text = \"Visitors Count\"\n    }\n```\n\nIn the code above, we declare `chartEntry` where we intend to store all our chart data. Then we loop through the available `visitors` and, for each of them, we add a new `ChartDataEntry(x: Double(i), y: visitors[i])` that tells the chart the X and Y positions.\n\nWe set the color the line chart will be displayed in. We create the `LineChartData` and add the `line` which contains our data points. Finally, we add the data to the `chartView` and set the chart view description.\n\n### Make our simulate button call an endpoint\nThe next thing we need to do is make our request button trigger a backend which will in turn send simulated data to Pusher. \n\nTo do this, we need to update the view controller one more time. In the `ViewController` import the Alamofire package right under the Charts package:\n\n```\n    import Alamofire\n```\n\nNow replace the `simulateButtonPressed` function with the code below:\n\n```\n    @IBAction func simulateButtonPressed(_ sender: Any) {\n        Alamofire.request(\"http://localhost:4000/simulate\", method: .post).validate().responseJSON { (response) in\n            switch response.result {\n            case .success(_):\n                _ = \"Successful\"\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n```\n\nIn the code below, we use Alamofire to send a POST request to http://localhost:4000/simulate which is a local web server (we will create this backend soon). In a real application, this will typically point to a real web server.\n\nThis endpoint does not take any parameters in order to keep the tutorial simple. We also do not need to do anything with the response. We just need the POST request to be sent every time the simulate visits button is pressed.\n\n### Tie in realtime functionality using Pusher\nTo make all this work, we will create a function that listens for events from Pusher and, when one is received, we save the value to `visitors` and then trigger the update chart function we created earlier.\n\nTo do this, open the `ViewController` and import the `PusherSwift` SDK under the Alamofire package at the top:\n\n```\n    import PusherSwift\n```\n\nNext, we will declare a class property for the Pusher instance. We can do this right under the `visitors` declaration line:\n\n```\n    var pusher: Pusher!\n```\n\nThen after declaring the property, we need to add the function below to the class so it can listen to the events:\n\n```\n    private func listenForChartUpdates() {\n        pusher = Pusher(key: \"PUSHER_KEY\", options: PusherClientOptions(host: .cluster(\"PUSHER_CLUSTER\")))\n    \n        let channel = pusher.subscribe(\"visitorsCount\")\n        \n        channel.bind(eventName: \"addNumber\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String: AnyObject] {\n                let count = data[\"count\"] as! Double\n                self.visitors.append(count)\n                self.updateChart()\n            }\n        })\n        \n        pusher.connect()\n    } \n```\n\nIn the code above, we instantiate Pusher and pass in our key and the cluster (you can get your key and cluster from your Pusher application’s dashboard). We then subscribe to the `visitorsChannel` and bind to the event name `addNumber` on that channel.\n\nWhen the event is triggered, we fire the logic in the callback which simply appends the count to `visitors` and then calls the `updateChart` function, which updates the actual Chart in realtime.\n\nFinally we call `pusher.connect()` which forms the connection to Pusher.\n\nIn the `viewDidLoad` function just add a call to the `listenForChartUpdates` method:\n\n```\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    \n        // ...stuff    \n    \n        listenForChartUpdates()\n    }\n```\n\nThat’s all! We have created our application in Xcode and we are ready for testing. However, to test, we need to create the backend that we send a `POST` request to when the button is clicked. To create this backend, we will be using Node.js. Let’s do that now.\n\n\n## Creating the backend service for our realtime iOS chart application\n\nTo get started, create a directory for the web application and then create some new files inside the directory:\n\nFile: **index.js**\n \n```\n    // -------------------------------------------------------\n    // Require Node dependencies\n    // -------------------------------------------------------\n    \n    let Pusher     = require('pusher');\n    let express    = require('express');\n    let bodyParser = require('body-parser');\n    let app        = express();\n    \n    // Instantiate Pusher\n    let pusher     = new Pusher(require('./config.js'));\n    \n    // -------------------------------------------------------\n    // Load express middlewares\n    // -------------------------------------------------------\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // -------------------------------------------------------\n    // Simulate multiple changes to the visitor count value,\n    // this way the chart will always update with different\n    // values.\n    // -------------------------------------------------------\n    \n    app.post('/simulate', (req, res, next) =\u003e {\n      var loopCount = 0;\n      let sendToPusher = setInterval(function(){\n        let count = Math.floor((Math.random() * (100 - 1)) + 1)\n        pusher.trigger('visitorsCount', 'addNumber', {count:count})\n        loopCount++;\n        if (loopCount === 20) {\n          clearInterval(sendToPusher);\n        }\n      }, 2000);\n      res.json({success: 200})\n    })\n    \n    \n    // Handle index\n    app.get('/', (req, res) =\u003e {\n      res.json(\"It works!\");\n    });\n    \n    // Handle 404's\n    app.use((req, res, next) =\u003e {\n        let err = new Error('Not Found');\n        err.status = 404;\n        next(err);\n    });\n    \n    // -------------------------------------------------------\n    // Serve application\n    // -------------------------------------------------------\n    \n    app.listen(4000, function(){\n        console.log('App listening on port 4000!')\n    });\n```\n\nThe file above is a simple Express application written in JavaScript. We instantiate all the packages we require and configure pusher using a config file we will create soon. Then we create a route `/simulate` and in this route we trigger the `addNumber` event in the `visitorCount` channel. This is the same channel and event the application is listening for.\n\nTo make it a little easier, we use `setInterval` to send a random visitor count to the Pusher backend every 2000 milliseconds. After looping for 20 times, the loop stops. This should be sufficient to test our application.\n\nCreate the next file **config.js**:\n\n``` language-javascript\n    module.exports = {\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n    };\n```\n\nReplace the `PUSHER_APP_*` keys with the credentials from your own Pusher application.\n\nThe next and final file is **package.json**:\n\n```\n    {\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.16.0\",\n        \"express\": \"^4.14.1\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nIn this file we simply declare dependencies.\n\nNow open terminal and `cd` to the root of the web application directory and run the commands below to install the NPM dependencies and run the application respectively:\n\n```\n    $ npm install\n    $ node index.js\n```\n\nWhen installation is complete and the application is ready you should see the output below:\n\n![realtime-chart-swift-output](//images.contentful.com/1es3ne0caaid/GOS7Vf8b04SEGowUu40aC/692d59e41b38bf987567d0b34edb9379/realtime-chart-swift-output.png)\n\n## Testing the application\n\nOnce you have your local node web server running, you will need to make some changes so your application can talk to the local web server. In the `info.plist` file, make the following changes:\n\n![realtime-chart-swift-arbitrary-loads](//images.contentful.com/1es3ne0caaid/6lABWfuYrCam8Wa2IWAoQ2/b495564400cd813ca96cc8a35007c0d0/realtime-chart-swift-arbitrary-loads.png)\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\n## Conclusion\n\nThis article has shown you how you can combine Pusher and the Charts package to create a realtime iOS chart application. There are many other chart types you can create using the package but, for brevity, we have done the easiest. You can explore the other chart types and even pass in multiple data points per request.","metaTitle":"Build a realtime chart in Swift","metaDescription":"Create a realtime chart in iOS using Swift, Node.js and Pusher. Receive data and updates live info on the screens of everyone logged into your application."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1BUhApV5HiM4QEssCU2m8s","type":"Entry","createdAt":"2018-02-22T15:02:41.414Z","updatedAt":"2018-02-28T13:05:55.791Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a user status update in Swift","url":"user-status-update-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-ios-status-update","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2017-10-05","description":"Create an iOS application with realtime user status updates, similar to WhatsApp.","prerequisite":"A good knowledge of Swift and a basic understanding of JavaScript are needed to follow this tutorial.","content":"When building chat applications, it is not uncommon to see something like a friends’ list with the status of the friend. Applications like WhatsApp have this feature and it is very useful to check the status of your friend and know if it is wise to send them a message at that point.\n\nWe are going to be building a similar feature in a make-believe iOS chat application. We are going to be using [Pusher](https://pusher.com) to implement realtime features to the application so that when someone posts a new status update you can see it change in realtime.\n\nHere is a screen recording of how our application will look when we are done.\n\n![user-status-update-swift-demo](//images.contentful.com/1es3ne0caaid/45c2mCELhCY0MqasmiEcww/36df51c7c75bc3fa1d80fc98b78c548a/user-status-update-swift-demo.gif)\n\n## Getting our project ready\n\nTo get started, we need to create the iOS project and then install some dependencies that’ll be needed for the application to function correctly. Let us begin.\n\n### Setting up our project in Xcode\n\nLaunch Xcode on your machine and create a new project. Create a single application project and follow the wizard until you get to the main storyboard. Once you are there, exit Xcode.\n\nIn your terminal, `cd` to the Xcode project directory and then run the command below:\n\n```\n    $ pod init\n```\n\nThis will create a `Podfile` inside the root of your application. The Podfile is where we will define Cocoapods dependencies. Open in your text editor and replace with the following:\n\n```\n    platform :ios, '8.4'\n    \n    target 'project_name' do\n      use_frameworks!\n      pod 'PusherSwift', '~\u003e 4.0'\n      pod 'Alamofire', '~\u003e 4.4'\n    end\n```\n\nIn the above, we have just specified the dependencies we want CocoaPods to install into our application. Do not forget to substitute the *project_name*  for your actual project name.\n\nNow go to the terminal and run the command:\n\n```\n    $ pod install\n```\n\nThis should install all of the dependencies and libraries we have specified in our `Podfile`. Great! Finally, open the project directory and double-click the `.xcworkspace` file in the directory to launch your project workspace in Xcode.\n\n## Creating the User Interface of our realtime iOS application\n\nNow that we have created the project in Xcode and have successfully installed all the dependencies, the next thing we will want to do is create the user interface of our iOS application. Open the `main.storyboard` file in Xcode and let’s start designing the UI.\n\nThis is what we want to have at the end of this section:\n\n![user-status-update-swift-ui](//images.contentful.com/1es3ne0caaid/1MXWYD0FhusWmOum0MgASO/d8f41a237a06c6be7cbac1666fa15cc2/user-status-update-swift-ui.png)\n\nAdd a Navigation Controller in your canvas and make it the root view controller. When you have done this, you then need to update the `TableViewController` attached to the Navigation Controller. \n\nFirst, create a new class in Xcode using `ctrl+n`; the class name should be `FriendsViewController` and it should extend `UITableViewController`. Then, in the `main.storyboard` file, make sure you make the `TableViewController`  use the `FriendsViewController` as its custom class.\n\n![user-status-update-swift-customclass](//images.contentful.com/1es3ne0caaid/4FMHQURO52MAecQ0CIeSmG/40a1085f2b4d1fa5b8e202ef35a78f4e/user-status-update-swift-customclass.png)\n\n### Configuring the prototype cells\n\nNow that we have created the table view controller, we need to configure its cells to match what we are trying to achieve. \n\nClick on “Prototype Cells” on the main storyboard file and make the attributes inspector look something close to the image below. \n\n\u003e 💡 **For the image**  `**avatar.png**`**, you can add a 45x45 pixel image to your Xcode project and use that as the image for the cell.**\n\n![user-status-update-swift-table-view-cell](//images.contentful.com/1es3ne0caaid/YpC4JFoP8kKGyk8KigmKE/ea9c7a48bbc1c2a40663a4ed817f5c77/user-status-update-swift-table-view-cell.png)\n\nOne last thing we can do (which is completely optional) is changing the navigation bar color for our application. Let’s do that.\n\nOpen the `AppDelegate` class and in the `application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?)` method paste the following:\n\n```\n    UINavigationBar.appearance().barTintColor = UIColor(red: 18.0/255.0, green: 140.0/255.0, blue: 126.0/255.0, alpha: 1.0)\n    UINavigationBar.appearance().tintColor = UIColor.white\n    UINavigationBar.appearance().titleTextAttributes = [NSForegroundColorAttributeName: UIColor.white]\n```\n\nWith this, you have finished creating the UI for the application and all that is left is the functionality to support it. Let us do that now.\n\n\n## Creating the functionality of our realtime iOS application\n\nFor the functionality, we will divide it into two parts. The first part will focus on adding the functionality for updating the status, and the second part will focus on making the updates realtime.\n\n### Creating the initial functionality: Update status\nLets open `FriendsViewController` and make some modifications. The first modification will be adding an update “Status” button to the top right corner of the navigation bar. \n\nInside the `viewDidLoad` method of the controller, add the code below:\n\n```\n    navigationItem.title = \"Friends List\"\n    navigationItem.rightBarButtonItem = UIBarButtonItem(\n        title: \"Status\",\n        style: .plain,\n        target: self,\n        action: #selector(showPopup(_:))\n    )\n```\n\nThe code above simply sets the title of the controller in the navigation bar and adds a button to the right side of the navigation bar. \n\nIf you notice, in the `action` parameter it points to a method `showPopup` so let us create this method. Add this method to the controller:\n\n```\n    public func showPopup(_ sender: Any) {\n        let alertController = UIAlertController(\n            title: \"Update your status\",\n            message: \"What would you like your status to say?\",\n            preferredStyle: .alert\n        )\n        \n        alertController.addTextField(configurationHandler: {(_ textField: UITextField) -\u003e Void in\n            textField.placeholder = \"Status\"\n        })\n    \n        alertController.addAction(UIAlertAction(title: \"Update\", style: .default, handler: {(_ action: UIAlertAction) -\u003e Void in\n            let status = (alertController.textFields?[0].text)! as String\n            self.postStatusUpdate(message: status)\n        }))\n    \n        alertController.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))\n        \n        present(alertController, animated: true, completion: nil)\n    }\n```\n\nSo what we did here is, when the action is called and the `showPopup` method is invoked, the application will display a popup box that asks the user to input their status.\n\nRight now, the popup calls a method `postStatusUpdate` which does not exist in our application. Let us create this method now.\n\nIn the view controller, add the method below:\n\n```\n    public func postStatusUpdate(message: String) {\n        let params: Parameters = [\"username\": username, \"status\": message]\n        \n        Alamofire.request(FriendsViewController.API_ENDPOINT + \"/status\", method: .post, parameters: params).validate().responseJSON { response in\n            switch response.result {\n                \n            case .success:\n                _ = \"Updated\"\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n```\n\nIn this method, we are using the `Alamofire` library to make a request to an endpoint `FriendsViewController.API_ENDPOINT + \"/status``\"` (which does not yet exist). Right now, because we have not imported the Alamofire library nor defined `FriendsViewController.API_ENDPOINT` we will get errors.\n\nAt the top of the view controller, import the `Alamofire` library:\n\n```\n    import 'Alamofire'\n```\n\nAlso, inside the class, after the class definition, add the following to declare the `API_ENDPOINT` which will point to the remote HTTP server.\n\n```\n    static let API_ENDPOINT = \"http://localhost:4000\";\n```\n\n\u003e 💡  **The endpoint we are using now is a local server which will be created later on in the article. If you are using a remote server, you will need to replace this value with the URL of your server.**\n\nSo, right now, when you run the application and click the “Status” button it will bring a popup and you can enter your update. However, because we have not yet created a backend to respond to this call, it will fail and not do anything. We will get to that later in the article.\n\n### Updating the default table view controller methods\nThe table view controller comes with some methods by default, and we will quickly change them to fit our application.\n\nOpen the view controller and update the method `numberOfSections`. Make the return value 1. This will make sure that the first and only section is displayed.\n\nNext, update the `tableView(tableView: UITableView, numberOfRowsInSection: section)` method and make the return value `friends.count`. This will make sure that the right amount of rows are created for each entry on the `friends` list.\n\nTo make the cells display the details of each friend, update the contents of the `tableView(tableView:UITableView, cellForRowAt indexPath:IndexPath)` method with the code below:\n\n```\n    let cell = tableView.dequeueReusableCell(withIdentifier: \"friends\", for: indexPath)\n    \n    var status   = friends[indexPath.row][\"status\"]\n    \n    if status == \"\" {\n        status = \"User has not updated status!\"\n    }\n    \n    cell.detailTextLabel?.textColor = UIColor.gray\n    \n    cell.imageView?.image = UIImage(named: \"avatar.png\")\n    cell.textLabel?.text = friends[indexPath.row][\"username\"]\n    cell.detailTextLabel?.text = status\n    \n    return cell\n```\n\nThe code above simply gets the current cell and updates the required cell labels with the status, username and image (in case you want to add another image).\n\nFinally, add a new method to the view controller:\n\n```\n    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -\u003e CGFloat {\n        return 75.0\n    }\n```\n\nThis will just increase the row height of the table to be equal to **75.0**. This will make it easier to accommodate the contents of the cell.\n\n## Using Pusher to add a realtime update status to our iOS application\n\nNow, before we add the realtime online status updates using Pusher, we want to add some sort pseudo friends listing.\n\nWe will do the friends listing using Pusher. We will accomplish this by creating a class property that is not persistent, and in this variable, we will store details of anyone that comes online.\n\n### Adding a pseudo friends list\nIn the view controller, add some new properties:\n\n```\n    var friends : [[String:String]] = []\n    var username : String = \"\"\n    var pusher : Pusher!\n```\n\nThe `friends` property will store all the users who come online, the `username` property will store a random username for the current user, and the `pusher` property will store the Pusher library instance.\n\nNow, in the `viewDidLoad` method, add the following code:\n\n```\n    username = \"Anonymous\" + String(Int(arc4random_uniform(1000)))\n    \n    listenForRealtimeEvents()\n    \n    // --- Update online presence at intervals --- //\n    let date = Date().addingTimeInterval(0)\n    let timer = Timer(fireAt: date, interval: 1, target: self, selector: #selector(postOnlinePresence), userInfo: nil, repeats: true)\n    RunLoop.main.add(timer, forMode: RunLoopMode.commonModes)\n```\n\nOn line 1, we just assign the `username` property a random string as a username. \n\nOn line 3, we call a method `listenForRealtimeEvents` that does not yet exist (we will create this later). \n\nAnd on line 6 - 8, we just basically added a looping call to the `postOnlinePresence` (also doesn’t exist yet). This call will basically update your online presence every second.\n\nLet us create the `listenForRealtimeEvents` method now. Add the following code to the view controller:\n\n```\n    private func listenForRealtimeEvents() {\n        pusher = Pusher(key: \"PUSHER_KEY\", options: PusherClientOptions(host: .cluster(\"PUSHER_CLUSTER\")))\n        \n        let channel = pusher.subscribe(\"new_status\")\n        let _ = channel.bind(eventName: \"online\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String: AnyObject] {\n                let username = data[\"username\"] as! String\n                \n                let index = self.friends.index(where: { $0[\"username\"] == username })\n                \n                if username != self.username \u0026\u0026 index == nil {\n                    self.friends.append([\"username\": username, \"status\": \"No Status\"])\n                    self.tableView.reloadData()\n                }\n            }\n        })\n        \n        pusher.connect()\n    }\n```\n\nIn the method we just created, we just instantiated the Pusher library with our Pusher key and application cluster. Then we subscribed to a Pusher channel called **new_status** and, on that channel, we started listening for the event called **online.**\n\nIn the callback, when the event listener is triggered, we get the username from the event. We then check if there is username in the list of `friends` that matches. If there isn’t, we append it to the friends’ list and reload the table data.\n\nSo, in summary, every time someone comes online it appends the name to the friends’ list and reloads the table view.\n\nNext, we will create the method `postOnlinePresence` that will periodically post the current users online presence so others can pick it up. In the view controller add the code below:\n\n```\n    public func postOnlinePresence() {\n        let params: Parameters = [\"username\": username]\n        \n        Alamofire.request(FriendsViewController.API_ENDPOINT + \"/online\", method: .post, parameters: params).validate().responseJSON { response in\n            switch response.result {\n                \n            case .success:\n                _ = \"Online\"\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n```\n\nThe code above simply hits an endpoint and thus marks the user as online.\n\n### Adding status updates to the application with Pusher\nThe final part of our iOS application will be adding the listener for the updates so that every time someone updates their status, the update is added.\n\nTo do this, open the `listenForRealtimeEvents` method and add the following after instantiating the pusher variable:\n\n```\n    let channel = pusher.subscribe(\"new_status\")\n    let _ = channel.bind(eventName: \"update\", callback: { (data: Any?) -\u003e Void in\n        if let data = data as? [String: AnyObject] {\n            let username = data[\"username\"] as! String\n            \n            let status = data[\"status\"] as! String\n            \n            let index = self.friends.index(where: { $0[\"username\"] == username })\n            \n            if index != nil {\n                self.friends[index!][\"status\"] = status\n                self.tableView.reloadData()\n            }\n        }\n    })\n```\n\nThe above code creates a listener for the **update** event to the **new_status** channel. When the event is triggered, the callback checks if the username is part of the friends’ list. If it is, it updates the status of that entry and reloads the table view data.\n\nNow we have successfully added the realtime features to our application. The next thing we want to do is create a backend to help us actually trigger Pusher events that can be picked up by our iOS application.\n\n\n## Creating the NodeJS backend for our realtime iOS status updates app\n\nCreate a directory for the web application and then create some new files:\n\n```\n**index.js**\n\n    // ------------------------------------------------------\n    // Import all required packages and files\n    // ------------------------------------------------------\n    \n    let Pusher     = require('pusher');\n    let express    = require('express');\n    let app        = express();\n    let bodyParser = require('body-parser')\n    \n    let pusher     = new Pusher(require('./config.js'));\n    \n    // ------------------------------------------------------\n    // Set up Express middlewares\n    // ------------------------------------------------------\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // ------------------------------------------------------\n    // Define routes and logic\n    // ------------------------------------------------------\n    \n    app.post('/status', (req, res, next) =\u003e {\n      let payload = {username: req.body.username, status: req.body.status};\n      pusher.trigger('new_status', 'update', payload);\n      res.json({success: 200});\n    });\n    \n    app.post('/online', (req, res, next) =\u003e {\n      let payload = {username: req.body.username};\n      pusher.trigger('new_status', 'online', payload);\n      res.json({success: 200});\n    });\n    \n    app.get('/', (req, res) =\u003e {\n      res.json(\"It works!\");\n    });\n    \n    \n    // ------------------------------------------------------\n    // Catch errors\n    // ------------------------------------------------------\n    \n    app.use((req, res, next) =\u003e {\n        let err = new Error('Not Found: ');\n        err.status = 404;\n        next(err);\n    });\n    \n    \n    // ------------------------------------------------------\n    // Start application\n    // ------------------------------------------------------\n    \n    app.listen(4000, () =\u003e console.log('App listening on port 4000!'));\n```\n\nIn this file, we have created a basic Express application. The application has two important endpoints: `POST /online` and `POST /status`. They both trigger Pusher events with a payload which will be picked up by listeners in our iOS application.\n\nNext create the **config.js** file:\n\n```\n    module.exports = {\n        appId: 'PUSHER_ID',\n        key: 'PUSHER_KEY',\n        secret: 'PUSHER_SECRET',\n        cluster: 'PUSHER_CLUSTER',\n    };\n```\n\nThis is our Pusher configuration file. In here, replace the empty strings with the credentials provided in your Pusher dashboard.\n\nFinally, create a **package.json** file:\n\n```\n    {\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.16.0\",\n        \"express\": \"^4.14.1\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nThis file contains all the node packages required for the Node app to function properly.\n\nFinally, in the directory of your Node application, run the command below:\n\n```\n    $ npm install \u0026\u0026 node index.js\n```\n\nThe first command will install all the dependencies and the second one will start an Express server in node. When you see the message “***App listening on port 4000!”*** **then you know your backend application is ready.\n\n## Testing our realtime status update application\n\nOnce you have your local node web server running, you will need to make some changes so your application can talk to the local web server. In the `info.plist` file, make the following changes:\n\n![user-status-update-swift-arbitrary-loads](//images.contentful.com/1es3ne0caaid/5AjdqxJnck8Wa6MaE2gGIE/02a4de3f1e4ff702a6eb1c47f43a5076/user-status-update-swift-arbitrary-loads.png)\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\n![user-status-update-swift-demo](//images.contentful.com/1es3ne0caaid/45c2mCELhCY0MqasmiEcww/36df51c7c75bc3fa1d80fc98b78c548a/user-status-update-swift-demo.gif)\n\n## Conclusion\n\nIn the article, we have been able to create an iOS application with realtime user status updates, similar to what an application like WhatsApp currently has.","metaTitle":"Build a user status update in Swift","metaDescription":"Create an iOS application with realtime user status updates, similar to WhatsApp using Swift and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"pyEmgfpl28CuK4gOGgC2i","type":"Entry","createdAt":"2018-02-22T15:02:43.190Z","updatedAt":"2018-03-01T17:51:09.195Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build read receipts using Swift","url":"read-receipts-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/message-delivery-status-ios","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}}],"reviewDate":"2017-09-26","description":"Create an iOS chat application with a message delivery status using Swift, Node.js and Pusher for realtime functionality.","prerequisite":"A basic understanding of Swift and Node.js is needed to follow this tutorial.","content":"When building mobile chat applications, it is not uncommon to see developers adding a delivery status feature that lets you know when the message you sent has been delivered to the recipient. Instant Messaging applications like WhatsApp, Messenger, BBM, Skype and the like all provide this feature.\n\nSome of the tools that we will need to build our application are:\n\n1. [**Xcode**](https://developer.apple.com/xcode/)- The application will be built using Apple’s Swift programming language.\n2. [**NodeJS**](https://nodejs.org/en/download/) **(Express)** - The backend application will be written in NodeJS.\n3. [**Pusher**](https://pusher.com/) - Pusher will provide realtime reporting when the sent messages are delivered. You will need a Pusher application ID, key and secret. Create your free account at [pusher.com](https://pusher.com), then grab your app ID, key and secret from the Pusher dashboard.\n\nBelow is a screen recording of what we’ll be building. As you can see, when a message is sent, it is marked as sent, and the moment it hits the recipient’s phone, it is marked as delivered.\n\n![read-receipts-swift-demo](//images.contentful.com/1es3ne0caaid/57yKLaGkBikEIesQg6gQUu/10ee2f0aedc39b174bfc377031a70666/message-delivery-status-swift-demo.gif)\n\n## Getting started with our iOS application\n\nLaunch Xcode and create a new project. We are calling ours **Anonchat**. Once it has loaded the workspace, close Xcode and then `cd` to the root of your project and run the command `pod init`. This should generate a `Podfile` for you. Change the contents of the `Podfile`:\n\n```\n    # Uncomment the next line to define a global platform for your project\n    platform :ios, '9.0'\n    \n    target 'anonchat' do\n      # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\n      use_frameworks!\n    \n      # Pods for anonchat\n      pod 'Alamofire'\n      pod 'PusherSwift'\n      pod 'JSQMessagesViewController'\n    end\n```\n\nNow run the command `pod install` so the Cocoapods package manager can pull in the necessary dependencies. When this is complete, close Xcode (if open) and then open the `.xcworkspace` file that is in the root of your project folder.\n\n\n## Creating the views for our iOS application\n\nWe are going to be creating a couple of views that we will need for the chat application to function properly. The views will look something like the screenshot below:\n\n![read-receipts-swift-app-flow](//images.contentful.com/1es3ne0caaid/4IWwX3XnlCoSwIGCsWuUIg/029a6d6a6d2a854904c4fba4b82ac4b7/message-delivery-status-swift-app-flow.png)\n\nWhat we have done above is create the first ViewController which will serve as our welcome ViewController, and we have added a button which triggers navigation to the next controller which is a `Navigation Controller`. This Navigation Controller in turn has a View Controller set as the root controller.\n\n\n## Coding the message delivery status for our iOS application\n\nNow that we have set up the views using the interface builder on the `MainStoryboard`, let's add some functionality. The first thing we will do is create a `WelcomeViewController` and associate it with the first view on the left. This will be the logic house for that view; we won't add much to it for now though:\n\n```\n    import UIKit\n    \n    class WelcomeViewController: UIViewController {\n        override func viewDidLoad() {\n            super.viewDidLoad()\n        }\n    }\n```\n\nNext, we create another controller called the `ChatViewController`, which will be the main power house and where everything will be happening. The controller will extend the `JSQMessagesViewController` so that we automatically get a nice chat interface to work with out of the box, then we have to work on customizing this chat interface to work for us.\n\n```\n    import UIKit\n    import Alamofire\n    import PusherSwift\n    import JSQMessagesViewController\n    \n    class ChatViewController: JSQMessagesViewController {\n        override func viewDidLoad() {\n            super.viewDidLoad()\n    \n            let n = Int(arc4random_uniform(1000))\n    \n            senderId = \"anonymous\" + String(n)\n            senderDisplayName = senderId\n        }\n    }\n```\n\nIf you notice on the `viewDidLoad` method, we are generating a random username and setting that to be the `senderId` and `senderDisplayName` on the controller. This extends the properties set in the parent controller and is required.\n\nBefore we continue working on the chat controller, we want to create a last class called the `AnonMessage` class. This will extend the `JSQMessage` class and we will be using this to extend the default functionality of the class.\n\n\n```\n    import UIKit\n    import JSQMessagesViewController\n    \n    enum AnonMessageStatus {\n        case sending\n        case sent\n        case delivered\n    }\n    \n    class AnonMessage: JSQMessage {\n        var status : AnonMessageStatus\n        var id : Int\n    \n        public init!(senderId: String, status: AnonMessageStatus, displayName: String, text: String, id: Int?) {\n            self.status = status\n            \n            if (id != nil) {\n                self.id = id!\n            } else {\n                self.id = 0\n            }\n            \n            \n    \n            super.init(senderId: senderId, senderDisplayName: displayName, date: Date.init(), text: text)\n        }\n    \n        public required init?(coder aDecoder: NSCoder) {\n            fatalError(\"init(coder:) has not been implemented\")\n        }\n    }\n```\n\nIn the class above we have extended the `JSQMessage` class and we have also added some new properties to track: the `id` and the `status`. We also added an initialisation method so we can specify the new properties before instantiating the `JSQMessage` class properly. We also added an `enum` that contains all the statuses the message could possibly have.\n\nReturning to the `ChatViewController`, let's add a few properties to the class that we will need:\n\n``` language-swift\n    static let API_ENDPOINT = \"http://localhost:4000\";\n    \n    var messages = [AnonMessage]()\n    var pusher: Pusher!\n    \n    var incomingBubble: JSQMessagesBubbleImage!\n    var outgoingBubble: JSQMessagesBubbleImage!\n```\n\nNow that's done, let’s start customizing the controller to suit our needs. First, we will add some logic to the `viewDidLoad` method:\n\n```\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    \n        let n = Int(arc4random_uniform(1000))\n    \n        senderId = \"anonymous\" + String(n)\n        senderDisplayName = senderId\n    \n        inputToolbar.contentView.leftBarButtonItem = nil\n    \n        incomingBubble = JSQMessagesBubbleImageFactory().incomingMessagesBubbleImage(with: UIColor.jsq_messageBubbleBlue())\n        outgoingBubble = JSQMessagesBubbleImageFactory().outgoingMessagesBubbleImage(with: UIColor.jsq_messageBubbleGreen())\n    \n        collectionView!.collectionViewLayout.incomingAvatarViewSize = CGSize.zero\n        collectionView!.collectionViewLayout.outgoingAvatarViewSize = CGSize.zero\n    \n        automaticallyScrollsToMostRecentMessage = true\n    \n        collectionView?.reloadData()\n        collectionView?.layoutIfNeeded()\n    }\n```\n\nIn the above code, we started customizing the way our chat interface will look, using the parent class that has these properties already set. For instance, we are setting the `incomingBubble` to blue, and the `outgoingBubble` to green. We have also eliminated the avatar display because we do not need it right now.\n\nThe next thing we are going to do is override some of the methods that come with the parent controller so that we can display messages, customize the feel and more:\n\n```\n    override func collectionView(_ collectionView: JSQMessagesCollectionView!, messageDataForItemAt indexPath: IndexPath!) -\u003e JSQMessageData! {\n        return messages[indexPath.item]\n    }\n    \n    override func collectionView(_ collectionView: JSQMessagesCollectionView!, attributedTextForCellBottomLabelAt indexPath: IndexPath!) -\u003e NSAttributedString! {\n        if !isAnOutgoingMessage(indexPath) {\n            return nil\n        }\n    \n        let message = messages[indexPath.row]\n    \n        switch (message.status) {\n        case .sending:\n            return NSAttributedString(string: \"Sending...\")\n        case .sent:\n            return NSAttributedString(string: \"Sent\")\n        case .delivered:\n            return NSAttributedString(string: \"Delivered\")\n        }\n    }\n    \n    override func collectionView(_ collectionView: JSQMessagesCollectionView!, layout collectionViewLayout: JSQMessagesCollectionViewFlowLayout!, heightForCellBottomLabelAt indexPath: IndexPath!) -\u003e CGFloat {\n        return CGFloat(15.0)\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -\u003e Int {\n        return messages.count\n    }\n    \n    override func collectionView(_ collectionView: JSQMessagesCollectionView!, messageBubbleImageDataForItemAt indexPath: IndexPath!) -\u003e JSQMessageBubbleImageDataSource! {\n        let message = messages[indexPath.item]\n        if message.senderId == senderId {\n            return outgoingBubble\n        } else {\n            return incomingBubble\n        }\n    }\n    \n    override func collectionView(_ collectionView: JSQMessagesCollectionView!, avatarImageDataForItemAt indexPath: IndexPath!) -\u003e JSQMessageAvatarImageDataSource! {\n        return nil\n    }\n    \n    override func didPressSend(_ button: UIButton, withMessageText text: String, senderId: String, senderDisplayName: String, date: Date) {\n        let message = addMessage(senderId: senderId, name: senderId, text: text, id: nil)\n    \n        if (message != nil) {\n            postMessage(message: message as! AnonMessage)\n        }\n        \n        finishSendingMessage(animated: true)\n    }\n    \n    private func isAnOutgoingMessage(_ indexPath: IndexPath!) -\u003e Bool {\n        return messages[indexPath.row].senderId == senderId\n    }\n```\n\nThe next thing we are going to do is create some new methods on the controller that will help us post a new message. After that, we create a method to hit the remote endpoint which sends the message. Finally, we create a method to append the new message sent (or received) to the messages array:\n\n```\n    private func postMessage(message: AnonMessage) {\n        let params: Parameters = [\"sender\": message.senderId, \"text\": message.text]\n        hitEndpoint(url: ChatViewController.API_ENDPOINT + \"/messages\", parameters: params, message: message)\n    }\n    \n    private func hitEndpoint(url: String, parameters: Parameters, message: AnonMessage? = nil) {\n        Alamofire.request(url, method: .post, parameters: parameters).validate().responseJSON { response in\n            switch response.result {\n            case .success(let JSON):\n                let response = JSON as! NSDictionary\n    \n                if message != nil {\n                    message?.id = (response.object(forKey: \"ID\") as! Int) as Int\n                    message?.status = .sent\n                    self.collectionView.reloadData()\n                }\n    \n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n    \n    private func addMessage(senderId: String, name: String, text: String, id: Int?) -\u003e Any? {\n        let status = AnonMessageStatus.sending\n        \n        let id = id == nil ? nil : id;\n    \n        let message = AnonMessage(senderId: senderId, status: status, displayName: name, text: text, id: id)\n    \n        if (message != nil) {\n            messages.append(message as AnonMessage!)\n        }\n    \n        return message\n    }\n```\n\nGreat. Now every time we send a new message, the `didPressSend` method will be triggered and all the other ones will fall into place nicely!\n\nFor the last piece of the puzzle, we want to create the method that listens for Pusher events and fires a callback when an event trigger is received:\n\n```\n    private func listenForNewMessages() {\n        let options = PusherClientOptions(\n            host: .cluster(\"PUSHER_CLUSTER\")\n        )\n    \n        pusher = Pusher(key: \"PUSHER_KEY\", options: options)\n    \n        let channel = pusher.subscribe(\"chatroom\")\n    \n        channel.bind(eventName: \"new_message\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String: AnyObject] {\n                let messageId = data[\"ID\"] as! Int\n                let author = data[\"sender\"] as! String\n                \n                if author != self.senderId {\n                    let text = data[\"text\"] as! String\n    \n                    let message = self.addMessage(senderId: author, name: author, text: text, id: messageId) as! AnonMessage?\n                    message?.status = .delivered\n                    \n                    let params: Parameters = [\"ID\":messageId]\n                    self.hitEndpoint(url: ChatViewController.API_ENDPOINT + \"/delivered\", parameters: params, message: nil)\n    \n                    self.finishReceivingMessage(animated: true)\n                }\n            }\n        })\n        \n        channel.bind(eventName: \"message_delivered\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String: AnyObject] {\n                let messageId = (data[\"ID\"] as! NSString).integerValue\n                let msg = self.messages.first(where: { $0.id == messageId })\n                \n                msg?.status = AnonMessageStatus.delivered\n                self.finishReceivingMessage(animated: true)\n            }\n        })\n    \n        pusher.connect()\n    }\n```\n\nIn this method, we have created a `Pusher` instance, we have set the cluster and the key. We attach the instance to a `chatroom` channel and then bind to the `new_message` event on the channel. We also bind a `message_delivered` event, this will be the event that is triggered when a message is marked as delivered. It will update the message status to `delivered` so the sender knows the message has indeed been delivered.\n\n\u003e 💡 **Remember to replace the key and cluster with the actual values** **you have gotten from your Pusher dashboard**.\n\nNow we should be done with the application and as it stands, it should work but no messages can be sent just yet as we need a backend application for it to work properly.\n\n### Building the backend Node application\n\nNow that we are done with the iOS and Xcode parts, we can create the NodeJS backend for the application. We are going to use Express so that we can quickly whip something up.\n\nCreate a directory for the web application and then create two new files:\n\nThe **index.js** file…\n\n```\n    // ------------------------------------------------------\n    // Import all required packages and files\n    // ------------------------------------------------------\n    \n    let Pusher     = require('pusher');\n    let express    = require('express');\n    let bodyParser = require('body-parser');\n    let Promise    = require('bluebird');\n    let db         = require('sqlite');\n    let app        = express();\n    let pusher     = new Pusher(require('./config.js')['config']);\n    \n    // ------------------------------------------------------\n    // Set up Express\n    // ------------------------------------------------------\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // ------------------------------------------------------\n    // Define routes and logic\n    // ------------------------------------------------------\n    \n    app.post('/delivered', (req, res, next) =\u003e {\n      let payload = {ID: \"\"+req.body.ID+\"\"}\n      pusher.trigger('chatroom', 'message_delivered', payload)\n      res.json({success: 200})\n    })\n    \n    app.post('/messages', (req, res, next) =\u003e {\n      try {\n        let payload = {\n          text: req.body.text,\n          sender: req.body.sender\n        };\n    \n        db.run(\"INSERT INTO Messages (Sender, Message) VALUES (?,?)\", payload.sender, payload.text)\n          .then(query =\u003e {\n            payload.ID = query.stmt.lastID\n            pusher.trigger('chatroom', 'new_message', payload);\n    \n            payload.success = 200;\n    \n            res.json(payload);\n          });\n    \n      } catch (err) {\n        next(err)\n      }\n    });\n    \n    app.get('/', (req, res) =\u003e {\n      res.json(\"It works!\");\n    });\n    \n    \n    // ------------------------------------------------------\n    // Catch errors\n    // ------------------------------------------------------\n    \n    app.use((req, res, next) =\u003e {\n        let err = new Error('Not Found');\n        err.status = 404;\n        next(err);\n    });\n    \n    \n    // ------------------------------------------------------\n    // Start application\n    // ------------------------------------------------------\n    \n    Promise.resolve()\n      .then(() =\u003e db.open('./database.sqlite', { Promise }))\n      .then(() =\u003e db.migrate({ force: 'last' }))\n      .catch(err =\u003e console.error(err.stack))\n      .finally(() =\u003e app.listen(4000, function(){\n        console.log('App listening on port 4000!')\n      }));\n```\n\nHere we define the entire logic of our backend application. We are also using SQLite to store the chat messages; this is useful to help identify messages. Of course, you can always change the way the application works to suite your needs.\n\nThe `index.js` file also has two routes where it receives messages from the iOS application and triggers the Pusher event which is picked up by the application.\n\nThe next file is the **packages.json** where we define the NPM dependencies:\n\n```\n    {\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"bluebird\": \"^3.5.0\",\n        \"body-parser\": \"^1.16.0\",\n        \"express\": \"^4.14.1\",\n        \"pusher\": \"^1.5.1\",\n        \"sqlite\": \"^2.8.0\"\n      }\n    }\n```\n\nYou’ll also need a config.js file in the root directory:\n\n```\n    module.exports = {\n        appId: '',\n        key: '',\n        secret: '',\n        cluster: '',\n    };\n```\n\nSubstitute with the actual values from your Pusher application. Now run `npm install` on the directory and then `node index.js` once the npm installation is complete. You should see an *App listening on port 4000!* message.\n\n![read-receipts-swift-nodejs](//images.contentful.com/1es3ne0caaid/3x1vWsQRtYKsG2OWGaeuEk/34449477511a92d054ba98fc5fcc13d9/message-delivery-status-swift-nodejs.png)\n\n## Testing the application\n\nOnce you have your local node web server running, you will need to make some changes so your application can talk to the local web server. In the `info.plist` file, make the following changes:\n\n![read-receipts-swift-allow-arbitrary-loads](//images.contentful.com/1es3ne0caaid/64eKCfeNxewSUya2K4qga6/30343ac917a5e28a59bf4b71d976ba41/message-delivery-status-swift-allow-arbitrary-loads.png)\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\n\n## Conclusion\n\nIn this article, we have explored how to create an iOS chat application with a message delivery status message after the message is sent to other users. For practice, you can expand the statuses to support more instances.","metaTitle":"Build read receipts using Swift","metaDescription":"Create an iOS chat application with a message delivery status using Swift, Node.js and Pusher for realtime functionality."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mER83XhYhEyKo0e0ScA4S","type":"Entry","createdAt":"2018-02-27T12:26:19.116Z","updatedAt":"2018-02-27T12:26:19.116Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a collaborative text editor using Swift","url":"collaborative-text-editor-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-collaborative-text-editor","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-08-16","description":"Build a realtime collaborative text editor on iOS using Swift and Pusher.","prerequisite":"A basic understanding of Swift and Node.js is needed to follow this tutorial.","content":"Text editors are increasingly popular these days, whether embedded in a website comment form, or as a notepad, there are many forms of text editors. In this post, we are not only going to learn how to build a beautiful text editor mobile app in iOS, we are also going to learn how to make it possible to collaborate on a note in realtime using Pusher. Please note, however, that to keep the application simple, the article will not cover concurrent edits, thus only one person can edit at the same time while others watch.\n\nThe application will work by triggering an event when some text is entered. This event will be sent to Pusher and then picked up by the collaborator’s device and updated automatically. Here is a screen recording of how it would work:\n\n![collaborative-text-editor-swift-demo](//images.contentful.com/1es3ne0caaid/54Tr5OQYJOiusKc6u8QEsE/2eb738867ffe2cd186433a7bbfc62588/collaborative-text-editor-swift-demo.gif)\n\nTo follow along in this tutorial, you will need the following:\n\n1. **Cocoapods**, to install run `gem install cocoapods` on your machine\n2. **Xcode**\n3. A **Pusher application** - you can create a free account and application [here](https://pusher.com)\n4. Some knowledge of the **Swift** language\n5. **NodeJS**\n\n## Getting started with our iOS application in Xcode\n\nLaunch Xcode and create a new project. We are calling ours **Collabo**. After following the set up wizard, and with the workspace open, close Xcode and then `cd` to the root of your project and run the command `pod init`. This should generate a `Podfile` for you. Change the contents of the `Podfile`:\n\n\n```\n    # Uncomment the next line to define a global platform for your project\n    platform :ios, '9.0'\n    \n    target 'textcollabo' do\n      # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\n      use_frameworks!\n    \n      # Pods for anonchat\n      pod 'Alamofire'\n      pod 'PusherSwift'\n    end\n```\n\nNow run the command `pod install` so the Cocoapods package manager can pull in the necessary dependencies. When this is complete, close Xcode (if open) and then open the `.xcworkspace` file that is in the root of your project folder.\n\n\n## Designing the views for our iOS application\n\nWe are going to create some views for our iOS application and these will be the backbone where we will hook all the logic into. Using the Xcode story board, make your views look a little like the screenshots below.\n\nThis is the **LaunchScreen.storyboard** file. We have just designed something simple with no functionality at all.\n\n![collaborative-text-editor-swift-launch-screen](//images.contentful.com/1es3ne0caaid/16PdfyN2Z6oEa6E6gsiy8G/e141cca33b1f4a80175b86e232cf4620/collaborative-text-editor-swift-launch-screen.png)\n\nThe next storyboard we will design is the **Main.storyboard** and, as the name implies, this is the main storyboard. This is where we have all the important views that are attached to some logic.\n\n![collaborative-text-editor-swift-app-flow](//images.contentful.com/1es3ne0caaid/4oPd9JprTaCUeYcYQwsY2q/ad9d60625b7b4a809027986d2bfd6216/collaborative-text-editor-swift-app-flow.png)\n\nHere we have 3 views. The first view is designed to look exactly like the launch screen, with the exception of a button that we have linked to open up the second view. The second view is the Navigation controller, this is attached to a third view which is a `ViewController`. We have set the third view as the root controller to our Navigation Controller.\n\nIn the third view, we have a `UITextView` that is editable, placed in the view, and also a label that is supposed to be a character counter. This is the place where we will increment the characters as the user is typing text into the text view.\n\n\n## Coding the iOS collaborative text editor application\n\nNow that we have successfully created the views required for the application to load, the next thing we will do is start coding the logic for the application.\n\nCreate a new cocoa class file and name it `TextEditorViewController` and link it to the third view in the `Main.storyboard` file. The `TextViewController` should also adopt the `UITextViewDelegate`. Now, you can `ctrl+drag` the `UITextView` and also `ctrl+drag` the `UILabel` in the `Main.storyboard` file to the `TextEditorViewController` class.\n\nAlso, you should import the `PusherSwift` and `AlamoFire` libraries to the `TextViewController`. You should have something close to this after you are done:\n\n```\n    import UIKit\n    import PusherSwift\n    import Alamofire\n    \n    class TextEditorViewController: UIViewController, UITextViewDelegate {\n        @IBOutlet weak var textView: UITextView!\n        @IBOutlet weak var charactersLabel: UILabel!\n    }\n```\n\nNow we need to add some properties that we will be needing sometime later in the controller.\n\n```\n    import UIKit\n    import PusherSwift\n    import Alamofire\n    \n    class TextEditorViewController: UIViewController, UITextViewDelegate {\n        static let API_ENDPOINT = \"http://localhost:4000\";\n    \n        @IBOutlet weak var textView: UITextView!\n        \n        @IBOutlet weak var charactersLabel: UILabel!\n        \n        var pusher : Pusher!\n        \n        var chillPill = true\n        \n        var placeHolderText = \"Start typing...\"\n        \n        var randomUuid : String = \"\"\n    }\n```\n\nNow we will break up the logic into three parts:\n\n1. View and Keyboard events\n2. UITextViewDelegate methods\n3. Handling Pusher events.\n\nThe first is **View and Keyboard events**. Open the `TextEditorViewController` and update it with the methods below:\n\n```\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        // Notification trigger\n        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name: NSNotification.Name.UIKeyboardWillShow, object: nil)\n        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name: NSNotification.Name.UIKeyboardWillHide, object: nil)\n    \n        // Gesture recognizer\n        view.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(tappedAwayFunction(_:))))\n    \n        // Set the controller as the textView delegate\n        textView.delegate = self\n        \n        // Set the device ID\n        randomUuid = UIDevice.current.identifierForVendor!.uuidString\n    \n        // Listen for changes from Pusher\n        listenForChanges()\n    }\n    \n    override func viewWillAppear(_ animated: Bool) {\n        super.viewWillAppear(animated)\n        \n        if self.textView.text == \"\" {\n            self.textView.text = placeHolderText\n            self.textView.textColor = UIColor.lightGray\n        }\n    }\n    \n    func keyboardWillShow(notification: NSNotification) {\n        if let keyboardSize = (notification.userInfo?[UIKeyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue {\n            if self.charactersLabel.frame.origin.y == 1.0 {\n                self.charactersLabel.frame.origin.y -= keyboardSize.height\n            }\n        }\n    }\n    \n    func keyboardWillHide(notification: NSNotification) {\n        if let keyboardSize = (notification.userInfo?[UIKeyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue {\n            if self.view.frame.origin.y != 1.0 {\n                self.charactersLabel.frame.origin.y += keyboardSize.height\n            }\n        }\n    }\n```\n\nIn the `viewDidLoad` method, we registered the keyboard functions so they respond to keyboard events, and we added gesture recognizers that will dismiss the keyboard when you tap outside the `UITextView`. We also set the `textView` delegate to the controller itself and finally, we called a function to listen for new updates (we will create this later).\n\nIn the `viewWillAppear` method, we simply hacked the `UITextView` into having a placeholder text, because, by default, the `UITextView` does not have that feature. Wonder why, Apple.\n\nIn the `keyboardWillShow` and `keyboardWillHide` functions, we made the character count label rise up with the keyboard and descend with it respectively. This will prevent the Keyboard from covering the label when it is active.\n\nThe second thing is **UITextViewDelegate methods**. Update the `TextEditorViewController` with the following:\n\n```\n    func textViewDidChange(_ textView: UITextView) {\n        charactersLabel.text = String(format: \"%i Characters\", textView.text.characters.count)\n        \n        if textView.text.characters.count \u003e= 2 {\n            sendToPusher(text: textView.text)\n        }\n    }\n    \n    func textViewShouldBeginEditing(_ textView: UITextView) -\u003e Bool {\n        self.textView.textColor = UIColor.black\n        \n        if self.textView.text == placeHolderText {\n            self.textView.text = \"\"\n        }\n        \n        return true\n    }\n    \n    func textViewDidEndEditing(_ textView: UITextView) {\n        if textView.text == \"\" {\n            self.textView.text = placeHolderText\n            self.textView.textColor = UIColor.lightGray\n        }\n    }\n    \n    func tappedAwayFunction(_ sender: UITapGestureRecognizer) {\n        textView.resignFirstResponder()\n    }\n```\n\nThe `textViewDidChange` method simply updates the character count label and also sends the changes to Pusher using our backend API (which we will create later in the article). The `textViewShouldBeginEditing` is gotten from the `UITextViewDelegate` and it is triggered when the text view is about to be edited. In here, we basically play around with the placeholder, same as the `textViewDidEndEditing`  method. Finally, in the `tappedAwayFunction` we define the event callback for the gesture we registered in the previous section. In the method, we basically dismiss the keyboard.\n\nThe last thing to do is **Handling Pusher events**. Update the controller with the following methods:\n\n```\n    func sendToPusher(text: String) {\n        let params: Parameters = [\"text\": text, \"from\": randomUuid]\n        \n        Alamofire.request(TextEditorViewController.API_ENDPOINT + \"/update_text\", method: .post, parameters: params).validate().responseJSON { response in\n            switch response.result {\n                \n            case .success:\n                print(\"Succeeded\")\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n    \n    func listenForChanges() {\n        pusher = Pusher(key: \"PUSHER_KEY\", options: PusherClientOptions(\n            host: .cluster(\"PUSHER_CLUSTER\")\n        ))\n        \n        let channel = pusher.subscribe(\"collabo\")\n        let _ = channel.bind(eventName: \"text_update\", callback: { (data: Any?) -\u003e Void in\n            \n            if let data = data as? [String: AnyObject] {\n                let fromDeviceId = data[\"deviceId\"] as! String\n                \n                if fromDeviceId != self.randomUuid {\n                    let text = data[\"text\"] as! String\n                    self.textView.text = text\n                    self.charactersLabel.text = String(format: \"%i Characters\", text.characters.count)\n                }\n            }\n        })\n        \n        pusher.connect()\n    }\n```\n\nIn the `sendToPusher` method, we send the payload to our backend application using `AlamoFire`, which will, in turn, send it to Pusher. In the `listenForChanges` method, we then listen for changes to the text and, if there are any, we apply the changes to the text view.\n\n\u003e 💡 **Remember to replace the key and cluster with the actual value you have gotten from your Pusher dashboard**.\n\nIf you have followed the tutorial closely. then your `TextEditorViewController` should look something like this:\n\n```\n    import UIKit\n    import PusherSwift\n    import Alamofire\n    \n    class TextEditorViewController: UIViewController, UITextViewDelegate {\n        static let API_ENDPOINT = \"http://localhost:4000\";\n    \n        @IBOutlet weak var textView: UITextView!\n        \n        @IBOutlet weak var charactersLabel: UILabel!\n        \n        var pusher : Pusher!\n        \n        var chillPill = true\n        \n        var placeHolderText = \"Start typing...\"\n        \n        var randomUuid : String = \"\"\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            // Notification trigger\n            NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name: NSNotification.Name.UIKeyboardWillShow, object: nil)\n            NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name: NSNotification.Name.UIKeyboardWillHide, object: nil)\n    \n            // Gesture recognizer\n            view.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(tappedAwayFunction(_:))))\n    \n            // Set the controller as the textView delegate\n            textView.delegate = self\n            \n            // Set the device ID\n            randomUuid = UIDevice.current.identifierForVendor!.uuidString\n    \n            // Listen for changes from Pusher\n            listenForChanges()\n        }\n        \n        override func viewWillAppear(_ animated: Bool) {\n            super.viewWillAppear(animated)\n            \n            if self.textView.text == \"\" {\n                self.textView.text = placeHolderText\n                self.textView.textColor = UIColor.lightGray\n            }\n        }\n        \n        func keyboardWillShow(notification: NSNotification) {\n            if let keyboardSize = (notification.userInfo?[UIKeyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue {\n                if self.charactersLabel.frame.origin.y == 1.0 {\n                    self.charactersLabel.frame.origin.y -= keyboardSize.height\n                }\n            }\n        }\n        \n        func keyboardWillHide(notification: NSNotification) {\n            if let keyboardSize = (notification.userInfo?[UIKeyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue {\n                if self.view.frame.origin.y != 1.0 {\n                    self.charactersLabel.frame.origin.y += keyboardSize.height\n                }\n            }\n        }\n        \n        func textViewDidChange(_ textView: UITextView) {\n            charactersLabel.text = String(format: \"%i Characters\", textView.text.characters.count)\n            \n            if textView.text.characters.count \u003e= 2 {\n                sendToPusher(text: textView.text)\n            }\n        }\n        \n        func textViewShouldBeginEditing(_ textView: UITextView) -\u003e Bool {\n            self.textView.textColor = UIColor.black\n            \n            if self.textView.text == placeHolderText {\n                self.textView.text = \"\"\n            }\n            \n            return true\n        }\n        \n        func textViewDidEndEditing(_ textView: UITextView) {\n            if textView.text == \"\" {\n                self.textView.text = placeHolderText\n                self.textView.textColor = UIColor.lightGray\n            }\n        }\n        \n        \n        func tappedAwayFunction(_ sender: UITapGestureRecognizer) {\n            textView.resignFirstResponder()\n        }\n        \n        func sendToPusher(text: String) {\n            let params: Parameters = [\"text\": text, \"from\": randomUuid]\n            \n            Alamofire.request(TextEditorViewController.API_ENDPOINT + \"/update_text\", method: .post, parameters: params).validate().responseJSON { response in\n                switch response.result {\n                    \n                case .success:\n                    print(\"Succeeded\")\n                case .failure(let error):\n                    print(error)\n                }\n            }\n        }\n        \n        func listenForChanges() {\n            pusher = Pusher(key: \"PUSHER_KEY\", options: PusherClientOptions(\n                host: .cluster(\"PUSHER_CLUSTER\")\n            ))\n            \n            let channel = pusher.subscribe(\"collabo\")\n            let _ = channel.bind(eventName: \"text_update\", callback: { (data: Any?) -\u003e Void in\n                \n                if let data = data as? [String: AnyObject] {\n                    let fromDeviceId = data[\"deviceId\"] as! String\n                    \n                    if fromDeviceId != self.randomUuid {\n                        let text = data[\"text\"] as! String\n                        self.textView.text = text\n                        self.charactersLabel.text = String(format: \"%i Characters\", text.characters.count)\n                    }\n                }\n            })\n            \n            pusher.connect()\n        }\n    }\n```\n\nGreat! Now we need to make the backend of the application.\n\n## Building the backend Node application\n\nNow that we are done with the Swift part, we can focus on creating the NodeJS backend for the application. We are going to be using Express so that we can quickly get something running.\n\nCreate a directory for the web application and then create some new files:\n\nThe **index.js** file…\n\n```\n    let path = require('path');\n    let Pusher = require('pusher');\n    let express = require('express');\n    let bodyParser = require('body-parser');\n    let app = express();\n    let pusher = new Pusher(require('./config.js'));\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    app.post('/update_text', function(req, res){\n      var payload = {text: req.body.text, deviceId: req.body.from}\n      pusher.trigger('collabo', 'text_update', payload)\n      res.json({success: 200})\n    });\n    \n    app.use(function(req, res, next) {\n        var err = new Error('Not Found');\n        err.status = 404;\n        next(err);\n    });\n    \n    module.exports = app;\n    \n    app.listen(4000, function(){\n      console.log('App listening on port 4000!');\n    });\n```\n\nIn the JS file above, we are using Express to create a simple application and in the `/update_text` route, we simply receive the payload and pass it on to Pusher. Nothing complicated there.\n\nCreate a **package.json** file also:\n\n```\n    {\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.17.2\",\n        \"express\": \"^4.15.3\",\n        \"path\": \"^0.12.7\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nThe **package.json** file is where we define all the NPM dependencies.\n\nThe last file to create is a **config.js** file. This is where we will define the configuration values for our Pusher application:\n\n```\n    module.exports = {\n      appId: 'PUSHER_ID',\n      key: 'PUSHER_KEY',\n      secret: 'PUSHER_SECRET',\n      cluster: 'PUSHER_CLUSTER',\n      encrypted: true\n    };\n```\n\n\u003e 💡 **Remember to replace the key and cluster with the actual value you have gotten from your Pusher dashboard**.\n\nNow run `npm install` on the directory and then `node index.js` once the npm installation is complete. You should see *App listening on port 4000!* message.\n\n![collaborative-text-editor-swift-nodejs](//images.contentful.com/1es3ne0caaid/Cjmh5pEqkgOo2oUY0yq6Y/bca46b60bcc64782d2536cd82a589d01/collaborative-text-editor-swift-nodejs.png)\n\n## Testing the application\n\nOnce you have your local node web server running, you will need to make some changes so your application can talk to the local web server. In the `info.plist` file, make the following changes:\n\n![collaborative-text-editor-swift-allow-arbitrary-loads](//images.contentful.com/1es3ne0caaid/5Rpga0iwScAecK8cS0cIoE/449a9c282d298b533b6b261110c8b507/collaborative-text-editor-swift-allow-arbitrary-loads.png)\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\n\n## Conclusion\n\nIn this article, we have covered how to build a realtime collaborative text editor on iOS using Pusher. Hopefully, you have learnt a thing or two from following the tutorials. For practice, you can expand the statuses to support more instances.","metaTitle":"Build a collaborative text editor using Swift","metaDescription":"Build a realtime collaborative text editor on iOS using Swift and Pusher."}}],"defaultValue":"Channels \u0026 iOS","queryType":"tag","pages":5,"route":"/tutorials","query":{"product":"Channels","tag":"iOS","page":"4"}}},"page":"/tutorials","query":{"product":"Channels","tag":"iOS","page":"4"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=iOS&page=4 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:39:45 GMT -->
</html>