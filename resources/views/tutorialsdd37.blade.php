<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Live%20Counter&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:42:56 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">8</span> tutorials for “<span class="css-npldjc ehwuahf2">Live Counter</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials06f9.html?product=Channels&amp;tag=Live%20Counter" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorialse416.html?product=Beams&amp;tag=Live%20Counter" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Live Counter"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/go-tweets-popularity-chart.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live popularity chart in Go using tweets as a data source</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Build a Go application with a simple web frontend, displaying a live graph comparing the popularity of three Twitter top...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-presence-counter-nodejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a serverless realtime presence counter with Node.js</h3><p class="css-k12xad e5jrto45">Learn to quickly create a realtime presence counter with Node.js, AWS Lambda and Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/social-poll-realtime-counter.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a social poll app with counter using Node.js</h3><p class="css-k12xad e5jrto45">A short tutorial showing how to quickly build a poll app using Node.js, with realtime vote count updates.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/angular-realtime.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">TypeScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Making Angular 5 realtime with WebSockets</h3><p class="css-k12xad e5jrto45">Build an app with realtime features in Angular 5 and Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/counter-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime counter using Kotlin</h3><p class="css-k12xad e5jrto45">Counters are always useful for any app. In this tutorial, we will buld a live click counter using Kotlin.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/counter-aspnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Counter</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime counter using ASP.NET</h3><p class="css-k12xad e5jrto45">Create a live website visits counter using ASP.NET and jQuery.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/counter-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Counter</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime counter using Swift</h3><p class="css-k12xad e5jrto45">Build a realtime counter on a video viewer iOS application showing how many people have viewed the video.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/counter-javascript.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Live Counter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime counter using JavaScript</h3><p class="css-k12xad e5jrto45">Create a realtime vote counter for your website with Pusher and plain JavaScript. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Prev</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsdd37.html?tag=Live%20Counter&amp;page=1" class="css-2wakph edg0byb1">1</a><a href="#" disabled="" class="css-69ho49 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":8,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"369KH6O2yIk79cjItcMVND","type":"Entry","createdAt":"2019-06-07T18:31:18.861Z","updatedAt":"2019-06-07T18:31:18.861Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live popularity chart in Go using tweets as a data source","url":"go-tweets-popularity-chart","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Khmrnzj5moO4S6WOYOGAo","type":"Entry","createdAt":"2018-11-14T14:35:55.702Z","updatedAt":"2019-03-03T15:15:59.601Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lanre Adelowo","url":"lanre-adelowo","email":"adelowomailbox@gmail.com","twitter":"https://twitter.com/alanreadelowo","github":"https://github.com/adelowo","guestWriter":true}}],"projectRepo":"https://github.com/adelowo/pusher-twitter-streaming-api","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WBKKiARVKggKEsq8gSuOS","type":"Entry","createdAt":"2018-02-12T15:10:05.476Z","updatedAt":"2018-02-26T12:31:10.466Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Counter","url":"live-counter","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}}],"reviewDate":"2019-06-07","description":"Build a Go application with a simple web frontend, displaying a live graph comparing the popularity of three Twitter topics. You will create a Twitter developer account, code the app, and be able to customize the displayed topics.","prerequisite":"You will need Go 1.5+ installed on your machine.","content":"Polls exists almost everywhere on the internet - Twitter, Slack - and a major similarity between all of them is the results are updated in realtime. In this tutorial, I will be describing how to build a web app that shows the popularity of a keyword in realtime with the help of Pusher Channels. The data source for our application will be tweets from Twitter.\n\nBelow is a gif of the final state of the application:\n\n![go-twitter-graph-demo](//images.ctfassets.net/1es3ne0caaid/5emdjhJDG7JKgw8H0lyuFQ/3a849c917c7aa54cd03cd0ab295b87ac/go-twitter-graph-demo.gif)\n\n## Prerequisites\n\n- Golang `\u003e=1.5`\n- A [Pusher account](https://dashboard.pusher.com)\n- A Twitter application. \n\u003e To do this, you need to apply as a developer before you can create an application. You can find a comprehensive guide [here](https://medium.com/@divyeshardeshana/create-twitter-developer-account-app-4ac55e945bf4). \n\n## Building the application\n\nRemember that an important step to this is to make sure you have a Twitter developer account. Kindly follow [this tutorial](https://medium.com/@divyeshardeshana/create-twitter-developer-account-app-4ac55e945bf4) to do that.\n\nThe next step of action is to create a directory to house our application, you will need to create a directory called `streaming-api`. The location of this directory will depend on the version of the Go toolchain you have - If your Go toolchain is `\u003c=1.11`, you need to create the directory in your `$GOPATH` such as `$GOPATH/src/github.com/username/streaming-api`. If you are making use of `\u003e=1.12`, you can create the directory literally anywhere. \n\nOnce that is done, you will need to create a file called `.env`, this file will contain credentials to access both the Twitter streaming API and Pusher channels. Run the command below to create the file:\n\n```\n    $ touch .env\n```\n\nOnce done, you will also need to paste the following contents into the newly created `.env`  file:\n\n```\n    // .env\n    TWITTER_CONSUMER_KEY=TWITTER_CONSUMER_KEY\n    TWITTER_CONSUMER_SECRET=TWITTER_CONSUMER_SECRET\n    TWITTER_ACCESS_TOKEN=TWITTER_ACCESS_TOKEN\n    TWITTER_ACCESS_SECRET=TWITTER_ACCESS_SECRET\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_APP_KEY=PUSHER_APP_KEY\n    PUSHER_APP_SECRET=PUSHER_APP_SECRET\n    PUSHER_APP_CLUSTER=\"eu\"\n    PUSHER_APP_SECURE=\"1\"\n```\n\n\n\u003e Please remember to replace the placeholders with your actual credentials.\n\nThe next step of action is to actually create the server and the integration with Pusher Channels. To do that, you need to create a new file called `main.go`, that can be done by executing the command below:\n\n```\n    $ touch main.go\n```\n\nYou will also need to fetch some library that are needed to help build the application. Run the command below to install these libraries:\n\n```\n    $ go get -v github.com/dghubble/go-twitter/twitter \n    $ go get -v github.com/dghubble/oauth1 \n    $ go get -v github.com/joho/godotenv\n    $ go get -v github.com/pusher/pusher-http-go\n```\n\nIn the newly created file `main.go`, you will need to paste the following contents:\n\n```go\n    // streaming-api/main.go\n    \n    package main\n    \n    import (\n            \"encoding/json\"\n            \"flag\"\n            \"fmt\"\n            \"html/template\"\n            \"log\"\n            \"net/http\"\n            \"os\"\n            \"os/signal\"\n            \"strings\"\n            \"sync\"\n            \"syscall\"\n            \"time\"\n    \n            \"github.com/dghubble/go-twitter/twitter\"\n            \"github.com/dghubble/oauth1\"\n            \"github.com/joho/godotenv\"\n            \"github.com/pusher/pusher-http-go\"\n    )\n    \n    type cache struct {\n            counter map[string]int64\n            mu      sync.RWMutex\n    }\n    \n    func (c *cache) Init(options ...string) {\n            for _, v := range options {\n                    c.counter[strings.TrimSpace(v)] = 0\n            }\n    }\n    \n    func (c *cache) All() map[string]int64 {\n            c.mu.Lock()\n            defer c.mu.Unlock()\n    \n            return c.counter\n    }\n    \n    func (c *cache) Incr(option string) {\n            c.mu.Lock()\n            defer c.mu.Unlock()\n    \n            c.counter[strings.TrimSpace(option)]++\n    }\n    \n    func (c *cache) Count(option string) int64 {\n            c.mu.RLock()\n            defer c.mu.RUnlock()\n    \n            val, ok := c.counter[strings.TrimSpace(option)]\n            if !ok {\n                    return 0\n            }\n    \n            return val\n    }\n    \n    func main() {\n    \n            options := flag.String(\"options\", \"Messi,Suarez,Trump\", \"What items to search for on Twitter ?\")\n            httpPort := flag.Int(\"http.port\", 1500, \"What port to run HTTP on ?\")\n            channelsPublishInterval := flag.Duration(\"channels.duration\", 3*time.Second, \"How much duration before data is published to Pusher Channels\")\n    \n            flag.Parse()\n    \n            if err := godotenv.Load(); err != nil {\n                    log.Fatalf(\"could not load .env file.. %v\", err)\n            }\n    \n            appID := os.Getenv(\"PUSHER_APP_ID\")\n            appKey := os.Getenv(\"PUSHER_APP_KEY\")\n            appSecret := os.Getenv(\"PUSHER_APP_SECRET\")\n            appCluster := os.Getenv(\"PUSHER_APP_CLUSTER\")\n            appIsSecure := os.Getenv(\"PUSHER_APP_SECURE\")\n    \n            var isSecure bool\n            if appIsSecure == \"1\" {\n                    isSecure = true\n            }\n    \n            pusherClient := \u0026pusher.Client{\n                    AppId:   appID,\n                    Key:     appKey,\n                    Secret:  appSecret,\n                    Cluster: appCluster,\n                    Secure:  isSecure,\n            }\n    \n            config := oauth1.NewConfig(os.Getenv(\"TWITTER_CONSUMER_KEY\"), os.Getenv(\"TWITTER_CONSUMER_SECRET\"))\n            token := oauth1.NewToken(os.Getenv(\"TWITTER_ACCESS_TOKEN\"), os.Getenv(\"TWITTER_ACCESS_SECRET\"))\n    \n            httpClient := config.Client(oauth1.NoContext, token)\n    \n            client := twitter.NewClient(httpClient)\n    \n            optionsCache := \u0026cache{\n                    mu:      sync.RWMutex{},\n                    counter: make(map[string]int64),\n            }\n    \n            splittedOptions := strings.Split(*options, \",\")\n    \n            if n := len(splittedOptions); n \u003c 2 {\n                    log.Fatalf(\"There must be at least 2 options... %v \", splittedOptions)\n            } else if n \u003e 3 {\n                    log.Fatalf(\"There cannot be more than 3 options... %v\", splittedOptions)\n            }\n    \n            optionsCache.Init(splittedOptions...)\n    \n            go func() {\n    \n                    var t *template.Template\n                    var once sync.Once\n    \n                    http.Handle(\"/static/\", http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\".\"))))\n    \n                    http.Handle(\"/polls\", http.HandlerFunc(poll(optionsCache)))\n                    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n    \n                            once.Do(func() {\n                                    tem, err := template.ParseFiles(\"index.html\")\n                                    if err != nil {\n                                            log.Fatal(err)\n                                    }\n    \n                                    t = tem.Lookup(\"index.html\")\n                            })\n    \n                            t.Execute(w, nil)\n                    })\n    \n                    http.ListenAndServe(fmt.Sprintf(\":%d\", *httpPort), nil)\n            }()\n    \n            go func(c *cache, client *pusher.Client) {\n    \n                    t := time.NewTicker(*channelsPublishInterval)\n    \n                    for {\n                            select {\n                            case \u003c-t.C:\n                                    pusherClient.Trigger(\"twitter-votes\", \"options\", c.All())\n                            }\n                    }\n    \n            }(optionsCache, pusherClient)\n    \n            demux := twitter.NewSwitchDemux()\n            demux.Tweet = func(tweet *twitter.Tweet) {\n                    for _, v := range splittedOptions {\n                            if strings.Contains(tweet.Text, v) {\n                                    optionsCache.Incr(v)\n                            }\n                    }\n            }\n    \n            fmt.Println(\"Starting Stream...\")\n    \n            filterParams := \u0026twitter.StreamFilterParams{\n                    Track:         splittedOptions,\n                    StallWarnings: twitter.Bool(true),\n            }\n    \n            stream, err := client.Streams.Filter(filterParams)\n            if err != nil {\n                    log.Fatal(err)\n            }\n    \n            go demux.HandleChan(stream.Messages)\n    \n            ch := make(chan os.Signal)\n            signal.Notify(ch, syscall.SIGINT, syscall.SIGTERM)\n            \u003c-ch\n    \n            fmt.Println(\"Stopping Stream...\")\n            stream.Stop()\n    }\n    \n    func poll(cache *cache) func(w http.ResponseWriter, r *http.Request) {\n            return func(w http.ResponseWriter, r *http.Request) {\n                    json.NewEncoder(w).Encode(cache.All())\n            }\n    }\n```\n\nWhile a little lengthy, the above code does just three things:\n\n\n- Connect to the Twitter streaming API and listen for tweets that match our options search.\n- Start an `HTTP` server that serves an HTML page in order to display the realtime results.\n- Send an updated result to Pusher Channels.\n\nWhile you might be tempted to run the application, there are still a few things missing here. We need to create one more file - `index.html`. This file will house the frontend for our application. You will need to go ahead to create the file by running the command below:\n\n```\n    $ touch index.html\n```\n\nIn the newly created `index.html` file, you will need to paste the following contents in it:\n\n```html\n    // streaming-api/index.html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003ctitle\u003eRealtime voting app based on Tweets\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap-grid.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.min.css\" /\u003e\n    \u003c/head\u003e\n    \n    \u003cbody\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-1\"\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-10\"\u003e\n                    \u003ccanvas id=\"myChart\" width=\"400\" height=\"400\"\u003e\u003c/canvas\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-1\"\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://js.pusher.com/4.4/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"static/app.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe import a few Javascript libraries but perhaps the most interesting is Line 29 which reads `\u003cscript src=\"static/app.js\"\u003e\u003c/script\u003e` . Basically, what this means is we need to create yet another file called `app.js`. You can go ahead to do that in the root directory with the following command:\n\n```\n    $ touch app.js\n```\n\nIn the newly created `app.js` file, paste the following content:\n\n```js\n    // streaming-api/app.js\n    \n    const APP_KEY = 'PUSHER_APP_KEY';\n    const APP_CLUSTER = 'PUSHER_APP_CLUSTER';\n    \n    var ctx = document.getElementById('myChart').getContext('2d');\n    var myChart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: [],\n        datasets: [\n          {\n            label: '# of Tweets',\n            data: [],\n            backgroundColor: [\n              'rgba(255, 99, 132, 0.2)',\n              'rgba(54, 162, 235, 0.2)',\n              'rgba(255, 159, 64, 0.2)',\n            ],\n            borderWidth: 1,\n          },\n        ],\n      },\n      options: {\n        scales: {\n          yAxes: [\n            {\n              ticks: {\n                beginAtZero: true,\n              },\n            },\n          ],\n        },\n      },\n    });\n    \n    function updateChart(data) {\n      let iterationCount = 0;\n    \n      for (const key in data) {\n        if (!myChart.data.labels.includes(key)) {\n          myChart.data.labels.push(key);\n        }\n    \n        myChart.data.datasets.forEach(dataset =\u003e {\n          dataset.data[iterationCount] = data[key];\n        });\n    \n        iterationCount++;\n    \n        myChart.update();\n      }\n    }\n    \n    axios\n      .get('http://localhost:1500/polls', {})\n      .then(res =\u003e {\n        updateChart(res.data);\n      })\n      .catch(err =\u003e {\n        console.log('Could not retrieve information from the backend');\n        console.error(err);\n      });\n    \n    const pusher = new Pusher(APP_KEY, {\n      cluster: APP_CLUSTER,\n    });\n    \n    const channel = pusher.subscribe('twitter-votes');\n    \n    channel.bind('options', data =\u003e {\n      updateChart(data);\n    });\n```\n\n\n\u003e Please remember to make use of your actual key.\n\nWith the above done, it is time to test the application. To do this, you should run the following command in the root directory of `streaming-api` :\n\n```\n    $ go run main.go\n```\n\nYou will need to visit `http://localhost:1500` to see the chart.\n\nYou can also make use of the trending topics on your Twitter if you want to. To search Twitter for other polls, you can also make use of the following command:\n\n```\n    $ go run main.go -options=\"Apple,Javascript,Trump\"\n```\n\n\n## Conclusion\n\nIn this tutorial, I have described how to build a realtime popularity application that uses tweets as a data source. I also showed how to integrate with the Twitter streaming API and more importantly, Pusher Channels.\n\nAs always, the code for this tutorial can be found on [GitHub](https://github.com/adelowo/pusher-twitter-streaming-api).","metaTitle":"Build a popularity chart in Go using tweets as a data source","metaDescription":"Build a Go application with a simple web frontend, displaying a live graph comparing popularity of three Twitter topics. You will create a Twitter developer account, code the app, and be able to customize the displayed topics."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2WU4UkPiAEsQeAqS8iMEYY","type":"Entry","createdAt":"2018-03-14T17:33:37.268Z","updatedAt":"2018-03-14T17:33:37.268Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a serverless realtime presence counter with Node.js","url":"realtime-presence-counter-nodejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/tvass","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WBKKiARVKggKEsq8gSuOS","type":"Entry","createdAt":"2018-02-12T15:10:05.476Z","updatedAt":"2018-02-26T12:31:10.466Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Counter","url":"live-counter","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}}],"reviewDate":"2018-03-13","description":"Learn to quickly create a realtime presence counter with Node.js, AWS Lambda and Pusher.","prerequisite":"To follow this tutorial you will need an account with AWS. You need to have installed Node.js on your local machine.","content":"When building web apps, we typically divide our time between coding our app logic and maintaining servers to host our app. Serverless architecture allows us to focus on building our app’s logic, leaving all the server management to a cloud provider such as AWS. Serverless apps are also passive, in the sense that they use no resources when idle, so cost is saved as well.\n\nIn this tutorial, we’ll build a small web app to show how serverless and realtime can work together. Our app will have one page, where it displays the number of people currently viewing that page and updates it in realtime. We’ll run our app on AWS Lambda. Here’s a preview of our site in action:\n\n![serverless-node-aws-app-preview](//images.ctfassets.net/1es3ne0caaid/1lDOo3d3EY0EwckoGgOE4O/0d53706f7f1a27e73e244fb6a402eb7f/serverless-node-aws-app-preview.gif)\n\nYou can check out the source code of the complete application on [GitHub](http://github.com/shalvah/tvass).\n\n## Prerequisites\n- Node.js v6.5.0 or greater\n- An AWS account. You can sign up for a free account [here](https://aws.amazon.com/free/)\n- A Pusher account. Sign up [here](https://pusher.com/signup) (it’s free).\n\n## Setting up the project\n\nFirst, we’ll install the serverless framework, a CLI tool for building serverless apps:\n\n```\n    npm install -g serverless\n```\n\nNext, we’ll create a new service using the AWS Node.js template. Create a folder to hold your service (I’m calling mine “tvass”, short for **T**hat **V**ery **A**wesome **S**erverless **S**ite) and run the following command in it:\n\n```\n    serverless create --template aws-nodejs\n```\n\nThis will populate the current directory with a few files. Your directory should have the following structure:\n\n```\n    tvass\n    |- .gitignore\n    |- handler.js\n    |- serverless.yml\n```\n\n## Building the serverless component\n\nThe `serverless.yml` file describes our service so the serverless CLI can configure and deploy it to our provider. Let’s write our `serverless.yml`. Replace the contents of the file with the following:\n\n``` yaml\n    service: tvass\n    \n    provider:\n      name: aws\n      runtime: nodejs6.10\n    \n    functions:\n      home:\n        handler: handler.home\n        events:\n          - http:\n              path: /\n              method: get\n              cors: true\n```\n\nThe format is easy to understand:\n\n- In the **service** key, we state the name of our service.\n- In the **provider** key, we specify the name of our provider and the runtime environment we wish to use.\n- In the **functions** key, we list out the functions our app provides. Functions are the building blocks of our service. They’re used as entry points to the service to perform a specific action. For our service, our functions correspond to the routes in our app, which means we’ll have just one function, the one which renders the home page. The function is described by:\n  - a **handler**, which is the JavaScript function exported from our `handler.js` that will be executed when this function is triggered.\n  - **events** which trigger the function. In this case, our desired event is a GET request to the root URL of our app.\n\nWe defined `handler.home` as the handler for the `home` function. This means we need to write a `home` function and export it from `handler.js`. Let’s do that now.\n\nFirst, we’ll install handlebars, which is what we’ll use as our template engine. We’ll also install the Pusher SDK. Create a `package.json` file in your project root with the following content:\n\n``` json\n    {\n      \"dependencies\": {\n        \"handlebars\": \"^4.0.11\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nThen run `npm install`.\n\nNext up, let’s create the home page view (a handlebars template). Create a file named `home.hbs` with the following content:\n\n``` html\n    \u003cbody\u003e\n    \u003ch2 align=\"center\" id=\"visitorCount\"\u003e{{ visitorCount }}\u003c/h2\u003e\n    \u003cp align=\"center\"\u003eperson(s) currently viewing this page\u003c/p\u003e\n    \u003c/body\u003e\n```\n\n\nLastly, the handler itself. Replace the code in `handler.js` with the following:\n\n``` javascript\n    'use strict';\n    \n    const hbs = require('handlebars');\n    const fs = require('fs');\n    \n    let visitorCount = 0;\n    \n    module.exports.home = (event, context, callback) =\u003e {\n        let template = fs.readFileSync(__dirname + '/home.hbs', 'utf8');\n        template = hbs.compile(template);\n    \n        const response = {\n            statusCode: 200,\n            headers: { 'Content-type': 'text/html' },\n            body: template({ visitorCount })\n        };\n    \n        callback(null, response);\n    };\n```\n\n\nIn this function, we grab the template file, pass its contents to handlebars and render the result as a web page in the caller’s browser.\n\n## Building the realtime component\n\nWe’ve got the serverless part figured out. Time to solve the realtime part. How do we:\n\n- get the number of people viewing the page?\n- update this number when someone opens the page or leaves it?\n\nHere’s how we’ll do this with Pusher:\n\n1. Our backend will record the current count of visitors and pass this to the view before rendering. We could store this count in a cache like Redis, but we’ll just store it in memory to keep this demo simple.\n2. Whenever the page is rendered on a browser, it subscribes to two public Pusher channels:\n  1. An existing channel (let’s call this `visitor-updates`). This is the channel where it will receive updates on the number of visitors.\n  2. A new channel with a randomly generated name.  The purpose of this channel is to trigger a Pusher event called `channel_occupied`, which will be sent via a webhook to our backend. Also, when the user leaves the page, the Pusher connection will be terminated, resulting in a `channel_vacated` notification.\n3. When the backend receives the `channel_occupied` or `channel_vacated` notifications, it re-calculates the visitor count and broadcasts the new value on the `visitor-updates` channel. Pages subscribed to this channel can then update their UI to reflect the new value.\n\nWe’ve already got the code for (1) in our `handler.js` (the `visitorCount` variable). Let’s update the `home.hbs` view to behave as we set out in (2):\n\n``` javascript\n    \u003cbody\u003e\n    \u003ch2 align=\"center\" id=\"visitorCount\"\u003e{{ visitorCount }}\u003c/h2\u003e\n    \u003cp align=\"center\"\u003eperson(s) currently viewing this page\u003c/p\u003e\n    \n    \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        var pusher = new Pusher(\"{{ appKey }}\", {\n            cluster: \"{{ appCluster }}\",\n        });\n        pusher.subscribe(\"{{ updatesChannel }}\")\n                .bind('pusher:subscription_succeeded', function () {\n                    pusher.subscribe(Date.now() + Math.random().toString(36).replace(/\\W+/g, ''));\n                })\n                .bind('update', function (data) {\n                    document.getElementById('visitorCount').textContent = data.newCount;\n                });\n    \u003c/script\u003e\n    \n    \u003c/body\u003e\n```\n\n\nA few notes on the code snippet above:\n\n-  `appKey`, `appCluster` and `updatesChannel` are variables that will be passed by our backend to the view when compiling with handlebars.\n- We first subscribe to our `updatesChannel` and wait for the Pusher event `subscription_succeeded` before creating the new, random channel. This is so an `update` event is triggered immediately (since a new channel is created)\n\nNow, to the backend. First, we’ll update our `home` handler to pass the variables mentioned above to the view. Then we’ll add a second handler, to serve as our webhook that will get notified by Pusher of the `channel_occupied` and `channel_vacated` events.\n\n``` javascript\n    'use strict';\n    \n    const hbs = require('handlebars');\n    const fs = require('fs');\n    const Pusher = require('pusher');\n    \n    let visitorCount = 0;\n    const updatesChannel = 'visitor-updates';\n    \n    module.exports.home = (event, context, callback) =\u003e {\n        let template = fs.readFileSync(__dirname + '/home.hbs', 'utf8');\n        template = hbs.compile(template);\n    \n        const response = {\n            statusCode: 200,\n            headers: {\n                'Content-type': 'text/html'\n            },\n            body: template({\n                visitorCount,\n                updatesChannel,\n                appKey: process.env.PUSHER_APP_KEY,\n                appCluster: process.env.PUSHER_APP_CLUSTER,\n            })\n        };\n    \n        callback(null, response);\n    };\n    \n    module.exports.webhook = (event, context, callback) =\u003e {\n        let body = JSON.parse(event.body);\n        body.events.forEach((event) =\u003e {\n            // ignore any events from our public channel -- it's only for broadcasting\n            if (event.channel === updatesChannel) {\n                return;\n            }\n            visitorCount += event.name === 'channel_occupied' ? 1 : -1;\n        });\n    \n        // notify all clients of new figure\n        const pusher = new Pusher({\n            appId: process.env.PUSHER_APP_ID,\n            key: process.env.PUSHER_APP_KEY,\n            secret: process.env.PUSHER_APP_SECRET,\n            cluster: process.env.PUSHER_APP_CLUSTER,\n        });\n        pusher.trigger(updatesChannel, 'update', {newCount: visitorCount});\n    \n        // let Pusher know everything went well\n        callback(null, { statusCode: 200 });\n    };\n``` \n\n\nLastly, we need to declare this new endpoint (our webhook) as a function in our `serverless.yml`. We’ll also add environment variables to hold our Pusher credentials:\n\n``` yaml\n    service: tvass\n    \n    provider:\n      name: aws\n      runtime: nodejs6.10\n      environment:\n        PUSHER_APP_ID: your-app-id\n        PUSHER_APP_KEY: your-app-key\n        PUSHER_APP_SECRET: your-app-secret\n        PUSHER_APP_CLUSTER: your-app-cluster\n    \n    functions:\n      home:\n        handler: handler.home\n        events:\n        - http:\n            path: /\n            method: get\n            cors: true\n      webhook:\n        handler: handler.webhook\n        events:\n        - http:\n            path: /webhook\n            method: post\n            cors: true      \n```\n\n\nNote the `environment` section we added under the `provider`. It’s used for specifying environment variables that all our functions will have access to. You’ll need to log in to your [Pusher dashboard](http://dashboard.pusher.com/) and create a new app if you haven’t already done so. Obtain your app credentials from your dashboard and replace the stubs above with the actual values.\n\n## Deploying\n\nFirst, you’ll need to configure the serverless CLI to use your AWS credentials. Serverless has published a guide on that (in [video](https://www.youtube.com/watch?v=HSd9uYj2LJA) and [text](https://serverless.com/framework/docs/providers/aws/guide/credentials/) formats).\n\nNow run `serverless deploy` to deploy your service.\n\nWe’ll need the URLs of our two routes. Look at the output after `serverless deploy` is done. Towards the bottom, you should see the two URLs listed, something like this:\n\n```\n     GET - https://xxxxxxxxx.execute-api.yyyyyyy.amazonaws.com/dev/\n     POST - https://xxxxxxxxx.execute-api.yyyyyyy.amazonaws.com/dev/webhook\n```\n   \n\nTake note of those two—we’ll need them in a bit.\n\nOne last thing: you’ll need to enable **Channel existence** webhooks for our Pusher app. On your Pusher app dashboard, click on the “Webhooks” tab and select the “channel existence” radio button. In the text box, paste the URL of the webhook you obtained above, and click “Add”. Good to go!\n\nNow visit the URL  of the home page (the GET route) in a browser. Open it in multiple tabs and you should see the number of visitors go up or down as you open and close tabs.\n\n**Note:** you might observe a small bug in our application: the visitors’ count always shows up as 0 when the page is loaded, before getting updated. This is because you can’t actually persist variables in memory across Lambda Functions, which is what we’re trying to do with our `visitorsCount` variable. We could fix it by using an external data store like Redis or AWS S3, but that would add unnecessary complexity to this demo.\n\n## Conclusion\n\nIn this article, we’ve built a simple demo showing how we can integrate realtime capabilities in a serverless app. We could go on to display the number of actual users by filtering by IP address. If our app involved signing in, we could use [presence channels](https://pusher.com/docs/client_api_guide/client_presence_channels) to know **who** exactly was viewing the page. I hope you’ve gotten an idea of the possibilities available with serverless and realtime. Have fun trying out new implementations.","metaTitle":"Build a serverless presence counter with Node.js","metaDescription":"A tutorial showing you how to generate serverless realtime presence counter in a web app, using Node.js, AWS Lambda and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"F4X1vbrUM8AYqGOk4y4qO","type":"Entry","createdAt":"2018-03-14T17:33:24.754Z","updatedAt":"2018-03-22T15:22:22.744Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a social poll app with counter using Node.js","url":"social-poll-realtime-counter","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/pollser","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N8l3o0yD6QK2ooI2ME8wW","type":"Entry","createdAt":"2018-02-12T15:09:06.190Z","updatedAt":"2018-02-26T12:31:10.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Polls","url":"live-polls","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WBKKiARVKggKEsq8gSuOS","type":"Entry","createdAt":"2018-02-12T15:10:05.476Z","updatedAt":"2018-02-26T12:31:10.466Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Counter","url":"live-counter","type":"use case"}}],"reviewDate":"2018-03-13","description":"A short tutorial showing how to quickly build a poll app using Node.js, with realtime vote count updates.","prerequisite":"This tutorial assumes you have Node.js, MongoDB and Express installed.","content":"Over the years, web apps have come a long way, incorporating various technologies and techniques to create a more engaging experience for the user. Realtime technologies are one such improvement. They provide a powerful means of transforming an app into a social activity.\n\nIn this article, we’ll build a polls app. The home page of our app will display a list of polls. A visitor can vote on as many polls as they wish from the home page. Each time a new vote is cast on any poll, the number of votes for the different choices in that poll will update in realtime. Here’s a demo of the app:\n\n![building-realtime-polls-nodejs-demo](//images.ctfassets.net/1es3ne0caaid/20MtO6eN5GEaW6UOAEE8Kw/053464117c55b3cbe0b7848a4b48ba19/building-realtime-polls-nodejs-demo.gif)\n\nYou can check out the source code of the completed application [on GitHub](https://github.com/shalvah/pollser).\n\n## Set up the project\nThis tutorial assumes you have Node.js and MongoDB installed. We’ll be using Express, a popular lightweight Node.js framework. Let’s get started by using the express application generator:\n\nIf you don't already have it installed:\n```\nnpm install express-generator -g\n```\n\nCreate a new express app with view engine set to Handlebars (hbs)\n```\nexpress --view=hbs pollser\ncd pollser \u0026\u0026 npm install\n```\n\nThen we’ll add our dependencies:\n```\nnpm install --save dotenv mongoose pusher\n```\n\nHere’s a breakdown of what each module is for:\n\n- We’re using MongoDB for our data store, so we’ll use Mongoose to map our models (JavaScript objects) to MongoDB documents.\n- We need Pusher to talk to Pusher’s APIs.\n- Lastly, dotenv is a small package that helps us load our private configuration variables (namely our Pusher app credentials) from a .env file. \n\nWe’ll store our polls in a polls collection. Here’s an example of what a single item in this collection will look like:\n\n``` javascript\n    {\n      \"topic\": \"Should dogs be allowed to fly?\"\n      \"choices\": [\n        {\n          \"value\": \"Yes\",\n          \"votes\": 2,\n          \"id\": 0\n        },\n        {\n          \"value\": \"No\",\n          \"votes\": 7,\n          \"id\": 1\n        },\n        {\n          \"value\": \"Perhaps\",\n          \"votes\": 17,\n          \"id\": 2\n        }\n      ]\n    }\n```\n\nLet’s define our Poll model. We’ll put this in `models/poll.js`:\n\n``` javascript\n    let mongoose = require('mongoose');\n\n    let Poll = mongoose.model('Poll', {\n        topic: String,\n        choices: [\n            {\n                value: String,\n                votes: Number\n            }\n        ]\n    });\n\n    module.exports = Poll;\n```\n\nNext up, let’s populate our database with some fake polls. Create a file called `seed.js` in the bin directory, with the following content:\n\n``` javascript\n    require('mongoose').connect('mongodb://localhost/pollser');\n\n    const topics = [\n        \"Should dogs be allowed to fly?\",\n        \"Should doors be shut at night?\",\n        \"Should developers use IDEs?\",\n        \"Should cars have four wheels?\",\n        \"Should humans be allowed to wear shoes?\"\n    ];\n    let Poll = require('../models/poll');\n\n    // empty the collection first\n    Poll.remove({})\n        .then(() =\u003e {\n            let polls = [];\n            for (let i = 0; i \u003c 5; i++) {\n                polls.push({\n                    topic: topics[i],\n                    choices: [\n                        {\n                            value: \"Yes\",\n                            votes: Math.round(Math.random() * 20)\n                        },\n                        {\n                            value: \"No\",\n                            votes: Math.round(Math.random() * 20)\n                        },\n                        {\n                            value: \"I really don't care\",\n                            votes: Math.round(Math.random() * 20)u\n                        }\n                    ]\n                });\n            }\n            return Poll.create(polls);\n        })\n        .then(() =\u003e {\n            process.exit();\n        })\n        .catch((e) =\u003e {\n            console.log(e);\n            process.exit(1);\n        });\n```\n\nRun the seed using node (remember to start your MongoDB server by running `mongod` first):\n\n```\nnode bin/seed.js\n```\n\n## Retrieving and rendering polls\n\nLet’s add our MongoDB connection setup to our app.js file, so the connection gets created when our app starts.\n\n``` javascript\n    // below this line:\n    var app = express();\n\n    // add this\n    require('mongoose').connect('mongodb://localhost/pollser');\nNext up is our route. Here, we’ll retrieve all polls from the database and pass them to the view. Replace the code in routes/index.js with this:\n\n    let router = require('express').Router();\n\n    let Poll = require('./../models/poll');\n\n    router.get('/', (req, res, next) =\u003e {\n        Poll.find().exec((err, polls) =\u003e {\n            res.render('index', { polls: polls });\n        });\n    });\n\n    module.exports = router;\n```\n\nLet’s build our view. We’ll implement a simple interface that shows each poll as a Bootstrap panel with the choices listed in the panel body, and the number of votes for each choice shown at the right edge.\n\nReplace the code in your `views/layout.hbs` with this:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang='en'\u003e\n    \u003chead\u003e\n        \u003ctitle\u003e{{title}}\u003c/title\u003e\n        \u003clink rel='stylesheet' href='/stylesheets/style.css'/\u003e\n        \u003clink rel='stylesheet' href='//netdna.bootstrapcdn.com/bootstrap/3.0.1/css/bootstrap.min.css'/\u003e\n    \u003c/head\u003e\n\n    \u003cbody\u003e\n    \u003cdiv class=\"container\"\u003e\n        {{{body}}}\n    \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nPut this in your views/index.hbs:\n\n``` html\n    \u003cdiv class=\"row\"\u003e\n\n        {{#each polls }}\n            \u003cdiv class=\"col-md-6\"\u003e\n                \u003cform onsubmit=\"vote(event);\" id=\"{{this._id}}\"\u003e\n                    \u003cdiv class=\"panel panel-primary\"\u003e\n                        \u003cdiv class=\"panel-heading\"\u003e\n                            \u003ch3 class=\"panel-title\"\u003e\n                                \u003cspan class=\"glyphicon glyphicon-arrow-right\"\u003e\u003c/span\u003e{{ this.topic }}\n                            \u003c/h3\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"panel-body\"\u003e\n                            \u003cul class=\"list-group\"\u003e\n                                {{#each this.choices }}\n                                    \u003cli class=\"list-group-item\"\u003e\n                                        \u003cdiv class=\"radio\"\u003e\n                                            \u003clabel\u003e\n                                                \u003cinput type=\"radio\" name=\"optionsRadios\" value=\"{{@index}}\"\u003e\n                                                {{ this.value }}\n                                                \u003cdiv class=\"alignright\" id=\"vote-count-{{../id}}-{{@index}}\"\u003e{{ this.votes }}\u003c/div\u003e\n                                            \u003c/label\u003e\n                                        \u003c/div\u003e\n                                    \u003c/li\u003e\n                                {{/each}}\n                            \u003c/ul\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"panel-footer\"\u003e\n                            \u003cinput type=\"submit\" id=\"vote-btn-{{this.id}}\" class=\"btn btn-primary btn-sm\" value=\"Vote\"\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n        {{/each}}\n    \u003c/div\u003e\n```\n\nLastly, replace the contents of your public/stylesheets/style.css with this:\n\n``` css\n    body {\n        padding: 50px;\n        margin-top: 20px;\n        font: 14px \"Lucida Grande\", Helvetica, Arial, sans-serif;\n    }\n\n    .panel-body:not(.two-col) {\n        padding: 0px\n    }\n\n    .glyphicon {\n        margin-right: 5px;\n    }\n\n    .glyphicon-new-window {\n        margin-left: 5px;\n    }\n\n    .panel-body .radio, .panel-body .checkbox {\n        margin-top: 0px;\n        margin-bottom: 0px;\n    }\n\n    .panel-body .list-group {\n        margin-bottom: 0;\n    }\n\n    .margin-bottom-none {\n        margin-bottom: 0;\n    }\n\n    .panel-body .radio label, .panel-body .checkbox label {\n        display: block;\n    }\n\n    .alignright {\n        float: right;\n    }\n```\n\nLet’s implement the voting logic. Laying out the steps we need to perform:\n\nA choice is selected on a certain poll, and the Vote button is clicked. This submits the containing form. \n\nOur registered onsubmit handler retrieves the choice selected and the poll ID from the form and makes an AJAX call to our vote endpoint. The handler also updates the UI to reflect the increased number of votes. \n\nThe vote endpoint finds the poll with the specified ID in the database, and increments the number of votes corresponding to the selected choice by 1.\nLet’s define our event handler. We’ll pull in Axios for API calls. Add this to your `index.hbs`:\n\n``` javascript\n    \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        var vote = function (event) {\n            event.preventDefault();\n            var pollId = event.target.id;\n            var choice = event.target.optionsRadios.value;\n            axios.post('/' + pollId + '/vote', {choice: choice});\n\n            // disable the button, so a user san't vote twice\n            document.querySelector('#vote-btn-' + pollId).disabled = true;\n            var voteCount = document.querySelector('#vote-count-' + pollId + '-' + choice);\n            voteCount.textContent++;\n            voteCount.style.color = 'green';\n            voteCount.style.fontWeight = '900';\n        };\n    \u003c/script\u003e\n```\n\nFor the vote endpoint, add this route in your routes/index.js:\n\n``` javascript\n    router.post('/:pollId/vote', (req, res, next) =\u003e {\n        const choice = req.body.choice;\n        const identifier = `choices.${choice}.votes`;\n        Poll.update({_id: req.params.pollId}, {$inc: {[identifier]: 1}}, {}, (err, numberAffected) =\u003e {\n            res.send('');\n        });\n\n    });\n```\n\nIn this code snippet, we find the poll with the specified ID then increment the number of votes associated with the specified choice using MongoDB’s $inc operator (you can read more about that here).\n\nYou can start your app by running npm start. If you select a choice and click “Vote”, you should see the number of votes displayed for your choice increase.\n\n## Messaging with Pusher \n\nThe final thing to do is modify our vote endpoint so it sends out a broadcast over Pusher after incrementing the number of votes for the poll. We’ll also need to modify our frontend so that it listens for these broadcasts and updates the UI accordingly.\n\nFirst off, create a Pusher account if you don’t already have one (it’s free). Then create an app and obtain your app credentials from the app dashboard. Create a file named `.env` in the root of your project with the following content:\n\n```\n    PUSHER_APP_ID=YOUR_APP_ID\n    PUSHER_APP_KEY=YOUR_APP_KEY\n    PUSHER_APP_SECRET=YOUR_APP_SECRET\n    PUSHER_APP_CLUSTER=YOUR_APP_CLUSTER\n```\n\nReplace YOUR_APP_ID, YOUR_APP_KEY, YOUR_APP_SECRET, and YOUR_APP_CLUSTER with your Pusher app ID, app key, app secret and cluster respectively.\nThen add this line to the top of your app.js. This is to setup dotenv so it pulls environment variables from our .env file:\n\n``` javascript\n    require('dotenv').config();\n```\n\nModify your `routes/index.js` so the vote endpoint looks like this:\n\n``` javascript\n    router.post('/:pollId/vote', (req, res, next) =\u003e {\n        const choice = req.body.choice;\n        const identifier = `choices.${choice}.votes`;\n        Poll.update({_id: req.params.pollId}, {$inc: {[identifier]: 1}}, {}, (err, numberAffected) =\u003e {\n            let Pusher = require('pusher');\n            let pusher = new Pusher({\n                appId: process.env.PUSHER_APP_ID,\n                key: process.env.PUSHER_APP_KEY,\n                secret: process.env.PUSHER_APP_SECRET,\n                cluster: process.env.PUSHER_APP_CLUSTER\n            });\n\n            let payload = { pollId: req.params.pollId, choice: choice };\n            pusher.trigger('poll-events', 'vote', payload, req.body.socketId);\n\n            res.send('');\n        });\n\n    });\n```\n\nYou’ll notice we include a fourth parameter in our call to pusher.trigger. This is the socket ID, a unique identifier that Pusher assigns to each client connection. This means that every browser window where our voting page is open will have its own socket ID. By passing the socket ID to pusher.trigger, we are ensuring that the client with that ID will not get notified. This is what we want, since that client already updated its view after the Vote button was clicked.\n\nNow, let’s add our listener to our index.hbs:\n\n``` javascript\n    \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        var pusher = new Pusher('your_app_key', { cluster: 'your_app_cluster' });\n        var socketId;\n\n        // retrieve the socket ID once we are connected\n        pusher.connection.bind('connected', function() {\n            socketId = pusher.connection.socket_id;\n        });\n\n        pusher.subscribe('poll-events')\n                .bind('vote', function (data) {\n                    var pollId = data.pollId;\n                    var choice = data.choice;\n                    var voteCount = document.querySelector('#vote-count-' + pollId + '-' + choice);\n                    voteCount.textContent++;\n                    // we'll flash the colour for a moment\n                    var color = voteCount.style.color;\n                    setTimeout(function () {\n                        voteCount.style.color = color;\n                    }, 2000);\n                    voteCount.style.color = 'green';\n                });\n    \u003c/script\u003e\n```\n\nRemember to replace your_app_key with your Pusher app key and your_app_cluster with your app cluster.\n\nWe’ll also have to add the socket ID to the POST request we make to the vote endpoint. Modify your vote handler so it looks like this:\n\n``` javascript\n    var vote = function (event) {\n        event.preventDefault();\n        var pollId = event.target.id;\n        var choice = event.target.optionsRadios.value;\n\n        // we add the socket ID to our POST data\n        axios.post('/' + pollId + '/vote', {choice: choice, socketId: socketId});\n        document.querySelector('#vote-btn-' + pollId).disabled = true;\n        var voteCount = document.querySelector('#vote-count-' + pollId + '-' + choice);\n        voteCount.textContent++;\n        voteCount.style.color = 'blue';\n        voteCount.style.fontWeight = '900';\n    };\n```\n\nStart up your MongoDB server by running mongod, then serve your app with npm start. \n\nNow visit your app on http://localhost:3000 in two browser windows. You should see that as you vote for an option in one window, the change shows up in the other too.\n\n## Conclusion\nRealtime technologies are a great way to make your app more of a social activity. By seeing the interactions of other users in realtime, users get to feel that they are part of a larger community. In this article, we’ve used Pusher to create a basic social polling app.","metaTitle":"Build a social poll app using Node.js","metaDescription":"Use Node.js and MongoDB to create a polling app with realtime vote count updates."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2uXH4790aAKiQUMswwWcmm","type":"Entry","createdAt":"2018-02-28T12:22:30.031Z","updatedAt":"2018-02-28T16:26:48.079Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Making Angular 5 realtime with WebSockets","url":"angular-realtime","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/angular5-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WBKKiARVKggKEsq8gSuOS","type":"Entry","createdAt":"2018-02-12T15:10:05.476Z","updatedAt":"2018-02-26T12:31:10.466Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Counter","url":"live-counter","type":"use case"}}],"reviewDate":"2018-02-23","description":"Build an app with realtime features in Angular 5 and Pusher.","prerequisite":"A basic understanding of Angular 5 and Node.js is needed to follow this tutorial.","content":"The demand for realtime functionality in applications these days has grown tremendously. People want to see how users interact with their applications in realtime. Here comes Pusher, allowing you to add realtime functionality to your application by using concepts such as events and channels. In this article, we are going to look at how to add realtime functionality to your Angular 5 application. \n\n\n## Introduction\n\nWe are going to make an application that gives realtime feedback when a picture is liked. In other words, you get to see in realtime when users like a picture - interesting, right? To do this, we will be using [Angular](https://angular.io) 5 and [Pusher](https://pusher.com) API. \n\n![angular-realtime-likes](//images.contentful.com/1es3ne0caaid/6DOzL2ede8i4E6KMYUA8sy/3b027d45e96b87e142bcb45b3b973c0a/angular-realtime-likes.png)\n\n## Getting started\n\nTo get started, you need to make sure your have [Node](https://nodejs.org) and [NPM](https://npmjs.com) installed on your machine. You can confirm you installation by running:\n\n```\n    npm --version\n    node --version\n```\n\nIf you get version numbers as results then you have them installed. Node 6+ and NPM 4+ should be your target.\n\n## Building the Angular 5 application\n\nNow we are not going to dwell too much on the intricacies of building an Angular application, rather, we will be more concerned about adding realtime functionality to the application itself.\n\nTo create your Angular application, you need to ensure that you have Angular 5 installed on your machine. You can confirm your installation by running:\n\n```\n    ng --version\n```\n\nIf you don’t have Angular installed or your version is less than 1.2, run this command in your terminal:\n\n```\n    npm install -g @angular/cli\n```\n\nFor more information about Angular basics, head [here](https://angular.io).\n\nWe can now create our application by running: \n\n```\n    ng new angular5-pusher\n```\n\nAfter running this, we get a basic Angular starter project which we are going to build upon.\n\n\n## App component \n\nNow the view of the application is pretty simple. We have an image, a button to like the image and the count of images that have been liked. The `app.component.html` file looks like this:\n\n```\n    \u003cdiv class=\"main-app\"\u003e\n      \u003ch1\u003e\n        {{ title }}!\n      \u003c/h1\u003e\n      \u003cimg width=\"300\" alt=\"Pusher Logo\" src=\"../assets/pusher.svg\" /\u003e\n      \u003cdiv class=\"like\"\u003e\n        \u003cdiv style=\"margin-right: 1rem\"\u003e\n          \u003ch2\u003e{{ likes }} likes\u003c/h2\u003e\n        \u003c/div\u003e\n        \u003cbutton class=\"btn btn-lg btn-success\" (click)=\"liked()\"\u003eLike Image\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nWe can see from the above that the `buttonClick` event has been tied to a function called `liked()` which we will take a look at now.\n\nIn our `app.component.ts` file, we have the following: \n\n```\n    import { Component, OnInit } from '@angular/core';\n    //..\n    \n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    \n    export class AppComponent implements OnInit {\n      title = 'Pusher Liker';\n      likes: any =  10;\n      \n      constructor() {\n        // the pusher service will be injected as part of the constructor later\n      }\n      ngOnInit() {\n        // ..\n      }\n      // add to the number of likes to the server\n      liked() {\n        this.likes = parseInt(this.likes, 10) + 1;\n        // ..\n      }\n    }\n```\n\nNow we can see when we examine the component that we specify the `title` and the number of `likes` for starters. \n\n**NB:** In a real world application, you will want to make a request to your backend server to get the actual number of likes instead of  using static data.\n\nWe can also see that we plan on injecting a `pusherService` in the constructor of our app component. We are going to explain more about this in the next section.\n\n## Adding Pusher to your application\n\nAt this point, we have our application that allows us to like pictures, but other users don’t get realtime feedback as to the number of likes the picture actually has. In comes [Pusher](https://pusher.com) to save the day. Pusher allows you to add realtime functionality to your application without you having to stress so much about the logic of making this work.\n\nAll you need to do is to  `subscribe` to a channel and then `listen` for `events` - in simpler terms it’s like turning on a TV to a football match (channel ) and then waiting for a team to score a goal ( event ).\n\nNow lets see how to add this to our existing Pusher Liker Application .To use Pusher with Angular, we first need to install and load Pusher’s client library:\n\n```\n    npm install --save pusher-js\n```\n\nNow that we have successfully installed the library, the next thing we need to do is to add it as one of the third party scripts that will be loaded by Angular when our page is being loaded.\n\nIn the `.angular-cli.json` we include the following:\n\n\n    //...\n    \n    \"scripts\": [\"../node_modules/pusher-js/dist/web/pusher.min.js\"]\n    \n    //...\n\nNow lets get to using the pusher client.\n\nEarlier on, we spoke about the `PusherService` and now we are going to see how it works. In angular, there is a concept called `services` - which, as the name suggests,  helps you to do one thing really well. \n\nWe create our `PusherService` by running the command:\n\n```\n    ng generate service Pusher\n```\n\nThis creates the `pusher.service.ts`  and `pusher.service.spec.``ts` files. We are only going to be concerned with the `pusher.service.ts`\n\nAt he top of the `pusher.service.``ts` file we declare our Pusher constant so that Angular knows that we know what we are doing, and we are going to use the `Pusher` class from an external script which we loaded earlier:\n\n```\n    // pusher.service.ts \n    declare const Pusher: any;\n    // ...\n```\n\n \n Then, we import the necessary classes we are going to need:\n \n```\n    // .... pusher.service.ts\n    import { Injectable } from '@angular/core';\n    import { environment } from '../environments/environment';\n    import { HttpClient } from '@angular/common/http';\n    // .....\n```\n \nIf you used older versions of Angular, the new `HttpClient` may seem strange to you because it was just introduced with this new version to make life easier for Angular developers. With this new `HttpClient`, responses are defaulted to `JSON` and interceptors are now being used for easier error handling. You can read more about it [here](https://angular.io/api/common/http/HttpClient).\n\nWe also included the `environment` class, which contains some enviroment variables for pusher to work. The `enviroment.ts` file looks like this:\n\n```\n    // ... environment.ts \n    export const environment = {\n      production: false,\n      pusher: {\n        key: 'PUSHER_API_KEY',\n        cluster: 'PUSHER_CLUSTER',\n      }\n    };\n```\n\nThese details can be obtained from your Pusher app [dashboard](https://dashboard.pusher.com/).\n\nTo create a new app:\n1. Click “Create New App” from the left sidebar.\n2. Configure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n  \n![angular-realtime-create-app](//images.contentful.com/1es3ne0caaid/4xyhbHkzOEWwYACWQMUsy8/77b6407f347fd38dd348ec6e9478c4b1/angular-realtime-create-app.png)\n \n Now, back to our `pusher.service.``ts` file:\n \n```\n    //...pusher.service.ts\n    @Injectable()\n    export class PusherService {\n      pusher: any;\n      channel: any;\n      constructor(private http: HttpClient) {\n        this.pusher = new Pusher(environment.pusher.key, {\n          cluster: environment.pusher.cluster,\n          encrypted: true\n        });\n        this.channel = this.pusher.subscribe('events-channel');\n      }\n      \n      like( num_likes ) {\n        his.http.post('http://localhost:3120/update', {'likes': num_likes})\n        .subscribe(data =\u003e {});\n      }\n    }\n```\n \nIn the constructor for the `PusherService` , we included the `HttpClient` and  then `subscribed` to the `events-channel` . We also have another function that makes a `POST` request to our backend server with the number of likes as part of the `body`  of the request when the `like` button is clicked. \n\n\u003e NB : The implementation details of our  backend server will be built later in the article\n\nNow we will go back to our `app.component.``ts` file to see how we factor in the new Pusher service:\n\n```\n    //-- app.component.ts\n    import { Component, OnInit } from '@angular/core';\n    import { PusherService } from './pusher.service';\n    \n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    export class AppComponent implements OnInit {\n      title = 'Pusher Liker';\n      likes: any =  10;\n      constructor(private pusherService: PusherService) {\n      }\n      ngOnInit() {\n        this.pusherService.channel.bind('new-like', data =\u003e {\n          this.likes = data.likes ;\n        });\n      }\n      // add to the number of likes to the server\n      liked() {\n        this.likes = parseInt(this.likes, 10) + 1;\n        this.pusherService.like( this.likes );\n      }\n    }\n```\n\nIn the above, we import the `pusherService` and then add it to our constructor. Now, when the component is created, we then bind the `pusherService` to the `new-like` event and we update the number of likes with the new number of likes that we get.\n\nNow you may be wondering, “it’s cool that we can now tell when the number of likes have increased and the update them, but what when someone actually clicks the button, what triggers the event?”\n\nAs we can see in the `liked()` function above, the `pusherService.like()` is also called to help make the request to the backend server to actually trigger the like event. \n\nNow that our front-end is ready, we can run the application by running:\n\n```\n    npm start\n```\n\n![angular-realtime-demo](//images.contentful.com/1es3ne0caaid/zuNaz7pMFaK8oeuey4As8/ef9d1369c3af410d0afc5d88a2e0be5f/angular-realtime-demo.gif)\n\n## Building the backend Server\n\nNow, we’ll take a quick look at the backend server that triggers the event and how it works. In the project directory we create a folder called `server` and in there is where we do all the work:\n\n```\n    mkdir server\n```\n\nIn the `server` directory, we run:\n\n```\n    npm init\n```\n\nAnd then we install the necessary modules we are going to need:\n\n```\n    npm install --save cors pusher express body-parser dotenv\n```\n\nOnce that’s done, we can now create our `server.js` in the same directory \n\nIn our `server.js` file, we do the following: \n\n### Import Node modules\n\n```\n    // -------------------------------\n    // Import Node Modules\n    // -------------------------------\n    require(\"dotenv\").config();\n    const cors = require(\"cors\");\n    const Pusher = require(\"pusher\");\n    const express = require(\"express\");\n    const bodyParser = require(\"body-parser\");\n```\n\n### Create app and load Middlewares\n\n```\n    // ------------------------------\n    // Create express app\n    // ------------------------------\n    const app = express();\n    // ------------------------------\n    // Load the middlewares\n    // ------------------------------\n    app.use(cors());\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n```\n\n### Create Pusher client\n\n```\n    // ....\n    const pusher = new Pusher({\n        appId: `${process.env.PUSHER_APP_ID}`,\n        key: `${process.env.PUSHER_API_KEY}`,\n        secret: `${process.env.PUSHER_API_SECRET}`,\n        cluster: `${process.env.PUSHER_APP_CLUSTER}`,\n        encrypted: true\n    });\n```\n\nNow add a `.env` file at the root of the `server`  folder with the following lines:\n\n```\n    PUSHER_APP_ID=[PUSHER_APP_ID]\n    PUSHER_API_KEY=[PUSHER_API_KEY]\n    PUSHER_API_SECRET=[PUSHER_API_SECRET]\n    PUSHER_APP_CLUSTER=[PUSHER_APP_CLUSTER]\n```\n\nThese details for the Pusher client can be obtained from your [Pusher dashboard](https://dashboard.pusher.com/).\n\n### Create application routes\n\n```\n    // -------------------------------\n    // Create app routes\n    // -------------------------------\n    app.post(\"/update\", function(req, res) {\n        // -------------------------------\n        // Trigger pusher event\n        // ------------------------------\n        pusher.trigger(\"events-channel\", \"new-like\", {\n          likes : `${req.body.likes}`\n        });\n    });\n```\nThis application only has one route that triggers the `new-like` event to the `events-channel` which our Angular frontend listens for and then updates accordingly.\n\n### Assign application\n\n```\n    app.listen(\"3120\");\n    console.log(\"Listening on localhost:3120\");\n```\n\nNow, the backend server will be run at `localhost:3120`.\n\n## Conclusion\n\nIn this article we have seen how to add realtime functionality to an Angular 5 application. The use cases for this are endless. You can give users realtime feedback as they interact with your applications — Twitter has a feature similar to this where you can actually see the number of likes, replies and retweets in realtime. \n\nThe ball is in your court now to implement that realtime feature you know your users will love to have.","metaTitle":"Making Angular 5 realtime with WebSockets","metaDescription":"Build an application that gives realtime feedback when a picture is liked with Angular 5 and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"18eJwYM8iSyw20owAk2K22","type":"Entry","createdAt":"2018-02-28T12:47:47.749Z","updatedAt":"2018-02-28T12:47:47.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime counter using Kotlin","url":"counter-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5HjouOQyOIwCcyuswYcIuc","type":"Entry","createdAt":"2018-02-16T18:20:46.412Z","updatedAt":"2018-04-23T13:19:32.814Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Perfect Makanju","url":"perfect-makanju","email":"damiperfect@gmail.com","twitter":"https://twitter.com/perfectmak","github":"https://github.com/perfectmak","guestWriter":true}}],"projectRepo":"https://github.com/perfectmak/kotlin-realtime-counter-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WBKKiARVKggKEsq8gSuOS","type":"Entry","createdAt":"2018-02-12T15:10:05.476Z","updatedAt":"2018-02-26T12:31:10.466Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Counter","url":"live-counter","type":"use case"}}],"reviewDate":"2017-11-09","description":"Counters are always useful for any app. In this tutorial, we will buld a live click counter using Kotlin.","prerequisite":"A basic understanding of Kotlin is needed to follow this tutorial.","content":"It is important to show realtime updates of what is happening in an application, and one form of this is a realtime counter. A realtime counter can be used to show users of an app how other users are interacting with their content. For example, Instagram uses a realtime counter to show when viewers like a live video. This makes users of the application feel more engaged as they will be getting immediate feedback when things change.\n\nIn this tutorial, I’ll show you how to use Pusher to create a realtime counter in Kotlin. We will be creating a simple Android application with a counter showing how many users have clicked on a button. This click count also updates in realtime when other users click on it. Below is a GIF of how the application will work:\n\n![counter-kotlin-demo](//images.contentful.com/1es3ne0caaid/4RFWmypH1mE4guKcMYkw8M/329b583077cae82ad6cda5e12cb8b1d8/counter-kotlin-demo.gif)\n\nWe will be using Kotlin to develop both the realtime web server and the Android application, so a basic working knowledge of Kotlin and Android development will be required to follow this tutorial.\n\n\n## Overview\n\nWe will build a web server that keeps track of how many times a button has been clicked. The web server will also expose an endpoint which the Android application can call to send click events, the web server would then increment the click count and send a broadcast using Pusher to all clients currently subscribed to the click event. \n\nSo based on the above, this post is going to be in two sections:\n\n1. Building the realtime server using Kotlin\n2. Building the Android application using Kotlin\n\nSo lets get started.\n\n\n### Create a Pusher account\n\nBefore we get started, you would need to create a Pusher application. Go on to [Pusher](https://pusher.com) and create an account, but if you already have an account, just login. Then, create a new app from the dashboard and store the apps keys as we would be using them later in this post.\n\n### Building the realtime server\n\nKotlin is a very versatile language and one of its interesting features is its ability to be compiled to Javascript. We are going to use this feature to build a Kotlin server application that would be run with Node.js.\n\nIn order to compile Kotlin to Javascript and run on Node.js, you would need to have [Node.js](https://nodejs.org/en/download/) and [Gradle](https://gradle.org/install/) installed on your computer. The remaining part of this tutorial will assume you have both installed on your machine.\n\nFirst, run the command:\n\n```\n    npm init\n```\n\nAfter entering the appropriate setup information, you should have your `package.json` file created for you in your directory. \nNext, create a `build.gradle` file in the same directory and copy the following into the file:\n\n```\n    group 'kotlin-realtime-counter'\n    version '1.0'\n    buildscript {\n      ext.kotlin_version = '1.1.3'\n        repositories {\n          mavenCentral()\n          jcenter()\n        }\n      dependencies {\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n      }\n    }\n    apply plugin: 'kotlin2js'\n    repositories {\n      mavenCentral()\n      jcenter()\n    }\n    dependencies {\n      compile \"org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version\"\n    }\n    compileKotlin2Js.kotlinOptions {\n      moduleKind = \"commonjs\"\n      outputFile = \"build/app.js\"\n    }\n```\n\nThis `build.gradle` file would compile our Kotlin code into Javascript to run. Some things to note are:\n\n1. You can change the `group` and `version` to something that suits your project. In this case it is set to `kotlin-realtime-counter`.\n2. The `outputFile`  option at the bottom of the file is used to set where the location of the Javascript file that our Kotlin code will be compiled into. In this case it would be compiled into the `build` directory inside an `app.js` file.\n\nNow in order for this build to work, all the Kotlin code needs to be put in the directory `src/main/kotlin`. This can be created with the following command:\n\n```\n    mkdir -p src/main/kotlin\n```\n\nAfter executing the above command, your project directory structure should look like this:\n\n```\n    |- src\n      |- main\n        |- kotlin\n    |- build.gradle\n    |- package.json\n```\n\nSo, let’s get down to coding our server. We need to install the following Node.js libraries using npm:\n\n```\n    npm install --save kotlin express pusher\n```\n\nThis will install the Kotlin.js library needed for our compiled Javascript code to work. It will also be installing express for creating our server and the Pusher library for making realtime event broadcasts.\n\nNow, create a file named `ClickCount.kt` inside the `src/main/kotlin` folder, and write the following code in it:\n\n```\n    data class ClickCount(val count: Int)\n```\n\nThis `ClickCount` class will be used as a data object to encapsulate information about the number of times a click has be recorded. It’s importance will be seen later in the post.\n\nNext, create a file named `App.kt` inside the `src/main/kotlin` folder. In the `App.kt` file, we need to first define some external functions and classes that would exist normally in the Node.js environment. This way, Kotlin would know the signature of these functions and not throw an error when they are being used.\n\n```\n    external fun require(module: String): dynamic\n    \n    @JsModule(\"pusher\")\n    external class Pusher(config: Any) {\n        fun trigger(channel: String, event: String, data: Any)\n    }\n```\nHere we define the following functions:\n\n- require(): This is declaring the standard nodejs require function used to import modules. We will be using it later to import the express library. The `[dynamic](https://kotlinlang.org/docs/reference/dynamic-type.html)` type only exists for Kotlin codes targeting Javascript. The most peculiar feature of `dynamic` is that we are allowed to call any property or function with any parameters on it, hence giving us the dynamic typed feature of Javascript.\n- Pusher: Here we are declaring the Pusher class and the `Pusher.trigger()` function we will be using later on. The `[@JsModule](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-js-module/index.html)` indicates that this class should be imported from the `pusher` library we added as a dependency earlier.\n\n\n\u003e External functions and class declarations are generally used to declare functions or objects that exists on the Javascript global object. \n\u003e \n\u003e External class declarations having the `@JsModule` are typically used to declare classes of external modules that need to be instantiated using the `new` keyword, as Kotlin doesn’t support the `new` keyword.\n\nNext, we initialize our server and Pusher configuration values.\n\n```\n    val express = require(\"express\")\n    val pusherConfig  = object {\n        val appId = \"YOUR_PUSHER_APP_ID\"\n        val key = \"YOUR_PUSHER_KEY\"\n        val secret = \"YOUR_PUSHER_SECRET\"\n        val cluster = \"YOUR_PUSHER_APP_CLUSTER\"\n        val encrypted = true\n    }\n    val clickChannel = \"click-channel\"\n    val clickEvent = \"click-event\"\n    var currentClickCount = 0\n```\n\nYou would need to update your `pusherConfig` object values with the keys you got from creating a Pusher application earlier. The `currentClickCount` variable will be used to keep track of the number of times a click has been recorded.\n\nNext, we implement the main function that would be run when our code is executed.\n\n```\n    fun main(args: Array\u003cString\u003e) {\n        val app = express()\n        val pusher = Pusher(pusherConfig)\n        \n        app.get(\"/counts\", { _, res -\u003e\n            res.json(ClickCount(currentClickCount))\n        })\n        app.post(\"/clicks\", { _, res -\u003e\n            currentClickCount++\n            // broadcast new ClickCount\n            pusher.trigger(clickChannel, clickEvent, ClickCount(currentClickCount))\n            res.status(200).send()\n        })\n        \n        app.listen(9999, {\n            println(\"Listening on port 9999\")\n        })\n    }\n```\n\nHere we initialize the `express` server and create a pusher object using the `pusherConfig` declared earlier. We then expose two endpoints:\n\n1. `GET /counts`: HTTP GET requests will be sent to this endpoint to get the current click counts recorded so far. The `currentClickCount` is then returned as a JSON object of `ClickCount`.\n2. `POST /clicks`: POST requests will be made to this endpoint to indicate that the button has been clicked. This will record the click count by incrementing the `currentClickCount` and then send a broadcast of the updated `currentClickCount` using pusher to all listeners of the `clickEvent` on the `clickChannel`.\n\nAnd lastly in the `main()` function, we expose the `express` server to listen on port `9999`.\n\nNow the server code is ready and we just need to compile to Javascript so we can run with node. To build, run the following Gradle command in the same directory containing the `build.gradle` file created earlier:\n\n```\n    gradle build\n```\n\nOn completion, this would generate a Javascript file in `build/app.js`. We just need to run this file using node like this:\n\n```\n    node build/app.js\n```\n\nAnd voila 👏, you should have the realtime server now running on port `9999`.\nThe whole code for this server can be found in this [repository](https://github.com/perfectmak/kotlin-realtime-counter-server-pusher).\n\nNow, let’s go on to build the Android application that would be interacting with this server.\n\n### 2. Building the Android application\n\nTo make it easy to get started with Kotlin for Android development, we will be using [Android Studio 3.0](https://developer.android.com/studio/preview/index.html) as this version has the Kotlin plugin bundled with it. If you are using an Android Studio version less than than 3.0 refer [here](https://kotlinlang.org/docs/tutorials/kotlin-android.html) for detailed instructions to get started.\n\nSo launch your Android Studio 3.0 IDE and create a new project. You can give the project any name but for this tutorial we will name the project ‘Click Counter’. Also ensure that you check the `Include Kotlin Support` option as shown in the image below:\n\n\n![counter-kotlin-create-project](//images.contentful.com/1es3ne0caaid/5IRj10lAooKuQwYyIkUimo/26aac60bbc03e75fa57277ce3b07bf23/counter-kotlin-create-project.png)\n\n\nClick on `Next` several times and then `Finish` and the Android project will be created and setup.\n\nAfter the project has finished building, open up your app module’s `build.gradle` file and add the following to the `dependencies` section:\n\n```\n    apply plugin: 'com.android.application'\n    apply plugin: 'kotlin-android'\n    apply plugin: 'kotlin-android-extensions'\n    \n    android {\n      ...\n    }\n    \n    dependencies {\n      ... \n      implementation \"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version\"\n         \n      implementation 'com.pusher:pusher-java-client:1.5.0'\n      implementation 'com.squareup.okhttp3:okhttp:3.8.0'\n      implementation 'com.google.code.gson:gson:2.8.0'\n    }\n```\n\n\u003e If you are using an Android Studio version earlier than 3.0, you should replace `implementation` with `compile`. `implementation` was introduced with Gradle 3.0 and `compile` is now being deprecated. You can read more about these changes [here](https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_separation).\n\u003e \n\u003e Also ensure the applied ‘kotlin-android-extensions’ plugin is added to the `build.gradle` file if you are using an Android Studio version earlier than 3.0\n\nNext, open up your AndroidManifest.xml file and add the Internet permission like so:\n\n```\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        package=\"pusher.com.clickcounter\"\u003e\n        \n        \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n    \n        \u003capplication\n            ...\u003e\n            ...\n        \u003c/application\u003e\n    \n    \u003c/manifest\u003e\n```\n\nNext, let us design the interface of our application. The application would have a single activity which contains a single button and text view showing the current number of times the button has been clicked. So open your `activity_main.xml` layout file and update it with the following code:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.design.widget.CoordinatorLayout\n        android:id=\"@+id/rootLayout\"\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\"pusher.com.clickcounter.MainActivity\"\u003e\n        \u003candroid.support.constraint.ConstraintLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\u003e\n    \n            \u003cTextView\n                android:id=\"@+id/descriptionText\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginTop=\"55dp\"\n                android:text=\"Click to show some love\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n            \u003candroid.support.design.widget.FloatingActionButton\n                android:id=\"@+id/clickButton\"\n                android:layout_width=\"50dp\"\n                android:layout_height=\"50dp\"\n                android:layout_marginTop=\"15dp\"\n                android:src=\"@mipmap/heart\"\n                app:fabSize=\"auto\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toBottomOf=\"@+id/descriptionText\"/\u003e\n    \n            \u003cTextView\n                android:id=\"@+id/textView\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"27dp\"\n                android:layout_marginEnd=\"8dp\"\n                android:layout_marginStart=\"8dp\"\n                android:layout_marginTop=\"55dp\"\n                android:text=\"Number of clicks so far is:\"\n                android:textSize=\"21sp\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toBottomOf=\"@+id/clickButton\" /\u003e\n    \n            \u003cTextView\n                android:id=\"@+id/countTextView\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginEnd=\"8dp\"\n                android:layout_marginStart=\"8dp\"\n                android:layout_marginTop=\"8dp\"\n                android:text=\"loading...\"\n                android:textSize=\"30sp\"\n                android:textStyle=\"bold\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toBottomOf=\"@+id/textView\" /\u003e\n        \u003c/android.support.constraint.ConstraintLayout\u003e\n    \u003c/android.support.design.widget.CoordinatorLayout\u003e\n```\n\nThe layout is pretty straight forward, things to note are the `FloatingActionButton` with id `clickButton` and the `countTextView` to display the current click count.\n\nNow, create a new Kotlin class named `ClickCount` inside the `com.pusher.clickcounter` and copy the following into the file:\n\n```\n    package pusher.com.clickcounter\n    \n    data class ClickCount(val count: Int)\n```\n\nNext, open the `MainActivity.kt` class and lets write the code that ties all the functionality together. Inside this file, start by defining some configuration constants and initializing some required variables.\n\n```\n    package com.pusher.clickcounter\n    \n    ...\n    \n    class MainActivity : AppCompatActivity() {\n      companion object {\n          const val SERVER_URL = \"http://NODE_JS_SERVER_ENDPOINT\"\n          const val PUSHER_API_KEY = \"PUSHER_API_KEY\"\n          const val PUSHER_CLUSTER = \"PUSHER_APP_CLUSTER\"\n          const val CLICK_CHANNEL = \"click-channel\"\n          const val CLICK_EVENT = \"click-event\"\n      }\n    \n      val pusherOptions = PusherOptions().setCluster(PUSHER_CLUSTER)\n      val pusher = Pusher(PUSHER_API_KEY, pusherOptions)\n      val httpClient = OkHttpClient()\n      \n      ...  \n    }\n```\n\nNote that you would have to set the `SERVER_URL` to the actual url where your realtime server is running. Also, update the `PUSHER_API_KEY` and `PUSHER_CLUSTER` values to your Pusher applications credentials.\n\nNext, the `onCreate()` method should look like this:\n\n```\n    package com.pusher.clickcounter\n    \n    ...\n    import kotlinx.android.synthetic.main.activity_main.*\n    ...\n    \n    class MainActivity : AppCompatActivity() {\n      ...\n      \n      override fun onCreate(savedInstanceState: Bundle?) {\n          super.onCreate(savedInstanceState)\n          setContentView(R.layout.activity_main)\n      \n          fetchCurrentClickCount()\n          connectToRealtimeUpdates()\n          clickButton.setOnClickListener { postClick() }\n      }\n      \n      ...  \n    }\n```\n\nFirst, we fetch the current click count by invoking the `fetchCurrentClickCount()` method. Next, we connect to get realtime updates of when the click count changes. Finally we attach an `onClickListener` to the `clickButton` button.\n\n\u003e We are able to get a reference to the `clickButton` button directly without having to use `findViewById()` because of the [Kotlin Android Extensions](https://kotlinlang.org/docs/tutorials/android-plugin.html) plugin we applied to this project in the `build.gradle` file.\n\nNow let us explore the contents of the `fetchCurrentClickCount()`, `connectToRealtimeUpdates()` and `postClick()` functions respectively.\n\n#### The fetchCurrentClickCount() method\n\nThis method makes a GET request to the servers `/counts` endpoint and updates the `countTextView`'s text with the count gotten from the servers response. \n\n```\n    private fun fetchCurrentClickCount() {\n      val getClickCountRequest = Request.Builder().url(\"$SERVER_URL/counts\").build()\n    \n      httpClient.newCall(getClickCountRequest)\n        .enqueue(object: Callback {\n          override fun onResponse(call: Call?, response: Response?) {\n            response?.body()?.also { body -\u003e\n              val clickCount = Gson().fromJson(body.string(), ClickCount::class.java)\n              runOnUiThread { countTextView.text = clickCount.count.toString() }\n            }\n          }\n          \n          override fun onFailure(call: Call?, e: IOException?) {\n            runOnUiThread {\n              showError(\"Network error loading current count\", \"Retry\") {\n                fetchCurrentClickCount()\n                dismiss()\n              }\n            }\n          }\n        })\n    }\n```\n\nIf an error occurs while making the request, an error message will be displayed using the `showError()` function:\n\n```\n    private fun showError(msg: String, action: String, callback: Snackbar.(View) -\u003e Unit) {\n        val errorSnackbar = Snackbar.make(rootLayout, msg, Snackbar.LENGTH_INDEFINITE)\n        errorSnackbar.setAction(action) {\n            callback(errorSnackbar, it)\n        }\n        errorSnackbar.show()\n    }\n```\n\nThe `showError()` function displays a Snackbar containing the `msg` passed in and an `action` button. When the action button is clicked, the `callback` is invoked.\n\n\n\u003e Notice the type of the `callback` function is an [extension function](https://kotlinlang.org/docs/reference/extensions.html) on Snackbar ( i.e. `Snackbar.(View) → Unit` ). This makes it easy for the calling code to have access the Snackbar instance without explicitly passing a reference to the `callback`.\n\n\n#### The connectToRealtimeUpdates() method\n\nThe `connectToRealtimeUpdates()` method subscribes to the Pusher `CLICK_CHANNEL` and binds an event listener to  `CLICK_EVENT`' events on the channel.\n\n```\n    private fun connectToRealtimeUpdates() {\n      val pusherChannel = pusher.subscribe(CLICK_CHANNEL)\n      pusherChannel.bind(CLICK_EVENT) { _, _, data -\u003e\n        val clickCount = Gson().fromJson(data, ClickCount::class.java)\n        runOnUiThread { countTextView.text = clickCount.count.toString() }\n      }\n    }\n```\n\nThe event listener deserializes the `data` into a `ClickCount` object using `Gson` and then updates the `countTextView`'s text with the count provided.\n\n\n#### The postClick() method\n\nThe `postClick()` method is invoked when the `clickButton` is tapped. It sends a `POST` request to the servers `/clicks` endpoint.\n\n```\n    private fun postClick() {\n      val emptyBody = RequestBody.create(null, \"\")\n      val postClickRequest = Request.Builder().url(\"$SERVER_URL/clicks\").post(emptyBody)\n                              .build()\n    \n      httpClient.newCall(postClickRequest)\n        .enqueue(object: Callback {\n          override fun onResponse(call: Call?, response: Response?) { }\n          \n          override fun onFailure(call: Call?, e: IOException?) {\n            runOnUiThread {\n                showError(\"Network error sending click\",\"Retry\") {\n                    postClick()\n                    dismiss()\n                }\n            }\n          }\n        })\n    }\n```\n\nIf an error occurs while posting the click event, a error Snackbar is displayed via the `showError()` function.\n\nAnd finally, in the activity we connect and disconnect pusher in the `onResume()` and `onPause()` lifecycle methods respectively.\n\n```\n    class MainActivity : AppCompatActivity() {\n      ...\n      \n      override fun onResume() {\n        super.onResume()\n        pusher.connect()\n      }\n      \n      override fun onPause() {\n        pusher.disconnect()\n        super.onPause()\n      }\n    }\n```\n\nThere you have it. The realtime counter Android application is now ready. \nYou can find the complete code for the Android application [here](https://github.com/perfectmak/kotlin-realtime-counter-pusher).\n\n\n## Testing it out\n\nTo test it out, ensure that the realtime server we built earlier is running and the Android application’s `SERVER_URL` is updated accordingly.\n\nNow, run the application on multiple devices. You would notice that as you click on the button, the count increases in realtime across all the devices.\n\n\n## Conclusion\n\nIt has been a long post, but we were able to see how Pusher can be used to build a realtime counter. We have also seen how we can use Kotlin’s super powers to supercharge our application.\n\nSome additional things that can be done to improve this application include:\n\n- Sharing similar Kotlin code between the server and Android application. For example, the `ClickCount` class can be moved out to a separate module and shared between the server and Android applications. Link to a sample project that achieved this can be found below.\n- Changing the data type for the counter from `Int` to something like `BigInteger` to handle larger counts.\n- Persisting the `currentClickCount` to a database. Note that this may give rise to some other issues that need consideration such as atomically incrementing the click count to avoid race conditions.\n\nLet me know in the comments below if you have any questions or suggestions to improve this tutorial. I’ll love to hear your thoughts. Cheers!\n\n## Further Reading\n- [Getting Started with Kotlin and Javascript](https://kotlinlang.org/docs/tutorials/javascript/getting-started-gradle/getting-started-with-gradle.html)\n- [Getting Started with Android and Kotlin](https://kotlinlang.org/docs/tutorials/kotlin-android.html)\n- [Kotlin Android Extensions](https://kotlinlang.org/docs/tutorials/android-plugin.html)\n- [Sharing Kotlin Code across Platforms](https://github.com/wojta/hello-kotlin)","metaTitle":"Build a realtime counter using Kotlin","metaDescription":"In this tutorial, find out how you can build a realtime click counter leveraging from the power of Kotlin."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5iVt9pr8RaQmi6OmQYOmwG","type":"Entry","createdAt":"2018-02-22T15:02:42.944Z","updatedAt":"2020-06-19T14:18:26.221Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime counter using ASP.NET","url":"counter-aspnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WBKKiARVKggKEsq8gSuOS","type":"Entry","createdAt":"2018-02-12T15:10:05.476Z","updatedAt":"2018-02-26T12:31:10.466Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Counter","url":"live-counter","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}}],"reviewDate":"2017-09-06","description":"Create a live website visits counter using ASP.NET and jQuery.","prerequisite":"A basic understanding of C# and JavaScript is needed to follow this tutorial.","content":"It is common practice on websites and applications to make viewers aware of how many others have interacted with the same content e.g. [YouTube videos](https://www.youtube.com/watch?v=Qoti7G-tjN8). The practice of displaying this information emphasizes the relevance of the resource and draws more attention to it.\n\nIn this tutorial, we will emulate this practice by displaying the number of visits to a single page website. We will use C Sharp, C# for short, as our server-side language with ASP.NET MVC to build our webpage and Pusher to provide realtime updates of the page visits. \n\nLet’s get started!\n\n\n## Building the frontend for our realtime counter in .NET\n\n### First, let’s start up Visual Studio\nFor this tutorial, we’ll be using Visual Studio. It’s an IDE that makes ASP.NET development easier and quicker. Visual Studio 2017 is free and available for the popularly used Operating Systems. You can find installation details [here](https://www.visualstudio.com/).\n\n### Creating our new project\nWe’ll start a new project by clicking **New Project** on the Visual Studio dashboard. Following the GUI prompts (in this order) we:\n  - Set C# as the language to use\n  - Select ASP.NET MVC Project as the template\n  - Include a Unit Test Project (this is optional and can be unticked)\n  - Fill in the Project name e.g. Notif (any name would do)\n  - Fill in the Solution name i.e. application name (again any name would do)\n  - Select the version control options to include git to the project\n\nAnd then click **Create**.\n\nThe project gets created with a default `HomeController.cs`. This is the HomeController class file. For the purpose of this tutorial, being a single page website, this single Controller class will be enough.\n\n\n\u003e 💡 ASP.NET MVC routes follow the pattern of /{ControllerName}/{ActionName} i.e assuming our **HomeController.cs** has a method named **Index** the route would be **viewdotnet.com/Home/Index**. ASP.NET MVC provides **Home** as the default controller name and **Index** as the default action name so that a route ‘**/**’ i.e. **viewdotnet.com/** maps to the Index method in the Home controller.\n\nIn our `HomeController.cs` we’ll have\n\n```\n            public ActionResult Index()\n            {\n                var mvcName = typeof(Controller).Assembly.GetName();\n                var isMono = Type.GetType(\"Mono.Runtime\") != null;\n    \n                ViewData[\"Version\"] = mvcName.Version.Major + \".\" + mvcName.Version.Minor;\n                ViewData[\"Runtime\"] = isMono ? \"Mono\" : \".NET\";\n    \n                return View();\n            }\n```\n\n**ActionResult** is the return type of the method which specifies that it will return an action in the form of rendering a view, serving a streamed file, etc. **ViewData** is used to pass data from the method to the HTML file (our view file) that will be rendered. **View()** creates a view response which we return. **Note that** `**Mono**` **is only available on a Mac OS machine.** \n\n\u003e 💡 In ASP.NET MVC the views (html files) rendered by a Controller Class must exist in the View folder and either under the Shared folder or the Folder bearing the name of the Controller. i.e. for the HomeController views must be in either `Views/Home/*``.cshtml` or `Views/Shared/*``.cshtml`.\n\u003e \n\u003e Also when the view is unspecified in the View function it defaults to `index.cshtml`; these views extend `_Layout.cshtml` found in the Shared folder.\n\n### Create the single web page\n\nTo achieve a quick and simple web page for our visitors to view we’ll be using [Bootstrap](https://getbootstrap.com).\n\n```\n    //_Layout.cshtml file\n    \n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003e@ViewBag.Title\u003c/title\u003e\n            \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        @RenderBody()\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js\"\u003e \u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe’ve used CDNs to include to Bootstrap CSS and JS files and also the jQuery JS file (it is needed for Bootstrap JS).\n\n\n\u003e **@ViewBag** is another means of passing data to the view file from the controller\n\u003e **@RenderBody** is where our actual view `index.cshtml`  will be inserted in this base view\n\n```\n    // index.cshtml file\n    \n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003ch2\u003eView Funny Memes, Have a good laugh\u003c/h2\u003e\n            \u003cdiv class=\"col-md-8\"\u003e\n                \u003cimg src=\"http://i.imgur.com/gRWkE0j.jpg\"\u003e\n            \u003c/div\u003e        \n        \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nOur page has a header and a big image (pretty minimal stuff)\n\n## Keeping track of views\n\nNow we’ll write the code to display the number of visitors to our page. We’ll need our code:\n\n\n- To recognize a visit\n- To store the visits so far (adding to this stored value every time someone visits)\n- To pass the data (number of visitors) to our view to display\n\nIn our `HomeController.cs` we’ll add the code to retrieve the visits so far, increment it and pass it on to the view. To keep things light and simple, we’ll be using file storage as our store (i.e. reading and writing the number of visits to a file such as visitors.txt).\n\n```\n    //HomeController.cs\n    ...\n    using System.IO;\n    \n    namespace notif.Controllers\n    {\n        public class HomeController : Controller\n        {\n            public ActionResult Index()\n            {\n                ViewBag.Title = \"Views Dot Net | A pusher - .Net Tutorial\";\n            \n                var visitors = 0;\n            \n                if (System.IO.File.Exists(\"visitors.txt\")) {\n                    string noOfVisitors = System.IO.File.ReadAllText(\"visitors.txt\");\n                    visitors = Int32.Parse(noOfVisitors);\n                }\n                \n                ++visitors;\n            \n                var visit_text = (visitors == 1) ? \" view\" : \" views\";\n                System.IO.File.WriteAllText(\"visitors.txt\", visitors.ToString());\n            \n                ViewData[\"visitors\"] = visitors;\n                ViewData[\"visitors_txt\"] = visit_text;\n            \n            \n                return View();\n            }\n    ...\n```\n\nWe create a **visitors** variable and initialize it to 0. Then we check if the `visitors.txt` file exists, if it does then we’ve been visited in the past and we read the content into the **visitors** variable. Next, we increment the value of **visitors** by 1 (the visitor we are currently serving) and save the new value back into our file.\n\n\n\u003e 💡 To check if a file exists, read, and write into it, we’ll use the File class (available from ASP.NET) which is a member of the **System.IO** namespace so at the top of our class file we’ve added  `using System.IO;`\n\nNow that we have the number of visitors in a variable, we’ll pass it on to our view using **ViewData**. We’ve also added some supporting text based on the value of the visitors variable to improve readability. In our view file we’ll add some markup to display the visitors value and text we’re passing along.\n\n```\n    //index.cshtml\n    \n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003ch2\u003eView Funny Memes, Have a good laugh\u003c/h2\u003e\n            \u003cdiv class=\"col-md-8\"\u003e\n                \u003cimg src=\"http://i.imgur.com/gRWkE0j.jpg\"\u003e\n            \u003c/div\u003e        \n        \u003c/div\u003e\n        \u003cbr\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-12\"\u003e\n                \u003cdiv class=\"pull-left\"\u003e\n                    \u003cp\u003e \u003cb id=\"noOfVisitors\"\u003e@ViewData[\"visitors\"]\u003c/b\u003e \u003cspan id=\"visitorsText\"\u003e @ViewData[\"visitors_txt\"] \u003c/span\u003e \u003c/p\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nNow our page will look like:\n\n![counter-aspnet-debug](//images.contentful.com/1es3ne0caaid/5XpGPfMB3y8oOCw8euGOEc/5b6d29addaefac77c7c7b16a0b06c2af/counter-aspnet-debug.png)\n\n## Adding realtime updates to our views counter with Pusher\n\nWhile a user views our page we’d like them to know when more people visit the page by increasing the **number of views** without requiring a refresh. We will be using Pusher for this.\n\nTo start with, lets head over to the pusher [dashboard](https://dashboard.pusher.com/) and create an app. You can [register for free](https://pusher.com/signup?plan=sandbox) if you haven’t got an account. Fill out the create app form with the information requested.\n\nTo make our app realtime, we’ll make each visit trigger an event via Pusher on the server-side (i.e. backend) and have Pusher listen and react to that event on the client-side (i.e. view using JavaScript).\n\n### Triggering event on the server-side\n\nIn our `HomeController.cs`, on every new visit using Pusher we’ll trigger a `newVisit` event on a channel we’ll call `general` which will broadcast the current number of visits.\n\nTo do this, we’ll install Pusher via NuGet - *a packer manager for ASP.NET *- by:\n- Right clicking the `*Packages*` folder in our solution\n- Selecting `Add Packages` and;\n- Searching and selecting `Pusher Server`\n\nNext, we’ll initialize Pusher in our Controller using and trigger our `newVisit` event.\n\n```\n    //HomeController.cs\n    \n    ...\n    using PusherServer;\n    \n    public ActionResult Index()\n    {\n        ViewBag.Title = \"Views Dot Net | A pusher - .Net Tutorial\";\n        var visitors = 0;\n    \n        if (System.IO.File.Exists(\"visitors.txt\")) {\n            string noOfVisitors = System.IO.File.ReadAllText(\"visitors.txt\");\n            visitors = Int32.Parse(noOfVisitors);\n        }\n    \n        ++visitors;\n        var visit_text = (visitors == 1) ? \" view\" : \" views\";\n        \n        System.IO.File.WriteAllText(\"visitors.txt\", visitors.ToString());\n    \n        var options = new PusherOptions();\n        options.Cluster = \"PUSHER_APP_CLUSTER\";\n    \n        var pusher = new Pusher(\n        \"PUSHER_APP_ID\",\n        \"PUSHER_APP_KEY\",\n        \"PUSHER_APP_SECRET\", options);\n    \n        pusher.TriggerAsync(\n        \"general\",\n        \"newVisit\",\n        new { visits = visitors.ToString(), message = visit_text });\n    \n        ViewData[\"visitors\"] = visitors;\n        ViewData[\"visitors_txt\"] = visit_text;\n    \n        return View();\n    }\n```\n\n\u003e 💡 After Installing the `PusherServer` package we use it in our controller by adding `using PusherServer` at the top of our class definition.\n\nAfter initializing Pusher using our **PUSHER_APP_ID**, **PUSHER_APP_KEY,** *****PUSHER_APP_SECRET and PUSHER_APP_CLUSTER*** *(be sure to replace these with the actual values from your dashboard),* we will broadcast an object consisting of the **number of visitors** and the **visitors supporting text** with our pusher instance on the `newVisit` event via the `general` channel.\n\n### Listening for the event on our client-side\n\nTo react to our `newVisit` event and its corresponding data we’ll be using JavaScript and JQuery for DOM manipulation to display the event data.\n\n```\n    //_Layout.cshtml\n    \n    ...\n    \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n            \u003cscript\u003e\n    \n                // Enable pusher logging - don't include this in production\n                Pusher.logToConsole = true;\n    \n                var pusher = new Pusher('PUSHER_APP_KEY', {\n                    cluster:'PUSHER_APP_CLUSTER'\n                });\n    \n                var channel = pusher.subscribe('general');\n                \n                channel.bind('newVisit', function(data) {\n                  \n                  var visits = data.visits;\n                  var message = data.message;\n                  $('#noOfVisitors').text( visits );\n                  $('#visitorsText').text( message );\n                });\n            \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the above code, we:\n\n- Add the pusher library to our view via a CDN,\n- Initialize Pusher passing in our PUSHER_APP_KEY,\n- Subscribe to the `general` channel\n- Bind the channel to the `newVisit` event also attaching a callback function to the binding.\n\nIn our callback function we retrieve the **visits** and **message** data, then using jQuery pass it into our markup.\n\nNow we run our application by clicking the play button in the top left corner of our IDE and here’s a glimpse of our resulting webpage.\n\n![counter-aspnet-demo](//images.contentful.com/1es3ne0caaid/1rQGWpFwVK8k8EqIGoQaCq/9fc865b9cb2e12902f2c5870adb88bd4/counter-aspnet-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we’ve covered building a single web page with ASP.NET MVC in C# and how to implement realtime functionality in our web page using Pusher in both C# and JavaScript. There’s a lot more functionality we can achieve using ASP.NET and Pusher together, feel free to extend the functionality of your web page.","metaTitle":"Build a realtime counter using ASP.NET","metaDescription":"Discover how you can build a live counter using ASP.NET and jQuery."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"66dsfvONnqCQwMs8ga4oue","type":"Entry","createdAt":"2018-02-27T12:40:05.055Z","updatedAt":"2018-02-27T12:40:05.055Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime counter using Swift","url":"counter-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-online-counter-on-ios","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WBKKiARVKggKEsq8gSuOS","type":"Entry","createdAt":"2018-02-12T15:10:05.476Z","updatedAt":"2018-02-26T12:31:10.466Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Counter","url":"live-counter","type":"use case"}}],"reviewDate":"2017-06-06","description":"Build a realtime counter on a video viewer iOS application showing how many people have viewed the video.","prerequisite":"A basic understanding of Swift and Node.js is needed to follow this tutorial.","content":"One of the most common elements on applications (web or otherwise) is counters. YouTube, for instance, uses counters to see how many people have viewed a particular video. Facebook also does the same for videos on their platform.\n\nMost of the counters on these sites, however, only update the count when you have refreshed the page. This leaves a lot to be desired, as sometimes you just want to see the number increase in realtime. This gives you the impression that the item is being viewed by many people at the moment.\n\nIn this article, we are going to explore how we can leverage the realtime nature of Pusher to create a counter that updates in realtime. We will be creating a video viewer iOS application with a realtime counter showing how many people have viewed the video.\n\n![counter-swift-demo](//images.contentful.com/1es3ne0caaid/5n9LaRLQFUEUkYGIIKOiEW/28bc44c947ede88f67c2bba2d7bc077f/counter-swift-demo.gif)\n\nTo follow along, you will need basic knowledge of Swift, Xcode and command line. You will also need to set up a Pusher account, and create an application. You can do so [here](https://pusher.com).\n\n## Basic setup\n\nTo get started you will need Cocoapods installed on your machine. Cocoapods is a package manager and we will be using this to manage the dependencies on the application. To install Cocoapods, type this in your command line:\n\n```\n$ gem install cocoapods\n```\n\nAfter you are done installing that, launch Xcode and create a new single page application project. Follow the set up wizard, and then once the Xcode project editor is open, close Xcode. `cd` to the root directory of your project and run the command:\n\n```\n$ pod init\n```\n\nThis should create a `Podfile` in the root of your project. Open this file in your favorite editor and then update the contents of the file to the following:\n\n``` \n# Uncomment the next line to define a global platform for your project\nplatform :ios, '9.0'\n\ntarget 'counter' do\n  # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\n  use_frameworks!\n\n  # Pods for counter\n  pod 'Alamofire'\n  pod 'PusherSwift'\n\nend\n```\n\nIn the file above we have specified two dependencies: `PusherSwift` and `Alamofire`. These will be useful later in the project. Now install these dependencies by running this command from your terminal:\n\n```\n$ pod install\n```\n\nOnce this is complete, you should have a `.xcworkspace` file in the root directory of your project. Open this file and it should launch Xcode. (Make sure you don't have any instance of Xcode running for this project before opening the file or you will get an error.)\n\n## Creating the views for our realtime application\n\nNow that the project is open, we will create some views for our application. Open the `Main.storyboard` file and in there we will create the views.\n\nWe want to create a navigation controller that will have a `ViewController` as the root controller of the navigation controller. Then in the new view controller, we will add a webview; this is where we will be embedding the video we want people to view. We will also add two labels, one for the counter and the other will just be a plain immutable message.\n\nAfter we are done, this is what we have so far:\n\n![counter-swift-storyboard](//images.contentful.com/1es3ne0caaid/7q6QSCvFCMGKguucAuWAwG/4eb695cd85cbcc93ca288b40aaf42d30/counter-swift-storyboard.png)\n\n### Adding our realtime feature to our application\n\nNow that we have created the application, we can now add the code that will interact with the views and add the realtime support and the video also.\n\nCreate a new `MainViewController` class and link it to the view controller we created above. Then create a split view in Xcode and ctrl+drag from the `webview` to the view controller. This should create an `@IBOutlet` in the controller; do the same for the counter label so it creates another `@IBOutlet`. Our controller should now have two `@IBOutlet`s one for the webview and one for the counter label. Great.\n\nNow we are going to add the code to load our video. We are going to be using a YouTube video of a Pusher tutorial for this exercise. In the `viewDidLoad` method add the following:\n\n```\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    loadYoutube(videoID:\"xDQ8vzD0lzw\")\n}\n```\n\nNow lets create the `loadYoutube` method and the other dependent methods:\n\n```\nfunc loadYoutube(videoID:String) {\n    self.automaticallyAdjustsScrollViewInsets = false\n    webview.allowsInlineMediaPlayback = true\n    webview.mediaPlaybackRequiresUserAction = false\n    let embedHTML = getEmbedHTML(id:videoID);\n\n    let url: NSURL = NSURL(string: \"https://www.youtube.com/embed/\\(videoID)\")!\n    webview.loadHTMLString(embedHTML as String, baseURL:url as URL )\n}\n\nprivate func getEmbedHTML(id: String) -\u003e String {\n    return \"\u003chtml\u003e\u003chead\u003e\u003cstyle type=\\\"text/css\\\"\u003ebody {background-color: transparent;color: white;}\u003c/style\u003e\u003c/head\u003e\u003cbody style=\\\"margin:0\\\"\u003e \u003ciframe webkit-playsinline width=\\\"100%\\\" height=\\\"100%\\\" src=\\\"https://www.youtube.com/embed/\\(id)?feature=player_detailpage\u0026playsinline=1\\\" frameborder=\\\"0\\\"\u003e\u003c/iframe\u003e\";\n}\n```\n\nNow we have instructed the application to load a YouTube video automatically. However, the counter functionality does not yet work. Let's fix that.\n\nImport the `PusherSwift` library and add a new method to update the counter using Pusher:\n\n```\nfunc updateViewCount() {\n    let options = PusherClientOptions(\n        host: .cluster(\"PUSHER_CLUSTER\")\n    )\n\n    pusher = Pusher(key: \"PUSHER_KEY\", options: options)\n\n    let channel = pusher.subscribe(\"counter\")\n    let _ = channel.bind(eventName: \"new_user\", callback: { (data: Any?) -\u003e Void in\n        if let data = data as? [String: AnyObject] {\n            let viewCount = data[\"count\"] as! NSNumber\n            self.count.text = \"\\(viewCount)\" as String!\n        }\n    })\n    pusher.connect()\n}\n```\n\n\u003e Note: Where it says `PUSHER_CLUSTER` and `PUSHER_KEY`, you should replace with your actual Pusher cluster and key. You'll also need to import\n\nNow you can just call the `updateViewCount` from the `viewDidLoad` method so it is called when the view is loaded.\n\nOne final thing we will do is use `Alamofire` to send a request to a backend so the counter can be updated and saved, so we do not lose the count of people who have viewed the video. Import `Alamofire` and add the following:\n\n```\nfunc sendViewCount() {\n    Alamofire.request(endpoint, method: .post).validate().responseJSON { response in\n        switch response.result {\n        case .success:\n            if let result = response.result.value {\n                let data = result as! NSDictionary\n                let viewCount = data[\"count\"] as! NSNumber\n                self.count.text = \"\\(viewCount)\" as String!\n            }\n        case .failure(let error):\n            print(error)\n        }\n    }\n}\n```\n\nNow that we are done with that, the`MainViewController` should now look a little like this:\n\n```\nimport UIKit\nimport Alamofire\nimport PusherSwift\n\nclass MainViewController: UIViewController {\n\n    @IBOutlet weak var count: UILabel!\n    @IBOutlet weak var webview: UIWebView!\n\n    var endpoint: String = \"http://localhost:4000/update_counter\"\n\n    var pusher : Pusher!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        loadYoutube(videoID:\"xDQ8vzD0lzw\")\n        sendViewCount()\n        updateViewCount()\n    }\n\n    func sendViewCount() {\n        Alamofire.request(endpoint, method: .post).validate().responseJSON { response in\n            switch response.result {\n\n            case .success:\n                if let result = response.result.value {\n                    let data = result as! NSDictionary\n                    let viewCount = data[\"count\"] as! NSNumber\n                    self.count.text = \"\\(viewCount)\" as String!\n                }\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n\n    func updateViewCount() {\n        let options = PusherClientOptions(\n            host: .cluster(\"PUSHER_CLUSTER\")\n        )\n\n        pusher = Pusher(key: \"PUSHER_KEY\", options: options)\n\n        let channel = pusher.subscribe(\"counter\")\n        let _ = channel.bind(eventName: \"new_user\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String: AnyObject] {\n                let viewCount = data[\"count\"] as! NSNumber\n                self.count.text = \"\\(viewCount)\" as String!\n            }\n        })\n        pusher.connect()\n    }\n\n    func loadYoutube(videoID:String) {\n        self.automaticallyAdjustsScrollViewInsets = false\n        webview.allowsInlineMediaPlayback = true\n        webview.mediaPlaybackRequiresUserAction = false\n        let embedHTML = getEmbedHTML(id:videoID);\n\n        let url: NSURL = NSURL(string: \"https://www.youtube.com/embed/\\(videoID)\")!\n        webview.loadHTMLString(embedHTML as String, baseURL:url as URL )\n    }\n\n    private func getEmbedHTML(id: String) -\u003e String {\n        return \"\u003chtml\u003e\u003chead\u003e\u003cstyle type=\\\"text/css\\\"\u003ebody {background-color: transparent;color: white;}\u003c/style\u003e\u003c/head\u003e\u003cbody style=\\\"margin:0\\\"\u003e \u003ciframe webkit-playsinline width=\\\"100%\\\" height=\\\"100%\\\" src=\\\"https://www.youtube.com/embed/\\(id)?feature=player_detailpage\u0026playsinline=1\\\" frameborder=\\\"0\\\"\u003e\u003c/iframe\u003e\";\n    }\n}\n```\nIf we load the application now, it would load the video but the counter will not work. This is because we have not yet set up a backend logic.\n\n## Creating the backend for our realtime counter iOS application\n\nFor the backend, we will be creating a very basic Node.js application. This application will simply have one endpoint that saves the counter state and sends a trigger to Pusher so other listeners subscribed to the channel event can pick it up and update in realtime.\n\nTo start, create a new directory for your application. In the application create two files:\n\n#### File: package.json\n\n```\n{\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"body-parser\": \"^1.16.0\",\n    \"express\": \"^4.14.1\",\n    \"pusher\": \"^1.5.1\"\n  }\n}\n```\n\n#### File: index.js\n\n```\nvar Pusher = require('pusher');\nlet express = require('express');\nlet bodyParser = require('body-parser');\nlet fs = require('fs');\n\nlet app = express();\n\nlet pusher = new Pusher({\n  appId: 'PUSHER_ID',\n  key: 'PUSHER_KEY',\n  secret: 'PUSHER_SECRET',\n  cluster: 'PUSHER_CLUSTER',\n  encrypted: true\n});\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n\napp.post('/update_counter', function(req, res) {\n  let counterFile = './count.txt';\n\n  fs.readFile(counterFile, 'utf-8', function(err, count) {\n    count = parseInt(count) + 1;\n    fs.writeFile(counterFile, count, function (err) {\n      pusher.trigger('counter', 'new_user', {count:count});\n      res.json({count:count});\n    });\n  });\n});\n\napp.use(function(req, res, next) {\n    let err = new Error('Not Found');\n    err.status = 404;\n    next(err);\n});\n\nmodule.exports = app;\n\napp.listen(4000, function(){\n  console.log('App listening on port 4000!')\n})\n```\n\nFinally, create the `counter.txt` file in the same directory and chmod it to be writable.\n\n```\n$ echo \"0\" \u003e count.txt\n$ chmod 0644 count.txt \n```\n\nNow run `npm install` to install all the dependencies that node needs to make the backend application work. When the dependencies are done installing, run `node index.js` to start your application.\n\nOne last change we would need to make to allow our application interact with the localhost application is in our projects `info.plist` file. Make the changes below before launching the application:\n\n![counter-swift-allow-arbitrary-loads](//images.contentful.com/1es3ne0caaid/1bFlEs0wGAwoAwGAgO22Og/0b6c45e6745fbb422bc7eafd9f02c4c3/counter-swift-allow-arbitrary-loads.png)\n\nNow, when you launch the application you can see the counter increase, and if there is another instance of the application, they can see the counter increase in realtime. Neat!\n\n## Conclusion\n\nIn this article, we explored how you can create realtime counters using Pusher in your iOS applications. We are curious to see how you would incorporate this into your iOS application. If you have any other use cases you would like to see, or have any feedback, leave a comment below.","metaTitle":"Build a realtime counter using Swift","metaDescription":"Build a realtime counter on a video viewer iOS application showing how many people have viewed the video using Swift and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6FLLf45Q1USoaYMicaOQIm","type":"Entry","createdAt":"2018-02-27T10:43:19.163Z","updatedAt":"2020-06-19T10:40:53.888Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime counter using JavaScript","url":"counter-javascript","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3sixk7zsAoQqqSsUWM8I8y","type":"Entry","createdAt":"2018-02-13T18:06:00.483Z","updatedAt":"2018-02-14T10:08:13.372Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Olayinka Omole","url":"olayinka-omole","email":"olayinka.omole@gmail.com","twitter":"https://twitter.com/olayinkaos","github":"https://github.com/olayinkaos","guestWriter":true}}],"projectRepo":"https://github.com/olayinkaos/pusher-realtime-js-counter","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WBKKiARVKggKEsq8gSuOS","type":"Entry","createdAt":"2018-02-12T15:10:05.476Z","updatedAt":"2018-02-26T12:31:10.466Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Counter","url":"live-counter","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2017-04-20","description":"Create a realtime vote counter for your website with Pusher and plain JavaScript. ","prerequisite":"A basic understanding of JavaScript is needed to follow this tutorial.","content":"Dashboards are a common feature of modern day applications. Users like to see an overview of their performance, on a single page, and a really great way to improve that experience is to make the information shown to them be dynamic, or realtime!\n\nCounters are one of the prominent components of user dashboards, and in this tutorial, I will be showing you how to create a realtime counter, using the broadcasting prowess of [Pusher](https://pusher.com/) and the simplicity of plain JavaScript. We will build a simple vote counter to count the number of votes an item gets, in real time.\n\nFirst, we will set up Pusher, then create our [Node.js](https://nodejs.org/en/) Application, and finally we will create our view and listen for changes to the number of votes for an item.\n\n## Setting up Pusher\n\nPusher's APIs make it very easy to add realtime functionality to your applications. You should [signup](https://pusher.com/signup) to a free account (if you haven't already done so), create an app, and copy out the app credentials (App ID, Key and Secret) from the “App Keys” section, as we will be needing these for our app interaction with Pusher.\n\n## Creating Our App\n\nWe will be building our backend on [Node.js](https://nodejs.org/en/), make sure you have it installed, then you can initialise the new app with:\n\n``` \nnpm init -y\n```\n\n\u003e **Tip**: The `-y` or `--yes` flag helps to create a `package.json` file with default values.\n\nNext, we will install [Express](https://expressjs.com/) and [Pusher](https://github.com/pusher/pusher-http-node) and save as dependencies in our `package.json` file, via npm:\n\n``` \nnpm install -S express pusher\n```\nNow, we can create the files needed for our application:\n\n``` \n./server.js\n./index.html\n```\n\nThe `server.js` file will contain our server-side code, and `index.html` will contain our view and event listener script.\n\n### Building the Backend\n\nIn our `server.js` file, first we will initialise Express, require the `path` [module](https://nodejs.org/api/path.html) and require Pusher:\n\n```\nconst express = require('express');\nconst path = require('path');\nconst app = express();\napp.use(express.static(path.join(__dirname)));\nconst Pusher = require('pusher');\n```\n\nNext, we will Initialise Pusher with our app credentials, gotten from the Pusher dashboard:\n\n```\nconst pusher = new Pusher({\n  appId: 'YOUR_APP_ID',\n  key: 'YOUR_APP_KEY',\n  secret: 'YOUR_APP_SECRET',\n  cluster: 'eu',\n  encrypted: true\n});\n```\n\n\u003e **Note:** If you created your app in a different cluster to the default `us-east-1`, you must configure the cluster option. It is optional if you chose the default option. `encrypted` is also optional.\n\nNow we can start defining our app's routes and responses.\n\nWhen a user visits the homepage, we want to serve our `index.html` file, so we define a route for `/`:\n\n```\napp.get('/', (req,res) =\u003e {  \n  res.sendFile('index.html', {root: __dirname});\n});\n```\n\n\u003e **Tip**: [res.sendFile](https://expressjs.com/en/api.html#res.sendFile) is used to deliver files in Express applications.\n\nNext, we will define a route to handle votes. When a request with an `item_id` is sent to this route, we want to increase the number of votes on that item, and broadcast the change to all our users.\n\n```\napp.get('/vote', (req, res) =\u003e {\n  let item = req.query.item_id;\n  pusher.trigger('counter', 'vote', {item: item});\n  res.status(200).send();\n});\n```\n\nIn the code above, when a request is made to the `/vote` route, it gets the value of the item from the `item_id` key in the query string, then triggers a `vote` [event](https://pusher.com/docs/client_api_guide/client_events) on the `counter` channel, sending the `item` information as data to be broadcasted.\n\nThe `trigger` method has this syntax: `pusher.trigger( channels, event, data, socketId, callback );`. You can read more in it [here](https://pusher.com/docs/server_api_guide/interact_rest_api#publishing_events).\n\nWe are broadcasting on a [public channel](https://pusher.com/docs/client_api_guide/client_public_channels) as we want the data to be accessible to everyone. Pusher also allows broadcasting on [private](https://pusher.com/docs/client_api_guide/client_private_channels) and [presence](https://pusher.com/docs/client_api_guide/client_presence_channels) channels, which provide functionalities that require authentication. Their channel names are prefixed by `private-` and `presence-` respectively, unlike public channels that require no prefix.\n\nTypically, we should also save the new value of the number of votes to a database of some sort, so the data is persisted, but that is a bit out of the scope of this tutorial. You can implement this on your version!\n\nNow we can start the server and listen on port `5000` for connections:\n\n```\nconst port = 5000;\napp.listen(port, () =\u003e { console.log(`App listening on port ${port}!`)});\n```\n\nThe final `server.js` file will look like this:\n\n``` javascript\n/*\n * Initialise Express\n */\nconst express = require('express');\nconst path = require('path');\nconst Pusher = require('pusher');\nconst app = express();\napp.use(express.static(path.join(__dirname)));\n\n/*\n * Initialise Pusher\n */\nconst pusher = new Pusher({\n  appId: 'YOUR_APP_ID',\n  key: 'YOUR_APP_KEY',\n  secret: 'YOUR_APP_SECRET',\n  cluster: 'eu',\n  encrypted: true\n});\n\n/*\n * Define app routes and reponses\n */\napp.get('/', (req,res) =\u003e {  \n  res.sendFile('index.html', {root: __dirname});\n});\n\napp.get('/vote', (req, res) =\u003e {\n  let item = req.query.item_id;\n  pusher.trigger('counter', 'vote', {item: item});\n  res.status(200).send();\n});\n\n/*\n * Run app\n */\nconst port = 5000;\napp.listen(port, () =\u003e { console.log(`App listening on port ${port}!`)});\n```\n\n### Creating the App View\n\nNow, we can fill `index.html` with some markup. I also included [Foundation](http://foundation.zurb.com/) to take advantage of some preset styles:\n\n```\n\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n  \u003cmeta charset=\"utf-8\"\u003e\n  \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/foundation/6.3.1/css/foundation.min.css\"\u003e\n  \u003ctitle\u003eJavaScript Decides\u003c/title\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n  \u003cdiv class=\"container text-center\"\u003e\n    \u003ch3 class=\"title\"\u003e\n      Pusher Real-time Vote Counter.\n      \u003ch5 class=\"subheader\"\u003eJavaScript Decides\u003c/h5\u003e\n    \u003c/h3\u003e\n\n    \u003cdiv class=\"row\"\u003e\n      \u003cdiv class=\"columns medium-6\"\u003e\n        \u003cdiv class=\"stat\" id=\"vote-1\"\u003e0\u003c/div\u003e\n        \u003cp class=\"subheader\"\u003e\u003csmall\u003enumber of votes\u003c/small\u003e\u003c/p\u003e\n        \u003cbutton class=\"button vote-button\" data-vote=\"1\"\u003eVote for me\u003c/button\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"columns medium-6\"\u003e\n        \u003cdiv class=\"stat\" id=\"vote-2\"\u003e0\u003c/div\u003e\n        \u003cp class=\"subheader\"\u003e\u003csmall\u003enumber of votes\u003c/small\u003e\u003c/p\u003e\n        \u003cbutton class=\"button vote-button\" data-vote=\"2\"\u003eNah, Vote for me\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    \u003chr\u003e\n  \u003c/div\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n```\n\n### Listening for events from Pusher and updating the vote count\n\nTo work with Pusher on the client side, we need to include its JavaScript library. We'll do so at the bottom of `index.html`:\n\n```\n\u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n```\n\nThen, initialising Pusher with our app credentials:\n\n```\nconst pusher = new Pusher('YOUR_APP_KEY', {\n  cluster: 'eu',\n  encrypted: true\n});\n```\n\n\u003e **Note**: Don't forget to replace 'YOUR_APP_KEY' with its actual value\n\nNext, we will subscribe to the `counter` public channel, which is the same channel we publish to on our server-side, and listen for `vote` events:\n\n```\nconst channel = pusher.subscribe('counter');\n\nchannel.bind('vote', data =\u003e {\n  let elem = document.querySelector(`#vote-${data.item}`),\n      votes = parseInt(elem.innerText);\n  elem.innerText = votes + 1;\n});\n```\n\n\u003e **Tip**: You can also do `Pusher.logToConsole = true;` to debug locally\n\nIn the above code, we also defined a callback function, which accepts the data broadcast through Pusher as its parameter. We used this data to update the DOM with the new values of the vote counts.\n\nFinally, we define an event listener for `click` events on our `vote` buttons. We also define a `voteItem()` function which will be fired whenever the buttons are clicked.\n\n```\nconst voteButtons = document.getElementsByClassName(\"vote-button\");\n\nfunction voteItem() { \n  let vote_id = this.getAttribute(\"data-vote\");\n\n  // Make Ajax call with JavaScript Fetch API\n  fetch(`/vote?item_id=${vote_id}`)\n      .catch( e =\u003e { console.log(e); });\n}\n\n// IIFE - Executes on page load\n(function() {\n  for (var i = 0; i \u003c voteButtons.length; i++) {\n    voteButtons[i].addEventListener('click', voteItem);\n  }\n})();\n```\n\n\u003e **Note**: We make use of the JavaScript [Fetch API](https://developer.mozilla.org/en/docs/Web/API/Fetch_API) for making an Ajax request. It is promise-based, and more powerful than the regular XMLHttpRequest, although a Polyfill might be needed for older browsers.\n\nThe final `index.html` file will look like this:\n\n```\n\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n  \u003cmeta charset=\"utf-8\"\u003e\n  \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/foundation/6.3.1/css/foundation.min.css\"\u003e\n  \u003ctitle\u003eJavaScript Decides\u003c/title\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n  \u003cdiv class=\"container text-center\"\u003e\n    \u003ch3 class=\"title\"\u003e\n      Pusher Real-time Vote Counter.\n      \u003ch5 class=\"subheader\"\u003eJavaScript Decides\u003c/h5\u003e\n    \u003c/h3\u003e\n\n    \u003cdiv class=\"row\"\u003e\n      \u003cdiv class=\"columns medium-6\"\u003e\n        \u003cdiv class=\"stat\" id=\"vote-1\"\u003e0\u003c/div\u003e\n        \u003cp class=\"subheader\"\u003e\u003csmall\u003enumber of votes\u003c/small\u003e\u003c/p\u003e\n        \u003cbutton class=\"button vote-button\" data-vote=\"1\"\u003eVote for me\u003c/button\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"columns medium-6\"\u003e\n        \u003cdiv class=\"stat\" id=\"vote-2\"\u003e0\u003c/div\u003e\n        \u003cp class=\"subheader\"\u003e\u003csmall\u003enumber of votes\u003c/small\u003e\u003c/p\u003e\n        \u003cbutton class=\"button vote-button\" data-vote=\"2\"\u003eNah, Vote for me\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    \u003chr\u003e\n  \u003c/div\u003e\n\n  \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n  \u003cscript\u003e\n    const pusher = new Pusher('YOUR_APP_KEY', {\n      cluster: 'eu',\n      encrypted: true\n    });\n\n    const channel = pusher.subscribe('counter');\n\n    channel.bind('vote', data =\u003e {\n      let elem = document.querySelector(`#vote-${data.item}`),\n          votes = parseInt(elem.innerText);\n      elem.innerText = votes + 1;\n    });\n\n    const voteButtons = document.getElementsByClassName(\"vote-button\");\n\n    function voteItem() { \n      let vote_id = this.getAttribute(\"data-vote\");\n\n      // Make Ajax call with JavaScript Fetch API\n      fetch(`/vote?item_id=${vote_id}`)\n          .catch( e =\u003e { console.log(e); });\n    }\n\n    // IIFE - Executes on page load\n    (function() {\n      for (var i = 0; i \u003c voteButtons.length; i++) {\n        voteButtons[i].addEventListener('click', voteItem);\n      }\n    })();\n  \u003c/script\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n```\n\nAnd that's it, we have a functional realtime vote counter!\n\nTo run the app:\n\n```\nnode server.js\n```\n\nYou can also get [nodemon](https://github.com/remy/nodemon), so you can have automatic reloads on changes to your file. So instead, you could do: `nodemon server.js`.\n\n## Demo\n\nHere is what the final app looks like:\n\n![counter-javascript-demo](//images.contentful.com/1es3ne0caaid/6X4UP3L99mWEAogys46OYG/72ad23b0bab190026ab3b6839db45ba1/counter-javascript-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have learned how to start a basic JavaScript project, and give it realtime functionality using Pusher. We have also learned about Public channels, and how we can trigger events on these channels on the server-side, and listen for them on the client-side.\n\nThere are a lot of possibilities, with Pusher providing realtime functionality for our applications, especially in the creation of dashboard components. In the same way as a counter was created, we can also create [tables](https://blog.pusher.com/build-a-realtime-table-using-laravel-and-pusher/), [charts](https://blog.pusher.com/build-realtime-chart-using-laravel-pusher/), and so on.\n\nPusher's presence channels can also be used to implement a view counter, whenever a user visits your app.","metaTitle":"Build a realtime counter using JavaScript","metaDescription":"Start a basic JavaScript project creating a website vore counter with realtime functionality using Pusher. "}}],"defaultValue":"Live Counter","queryType":"tag","pages":1,"route":"/tutorials","query":{"tag":"Live Counter","page":"1"}}},"page":"/tutorials","query":{"tag":"Live Counter","page":"1"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Live%20Counter&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:42:56 GMT -->
</html>