<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=ASP.NET&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:19 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">11</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; ASP.NET</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorialsa0ab.html?tag=ASP.NET" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialse282.html?product=Beams&amp;tag=ASP.NET" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; ASP.NET"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/activity-feed-dotnet.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an activity feed using .NET</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Build an activity feed and dashboard using .NET. Create two interfaces: one for entering and modifying data, and another...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/collaborative-text-editor-net.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Collaboration<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">.NET</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an online collaborative text editor using .NET</h3><p class="css-k12xad e5jrto45">Learn to build an online document editing app using .NET. Featuring realtime updates for new edits.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/unit-testing-asp.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">C#<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Write unit tests for ASP.NET</h3><p class="css-k12xad e5jrto45">Learn how to write unit tests for ASP.NET using a sample app (provided) and the test library supplied by Visual Studio.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-map-aspnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime map using ASP.NET</h3><p class="css-k12xad e5jrto45">Build a realtime map using ASP.NET and Pusher. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-aspnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app using ASP.NET</h3><p class="css-k12xad e5jrto45">Leverage from the power of ASP.NET and create a simple chat app.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/typing-indicator-aspnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">C#<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a typing indicator in ASP.NET</h3><p class="css-k12xad e5jrto45">Learn how to implement a typing indicator feature in your chat application using Pusher, .NET, C# code and some jQuery. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-comments-aspnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build realtime comments using ASP.NET</h3><p class="css-k12xad e5jrto45">Build a mini-blog engine with live commentary features using .NET. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-feed-aspnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a photo feed using ASP.NET</h3><p class="css-k12xad e5jrto45">Build a mini system that allows people to upload their photographs in realtime.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/counter-aspnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Counter</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime counter using ASP.NET</h3><p class="css-k12xad e5jrto45">Create a live website visits counter using ASP.NET and jQuery.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Prev</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials0c64.html?product=Channels&amp;tag=ASP.NET&amp;page=1" class="css-2wakph edg0byb1">1</a><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsc4ef.html?product=Channels&amp;tag=ASP.NET&amp;page=2" class="css-5s6711 edg0byb1">2</a><a href="tutorialsc4ef.html?product=Channels&amp;tag=ASP.NET&amp;page=2" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":11,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4lpahyGo5GCgYAiwygE60Y","type":"Entry","createdAt":"2018-05-21T09:39:52.486Z","updatedAt":"2020-06-19T14:06:19.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an activity feed using .NET","url":"activity-feed-dotnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"projectRepo":"https://github.com/dongido001/ProdFeed","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2zMClYDH68wMGYcoiYC8wI","type":"Entry","createdAt":"2018-02-12T14:44:37.285Z","updatedAt":"2018-02-12T14:44:37.285Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":".NET","url":"net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}}],"reviewDate":"2018-05-20","description":"Build an activity feed and dashboard using .NET. Create two interfaces: one for entering and modifying data, and another that monitors the database and provides alerts when data changes.","prerequisite":"You need .NET and Visual Studio Code installed on your machine, along with the Visual Studio Code C# extension.","content":"Getting a notification for an important event hours after the event is over is really annoying.\nTo be responsive, you need to be in sync with what is happening and as soon as it happens.  Activity feeds allow you to visualize activities in your application and see what is happening in realtime.\n\nIn this tutorial, I'll show you how to integrate an activity feed into your project using ASP.NET Core and Pusher’s [Channels](https://pusher.com/channels). We’ll start by building an application that will allow a user to add a product, view, change status, and delete a product. Then, we'll create a new page that displays in realtime what is happening in the app. \n\nHere is what the final app will look like:\n\n![activity-feed-dotnet-demo](//images.ctfassets.net/1es3ne0caaid/6qeORzrkByakGuiOM0qqy2/648a2cad6a96b0230d8bd68d218ef941/activity-feed-dotnet-demo.gif)\n\n## Prerequisites\n\nThis tutorial uses the following technologies:\n\n\n- JavaScript ([jQuery](http://jquery.com/)) \n- [ASP.NET Core](https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-2.1)\n- [Visual Studio Code](https://code.visualstudio.com/) \n- [.NET Core SDK](https://www.microsoft.com/net/download/core) \u003e= 2.0 (Download and install it [here](https://www.microsoft.com/net/download/core) if you don’t have it)\n- Visual Studio Code [C# extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp) (Install [C# extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp) from the Visual Studio Code Marketplace if you don’t have it installed)\n- A Pusher account\n\nBefore we move on, verify that your installation is complete by typing the below command:\n\n```\n    dotnet --version\n```\n \nIf everything worked correctly, the above command will have an output like below:\n\n![activity-feed-dotnet-version-output](//images.ctfassets.net/1es3ne0caaid/6lEPTDeqlOEskMiosMEgQ8/ed67592803a8ed26fe5079da4f3f2313/activity-feed-dotnet-version-output.png)\n\n## Setting up a Pusher Channels application\n\nTo start utilizing Pusher’s technology, you need to create a Pusher app and get the app keys.  [Log in](https://dashboard.pusher.com/accounts/sign_in) or [sign up](https://dashboard.pusher.com/accounts/sign_up) (if you don’t have an account already) for a free account.\n\nOnce you are [logged in,](https://dashboard.pusher.com/) create a new app then note down your `app_id`, `key`, `secret` and `cluster`. We’ll need it later.\n\n\n## Creating an ASP.NET Core MVC project\n\nWe'll set up an ASP.NET Core project using the `dotnet` command.\n\nOpen up a command line, and enter the below commands:\n\n```\n    mkdir ProdFeed\n    cd ProdFeed\n    dotnet new mvc\n```\nIn the above command,\n\n\n- The first command will create a new folder named `ProdFeed`\n- The second command will change your current directory to the folder you just created\n- And the last command will create a new ASP.NET Core MVC project in your current folder\n\nNext,\n\n\n- Open the `ProdFeed` folder in Visual Studio Code editor and select the `Startup.cs` file.\n\n\n\u003e  💡 If your Visual Studio Code has been added to your system path, you can open the project by typing  `code .` in your command prompt.\n\n\n- Select **Yes** to the **Warn** message \"Required assets to build and debug are missing from `ProdFeed`. Add them?\"\n- Select **Restore** to the **Info** message \"There are unresolved dependencies\" if you got the message.\n\nNow, press **Debug** (F5) to build and run the program. The address in which the project is running will open automatically if there is no error. In case it does not open automatically, navigate to [http://localhost:5000/](http://localhost:5000/) from your browser. You should see a default page.\n\nNext, update `ProdFeed.csproj` with the following code:\n\n``` c#\n    \u003cProject Sdk=\"Microsoft.NET.Sdk.Web\"\u003e\n      \u003cPropertyGroup\u003e\n        \u003cTargetFramework\u003enetcoreapp2.0\u003c/TargetFramework\u003e\n      \u003c/PropertyGroup\u003e\n      \u003cItemGroup\u003e\n        \u003cPackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.3\" /\u003e\n        \u003cPackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.0.0\" /\u003e\n      \u003c/ItemGroup\u003e\n      \u003cItemGroup\u003e\n        \u003cDotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.0\" /\u003e\n        \u003cDotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.1\" /\u003e\n      \u003c/ItemGroup\u003e\n    \u003c/Project\u003e\n```\n\nSave the file and select **Restore** to the **Info** message \"There are unresolved dependencies\". This will prepare the project for scaffolding and enable entity framework tooling. Now we are ready to start building our application.\n\n\n## Adding models\n\nA model is an object that represents the data in our application. For this project, we’ll create a model - `Product` - which will hold our business logic for products.\n\nNow, create a new file named `Product.cs` in the `Models` folder and add the below code to it:\n\n``` c#\n    using System;\n    \n    namespace ProdFeed.Models\n    {\n        public class Product\n        {\n            public int ID { get; set; }\n            public string Name { get; set; }\n            public string Description { get; set; }\n            public bool Status { get; set; }\n            public decimal Price { get; set; }\n        }\n    }\n```\n\n## Creating the database context\n\nThe *database context* is the main class that coordinates [Entity Framework](https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application) functionality for a given data model. We’ll derive from the  `Microsoft.EntityFrameworkCore.DbContext`  to create this class. When we run our migration, a table named `Products` will be created which we’ll use to save products.\n\nCreate a new file called `ProdFeedContext.cs` in the `Models` folder and add the following code to it:\n\n``` c#\n    using Microsoft.EntityFrameworkCore;\n    \n    namespace ProdFeed.Models\n    {\n        public class ProdFeedContext : DbContext\n        {\n            public ProdFeedContext (DbContextOptions\u003cProdFeedContext\u003e options)\n                : base(options)\n            {\n            }\n            public DbSet\u003cProduct\u003e Products { get; set; }\n        }\n    }\n```\n\n## Setting up the database and running migrations\n\nNow that we have created our models, we can easily generate a migration file that will contain code for creating and updating our table schema.\n\nIn this tutorial, we’ll make use of SQLite for our database.\n\nWe’ll register the database context with the [dependency injection](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection) container. Services (such as the DB context) that are registered with the dependency injection container are available to the controllers. \n\nUpdate the code in `ConfigureServices`  method of  `/Startup.cs`  file with the following code:\n\n``` c#\n    [...]\n    public void ConfigureServices(IServiceCollection services)\n    {\n       [...]\n          services.AddDbContext\u003cProdFeedContext\u003e(options =\u003e\n                  options.UseSqlite(\"Data Source=ProdFeed.db\"));\n       [...]\n    }\n    [...]\n```\n\nThis tells Entity Framework which model classes are included in the data model.\n\nFinally, add the following **usings** to the header of `Startup.cs` file:\n\n``` c#\n    using ProdFeed.Models;\n    using Microsoft.EntityFrameworkCore;\n```\nYou can see the database context as a database connection and a set of tables, and the Dbset as a representation of the tables themselves. \n\nThe database context allows us to link our model properties to our database with a connection string (in our case, we are using SQLite)\n\n### Running the migration\n\nFrom your command line, run the following command:\n\n```\n    dotnet ef migrations add ProdFeed\n    dotnet ef database update\n```\n\n- The first command will create a migration script that will be used for managing our database tables\n- The second command will execute the migration script, thereby applying the migration to the database to create the schema\n\n\n\u003e 💡 If you got an error while running the command, stop the debugging or the server and try again.\n\n\n## Adding our controllers\n\nWe’ll need two controllers - `ProdctController` and `FeedController`. The ProductController will be responsible for all product-related logic while the FeedController will be responsible for feeds related logic.\n\n### The Product controller\nNow let’s create the ProductController. Create a new file called `ProductController.cs` in the `Controllers` folder and add the below code to it:\n\n``` c#\n    using System;\n    using System.Collections.Generic;\n    using System.Diagnostics;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using Microsoft.AspNetCore.Mvc;\n    using Microsoft.EntityFrameworkCore;\n    using ProdFeed.Models;\n    \n    namespace ProdFeed.Controllers\n    {\n        public class ProductController : Controller\n        {\n            private readonly ProdFeedContext _context;\n            public ProductController(ProdFeedContext context) \n            {\n                _context = context;\n            }\n        }\n    }\n```\nHere, we have injected `ProdFeedContext` class into the `ProductController` class.\n\nNext, let’s add a method for listing all the products to the views. Add the following code to `ProductController.cs`:\n\n``` c#\n        [...]\n            public async Task\u003cIActionResult\u003e Index()\n            {\n                // get all products..\n                return View(await _context.Products.ToListAsync());\n            }\n        [...]\n```\nThis will fetch all the products on the `Products` table and pass it down to the view.\n\nNext, add the following code to add the `Create` method in `ProductController.cs`:\n\n``` c#\n      [...]\n            [HttpPost]\n            public async Task\u003cIActionResult\u003e Create([Bind(\"ID,Name,Description,Status,Price\")] Product product)\n            {\n                if (ModelState.IsValid)\n                {\n                    _context.Products.Add(product);\n                    await _context.SaveChangesAsync();\n                }\n                return RedirectToAction(nameof(Index));\n            }\n      [...]\n```\nThis method will add a new product to the database.\n\nNext, add the following code to add the `Delete` method in `ProductController.cs`:\n\n``` c#\n        [...]\n            [HttpGet]\n            public async Task\u003cIActionResult\u003e Delete(int id)\n            {\n                var product = new Product { ID = id };\n                _context.Products.Remove(product);\n                await _context.SaveChangesAsync();\n                return RedirectToAction(nameof(Index));\n            }\n        [...]\n```\nThis method will delete a product from the database using the product ID.\n\nNext, add the following code to add the `ChangeStatus` method in `ProductController.cs`:\n\n``` c#\n        [...]\n            [HttpGet]\n            public async Task\u003cIActionResult\u003e ChangeStatus(int id)\n            {\n                var product = await _context.Products.SingleOrDefaultAsync(m =\u003e m.ID == id);\n                product.Status = !product.Status;\n                await _context.SaveChangesAsync();\n                return RedirectToAction(nameof(Index));\n            }\n        [...]\n```\nIn this method, we’ll change the product status, either from “In stock” to “Out of stock” or vice versa.\n\nWith this, we now have four routes available:\n\n\n- http://localhost:5000/Product/Index  - for listing products\n- http://localhost:5000/Product/Create - for creating new product\n- http://localhost:5000/Product/Delete/{id} - for deleting a product\n- http://localhost:5000/Product/ChangeStatus/{id} - for changing a product status\n\nAlthough, if you visit any of the routes, you’ll get an error because we are yet to create their respective views. \n\n### The Feedback controller\nNext, let’s create the controller for feeds.\n\nCreate a new file named `FeedController.cs` in the `Controllers` folder and add the following code to it:\n\n``` c#\n    using Microsoft.AspNetCore.Mvc;\n    \n    namespace ProdFeed.Controllers\n    {\n        public class FeedController : Controller\n        {\n            public IActionResult Index()\n            {\n                return View();\n            }\n        }\n    }\n```\n\n## Adding the views\n\nNow, let’s craft out our views. The layout view allows us to define a common site template, which can be inherited in multiple views to provide a consistent look and feel across multiple pages of our application. \n\nReplace the content in `Views/Shared/_Layout.cshtml` with the below:\n\n``` html\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003c!-- Required meta tags --\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003c!-- Bootstrap CSS --\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css\"\u003e\n        \u003ctitle\u003eHello, world!\u003c/title\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cnav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"\u003e\n            \u003ca class=\"navbar-brand\" href=\"#\"\u003eProduct\u003c/a\u003e\n            \u003cbutton class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"\u003e\n                \u003cspan class=\"navbar-toggler-icon\"\u003e\u003c/span\u003e\n            \u003c/button\u003e\n            \u003cdiv class=\"collapse navbar-collapse\" id=\"navbarText\"\u003e\n                \u003cul class=\"navbar-nav mr-auto\"\u003e\n                    \u003cli class=\"nav-item active\"\u003e\n                        \u003ca class=\"nav-link\" href=\"#\"\u003eHome \u003cspan class=\"sr-only\"\u003e(current)\u003c/span\u003e\u003c/a\u003e\n                    \u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n        \u003c/nav\u003e\n        \u003cdiv class=\"container-fluid\"\u003e\n           @RenderBody()\n        \u003c/div\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\nFor the product page, create a new folder named `Product` in the `Views` folder then create a new file called `Index.cshtml` to the `Product` folder.\n\nNow, add the below code to `Views``/Product/Index.cshtml`:\n\n``` html\n    @model IEnumerable\u003cProdFeed.Models.Product\u003e\n    \n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col\"\u003e\n            \u003cdiv style=\"padding: 40px;\"\u003e\n                \u003ch4 class=\"text-center\"\u003eAdd product\u003c/h4\u003e\n                \u003cform method=\"POST\" action=\"/product/Create\"\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"name\"\u003eName\u003c/label\u003e\n                        \u003cinput \n                          type=\"text\" \n                          class=\"form-control\" \n                          name=\"Name\" \n                          id=\"name\" \n                          placeholder=\"Gala\"\n                        \u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"product_name\"\u003e($)Price\u003c/label\u003e\n                        \u003cinput \n                          type=\"text\" \n                          class=\"form-control\" \n                          name=\"Price\" \n                          id=\"Price\"\n                          placeholder=\"10\"\n                        \u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"status\"\u003eAvailability\u003c/label\u003e\n                        \u003cselect class=\"form-control\" id=\"Status\" name=\"Status\"\u003e\n                            \u003coption value=\"true\"\u003eIn stock\u003c/option\u003e\n                            \u003coption value=\"false\"\u003eOut of Stock\u003c/option\u003e\n                        \u003c/select\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"description\"\u003eDescription\u003c/label\u003e\n                        \u003ctextarea \n                          class=\"form-control\" \n                          id=\"description\" \n                          name=\"Description\" \n                          rows=\"3\"\n                        \u003e\u003c/textarea\u003e\n                    \u003c/div\u003e\n                    \u003cbutton \n                      type=\"submit\" \n                      role=\"submit\" \n                      class=\"btn btn-secondary btn-lg btn-block\"\n                    \u003e\n                      Add Product\n                    \u003c/button\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n         \u003c/div\u003e\n        \u003cdiv class=\"col\"\u003e\n            \u003cdiv class=\"products\" style=\"padding: 40px;\"\u003e\n                \u003ch4 class=\"text-center\"\u003eProducts\u003c/h4\u003e\n                @foreach (var product in Model) {\n                    \u003cdiv class=\"product\"\u003e\n                        \u003cdiv class=\"card\" style=\"margin-bottom: 5px;\"\u003e\n                            \u003cimg \n                              class=\"card-img-top\" \n                              height=\"250\"\n                              src=\"https://www.africalinked.com/images/product-default.png\" \n                              alt=\"Product image\"\n                            \u003e\n                            \u003cdiv class=\"card-body\"\u003e\n                              \u003ch5 class=\"card-title\"\u003e@product.Name\u003c/h5\u003e\n                              \u003cp class=\"card-text\"\u003e@product.Description\u003c/p\u003e\n                              \u003cp class=\"card-text\"\u003e$@product.Price\u003c/p\u003e\n                               @if (product.Status) {\n                                 \u003cspan style=\"color: green\"\u003eIn Stock\u003c/span\u003e\n                               } else {\n                                 \u003cspan style=\"color: red\"\u003e Out of Stock  \u003c/span\u003e\n                               }\n                            \u003c/div\u003e\n                            \u003cdiv class=\"card-footer\"\u003e\n                                \u003cdiv class=\"row\"\u003e\n                                   \u003cdiv class=\"col\"\u003e\n                                      \u003ca \n                                        type=\"link\"\n                                        asp-controller=\"Product\"\n                                        asp-route-id=\"@product.ID\"\n                                        asp-action=\"Delete\"\n                                        role=\"button\"\n                                        class=\"btn btn-secondary btn-lg btn-block\"\n                                      \u003e\n                                       Delete\n                                      \u003c/a\u003e\n                                    \u003c/div\u003e\n                                    \u003cdiv class=\"col\"\u003e\n                                      \u003ca\n                                        type=\"link\"\n                                        asp-controller=\"Product\"\n                                        asp-route-id=\"@product.ID\"\n                                        asp-action=\"ChangeStatus\"\n                                        role=\"button\"\n                                        class=\"btn btn-secondary btn-lg btn-block\"\n                                      \u003e\n                                      @if (!product.Status) {\n                                        \u003cspan\u003eIn stock\u003c/span\u003e\n                                      }\n                                      else\n                                      {\n                                        \u003cspan\u003eOut of Stock\u003c/span\u003e\n                                      }\n                                      \u003c/a\u003e\n                                    \u003c/div\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                }\n            \u003c/div\u003e\n         \u003c/div\u003e\n    \u003c/div\u003e\n```\nNow, we have our product page where users can add, delete or change the status of a product. The page will have two columns. The first column is for adding a new product while the second column will be used to display products.\n\n### Creating the feed page\nCreate a new folder named `Feed` in the `Views` folder then add a new file called `Index.cshtml` to the `Feed` folder.\n\nNow, add the below code to `Views``/Feed/Index.cshtml`:\n\n``` html\n    \u003cstyle\u003e\n       .feed {\n           padding: 2px 10px;\n           background-color:#6c757d;\n           margin: 4px; \n           color:aliceblue;\n           border-radius: 3px;\n       }\n    \u003c/style\u003e\n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col\"\u003e\n            \u003cdiv class=\"container\" style=\"padding: 40px;\"\u003e\n                \u003ch4 class=\"text-center\"\u003eFeeds\u003c/h4\u003e\n                \u003cdiv id=\"feeds\"\u003e\n                    \u003c!-- feeds --\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n         \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n```\n\n## Subscribing to a channel, triggering and listening for events\n\nWe’ll subscribe to a channel called `feed` on the feed page. Then we’ll continuously listen for `new_feed` events. When there is any activity, we’ll trigger an event to Pusher's server so that Pusher will broadcast the event to the client (our feed page). Then we’ll act on the event to display the feed for that activity.\n\n### Installing the Pusher library\nPusher has a .NET library that makes it easy to interact with its API. We need to add this to the project.\n\nFrom your command line, install the library by running the below command: \n\n```\n    dotnet add package PusherServer\n```\n\nChannel helper class and events\nLet’s create a helper class that we’ll use to trigger event to Pusher. \n\nCreate a new folder called `Helpers` in the root folder of the project then create a new file named `ChannelHelper.cs` in the folder you just created.\n\nThen, add the following code to `ChannelHelper.cs`:\n \n``` c#\n    using System.Threading.Tasks;\n    using Microsoft.AspNetCore.Mvc;\n    using PusherServer;\n    \n    namespace ProdFeed.Helpers\n    {\n        public class Channel\n        {\n            public static async Task\u003cIActionResult\u003e Trigger(object data, string channelName, string eventName)\n            {\n                var options = new PusherOptions\n                {\n                    Cluster = \"\u003cPUSHER_APP_CLUSTER\u003e\",\n                    Encrypted = true\n                };\n                var pusher = new Pusher(\n                  \"\u003cPUSHER_APP_ID\u003e\",\n                  \"\u003cPUSHER_APP_KEY\u003e\",\n                  \"\u003cPUSHER_APP_SECRET\u003e\",\n                  options\n                );\n            \n                var result = await pusher.TriggerAsync(\n                  channelName,\n                  eventName,\n                  data\n                );\n                return new OkObjectResult(data);\n            }\n        }\n    }\n```\nIn the preceding code,\n\n- We created a method called `Trigger` which accepts `data`, `channelName` and `eventName` as parameters. We’ll use this method to trigger events to Pusher\n- Then, we included the Pusher library. Although we’ve not yet installed the library, we’ll do so in the next step\n- Next, we initialized the .NET library\n- Finally, we triggered an event to Pusher using the parameters passed to the method\n\nMake sure to update the code with your correct Pusher keys.\n\n### Import the ChannelHelper class to ProductController.cs\n\nAdd the bellow **using** to `ProductController.cs`:\n\n```\n    using ProdFeed.Helpers;\n```\n\n### Trigger an event when a new product is added\n\nUpdate the `Create` method in the `ProductController.cs` with the folowing code:\n\n``` c#\n            [HttpPost]\n            public async Task\u003cIActionResult\u003e Create([Bind(\"ID,Name,Description,Status,Price\")] Product product)\n            {\n                if (ModelState.IsValid)\n                {\n                    _context.Products.Add(product);\n                    await _context.SaveChangesAsync();\n                    \n                    var data = new {\n                        message = System.String.Format(\"New product with ID of #{0} added\", product.ID)\n                    };\n                    await Channel.Trigger(data, \"feed\", \"new_feed\");\n                }\n                return RedirectToAction(nameof(Index));\n            }\n```\n\nHere we added code for triggering an event to Pusher once a new product has been created using `await Channel.Trigger(data, \"feed\", \"new_feed\");`.\n\n### Trigger an event when a product is deleted\n\nNext, update the `Delete` method in the `ProductController.cs` class with the following code:\n\n``` c#\n            [HttpGet]\n            public async Task\u003cIActionResult\u003e Delete(int id)\n            {\n                var product = new Product { ID = id };\n                _context.Products.Remove(product);\n                await _context.SaveChangesAsync();\n                var data = new {\n                    message = System.String.Format(\"Product with ID of #{0} deleted\", product.ID)\n                };\n                await Channel.Trigger(data, \"feed\", \"new_feed\");\n                return RedirectToAction(nameof(Index));\n            }\n```  \n\nWhen we delete a product, we’ll trigger an event to Pusher.\n\n### Trigger an event when a product status is changed\n\nFinally, update the `ChangeStatus` method in the `ProductController.cs` class with the following code:\n\n``` c#\n            [HttpGet]\n            public async Task\u003cIActionResult\u003e ChangeStatus(int id)\n            {\n                var product = await _context.Products.SingleOrDefaultAsync(m =\u003e m.ID == id);\n                product.Status = !product.Status;\n                await _context.SaveChangesAsync();\n                \n                var status = product.Status ? \"In stock\" : \"Out of Stock\";\n                var data = new {\n                    message = System.String.Format(\"Status of product with ID #{0} status changed to '{1}'\", product.ID, status)\n                };\n              \n                await Channel.Trigger(data, \"feed\", \"new_feed\");\n                \n                return RedirectToAction(nameof(Index));\n            }\n```\nWhen the status of a product changes, we’ll trigger an event to Pusher using `await Channel.Trigger(data, \"feed\", \"new_feed\");`\n\n### Listening and responding to events\n\nNow we can trigger events on the server side when there is an activity going on. Next, we'll respond to those events on the client side. We’ll do this using the Pusher JavaScript library we’ve included earlier.\n\nInitiate the Pusher JavaScript library by adding the below code to `Views/Feed/Index.cshtml` file:\n\n``` html\n    [...]\n    \u003cscript type=\"text/javascript\"\u003e\n        const pusher = new Pusher('\u003cPUSHER_APP_KEY\u003e', {\n            cluster: '\u003cPUSHER_APP_CLUSTER\u003e'\n        });\n    \u003c/script\u003e\n```\nMake sure to update the code with your correct Pusher keys.\n\nNext, subscribe to a channel. Add the below code to `Views/Feed/Index.cshtml` between the `\u003cscript\u003e` tag:\n\n``` html\n    [...]\n        const channel = pusher.subscribe('feed');\n    [...]\n```  \n\nNext, listen for `new_feed` events and respond to them when they happen. Add the below code to `Views/Feed/Index.cshtml` between the `\u003cscript\u003e` tag:\n\n``` c#\n    [...]\n        channel.bind('new_feed', function(data) {\n          $(\"#feeds\").append(`\n              \u003cdiv class=\"feed\"\u003e\n                  \u003cdiv class=\"feed\" style=\"margin-bottom: 5px;\"\u003e\n                      ${data.message}\n                  \u003c/div\u003e\n              \u003c/div\u003e\n          `);\n        });\n    [...]\n```\nAnd that’s it! There you have your working activity feed. Load up the pages (the product page - http://localhost:5000/Product and the feed page - http://localhost:5000/Feed) in a different tab in your browser then add or delete a product.\n\n\n## Conclusion\n\nIn this tutorial, we built a simple app to demonstrate how you can add an activity feed to your apps. Feeds will be visible to every user using the app. But at times, this might not be what you want. You may want to send the notification to some targeted user. This means you need to subscribe to a private channel instead of a public channel. You can read more about the [private channels](https://pusher.com/docs/client_api_guide/client_private_channels) here.\nAlso, you can get the complete code of this app on [Github](https://github.com/dongido001/ProdFeed.git).\n\n","metaTitle":"Build an activity feed using .NET","metaDescription":"This tutorial uses .NET to create an activity feed. You will build an app with two pages: one to modify data, and one to monitor the database and provide updates when it changes."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3w7v5MGJmM86Yk026kIEqg","type":"Entry","createdAt":"2018-05-03T10:19:29.225Z","updatedAt":"2020-06-19T14:16:32.165Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an online collaborative text editor using .NET","url":"collaborative-text-editor-net","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"projectRepo":"https://github.com/dongido001/CollaText","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2zMClYDH68wMGYcoiYC8wI","type":"Entry","createdAt":"2018-02-12T14:44:37.285Z","updatedAt":"2018-02-12T14:44:37.285Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":".NET","url":"net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-05-02","description":"Learn to build an online document editing app using .NET. Featuring realtime updates for new edits.","prerequisite":"You will need the following installed on your machine: Visual Studio Code with the C# extension, ASP.NET Core and .NET Core SDK.","content":"Whether it’s realtime audio or video chats, or just collaborating on documents in realtime via Google Docs, there are many times when collaborating online in realtime is a huge time saver and a necessity to keep up with your productivity. \n\nIn this article, I’ll walk you through building a basic collaborative text editor using ASP.NET Core. A user can create any number of documents, view or update the document. I’ll reference these documents as `pen`.\n\n\n## Prerequisites\n\nThis tutorial uses the following:\n\n- JavaScript ([jQuery](http://jquery.com/)) \n- [ASP.NET Core](https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-2.1)\n- [Visual Studio Code](https://code.visualstudio.com/) \n- [.NET Core SDK](https://www.microsoft.com/net/download/core) (Download and install it [here](https://www.microsoft.com/net/download/core) if you don’t have it)\n- Visual Studio Code [C# extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp) (Install [C# extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp) from the Visual Studio Code Marketplace if you don’t have it installed)\n- A Pusher account\n\nVerify your setup by typing the following in your command line:\n\n```\n      dotnet --version\n```\n\nThe command should print out the version of .NET Core you have installed.\n\n\n## Setting up your Pusher app\n\nTo start utilizing Pusher’s technology, you need to create a Pusher app and get the app keys.  [Login](https://dashboard.pusher.com/accounts/sign_in) or [signup](https://dashboard.pusher.com/accounts/sign_up) (If you don’t have an account already) for a free account.\n\nOnce you are [logged in,](https://dashboard.pusher.com/) scroll down and click on **Create new Channels app**. You will see a modal, fill in the form and then click on **Create my app**.\n\n![collatext-create-pusher-app](//images.ctfassets.net/1es3ne0caaid/6Vj0ibrM52wYI0wka466YE/0384c65245dcf7929dc10cd198c1dd92/collatext-create-pusher-app.png)\n\nAfter submitting the form, the next page that appears is a getting started page with code samples. Click on **App Keys** tab to get your Pusher app details.\n\nKeep the keys handy, we’ll need them later:\n\n```\n    app_id  = \u003cPUSHER_APP_ID\u003e\n    key     = \u003cPUSHER_APP_KEY\u003e\n    secret  = \u003cPUSHER_APP_SECRET\u003e\n    cluster = \u003cPUSHER_APP_CLUSTER\u003e\n```\n\n## Creating an ASP.NET Core MVC project\n\nFirst, create a new folder on your system called `CollaText`. Then from your command line, `cd` into the folder you just created. NB:  `CollaText` can be any name you want.\n\nNext, from your command line, run the following command:\n\n```\n    dotnet new mvc\n```\n\nThis command will create a new ASP.NET Core MVC project in your current folder.\n\nNext, \n\n\n- Open the `CollaText` folder in Visual Studio Code editor and select the `Startup.cs` file.\n\n\n\u003e  💡 If your Visual Studio Code has been added to your system path, you can open the project by typing  **“code** **.****”** (without quotes) in your command prompt.\n\n\n- Select **Yes** to the **Warn** message \"Required assets to build and debug are missing from 'CollaText'. Add them?\"\n- Select **Restore** to the **Info** message \"There are unresolved dependencies\".\n\nNow, Press **Debug** (F5) to build and run the program. The address in which the project is running will open automatically if there is no error. In case it does not open automatically, navigate to [http://localhost:5000/](http://localhost:5000/) from your browser. You should see a default page.\n\nNext, update `CollaText.csproj` with the following code:\n\n``` \n    \u003cProject Sdk=\"Microsoft.NET.Sdk.Web\"\u003e\n      \u003cPropertyGroup\u003e\n        \u003cTargetFramework\u003enetcoreapp2.0\u003c/TargetFramework\u003e\n      \u003c/PropertyGroup\u003e\n      \u003cItemGroup\u003e\n        \u003cPackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.3\" /\u003e\n        \u003cPackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.0.0\" /\u003e\n      \u003c/ItemGroup\u003e\n      \u003cItemGroup\u003e\n        \u003cDotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.0\" /\u003e\n        \u003cDotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.1\" /\u003e\n      \u003c/ItemGroup\u003e\n    \u003c/Project\u003e\n```\n\nSave the file and select **Restore** to the **Info** message \"There are unresolved dependencies\". This will prepare the project for scaffolding.\n\n## Adding models\n\nA model is an object that represents the data in our application. For this project, we’ll create a table that holds data for created `pen` known as `Pens`.\n\nCreate a new file called `Pen.cs` in the `Models` folder and add the following code to it:\n\n``` c#\n    using System;\n    namespace CollaText.Models\n    {\n        public class Pen\n        {\n            public int ID { get; set; }\n            public string Title { get; set; }\n            public string Content { get; set; }\n        }\n    }\n```\n\n## Creating the database context\n\nThe *database context* is the main class that coordinates [Entity Framework](https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application) functionality for a given data model. We’ll derive from the  `Microsoft.EntityFrameworkCore.DbContext`  to create this class.\n\nCreate a new file called `CollaTextPenContext.cs` in the `Models` folder and add the following code to it:\n\n``` c#\n    using Microsoft.EntityFrameworkCore;\n    \n    namespace CollaText.Models\n    {\n        public class CollaTextPenContext : DbContext\n        {\n            public CollaTextPenContext (DbContextOptions\u003cCollaTextPenContext\u003e options)\n                : base(options)\n            {\n            }\n            public DbSet\u003cPen\u003e Pens { get; set; }\n        }\n    }\n```\n\n## Setting up the database and running migrations\n\nNow that we have created our models, we can easily generate a migration file that will contain code for creating and updating our table schema.\n\nIn this article, we’ll make use of SQLite for our database.\n\n### Registering the database context\n\nWe’ll register the database context with the [dependency injection](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection) container. Services (such as the DB context) that are registered with the dependency injection container are available to the controllers. \n\nUpdate the code in `ConfigureServices`  method of  `/Startup.cs`  file with the following code:\n\n``` c#\n    [...]\n    public void ConfigureServices(IServiceCollection services)\n    {\n       [...]\n          services.AddDbContext\u003cCollaTextPenContext\u003e(options =\u003e\n                  options.UseSqlite(\"Data Source=CollaText.db\"));\n       [...]\n    }\n    [...]\n```\n\nThis tells Entity Framework which model classes are included in the data model.\n\nFinally, add the following **usings** to the header of `Startup.cs` file:\n\n``` c#\n    using CollaText.Models;\n    using Microsoft.EntityFrameworkCore;\n```\n\nYou can see the database context as a database connection and a set of tables, and the Dbset as a representation of the tables themselves. The database context allows us to link our model properties to our database with a connection string (in our case, we are using SQLite)\n\n### Running the migration\n\nFrom your command line, run the following command:\n\n```\n    dotnet ef migrations add CollaText\n    dotnet ef database update\n```\n\n- The first command will create a migration script that will be used for managing our database tables.\n- The second command will execute the migration script, thereby applying the migration to the database to create the schema.\n\n\n\u003e 💡 If you got an error while running the command, stop the debugging or the server and try again.\n\n\n## Creating the controller\n\nWe’ll create a controller called `PenController.cs` for handling browser requests.\n\nCreate a new file called `PenController.cs` in the `Controllers` folder and add the following code to it:\n\n``` c#\n    using System.Linq;\n    using System.Threading.Tasks;\n    using Microsoft.AspNetCore.Mvc;\n    using Microsoft.EntityFrameworkCore;\n    using CollaText.Models;\n    using System.Net;\n    \n    namespace CollaText.Controllers\n    {\n        public class PenController : Controller\n        {\n            private readonly CollaTextPenContext _context;\n            public PenController(CollaTextPenContext context)\n            {\n                _context = context;\n            }\n            // GET: Pen\n            public async Task\u003cIActionResult\u003e Index(int? id)\n            {\n                ViewData[\"Pen\"] = _context.Pens.SingleOrDefault(d =\u003e d.ID == id);\n                return View(await _context.Pens.ToListAsync());\n            }\n        }\n    }\n```\nIn the preceding code:\n\n- The constructor uses [dependency injection](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection) to inject the database context (`CollaTextPenContext` ) into the controller. We have injected `*CollaTextPenContext*` context into the class so we can have access to the context.\n- `int? id` parameter passed in the `Index` method indicates that the `id` parameter is optional for the route.\n- Next, we fetched a single pen using the passed in `id`, which is passed to the view via `ViewData`.\n- Lastly, with `await _context.Pens.ToListAsync()`, we fetched all pens in the database and passed it down to the view.\n\nWith that, we now have a route - `localhost:xxxx/Pen/Index/{id}`.\n\n\n## Creating the app UI\n\nAdd the following styling to `wwwroot/css/site.css`:\n\n``` css\n    .vertical-center {\n       min-height: 80%;\n       min-height: 80vh;\n       display: grid;\n       align-items: center;\n    }\n    \n    .pen \u003e a:link, a:visited  {\n        display: block;\n        text-decoration: none;\n        background: gray;\n        color:azure;\n        padding: 9px;\n        border-radius: 3px;\n        margin: 4px;\n        font-weight: bolder;\n     }\n    .pen \u003e a:hover, a:active  {\n       border-left: 4px solid burlywood;\n     }\n    \n    #editor[contenteditable=true] {\n        min-height: 150px;\n        border: 1px solid lightblue;\n        border-radius: 4px;\n        padding: 3px;\n    }\n    \n    #title[contenteditable=true] {\n      min-height: 40px;\n      border: 1px solid lightblue;\n      border-radius: 4px;\n      line-height: 2.6;\n      padding: 3px;\n      margin-bottom: 6px;  \n      font-size: 16px;\n    }\n        \n    [contenteditable=true]:empty:before {\n      content: attr(placeholder);\n      display: block;\n    }\n```\n\nNext, let’s add our view file. Create a new folder called `Pen` in the `Views` folder. Then create a  `Index.cshtml` file in the `Views/Pen` folder.\n\nNow, add the following code to `Index.cshtml`:\n\n``` html\n    @model IEnumerable\u003cCollaText.Models.Pen\u003e\n    @{\n        ViewData[\"Title\"] = \"Index\";\n        Pen pen = (Pen) ViewData[\"Pen\"];\n    }\n    \u003cdiv class=\"container-fluid vertical-center\"\u003e\n       \u003ch3 class=\"text-center\"\u003e Realtime collaborative text editor \u003c/h3\u003e\n       \u003cdiv class=\"row\"\u003e \n         \u003cdiv class=\"col-md-3\"\u003e\n            \u003cdiv class=\"pen\"\u003e\n                \u003ca class=\"\" href=\"#\" data-toggle=\"modal\" data-target=\"#myModal\"\u003e\n                   Create New Pen\n                \u003c/a\u003e\n            \u003c/div\u003e \u003cbr\u003e\n            \u003cdiv id=\"Pen\"\u003e\n                @foreach (var item in Model) {\n                    \u003cdiv class=\"pen\"\u003e\n                        \u003ca class=\"\" asp-route-id=\"@item.ID\"\u003e \n                            @Html.DisplayFor(modelItem =\u003e item.Title)\n                        \u003c/a\u003e\n                    \u003c/div\u003e\n                }\n            \u003c/div\u003e\n         \u003c/div\u003e\n         @if(pen != null) {\n            \u003cdiv class=\"col-md-9\"\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003cdiv id=\"title\" contenteditable=\"true\" placeholder=\"Enter title here...\"\u003e@pen.Title\u003c/div\u003e\n                    \u003cdiv id=\"editor\" contenteditable=\"true\" placeholder=\"Enter content here...\"\u003e@pen.Content\u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e \n            \u003cinput type=\"hidden\" value=\"@pen.ID\" id=\"penId\"\u003e\n         }\n         else {\n             \u003cp class=\"text-center\"\u003e Select any pen to start editing... \u003c/p\u003e\n         }\n       \u003c/div\u003e\n    \u003c/div\u003e\n    \u003c!-- Modal --\u003e\n    \u003cdiv id=\"myModal\" class=\"modal fade\" role=\"dialog\"\u003e\n      \u003cdiv class=\"modal-dialog\"\u003e\n        \u003c!-- Modal content--\u003e\n        \u003cdiv class=\"modal-content\"\u003e\n          \u003cdiv class=\"modal-header\"\u003e\n            \u003cbutton type=\"button\" class=\"close\" data-dismiss=\"modal\"\u003e\u0026times;\u003c/button\u003e\n            \u003ch4 class=\"modal-title\"\u003eCreate new pen\u003c/h4\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"modal-body\"\u003e\n            \u003cform asp-action=\"Create\"\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003clabel for=\"pen\"\u003ePen Name\u003c/label\u003e\n                    \u003cinput type=\"text\" name=\"Title\" class=\"form-control\" id=\"Title\" placeholder=\"Pen\"\u003e\n                \u003c/div\u003e\n                \u003cbutton type=\"submit\" class=\"btn btn-primary btn-block\"\u003eSubmit\u003c/button\u003e\n            \u003c/form\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"modal-footer\"\u003e\n            \u003cbutton type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\"\u003eClose\u003c/button\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n```\n\nWhen a user visits the route - `/Pen/Index/` , The `Views/Pen/Index.chtml` file will be loaded for the user. \n\nIn the preceding code:\n\n- With `Pen pen = (Pen) ViewData[\"Pen\"]`, we are casting the data passed via ViewData to a Pen Model Object so we can easily access data in the object.\n- With `@foreach (var item in Model) { …`, we are displaying all pen in the database to the view.\n- Finally, we included Pusher JavaScript library.\n\nNow, visit `http://localhost:5000/Pen/Index`, the page should be similar to:\n\n![collatext-preview-1](//images.ctfassets.net/1es3ne0caaid/5Z1hLVyihGuIm6yqQgeAWu/dfd107426203aac7280fb78ef8b077d7/collatext-preview-1.png)\n\n## Creating new pens\n\nLet’s add a method for creating a new pen. When a user clicks on `Create New Pen`, a pop up will show up which contains a form for creating new pen. \n\nAdd the following code to the `PenController` class in `PenController.cs` :\n\n``` c#\n    [HttpPost]\n    [ValidateAntiForgeryToken]\n    public async Task\u003cIActionResult\u003e Create([Bind(\"ID,Title\")] Pen pen)\n    {\n        if (ModelState.IsValid)\n        {\n            _context.Add(pen);\n            await _context.SaveChangesAsync();\n            \n            return RedirectToAction(nameof(Index));\n        }\n        return View(pen);\n    }\n```\nWith this, we now have a POST method route - `/Pen/Create` for creating a new pen. \n\n## Making it realtime\n\nSo far, users can create a new pen, view the pen, and edit it. However other users are not aware of any changes done by other users in realtime. We’ll use Pusher to add realtime feature to our application.\n \n### Installing the Pusher library\nPusher has a .NET library that makes it easy to interact with its API. We need to add this to the project. \n\nFrom your command line, run the following command: \n\n```\n    dotnet add package PusherServer\n```\n\nNext, add the following code to the `PenController` class in `PenController.cs`:\n\n``` c#\n    public async Task\u003cIActionResult\u003e Trigger(object data, string channelName, string eventName)\n    {\n        var options = new PusherOptions\n        {\n          Cluster = \"\u003cPUSHER_APP_CLUSTER\u003e\",\n          Encrypted = true\n        };\n                \n        var pusher = new Pusher(\n            \"\u003cPUSHER_APP_ID\u003e\",\n            \"\u003cPUSHER_APP_KEY\u003e\",\n            \"\u003cPUSHER_APP_SECRET\u003e\",\n             options\n         );\n            \n        var result = await pusher.TriggerAsync(\n            channelName,\n            eventName,\n            data\n        );\n                \n        return new OkObjectResult(data);\n    }\n```\nWe’ll use this method to trigger events to Pusher. Make sure to update the code with your correct pusher Keys you have noted down.\n\nFinally, add the below **using** to the header of `PenController.cs`:\n\n``` c#\n    using PusherServer;\n```\n### Trigger an event to Pusher when a user edits a pen’s content\n\nWhen a user updates a pen’s content, we’ll trigger an event to pusher so that Pusher will broadcast the message to all other connected users.\n\nAdd the following code to to the `PenController` class in `PenController.cs`:\n\n``` c#\n    [HttpPost]\n    public async Task\u003cIActionResult\u003e ContentChange(int penId, string Content, string sessionID)\n    {\n        await Trigger(new {Content = Content, penId = penId, sessionID = sessionID}, \"coll-text-editor\", \"contentChange\");\n        \n        var pen = await _context.Pens.SingleOrDefaultAsync(m =\u003e m.ID == penId);\n        if( pen != null) {\n            pen.Content = Content;\n            _context.SaveChanges();\n         }\n         return new OkObjectResult(new { content = Content, penId = penId, sessionID = sessionID });\n    }\n```\nIn the preceding code:\n\n- We are triggering an event to Pusher using the `Trigger` method we added earlier. \n- In the `Trigger` method, we passed along the data we want to send to Pusher, the channel name - `*coll-text-editor*`, and the event name - `*contentChange*`.\n- Then we’ll save the updated content to the database.\n\n### Trigger an event to Pusher when a user adds a new pen\n\nPusher assigns all connected users a unique `sessionID`. We’ll use this ID to identify users. Update the parameter of the `Create` method in the `PenController.cs` so it includes this `sessionID`:\n\n``` c#\n    public async Task\u003cIActionResult\u003e Create([Bind(\"ID,Title\")] Pen pen, string sessionID)\n``` \n\nNext, add the following code to the `Create` method in `PenController.cs`:\n\n``` c#\n    await Trigger(new {Title = pen.Title, penId = pen.ID, sessionID = sessionID}, \"coll-text-editor\", \"newPen\");\n```\nIf you have followed closely, the `Create` method will look like this:\n\n``` c#\n    [HttpPost]\n    [ValidateAntiForgeryToken]\n    public async Task\u003cIActionResult\u003e Create([Bind(\"ID,Title\")] Pen pen, string sessionID)\n    {\n       if (ModelState.IsValid)\n       {\n          _context.Add(pen);\n          await _context.SaveChangesAsync();\n          await Trigger(new {Title = pen.Title, penId = pen.ID, sessionID = sessionID}, \"coll-text-editor\", \"newPen\");\n          \n          return RedirectToAction(nameof(Index));\n       }\n       return View(pen);\n    }\n```\nInitializing the Pusher JavaScript client library\n\nAdd the following code to `wwwroot/js/site.js`:\n\n``` javascript\n    var pusher = new Pusher('\u003cPUSHER_APP_KEY\u003e', {\n       cluster: '\u003cPUSHER_APP_CLUSTER\u003e', \n       encrypted: true\n    });\n```\nNext, let’s subscribe to a channel. Add the following code to `wwwroot/js/site.js`:\n\n``` javascript\n    let channel = pusher.subscribe('coll-text-editor');\n```\nIn this case, `coll-text-editor` is the channel name we want to subscribe to.\n\nNext, add the following code to `wwwroot/js/site.js`:\n\n``` javascript\n    let timeout = null;\n    // Sends the text to the server which in turn is sent to Pusher's server\n    $(\"#editor\").keyup(function () {\n       let content = $(\"#editor\").text();\n        clearTimeout(timeout);\n        timeout = setTimeout(function() {\n        \n        $.post(\"/Pen/ContentChange\", { content: content, penId: $(\"#penId\").val(), sessionID: pusher.sessionID})\n             }, 300);\n    });\n```\nWhen a user updates a pen’s content, we will send a request to the `ContentChange` method in `Controllers/PenContoller.cs` which in turn triggers an event to Pusher.\n\nNext, let’s listen for `contentChange` event. Add the following code to `wwwroot/js/style.js`:\n\n``` javascript\n    channel.bind('contentChange', function(data) {\n       if ( (data.sessionID != pusher.sessionID) \u0026\u0026 (data.penId == $(\"#penId\").val()) ) {\n          $(\"#editor\").text(data.Content)\n       }\n    });\n```\n\nHere, when there is a `contentChange` event, we’ll update the content of the pen for the user. The `if` condition makes sure the current user is the user that made the change to the pen. Also if the current pen the user is viewing is what is changed so we don’t bother updating the content for that particular user.\n\nFinally, let’s listen for `newPen` event. Add the following code to `wwwroot/js/site.js`:\n\n``` javascript\n    channel.bind('newPen', function(data) {\n      if (data.sessionID != pusher.sessionID) {\n          $(\"#Pen\").append(\n              `\n               \u003cdiv class=\"pen\"\u003e\n                  \u003ca class=\"\" href=\"/Pen/Index/${data.penId}\"\u003e \n                     ${data.Title}\n                  \u003c/a\u003e\n               \u003c/div\u003e\n             `\n         )\n      }\n    });\n```\n\nWhen a new pen is created, we’ll append the pen for other connected users in realtime.\n\nWell done! You have just built a realtime collaborative text editor using Pusher’s amazing technology. To test what you have built, load up the app in a different tab on your browser, then start collaborating.\n\n\n## Conclusion\n\nIn this tutorial, we discussed how to set up an ASP.NET Core application in Visual Studio Code. We’ve also built a realtime collaborative text editor using ASP.NET Core and Pusher. There is no limit of what you can do here, feel free to add new features to the application. You can get the full project on [Github](https://github.com/dongido001/CollaText.git).","metaTitle":"Build an online collaborative text editor using .NET","metaDescription":"This brief tutorial shows you how to build an online document editing app using .NET. Use Pusher Channels to communicate edits in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Sqq3ONHAciKyCuaMUgQg8","type":"Entry","createdAt":"2018-03-08T13:03:35.629Z","updatedAt":"2018-03-13T14:30:39.178Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Write unit tests for ASP.NET","url":"unit-testing-asp","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5KlhqILjZSg4wUSqY4Goqg","type":"Entry","createdAt":"2018-02-20T14:39:32.323Z","updatedAt":"2018-10-02T14:31:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Samuel Ogundipe","url":"samuel-ogundipe","email":"ayoogundipe2005@gmail.com","twitter":"https://twitter.com/fucked_down","github":"https://github.com/samuelayo","guestWriter":true}}],"projectRepo":"https://github.com/samuelayo/ASP_NET_UNIT_TEST","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6xamBfB840ckYKOkIMm6sM","type":"Entry","createdAt":"2018-02-12T14:51:11.677Z","updatedAt":"2018-02-26T12:31:15.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"C#","url":"c-sharp","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}}],"reviewDate":"2018-03-08","description":"Learn how to write unit tests for ASP.NET using a sample app (provided) and the test library supplied by Visual Studio.","prerequisite":"A basic knowledge of ASP.NET and C# will be helpful when working through this tutorial.","content":"Writing unit tests is a critical step in building robust, high-quality software. When developing an application, it is often helpful to write unit tests that make assertions on various methods and how they are used in the application.\n\nIn this article, we’ll look at writing unit tests for ASP.NET applications using the default test library that comes with Visual Studio\n\nNote that a basic understanding of the following is required to follow this guide:\n\n- ASP.NET MVC \n- C#\n\n\n## Setting up our environment\n\nFirst things first, you need an application to test. To speed up this guide and focus on unit testing, grab this sample application [here](https://github.com/samuelayo/Net_real_time_commenting_pusher)\n\nFirst, the process to use the sample app:\n\n```\n    git clone https://github.com/samuelayo/Net_real_time_commenting_pusher.git\n```\n\nAfter cloning, open the `Real-Time-Commenting.sln` file in Visual Studio.\n\nNote: `.sln`  is the acronym for a  `solution` file in `.Net` . The .sln file contains text-based information that the environment uses to find and load the name-value parameters for the persisted data and the project `VSPackages` it references. When a user opens a solution, the environment cycles through the `preSolution`, `Project`, and `postSolution` information in the .sln file to load the solution, projects within the solution, and any persisted information attached to the solution.\n\nCreate a free Pusher account at https://pusher.com/signup then login to your dashboard and \ncreate an app.\n\nTo create an app: \n\n- Click on **Your apps** menu by the side-bar.\n- Click on the create **New app button** by the bottom.\n- Give your app a name, and select a cluster. (It’s also fine to leave the default cluster).\n- Optionally, you can select the back-end tech, which is `.NET` and the front-end stack (`JavaScript`).\n- If you don’t mind, you could also fill in what you’ll be building with Pusher.\n- Click on the **Create my app** button.\n\n\n![Create Pusher app](//images.contentful.com/1es3ne0caaid/3zrjhrp7K0kq0EOeoyAWKm/725ec112a636a8a17c1931609096be51/unit-test-asp-create-app.png)\n\n- Move to the **App Keys** section at the top-bar of your page and copy out your credentials. \n\nFill in your Pusher app credentials in your `Controllers\\HomeController` file by replacing this line with your `XXX_APP_CLUSTER`, `XXX_APP_ID`, `XXX_APP_KEY` and `XXX_APP_SECRET` respectively:\n\n``` C#\n    options.Cluster = \"XXX_APP_CLUSTER\";\n    var pusher = new Pusher(\"XXX_APP_ID\", \"XXX_APP_KEY\", \"XXX_APP_SECRET\", options);\n```\n\nAlso, remember to fill in your secret key and app cluster in your `Views\\Home\\Details.cshtml` file by updating this line:\n\n``` C#\n    var pusher = new Pusher('XXX_APP_KEY', {cluster: 'XXX_CLUSTER'});\n```\n\nTo have a better understanding of what the sample app above does, refer to [this](https://blog.pusher.com/build-a-realtime-commenting-feature-using-net-and-pusher/) tutorial.\n\n\n## Setting up tests\n\nIf you look at the sample application you have cloned, notice that there are no tests in this application. So how do you go about adding tests to an existing application? Visual Studio makes this task an easy one.\n\nClick on **file** at the topbar, navigate to **new**, make another navigation to **project**. A new dialog box will pop up. By the left sidebar of the new dialog, navigate to **visual c#**, then scroll down to **tests**. \n\nBy the middle bar, select **unit test project**. Move down to where you have the name of the project, make sure the name of the project tallies with the name of the project/solution you want to add unit tests for with an extension of `.Tests`. Here, the name will be `Real-Time-Commenting.Tests`. \n\nNext, in the solution section, select **Add to Solution**. Then click **ok**.\n\nThat’s how simple it is to add unit tests to an existing application. Next, you need to write the tests that will be performed.\n\nPlease note you might need to add some new references to your unit test as some libraries might not be available. For this tutorial, a reference to `System.Web.Mvc` will be required, so we can have access to functions like `ViewResult`, `ActionResult`, etc.\n\nTo add this reference: \n\n- Move to the `solution explorer` scroll down to `Real-Time-Commenting.Tests`.\n- Right-click and select `Manage NuGet Packages` and search for `Microsoft.AspNet.``Mvc` in the search bar and hit the search button. \n- Install the `Microsoft.AspNet.Mvc` package . This should be the first package in the search results. \n\nWe have now added the reference to our test.\n\nNext, we need to add a reference to our main app `Real-Time-Commenting`\n\n\n## Understanding the default test\n\nBy default, Visual Studio scaffolds a file called `UnitTest1.cs` as seen :\n\n``` C#\n    using System;\n    using Microsoft.VisualStudio.TestTools.UnitTesting;\n    \n    namespace Real_Time_Commenting.Tests\n    {\n        [TestClass]\n        public class UnitTest1\n        {\n            [TestMethod]\n            public void TestMethod1()\n            {\n            }\n        }\n    }\n```\n\nIn the code block above, there are three main differences from a normal ASP.NET class, which are:\n\n- The reference to `Microsoft.VisualStudio.TestTools.UnitTesting` which exposes the other two differences which I will point out next.\n- The `[TestClass]` decorator: any Class to be used for testing must have this decorator just before the class decoration.\n- The `[TestMethod]` decorator: any function which tests and asserts anything must have this decorator. Any method without this decorator will be treated as a normal method.\n\n\n## Writing your first test\n\nLet us take a quick look at writing a functional test. We will attempt to test the `create` function of our `Homecontroller` first as it does not interact with our database yet.\n\nOur test is seen below:\n\n``` C#\n    using System;\n    using Real_Time_Commenting.Controllers;\n    using System.Web.Mvc;\n    using Microsoft.VisualStudio.TestTools.UnitTesting;\n    namespace Real_Time_Commenting.Tests\n    {\n        [TestClass]\n        public class UnitTest1\n        {\n            [TestMethod]\n            public void CreateGet()\n            {\n                HomeController HomeController = new HomeController();\n                ViewResult result = HomeController.Create() as ViewResult;\n                Assert.IsNotNull(result);\n                Assert.IsInstanceOfType(result, typeof(ViewResult));\n                Assert.AreEqual(string.Empty, result.ViewName);\n            }\n        }\n    }\n```\n\nThe test above shows how easy it is to test a controller method. In our `CreateGet` method, we\n\n- Created a new instance of the HomeController\n- Called the Create function and cast it to be of type `ViewResult` which makes sense as the function returns a view.\n- Assert that the result is not null\n- Assert that the result is truly an instance of ViewResult\n- Assert that the `ViewName` is empty. This should pass as we only called `return view()` in the method, passing no argument/name to the view function.\n\n\n## Testing methods that interact with the database\n\nIn the section above, we saw how easy it is to setup and write our first unit test. It would be nice if that were how all controllers behaved. However, in a real-world application, calls would be made to the database, and we will need to test methods that interact with the database.\n\nThere are different methods to achieve this kind of test such as `mocking`, using fake `DbContext` and a lot more.\n\nIn this piece, we will use a fake `DbContext` to test methods that interact with the database.\n\n### Adding an interface\nUsually, in ASP.NET applications, the DB context is usually a class that has classes defined (our models), using the DbSet class which can be found in `Models\\IdentityModel.cs`.\n\n`DbSet\u003cT\u003e` implements `IDbSet\u003cT\u003e`, so we can create an interface for our context to implement the `IDbSet` class.\n\nOpen your `Models\\IdentityModels.cs` file and replace the `ApplicationDbContext` class with:\n\n``` C#\n    public class ApplicationDbContext : IdentityDbContext\u003cApplicationUser\u003e, IrealtimeContext\n    {\n        public ApplicationDbContext()\n            : base(\"DefaultConnection\", throwIfV1Schema: false)\n    \n        {\n        }\n    \n        public static ApplicationDbContext Create()\n        {\n            return new ApplicationDbContext();\n        }\n    \n        public IDbSet\u003cBlogPost\u003e BlogPost { get; set; }\n        public IDbSet\u003cComment\u003e Comment { get; set; }\n    }\n```\n\nIn the code block above, we notice that:\n\n- We have added a new interface called `IrealtimeContext` which the `ApplicationDbContext` must implement.\n- The public properties `BlogPost` and `Comment` now implement the `IDbSet` class directly.\n\nNext, we need to create the `IrealtimeContext` class which we asked the `ApplicationDbContext` class to implement. Just after the code block above, add:\n\n``` C#\n    public interface IrealtimeContext\n    {\n        IDbSet\u003cBlogPost\u003e BlogPost { get; }\n        IDbSet\u003cComment\u003e Comment { get; }\n        int SaveChanges();\n    }\n```\n\nNow we can update our controller to be based on this interface rather than the `EF` specific implementation.\n\nNote: `EF` stands for Entity Framework, which is the framework used for database interactions in ASP.NET MVC.\n\nOpen your `HomeController`, replace the line that says `ApplicationDbContext db = new ApplicationDbContext();` with this code block:\n\n``` C#\n    private readonly IrealtimeContext db;\n    public HomeController() {\n        db = new ApplicationDbContext();\n    }\n    public HomeController(IrealtimeContext context)\n    {\n        db = context;\n    }\n```\n\nHere, we created a constructor with an overloaded method which assigns the instance of our DB based on the parameter supplied. While testing, we will pass in our own fake `IDbset` instance which does not commit to the database but rather uses a data access layer with an in-memory fake.\n\n### Building the fake implementation\nHere, we need to build a fake implementation of `IDbSet\u003cTEntity\u003e`, this is easy to implement. We need to make functions like `Add`, `Find`, `Attach`, `Remove`, `Detach`, `Create` and other methods exposed by the `IDbSet` interface available. In your `Tests` solution, create a new file called `FakeDbSet.cs` and add:\n\n``` C#\n    using Real_Time_Commenting.Models;\n    using System;\n    using System.Collections.Generic;\n    using System.Collections.ObjectModel;\n    using System.Data.Entity;\n    using System.Linq;\n    using System.Web;\n    \n    namespace Real_Time_Commenting.Tests\n    {\n        public class FakeDbSet\u003cT\u003e : IDbSet\u003cT\u003e\n        where T : class\n        {\n            ObservableCollection\u003cT\u003e _data;\n            IQueryable _query;\n            \n            //constructor\n            \n            public FakeDbSet()\n            {\n                _data = new ObservableCollection\u003cT\u003e();\n                _query = _data.AsQueryable();\n            }\n            \n            //find function\n            \n            public virtual T Find(params object[] keyValues)\n            {\n                throw new NotImplementedException(\"Derive from FakeDbSet\u003cT\u003e and override Find\");\n            }\n            \n            // add function\n            \n            public T Add(T item)\n            {\n                _data.Add(item);\n                return item;\n            }\n            //remove function\n            public T Remove(T item)\n            {\n                _data.Remove(item);\n                return item;\n            }\n            \n            // Attach function\n            \n            public T Attach(T item)\n            {\n                _data.Add(item);\n                return item;\n            }\n            \n            //  Detach function\n            \n            public T Detach(T item)\n            {\n                _data.Remove(item);\n                return item;\n            }\n            \n            // Create function\n            \n            public T Create()\n            {\n                return Activator.CreateInstance\u003cT\u003e();\n            }\n        }\n    }\n```\n\nNext, we also want to fake some other functions and properties which will be used in the fake `DbSet` such as `ObservableCollection`, `ElementType`, `Expression`, `provider` `GetEnumerator` etc. Below is what the fake implementation looks like:\n\n``` C#\n    public TDerivedEntity Create\u003cTDerivedEntity\u003e() where TDerivedEntity : class, T\n    {\n        return Activator.CreateInstance\u003cTDerivedEntity\u003e();\n    }\n    \n    public ObservableCollection\u003cT\u003e Local\n    {\n        get { return _data; }\n    }\n    \n    Type IQueryable.ElementType\n    {\n        get { return _query.ElementType; }\n    }\n    \n    System.Linq.Expressions.Expression IQueryable.Expression\n    {\n        get { return _query.Expression; }\n    }\n    \n    IQueryProvider IQueryable.Provider\n    {\n        get { return _query.Provider; }\n    }\n    \n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()\n    {\n        return _data.GetEnumerator();\n    }\n    \n    IEnumerator\u003cT\u003e IEnumerable\u003cT\u003e.GetEnumerator()\n    {\n        return _data.GetEnumerator();\n    }\n```\n\nThe above block is a class which implements all the compulsory methods of the `IDbSet\u003cTEntity\u003e`, which stores objects in memory, as opposed to writing them to a database.\n\nNote that in the code above, we have no logic in our `Find` method. This is because the find implementation for various models might vary. So instead we return a virtual function that would be overridden.\n\nNext, let us overwrite the find function for our `BlogPost` and `Comments` models.\n\n``` C#\n    public class FakeBlogPostSet : FakeDbSet\u003cBlogPost\u003e\n    {\n        public override BlogPost Find(params object[] keyValues)\n        {\n            return this.SingleOrDefault(e =\u003e e.BlogPostID == (int)keyValues.Single());\n        }\n    }\n    \n    public class FakeCommentSet : FakeDbSet\u003cComment\u003e\n    {\n        public override Comment Find(params object[] keyValues)\n        {\n            return this.SingleOrDefault(e =\u003e e.BlogPostID == (int)keyValues.Single());\n        }\n    }\n    \n    public class FakedbContext : IrealtimeContext\n    {\n        public FakedbContext()\n        {\n            this.BlogPost = new FakeBlogPostSet();\n            this.Comment = new FakeCommentSet();\n        }\n    \n        public IDbSet\u003cBlogPost\u003e BlogPost { get; private set; }\n    \n        public IDbSet\u003cComment\u003e Comment { get; private set; }\n    \n        public int SaveChanges()\n        {\n            return 0;\n        }\n    }\n```\n\nIn the code block above, we have three separate classes. The first two classes implement our `FakeDbSet` class, with an argument of which model we are associating with it. As of now, we have only two models in our application, hence the names `FakeBlogPostSet` for the `BlogPost` model and `FakeCommentSet` for the `Comments` model.\n\nBecause these classes implement our `FakeDbSet` class, we can override the `Find` method in the class declaration.\n\nIn the `FakeBlogPostSet` we override the find function and tell it to return the collection whose `BlogPostID` matches the id.\n\nIn the `FakeCommentSet` we override the find function and tell it to return the collection whose `BlogPostID` matches the id. Note here that we are not checking against the `CommentID` because the application we are testing returns all comments that belong to a `BlogPost`.\n\nFinally, we have the `FakedbContext` class. This class implements the `IrealtimeContext` which we had interfaced in our `Models\\IdentityModels.cs` file. Remember that to pass any `DbContext` to our application, It must interface this Class.\n\nNow we can import our `FakedbContext` class, pass it to our controller during tests and have it use memory to store our test objects.\n\n### Rewriting our first test with the new FakedbContext\nIn our first test, we wrote a test for the `create` function of our `Homecontroller` first as it does not interact with our database yet. While it still does not interact with our database, I’d like to show you you how our new `FakedbContext` does not affect the function when passed to the controller.\n\n``` C#\n    using System;\n    using Real_Time_Commenting.Controllers;\n    using System.Web.Mvc;\n    using Microsoft.VisualStudio.TestTools.UnitTesting;\n    namespace Real_Time_Commenting.Tests\n    {\n        [TestClass]\n        public class UnitTest1\n        {\n            [TestMethod]\n            public void CreateGet()\n            {\n                var context = new FakedbContext { };\n                HomeController HomeController = new HomeController(context);\n                ViewResult result = HomeController.Create() as ViewResult;\n                Assert.IsNotNull(result);\n                Assert.IsInstanceOfType(result, typeof(ViewResult));\n                Assert.AreEqual(string.Empty, result.ViewName);\n            }\n        }\n    }\n```\n\nNotice any difference in the code above from our first test? Yes. The difference here is that:\n\n- We defined a new context of class `FakedbContext` which we passed into the constructor of the HomeController. If you run your tests it would pass with no failure.\n\n\n## Testing all methods in our controller\n\nNow we have our super `FakedbContext` setup, we can test all methods in our controller which consist of view responses, JSON responses and async tasks with a string response.\n\n### Testing the index method\n\n``` C#\n    using System.Web.Mvc;\n    using Microsoft.VisualStudio.TestTools.UnitTesting;\n    using Real_Time_Commenting.Controllers;\n    using Real_Time_Commenting.Models;\n    using System.Linq;\n    using System.Threading.Tasks;\n    \n    namespace Real_Time_Commenting.Tests\n    {\n        [TestClass]\n        public class UnitTest1\n        {\n            [TestMethod]\n            public void TestIndex()\n            {\n                var context = new FakedbContext { BlogPost = { new BlogPost { Title = \"test\", Body=\"test\" } } };\n                HomeController HomeController = new HomeController(context);\n                ViewResult result = HomeController.Index() as ViewResult;\n                Assert.IsInstanceOfType(result.ViewData.Model, typeof(IEnumerable\u003cBlogPost\u003e));\n                var posts = (IEnumerable\u003cBlogPost\u003e)result.ViewData.Model;\n                Assert.AreEqual(\"test\", posts.ElementAt(0).Title);\n                Assert.AreEqual(\"test\", posts.ElementAt(0).Body);\n            }\n        }\n    }\n```\n\n`TestIndex`: this method tests the `Index` function of our `HomeController`. The `Index` method returns a view alongside a list of all the `BlogPosts` in our database.\n\nFirst, we declare a variable called context which is an instance of our `FakedbContext` class passing in a new `BlogPost` object, we then pass in the new context to the `constructor` of our `HomeController`.\n\nNext, we call the `Index` function of our `HomeController`, casting it to be of type `ViewResult`. \n\n  \n\nWe then check if the result is of type `IEnumerable\u003cBlogPost\u003e`, we also check that the title and body of the first object equal the title and body we had set in our `FakeDbContext`.\n\n### Testing the details method\n\n``` C#\n    using System.Web.Mvc;\n    using Microsoft.VisualStudio.TestTools.UnitTesting;\n    using Real_Time_Commenting.Controllers;\n    using Real_Time_Commenting.Models;\n    using System.Linq;\n    using System.Threading.Tasks;\n    \n    namespace Real_Time_Commenting.Tests\n    {\n        [TestClass]\n        public class UnitTest1\n        {\n            [TestMethod]\n            public void TestDetails()\n            {\n                var context = new FakedbContext { BlogPost = { new BlogPost { BlogPostID=1, Title = \"test\", Body = \"test\" } } };\n                HomeController HomeController = new HomeController(context);\n                ViewResult result = HomeController.Details(1) as ViewResult;\n                Assert.IsInstanceOfType(result.ViewData.Model, typeof(BlogPost));\n                var post = (BlogPost)result.ViewData.Model;\n                Assert.AreEqual(1, post.BlogPostID);\n    \n            }\n        }\n    }\n```\n\n`TestDetails`: this method tests the details method of our `HomeController`. The details method accepts an integer parameter called `id`. It uses this id to fetch the `BlogPost` whose id matches in the database, then returns a view alongside the result it gets from the database.\n\nFirst, we declare a variable called context which is an instance of our `FakedbContext` class passing in a new `BlogPost` object, we then pass in the new context to the `constructor` of our `HomeController`.  \n\nNext, we call the details method, passing in `1` as the id we want to retrieve, casting it to be of type `ViewResult`. We then verify that the result’s model is of our `BlogPost` type. Also, we verify that the id of the data returned by the method is equal to 1.\n\n\n### Testing the post action of the create method\n\n``` C#\n    using System.Web.Mvc;\n    using Microsoft.VisualStudio.TestTools.UnitTesting;\n    using Real_Time_Commenting.Controllers;\n    using Real_Time_Commenting.Models;\n    using System.Linq;\n    using System.Threading.Tasks;\n    \n    namespace Real_Time_Commenting.Tests\n    {\n        [TestClass]\n        public class UnitTest1\n        {\n            [TestMethod]\n            public void CreatePost()\n            {\n                var context = new FakedbContext{};\n                 BlogPost Post = new BlogPost();\n                 Post.Title = \"Test Post\";\n                 Post.Body = \"Test Body\";\n                 HomeController HomeController = new HomeController(context);\n                RedirectToRouteResult result = HomeController.Create(Post) as RedirectToRouteResult;\n                Assert.AreEqual(\"Index\", result.RouteValues[\"Action\"]);\n                Console.WriteLine(result.RouteValues);\n                 Assert.IsNotNull(result.ToString());\n            }\n        }\n    }\n```\n\n`CreatePost`: this method test the `POST` method for `create`. This create method adds a new post, and then returns a `RedirectToAction`.\n\nFirst, we declare a variable called context which is an instance of our `FakedbContext` class. Next, we create a new `BlogPost` instance passing in the `title` and the `body`. We then call the create method passing in our new `BlogPost` object, casting the result to type `RedirectToRouteResult`.\n  \n\nNote: we cast the result type here to type RedirectToRouteResult because the method we are testing here returns a `RedirectToAction`.\n\nWe assert that the result’s `RouteValues[\"Action\"]` is equal to `index` which means `RedirectToAction` triggered a redirect to the `index` method.\n\n### Testing the comments method\n\n``` C#\n    using System.Web.Mvc;\n    using Microsoft.VisualStudio.TestTools.UnitTesting;\n    using Real_Time_Commenting.Controllers;\n    using Real_Time_Commenting.Models;\n    using System.Linq;\n    using System.Threading.Tasks;\n    \n    namespace Real_Time_Commenting.Tests\n    {\n        [TestClass]\n        public class UnitTest1\n        {\n            [TestMethod]\n            public void TestComments()\n            {\n                var context = new FakedbContext { Comment = { new Comment { BlogPostID = 1, CommentID = 1, Name = \"test\", Body = \"test\" }, new Comment { BlogPostID = 1, CommentID = 1, Name = \"test\", Body = \"test\" } } };\n                HomeController HomeController = new HomeController(context);\n                JsonResult result = HomeController.Comments(1) as JsonResult;\n                var list = (IList\u003cComment\u003e)result.Data;\n                Assert.AreEqual(list.Count, 2);\n                Console.WriteLine(list[0].Name.ToString());\n            }\n        }\n    }\n```\n\n`TestComments`: this method test the `comments` method of our Controller. The `comments` method accepts an integer `id` which is the `Id` of the `BlogPost` it wants to get comments for.\n\nFirst, we declare a variable called context which is an instance of our `FakedbContext` class, passing in an object of two comments as our `comments`. Next, we pass the instance to the constructor of our `HomeController`. We then call the `comments` method passing in the id of the `BlogPost` we want to get comments for, casting the result as a `JsonResult`.\n\nJust before we do our assertion, we cast the `JsonResult` to a list of type `comments`. After this, we assert that there are two comments in the response.\n\n### Testing the comment method\n\n``` C#\n    using System.Web.Mvc;\n    using Microsoft.VisualStudio.TestTools.UnitTesting;\n    using Real_Time_Commenting.Controllers;\n    using Real_Time_Commenting.Models;\n    using System.Linq;\n    using System.Threading.Tasks;\n    \n    namespace Real_Time_Commenting.Tests\n    {\n        [TestClass]\n        public class UnitTest1\n        {\n            [TestMethod]\n            public async Task TestComment()\n            {\n                var context = new FakedbContext { };\n                HomeController HomeController = new HomeController(context);\n                var comment = new Comment { BlogPostID = 1, CommentID = 1, Name = \"test\", Body = \"test\" };\n                ContentResult result = await HomeController.Comment(comment) as ContentResult;\n                Assert.AreEqual(result.Content, \"ok\");\n            }\n        }\n    }\n```\n\n`TestComment`: this method tests the async method `Comment` which adds a new comment to the database and broadcasts the comment to Pusher.\n\nFirst, we declare a variable called context which is an instance of our `FakedbContext` class. Next, we pass the context into the constructor of our `HomeController`. We then create a new comment object which we will broadcast, then call the comment method passing in the new comment object.\n\nThe method we are testing returns a string content, and we cast the result to be of type `ContentResult`. Finally, we assert that the results content is equal to the string `ok`.\n\n\n## Conclusion\n\nDuring this tutorial, we have covered how to write unit tests in ASP.NET. \n\nWe have gone through the process of writing tests for an existing ASP.NET and Pusher application.\n\nWe have also covered testing asynchronous methods, methods that return a `RedirectToAction`, `Content`, `View` and `JSON`\n\nThe codebase to this guide can be found [here](https://github.com/samuelayo/ASP_NET_UNIT_TEST). Feel free to download and experiment with the code.","metaTitle":"Write unit tests for ASP.NET","metaDescription":"This tutorial shows how to write unit tests for ASP.NET. It uses the test library that comes with Visual Studio, and a sample app provided by the author."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7fFgA3TznUECEOsUEgWWsM","type":"Entry","createdAt":"2018-02-28T10:56:41.953Z","updatedAt":"2020-06-19T14:33:37.011Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime map using ASP.NET","url":"realtime-map-aspnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-map-dotnet","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}}],"reviewDate":"2018-02-02","description":"Build a realtime map using ASP.NET and Pusher. ","prerequisite":"A basic understanding of ASP.NET and jQuery is needed to follow this tutorial.","content":"Realtime maps are a popular feature in most modern applications. They are used in apps like Uber or Lyft, and in courier and delivery services to track the location of parcels or cabs and to monitor their progress and movement as they make their way to the customer.\n\nIn this article, we will look at how to build a realtime map using .NET and Pusher. Our resulting application will look like this:\n\n![realtime-map-aspnet-demo](//images.contentful.com/1es3ne0caaid/6CNl2xfqP6YOygySaS6k0I/fe08c0dd1e65f2496e67befa9102e652/realtime-map-aspnet-demo.gif)\n\n## Prerequisites\n\nTo follow along with this article, you’ll need:\n\n- Visual Studio IDE, find installation instructions [here](https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio).\n- Basic knowledge of C#.\n- Basic knowledge of JavaScript (ES6 syntax) and jQuery.\n\n## Setting up Pusher and Google Maps\n\nTo achieve our realtime map, we’ll be making use of two services: Pusher and Google Maps.\nPusher is a service that offers simple implementation of realtime functionality in web and mobile applications. We will use it primarily to transmit the realtime updates on our map. \n\nCreate a [Pusher account](https://pusher.com/), if you have not already, and then set up your application as seen in the screenshot below.\n\n![realtime-map-aspnet-create-app](//images.contentful.com/1es3ne0caaid/3wPqfDfQI0o2UuOsEAmW4G/317ddbeb75ad7e96001ac802adf1d2fa/realtime-map-aspnet-create-app.png)\n\nWhen you have completed the set up, take note of your Pusher application keys as we will need them later on.\n\nNext, we will set up a [Google Maps API](https://developers.google.com/maps/) project. The Google Maps API provides a service for embedding maps in our applications and provides access to location information of businesses, cities and much more for numerous countries all over the world. We will use this service to generate a map and mark the realtime locations on the map.\n\nUsing the Google Maps API [guide](https://developers.google.com/maps/documentation/javascript/get-api-key), create a project and copy out the API key.\n\n## Building the backend\n\nIn this article, using C#, we will build a small application that renders a map, on which the location will be displayed and marked in realtime.\n\n### Creating our project\n\nUsing the [Visual Studio IDE](https://www.visualstudio.com/), follow the **New Project Wizard**. We will need to:\n- Create our map project.\n- Set C# as our language to use.\n- Select .NET MVC Project as the template.\n- Fill in the Project name e.g. Gaia.\n- Fill in the Solution name i.e. application name.\n\n### Setting up our routes and controllers\n\nFor the purpose of this application, we will define two routes: the route to render the map and the route to send new locations to our map. Create a `RouteConfig.cs` file, and paste the following code:\n\n```\n    // RouteConfig.cs\n    routes.MapRoute(\n        name: \"Home\",\n        url: \"\",\n        defaults: new { controller = \"Home\", action = \"Index\" }\n    );\n    \n    routes.MapRoute(\n        name: \"Map\",\n        url:  \"map\",\n        defaults: new { controller = \"Map\", action = \"Index\" }\n    );\n```\n\nThese route definitions specify the route pattern and the **Controller** and **Action** to handle it. Based on this, we need to create two controller files in the Controllers directory, `HomeController.cs` and `MapController.cs`.\n\n\n\u003e 💡 Creating our project with Visual Studio automatically creates the `HomeContoller.cs` file with an `Index` action. We will use this for our home route.\n\nIn the `HomeController.cs` file, we add:\n\n```\n    // HomeController.cs\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Web;\n    using System.Web.Mvc;\n    using System.Web.Mvc.Ajax;\n    \n    namespace Gaia.Controllers\n    {\n        public class HomeController : Controller\n        {\n            public ActionResult Index()\n            {\n                return View();\n            }\n        }\n    }\n```\n\nThe above snippet renders our home view using the **View** function.\n\n\u003e 💡 The `View` function creates a view response which we return. When it is invoked, C# looks for the default view of the calling controller class. This default view is the `index.cshtml` file found in the Views directory, in a directory with the same name as the Controller.\n\u003e i.e. The default view of the HomeController class will be the `Views/Home/index.cshtml` file.\n\nIn the `MapController.cs` file, we will receive a location’s longitude and latitude via a POST request and transmit this location data to our map via the Pusher service. Add the following code:\n\n```\n    // MapController.cs\n    \n    ...\n    \n    public class MapController : Controller\n    {\n        private Pusher pusher;\n    \n        public MapController() \n        {\n            var options = new PusherOptions();\n            options.Cluster = \"app_cluster\";\n    \n            pusher = new Pusher(\n                \"app_id\",\n                \"app_key\",\n                \"app_secret\", \n                options\n            );   \n        }\n    \n        [HttpPost]\n        public JsonResult Index()\n        {\n            var latitude    = Request.Form[\"lat\"];\n            var longitude = Request.Form[\"lng\"];\n    \n            var location = new\n            {\n                latitude = latitude,\n                longitude = longitude\n            };\n    \n            pusher.TriggerAsync(\"location_channel\", \"new_location\", location);\n    \n            return Json( new { status = \"success\", data = location } );\n        }\n    }\n```\n\nIn the code block above, we create a class variable `private Pusher pusher`. Then, we instantiate it to a Pusher client in the class constructor using the app credentials copied earlier from the Pusher dashboard. \n\nWe use the Pusher instance to transmit the location data on the `location_channel` channel, in the `new_location` event. Remember to replace `app_id` and the other values with your Pusher app credentials.\n\n\n\u003e ⚠️ To use the Pusher client in our controller, you must install the PusherServer library via NuGet, and add `using PusherServer` to the top import statements of your `MapController` class.\n\n## Creating our map view\n\nSince our map will be rendered on our home route, we will use the `Views/Home/index.cshtml` file (which is the default view of the HomeController class).\n\n\n\u003e 💡 Our `Views/Home/index.cshtml` file extends the `Shared/_Layout.cshtml` file. We have added the `title` tag and stylesheet imports to `Shared/_Layout.cshtml` for this reason.\n\nIn the `Shared/_Layout.cshtml` file, we add:\n\n```\n    \u003c!-- Shared/_Layout.cshtml --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eGaia\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta.3/css/bootstrap.min.css\" /\u003e\n        \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"@Url.Content(\"~/Content/custom.css\")\"/\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        @RenderBody()\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the `Views/Home/index.cshtml` file, add the following:\n\n```\n    \u003c!-- Views/Home/index.cshtml --\u003e\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-6 col-xs-12 col-lg-6\"\u003e\n                \u003ch3\u003eA realtime Map\u003c/h3\u003e\n                \u003cdiv id=\"map\"\u003e\n    \n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta.3/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n```\n\nThe block above defines the basic markup of our view. It consists mainly of the `div` for holding our map. We have also imported the Bootstrap CSS framework and its jQuery library dependency, to take advantage of some pre-made styles.\n\nNext we will import the Google Maps API JavaScript library and initialize our map in `Views/Home/index.cshtml`:\n\n```\n    \u003c!-- Views/Home/index.cshtml --\u003e\n    \u003cscript async defer src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAniUCyk0Gfp_UT1qNTHg2AF4I4ZmQ6EGo\u0026callback=initMap\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        let lineCoordinates = []\n    \n        let latitude = 6.4541;\n        let longitude = 3.3947;\n    \n        let map = false;\n        let marker = false;\n    \n        function initMap() {\n            let lagos = {lat: latitude, lng: longitude};\n    \n            map = new google.maps.Map(document.getElementById('map'), {\n              zoom: 10,\n              center: lagos\n            });\n    \n            marker = new google.maps.Marker({\n              position: lagos,\n              map: map\n            });\n    \n            lineCoordinates.push(marker.getPosition())\n        }\n    \u003c/script\u003e\n```\n\nIn the snippet above, we have initialized our map by passing the coordinates of [Lagos, Nigeria](https://en.wikipedia.org/wiki/Lagos) to the Google Maps library.\n\nNext, we will listen for changes in location (via our Pusher event) and implement the updates to our map. For this we’ll define our map update function. Copy the following code:\n\n```\n    \u003c!-- Views/Home/index.cshtml --\u003e\n    \n    [...]\n    \n    const updateMap = function(data) {\n        latitude = (data.latitude * 1);\n        longitude = (data.longitude * 1);\n    \n        map.setCenter({\n            lat: latitude,\n            lng: longitude,\n            alt: 0\n        });\n    \n        marker.setPosition({\n            lat: latitude,\n            lng: longitude,\n            alt: 0\n        });\n    \n        lineCoordinates.push(marker.getPosition())\n    \n        let lineCoordinatesPath = new google.maps.Polyline({\n          path: lineCoordinates,\n          geodesic: true,\n          map: map,\n          strokeColor: '#FF0000',\n          strokeOpacity: 1.0,\n          strokeWeight: 2\n        });\n    }\n    \u003c/script\u003e\n```\n\nFinally, we’ll listen for our Pusher events and trigger the `updateMap` function in our view:\n\n```\n    \u003c!-- Views/Home/index.cshtml\n    \n    [...]\n    \n    \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n      const pusher = new Pusher('app_key', {\n        cluster: 'app_cluster'\n      });\n    \n      const channel = pusher.subscribe('location_channel');\n    \n      channel.bind('new_location', function(data) {\n          updateMap(data);\n      });\n    \u003c/script\u003e\n```\n\nIn the snippet above, we import and initialize the Pusher JavaScript client. Then we subscribe to the `location_channel` and listen to the `new_location` event, passing the new location data received to our `updateMap` function for realtime updates.\n\nHere is the application when we run it again:\n\n![realtime-map-aspnet-demo](//images.contentful.com/1es3ne0caaid/6CNl2xfqP6YOygySaS6k0I/fe08c0dd1e65f2496e67befa9102e652/realtime-map-aspnet-demo.gif)\n\n## Conclusion\n\nIn a few simple steps, we have built a realtime map that updates and marks its current position based on data it receives. This application can be used to get GPS coordinates from a requested cab, or a tracked parcel to view its location and travel path on a map.","metaTitle":"Build a realtime map using ASP.NET","metaDescription":"Build a realtime map like Google Maps using .NET and Pusher. Use the map to get GPS coordinates from a requested cab, or track a parcel and see its journey and location."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"b1qV9Li0piqwKkU0cCk2U","type":"Entry","createdAt":"2018-02-28T14:09:10.530Z","updatedAt":"2020-06-19T14:07:22.845Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app using ASP.NET","url":"chat-aspnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/create-chat-app-with-.NET-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2018-01-15","description":"Leverage from the power of ASP.NET and create a simple chat app.","prerequisite":"A basic understanding of C# and jQuery is needed to follow this tutorial.","content":"Communication in our current age is largely digital, and the most popular form of digital communication is Instant Messaging. \n\nSome applications include some form of chat implementation e.g. Slack or Facebook. In this tutorial, we will consider how to build a chat application using C# .NET.\n\nTo follow along with this tutorial, you will require:\n- Visual Studio, an IDE popularly used for building .NET projects. View installation details [here](https://www.visualstudio.com/).\n- Basic knowledge of C#.\n- Basic knowledge of .NET MVC.\n- Basic knowledge of JavaScript (jQuery).\n\n![chat-aspnet-demo](//images.contentful.com/1es3ne0caaid/42MprYw0S4GQ8eMwSAww48/c521cf08d0cc971e9a198f7a753212f2/chat-aspnet-demo.gif)\n\n## Setting up our chat project\n\nUsing our Visual Studio IDE, we’ll create our chat project by following the **New Project** wizard.\n\nWe will:\n- Set C# as our language to use.\n- Select .NET MVC Project as the template.\n- Fill in the Project name e.g. HeyChat.\n- Fill in the Solution name i.e. application name.\n\n![chat-aspnet-new-project](//images.contentful.com/1es3ne0caaid/odxwTAff4yEWksCqw2G8c/1b00a776e0746990195d4be2cd786d54/chat-aspnet-new-project.gif)\n\n\n## Creating our chat app\n### Defining pages and routes\n\nFor the purpose of this tutorial, our chat app will consist of 2 pages:\n- The front page - where our user signs up.\n- The chat view - where our user selects a contact and exchanges messages.\n\nTo achieve these views, we will need the following routes:\n- The route to render the front page.\n- The route to implement login.\n- The route to render the chat page.\n\n\n\u003e 💡 These routes only render the views and implement user login. We’ll add more routes as we go along.\n\nAdding these routes to our `RouteConfig.cs` file we’ll have:\n\n```\n    routes.MapRoute(\n        name: \"Home\",\n        url: \"\",\n        defaults: new { controller = \"Home\", action = \"Index\" }\n    );\n    \n    routes.MapRoute(\n        name: \"Login\",\n        url: \"login\",\n        defaults: new { controller = \"Auth\", action = \"Login\" }\n    );\n    \n    routes.MapRoute(\n        name: \"ChatRoom\",\n        url: \"chat\",\n        defaults: new { controller = \"Chat\", action=\"Index\"}\n    );\n```\n\n\nThese route definitions specify the route pattern and the **Controller** and **Action** to handle it.\n\u003e 💡 Creating our project with Visual Studio automatically creates the `HomeContoller.cs` file with an `Index` action. We will use this for our home route.\n\nIn our `HomeController.cs` we’ll render the front page where our users can log in with:\n\n```\n    //HomeController.cs\n    \n    // ...\n    Using System.Web.Mvc;\n    // ...\n    public class HomeController : Controller\n    {\n        public ActionResult Index()\n        {\n            if ( Session[\"user\"] != null ) {\n                return Redirect(\"/chat\");\n            }\n    \n            return View();\n        }\n    }\n```\n\n\u003e 💡 The `View` function creates a view response which we return. When it is invoked, C# looks for the default view of the calling controller class. This default view is the `index.cshtml` file found in the Views directory, in a directory with the same name as the Controller i.e. The default view of the HomeController class will be the `Views/Home/index.cshtml` file.\n\n\n### Setting up our database\n\nIn order to implement our login feature, we’ll need a database to store users. There are several database drivers to choose from but, in this tutorial, we’ll use the MySQL database driver along with a .NET ORM called Entity Framework.\n\nWe will start by installing the `MySql.Data.Entities` package via NuGet (.NET’s package manager). And then, we’ll install the **Entity Framework** package also via NuGet, to provide us with our ORM functionality.\n\n\n\u003e 💡 To install packages using NuGet, right-click the Packages folder in our project solution; select the `Add Package` option; and search and select your desired package.\n\nOnce our packages have been installed, we will begin setting up our database connection and communication.\n\nFirst, we will add our database connection credentials to the `Web.config` file found in our solution folder. In `Web.config` we will add:\n\n```\n    \u003cconnectionStrings\u003e\n        \u003cadd name=\"YourConnectionName\" connectionString=\"Server=localhost;Database=database_name;Uid=root;Pwd=YourPassword;\" providerName=\"MySql.Data.MySqlClient\" /\u003e\n    \u003c/connectionStrings\u003e\n```\n\n\u003e ⚠️  You will need to replace the placeholder values in the snippet above with actual values database values.\n\nThe `Web.config` file is an **XML** file and the above `connectionStrings` element will be added in the body of the `configuration` element of the file.\n\nNext, we’ll create a `Models` folder inside our solution folder (on the same folder level as `Controllers`). In this folder, we will create our model class - this class is a representation of our table. For the login feature we will create the `User.cs` file. In this class file, we will add the properties of our model:\n\n```\n    // File: User.cs file\n    \n    using System;\n    using System.Collections.Generic;\n    namespace HeyChat.Models\n    {\n        public class User\n        {\n            public User()\n            {\n            }\n    \n            public int id { get; set; }\n            public string name { get; set; }\n            public DateTime created_at { get; set; }\n        }\n    }\n```\n\n\u003e 💡 To create a model class, right-click the Model folder, select the `Add` and `New File` options, and then `Empty Class` option filling in the class name.\n\nOur `User` model defines an ID for unique identification, user’s name and created date of the user for our users table.\n\nFinally, we will add our database context class. This class reads in the database connection configuration we defined in the `Web.config` file and takes the Model classes (Datasets) to which it should apply the configuration.\n\nWe will create our context class in our `Models` folder, following the same steps of creating a new empty class, and we will name it `ChatContext.cs`. In it, we will add the following:\n\n```\n    // File: ChatContext.cs\n    \n    using System;\n    using System.Data.Entity;\n    namespace HeyChat.Models\n    {\n        public class ChatContext: DbContext\n        {\n            public ChatContext() : base(\"YourConnectionName\")\n            {\n            }\n    \n            public static ChatContext Create()\n            {\n                return new ChatContext();\n            }\n    \n            public DbSet\u003cUser\u003e Users { get; set; }\n        }\n    }\n```\n\n\u003e 💡 We are implementing the Entity Framework ORM using the Code First method. This method involves writing the code defining our models (tables) without any existing database or tables. With this method, the database and tables will be created when our application code is executed.\n\n### Logging in our users\n\nSince our database connection and model (though as we go along more models may be introduced) have been created, we can proceed with our login functionality.\n\nThe front page rendered from the `HomeController` will consist of a form that accepts a user’s name. This form will be submitted to the `/``login` route which we defined earlier. Following our route definition, this request will be handled by the `AuthController` and its `Login` action method.\n\nWe will create the `AuthController` class and add our code for storing or retrieving a user’s details. The option to either store or retrieve will be based on if the user’s name already exists in our `Users` Table. The code for the `AuthController` is below:\n\n```\n    // File: AuthController\n    \n    // ...\n    using HeyChat.Models;\n    public class AuthController : Controller\n    {\n        [HttpPost]\n        public ActionResult Login()\n        {\n            string user_name = Request.Form[\"username\"];\n    \n            if (user_name.Trim() == \"\") {\n                return Redirect(\"/\");\n            }\n    \n            using (var db = new Models.ChatContext()) {\n    \n                User user = db.Users.FirstOrDefault(u =\u003e u.name == user_name);\n    \n                if (user == null) {\n                    user = new User { name = user_name };\n    \n                    db.Users.Add(user);\n                    db.SaveChanges();\n                }\n    \n                Session[\"user\"] = user;\n            }\n    \n            return Redirect(\"/chat\");\n        }\n    }\n```\n\nIn the code above, we check if a user exists using the name. If it exists we retrieve the user’s details and, if it doesn’t, we create a new record first. Then we assign the user’s details into a `session` object for use throughout the application. Lastly, we redirect the user to the chat page.\n\n### Rendering the chat page\n\nOne feature of most Chat applications is the ability to choose who to chat with. For the purpose of this tutorial, we will assume all registered users can chat with each other so our chat page will offer the possibility of chatting with any of the users stored in our database.\n\nEarlier, we defined our chat route and assigned it to the `ChatController` class and its `Index` action method. \n\nLet’s create the `ChatController` and implement the rendering of the chat page with available contacts. Paste the code below into the `ChatController`:\n\n```\n    // File: ChatController\n    \n    // ...\n    using HeyChat.Models;\n    \n    namespace HeyChat.Controllers\n    {\n        public class ChatController : Controller\n        {\n            public ActionResult Index()\n            {\n                if (Session[\"user\"] == null) {\n                    return Redirect(\"/\");\n                }\n    \n                var currentUser = (Models.User) Session[\"user\"];\n    \n                using ( var db = new Models.ChatContext() ) {\n    \n                    ViewBag.allUsers = db.Users.Where(u =\u003e u.name != currentUser.name )\n                                     .ToList();\n                }\n    \n    \n                ViewBag.currentUser = currentUser;\n    \n    \n                return View ();\n            }\n        }\n    }\n```\n\nTo get the available contacts, we read all the users in our database except the current user. These users are passed to our client side using `ViewBag`. We also pass the current user using `ViewBag`.\n\nNow that we have retrieved all the available contacts into the `ViewBag` object, we will create the markup for displaying these contacts and the rest of the chat page to the user. To create the view file for our chat page, we create a `Chat` folder in the `Views` folder. \n\nNext, right click the `Chat` folder, select the options to `Add` → `Views`, select the Razor template engine and name the file `index.cshtml`. Paste in the code below into the file: \n\n```\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n      \u003chead\u003e\n        \u003ctitle\u003epChat \u0026mdash; Private Chatroom\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"@Url.Content(\"~/Content/app.css\")\"\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003c!-- Navigation Bar --\u003e\n        \u003cnav class=\"navbar navbar-inverse\"\u003e\n          \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"navbar-header\"\u003e\n              \u003ca class=\"navbar-brand\" href=\"#\"\u003epChat - @ViewBag.currentUser.name \u003c/a\u003e\n            \u003c/div\u003e\n            \u003cul class=\"nav navbar-nav navbar-right\"\u003e\n              \u003cli\u003e\u003ca href=\"#\"\u003eLog Out\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/div\u003e\n        \u003c/nav\u003e\n        \u003c!-- / Navigation Bar --\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-xs-12 col-md-3\"\u003e\n              \u003caside class=\"main visible-md visible-lg\"\u003e\n                \u003cdiv class=\"row\"\u003e\n                  \u003cdiv class=\"col-xs-12\"\u003e\n                    \u003cdiv class=\"panel panel-default users__bar\"\u003e\n                      \u003cdiv class=\"panel-heading users__heading\"\u003e\n                        Contacts (@ViewBag.allUsers.Count)\n                      \u003c/div\u003e\n                      \u003cdiv class=\"__no__chat__\"\u003e\n                          \u003cp\u003eSelect a contact to chat with\u003c/p\u003e\n                      \u003c/div\u003e\n                      \u003cdiv class=\"panel-body users__body\"\u003e\n                        \u003cul id=\"contacts\" class=\"list-group\"\u003e\n    \n                        @foreach( var user in @ViewBag.allUsers ) {\n                            \u003ca class=\"user__item contact-@user.id\" href=\"#\" data-contact-id=\"@user.id\" data-contact-name=\"@user.name\"\u003e\n                                \u003cli\u003e\n                                  \u003cdiv class=\"avatar\"\u003e\n                                     \u003cimg src=\"@Url.Content(\"~/Content/no_avatar.png\")\"\u003e\n                                  \u003c/div\u003e\n                                  \u003cspan\u003e@user.name\u003c/span\u003e\n                                  \u003cdiv class=\"status-bar\"\u003e\u003c/div\u003e\n                                \u003c/li\u003e\n                            \u003c/a\u003e\n                        }\n                        \u003c/ul\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/aside\u003e\n    \n    \n            \u003c/div\u003e\n            \u003cdiv class=\"col-xs-12 col-md-9 chat__body\"\u003e\n              \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-xs-12\"\u003e\n                  \u003cul class=\"list-group chat__main\"\u003e\n    \n                  \u003c/ul\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"chat__type__body\"\u003e\n                  \u003cdiv class=\"chat__type\"\u003e\n                    \u003ctextarea id=\"msg_box\" placeholder=\"Type your message\"\u003e\u003c/textarea\u003e\n                    \u003cbutton class=\"btn btn-primary\" id=\"sendMessage\"\u003eSend\u003c/button\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"chat__typing\"\u003e\n                  \u003cspan id=\"typerDisplay\"\u003e\u003c/span\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"@Url.Content(\"~/Content/app.js\")\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```  \n\n\u003e 💡 `@Url.Content(\"~/Content/app.css\")` and `@Url.Content(\"~/Content/app.js\")` load some previously bundled JavaScript and CSS dependencies such as jQuery and Bootstrap from our `Content` folder.\n\nIn our view file, we create a sidebar and loop through the users passed to `ViewBag` to indicate the contacts available using Razor’s `@foreach` directive. We also add a text area to type and send messages to these contacts.\n\n### Selecting contacts and sending messages\n\nWhen our user selects a contact to chat with, we would like to retrieve the previous messages between the user and the selected contact. In order to achieve this, we would need a table for storing messages between users and a Model for this table.\n\nLet’s create a model called `Conversations` in the `Models` folder. It will consist of a unique `id`, `sender_id`, `receiver_id`, `message`, `status` and the `created_at` date. The code for the model is below:\n\n```\n    // File: Conversation.cs\n    \n    using System;\n    namespace HeyChat.Models\n    {\n        public class Conversation\n        {\n            public Conversation()\n            {\n                status = messageStatus.Sent;\n            }\n    \n            public enum messageStatus\n            {\n                Sent, \n                Delivered\n            }\n    \n            public int id { get; set; }\n            public int sender_id { get; set; }\n            public int receiver_id { get; set; }\n            public string message { get; set; }\n            public messageStatus status { get; set; }\n            public DateTime created_at { get; set; }\n        }\n    } \n```\n\nAfter creating the `Conversation` model, we will add it to the `ChatContext` file as seen below:\n\n```\n    // File: ChatContext.cs\n    using System;\n    using System.Data.Entity;\n    \n    namespace HeyChat.Models\n    {\n        public class ChatContext: DbContext\n        {\n            public ChatContext() : base(\"MySqlConnection\")\n            {\n            }\n    \n            public static ChatContext Create()\n            {\n                return new ChatContext();\n            }\n    \n            public DbSet\u003cUser\u003e Users { get; set; }\n            public DbSet\u003cConversation\u003e Conversations { get; set; }\n        }\n    }\n```\n\nTo retrieve the messages, we will create a route for `/contact``/conversations/{contact}`. This route will accept a contact ID, retrieve messages between the current user and the contact, then return the messages in a JSON response. \n\nIt will be handled by the `ChatController` in the `ConversationWithContact` action method as seen below:\n\n```\n    //ChatController.cs\n    \n    ...\n    public JsonResult ConversationWithContact(int contact)\n    {\n        if (Session[\"user\"] == null)\n        {\n            return Json(new { status = \"error\", message = \"User is not logged in\" });\n        }\n    \n        var currentUser = (Models.User)Session[\"user\"];\n    \n        var conversations = new List\u003cModels.Conversation\u003e();\n    \n        using (var db = new Models.ChatContext())\n        {\n            conversations = db.Conversations.\n                              Where(c =\u003e (c.receiver_id == currentUser.id \n                                  \u0026\u0026 c.sender_id == contact) || \n                                  (c.receiver_id == contact \n                                  \u0026\u0026 c.sender_id == currentUser.id))\n                              .OrderBy(c =\u003e c.created_at)\n                              .ToList();\n        }\n    \n        return Json(\n            new { status = \"success\", data = conversations }, \n            JsonRequestBehavior.AllowGet\n        );\n    }\n```\n\nNow that we have a route to retrieve old messages, we will use some jQuery to select the user, fetch the messages and display them on our page.\nIn our view file, we will create a `script` tag to hold our JavaScript and jQuery functions. In it, we’ll add:\n\n```\n    ...\n    \u003cscript\u003e\n    let currentContact = null; // Holds current contact\n    let newMessageTpl = \n    `\u003cdiv\u003e\n        \u003cdiv id=\"msg-{{id}}\" class=\"row __chat__par__\"\u003e\n          \u003cdiv class=\"__chat__\"\u003e\n            \u003cp\u003e{{body}}\u003c/p\u003e\n            \u003cp class=\"delivery-status\"\u003eDelivered\u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n     \u003c/div\u003e`;\n    ...\n    // select contact to chat with\n    $('.user__item').click( function(e) {\n        e.preventDefault();\n    \n        currentContact = {\n            id: $(this).data('contact-id'),\n            name: $(this).data('contact-name'),\n        };\n    \n        $('#contacts').find('li').removeClass('active');\n    \n        $('#contacts .contact-' + currentContact.id).find('li').addClass('active');\n        getChat(currentContact.id);\n    });\n    \n    // get chat data        \n    function getChat( contact_id ) {\n        $.get(\"/contact/conversations/\" + contact_id )\n         .done( function(resp) {         \n            var chat_data = resp.data || [];\n            loadChat( chat_data );         \n         });\n    }\n    \n    //load chat data into view\n    function loadChat( chat_data ) {\n    \n        chat_data.forEach( function(data) {\n            displayMessage(data);\n        });\n    \n        $('.chat__body').show();\n        $('.__no__chat__').hide();\n    }\n    \n    function displayMessage( message_obj ) {\n        const msg_id = message_obj.id;\n        const msg_body = message_obj.message;\n    \n        let template = $(newMessageTpl).html();\n    \n        template = template.replace(\"{{id}}\", msg_id);\n        template = template.replace(\"{{body}}\", msg_body);\n    \n        template = $(template);\n    \n        if ( message_obj.sender_id == @ViewBag.currentUser.id ) {\n            template.find('.__chat__').addClass('from__chat');\n        } else {\n            template.find('.__chat__').addClass('receive__chat');\n        }\n    \n        if ( message_obj.status == 1 ) {\n            template.find('.delivery-status').show();\n        }\n    \n        $('.chat__main').append(template);\n    }\n```\n\nNow that selecting a contact retrieves previous messages, we need our user to be able to send new messages. To achieve this, we will create a route that accepts the message being sent and saves it to the database, and then use some jQuery to read the message text from the `textarea` field and send to this route.\n\n```\n    //RouteConfig.cs\n    \n    ...\n    routes.MapRoute(\n        name: \"SendMessage\",\n        url: \"send_message\",\n        defaults: new { controller = \"Chat\", action = \"SendMessage\" }\n    );\n```\n\nAs specified in the `RouteConfig` file, this route will be handled by the `SendMessage` action method of the `ChatController`.\n\n```\n    //ChatController.cs\n    \n    ...\n    [HttpPost]\n    public JsonResult SendMessage() \n    {\n        if (Session[\"user\"] == null)\n        {\n            return Json(new { status = \"error\", message = \"User is not logged in\" });\n        }\n    \n        var currentUser = (User)Session[\"user\"];\n    \n        string socket_id = Request.Form[\"socket_id\"];\n    \n        Conversation convo = new Conversation\n        {\n            sender_id = currentUser.id,\n            message = Request.Form[\"message\"],\n            receiver_id = Convert.ToInt32(Request.Form[\"contact\"])\n        };\n    \n        using ( var db = new Models.ChatContext() ) {\n            db.Conversations.Add(convo);\n            db.SaveChanges();\n        }\n    \n        return Json(convo);\n    }\n```\n\n### Adding realtime functionality\n\nThere are several features of a chat application that require realtime functionality, some of which are:\n- Receiving messages sent in realtime.\n- Being notified of an impending response - the ‘user is typing’ feature.\n- Getting message delivery status.\n- Instant notification when a contact goes offline or online.\n\nIn achieving these features, we will make use of [Pusher](http://pusher.com). To proceed lets head over to the Pusher [dashboard](https://dashboard.pusher.com/) and create an app. You can [register for free](https://pusher.com/signup?plan=sandbox) if you haven’t got an account. Fill out the create app form with the information requested. Next, we’ll install the **Pusher Server** package in our C# code using NuGet.\n\nTo achieve some of our stated realtime features, we will need to be able to trigger events on the client side. In order to trigger client events in this application, we will make use of Private Channels. \n\nWe will create our private channel when a contact is chosen. This channel will be used to transmit messages between the logged in user and the contact he is sending a message to.\n\nPrivate channels require an authentication endpoint from our server side code to be available, because when the channel is instantiated Pusher will try to authenticate that the client has valid access to the channel.\n\nThe default route for Pusher's authentication request is `/pusher/auth`, so we will create this route and implement the authentication.\n\nFirst in our `RouteConfig.cs` file we will add the route definition:\n\n```\n    routes.MapRoute(\n        name: \"PusherAuth\",\n        url:  \"pusher/auth\",\n        defaults: new { controller = \"Auth\", action = \"AuthForChannel\"}\n    );\n```\n\nThen, as we have defined above, in the `AuthController` class file we will create the `AuthForChannel` action method and add:\n\n```\n    public JsonResult AuthForChannel(string channel_name, string socket_id)\n    {\n        if (Session[\"user\"] == null)\n        {\n            return Json(new { status = \"error\", message = \"User is not logged in\" });\n        }\n        var currentUser = (Models.User)Session[\"user\"];\n        \n        var options = new PusherOptions();\n        options.Cluster = \"PUSHER_APP_CLUSTER\";\n        \n        var pusher = new Pusher(\n        \"PUSHER_APP_ID\",\n        \"PUSHER_APP_KEY\",\n        \"PUSHER_APP_SECRET\", options);\n        \n        if (channel_name.IndexOf(currentUser.id.ToString()) == -1)\n        {\n            return Json(\n              new { status = \"error\", message = \"User cannot join channel\" }\n            );\n        }\n    \n        var auth = pusher.Authenticate(channel_name, socket_id);\n    \n        return Json(auth);\n    }\n```\n\nOur authentication endpoint, above, takes the name of the channel and the socket ID of the client, which are sent by Pusher at a connection attempt. \n\n\n\u003e 💡 We will name our private channels using the IDs of the participants of the conversation i.e. the sender and receiver. This we will use to restrict the message from being broadcast to other users of the Messenger app that are not in the specific conversation.\n\nUsing the .NET `PusherServer` library, we authenticate the user by passing the channel name and socket ID. Then we return the resulting object from authentication via JSON.\n\nFor more information on client events and private channels, kindly check out the Pusher [documentation](https://pusher.com/docs/client_api_guide/client_presence_channels).\n\n\n\u003e 💡 Client events can only be triggered by private or presence channels.\n\nIn the script section of our view, we will instantiate the variable for our private channel. We will also adjust our contact selecting snippet to also create the channel for sending messages, typing and delivery notifications:\n\n```\n    ...\n    \u003cscript\u003e\n    ...\n    \n    let currentContact = null; // Holds contact currently being chatted with\n    let socketId = null;\n    let currentconversationChannel = null;\n    let conversationChannelName = null;\n    \n    //Pusher client side setup\n    const pusher = new Pusher('PUSHER_APP_ID', {\n        cluster:'PUSHER_APP_CLUSTER'\n    });\n    \n    pusher.connection.bind('connected', function() {\n      socketId = pusher.connection.socket_id;\n    });\n    \n    // select contact to chat with\n    $('.user__item').click( function(e) {\n        e.preventDefault();\n    \n        currentContact = {\n            id: $(this).data('contact-id'),\n            name: $(this).data('contact-name'),\n        };\n    \n        if ( conversationChannelName ) {\n            pusher.unsubscribe( conversationChannelName );\n        }\n    \n        conversationChannelName = getConvoChannel( \n                                      (@ViewBag.currentUser.id * 1) ,  \n                                      (currentContact.id * 1) \n                                  );\n    \n        currentconversationChannel = pusher.subscribe(conversationChannelName);\n        \n        bind_client_events();\n                                    \n        $('#contacts').find('li').removeClass('active');\n    \n        $('#contacts .contact-' + currentContact.id).find('li').addClass('active');\n        getChat(currentContact.id);\n    });\n    \n    function getConvoChannel(user_id, contact_id) {\n        if ( user_id \u003e contact_id ) {\n            return 'private-chat-' + contact_id + '-' + user_id;\n        }\n    \n        return 'private-chat-' + user_id + '-' + contact_id;\n    }\n    \n    function bind_client_events(){\n      //bind private channel events here  \n    \n      currentconversationChannel.bind(\"new_message\", function(msg) {\n          //add code here\n      });\n    \n      currentconversationChannel.bind(\"message_delivered\", function(msg) {\n          $('#msg-' + msg.id).find('.delivery-status').show();\n      });\n    }\n```\n\nWe have also saved the `socket_id` used to connect to the channel in a variable. This will come in handy later.\n\n#### Receiving messages sent in realtime\nEarlier, we added a route to save messages sent as conversations between the user and a contact. \n\nHowever, after these messages are saved, we would like the messages to be added to the screen of both the user and contact.\n\nFor this to work, in our C# code, after storing the message we will trigger an event via our Pusher private channel. Our clients will then listen to these events and respond to them by adding the messages they carry to the screen.\n\nIn our `ChatController` class file, after saving the conversation we will add  the following:\n\n```\n    private Pusher pusher;\n    \n    //class constructor\n    public ChatController() \n    {\n        var options = new PusherOptions();\n        options.Cluster = \"PUSHER_APP_CLUSTER\";\n    \n        pusher = new Pusher(\n           \"PUSHER_APP_ID\",\n           \"PUSHER_APP_KEY\",\n           \"PUSHER_APP_SECRET\",\n           options\n       );\n    }\n    \n    [HttpPost]\n    public JsonResult SendMessage() \n    {\n        if (Session[\"user\"] == null)\n        {\n            return Json(new { status = \"error\", message = \"User is not logged in\" });\n        }\n    \n        var currentUser = (User)Session[\"user\"];\n    \n        string socket_id = Request.Form[\"socket_id\"];\n    \n        Conversation convo = new Conversation\n        {\n            sender_id = currentUser.id,\n            message = Request.Form[\"message\"],\n            receiver_id = Convert.ToInt32(Request.Form[\"contact\"])\n        };\n    \n        using ( var db = new Models.ChatContext() ) {\n            db.Conversations.Add(convo);\n            db.SaveChanges();\n        }\n        \n        var conversationChannel = getConvoChannel( currentUser.id, contact);\n    \n        pusher.TriggerAsync(\n          conversationChannel,\n          \"new_message\",\n          convo,\n          new TriggerOptions() { SocketId = socket_id });\n    \n        return Json(convo);\n    }\n    \n    private String getConvoChannel(int user_id, int contact_id)\n    {\n        if (user_id \u003e contact_id)\n        {\n            return \"private-chat-\" + contact_id + \"-\" + user_id;\n        }\n    \n        return \"private-chat-\" + user_id + \"-\" + contact_id;\n    }\n```\n\nTo make use of the Pusher server-side functionality, we will add `using PusherServer;` to the top of our controller file.\n\n\u003e 💡 We have accepted the `socket_id` from the user when sending the message. This is so that we can specify that the sender is exempted from listening to the event they broadcast.\n\nIn our view, we will listen to the `new_message` event and use this to add the new message to our view.\n\n```\n    //index.cshtml\n    \n    ...\n    \u003cscript\u003e\n    ...\n    //Send button's click event\n    $('#sendMessage').click( function() {\n        $.post(\"/send_message\", {\n            message: $('#msg_box').val(),\n            contact: currentContact.id,\n            socket_id: socketId,\n        }).done( function (data) {\n            //display the message immediately on the view of the sender\n            displayMessage(data); \n            $('#msg_box').val('');\n        });\n    });\n    \n    function bind_client_events(){\n        //listening to the message_sent event by the message's recipient\n        currentconversationChannel.bind(\"new_message\", function(msg) {\n                if ( msg.receiver_id == @ViewBag.currentUser.id ) {\n                    displayMessage(msg);\n                }\n        });\n    }\n```\n\n#### Implementing the typing indicator feature\nThis feature makes users aware that the conversation is active and a response is being typed. To achieve it, we will listen to the `keyup` event of our message text area and, upon the occurrence of this `keyup` event, we will trigger a client event called `client-is-typing`.\n\n```\n    // index.cshtml\n    \n    function bind_client_events(){\n        currentconversationChannel.bind(\"client-is-typing\", function(data) {\n            if ( data.user_id == currentContact.id \u0026\u0026 \n                 data.contact_id == @ViewBag.currentUser.id  ) {\n    \n                $('#typerDisplay').text( currentContact.name + ' is typing...');\n            \n                $('.chat__typing').fadeIn(100, function() {\n                    $('.chat__type__body').addClass('typing_display__open');\n                }).delay(1000).fadeOut(300, function(){\n                    $('.chat__type__body').removeClass('typing_display__open');\n                });\n            }\n        });\n        \n        ...\n    }\n    \n    //User is typing\n    var isTypingCallback = function() {\n        chatChannel.trigger(\"client-is-typing\", {\n            user_id: @ViewBag.currentUser.id,\n            contact_id: currentContact.id,\n        });\n    };\n    \n    $('#msg_box').on('keyup',isTypingCallback);\n    ...\n```\n\n## Conclusion\n\nWe have built a chat application with some of its basic features in C# with the help of jQuery, and have also implemented some of the common realtime features present in chat applications using Pusher.","metaTitle":"Build a chat app using ASP.NET","metaDescription":"In this tutorial, learn how to create a chat app using ASP.NET and jQuery."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1jeVDH5XtgiCsga6e2kk8o","type":"Entry","createdAt":"2018-02-28T11:59:47.112Z","updatedAt":"2018-02-28T11:59:47.112Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a typing indicator in ASP.NET","url":"typing-indicator-aspnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/Whos-Typing-In-.NET","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6xamBfB840ckYKOkIMm6sM","type":"Entry","createdAt":"2018-02-12T14:51:11.677Z","updatedAt":"2018-02-26T12:31:15.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"C#","url":"c-sharp","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-12-27","description":"Learn how to implement a typing indicator feature in your chat application using Pusher, .NET, C# code and some jQuery. ","prerequisite":"A basic understanding of ASP.NET and jQuery is needed to follow this tutorial.","content":"When building chat apps, knowing when the person you are chatting with is typing a message can improve the user experience. It gives you some feedback that you’re not alone in the conversation and a message is coming your way. In this tutorial, we will go through some simple steps to achieve this feature using C# .NET and Pusher.\n\nAt the end of this tutorial we will have something like this:\n\n![typing-indicator-aspnet-demo](//images.contentful.com/1es3ne0caaid/2h9vYP6DgE6ogoCGWYo0iC/373ee99c9759d752c7f4ae8de3c30e95/typing-indicator-aspnet-demo.gif)\n\nThis tutorial assumes prior knowledge of:\n- C#\n- .NET MVC and\n- JavaScript (jQuery)\n\nWhen you’re ready, let’s begin.\n\n## Setting up Our Project\n\nWe’ll be using [Visual Studio](https://www.visualstudio.com/), which is an IDE popularly used for building .NET projects. Visual Studio 2017 is free and available for popularly used Operating Systems. You can view installation details [here](https://www.visualstudio.com/).\n\nAfter installing Visual Studio, launch it and create a new project by clicking **New Project** from the dashboard. Following the **New Project** wizard we:\n  - Set C# as our language to use,\n  - Select .NET MVC Project as the template,\n  - Fill in the Project name e.g. HeyChat (any name would do),\n  - Fill in the Solution name i.e. application name (HeyChat or any name would do).\n\n![typing-indicator-aspnet-project-setup](//images.contentful.com/1es3ne0caaid/1W1rwWoPRKuYackWIoaKcC/ee799f944c1645065642a9b0c5279972/typing-indicator-aspnet-project-setup.gif)\n\n## Writing the server-side (C#) Code\n\nTo achieve a typing indicator, our chat app needs to be able to recognize who is typing at any given time. For this, we will add some limited form of identification. We’re not doing any authentication at all because this tutorial does not require it.\n\n\n\u003e 💡 For the purpose of this tutorial, we will assume this chat is open to all users and all that is required is that our user specifies their name on first entry.\n\n\n### Route definition\n\nWe can define some of the routes that we need to make this feature, which are:\n\n\n  - A home route which renders the first page that takes the user’s name.\n  - A login route which accepts a `POST` request of the user’s name.\n  - A chat route which renders the chat view.\n  \n\u003e 💡 We may need some other routes as we go along but this is enough for starters.\n\nTo add these routes, we open the `RouteConfig.cs` file in the  `App_Start` directory of our application. And in it, we add the routes we have defined.\n\n```\n    routes.MapRoute(\n        name: \"Home\",\n        url: \"\",\n        defaults: new { controller = \"Home\", action = \"Index\" }\n    );\n    \n    routes.MapRoute(\n        name: \"Login\",\n        url: \"login\",\n        defaults: new { controller = \"Login\", action = \"Index\" }\n    );\n    \n    routes.MapRoute(\n        name: \"ChatRoom\",\n        url: \"chat\",\n        defaults: new {controller = \"Chat\", action=\"Index\"}\n    );\n```\n\nUsing the **Home** route as a sample, the route definition states that `/` requests will be handled by the `HomeController` which is found in the `Controllers/HomeController.cs` file and the `Index` method of that controller. Next, we create the controllers we need.\n\n### Creating controllers and action methods\n\nTo create a new controller, right-click the **Controller** directory and select `Add → Controller`. In the resulting form, we type in the name of our controller and select the empty template.\n\n\u003e 💡 When our application is created, it includes a HomeController with an Index action method by default, so we’ll perform the above steps to create our LoginController and ChatController.\n\nIn our LoginController class, we create the Index action method specifying `[HttpPost]` at the top of the action method to indicate that it handles `POST` requests.\n\n```\n    public class LoginController : Controller\n    {\n        [HttpPost]\n        public ActionResult Index()\n        {\n          \n        }\n    }\n```\n\nThe Index action of the LoginController will receive the request payload, read the username from the payload and assign it to the current user session, then redirect our user to the chat page. When we add this to our action method we’ll have\n\n```\n    public class LoginController : Controller\n    {\n        [HttpPost]\n        public ActionResult Index()\n        {\n            string user = Request.Form[\"username\"];\n            if (user.Trim() == \"\") {\n                return Redirect(\"/\");\n            }\n            Session[\"user\"] = user;\n            return Redirect(\"/chat\");\n        }\n    }\n```\n\n\u003e 💡 In a real-world chat app, we would add the user to a database and mark the user as logged in for other users to see available chat options, but that is beyond the scope of this tutorial so adding to a session will suffice.\n\nIn our ChatController class, we will add the Index action method. The Index action of the ChatController will render our chat view and pass along the current user to the view.\n\n```\n    public class ChatController : Controller\n    {\n        public ActionResult Index()\n        {\n            if (Session[\"user\"] == null) {\n                return Redirect(\"/\");\n            }\n    \n            ViewBag.currentUser = Session[\"user\"];\n    \n            return View ();\n        }\n    }\n```\n\n\u003e 💡 By default, action methods handle `GET` requests so we will not need to add `[HttpGet]` to the top of our method. We’ve also added a simple check to prevent access to the chat page if there is no logged in user.\n\nLet’s not forget about our Home route. In the HomeController we’ll add the code to render the front page.\n\n```\n    public class HomeController : Controller\n    {\n        public ActionResult Index()\n        {\n            if ( Session[\"user\"] != null ) {\n                return Redirect(\"/chat\");\n            }\n    \n            return View();\n        }\n    }\n```\n\n\u003e 💡 We’ve also added a small check to prevent multiple logins in the same user session.\n\nAt this point, we’ve created the Controllers and methods to serve our views (which we haven’t created yet) so trying to run this will give you some errors! Let’s fix that.\n\n## Implementing the application’s views\n\nBased on the routes we’ve defined so far, we will need two views:\n  - The front page view with the login form - served by the `Index`action method of the `HomeController` class\n  - The chat view where the typing indicator feature will be seen - served by `ChatController`  class’  `Index` action method\n\n\n### Front page/log in page\n\nFor our front page, we create a page with a form consisting of a field to type in your username and a button to submit for login. Referring to our controller code:\n\n```\n    public class HomeController : Controller\n    {\n        public ActionResult Index()\n        {\n            if ( Session[\"user\"] != null ) {\n                return Redirect(\"/chat\");\n            }\n            return View();\n        }\n    }\n```\n\n\u003e 💡 The **View** function creates a view response which we return. When **View()** is invoked, C# looks for the default view of the calling controller class. This default view is the `index.cshtml` file found in the **Views** directory, in a directory with the same name as the Controller. \n\u003e i.e. The default view of the HomeController class will be the `Views/Home/index.cshtml`  file.\n\nTo create our `HomeController` default view, we:\n- Right-click on the Views directory and select `Add New Folder`,\n- Fill in **Home** as the folder name,\n- Right click the newly created **Home** folder and select `Add New View`,\n- Fill in the view name (in our case **index**), select `Razor` as the view engine and click ok.\n\nNow that we’ve created our front page view file, we’ll add the markup for the login form.\n\n```\n    \u003cdiv class=\"container\"\u003e\n      \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-5 col-md-offset-4\"\u003e\n          \u003cdiv class=\"panel panel-default\"\u003e\n            \u003cdiv class=\"panel-body\"\u003e\n              \u003cform action=\"/login\" method=\"post\" style=\"margin:0\"\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                  \u003cinput type=\"text\" name=\"username\" id=\"username\" \n                      placeholder=\"Enter Username\" class=\"form-control\" \n                      required minlength=\"3\" maxlength=\"15\" /\u003e\n                \u003c/div\u003e\n                \u003cbutton type=\"submit\" class=\"btn btn-primary btn-block\"\u003e\n                  Enter Chat\n                \u003c/button\u003e\n              \u003c/form\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\n### The chat page\n\nWe’ll create the view for the chat page following the same steps as above but using `Chat` as our folder name rather than `Home`.\n\nIn the chat view, we add markup up to give us a sidebar of available users and an area for chatting.\n\n```\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n      \u003ctitle\u003epChat \u0026mdash; Private Chatroom\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" href=\"@Url.Content(\"~/Content/app.css\")\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n            @{\n                var currentUser = ViewBag.currentUser;\n            }\n        \u003c!-- Navigation Bar --\u003e\n        \u003cnav class=\"navbar navbar-inverse\"\u003e\n          \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"navbar-header\"\u003e\n              \u003ca class=\"navbar-brand\" href=\"#\"\u003epChat\u003c/a\u003e\n            \u003c/div\u003e\n            \u003cul class=\"nav navbar-nav navbar-right\"\u003e\n              \u003cli\u003e\u003ca href=\"#\"\u003eLog Out\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/div\u003e\n        \u003c/nav\u003e\n        \u003c!-- / Navigation Bar --\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-xs-12 col-md-3\"\u003e\n              \u003caside class=\"main\"\u003e\n                \u003cdiv class=\"row\"\u003e\n                  \u003cdiv class=\"col-xs-12\"\u003e\n                    \u003cdiv class=\"panel panel-default users__bar\"\u003e\n                      \u003cdiv class=\"panel-heading users__heading\"\u003e\n                        Online Users (1)\n                      \u003c/div\u003e\n                      \u003cdiv class=\"panel-body users__body\"\u003e\n                        \u003cul class=\"list-group\"\u003e\n                        @if( @currentUser == \"Daenerys\" ) {\n                            \u003cli class=\"user__item\"\u003e\n                                \u003cdiv class=\"avatar\"\u003e\u003c/div\u003e \u003ca href=\"#\"\u003eJon\u003c/a\u003e\n                            \u003c/li\u003e\n                        } else if( @currentUser == \"Jon\") {\n                            \u003cli class=\"user__item\"\u003e\n                                \u003cdiv class=\"avatar\"\u003e\u003c/div\u003e \u003ca href=\"#\"\u003eDaenerys\u003c/a\u003e\n                            \u003c/li\u003e\n                        }\n                        \u003c/ul\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/aside\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-xs-12 col-md-9 chat__body\"\u003e\n              \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-xs-12\"\u003e\n                  \u003cul class=\"list-group chat__main\"\u003e\n                    \u003cdiv class=\"row __chat__par__\"\u003e\n                      \u003cdiv class=\"__chat__ from__chat\"\u003e\n                        \u003cp\u003eDid you see Avery's sword???\u003c/p\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"row __chat__par__\"\u003e\n                      \u003cdiv class=\"__chat__ receive__chat\"\u003e\n                        \u003cp\u003eErr Looked normal to me...\u003c/p\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"row __chat__par__\"\u003e\n                      \u003cdiv class=\"__chat__ receive__chat\"\u003e\n                        \u003cp\u003emaybe I'm a hater\u003c/p\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"row __chat__par__\"\u003e\n                      \u003cdiv class=\"__chat__ from__chat\"\u003e\n                        \u003cp\u003eLmaooo\u003c/p\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  \u003c/ul\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"chat__type__body\"\u003e\n                  \u003cdiv class=\"chat__type\"\u003e\n                    \u003ctextarea id=\"msg_box\" placeholder=\"Type your message\"\u003e\u003c/textarea\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"chat__typing\"\u003e\n                  \u003cspan id=\"typerDisplay\"\u003e\u003c/span\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"@Url.Content(\"~/Content/app.js\")\"\u003e\u003c/script\u003e\n        \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe’re using the [razor template engine](https://en.wikipedia.org/wiki/ASP.NET_Razor), which gives us the ability to read data passed from the C# code and assign them to variables that can be used in our frontend. Using `@{ var currentUser = ViewBag.currentUser }` we have passed in the name of the current user which will come in handy shortly.\n\n\u003e 💡 To keep things quick and simple we have assumed there are only two possible users: **Daenerys** or **Jon**. So using the razor `@if{ }` condition we are showing who is available to chat with.\n\nNow that we have our views in place we can move on to our typing indicator feature!\n\n## Implementing the typing indicator\n### Listening for the typing event\n\nOn most chat applications, the feature becomes visible when someone is typing, so to implement we’ll start off by listening to the typing event in the chat text area using jQuery. We'll also pass the `currentUser` variable we defined earlier with razor to our script.\n\n```\n    var currentUser = @currentUser;\n          \n    $('#msg_box').on('keydown', function () {\n      //stub\n    });\n```\n\nWe added a listener to the  `keydown` event on our typing area to help us monitor when someone is typing.\n\nNow that we’ve created our listeners, we’ll make our listeners send a message that someone is typing to the other members of the chat. To do this, we’ll create an endpoint in our C# code to receive this request and broadcast it via Pusher. \n\nWe’ll implement all the client code (assuming that our C# endpoint exists, then we’ll actually create the endpoint later).\n\n\n\u003e 💡 To prevent excessive requests to our C# code i.e. sending a request as every key on the keypad is pressed or released, we’ll throttle the sending of the requests using a debounce function. This debounce function just ignores a function for a while if it keeps occurring.\n\n```\n    // Debounce function\n    // Credit: https://davidwalsh.name/javascript-debounce-function\n    \n    // Returns a function, that, as long as it continues to be invoked, will not\n    // be triggered. The function will be called after it stops being called for\n    // N milliseconds. If `immediate` is passed, trigger the function on the\n    // leading edge, instead of the trailing.\n    function debounce(func, wait, immediate) {\n        var timeout;\n        return function() {\n            var context = this, args = arguments;\n            var later = function() {\n                timeout = null;\n                if (!immediate) func.apply(context, args);\n            };\n            var callNow = immediate \u0026\u0026 !timeout;\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n            if (callNow) func.apply(context, args);\n        };\n    };\n```\n\nNow that we have a **debounce** function we’ll create the callback function for our `keydown` event:\n\n```\n    var isTypingCallback = debounce( function() {\n        $.post('/chat/typing', {\n            typer: currentUser,\n        });\n    }, 600, true);\n```\n \n and pass the callback to our event listeners.\n \n```\n    $('#msg_box').on('keydown',isTypingCallback);\n```\n\n### Creating the endpoint triggered by the typing event\n\nEarlier, we had our event listeners send a **POST** request to the `/chat/typing` Route on the client side. Now we’ll create this Route, which will transmit the typing event to other client users using [Pusher](http://pusher.com). \n\nFirst, we’ll create the route for the endpoint in our `RouteConfig.cs` file.\n\n```\n    ...\n    routes.MapRoute(\n        name: \"UserTyping\",\n        url: \"chat/typing\",\n        defaults: new { controller = \"Chat\", action = \"Typing\" }\n    );\n```\n\n\u003e 💡 We’ve created this endpoint to be handled by the **Typing** action method of the **ChatController**\n\nNext, we’ll create our Typing action method in the `ChatController`:\n\n```\n    [HttpPost]\n    public ActionResult Typing()\n    {\n        //stub\n    }\n```\n\n### Using Pusher to make our application update in realtime\n\nOur `/``chat``/``typing` endpoint will receive a post payload of the user who is doing the typing. We’re going to use [Pusher](http://pusher.com) to transmit this to everyone else.\n\nOn our Pusher [dashboard](https://dashboard.pusher.com/), we’ll create a new app filling out the information requested i.e. App name, frontend tech, etc. You can [register for free](https://pusher.com/) if you haven’t got an account. Next, we’ll install the **Pusher Server** package in our C# code using NuGet, a packer manager for .NET.\n\n![typing-indicator-aspnet-add-packages](//images.contentful.com/1es3ne0caaid/5ZUDKcS91uo602ok6iA2ea/a81d8764472938024ff247dd1c92f68e/typing-indicator-aspnet-add-packages.gif)\n\n\u003e 💡 To install the package we right-click the **Packages** directory; Select the **add Package option** and select the **Pusher Server** package.\n\nThen we’ll add the Pusher broadcasting to our **Typing** action event. To use Pusher we’ll have to import the **Pusher Server** namespace in our code.\n\n```\n    ...\n    using PusherServer;\n    \n    namespace HeyChat.Controllers\n    {\n        public class ChatController : Controller\n        {\n          ...\n    \n          [HttpPost]\n          public ActionResult Typing()\n          {\n              string typer        = Request.Form[\"typer\"];\n              string socket_id    = Request.Form[\"socket_id\"];\n          \n              var options = new PusherOptions();\n              options.Cluster = \"PUSHER_APP_CLUSTER\";\n          \n              var pusher = new Pusher(\n              \"PUSHER_APP_ID\",\n              \"PUSHER_APP_KEY\",\n              \"PUSHER_APP_SECRET\", options);\n          \n              pusher.TriggerAsync(\n              \"chat\",\n              \"typing\",\n              new { typer = typer },\n              new TriggerOptions() { SocketId = socket_id });\n          \n              return new HttpStatusCodeResult(200);\n          } \n        ...\n```\n\nWe initialized Pusher using our **PUSHER_APP_ID**, **PUSHER_APP_KEY**, **PUSHER_APP_SECRET**, and **PUSHER_APP_CLUSTER** (be sure to replace these with the actual values from your dashboard); and then broadcast an object containing the* **typer** - which is the person typing - on the* `typing` event via the `chat` channel.\n\n\u003e 💡 We’ve added  `new TriggerOptions() { SocketId = socket_id }` to our Pusher **triggerAsync** function. This is to prevent the sender of the broadcast from receiving the broadcast as well. To do this we’ve assumed we’re receiving `socket_id` in our payload along with `typer`, so on our client side, we’ll add it to the payload sent.\n\nNow, whenever there’s a typing event our C# code broadcasts it on Pusher, all that is left is to listen to that broadcast and display the ‘xxxx is typing…’ feature.\n\nFirst, we’ll initialize Pusher in the script section of our chat page using our **PUSHER_APP_KEY** and **PUSHER_APP_CLUSTER** (once again replace these with the values from your dashboard).\n\n```\n    var pusher = new Pusher('PUSHER_APP_KEY', {\n        cluster:'PUSHER_APP_CLUSTER'\n    });\n```\n\nTo implement the broadcaster exemption we mentioned earlier, we’ll get the socket id from our client `pusher` instance and amend our payload for the typing request to the server to include it.\n\n```\n    var socketId = null;\n    pusher.connection.bind('connected', function() {\n      socketId = pusher.connection.socket_id;\n    });\n    \n    var isTypingCallback = debounce( function() {\n        $.post('/chat/typing', {\n            typer: currentUser,\n            socket_id: socketId // pass socket_id parameter to be used by server\n        });\n    }, 600, true);\n```\n\nNow that Pusher is initialized on our client side, we’ll subscribe to the chat channel and implement our feature using the `typer` passed.\n\n```\n    var channel = pusher.subscribe('chat');\n    \n    channel.bind('typing', function(data) {\n        $('#typerDisplay').text( data.typer + ' is typing...');\n        \n        $('.chat__typing').fadeIn(100, function() {\n            $('.chat__type__body').addClass('typing_display__open');\n        }).delay(1000).fadeOut(300, function(){\n            $('.chat__type__body').removeClass('typing_display__open');\n        });\n    });\n```\n\n## Conclusion\n\nIn this tutorial, we’ve walked through implementing the popular a typing indicator feature using Pusher, .NET, C# code and some jQuery. We’ve also seen how to broadcast messages and avoid the sender responding to a message it sent. ","metaTitle":"Build a typing indicator in ASP.NET","metaDescription":"Learn how to implement a typing indicator feature  in your chat app using Pusher, .NET, C# code and jQuery. Broadcast messages and manage responses correctly."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5jgijmJdMAws2oQKmmEOaQ","type":"Entry","createdAt":"2018-02-28T12:58:23.259Z","updatedAt":"2020-06-19T14:33:04.319Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":11,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build realtime comments using ASP.NET","url":"realtime-comments-aspnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5KlhqILjZSg4wUSqY4Goqg","type":"Entry","createdAt":"2018-02-20T14:39:32.323Z","updatedAt":"2018-10-02T14:31:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Samuel Ogundipe","url":"samuel-ogundipe","email":"ayoogundipe2005@gmail.com","twitter":"https://twitter.com/fucked_down","github":"https://github.com/samuelayo","guestWriter":true}}],"projectRepo":"https://github.com/samuelayo/Net_real_time_commenting_pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2017-11-20","description":"Build a mini-blog engine with live commentary features using .NET. ","prerequisite":"A basic understanding of ASP.NET and Vue.js is needed to follow this tutorial.","content":"Reloading pages to view new comments can bore and is also strenuous, given you don't even know if the reply to your comment has come in yet or not. You keep reloading and keep wasting your data. To cut a long story short, users may abandon sites where they have to reload pages to see a new comment.\n\nToday, we will build a mini-blog engine with live commentary features using .NET and Pusher.\n\nTo follow through with this tutorial, we will use MSSQL as our database engine. Please ensure that it is up and running.\n\n![realtime-comments-aspnet-demo](//images.contentful.com/1es3ne0caaid/46ZgWePRgImgGm2uIQay6m/bf106f3e805723fa7fc033b95778cb35/realtime-comments-aspnet-demo.gif)\n\n## Setting up a Pusher account and app\n\n[Pusher](https://pusher.com) is a hosted service that makes it super-easy to add realtime data and functionality to web and mobile applications.\n\nPusher acts as a realtime layer between your servers and clients. Pusher maintains persistent connections to the clients - over Web-socket if possible and falling back to HTTP-based connectivity - so that as soon as your servers have new data they want to push to the clients they can do, via Pusher.\n\nIf you do not already have one, head over to Pusher and create a free account.\n\nWe will register a new app on the dashboard. The only compulsory options are the app name and cluster. A cluster represents the physical location of the Pusher server that will handle your app’s requests. Also, copy out your App ID, Key, and Secret from the App Keys section, as we will need them later on.\n\n## Setting up the ASP.NET project in Visual Studio\n\nThe next thing we need to do is create a new `Asp.Net MVC application`. \n\nTo do so, let’s:\n\n- Open `Visual Studio` and select `N``ew Project` from the sidebar\n- Under templates, select `Visual C#`\n- Next, select `Web`\n- In the middle section, select `ASP.NET Web Application`.\n- For this tutorial, I named the project: `Real-Time-Commenting`.\n- Now we are almost ready. The next step will be to install the official `Pusher` library for `ASP.NET` using the `NuGet Package`.\n\nTo do this, we go to tools on the top bar, click on `NuGet Package Manager`, on the drop-down we select `Package Manager Console`.\n\nWe will see the `Package Manager Console` at the bottom of our Visual Studio. Next, let’s install the package by running:\n\n```\n    Install-Package PusherServer\n```\n\n## Crafting our application\n\nNow that our environment is set up and ready, let’s dive into writing code.\n\nBy default, Visual Studio creates three controllers for us. However, we will use the HomeController for the application logic.\n\nThe first thing we want to do is to define a model that stores the list of articles we have in the database. Let's call this model `BlogPost`. So, let's create a file called `BlogPost.cs` in our models folder, and add:\n\n```\n    using System;\n    using System.Collections.Generic;\n    using System.ComponentModel.DataAnnotations.Schema;\n    using System.Linq;\n    using System.Web;\n    \n    namespace Real_Time_Commenting.Models\n    {\n        public class BlogPost\n        {\n            public int BlogPostID { get; set; }\n    \n            public string Title { get; set; }\n    \n            [Column(TypeName = \"ntext\")]\n            public string Body { get; set; }\n        }\n    }\n```\n\nIn this code block, we have defined the model that holds our blog posts. The properties which we have defined here include:\n\n- The id of the post, called `BlogPostID` (usually the primary key)\n- The title of our post, called `Title` (Defined as a string)\n- The body of the post which we will be creating. Defined as a string\n\nNext, let us create the model called `Comment`, which we had referenced earlier on. Let's create a file called `Comment.cs` in our models folder and add:\n\n```\n    using System;\n    using System.Collections.Generic;\n    using System.ComponentModel.DataAnnotations.Schema;\n    using System.Linq;\n    using System.Web;\n    \n    namespace Real_Time_Commenting.Models\n    {\n        public class Comment\n        {\n            public int CommentID { get; set; }\n            \n            public string Name { get; set; }\n            \n            [Column(TypeName = \"ntext\")]\n            public string Body { get; set; }\n            \n            public int BlogPostID { get; set; }\n        }\n    }\n```\n\nLooking at the code above, we notice that we have declared the following properties:\n\n- The ID of our comment called `CommentID` (Usually the primary key)\n- The name of the person commenting.\n- The body of the comment.\n- The ID of the post we are commenting on.\n\nNow that we have defined our model, let’s reference it in our default database context called `ApplicationDbContext`. To do this, let’s open `models\\IdentityModels.cs` file, then locate the class called `ApplicationDbContext` and add the following after the create function:\n\n```\n    public DbSet\u003cBlogPost\u003e BlogPost { get; set; }\n    public DbSet\u003cComment\u003e Comment { get; set; }\n```\n\nIn the code block above, the `DbSet` class represents an entity set used for read, update, and delete operations.\nHere, we have defined two entities, our `BlogPost` and `Comment` models. We will now have access to them from an instance of the `ApplicationDbContext` .\n\n## Connecting to our database\n\nAlthough our model is set up, we still need to attach a database to our application. To do so, select the Server Explorer on the left-hand side of our Visual Studio, right click on Data Connections and add a database.\nThere are various databases that are lightweight and can fit into the application we are building, such as:\n\n- Microsoft access database\n- Sqlite Database\n- MSSQL Server\n\nFor this tutorial, I used the MSSQL Server.\n\n## Creating our controller\n\nNow both our model and database are setup, let’s go ahead creating our index route. Open the `HomeController` and replace it with:\n\n```\n    using PusherServer;\n    using Real_Time_Commenting.Models;\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using System.Web;\n    using System.Web.Mvc;\n    \n    namespace Real_Time_Commenting.Controllers\n    {\n        public class HomeController : Controller\n        {\n            ApplicationDbContext db = new ApplicationDbContext();\n            public ActionResult Index()\n            {\n                return View(db.BlogPost.AsQueryable());\n            }\n    \n            public ActionResult Create()\n            {\n                return View();\n            }\n            \n            [HttpPost]\n            public ActionResult Create(BlogPost post)\n            {\n                db.BlogPost.Add(post);\n                db.SaveChanges();\n                return RedirectToAction(\"Index\");\n            }\n    \n            public ActionResult Details(int? id)\n            {\n                return View(db.BlogPost.Find(id));\n            }\n    \n            public ActionResult Comments(int? id)\n            {\n                var comments = db.Comment.Where(x =\u003e x.BlogPostID == id).ToArray();\n                return Json(comments, JsonRequestBehavior.AllowGet);\n            }\n    \n            [HttpPost]\n            public async Task\u003cActionResult\u003e Comment(Comment data)\n            {\n                db.Comment.Add(data);\n                db.SaveChanges();\n                var options = new PusherOptions();\n                options.Cluster = \"XXX_APP_CLUSTER\";\n                var pusher = new Pusher(\"XXX_APP_ID\", \"XXX_APP_KEY\", \"XXX_APP_SECRET\", options);\n                ITriggerResult result = await pusher.TriggerAsync(\"asp_channel\", \"asp_event\", data);\n                return Content(\"ok\");\n            }\n        }\n    }\n```\n\nIn the code block above, we have defined six different functions :\n\n- The `Index` function, which shows a quick list of all our blog posts.\n- The `Create` function, which handles the addition of new BlogPosts for both `GET` and `POST` requests.\n- The `D``etails` function, which returns the full view of our post.\n- The `Comment``s` function, which returns a JSON data of all the comments for a particular post.\n- The `Comment` function, which handles the addition of a new comment and emitting the data to Pusher.\n\nBefore looking at our controller functions, we notice that there is an import of our DB context into our class with the line that says:\n\n```\n    ApplicationDbContext db = new ApplicationDbContext();\n```\n\nThis makes it possible to access the database model which we have defined  in our `ApplicationDbContext` class.\n\nIn the `Index` function we return our View, passing in a list of all the posts we have in our database, which will be looped.\n\nNext, In the `Create` function that handles our `GET` request, we simply return the view for creating a new post.\n\nWe move to the `Create` function that handles our `POST` request, which receives an argument called `post` of type `BlogPost` . In this function we add a new `post` into the database, after which we return a redirect to our `Index` function.\n\nIn our `Details` function, we return an instance of a particular `post` to our view which will be displayed. This view will also display the form which allows us to add comments.\n\nIn our `Comments` function, we return all the `comments` that belong to a particular `post`, the ID of which was supplied as JSON. This method will be called via an AJAX POST.\n\nFinally, our `Comment` function handles adding the comments to the database, and sending the data to Pusher. We notice here that this function is an `async` method. This is because the Pusher library sends the data asynchronously, and we have to await its response. \n\nAlso, we need to replace `XXX_APP_CLUSTER`, `XXX_APP_ID`, `XXX_APP_KEY` and `XXX_APP_SECRET` with our app cluster, ID, key and secret which we got from Pusher earlier on.\n\n## Creating our view files\n\nTo complete our application we will need 3 different view files, which we will discuss below.\n\n### The index view\n\nLet us replace the default content in the `Index.cshtml` file at `Views\\Home\\``Index``.cshtml` with:\n\n```\n    @model IEnumerable\u003cReal_Time_Commenting.Models.BlogPost\u003e\n    \n    @{\n        ViewBag.Title = \"Index\";\n    }\n    \n    \u003ch2\u003eIndex\u003c/h2\u003e\n    \n    \u003cp\u003e\n        @Html.ActionLink(\"Create New\", \"Create\")\n    \u003c/p\u003e\n    \u003ctable class=\"table\"\u003e\n        \u003ctr\u003e\n            \u003cth\u003e\n                @Html.DisplayNameFor(model =\u003e model.Title)\n            \u003c/th\u003e\n            \u003cth\u003e\n                @Html.DisplayNameFor(model =\u003e model.Body)\n            \u003c/th\u003e\n            \u003cth\u003e\u003c/th\u003e\n        \u003c/tr\u003e\n    \n    @foreach (var item in Model) {\n        \u003ctr\u003e\n            \u003ctd\u003e\n                @Html.DisplayFor(modelItem =\u003e item.Title)\n            \u003c/td\u003e\n            \u003ctd\u003e\n                @Html.DisplayFor(modelItem =\u003e item.Body)\n            \u003c/td\u003e\n            \u003ctd\u003e\n                @Html.ActionLink(\"Details\", \"Details\", new { id=item.BlogPostID }) |\n            \u003c/td\u003e\n        \u003c/tr\u003e\n    }\n    \n    \u003c/table\u003e\n```\n\nLooking at the HTML structure above, we notice we have defined a table which lists all our posts and links them to the details page.\n\n### The create view\n\nHere, we need to create a new file called `Create.cshtml` in the `View\\Home` folder and paste the following into it:\n\n```\n    @model Real_Time_Commenting.Models.BlogPost\n    \n    @{\n        ViewBag.Title = \"Create\";\n    }\n    \n    \u003ch2\u003eCreate\u003c/h2\u003e\n    \n    \n    @using (Html.BeginForm()) \n    {\n        @Html.AntiForgeryToken()\n    \n        \u003cdiv class=\"form-horizontal\"\u003e\n            \u003ch4\u003eBlogPost\u003c/h4\u003e\n            \u003chr /\u003e\n            @Html.ValidationSummary(true, \"\", new { @class = \"text-danger\" })\n            \u003cdiv class=\"form-group\"\u003e\n                @Html.LabelFor(model =\u003e model.Title, htmlAttributes: new { @class = \"control-label col-md-2\" })\n                \u003cdiv class=\"col-md-10\"\u003e\n                    @Html.EditorFor(model =\u003e model.Title, new { htmlAttributes = new { @class = \"form-control\" } })\n                    @Html.ValidationMessageFor(model =\u003e model.Title, \"\", new { @class = \"text-danger\" })\n                \u003c/div\u003e\n            \u003c/div\u003e\n    \n            \u003cdiv class=\"form-group\"\u003e\n                @Html.LabelFor(model =\u003e model.Body, htmlAttributes: new { @class = \"control-label col-md-2\" })\n                \u003cdiv class=\"col-md-10\"\u003e\n                    @Html.EditorFor(model =\u003e model.Body, new { htmlAttributes = new { @class = \"form-control\" } })\n                    @Html.ValidationMessageFor(model =\u003e model.Body, \"\", new { @class = \"text-danger\" })\n                \u003c/div\u003e\n            \u003c/div\u003e\n    \n            \u003cdiv class=\"form-group\"\u003e\n                \u003cdiv class=\"col-md-offset-2 col-md-10\"\u003e\n                    \u003cinput type=\"submit\" value=\"Create\" class=\"btn btn-default\" /\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    }\n    \n    \u003cdiv\u003e\n        @Html.ActionLink(\"Back to List\", \"Index\")\n    \u003c/div\u003e\n    \n    @section Scripts {\n        @Scripts.Render(\"~/bundles/jqueryval\")\n    }\n```\n\nIn the HTML structure above we have three main inputs:\n\n- A text input element, which holds the title of the post.\n- A text input element, which holds the content of the post.\n- A button element, which is used to submit the new entry.\n\n### The details view and Vue.js bindings**\n\nThis is the final View file we will be needing. This file also handles binding to Pusher events and updating the comments in realtime using Pusher and Vue.\nLet us create a new file called `Details.cshtml` in our `Views\\Home` folder and add the following content into it:\n\n```\n    @model Real_Time_Commenting.Models.BlogPost\n    \n    @{\n        ViewBag.Title = \"Details\";\n    }\n    \n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.3.4/vue.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.2/axios.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"//js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cstyle\u003e\n        .user_name{\n        font-size:14px;\n        font-weight: bold;\n    }\n    .comments-list .media{\n        border-bottom: 1px dotted #ccc;\n    }\n    \u003c/style\u003e\n    \u003ch2\u003eDetails\u003c/h2\u003e\n    \u003cdiv id=\"app\"\u003e\n        \u003cdiv\u003e\n            \u003ch4\u003eBlogPost\u003c/h4\u003e\n            \u003chr /\u003e\n            \u003cdl class=\"dl-horizontal\"\u003e\n                \u003cdt\u003e\n                    @Html.DisplayNameFor(model =\u003e model.Title)\n                \u003c/dt\u003e\n    \n                \u003cdd\u003e\n                    @Html.DisplayFor(model =\u003e model.Title)\n                \u003c/dd\u003e\n    \n                \u003cdt\u003e\n                    @Html.DisplayNameFor(model =\u003e model.Body)\n                \u003c/dt\u003e\n    \n                \u003cdd\u003e\n                    @Html.DisplayFor(model =\u003e model.Body)\n                \u003c/dd\u003e\n    \n            \u003c/dl\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-8\"\u003e\n                    \u003cdiv class=\"page-header\"\u003e\n                        \u003ch1\u003e\u003csmall class=\"pull-right\"\u003e{{comments.length}} comments\u003c/small\u003e Comments \u003c/h1\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"comments-list\"\u003e\n                        \u003cdiv class=\"media\" v-for=\"com in comments\"\u003e\n                            \u003cdiv class=\"media-body\"\u003e\n                                \u003ch4 class=\"media-heading user_name\"\u003e{{com.Name}}\u003c/h4\u003e\n                                {{com.Body}}\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003cbr /\u003e\n            \u003cp\u003eYour Comment\u003c/p\u003e\n            \u003cform onsubmit=\"return false;\"\u003e\n                \u003cinput type=\"text\" id=\"Name\" placeholder=\"Your Name\" v-model=\"comment.Name\" class=\"form-control\" /\u003e\n                \u003ctextarea rows=\"3\" placeholder=\"Your Comment\" id=\"Body\" v-model=\"comment.Body\" class=\"form-control\"\u003e\u003c/textarea\u003e\n                \u003cbutton class=\"btn btn-success\" v-on:click=\"submit_comment()\"\u003esave\u003c/button\u003e\n            \u003c/form\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cp\u003e\n    \n        @Html.ActionLink(\"Back to List\", \"Index\")\n    \u003c/p\u003e\n```\n\nIn the above block of code, we have displayed the title and content of the current post, and **the number of comments** it has.\n\nWe have also created our comment form which comprises three main elements, which are:\n\n- Text input for the name of the person making the comment.\n- Textarea for the body of the comment.\n- Button to save the new comment into the database.\n\nNotice that we have used Vue’s `v-for` directive to iterate and display the comments which are available.\n\nAlso, note we have included some required libraries such as:\n\n- axios JavaScript library\n- Vue js JavaScript library\n- Pusher JavaScript library\n\n### Pusher bindings and Vue.js snippet\n\nBelow is our example Vue snippet used to handle the comment submission and Pusher’s realtime updates.\n\n```\n    \u003cscript\u003e\n    var pusher = new Pusher('XXX_APP_KEY', {\n        cluster: 'XXX_APP_CLUSTER'\n    });\n    var my_channel = pusher.subscribe('asp_channel');\n    var app = new Vue({\n        el: '#app',\n        data: {\n            comments: [],\n            comment: {\n                Name: '',\n                Body: '',\n                BlogPostID: @Model.BlogPostID\n            }\n        },\n        created: function() {\n            this.get_comments();\n            this.listen();\n        },\n        methods: {\n            get_comments: function() {\n                axios.get('@Url.Action(\"Comments\", \"Home\", new { id = @Model.BlogPostID }, protocol: Request.Url.Scheme)')\n                    .then((response) =\u003e {\n    \n                        this.comments = response.data;\n    \n                    });\n    \n            },\n            listen: function() {\n                my_channel.bind(\"asp_event\", (data) =\u003e {\n                    if (data.BlogPostID == this.comment.BlogPostID) {\n                        this.comments.push(data);\n                    }\n    \n                })\n            },\n            submit_comment: function() {\n                axios.post('@Url.Action(\"Comment\", \"Home\", new {}, protocol: Request.Url.Scheme)', this.comment)\n                    .then((response) =\u003e {\n                        this.comment.Name = '';\n                        this.comment.Body = '';\n                        alert(\"Comment Submitted\");\n    \n                    });\n            }\n        }\n    });\n    \u003c/script\u003e\n```\n\nIn the code block above, we have done two major activities, which are:\n\n### Uploading comment code\n\nTo process new comments from the client side to the server, the following steps were followed:\n\n- We attached a Vue event listener `@click` to our submit button which fires a method called `submit_comment`.\n- We defined a function called `submit_comment` which uses `axios` to make a POST request to our `comment` function.\n\n## Subscribing for feed additions on server from other clients\n\nAfter the comment has been sent to the server, a request is sent to Pusher to return an event with the new data we have broadcasted. To listen for these realtime events, we have:\n\n- Initialized a Pusher object while passing our app key and cluster.\n- Subscribed to our channel called `asp_channel`.\n- In the listen method in our Vue code, we declared a binding to our event called `asp_event`. In the callback function of this binding, we push the new data to our list of comments.\n\nThat’s it! Now, once a new comment is made, it also gets broadcast and we can listen using our channel to update the comments in realtime.\n\n![realtime-comments-aspnet-demo](//images.contentful.com/1es3ne0caaid/46ZgWePRgImgGm2uIQay6m/bf106f3e805723fa7fc033b95778cb35/realtime-comments-aspnet-demo.gif)\n\n## Conclusion\n\nIn this article, we have covered how to create a live commentary feature using .NET and Pusher, and creating a mini blog engine in .NET.\nYou can download it for educational purposes.\nHave any reservations or comments, let us know your feedback in the comments.","metaTitle":"Build realtime comments using ASP.NET","metaDescription":"Build a mini-blog engine with live commentary features using .NET. Create a commentary feature that will keep your blog updated in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rGqDofyvusUa4i0CSQ6KE","type":"Entry","createdAt":"2018-02-22T15:02:44.761Z","updatedAt":"2020-06-19T14:29:47.852Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a photo feed using ASP.NET","url":"photo-feed-aspnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5KlhqILjZSg4wUSqY4Goqg","type":"Entry","createdAt":"2018-02-20T14:39:32.323Z","updatedAt":"2018-10-02T14:31:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Samuel Ogundipe","url":"samuel-ogundipe","email":"ayoogundipe2005@gmail.com","twitter":"https://twitter.com/fucked_down","github":"https://github.com/samuelayo","guestWriter":true}}],"projectRepo":"https://github.com/samuelayo/ASP.NET-PHOTO-FEED","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-09-28","description":"Build a mini system that allows people to upload their photographs in realtime.","prerequisite":"A basic understanding of C# and JavaScript is needed to follow this tutorial.","content":"We will build a mini system that allows people to upload their images/photographs for everyone to view in realtime. While this can be likened to a mini-Instagram, it is without the comment, like and views aspect. Sounds cool? Let’s ride on.\n\n## Setting up a Pusher account and app\n\nPusher is a hosted service that makes it super-easy to add realtime data and functionality to web and mobile applications.\n\nPusher sits as a realtime layer between your servers and your clients. Pusher maintains persistent connections to the clients - over Websockets if possible and falling back to HTTP-based connectivity - so that as soon as your servers have new data they want to push to the clients they can do so via Pusher.\n\nIf you do not already have one, head over to [Pusher](https://Pusher.com) and create a free account.\nWe will register a new app on the dashboard. The only compulsory options are the app name and cluster. A cluster represents the physical location of the Pusher server that will handle your app’s requests. Also, select `jQuery` as the front-end technology, and `ASP.NET` as the back-end tech for this tutorial.  For other projects, you can choose as per your requirements.\nNext, copy out your App ID, Key, and Secret from the `App Keys` section, as we will need them later on.\n\n![photo-feed-aspnet-create-app](//images.contentful.com/1es3ne0caaid/cCYiSwvQicgakmOOEwSMq/2038fcd7642b17465b331d51bcd502b9/photo-feed-aspnet-create-app.png)\n\n## Setting up the ASP.NET project in Visual Studio\n\nThe next thing we need to do is create a new Asp.Net MVC application. \nTo do so, let’s:\n\n- Open Visual Studio and select new project from the sidebar\n- Under templates, select `Visual C#`\n- Next, select web\n- In the middle section, select `ASP.N``ET MVC Web Applicat``ion`.\n\nFor this tutorial, I named the project: `Real-time-photo-feed`.\nNow we are almost ready. The next step will be to install the official `Pusher` library for .Net using the `NuGet Package`.\n\nTo do this, we go to tools, via the menu on the top bar, click on `NuGet Package Manager`, on the drop-down we select `Package Manager Console`.\n\nWe will see the `Package Manager Console` at the bottom of our Visual Studio. Next, let’s install the package by running:\n\n```\n    Install-Package PusherServer\n```\n\nAlternatively, we can also install the `Pusher` library using the `NuGet Package Manager UI`. To do this, in the `**S**``olution Explorer`, right-click either `References` or a project and select `Manage NuGet Packages`. The Browse tab displays available packages by popularity. Search for the `Pusher` package by typing in `PusherServer` into the search box on the top right. Select the Pusher package to display the package information on the right and to enable the `Install` button.\n\n## Crafting our application\n\nNow that our environment is set up and ready, let’s dive into writing code.\nBy default, Visual Studio creates three controllers for us, however we will use the `HomeController` for the application logic.\nThe first thing we want to do is to define a model that stores the list of images we have in the database.\nUnder the `models` folder, let’s create a file named `PhotoFeed.cs` and add the following content:\n\n```\n    using System;\n    using System.Collections.Generic;\n    using System.ComponentModel.DataAnnotations;\n    using System.Linq;\n    using System.Web;\n    \n    namespace Real_time_photo_feed.Models\n    {\n        public class PhotoFeed\n        {\n            [Key]\n            public int Id { get; set; }\n            [Required]\n            public string Comment { get; set; }\n    \n            public string Imagepath { get; set; }\n    \n        }\n    }\n```\n\nIn the above block of code, we have declared a model called `PhotoFeed` with three main properties:\n\n- Id: This is the primary key of the model table.\n- Comment: The description of the image.\n- Imagepath: The path to the stored image.\n\nNow we have defined our model, let’s reference it in our default database context called `ApplicationDbContext`. To do this, let’s open `models\\IdentityModels.cs` file, then locate the class called `ApplicationDbContext` and add the following after the create function:\n\n```\n    public DbSet\u003cPhotoFeed\u003e FeedModel { get; set; }\n```\n\nIn the code block above, the `DBSet` class represents an entity set used for read, update, and delete operations. The entity which we will use to do CRUD operations is the `PhotoFeed` model we created earlier, and we have given it the name `FeedModel`.\n\n## Connecting our database\n\nAlthough our model is set up, we still need to attach a database to our application. To do so, select the Server Explorer on the left-hand side of our Visual Studio, right click on Data Connections and add a database.\nThere are various databases that are lightweight and can fit into the application we are building, such as:\n- Microsoft access database\n- Sqlite Database\n- MSSQL Server\n- Firebird\n- VistaDb\n\nFor this tutorial, I used the MSSQL Server.\n\n## Creating our index route\n\nNow both our model and database is set to work, let’s go ahead creating our index route. Open the `HomeController` and replace it with the following code:\n\n```\n    using PusherServer;\n    using Real_time_photo_feed.Models;\n    using System;\n    using System.Collections.Generic;\n    using System.IO;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using System.Web;\n    using System.Web.Mvc;\n    \n    namespace Real_time_photo_feed.Controllers\n    {\n        public class HomeController : Controller\n        {\n            ApplicationDbContext db = new ApplicationDbContext();\n            public ActionResult Index()\n            {\n               var me = db.FeedModel.AsQueryable();\n    \n                return View(me);\n            }\n            [HttpPost]\n            public async Task\u003cActionResult\u003e Index(PhotoFeed feed, HttpPostedFileBase upload)\n            {\n    \n                if (ModelState.IsValid)\n                {\n                    if (upload != null \u0026\u0026 upload.ContentLength \u003e 0)\n                    {\n                        var FileName = System.IO.Path.GetFileName(upload.FileName);\n                        var newpath = Path.Combine(HttpContext.Server.MapPath(\"~/UploadedFiles\"), FileName);\n                        upload.SaveAs(newpath);\n                        PhotoFeed setdata = new PhotoFeed();\n                        setdata.Comment = feed.Comment;\n                        setdata.Imagepath = \"/UploadedFiles/\"+FileName;\n                        db.FeedModel.Add(setdata);\n                        db.SaveChanges();\n    \n                        var options = new PusherOptions();\n                        options.Cluster = \"XXX_APP_CLUSTER\";\n                        var pusher = new Pusher(\"XXX_APP_ID\", \"XXX_APP_KEY\", \"XXX_APP_SECRET\", options);\n                        ITriggerResult result = await pusher.TriggerAsync(\"a_channel\", \"an_event\", setdata);\n                    }\n                }\n                    return Content(\"ok\");\n            }\n    \n        }\n    }\n```\n\nIn the code block above, we have defined our Index function for both `GET` and `POST` requests.\nBefore looking at our `GET` and `POST` controller functions, we notice that there is an import of our db context into our class with the line that says:\n\n```\n    ApplicationDbContext db = new ApplicationDbContext();\n```\n\nThis makes it possible to access our database model which we have defined using the `DbSet` class in our `ApplicationDbContext` class.\nIn the `GET` function, we have returned the view with which we will handle the addition and realtime updating of our feed.\n\nNotice that in the `GET` function, we pass a variable into the view function called `me`. This variable is a **queryable** version of our `BlogFeed` model. This will be passed to the view, which is later looped and rendered.\n\nObserve that the `POST` method is set to be asynchronous. This is because the Pusher .NET library uses the await operator to wait for the asynchronous response from the data sent to Pusher.\nIn this function, we first add our new movie to the database, then we trigger an event. Once the event has been emitted, we then return an ok string.\n\nHowever, please note that the code above would not handle any error if the Image was saved in DB but not posted using Pusher. We might need to use a try and catch statement to handle failures in posting to Pusher.\n\n## Creating our view files\n\nLet’s open up our `Views\\Home\\Index.cshtml` and replace the content with the following:\n\n```\n    @model IEnumerable\u003cReal_time_photo_feed.Models.PhotoFeed\u003e\n    \n    @{\n        Layout = null;\n    }\n    \n    \n       \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eASP.NET Photo feed\u003c/title\u003e\n        \u003clink href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"//js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \n        \u003cdiv class=\"container\"\u003e\n            \u003cform method=\"post\" enctype=\"multipart/form-data\" action=\"/Home/Index\" onsubmit=\"return feed_it()\"\u003e\n    \n                \u003cdiv class=\"form-group\"\u003e\n                    \u003clabel for=\"usr\"\u003eImage:\u003c/label\u003e\n                    \u003cinput type=\"file\" id=\"upload\" name=\"upload\" class=\"form-control\" required\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003clabel for=\"pwd\"\u003ecomment:\u003c/label\u003e\n                    \u003cinput type=\"text\" id=\"Comment\" name=\"Comment\" class=\"form-control\" required\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003cbutton type=\"submit\" class=\"btn btn-success\"\u003eFeed it\u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/form\u003e\n            \u003cdiv class=\"row\" id=\"feeds\"\u003e\n    \n    \n                @foreach (var item in Model)\n                {\n                \u003cspan\u003e\n                    \u003ch2\u003e@item.Comment\u003c/h2\u003e\n                    \u003cimg src=\"@item.Imagepath\"\u003e\n                \u003c/span\u003e\n                }\n    \n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the above block of code, we have created our form which **comprises** three main elements, which are:\n- Text input for the comment of the image.\n- File input for selecting the image we want to feed.\n- Button to save the new entry into the database.\n\nAlso, note we have included some required libraries such as:\n- Bootstrap CSS\n- jQuery JavaScript library\n- Pusher JavaScript library\n\n## Pusher bindings and jQuery snippet\n\nBelow is our example jQuery snippet used to handle the file upload and Pusher’s realtime updates.\n\n```\n    \u003cscript\u003e\n         var files;\n    \n            // Add events\n            $(document).ready(function() {\n                $('input[type=file]').on('change', prepareUpload);\n            })\n    \n    \n            // Grab the files and set them to our variable\n            function prepareUpload(event) {\n                files = event.target.files;\n            }\n    \n            function feed_it() {\n                var data = new FormData();\n                $.each(files, function(key, value) {\n                    data.append('upload', value);\n                });\n                data.append('Comment', document.getElementById('Comment').value);\n    \n    \n                $.post({\n                    url: '/Home/Index',\n                    data: data,\n                    processData: false, // Don't process the files\n                    contentType: false, // Set content type to false as jQuery will tell the server it's a query string request\n                    success: function(data) {\n                        if (data == \"ok\") {\n                            alert('done');\n                            document.getElementById('Comment').value = '';\n                        }\n                    },\n                    error: function(error) {\n                        alert('an error occured, please try again later')\n                    }\n                });\n                return false;\n            }\n            var pusher = new Pusher(\"XXX_APP_KEY\", {\n    \n                cluster: \"XXX_APP_CLUSTER\"\n            });\n            var my_channel = pusher.subscribe('a_channel');\n            my_channel.bind(\"an_event\", function(doc) {\n    \n                var new_message = `\u003cspan\u003e\n                            \u003ch2\u003e` + doc.Comment + `\u003c/h2\u003e\n                            \u003cimg  src=\"` + doc.Imagepath + `\"\u003e\n                        \u003c/span\u003e`;\n                $('#feeds').prepend(new_message);\n            });\n    \u003c/script\u003e\n```\n\nIn the code block above, we notice we have done two major activities, which are:\n\n**Uploading Image Code**\nTo process the upload of images from the client side to the server, the following steps were followed: \n\n- We attached an event listener to our file input button that stores our image into a variable called `files`.\n- We defined a function called `feed_it` which creates a new `FormData`, then appends our image and description to the form data. This function then makes an `AJAX POST` request to our `index` route.\n\n**Subscribing for Feed Additions on Server from other clients**\nAfter the image has been sent to the server, a request is sent to Pusher to return an event with the new data we have broadcasted. To listen for this realtime events, we have:\n\n- Initialized a Pusher object while passing our app key and cluster.\n- Subscribed to our channel called `a_channel`.\n- Declared a binding to our event called `an_event`. In the callback function of this binding, we have `pre-pended` the new data to our list of feeds.\n\nThat’s it! Now, once a photo gets uploaded, it also gets broadcast and we can listen using our channel to update the feed in realtime.\n\nBelow is an image of what we have built:\n\n![photo-feed-aspnet-demo](//images.contentful.com/1es3ne0caaid/7sdjWIDLSoCswsauwIQMKU/a5d8d3bd6b0efd803223fe042f9b8832/photo-feed-aspnet-demo.gif)\n\n## Conclusion\n\nIn this article, we have covered how to create a realtime photo feed using .NET and Pusher as well as handling file uploads in .NET.\nThe code base to this tutorial is available in a [public Github](https://github.com/samuelayo/ASP.NET-PHOTO-FEED).","metaTitle":"Build a photo feed using ASP.NET","metaDescription":"Build a system that allows people to upload their photographs in realtime, similar to Instagram using ASP.NET, jQuery and realtime features."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5iVt9pr8RaQmi6OmQYOmwG","type":"Entry","createdAt":"2018-02-22T15:02:42.944Z","updatedAt":"2020-06-19T14:18:26.221Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime counter using ASP.NET","url":"counter-aspnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WBKKiARVKggKEsq8gSuOS","type":"Entry","createdAt":"2018-02-12T15:10:05.476Z","updatedAt":"2018-02-26T12:31:10.466Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Counter","url":"live-counter","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}}],"reviewDate":"2017-09-06","description":"Create a live website visits counter using ASP.NET and jQuery.","prerequisite":"A basic understanding of C# and JavaScript is needed to follow this tutorial.","content":"It is common practice on websites and applications to make viewers aware of how many others have interacted with the same content e.g. [YouTube videos](https://www.youtube.com/watch?v=Qoti7G-tjN8). The practice of displaying this information emphasizes the relevance of the resource and draws more attention to it.\n\nIn this tutorial, we will emulate this practice by displaying the number of visits to a single page website. We will use C Sharp, C# for short, as our server-side language with ASP.NET MVC to build our webpage and Pusher to provide realtime updates of the page visits. \n\nLet’s get started!\n\n\n## Building the frontend for our realtime counter in .NET\n\n### First, let’s start up Visual Studio\nFor this tutorial, we’ll be using Visual Studio. It’s an IDE that makes ASP.NET development easier and quicker. Visual Studio 2017 is free and available for the popularly used Operating Systems. You can find installation details [here](https://www.visualstudio.com/).\n\n### Creating our new project\nWe’ll start a new project by clicking **New Project** on the Visual Studio dashboard. Following the GUI prompts (in this order) we:\n  - Set C# as the language to use\n  - Select ASP.NET MVC Project as the template\n  - Include a Unit Test Project (this is optional and can be unticked)\n  - Fill in the Project name e.g. Notif (any name would do)\n  - Fill in the Solution name i.e. application name (again any name would do)\n  - Select the version control options to include git to the project\n\nAnd then click **Create**.\n\nThe project gets created with a default `HomeController.cs`. This is the HomeController class file. For the purpose of this tutorial, being a single page website, this single Controller class will be enough.\n\n\n\u003e 💡 ASP.NET MVC routes follow the pattern of /{ControllerName}/{ActionName} i.e assuming our **HomeController.cs** has a method named **Index** the route would be **viewdotnet.com/Home/Index**. ASP.NET MVC provides **Home** as the default controller name and **Index** as the default action name so that a route ‘**/**’ i.e. **viewdotnet.com/** maps to the Index method in the Home controller.\n\nIn our `HomeController.cs` we’ll have\n\n```\n            public ActionResult Index()\n            {\n                var mvcName = typeof(Controller).Assembly.GetName();\n                var isMono = Type.GetType(\"Mono.Runtime\") != null;\n    \n                ViewData[\"Version\"] = mvcName.Version.Major + \".\" + mvcName.Version.Minor;\n                ViewData[\"Runtime\"] = isMono ? \"Mono\" : \".NET\";\n    \n                return View();\n            }\n```\n\n**ActionResult** is the return type of the method which specifies that it will return an action in the form of rendering a view, serving a streamed file, etc. **ViewData** is used to pass data from the method to the HTML file (our view file) that will be rendered. **View()** creates a view response which we return. **Note that** `**Mono**` **is only available on a Mac OS machine.** \n\n\u003e 💡 In ASP.NET MVC the views (html files) rendered by a Controller Class must exist in the View folder and either under the Shared folder or the Folder bearing the name of the Controller. i.e. for the HomeController views must be in either `Views/Home/*``.cshtml` or `Views/Shared/*``.cshtml`.\n\u003e \n\u003e Also when the view is unspecified in the View function it defaults to `index.cshtml`; these views extend `_Layout.cshtml` found in the Shared folder.\n\n### Create the single web page\n\nTo achieve a quick and simple web page for our visitors to view we’ll be using [Bootstrap](https://getbootstrap.com).\n\n```\n    //_Layout.cshtml file\n    \n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003e@ViewBag.Title\u003c/title\u003e\n            \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        @RenderBody()\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js\"\u003e \u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe’ve used CDNs to include to Bootstrap CSS and JS files and also the jQuery JS file (it is needed for Bootstrap JS).\n\n\n\u003e **@ViewBag** is another means of passing data to the view file from the controller\n\u003e **@RenderBody** is where our actual view `index.cshtml`  will be inserted in this base view\n\n```\n    // index.cshtml file\n    \n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003ch2\u003eView Funny Memes, Have a good laugh\u003c/h2\u003e\n            \u003cdiv class=\"col-md-8\"\u003e\n                \u003cimg src=\"http://i.imgur.com/gRWkE0j.jpg\"\u003e\n            \u003c/div\u003e        \n        \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nOur page has a header and a big image (pretty minimal stuff)\n\n## Keeping track of views\n\nNow we’ll write the code to display the number of visitors to our page. We’ll need our code:\n\n\n- To recognize a visit\n- To store the visits so far (adding to this stored value every time someone visits)\n- To pass the data (number of visitors) to our view to display\n\nIn our `HomeController.cs` we’ll add the code to retrieve the visits so far, increment it and pass it on to the view. To keep things light and simple, we’ll be using file storage as our store (i.e. reading and writing the number of visits to a file such as visitors.txt).\n\n```\n    //HomeController.cs\n    ...\n    using System.IO;\n    \n    namespace notif.Controllers\n    {\n        public class HomeController : Controller\n        {\n            public ActionResult Index()\n            {\n                ViewBag.Title = \"Views Dot Net | A pusher - .Net Tutorial\";\n            \n                var visitors = 0;\n            \n                if (System.IO.File.Exists(\"visitors.txt\")) {\n                    string noOfVisitors = System.IO.File.ReadAllText(\"visitors.txt\");\n                    visitors = Int32.Parse(noOfVisitors);\n                }\n                \n                ++visitors;\n            \n                var visit_text = (visitors == 1) ? \" view\" : \" views\";\n                System.IO.File.WriteAllText(\"visitors.txt\", visitors.ToString());\n            \n                ViewData[\"visitors\"] = visitors;\n                ViewData[\"visitors_txt\"] = visit_text;\n            \n            \n                return View();\n            }\n    ...\n```\n\nWe create a **visitors** variable and initialize it to 0. Then we check if the `visitors.txt` file exists, if it does then we’ve been visited in the past and we read the content into the **visitors** variable. Next, we increment the value of **visitors** by 1 (the visitor we are currently serving) and save the new value back into our file.\n\n\n\u003e 💡 To check if a file exists, read, and write into it, we’ll use the File class (available from ASP.NET) which is a member of the **System.IO** namespace so at the top of our class file we’ve added  `using System.IO;`\n\nNow that we have the number of visitors in a variable, we’ll pass it on to our view using **ViewData**. We’ve also added some supporting text based on the value of the visitors variable to improve readability. In our view file we’ll add some markup to display the visitors value and text we’re passing along.\n\n```\n    //index.cshtml\n    \n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003ch2\u003eView Funny Memes, Have a good laugh\u003c/h2\u003e\n            \u003cdiv class=\"col-md-8\"\u003e\n                \u003cimg src=\"http://i.imgur.com/gRWkE0j.jpg\"\u003e\n            \u003c/div\u003e        \n        \u003c/div\u003e\n        \u003cbr\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-12\"\u003e\n                \u003cdiv class=\"pull-left\"\u003e\n                    \u003cp\u003e \u003cb id=\"noOfVisitors\"\u003e@ViewData[\"visitors\"]\u003c/b\u003e \u003cspan id=\"visitorsText\"\u003e @ViewData[\"visitors_txt\"] \u003c/span\u003e \u003c/p\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nNow our page will look like:\n\n![counter-aspnet-debug](//images.contentful.com/1es3ne0caaid/5XpGPfMB3y8oOCw8euGOEc/5b6d29addaefac77c7c7b16a0b06c2af/counter-aspnet-debug.png)\n\n## Adding realtime updates to our views counter with Pusher\n\nWhile a user views our page we’d like them to know when more people visit the page by increasing the **number of views** without requiring a refresh. We will be using Pusher for this.\n\nTo start with, lets head over to the pusher [dashboard](https://dashboard.pusher.com/) and create an app. You can [register for free](https://pusher.com/signup?plan=sandbox) if you haven’t got an account. Fill out the create app form with the information requested.\n\nTo make our app realtime, we’ll make each visit trigger an event via Pusher on the server-side (i.e. backend) and have Pusher listen and react to that event on the client-side (i.e. view using JavaScript).\n\n### Triggering event on the server-side\n\nIn our `HomeController.cs`, on every new visit using Pusher we’ll trigger a `newVisit` event on a channel we’ll call `general` which will broadcast the current number of visits.\n\nTo do this, we’ll install Pusher via NuGet - *a packer manager for ASP.NET *- by:\n- Right clicking the `*Packages*` folder in our solution\n- Selecting `Add Packages` and;\n- Searching and selecting `Pusher Server`\n\nNext, we’ll initialize Pusher in our Controller using and trigger our `newVisit` event.\n\n```\n    //HomeController.cs\n    \n    ...\n    using PusherServer;\n    \n    public ActionResult Index()\n    {\n        ViewBag.Title = \"Views Dot Net | A pusher - .Net Tutorial\";\n        var visitors = 0;\n    \n        if (System.IO.File.Exists(\"visitors.txt\")) {\n            string noOfVisitors = System.IO.File.ReadAllText(\"visitors.txt\");\n            visitors = Int32.Parse(noOfVisitors);\n        }\n    \n        ++visitors;\n        var visit_text = (visitors == 1) ? \" view\" : \" views\";\n        \n        System.IO.File.WriteAllText(\"visitors.txt\", visitors.ToString());\n    \n        var options = new PusherOptions();\n        options.Cluster = \"PUSHER_APP_CLUSTER\";\n    \n        var pusher = new Pusher(\n        \"PUSHER_APP_ID\",\n        \"PUSHER_APP_KEY\",\n        \"PUSHER_APP_SECRET\", options);\n    \n        pusher.TriggerAsync(\n        \"general\",\n        \"newVisit\",\n        new { visits = visitors.ToString(), message = visit_text });\n    \n        ViewData[\"visitors\"] = visitors;\n        ViewData[\"visitors_txt\"] = visit_text;\n    \n        return View();\n    }\n```\n\n\u003e 💡 After Installing the `PusherServer` package we use it in our controller by adding `using PusherServer` at the top of our class definition.\n\nAfter initializing Pusher using our **PUSHER_APP_ID**, **PUSHER_APP_KEY,** *****PUSHER_APP_SECRET and PUSHER_APP_CLUSTER*** *(be sure to replace these with the actual values from your dashboard),* we will broadcast an object consisting of the **number of visitors** and the **visitors supporting text** with our pusher instance on the `newVisit` event via the `general` channel.\n\n### Listening for the event on our client-side\n\nTo react to our `newVisit` event and its corresponding data we’ll be using JavaScript and JQuery for DOM manipulation to display the event data.\n\n```\n    //_Layout.cshtml\n    \n    ...\n    \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n            \u003cscript\u003e\n    \n                // Enable pusher logging - don't include this in production\n                Pusher.logToConsole = true;\n    \n                var pusher = new Pusher('PUSHER_APP_KEY', {\n                    cluster:'PUSHER_APP_CLUSTER'\n                });\n    \n                var channel = pusher.subscribe('general');\n                \n                channel.bind('newVisit', function(data) {\n                  \n                  var visits = data.visits;\n                  var message = data.message;\n                  $('#noOfVisitors').text( visits );\n                  $('#visitorsText').text( message );\n                });\n            \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the above code, we:\n\n- Add the pusher library to our view via a CDN,\n- Initialize Pusher passing in our PUSHER_APP_KEY,\n- Subscribe to the `general` channel\n- Bind the channel to the `newVisit` event also attaching a callback function to the binding.\n\nIn our callback function we retrieve the **visits** and **message** data, then using jQuery pass it into our markup.\n\nNow we run our application by clicking the play button in the top left corner of our IDE and here’s a glimpse of our resulting webpage.\n\n![counter-aspnet-demo](//images.contentful.com/1es3ne0caaid/1rQGWpFwVK8k8EqIGoQaCq/9fc865b9cb2e12902f2c5870adb88bd4/counter-aspnet-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we’ve covered building a single web page with ASP.NET MVC in C# and how to implement realtime functionality in our web page using Pusher in both C# and JavaScript. There’s a lot more functionality we can achieve using ASP.NET and Pusher together, feel free to extend the functionality of your web page.","metaTitle":"Build a realtime counter using ASP.NET","metaDescription":"Discover how you can build a live counter using ASP.NET and jQuery."}}],"defaultValue":"Channels \u0026 ASP.NET","queryType":"tag","pages":2,"route":"/tutorials","query":{"product":"Channels","tag":"ASP.NET","page":"1"}}},"page":"/tutorials","query":{"product":"Channels","tag":"ASP.NET","page":"1"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=ASP.NET&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:19 GMT -->
</html>