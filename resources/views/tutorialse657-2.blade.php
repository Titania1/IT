<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=JavaScript&page=15 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:24 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">224</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; JavaScript</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials512c.html?product=Beams&amp;tag=JavaScript" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials0e67.html?product=Channels" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#C223CE"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; JavaScript"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/chat-sentiment-analysis-nestjs.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Nest.js</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app with sentiment analysis using Nest.js</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Learn to build a chat app with Nest.js. Add a fun element with sentiment analysis, automatically attaching emoticons bas...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/comments-sentiment-analysis-nextjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a comments widget with sentiment analysis using Next.js</h3><p class="css-k12xad e5jrto45">Learn to build a comments widget with Next.js. Use sentiment analysis to gauge the mood of the comments and automaticall...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-mysql-java.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Java<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting data in realtime from MySQL with Java</h3><p class="css-k12xad e5jrto45">Use MySQL replication logging to publish database changes to a React-based web dashboard.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-graph-nestjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a realtime graph using Nest.js</h3><p class="css-k12xad e5jrto45">Build a web app that tracks votes in realtime using Nest.js and Canvas.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-sentiment-analysis-nextjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Online Presence</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app with sentiment analysis using Next.js</h3><p class="css-k12xad e5jrto45">Use Next.js to build a chat app featuring sentiment analysis to track users&#x27; moods. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-tables-nextjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime table with Next.js</h3><p class="css-k12xad e5jrto45">Use Next.js, React Table and Pusher to create a movie review site, updated in realtime as users post reviews.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-table-datatables-nestjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Collaboration<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime table with DataTables and Nest.js</h3><p class="css-k12xad e5jrto45">Use Nest.js and DataTables to create a searchable employee list interface.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/postgresql-realtime.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Making PostgreSQL database realtime with Pusher and Node</h3><p class="css-k12xad e5jrto45">Learn to monitor a PostgreSQL database for changes in realtime, and display them in a browser audit panel.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-analytics-dashboard-express.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Building a realtime analytics dashboard for an Express application</h3><p class="css-k12xad e5jrto45">This tutorial shows you how to build a dashboard that monitors connections to an Express application. The dashboard will...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialscc39.html?product=Channels&amp;tag=JavaScript&amp;page=14" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials013b.html?product=Channels&amp;tag=JavaScript&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials3d47.html?product=Channels&amp;tag=JavaScript&amp;page=13" class="css-za1ua3 edg0byb1">13</a><a href="tutorialscc39.html?product=Channels&amp;tag=JavaScript&amp;page=14" class="css-za1ua3 edg0byb1">14</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialse657-2.html?product=Channels&amp;tag=JavaScript&amp;page=15" class="css-2wakph edg0byb1">15</a><a href="tutorials1051.html?product=Channels&amp;tag=JavaScript&amp;page=16" class="css-za1ua3 edg0byb1">16</a><a href="tutorialscc30.html?product=Channels&amp;tag=JavaScript&amp;page=17" class="css-za1ua3 edg0byb1">17</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials959a.html?product=Channels&amp;tag=JavaScript&amp;page=25" class="css-5s6711 edg0byb1">25</a><a href="tutorials1051.html?product=Channels&amp;tag=JavaScript&amp;page=16" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":224,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5axHEzyj0Wai02m4GcWSw0","type":"Entry","createdAt":"2018-05-06T17:31:45.700Z","updatedAt":"2018-05-06T17:31:49.489Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app with sentiment analysis using Nest.js","url":"chat-sentiment-analysis-nestjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/nest-pusher-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SgQuYVb0kSMIgEmwqImOA","type":"Entry","createdAt":"2018-02-12T14:49:17.136Z","updatedAt":"2018-04-19T08:52:46.508Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Nest.js","url":"nest-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-05-06","description":"Learn to build a chat app with Nest.js. Add a fun element with sentiment analysis, automatically attaching emoticons based on the user's detected mood.","prerequisite":"To follow this tutorial you need Node and npm installed on your machine. A basic understanding of TypeScript and Node.js will be helpful.","content":"## Introduction\n\nIn recent years, sentiment analysis has shifted from analyzing online product reviews to social media texts from Twitter and Facebook. Now with the advent and popularity of chat applications on virtually all web applications around the world, we can use a [sentiment analysis](https://github.com/thisandagain/sentiment) tool to add a fun feature that enriches users’ chat experience.\n\nIn this post, we will take a dive into a realtime chat demo. This application will be built using Nest.js and Pusher. Nest.js is a Node.js progressive framework for building efficient and scalable server-side applications. In addition, we will also be able to perform sentiment analysis on messages sent by users. \n\n## Prerequisites\n\nA basic understanding of TypeScript and Node.js will help you get the best out of this tutorial. It is assumed that you already have Node and npm installed. Kindly check [Node.js](https://nodejs.org/en/) and [npm](https://www.npmjs.com/) for further instructions and installation steps. \n\nHere is a quick overview of the technologies that we will be using in this post. \n\n\n- [Nest.js](https://nestjs.com/): a progressive framework for building efficient and scalable server-side applications. Built to take the advantage of modern JavaScript, but still preserves compatibility with pure JavaScript. \n- [Pusher](https://pusher.com/): a [Node.js](http://nodejs.org/) client to interact with the Pusher REST API\n- [Axios](https://www.npmjs.com/package/axios): a promise-based HTTP client that works both in the browser and in a Node.js environment.\n- [Sentiment](https://github.com/thisandagain/sentiment): Sentiment is a module that uses the [AFINN-165](http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010) wordlist and [Emoji Sentiment Ranking](http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0144296) to perform [sentiment analysis](http://en.wikipedia.org/wiki/Sentiment_analysis) on arbitrary blocks of input text.\n- [Vue.js](https://vuejs.org/): Vue is a progressive JavaScript frontend framework for building web applications.\n\n \n\n## Setting up the application\n\nThe simplest and most efficient way to set up a Nest.js application is to clone the starter repository made available on their [website](https://nestjs.com/).\n\nNow let’s run a command that will create a new project folder named `realtime-chat-nest` on your machine. Open your terminal or command prompt and run this command :\n\n```\n    $ git clone https://github.com/nestjs/typescript-starter.git realtime-chat-nest\n```\n\nGo ahead and change directory into the newly created folder and install all the dependencies for the project.\n\n```\n    // change directory\n    cd realtime-chat-nest\n    \n    // install dependencies\n    npm install\n```\n\n## Start the application\n\nRun the application with:\n\n```\n    npm start\n```\n\nThe command above will start the application on the default port used by Nest.js. Open your browser and navigate to http://localhost:3000. You should see the page with a welcome message like what we have below.\n\n![nest-hello-world](//images.ctfassets.net/1es3ne0caaid/45ET2cOwzYa8MUO6mIwq2Q/c9511e3c4c76117982d0bfadfd43c652/nest-hello-world.png)\n\n## Server dependencies\n\nRun the command below to install the server dependencies required for this project.\n\n```\n    npm install ejs body-parser pusher\n```\n\n- **ejs**: this is a simple templating language for generating HTML markup with plain JavaScript.\n\n\n- **Body-parser**: a middleware used for extracting the entire body portion of an incoming request stream and expose it on `req.body` .\n\n\n- **Pusher**: a Node.js client to interact with the Pusher REST API\n\n\n## Pusher account setup\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). \n\n![nest-phone-pusher-1](//images.ctfassets.net/1es3ne0caaid/43DKutJFOw86I2cCeMEGMG/246afa094f08c930af91a38c7b1a65fb/nest-phone-pusher-1.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![nest-phone-pusher-2](//images.ctfassets.net/1es3ne0caaid/6m8JvB3xxC444SmaIQ824i/5e5ea5d799a6717ca6c74324ac5a6576/nest-phone-pusher-2.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n\n![nest-phone-pusher-3](//images.ctfassets.net/1es3ne0caaid/4UPXLqxBWMc0mqUuMo462A/1f9779e509f53259bbd32cf0d244ef52/nest-phone-pusher-3.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![nest-phone-pusher-4](//images.ctfassets.net/1es3ne0caaid/1TPXcBKK9ua4Q2OuqSI0IS/5dd742674348e92defd7ecc4aa320755/nest-phone-pusher-4.png)\n\n## Bootstrap the application\n\nUnder the hood, Nest uses the Express library and therefore, favors the popular MVC pattern.\n\nTo set this up, open up `main.ts` file and update it with the content below:\n\n``` typescript\n    // ./src/main.ts\n    \n    import { NestFactory } from '@nestjs/core';\n    import { AppModule } from './app.module';\n    \n    import * as bodyParser from 'body-parser';\n    import * as express from 'express';\n    import * as path from 'path';\n    \n    async function bootstrap() {\n      const app = await NestFactory.create(AppModule);\n      app.use(express.static(path.join(__dirname, 'public')));\n       app.set('views', __dirname + '/views');\n       // set ejs as the view engine\n       app.set('view engine', 'ejs');\n      await app.listen(3000);\n    }\n    bootstrap();\n```\n\nThis is the entry point of the application and necessary for bootstrapping Nest.js apps. I have included the Express module, path, and set up ejs as the view engine for the application.\n\n\n## Building the homepage\n\nThe `views` folder will contain all templates for this application. Go ahead and create it within the `src` folder. Once you are done, create a new file named `index.ejs` right inside the newly created `views` folder and update the content with:\n\n``` html\n    // ./src/views/index.ejs\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"/style.css\"\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.13/vue.js\"\u003e\u003c/script\u003e\n        \n        \u003ctitle\u003e Chat \u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n            \n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-3\" id=\"active-user\"\u003e                    \n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003ch3 v-if=\"username\"\u003eHello {{ username }}\u003c/h3\u003e\n                        \u003cdiv v-else\u003e\n                            \u003ch3\u003eEnter a username\u003c/h3\u003e\n                            \u003cinput type=\"text\" @Keyup.enter=\"getUser\" placeholder=\"Username\" class=\"form-control\"\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n                \u003cdiv class=\"col-md-9\" id=\"chat-room\"\u003e\n                    \u003cdiv v-if=\"username\"\u003e\n                        \u003cdiv\u003e\n                            \u003cdiv style=\"border-bottom: 1px solid black\"\u003e\n                                \u003ch2\u003e{{ username }}\u003c/h2\u003e\n                            \u003c/div\u003e\n                            \u003cdiv v-for=\"chat in chats\" id=\"chat-box\"\u003e\n                                \u003cp\u003e {{chat.mood}} \u003c/p\u003e\n                                \u003cp\u003e \u003cb\u003e{{ chat.user }}\u003c/b\u003e\u003c/p\u003e\n                                \u003cp id=\"chat-message\"\u003e {{ chat.message }} \u003c/p\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"form-group\"\u003e\n                            \u003ctextarea placeholder=\"Type a message here then hit ENTER\"  @Keyup.enter=\"postMessages\"\u003e\u003c/textarea\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.2/axios.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"/main.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nOn this page, we are simply building a basic chat room that will showcase the realtime functionality and sentiment analysis that was mentioned earlier. This will serve as the homepage for the application, hence the need for it to be well structured.\n\nFirstly, we included a link to the Bootstrap CDN file to add some default styling and layout to our application. We also added a custom stylesheet for further styling. We will create this stylesheet in the next section. Also included in a `\u003cscript\u003e` tag just before the page title is a CDN file for Vue.js. This is to ensure that Vue.js is loaded immediately the `index.ejs` file is rendered.\n\nFurthermore, on this page, we used an event handler to listen to keyboard events using key modifiers aliases made available by Vue.js. This process will be discussed later in the tutorial.\n\nFinally, we included CDN file each for `Axios`, `Pusher` and then proceeded to add a custom script file named `main.js`. To set up this file, go ahead and create a `public`  folder within the `src` folder in the application and create the `main.js` file within it.\n\n\n## Stylesheet\n\nTo set up this stylesheet, locate the  `public` folder  and create a new file named `style.css` within it. Next, open the file and paste the code below:\n\n``` css\n    // ./src/public/style.css\n    \n    html{\n        height: 100%;\n    }\n      #active-user {\n          height: 600px;\n          background: #000000;    \n          color: #ffffff;\n          min-height: 600px;\n        \n          display: flex;\n          align-items: center;\n          justify-content: center;\n      }\n      #chat-room {\n          min-height: 600px;\n          background: #f5f5f5;\n      }\n      textarea {\n          position: absolute;\n          bottom: 10px;\n          width: 600px;\n          min-height: 120px;\n          padding: 20px;\n          border: none;\n          overflow: auto;\n          outline: none;\n      }\n      #chat-box {\n          padding: 20px; \n      }\n      #chat-message {\n          background: #f8f9fa!important;\n          max-width: 40%;\n          min-height: 50px;\n          padding: 3px;\n      }\n```\n\n## Handling routes\n\nThe controller layer in Nest.js is responsible for receiving an incoming request and returning the appropriate response to the client. Nest uses a controller metadata `@Controller` to map routes to a specific controller. The starter project already contains a controller by default. We will make use of this in order to render the home for this app. Open `./src/app.controller.ts` and edit as shown below:\n\n``` typescript\n    // ./src/app.controller.ts\n    \n    import { Get, Controller, Res } from '@nestjs/common';\n    \n    @Controller()\n    export class AppController {\n      @Get()\n      root(@Res() res) {\n        res.render('index');\n      }\n    }\n```\n\nThis controller will ensure that Nest maps every `/` route to `index.ejs` file.\n\n\n## Initialize the chat room\n\nAs carefully laid out on our `index.ejs` page earlier on, the chat room will contain two separate sections that will be differentiated by the width of the column. One of the sections will contain an input field that will accept a username and the other section will be where the chat messages are properly displayed.\n\nTo initialize the chat room, we will start by creating a new Vue instance with the Vue function. Open up the `main.js` file created earlier and paste the code below in it:\n\n``` javascript\n    // ./src/public/main.js\n    \n    new Vue({\n        el: '#app',\n        data: {\n            chats: [],\n            username: \"\",\n            mood: ''\n        },\n        methods: {\n            getUser(event) {\n                this.username = event.target.value;\n            }\n            ...\n        }\n    })\n```    \n\nHere, we created a Vue instance and as part of the options, we bound Vue to a div with an id of `app` and also passed data options. Further down, we used a method `getUser()` to retrieve the username of a user.\n\n\n## Post a message\n\n``` javascript\n    // ./src/public/main.js\n    \n    new Vue({\n        el: '#app',\n        data: {\n            chats: [],\n            username: \"\",\n            mood: ''\n        }\n        methods: {\n            getUser(event) {\n                ...\n            },\n            \n            postMessages(event) {\n                const chatMessage = event.target.value;\n                \n                if(event.keyCode === 13 \u0026\u0026 !event.shiftKey) {\n                    const chat = {\n                        user: this.username,\n                        message: chatMessage\n                    };\n                    \n                    event.target.value = \"\";\n                    \n                    axios.post('/message', chat)\n                    .then( data =\u003e {\n                        console.log(data);\n                    });\n                }\n            }\n        }\n    })\n```    \n\nIn order to send the chat message to the server, we created a `postMessages()` function with the responsibility of retrieving the chat message provided by a user and sending it to the server.\n\n## Create a controller\n\nEarlier, we already configured the `app.controller.ts` to render the homepage and display the form for consumers. The next thing we need to do is build the controller that will handle the data posted to the server. Create a new folder named `chat` in the `src` folder and create a new file called `chat.controller.ts` within it.\n\n``` typescript\n    // ./src/chat/chat.controller.ts\n    \n    import { Controller, Post, Res, Body, HttpStatus } from '@nestjs/common';\n    import { ChatService } from './chat.service';\n    @Controller('message')\n    export class ChatController {\n        constructor(private chatService: ChatService){}\n      @Post()\n      postMessage(@Res() res, @Body() data ) {\n          this.chatService.addMessage(data)\n          res.status(HttpStatus.OK).send(\"Comment posted successfully\")\n      }\n    }\n```\n\nAs shown above, we imported `ChatService` and injected it into the controller through the constructor. As recommended by Nest a controller should handle only HTTP requests and abstract any complex logic to a service. \n\n\n## Realtime service with Pusher\n\nAs required within the `ChatController` above, let’s create a component as a service. This will basically receive the posted `data`  object that contains, both the username and chat messages provided by the active user and publish it to a designated channel for the client side to listen and subscribe to. \n\nFurthermore, we’ll use the [Sentiment](https://github.com/thisandagain/sentiment) javascript library for analysis. To install this library, open a terminal in the root folder of your project and run the following command.\n\n\n```\n    npm install sentiment --save\n```\n\nOnce the installation process is completed, create a new file within `chat` folder named `chat.service.ts` \n\n``` typescript\n    // ./src/chat/chat.service.ts\n    \n    import { Component } from '@nestjs/common';\n    \n    const Sentiment = require('sentiment');\n    @Component()\n    export class ChatService {\n        \n        addMessage(data) {\n            const Pusher = require('pusher');\n            const sentiment = new Sentiment();\n            const sentimentScore = sentiment.analyze(data.message).score;\n            const chat = {\n                user: data.user,\n                message: data.message,\n                sentiment: sentimentScore\n            }\n            var pusher = new Pusher({ // replace with valid credentials\n                appId: 'YOUR_APP_ID',\n                key: 'YOUR_API_KEY',\n                secret: 'YOUR_SECRET_KEY',\n                cluster: 'CLUSTER',\n                encrypted: true\n              });\n              pusher.trigger('chats', 'new-chat', chat);\n        }\n    }\n```\n\nHere we have initialized Pusher with the required credentials in order to be able to trigger an event named `new-chat` through a channel named `chats.` We also required Sentiment module, this is important, as it will help us analyze the data messages posted by a user and returned respective scores by cross-checking the words.\n\n\n## Connecting the dots\n\nTo make this work, both the `ChatController` and `ChatService` needs to be registered within the `app.module.ts` file.\n\n``` typescript\n    // ./src/app.module.ts\n    \n    import { ChatController } from './chat/chat.controller';\n    import { ChatService } from './chat/chat.service';\n    import { Module } from '@nestjs/common';\n    import { AppController } from './app.controller';\n    @Module({\n      imports: [],\n      controllers: [AppController, ChatController],\n      components: [ChatService],\n    })\n    export class AppModule {}\n```\n\n\nRestart the development server if it is currently running. Check your page on [http://localhost:3000.](http://localhost:3000.) You should see: \n\n![nest-chat-sentiment-partial](//images.ctfassets.net/1es3ne0caaid/2OBl0TAMDKCIuQI4A6kmG0/14b2cefadef3718a31d005ca15ade6a3/nest-chat-sentiment-partial.png)\n\nIf we try to send a message, nothing will happen for now. This is because we have not updated the chat room with the values of the chat posted from the server. \n\n\n## Displaying chat messages\n\nIn order to receive the chat messages in realtime, we’ll use the `subscribe()` method from Pusher to subscribe to the created `chats` channel.\n\n``` javascript\n    // ./src/public/main.js\n    \n    const SAD_EMOJI = [55357, 56864];\n    const HAPPY_EMOJI = [55357, 56832];\n    const NEUTRAL_EMOJI = [55357, 56848];\n    new Vue({\n        el: '#app',\n        data: {\n           ...\n        },\n        created() {\n            let pusher = new Pusher('YOUR_API_KEY', {\n                cluster: 'CLUSTER',\n                encrypted: true\n            });\n            \n            const channel = pusher.subscribe('chats');\n            channel.bind('new-chat', data =\u003e {\n                const expression = data.sentiment \u003e 0 ? HAPPY_EMOJI : (data.sentiment === 0 ? NEUTRAL_EMOJI : SAD_EMOJI);\n                const response = {\n                    message: data.message,\n                    user: data.user,\n                    mood: String.fromCodePoint(...expression)\n                }\n                \n                this.chats.push(response);\n            });\n        },\n        methods: {\n            getUser(event) {\n               ..\n            },\n            \n            postMessages(event) {\n              ...\n            }\n        }\n    })\n```   \n\nFirst, we added some constants of code points for a particular sentiment emoji. This will help us rendered an emoji corresponding to the mood of the user during the chat as analyzed by the Sentiment module.\n\nEnsure that you replace the `YOUR_API_KEY` placeholder with the appropriate credentials as obtained from your user’s dashboard on Pusher.\n\nYou can go ahead now and give this a try by restarting the development server:\n\n![nest-chat-sentiment-complete](//images.ctfassets.net/1es3ne0caaid/5NVh39rZ04gqYCiYo2MMak/5d6f1be380d08718efe688b42ee8335a/nest-chat-sentiment-complete.gif)\n\n## Conclusion\n\nWe have been able to build a basic chat application with realtime functionality as powered by Pusher. A lot of improvement can be introduced in order to make this application function much better. Please feel free to explore by checking the source code of this project here on [Github](https://github.com/christiannwamba/nest-pusher-chat). \n\nI hope you found this tutorial helpful.","metaTitle":"Build a chat app with sentiment analysis using Nest.js","metaDescription":"In this tutorial, use Nest.js and sentiment analysis to create a chat app with a playful feature: emoticons are added automatically, depending on key words used in messages."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SM3ghMF0QiIu0sSsKyOYa","type":"Entry","createdAt":"2018-05-06T17:30:32.559Z","updatedAt":"2018-05-06T17:32:28.856Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a comments widget with sentiment analysis using Next.js","url":"comments-sentiment-analysis-nextjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/realtime-comments-react-demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-05-05","description":"Learn to build a comments widget with Next.js. Use sentiment analysis to gauge the mood of the comments and automatically add emoticons.","prerequisite":"You will need Node and npm or Yarn installed on your machine. Some knowledge of JavaScript will be helpful when following this tutorial.","content":"With the advent of the social media and other platforms that aim at connecting people, commenting has become an integral part of online activity. As a result, it is very common to see comment sections in most of the services we tend to use daily. Virtually every service that supports commenting functionality builds it to handle comments in realtime.\n\nIn this tutorial, we’ll build a very simple realtime comments widget with sentiments. With sentiment analysis, we will be able to detect the mood of a person based on the words they use in their comments.\n\nHere is a screenshot of what we will end up building in this tutorial.\n\n![comments-next-sentiment-demo](//images.ctfassets.net/1es3ne0caaid/4c4pdXhsJqOuwiugkwioqs/993ea12fb2184d8aebf659e3e8691f41/comments-next-sentiment-demo.png)\n\n\n## Prerequisites\n\nBefore you begin, ensure that you have Node and npm or Yarn installed on your machine. Here is a run-down of the core technologies we will be using.\n\n\n1. [**Next.js**](https://learnnextjs.com/) - A framework for building server-side rendered(SSR) React applications with ease. It handles most of the challenges that come with building SSR React apps.\n\n\n2. [**Pusher**](https://pusher.com/) - Pusher is a technology for building apps with varying realtime needs like push notifications and pub/sub messaging. It is the engine behind the realtime ability of our comments widget.\n\n\n3. [**Sentiment**](https://github.com/thisandagain/sentiment) - Sentiment is a module that uses the [AFINN-165](http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010) wordlist and [Emoji Sentiment Ranking](http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0144296) to perform [sentiment analysis](http://en.wikipedia.org/wiki/Sentiment_analysis) on arbitrary blocks of input text.\n\n\n4. [**React**](https://reactjs.org/) - A very popular JavaScript DOM rendering framework for building scalable web applications using a component-based architecture.\n\nA few other libraries will be used as we will see in a moment. Also ensure that you have [Node](https://nodejs.org/) installed on your machine.\n\n\n### Installing dependencies\n\nCreate a new directory for the application and run the following command to install the required dependencies for the app.\n\n```\n    # Create a new directory\n    mkdir realtime-comments-app\n    \n    # cd into the new directory\n    cd realtime-comments-app\n    \n    # Initiate a new package and install app dependencies\n    npm init -y\n    \n    npm install react react-dom next pusher pusher-js sentiment\n    npm install express body-parser cors dotenv axios\n    npm install --save-dev cross-env npm-run-all\n```\n\n### Setting environment variables\n\nCreate a new application on your [Pusher Dashboard](https://dashboard.pusher.com/) to get your application credentials. Create a `.env` file in the root directory of your application and add your application credentials as follows. \n\n```\n    PUSHER_APP_ID=YOUR_APP_ID\n    PUSHER_APP_KEY=YOUR_APP_KEY\n    PUSHER_APP_SECRET=YOUR_APP_SECRET\n    PUSHER_APP_CLUSTER=YOUR_APP_CLUSTER\n```\n\nEnsure that you use the same variable names as specified in the above snippet. We will refer to them at several points in our code.\n\nNext create a `Next` configuration file named `next.config.js` in the root directory of your application with the following content:\n\n``` javascript\n    /* next.config.js */\n    \n    const webpack = require('webpack');\n    require('dotenv').config();\n    \n    module.exports = {\n      webpack: config =\u003e {\n        const env = Object.keys(process.env).reduce((acc, curr) =\u003e {\n          acc[`process.env.${curr}`] = JSON.stringify(process.env[curr]);\n          return acc;\n        }, {});\n        \n        config.plugins.push(new webpack.DefinePlugin(env));\n        \n        return config;\n      }\n    };\n```\n\nSince `Next.js` uses [Webpack](https://webpack.js.org/) in the background for module loading and bundling, we are simply configuring `Webpack` to be able to provide the environment variables we have defined and make them available to our React components by accessing the `process.env` object.\n\n\n## Getting started\n\n### Setting up the server\n\nWe will go ahead and setup a simple server using Next.js to wrap an [Express](https://expressjs.com/) application server. We will also load the necessary middlewares for the Express server and then we will configure Pusher using the credentials we added to our environment variables.\n\nCreate a `server.js` file in the root directory of your application and add the following code snippet to it to set up the server:\n\n``` javascript\n    /* server.js */\n    \n    const cors = require('cors');\n    const next = require('next');\n    const Pusher = require('pusher');\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const dotenv = require('dotenv').config();\n    const Sentiment = require('sentiment');\n    \n    const dev = process.env.NODE_ENV !== 'production';\n    const port = process.env.PORT || 3000;\n    \n    const app = next({ dev });\n    const handler = app.getRequestHandler();\n    const sentiment = new Sentiment();\n    \n    // Ensure that your pusher credentials are properly set in the .env file\n    // Using the specified variables\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true\n    });\n    \n    app.prepare()\n      .then(() =\u003e {\n      \n        const server = express();\n        \n        server.use(cors());\n        server.use(bodyParser.json());\n        server.use(bodyParser.urlencoded({ extended: true }));\n        \n        server.get('*', (req, res) =\u003e {\n          return handler(req, res);\n        });\n        \n        server.listen(port, err =\u003e {\n          if (err) throw err;\n          console.log(`\u003e Ready on http://localhost:${port}`);\n        });\n        \n      })\n      .catch(ex =\u003e {\n        console.error(ex.stack);\n        process.exit(1);\n      });\n\n```\n\n### Modify npm scripts\n\nFinally, we will modify the `\"scripts\"` section of the `package.json` file to look like the following snippet:\n\n``` json\n    /* package.json */\n    \n    \"scripts\": {\n      \"dev\": \"node server.js\",\n      \"build\": \"next build\",\n      \"prod:server\": \"cross-env NODE_ENV=production node server.js\",\n      \"start\": \"npm-run-all -s build prod:server\"\n    }\n```\n\nWe have gotten all we need to start building our app components. If you run the command `npm run dev` on your terminal now, it will start up the application server on port `3000` if it is available. However, nothing happens on the browser yet, because we have not built any index page component. Let's start building the app components.\n\n\n## Building the index page\n\nNext.js requires that you create the page components of your app in a `pages` directory. We will go ahead and create a `pages` directory in our app root directory and create a new `index.js` file inside it for the index page of our application.\n\nIt is considered a good practice to have a layout that can be reused across multiple pages. It gives you a form of boilerplate and saves you from unnecessary repetitions.\n\nBefore we add content to the index page, we will build a `Layout` component that can be used in our app pages as a boilerplate. Go ahead and create a `components` directory in your app root directory. Create a new `Layout.js` file inside the just created `components`  directory with the following content:\n\n``` javascript\n    /* components/Layout.js */\n    \n    import React, { Fragment } from 'react';\n    import Head from 'next/head';\n    \n    const Layout = props =\u003e (\n      \u003cFragment\u003e\n        \u003cHead\u003e\n          \u003cmeta charSet=\"utf-8\" /\u003e\n          \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" /\u003e\n          \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossOrigin=\"anonymous\" /\u003e\n          \u003ctitle\u003e{props.pageTitle || 'Realtime Comments'}\u003c/title\u003e\n        \u003c/Head\u003e\n        {props.children}\n      \u003c/Fragment\u003e\n    );\n    \n    export default Layout;\n```\n\nHere, we try not to do so much. We are simply using the `next/head` component to add meta information to the `\u003chead\u003e` of our pages. We have also added a link to the Bootstrap CDN file to add some default styling to our app. We are also setting the page title dynamically from props and rendering the page contents using `{props.children}`.\n\nNow let's go ahead and add content to the `pages/index.js` file we created earlier:\n\n``` javascript\n    /* pages/index.js */\n    \n    import React, { Component } from 'react';\n    import axios from 'axios';\n    import Layout from '../components/Layout';\n    \n    class IndexPage extends Component {\n    \n      state = { post: null }\n      \n      componentDidMount() {\n        axios.get('https://baconipsum.com/api/?type=meat-and-filler\u0026paras=4\u0026format=text')\n          .then(response =\u003e this.setState({ post: response.data }));\n      }\n      \n      render() {\n        return (\n          \u003cLayout pageTitle=\"Realtime Comments\"\u003e\n            \u003cmain className=\"container-fluid position-absolute h-100 bg-white\"\u003e\n              \u003cdiv className=\"row position-absolute w-100 h-100\"\u003e\n              \n                \u003csection className=\"col-md-8 d-flex flex-row flex-wrap align-items-center align-content-center border-right border-gray px-0\"\u003e\n                \n                  { this.state.post \u0026\u0026 \u003cdiv className=\"position-relative h-100\"\u003e\n                  \n                    \u003cdiv className=\"px-5 mt-5 pt-5 mx-5\"\u003e\n                      \u003cspan className=\"d-block px-5 mx-5 pt-5 h5 text-uppercase text-primary font-weight-bold mb-3\"\u003eEditor's Pick\u003c/span\u003e\n                      \u003cspan className=\"d-block px-5 mx-5 pb-5 h1 text-dark border-bottom border-gray\"\u003eGetting Started with Lorem Ipsum\u003c/span\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv className=\"d-block h-50 px-5 mt-5 pt-3 mx-5 position-relative\" style={{ overflowY: 'auto' }}\u003e\n                      \u003cspan className=\"d-block px-5 mx-5 text-secondary text-justify\" style={{ fontSize: '1rem', whiteSpace: 'pre-line' }}\u003e{ this.state.post }\u003c/span\u003e\n                    \u003c/div\u003e\n                    \n                  \u003c/div\u003e }\n                  \n                \u003c/section\u003e\n                \n                \u003csection className=\"col-md-4 position-relative d-flex flex-wrap h-100 align-items-start align-content-between bg-light px-0\"\u003e\u003c/section\u003e\n                \n              \u003c/div\u003e\n            \u003c/main\u003e\n          \u003c/Layout\u003e\n        );\n      }\n    };\n    \n    export default () =\u003e (\n      \u003cIndexPage /\u003e\n    );\n```\n\nWe created a component `IndexPage` for the index page of our app. We initialized the state of the component with an empty `post` property. The `post` property will contain the post body that will be displayed.\n\nAs you can see in the `componentDidMount()` method, we are fetching a random `lorem-ipsum-style` text by calling the [**BaconIpsum JSON API**](https://baconipsum.com/json-api/) ****and setting the state `post` property to the returned text.\n\nFinally, we simply render the `post` text when it has been set on the state. If we test the app in our browser now, with `npm run dev`, we should see a screen that looks like the following screenshot.\n\n![comments-next-sentiment-part-1](//images.ctfassets.net/1es3ne0caaid/7D0GyGjEQ0SoegE02Sscoi/7e54bfa89f6d2e3e652b74cf56802b0c/comments-next-sentiment-part-1.png)\n\n## Building the CommentsWidget component\n\nWe will go ahead and build the comments widget component. Create a new `CommentsWidget.js` file inside the `components` directory and add the following content:\n\n``` javascript\n    /* components/CommentsWidget.js */\n    \n    import React, { Component, Fragment } from 'react';\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    \n    class CommentsWidget extends Component {\n    \n      state = { comments: [], person: null }\n      \n      componentDidMount() {\n      \n        this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n          cluster: process.env.PUSHER_APP_CLUSTER,\n          encrypted: true\n        });\n        \n        this.channel = this.pusher.subscribe('post-comments');\n        \n        this.channel.bind('new-comment', ({ comment = null }) =\u003e {\n          const { comments } = this.state;\n          comment \u0026\u0026 comments.push(comment);\n          this.setState({ comments });\n        });\n        \n        this.pusher.connection.bind('connected', () =\u003e {\n          axios.post('/comments')\n            .then(response =\u003e {\n              const comments = response.data.comments;\n              this.setState({ comments });\n            });\n        });\n        \n      }\n      \n      componentWillUnmount() {\n        this.pusher.disconnect();\n      }\n      \n      render() {\n        return \u003cFragment\u003e\n        \n          \u003cdiv className=\"border-bottom border-gray w-100 px-2 d-flex align-items-center bg-white justify-content-between\" style={{ height: 90 }}\u003e\n            \u003ch2 className=\"text-dark mb-0 mx-4\"\u003eComments\u003c/h2\u003e\n            \u003cspan class=\"badge badge-pill badge-primary mx-4\" style={{ fontSize: '1.2rem' }}\u003e{ this.state.comments.length }\u003c/span\u003e\n          \u003c/div\u003e\n          \n        \u003c/Fragment\u003e\n      }\n    };\n    \n    export default CommentsWidget;\n```\n\nHere is a simple break down of what we've done:\n\n\n1. We first initialized the state to contain an empty `comments` array property and a null `person` property. The `comments` property will be populated with people’s comments as they come in. The `person` property will store the name of the person about to make a comment. When the component mounts, we set up a Pusher connection and `channel` subscription inside the `componentDidMount()` lifecycle method.\n\n\n2. You can see that we are subscribing to a Pusher channel called `post-comments`. We are then binding to the `new-comment` event on the channel, which is triggered when a new comment comes in. Next, we simply populate the state `comments` property by appending the new comment.\n\n\n3. Also, on the `componentDidMount()` method, we are binding to the `connected` event on the Pusher client, when it is freshly connected, to fetch all the previous comments from history by making a `POST /comments` HTTP request using the `axios` library. Afterwards, we populate the state `comments` property with the comments received in the response.\n\nTo keep things simple, we will use a predefined list of names that a person can choose from before making a comment. Each time the `CommentsWidget` component is rendered, we will show four random personas that the user can choose from.\n\nGo ahead and make changes to the `render()` method as shown in the following snippet. Ensure that you declare the constants before the `return` statement.\n\n``` javascript\n    /* components/CommentsWidget.js */\n    \n    render() {\n    \n      const people = [ 'Stephanie', 'John', 'Steve', 'Anna', 'Margaret', 'Felix', 'Chris', 'Jamie', 'Rose', 'Bob', 'Vanessa', '9lad', 'Bridget', 'Sebastian', 'Richard' ];\n      \n      const nameBadgeStyles = {\n        fontSize: '0.8rem',\n        height: 40,\n        borderRadius: 20,\n        cursor: 'pointer'\n      };\n      \n      const choosePersona = person =\u003e evt =\u003e this.setState({ person });\n      \n      const randomPeople = count =\u003e {\n        const selected = [];\n        let i = 0;\n        \n        count = Math.max(0, Math.min(count, people.length));\n        \n        while (i \u003c count) {\n          const index = Math.floor(Math.random() * people.length);\n          if (selected.includes(index)) continue;\n          ++i \u0026\u0026 selected.push(index);\n        }\n        \n        return selected.map(index =\u003e {\n          const person = people[index];\n          const className = 'd-block d-flex align-items-center text-center text-white bg-secondary font-weight-bold py-2 px-4 mr-3';\n          \n          return \u003cspan key={index} className={className} style={nameBadgeStyles} title={person} onClick={choosePersona(person)}\u003e{person}\u003c/span\u003e\n        });\n      };\n      \n      // return statement is here ....\n    }\n```\n\n\nAs you can see, we created a list of 15 personas that we will be choosing from. The `randomPeople()` function takes a `count` as its only argument - which is the number of random personas to pick from the initial list. It then uses `.map()` to create an array of `\u003cspan\u003e` elements for each picked persona and returns the array.\n\nNotice the `onClick` event handler for each `\u003cspan\u003e`. The `choosePersona(person)` function is used as the handler. It simply sets the `person` property in the state to the name of the chosen persona.\n\nNext, we will go ahead and render the random personas. Make the following changes to the `render()` method. The `return` statement should look like the following code snippet:\n\n``` javascript\n    /* components/CommentsWidget.js*/\n    \n    return \u003cFragment\u003e\n    \n      \u003cdiv className=\"border-bottom border-gray w-100 px-2 d-flex align-items-center bg-white justify-content-between\" style={{ height: 90 }}\u003e\n        \u003ch2 className=\"text-dark mb-0 mx-4\"\u003eComments\u003c/h2\u003e\n        \u003cspan class=\"badge badge-pill badge-primary mx-4\" style={{ fontSize: '1.2rem' }}\u003e{ this.state.comments.length }\u003c/span\u003e\n      \u003c/div\u003e\n      \n      \u003cdiv className=\"border-top border-gray w-100 px-4 d-flex flex-wrap align-items-center align-content-center bg-light\" style={{ height: 160 }}\u003e\n      \n        {\n          !this.state.person \u0026\u0026\n          \u003cspan className=\"text-dark py-2\" style={{ fontSize: '1.5rem', fontWeight: 500 }}\u003eChoose your Persona\u003c/span\u003e\n        }\n        \n        \u003cdiv className=\"w-100 py-2 pb-3 d-flex justify-content-start\"\u003e\n          {\n            this.state.person\n              ? \u003cspan className=\"d-block d-flex align-items-center text-center text-white bg-primary font-weight-bold py-2 px-4 mr-3\" style={nameBadgeStyles} title={this.state.person}\u003e{this.state.person}\u003c/span\u003e\n              : randomPeople(4)\n          }\n        \u003c/div\u003e\n        \n        {\n          this.state.person \u0026\u0026\n          \u003ctextarea className=\"form-control px-3 py-2\" onKeyUp={this.handleKeyUp} placeholder=\"Make a comment\" style={{ resize: 'none' }}\u003e\u003c/textarea\u003e\n        }\n        \n      \u003c/div\u003e\n      \n    \u003c/Fragment\u003e\n```\n\nAs you can see, we are doing some conditional rendering here based on `this.state.person`. When `this.state.person` is null, we render four random personas for the user to choose from by calling `randomPeople(4)`.\n\nWhen the user chooses a persona, we render a `\u003ctextarea\u003e` element for the user to enter a comment. We added an `onKeyUp` event handler to the `\u003ctextarea\u003e` to add the comment when you press the `enter` or `return` button.\n\nLet’s add the `handleKeyUp()` event handler to the `CommentsWidget` component as shown in the following snippet:\n\n``` javascript\n    /* components/CommentsWidget.js*/\n    \n    class CommentsWidget extends Component {\n      \n      handleKeyUp = evt =\u003e {\n        const value = evt.target.value;\n        \n        if (evt.keyCode === 13 \u0026\u0026 !evt.shiftKey) {\n          const { person } = this.state;\n          const comment = { person, comment: value, timestamp: +new Date };\n          \n          evt.target.value = '';\n          this.setState({ person: null }, () =\u003e axios.post('/comment', comment));\n        }\n      }\n      \n    }\n```\n\nOn the `handleKeyUp()` event handler, we construct a `comment` object containing the `person` making the comment (the selected persona), the `comment` itself, and then the `timestamp` for when the comment was made. Finally, we clean up the `\u003ctextarea\u003e`, reset the `person` property to `null` and then make a `POST /comment` HTTP request, passing the `comment` object we created as payload.\n\nLet's add the `CommentsWidget` component to our index page. Modify the `pages/index.js` file with the following changes.\n\n``` javascript\n    /* pages/index.js */\n      \n      import React, { Component } from 'react';\n      import axios from 'axios';\n      import Layout from '../components/Layout';\n    + import CommentsWidget from '../components/CommentsWidget';\n\nNext, update the `pages/index.js` file to render the `CommentsWidget` inside the `render()` method of the `IndexPage` component. Locate the last `\u003csection\u003e` element inside the `render()` method and modify it to look like this:\n\n\n    /* pages/index.js */\n    \n    \u003csection className=\"col-md-4 position-relative d-flex flex-wrap h-100 align-items-start align-content-between bg-light px-0\"\u003e\n      { this.state.post \u0026\u0026 \u003cCommentsWidget /\u003e }\n    \u003c/section\u003e\n```\n\nYou can reload the app now in your browser to see the changes. The app should look like the following screenshot.\n\n![comments-next-sentiment-part-2](//images.ctfassets.net/1es3ne0caaid/1lWSvzQ3w84GCoI8OWYCE2/218d8862173e947a67463d1aa089db0c/comments-next-sentiment-part-2.png)\n\n![comments-next-sentiment-part-3](//images.ctfassets.net/1es3ne0caaid/6dvE2MbYAwGiEi4wwaccIO/840a75f7e7d6464e3e266d5c8fd610d9/comments-next-sentiment-part-3.png)\n\n\n\n## Defining the comment routes\n\nFor now, nothing really happens when you try to make a comment. You don't see any comment or previous comments. This is because we have not implemented the two comment routes we are making requests to.\n\nWe will go ahead and create the `/comment` and `/comments` routes. Modify the `server.js` file and add the following just before the call to `server.listen()` inside the `then()` callback function.\n\n``` javascript\n    /* server.js */\n    \n    // server.get('*') is here ...\n    \n    const commentsHistory = { comments: [] };\n    \n    server.post('/comment', (req, res, next) =\u003e {\n      const { person = null, comment = '', timestamp = (+new Date) } = req.body;\n      const sentimentScore = sentiment.analyze(comment).score;  \n      const commentObject = { person, comment, timestamp, sentiment: sentimentScore };\n      \n      commentsHistory.comments.push(commentObject);\n      pusher.trigger('post-comments', 'new-comment', { comment: commentObject });\n    });\n    \n    server.post('/comments', (req, res, next) =\u003e {\n      res.json({ ...commentsHistory, status: 'success' });\n    });\n    \n    // server.listen() is here ...\n```\n\nFirst, we created a kind of in-memory store for our comments history, to store comments in an array. This is useful for new Pusher clients to fetch previous comments. Whenever the Pusher client makes a `POST` request to the `/comments` endpoint on connection, it gets all the previous comments in the returned response.\n\nOn the `POST /comment` route, we are fetching the comment payload from `req.body` through the help of the `body-parser` middleware we added earlier. We then use the `sentiment` module to calculate the overall sentiment score of the comment. Next, we reconstruct the `commentObject`, adding the `sentiment` property containing the sentiment score.\n\nFinally, we add the comment to the `commentsHistory`, and then trigger a `new-comment` event on the `post-comments` Pusher channel, passing the `commentObject` in the event data. **This does the realtime magic**.\n\nWe are just a few steps away from completing our application. So far, we are not yet rendering the comments on the view. Let's head on to that and finish this up.\n\n\n## Displaying the comments\n\nCreate a new `Comment.js` file inside the `components` directory and add the following content to it.\n\n``` javascript\n    /* components/Comment.js */\n    \n    import React, { Component } from 'react';\n    \n    class Comment extends Component {\n      render() {\n        const { text } = this.props;\n        \n        const commentStyle = {\n          fontSize: '0.9rem',\n          fontWeight: 500,\n          lineHeight: 1.5,\n          whiteSpace: 'pre-wrap'\n        };\n        \n        return \u003cdiv className=\"w-100 mx-4 d-flex\"\u003e\n          \u003cdiv className=\"w-100 px-2\"\u003e\n            \u003cspan className=\"d-block text-secondary\" style={commentStyle}\u003e{text}\u003c/span\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      }\n    }\n    \n    export default Comment;\n```\n\nThe `Comment` component is a very simple component requiring a `text` prop for the comment text. We simply render the comment `text` in the `render()` method and that’s all.\n\nFinally, we will modify the `components/CommentsWidget.js` file to render the comments from the state. Make the following changes to the `CommentsWidget` component.\n\nFirst add the following constants before the class definition of the `CommentsWidget` component. Each constant is an array of the code points required for a particular sentiment emoji. Also ensure that you import the `Comment` component.\n\n``` javascript\n    /* components/CommentsWidget.js */\n    \n    // Module imports here ...\n    import Comment from './Comment';\n    \n    const SAD_EMOJI = [55357, 56864];\n    const HAPPY_EMOJI = [55357, 56832];\n    const NEUTRAL_EMOJI = [55357, 56848];\n    \n    // Chat component class here ...\n```\n\nThen, add the following snippet between the two child `\u003cdiv\u003e` tags of the `\u003cFragment\u003e` we created earlier in the `render()`  method of the component.\n\n``` javascript\n    /* components/CommentsWidget.js */\n    \n    {/** COMMENT HEADER \u003cDIV\u003e HERE **/}\n    \n    \u003cdiv className=\"px-4 pb-4 w-100 d-flex flex-row flex-wrap align-items-start align-content-start position-relative\" style={{ height: 'calc(100% - 250px)', overflowY: 'scroll' }}\u003e\n      {\n        this.state.comments.map((comment, index) =\u003e {\n        \n          const mood = comment.sentiment \u003e 0 ? HAPPY_EMOJI : (comment.sentiment === 0 ? NEUTRAL_EMOJI : SAD_EMOJI);\n          \n          return (\n            \u003cFragment key={index}\u003e\n            \n              \u003cdiv className={`d-flex justify-content-start align-items-center w-100 font-weight-bold text-dark mt-4 pb-1 px-1`} style={{ fontSize: '0.9rem' }}\u003e\n                \u003cspan className=\"d-inline-block pr-1\" style={{ fontSize: '1.25rem' }}\u003e{String.fromCodePoint(...mood)}\u003c/span\u003e\n                \u003cspan className=\"align-middle\" style={{ lineHeight: '1.25rem' }}\u003e{comment.person || 'Anonymous'}\u003c/span\u003e\n              \u003c/div\u003e\n              \n              \u003cComment text={comment.comment} /\u003e\n              \n            \u003c/Fragment\u003e\n          );\n          \n        })\n      }\n    \u003c/div\u003e\n    \n    {/** COMMENT BOX \u003cDIV\u003e HERE **/}\n```\n\nLet's try to understand what this code snippet is doing. First, we are going through each `comment` object in the state `comments` array property. We use the `sentiment` score of the comment object to set the mood of the person making the comment to either `happy`, `sad` or `neutral` using the earlier defined constants.\n\nAlso notice how we are using the `String.fromCodePoint()` method added in ES6 to get the emoji from the code points we defined in our constants earlier. Finally, we render the `Comment` component with the comment passed in the `text` prop.\n\n**Bravo**. If you made it to this point, then you have successfully built a realtime comments widget with sentiment using Next.js and Pusher. Test the app now in your browser to see that everything works.\n\n\n## Conclusion\n\nIn this tutorial, we have been able to build a very simple comments widget sentiment using [Next.js](https://learnnextjs.com/)([React](https://reactjs.org/)), [Pusher](https://pusher.com/) and [Sentiment Node](https://github.com/thisandagain/sentiment) module. You can check the demo source code of this tutorial on [GitHub](https://github.com/christiannwamba/realtime-comments-react-demo).\n\nDo check the documentation for each technology we used in this project to learn more about other ways of using them. I duly hope that this tutorial is of help to you.\n\n","metaTitle":"Comments widget with sentiment analysis using Next.js","metaDescription":"This tutorial takes you through building a comments widget using Next.js. It adds sentiment analysis as a fun feature to auto-assign emoticons to a comment."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1Ok9wy2o0cWyQaAW880mmi","type":"Entry","createdAt":"2018-05-06T17:29:22.639Z","updatedAt":"2018-05-06T17:29:22.639Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting data in realtime from MySQL with Java","url":"realtime-mysql-java","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/realtime-mysql-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-05-04","description":"Use MySQL replication logging to publish database changes to a React-based web dashboard.","prerequisite":"To follow this tutorial you will need some knowledge of Java programming and MySQL management tasks. You will need the Java JDK, Maven, MySQL and Node.js installed on your machine. ","content":"Applications are more complex than ever before.\n\nAnd it’s not only about the increasing number of users that must be handled or reducing response times.\n\nIf your application has a database, probably you’ll need its data in other places as soon as it goes in.\n\nIn this context, [change data capture](https://en.wikipedia.org/wiki/Change_data_capture) is the approach you use to capture and deliver the changes in the database to other sources.\n\nIn this tutorial, you’re going to learn how to stream, in realtime, the changes made to a table in a MySQL database to a React app. Something like this:\n\n![java-mysql-react-demo](//images.ctfassets.net/1es3ne0caaid/71VsGknSCI0QOgE4CCkEmy/beea6a69b0be15e1b421f7fda9af66c9/java-mysql-react-demo.gif)\n\n## Prerequisites\n\nHere’s what you need to have installed to follow this tutorial:\n\n- [Java JDK](http://www.oracle.com/technetwork/java/javase/downloads/index.html) (8 or superior)\n- [Maven](https://maven.apache.org/download.cgi)\n- [MySQL Community Server](https://dev.mysql.com/downloads/mysql/) 5.7 (5.6 and 5.5 should also work, but MySQL 8.0 is not yet supported)\n- [Node.js](https://nodejs.org/en/download/) (6 or superior)\n- Optionally, a Java IDE and a JavaScript editor.\n\nYou’ll need to have knowledge of:\n\n- Java programming (intermediate level)\n- Basic MySQL management tasks\n- React (beginner level)\n\nIf you want to track and determine if something in a database has changed, you have three main approaches:\n\n- Poll the database every X seconds and determine if something has changed using a timestamp, version number or status field.\n- Use database or application-level triggers to execute a piece of code when something changes.\n- Use the database transaction/replication log, which records every change to the database.\n\nI’m going to use the third approach because I think is the most robust. It doesn’t waste resources (like polling) or hurt performance (like triggers).\n\nWe’ll read the database changes from the MySQL replication log using the library [mysql-binlog-connector-java](https://github.com/shyiko/mysql-binlog-connector-java). Then, we’ll parse the event to extract the relevant data and publish it to a Pusher channel so it can be consumed by a React application.\n\nHere’s the diagram that describes the above process:\n\n![java-mysql-db-diagram](//images.ctfassets.net/1es3ne0caaid/30HLN6zj28OiSKE0eE6Oag/6c854c17f053b3b39b5e0523d2b50656/java-mysql-db-diagram.png)\n\nFor reference, [here is a GitHub repository](https://github.com/eh3rrera/realtime-mysql-pusher) with all the code shown in this tutorial and instructions to run it.\n\nLet’s start by creating a Pusher application.\n\n## Creating a Pusher application\n\nIf you haven’t already, create a free account at [Pusher](https://pusher.com/). \n\nThen, go to your [dashboard](https://dashboard.pusher.com) and create a Channels app, choosing a name, the cluster closest to your location, and optionally, React as the frontend tech and Java as the backend tech:\n\n![java-mysql-db-pusher-app](//images.ctfassets.net/1es3ne0caaid/6wRuDb2okoweQMmmGGo84C/190e50e138898fcf725c893c0bfc0fcb/java-mysql-db-pusher-app.png)\n\nThis will give you some sample code to get started:\n\n![java-mysql-db-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/30al4XZR7yyee0IMKEqICs/34d06b1c4a5f33e56123021ea9284d74/java-mysql-db-pusher-app-keys.png)\n\nSave your app id, key, secret and cluster values. We’ll need them later. \n\n## Configuring MySQL replication\n\nThe first thing you need to do is enable replication in MySQL.\n\n[Replication](https://dev.mysql.com/doc/refman/5.7/en/replication.html) allows data from one MySQL server (the master) to be copied in an asynchronous way to one or more different MySQL servers (the slaves).\n\nIt works by writing all the changes in the master to a binary log file that then is synchronized between master and slaves, so these can apply all those changes.\n\nFor this tutorial, you don’t have to set up slave servers. We’re only interested in the binary log.\n\nIn the MySQL configuration file (usually at `/etc/my.cnf` or `C:\\ProgramData\\MySQL\\MySQL Server 5.7\\my.ini`), add the following lines:\n\n```\n    [mysqld]\n    server-id = 1 #1\n    log_bin = /var/log/mysql/mysql-bin.log #2\n    expire_logs_days = 10 #3\n    max_binlog_size = 100M #4\n    binlog-format = row #5\n```\n\nLine #1 assigns an identifier to the server.\n\nLine #2 specifies the directory where the logs will be stored. In Windows, it will be something like `c:/logs/mysql-bin.log`. In Linux, make sure this directory has the necessary permissions for MySQL.\n\nLine #3 and #4 are optional, they specify the expiration time and maximum size of the file.\n\nLine #5 is important, it specifies the format in which the log will be written.\n\nThere are two main types of replication formats:\n\n- Statement Based Replication (SBR), which replicates entire SQL statements, and \n- Row Based Replication (RBR), which replicates only the changed rows.\n\nFor our purposes, RBR will be easier to work with. That’s why the file specifies this format.\n\nNow restart the server.\n\nIn a terminal window, connect to the MySQL server using `mysql`:\n\n```\n    mysql -u \u003cYOUR_USER\u003e -p \n```\n\nNow choose or create a database and create the table that is going to be used by the application:\n\n``` sql\n    USE myDatabase\n    CREATE TABLE products(id int(11) not null auto_increment, name varchar(50) default null, price decimal(6,2), primary key (id));\n```\n\nIt’s not recommended to work with a user with administrative privileges like `root` so let’s create another user for the application:\n\n``` sql\n    CREATE USER '\u003cYOUR_USER\u003e'@'\u003cYOUR_HOST\u003e' IDENTIFIED BY '\u003cYOUR_PASSWORD\u003e';\n```\n\nGive it replication and table privileges:\n\n``` sql\n    GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO '\u003cYOUR_USER\u003e'@'\u003cYOUR_HOST\u003e';\n    GRANT ALL PRIVILEGES ON `\u003cINSERT_YOUR_DB_NAME\u003e`.* TO '\u003cYOUR_USER\u003e'@'\u003cYOUR_HOST\u003e';\n    FLUSH PRIVILEGES;\n```\n\nNow execute the following command to check if replication is enabled:\n\n```\n    show master status;\n```\n\nIt should show something like the following:\n\n```\n    +------------------+----------+--------------+------------------+-------------------+\n    | File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n    +------------------+----------+--------------+------------------+-------------------+\n    | mysql-bin.000001 |      001 |              |                  |                   |\n    +------------------+----------+--------------+------------------+-------------------+\n```\n\nIt indicates the current log file and the position of the last statement.\n\nIf you’re getting `\u003cEmpty set\u003e` or something like that, execute:\n\n```\n    show variables like \"%log_bin%\";\n```\n\nIf replication is enabled, you should see something like the this:\n\n```\n    +---------------------------------+--------------------------------+\n    | Variable_name                   | Value                          |\n    +---------------------------------+--------------------------------+\n    | log_bin                         | ON                             |\n    | log_bin_basename                | /var/log/mysql/mysql-bin       |\n    | log_bin_index                   | /var/log/mysql/mysql-bin.index |\n    | log_bin_trust_function_creators | OFF                            |\n    | log_bin_use_v1_row_events       | OFF                            |\n    | sql_log_bin                     | ON                             |\n    +---------------------------------+--------------------------------+\n```\n\nOtherwise double check your configuration. You can learn more about replication [here](https://dev.mysql.com/doc/refman/5.7/en/replication-configuration.html).\n\nNow let’s create the Java program that will read the binary log.\n\n## Reading MySQL’s binary log\n\nIt turns out that reading binary logs for change data capture is more common than you think.\n\nMicrosoft SQL Server has built-in support for [change data capture](https://docs.microsoft.com/en-us/sql/relational-databases/track-changes/about-change-data-capture-sql-server?view=sql-server-2017).\n\nOracle offers [GoldenGate](http://www.oracle.com/technetwork/middleware/goldengate/overview/index.html) for real-time data integration and replication.\n\nMongoDB offers [Change Streams](https://docs.mongodb.com/manual/changeStreams/) to access real-time data changes.\n\nFor MySQL, there a lot of libraries for reading the binary log and stream changes as events to other sources. In this [wiki](https://github.com/wushujames/mysql-cdc-projects/wiki), you can find many of these libraries.\n\nMost of these libraries were made for enterprise system so they work natively with Apache Kafka, a publish and subscribe distributed platform that streams event and records to multiple sources.\n\nBut if you don’t need something like that, you can use [mysql-binlog-connector-java](https://github.com/shyiko/mysql-binlog-connector-java), which allows you to read the binary log file and listen for changes as events from any Java program.\n\nSo open your favorite IDE and create a Maven project.\n\nOr just create a directory structure like the following:\n\n```\n    src\n     |- main\n       |- java\n     |- pom.xml \n```\n\nIn the `pom.xml` file specify the project information, java version, and `mysql-binlog-connector-java`  and `pusher-http-java` as dependencies:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n    \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\"\n             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e\n        \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n    \n        \u003cgroupId\u003ecom.example\u003c/groupId\u003e\n        \u003cartifactId\u003eMySQLRealtime\u003c/artifactId\u003e\n        \u003cversion\u003e1.0-SNAPSHOT\u003c/version\u003e\n    \n        \u003cproperties\u003e\n            \u003cmaven.compiler.source\u003e1.8\u003c/maven.compiler.source\u003e\n            \u003cmaven.compiler.target\u003e1.8\u003c/maven.compiler.target\u003e\n        \u003c/properties\u003e\n    \n        \u003cdependencies\u003e\n            \u003cdependency\u003e\n                \u003cgroupId\u003ecom.github.shyiko\u003c/groupId\u003e\n                \u003cartifactId\u003emysql-binlog-connector-java\u003c/artifactId\u003e\n                \u003cversion\u003e0.16.1\u003c/version\u003e\n            \u003c/dependency\u003e\n    \n            \u003cdependency\u003e\n                \u003cgroupId\u003ecom.pusher\u003c/groupId\u003e\n                \u003cartifactId\u003epusher-http-java\u003c/artifactId\u003e\n                \u003cversion\u003e1.0.0\u003c/version\u003e\n            \u003c/dependency\u003e\n        \u003c/dependencies\u003e\n    \n    \u003c/project\u003e\n```\n\nNow create a class, let’s say `scr/ReadLog.java`, with the code to connect to MySQL and listen for log events:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            BinaryLogClient client =\n              new BinaryLogClient(\"localhost\", 3306, \"\u003cMYSQL_USER\u003e\", \"\u003cMYSQL_PASSWROD\u003e\");\n    \n            client.registerEventListener(event -\u003e {\n                System.out.println(event);\n            });\n            client.connect();\n        }\n    }\n```\n\nIf you execute this class, the program will block until an event is received from the log.\n\nFor example, this is an example of the events you receive when a database is created:\n\n```\n    Event{header=EventHeaderV4{timestamp=1524607461000, eventType=ANONYMOUS_GTID, serverId=1, headerLength=19, dataLength=46, nextPosition=463, flags=0}, data=null}\n    \n    Event{header=EventHeaderV4{timestamp=1524607461000, eventType=QUERY, serverId=1, headerLength=19, dataLength=75, nextPosition=557, flags=8}, data=QueryEventData{threadId=6, executionTime=0, errorCode=0, database='test', sql='CREATE DATABASE test'}}\n```\n\nYou receive an event for the creation of the global transaction identifier (GTID) and the actual query (`CREATE DATABASE test`).\n\nHere’s an example of the events you receive when a table is created:\n\n```\n    Event{header=EventHeaderV4{timestamp=1524609716000, eventType=ANONYMOUS_GTID, serverId=1, headerLength=19, dataLength=46, nextPosition=1696, flags=0}, data=null}\n    \n    Event{header=EventHeaderV4{timestamp=1524609716000, eventType=QUERY, serverId=1, headerLength=19, dataLength=181, nextPosition=1896, flags=0}, data=QueryEventData{threadId=6, executionTime=0, errorCode=0, database='test', sql='create table products(id int(11) not null auto_increment, name varchar(50) default null, price decimal(6,2), primary key (id))'}}\n```\n\nWhen you insert a record:\n\n```\n    Event{header=EventHeaderV4{timestamp=1524609804000, eventType=ANONYMOUS_GTID, serverId=1, headerLength=19, dataLength=46, nextPosition=1961, flags=0}, data=null}\n    \n    Event{header=EventHeaderV4{timestamp=1524609804000, eventType=QUERY, serverId=1, headerLength=19, dataLength=53, nextPosition=2033, flags=8}, data=QueryEventData{threadId=6, executionTime=0, errorCode=0, database='test', sql='BEGIN'}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609804000, eventType=TABLE_MAP, serverId=1, headerLength=19, dataLength=38, nextPosition=2090, flags=0}, data=TableMapEventData{tableId=109, database='test', table='products', columnTypes=3, 15, -10, columnMetadata=0, 50, 518, columnNullability={1, 2}}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609804000, eventType=EXT_WRITE_ROWS, serverId=1, headerLength=19, dataLength=31, nextPosition=2140, flags=0}, data=WriteRowsEventData{tableId=109, includedColumns={0, 1, 2}, rows=[\n        [1, laptop, 999.99]\n    ]}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609804000, eventType=XID, serverId=1, headerLength=19, dataLength=12, nextPosition=2171, flags=0}, data=XidEventData{xid=28}}\n```\n\nWhen you update a record:\n\n```\n    Event{header=EventHeaderV4{timestamp=1524609897000, eventType=ANONYMOUS_GTID, serverId=1, headerLength=19, dataLength=46, nextPosition=2236, flags=0}, data=null}\n    \n    Event{header=EventHeaderV4{timestamp=1524609897000, eventType=QUERY, serverId=1, headerLength=19, dataLength=53, nextPosition=2308, flags=8}, data=QueryEventData{threadId=6, executionTime=0, errorCode=0, database='test', sql='BEGIN'}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609897000, eventType=TABLE_MAP, serverId=1, headerLength=19, dataLength=38, nextPosition=2365, flags=0}, data=TableMapEventData{tableId=109, database='test', table='products', columnTypes=3, 15, -10, columnMetadata=0, 50, 518, columnNullability={1, 2}}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609897000, eventType=EXT_UPDATE_ROWS, serverId=1, headerLength=19, dataLength=47, nextPosition=2431, flags=0}, data=UpdateRowsEventData{tableId=109, includedColumnsBeforeUpdate={0, 1, 2}, includedColumns={0, 1, 2}, rows=[\n        {before=[1, laptop, 999.99], after=[1, laptop, 100.01]}\n    ]}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609897000, eventType=XID, serverId=1, headerLength=19, dataLength=12, nextPosition=2462, flags=0}, data=XidEventData{xid=29}}\n```\n\nWhen you delete two records:\n\n```\n    Event{header=EventHeaderV4{timestamp=1524610005000, eventType=ANONYMOUS_GTID, serverId=1, headerLength=19, dataLength=46, nextPosition=2805, flags=0}, data=null}\n    \n    Event{header=EventHeaderV4{timestamp=1524610005000, eventType=QUERY, serverId=1, headerLength=19, dataLength=53, nextPosition=2877, flags=8}, data=QueryEventData{threadId=6, executionTime=0, errorCode=0, database='test', sql='BEGIN'}}\n    \n    Event{header=EventHeaderV4{timestamp=1524610005000, eventType=TABLE_MAP, serverId=1, headerLength=19, dataLength=38, nextPosition=2934, flags=0}, data=TableMapEventData{tableId=109, database='test', table='products', columnTypes=3, 15, -10, columnMetadata=0, 50, 518, columnNullability={1, 2}}}\n    \n    Event{header=EventHeaderV4{timestamp=1524610005000, eventType=EXT_DELETE_ROWS, serverId=1, headerLength=19, dataLength=49, nextPosition=3002, flags=0}, data=DeleteRowsEventData{tableId=109, includedColumns={0, 1, 2}, rows=[\n        [1, laptop, 100.01],\n        [2, laptop v2, 999.99]\n    ]}}\n    \n    Event{header=EventHeaderV4{timestamp=1524610005000, eventType=XID, serverId=1, headerLength=19, dataLength=12, nextPosition=3033, flags=0}, data=XidEventData{xid=31}}\n```\n\nThis way, you can see that data manipulation (DML) statements are mapped this way:\n\n- Insert statements have the event type `EXT_WRITE_ROWS` and you can find the information of the insertion in a class of type `WriteRowsEventData`.\n- Insert statements have the event type `EXT_UPDATE_ROWS` and you can find the information of the update in a class of type `UpdateRowsEventData`.\n- Insert statements have the event type `EXT_DELETE_ROWS` and you can find the information of the deletion in a class of type `DeleteRowsEventData`.\n\nIn addition, all of these events are preceded by a `TABLE_MAP` event with information about the table and columns that are being modified.\n\nSo we need to listen for these events.\n\nThe only problem is that if you need to keep track of the changes of many tables in a separate way, you cannot rely on the `tableId`  field because this [ID may change between executions](https://github.com/shyiko/mysql-binlog-connector-java/issues/123).\n\nYou can [change the way events are deserialized](https://github.com/shyiko/mysql-binlog-connector-java/issues/67) but maybe a simpler approach would be to keep track of the table names and IDs in a map.\n\nTaking into account this, you can modify the program in this way:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            final Map\u003cString, Long\u003e tableMap = new HashMap\u003cString, Long\u003e();\n            BinaryLogClient client =\n              new BinaryLogClient(\"localhost\", 3306, \"\u003cMYSQL_USER\u003e\", \"\u003cMYSQL_PASSWROD\u003e\");\n    \n            client.registerEventListener(event -\u003e {\n                EventData data = event.getData();\n    \n                if(data instanceof TableMapEventData) {\n                    TableMapEventData tableData = (TableMapEventData)data;\n                    tableMap.put(tableData.getTable(), tableData.getTableId());\n                }\n            });\n            client.connect();\n        }\n    }\n```\n\nNotice how the program checks the subtype of `EventData` to get the information.\n\nNow, let’s add the Pusher object with the information you got when you created the app:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            final Map\u003cString, Long\u003e tableMap = new HashMap\u003cString, Long\u003e();\n            \n            Pusher pusher = \n                new Pusher(\"\u003cPUSHER_APP_ID\u003e\", \"\u003cPUSHER_APP_KEY\u003e\", \"\u003cPUSHER_APP_SECRET\u003e\");\n            pusher.setCluster(\"\u003cPUSHER_APP_CLUSTER\u003e\");\n            pusher.setEncrypted(true);\n            \n            // ...\n        }\n    }\n```\n\nAnd you can check if the event is an insert, update or delete, you can check if it corresponds to the `product` table, extract the product information and publish it as a map to a `product` channel.\n\nHere’s the code for `INSERT` events:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            // ...\n    \n            client.registerEventListener(event -\u003e {\n                EventData data = event.getData();\n    \n                if(data instanceof TableMapEventData) {\n                    // ...\n                } else if(data instanceof WriteRowsEventData) {\n                    WriteRowsEventData eventData = (WriteRowsEventData)data;\n                    if(eventData.getTableId() == tableMap.get(PRODUCT_TABLE_NAME)) {\n                        for(Object[] product: eventData.getRows()) {\n                            pusher.trigger(\n                               PRODUCT_TABLE_NAME, \"insert\", getProductMap(product)\n                            );\n                        }\n                    }\n                }\n            });\n            client.connect();\n        }\n    \n        static Map\u003cString, String\u003e getProductMap(Object[] product) {\n            Map\u003cString, String\u003e map = new HashMap\u003c\u003e();\n            map.put(\"id\", java.lang.String.valueOf(product[0]));\n            map.put(\"name\", java.lang.String.valueOf(product[1]));\n            map.put(\"price\", java.lang.String.valueOf(product[2]));\n    \n            return map;\n        }\n    }\n```\n\nFor the update event, only the `after` data is needed. The `before` and `after` fields are formatted as a map entry, where `after` is the value part of this structure:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            // ...\n    \n            client.registerEventListener(event -\u003e {\n                EventData data = event.getData();\n    \n                if(data instanceof TableMapEventData) {\n                    // ...\n                } else if(data instanceof WriteRowsEventData) {\n                    // ...\n                } else if(data instanceof UpdateRowsEventData) {\n                    UpdateRowsEventData eventData = (UpdateRowsEventData)data;\n                    if(eventData.getTableId() == tableMap.get(PRODUCT_TABLE_NAME)) {\n                        for(Map.Entry\u003cSerializable[], Serializable[]\u003e row : \n                                                          eventData.getRows()) {\n                            pusher.trigger(\n                              PRODUCT_TABLE_NAME, \"update\", getProductMap(row.getValue())\n                            );\n                        }\n                    }\n                }\n            });\n            client.connect();\n        }\n    \n        // ...\n    }\n```\n\nFor the delete event, you’ll only need the ID of the deleted record:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            // ...\n    \n            client.registerEventListener(event -\u003e {\n                EventData data = event.getData();\n    \n                if(data instanceof TableMapEventData) {\n                    // ...\n                } else if(data instanceof WriteRowsEventData) {\n                    // ...\n                } else if(data instanceof UpdateRowsEventData) {\n                    // ...\n                } else if(data instanceof DeleteRowsEventData) {\n                    DeleteRowsEventData eventData = (DeleteRowsEventData)data;\n                    if(eventData.getTableId() == tableMap.get(PRODUCT_TABLE_NAME)) {\n                        for(Object[] product: eventData.getRows()) {\n                            pusher.trigger(PRODUCT_TABLE_NAME, \"delete\", product[0]);\n                        }\n                    }\n                }\n            });\n            client.connect();\n        }\n    \n        // ...\n    }\n```\n\nNow, any application listening for the `product` channel will get the information about the database changes.\n\nLet’s build a React client to show this.\n\n## Building the React application\n\nLet’s use [create-react-app](https://github.com/facebook/create-react-app) to bootstrap a React app.\n\nExecute the following command in a terminal window to create a new app:\n\n```\n    npx create-react-app my-app\n```\n\nNow go into the app directory and install the Pusher dependency with `npm`:\n\n```\n    cd my-app\n    npm install --save pusher-js\n```\n\nOpen the file `src/App.css` and add the following CSS styles:\n\n``` css\n    .table {\n      border: 2px solid #FFFFFF;\n      width: 100%;\n      text-align: center;\n      border-collapse: collapse;\n    }\n    .table td, .table th {\n      border: 1px solid #FFFFFF;\n      padding: 3px 4px;\n    }\n    .table tbody td {\n      font-size: 13px;\n    }\n    .table thead {\n      background: #FFFFFF;\n      border-bottom: 4px solid #333333;\n    }\n    .table thead th {\n      font-size: 15px;\n      font-weight: bold;\n      color: #333333;\n      text-align: center;\n      border-left: 2px solid #333333;\n    }\n    .table thead th:first-child {\n      border-left: none;\n    }\n```\n\nNow let’s create a new component, `src/Table.js`, to show the product information (received as a property) in a table:\n\n``` javascript\n    import React, { Component } from 'react';\n    import './App.css';\n    \n    export default class Table extends Component {\n        render() {\n          const rowsMapped =this.props.rows.map(row =\u003e (\n                \u003ctr key={row.id}\u003e\n                  \u003ctd\u003e{row.id}\u003c/td\u003e\n                  \u003ctd\u003e{row.name}\u003c/td\u003e\n                   \u003ctd\u003e{row.price}\u003c/td\u003e\n                \u003c/tr\u003e\n              ));\n          \n          return (\n            \u003ctable className=\"table\"\u003e\n              \u003cthead\u003e\n                \u003ctr\u003e\n                  \u003cth\u003eID\u003c/th\u003e\n                  \u003cth\u003eName\u003c/th\u003e\n                  \u003cth\u003ePrice\u003c/th\u003e\n                \u003c/tr\u003e\n              \u003c/thead\u003e\n              \u003ctbody\u003e\n                {rowsMapped}\n              \u003c/tbody\u003e\n            \u003c/table\u003e\n          );\n        }\n    }\n```\n\nNow modify the file `src/App.js` to import this component and Pusher:\n\n``` javascript\n    import React, { Component } from 'react';\n    import logo from './logo.svg';\n    import './App.css';\n    \n    import Table from './Table.js';\n    \n    import Pusher from 'pusher-js';\n    \n    class App extends Component {\n      // ...\n    }\n```\n\nLet’s have the array of rows as the state of this component, and while we are at the constructor, let’s bind the functions we are going to use to insert, update and delete items:\n\n``` javascript\n    // ...\n    \n    class App extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {rows: []};\n        \n        this.insert = this.insert.bind(this);\n        this.update = this.update.bind(this);\n        this.delete = this.delete.bind(this);\n      }\n    }\n```\n\nIn the `componentDidMount` method, let’s configure the Pusher object subscribe to the channel to get the events:\n\n``` javascript\n    // ...\n    \n    class App extends Component {\n      constructor(props) {\n        // ...\n      }\n      \n      componentDidMount() {\n        this.pusher = new Pusher('\u003cPUSHER_APP_KEY\u003e', {\n              cluster: '\u003cPUSHER_APP_CLUSTER\u003e',\n          encrypted: true,\n        });\n        this.channel = this.pusher.subscribe('products');\n            \n        this.channel.bind('insert', this.insert);\n        this.channel.bind('update', this.update);\n        this.channel.bind('delete', this.delete);\n      }\n    }\n```\n\nThese are the functions to insert, update and delete items from `this.state.rows`:\n\n``` javascript\n    // ...\n    \n    class App extends Component {\n      // ...\n      insert(data) {\n        this.setState(prevState =\u003e ({\n          rows: [ data, ...prevState.rows ]\n        }));\n      }\n    \n      update(data) {\n        this.setState(prevState =\u003e ({\n          rows: prevState.rows.map(el =\u003e \n                  el.id === data.id ? data : el\n          )\n        }));\n      }\n    \n      delete(id) {\n        this.setState(prevState =\u003e ({\n          rows: prevState.rows.filter(el =\u003e el.id !== String(id))\n        }));\n      }\n    }\n```\n\nFinally, the `render` function will look like this:\n\n``` javascript\n    // ...\n    \n    class App extends Component {\n      // ...\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cheader className=\"App-header\"\u003e\n              \u003cimg src={logo} className=\"App-logo\" alt=\"logo\" /\u003e\n              \u003ch1 className=\"App-title\"\u003eWelcome to React\u003c/h1\u003e\n            \u003c/header\u003e\n            \u003cTable rows={this.state.rows} /\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n```\n\nAnd that’s it.\n\nLet’s test the application.\n\n## Testing the application\n\nMake sure the MySQL server is running with replication enabled.\n\nIf you’re working with an IDE, run the class `ReadLog`.\n\nOtherwise, you can add this property to the `pom.xml`file:\n\n``` xml\n    \u003cproperties\u003e\n      ...\n      \u003cexec.mainClass\u003eReadLog\u003c/exec.mainClass\u003e\n    \u003c/properties\u003e\n```\n\nAnd execute this command to run the app:\n\n```\n    mvn exec:java\n```\n\nFor the React app, inside the app directory, execute:\n\n```\n    npm start\n```\n\nA browser window will open http://localhost:3000/, and from there, you can connect to the database with the `mysql` client and insert, update or delete records in the `product` table:\n\n![java-mysql-react-demo](//images.ctfassets.net/1es3ne0caaid/71VsGknSCI0QOgE4CCkEmy/beea6a69b0be15e1b421f7fda9af66c9/java-mysql-react-demo.gif)\n\n## Conclusion\n\nIn this tutorial, you have learned how to turn MySQL into a realtime database by using the replication log to publish the changes made to a database using Pusher.\n\nYou used [mysql-binlog-connector-java](https://github.com/shyiko/mysql-binlog-connector-java) to get the insert, update and delete events from the log. However, at the time of this writing, the current version of MySQL (MySQL 8.0.11) is not yet supported.\n\nBut there are other options. As mentioned before, in this [wiki](https://github.com/wushujames/mysql-cdc-projects/wiki) you can find more libraries to work with MySQL binary log.\n\nIn this [blog post](http://shzhangji.com/blog/2017/08/12/extract-data-from-mysql-with-binlog-and-canal/), you can find another way to extract data from MySQL using Alibaba’s open sourced [Canal](https://github.com/alibaba/canal) project.\n\nThe applications that this tutorial present are simple but they show how this change data capture using transaction logs work.\n\nThey can be extended in many ways:\n\n- Support for more tables\n- Detect when the Java application goes down and have to be restarted\n- Read from the log to start at a given position\n- Change the React implementation to support a bigger table in an efficient way\n\nRemember that all the source code for this applications is available on [Github](https://github.com/eh3rrera/realtime-mysql-pusher).","metaTitle":"Getting data in realtime from MySQL with Java","metaDescription":"This tutorial will guide you through enabling MySQL replication logging, in order to display database events in the browser, on a React-based dashboard."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5QW4rrWtLGSkEWAOaW0Giu","type":"Entry","createdAt":"2018-05-06T17:30:06.171Z","updatedAt":"2018-05-06T18:03:47.313Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a realtime graph using Nest.js","url":"realtime-graph-nestjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/nest-typescript-starter","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N8l3o0yD6QK2ooI2ME8wW","type":"Entry","createdAt":"2018-02-12T15:09:06.190Z","updatedAt":"2018-02-26T12:31:10.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Polls","url":"live-polls","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SgQuYVb0kSMIgEmwqImOA","type":"Entry","createdAt":"2018-02-12T14:49:17.136Z","updatedAt":"2018-04-19T08:52:46.508Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Nest.js","url":"nest-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-05-04","description":"Build a web app that tracks votes in realtime using Nest.js and Canvas.js.","prerequisite":"You should already have Node and npm installed on your machine. A basic understanding of Node and TypeScript will help when following this tutorial.","content":"## Introduction\n\nOne feature that will always make opinion polls stands out and encourage participants, is the fact that their vote counts. Ensuring this can be facilitated by realtime update of points and visualization of data (for example on a chart) depending on choice or votes. \n\nInstant result, live update, realtime apps with less code and many more are some of the promises of [Pusher](https://pusher.com/), which it has so far lived up to.\n\nTogether in this tutorial, we will build:\n\n![nestjs-graphs-fave-phone-demo](//images.ctfassets.net/1es3ne0caaid/4UfmF15JAI6cq8miI2MC8q/707b23bba8daea153dc9b7fc590b97df/nestjs-graphs-fave-phone-demo.gif)\n\nThis is a simple but yet an effective demonstration of realtime functionality of a basic human activity. Its an app that allows users to cast votes for their favorite mobile device. It contains two different sections:\n\n\n1. Where users can select a device.\n2. A chart to display the results as they come in.\n\nThis realtime opinion poll will be built using Nest.js and powered by [Pusher](https://pusher.com/).\n\n\n## What exactly is Nest.js\n\n[Nest.js](https://nestjs.com/) is a progressive framework for building efficient and scalable server-side applications. Built to take the advantage of modern JavaScript, but still preserves compatibility with pure JavaScript. \n\n![nest-logo](//images.ctfassets.net/1es3ne0caaid/3XE9gJHMZakYUy0gKAsQ2M/986b5ddd64ea0ff1a344cde15b442a40/nest-logo.png)\n\n## Prerequisites\n\nA basic understanding of TypeScript and Node.js will help you get the best out of this tutorial. It is assumed that you already have Node and npm installed. Kindly check [Node.js](https://nodejs.org/en/) and [npm](https://www.npmjs.com/) for further instructions and installation steps.\n\nAs we proceed in this tutorial, we will make use of some other tools like:\n\n- [Pusher](https://pusher.com/): a Node.js client to interact with the Pusher REST API\n- [Axios](https://www.npmjs.com/package/axios): a promise-based HTTP client that works both in the browser and in a [Node.js](https://nodejs.org/en/) environment.\n- [CanvasJS](https://canvasjs.com/): a responsive HTML5 Charting library for data visualization.\n\n\n## Setting up the project\n\nFor the purpose of setting up the project,  we’ll run the command below to clone the starter repository from Github. This will create a new project folder named `nest-poll-application`  on our machine. We’ll then proceed by changing directory into the newly created project folder and install all the required dependencies for this application. Open your terminal and run:\n\n```\n    // Clone starter repository\n    $ git clone https://github.com/nestjs/typescript-starter.git nest-poll-application\n    \n    // change directory\n    $ cd nest-poll-application\n    \n    // install dependencies\n    $ npm install\n```\n\n\n## Run the application\n\nStart the development server with : \n\n```\n    $ npm start\n```\n\nThe command above will start the application on the default port used by Nest.js. Open your browser and navigate to http://localhost:3000. You should see a welcome message like what we have below:\n\n![nest-hello-world](//images.ctfassets.net/1es3ne0caaid/45ET2cOwzYa8MUO6mIwq2Q/c9511e3c4c76117982d0bfadfd43c652/nest-hello-world.png)\n\n## Pusher account setup\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). This is important as it is required before you can have access to an API key and easily access all the awesome features offered by Pusher.\n\n![nest-phone-pusher-1](//images.ctfassets.net/1es3ne0caaid/43DKutJFOw86I2cCeMEGMG/246afa094f08c930af91a38c7b1a65fb/nest-phone-pusher-1.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![nest-phone-pusher-2](//images.ctfassets.net/1es3ne0caaid/6m8JvB3xxC444SmaIQ824i/5e5ea5d799a6717ca6c74324ac5a6576/nest-phone-pusher-2.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n\n![nest-phone-pusher-3](//images.ctfassets.net/1es3ne0caaid/4UPXLqxBWMc0mqUuMo462A/1f9779e509f53259bbd32cf0d244ef52/nest-phone-pusher-3.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![nest-phone-pusher-4](//images.ctfassets.net/1es3ne0caaid/1TPXcBKK9ua4Q2OuqSI0IS/5dd742674348e92defd7ecc4aa320755/nest-phone-pusher-4.png)\n\n## Bootstrap the application\n\nUnder the hood, Nest uses Express library and therefore, favors the popular MVC pattern. In order to create a simple MVC app, we have to install a template engine.\n\n```\n    $ npm install ejs --save\n```\nOnce the installation process is completed, configure the express instance by updating  `main.ts` file with the content below:\n\n``` typescript\n    // ./src/main.ts\n    \n    import { NestFactory } from '@nestjs/core';\n    import { AppModule } from './app.module';\n    \n    import * as express from 'express';\n    import * as path from 'path';\n    \n    async function bootstrap() {\n      const app = await NestFactory.create(AppModule);\n      app.use(express.static(path.join(__dirname, 'public')));\n       app.set('views', __dirname + '/views');\n       // set ejs as the view engine\n       app.set('view engine', 'ejs');\n      await app.listen(3000);\n    }\n    bootstrap();\n```\nThis is the entry point of the application and necessary for bootstrapping Nest.js apps. I have included the Express and Path modules and set up ejs as the view engine for the application.\n\n\n## Set up the homepage\n\nThe `views` folder will contain all template for this application. Go ahead and create it within the `src` folder. Once you are done, create a new file named `index.ejs` right inside the newly created `views` folder and update the content with:\n\n``` html\n    // ./src/views/index.js\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003e\n        \u003ctitle\u003eRealtime Polling\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv class=\"main\"\u003e\n            \u003cdiv class=\"container\"\u003e\n                \u003ch1\u003eVote for your favorite device\u003c/h1\u003e\n                \u003cdiv class=\"col-md-12\"\u003e\n                    \u003cdiv class=\"row\"\u003e\n                        \u003cdiv class=\"col-md-3\"\u003e\n                            \u003cdiv class=\"poll-device\"\u003e\n                                \u003cimg src=\"/images/infinix.jpg\" alt=\"\" id=\"Infinix\"\u003e\n                                \u003cp class=\"text-center caption\"\u003eInfinix\u003c/p\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"col-md-3\"\u003e\n                            \u003cdiv class=\"poll-device\"\u003e\n                                \u003cimg src=\"/images/nokia.jpg\" alt=\"\"  id=\"Nokia\"\u003e\n                                \u003cp class=\"text-center caption\"\u003eNokia\u003c/p\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \n                        \u003cdiv class=\"col-md-3\"\u003e\n                            \u003cdiv class=\"poll-device\"\u003e\n                                \u003cimg src=\"/images/samsung.jpg\" alt=\"\"  id=\"Samsung\"\u003e\n                                \u003cp class=\"text-center caption\"\u003eSamsung\u003c/p\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"col-md-3\"\u003e\n                            \u003cdiv class=\"poll-device\"\u003e\n                                \u003cimg src=\"/images/techno.jpg\" alt=\"\" id=\"Techno\"\u003e\n                                \u003cp class=\"text-center caption\"\u003eTechno\u003c/p\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv id=\"vote-chart-container\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.3.1.js\" integrity=\"sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60=\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.17.1/axios.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e   \n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/canvasjs/1.7.0/canvasjs.min.js\"\u003e\u003c/script\u003e  \n        \u003cscript src=\"/vote.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThis will render the polling screen with images of devices that users will select from. You can download the images [here](https://github.com/yemiwebby/nest-pusher-poll/tree/master/src/public/images) or use your preferred images. To help out with layout we included bootstrap within the header section of the page. And just before the closing tag of the `\u003cbody\u003e` element we included the CDN file for `jQuery` as it is a requirement for Canvas.js. We also added a CDN file each for Axios and Pusher and finally, we included a custom script named `vote.js`.\n \n\n## Route for the homepage\n\nThe controller layer in Nest.js is responsible for receiving an incoming request and returning the appropriate response to the client. Nest uses a Controller metadata `@Controller` to map routes to a specific controller. The starter project already contain a controller by default. We will make use of this in order to render the home for this app. Open `.src/app.controller.ts` and edit as shown below:\n\n``` typescript\n    // ./src/app.controller.ts \n    \n    import { Get, Controller, Res } from '@nestjs/common';\n    @Controller()\n    export class AppController {\n      @Get()\n      root(@Res() res) {\n        res.render('index');\n      }\n    }\n```\nThis controller will ensure that Nest maps every `/` route to the `index.ejs` file.\n\n\n## Stylesheet\n\nCreate a new folder called `public`  within the `src` folder and create a new file named `style.css` within it. Update it with the content below: \n\n``` css\n    @import url('https://fonts.googleapis.com/css?family=Spectral');\n    *, *:before, *:after {\n      box-sizing: border-box;\n    }\n    \n    html, body {\n      font-family: 'Spectral', serif;\n      height: 100%;\n    }\n    .main {\n      height: 100%;\n      background-color: #FAFAFA;\n    }\n    .container {\n      padding-top: 20px;\n      padding-bottom: 20px;\n    }\n    h1 {\n      text-align: center;\n    }\n    .caption {\n        font-weight: bold;\n    }\n    \n    .poll-device {\n      margin: 20px;\n      padding: 20px;\n      border: 1px solid #EDEDED;\n      transition: background 500mms ease-in-out;\n    }\n    \n    .poll-device.selected {\n      background: #EDEDED;\n    }\n    \n    .poll-device:hover {\n      background: #EDEDED;\n      cursor: pointer;\n    }\n    \n    \n    .poll-device img {\n      width: 100%;\n      height: auto;\n      display: block;\n      margin: 0 auto;\n    }\n    \n    #vote-chart-container {\n      min-height: 370px;\n       width: 100%;\n       background: #f5f5f5;\n    }\n```\nDon’t forget to include this file in `index.ejs`\n\n``` html\n    \u003chead\u003e\n    ...\n      \u003clink rel=\"stylesheet\" href=\"/styles.css\"\u003e\n    \u003c/head\u003e\n```\n\n## Render the chart\n\nWe will attach the chart to a div with an id of `vote-chart-container`, which we have already added to `index.ejs`:\n\n``` html\n    // ./src/views/index.ejs\n    \n    \u003cdiv class=\"main\"\u003e\n        \u003cdiv class=\"container\"\u003e\n        ...\n        // chart will be rendered here\n        \u003cdiv id=\"vote-chart-container\"\u003e\u003c/div\u003e\n        ..\n        \u003c/div\u003e\n    \u003c/div\u003e\n```\n\n## Initialize the chart\n\nInitialize the chart with a default dataset. Because this is a simple example, we won’t bother with persisted data, rather we can just start at empty(zero). So create a new file named `vote.js` and save it in the `public` folder. Then proceed to add the content below to initialize the chart:\n\n``` javascript\n     // ./src/public/vote.js\n     \n    let dataPoints = [\n        {label: 'Infinix', y:0},\n        {label: 'Nokia', y:0},\n        {label: 'Samsung', y:0},\n        {label: 'Techno', y:0}\n    ]\n    \n    const chartContainer = document.querySelector('#vote-chart-container');\n    \n    if (chartContainer) {\n        const chart = new CanvasJS.Chart('vote-chart-container', {\n            animationEnabled: true,\n            theme: 'theme1',\n            title: {\n                text: 'Favorite device'\n            },\n            data: [\n                {\n                    type: 'column',\n                    dataPoints: dataPoints\n                }\n            ]\n        });\n        \n        chart.render();\n        \n        // Here, we will configure pusher, subscribe to event and update chart\n        ...\n    }\n```\n\n\n- The `dataPoints` array is the data source for the chart. The objects in the array have a uniform structure of `label`, which stores the frameworks and `y` which stores the points.\n- We check if the `chartContainer` exists before creating the chart.\n- We use the `Chart` constructor function to create a chart by passing the configuration for the chart which includes the data. The chart is rendered by calling `render()` on constructor function instance.\n\n\n## Send the vote request\n\nWhen a voter clicks on a device, we want to identify the item that was selected and trigger an HTTP request to send their vote request to the server.\n\n``` javascript\n    // ./src/public/vote.js\n    \n    \n    const app = {\n        sendToServer(id){\n            let baseURL = 'http://localhost:3000';\n            axios.post(`${baseURL}/vote`, {id})\n            .then( response =\u003e console.log('Successful'));\n        },\n        \n        start(){\n            devices = document.querySelectorAll('.poll-device');\n            devices.forEach((item, index) =\u003e {\n                item.addEventListener('click', (e) =\u003e {\n                    this.sendToServer(e.target.id);\n                });\n            });\n        }\n    };\n    \n    window.addEventListener('load', () =\u003e app.start());\n    \n    let dataPoints = [\n        ...\n    ]\n    \n    const chartContainer = document.querySelector('#vote-chart-container');\n    \n    if (chartContainer) {\n       ...\n        });\n        \n        chart.render();\n        // Here, we will configure pusher, subscribe to event and update chart\n        ...\n    }\n```\n\n\n## Create a controller\n\nEarlier, we already configured the `app.controller.ts` to render the homepage and display the form for consumers. The next thing we need to do is build the controller that will handle the data posted to the server. Create a new folder named `vote` in the `src` folder and create a new file called `vote.controller.ts` within it. Then update it with the content below:\n\n``` typescript\n    // ./src/vote/vote.controller.ts\n    \n    import { Controller, Post, Res, Body, HttpStatus } from '@nestjs/common';\n    import { VoteService } from './vote.service';\n    \n    @Controller('vote')\n    export class VoteController {\n        constructor(private voteService: VoteService){}\n    \n        @Post()\n        castVote(@Res() res, @Body() vote) {\n            this.voteService.create(vote);\n            res.status(HttpStatus.OK).send('Voted');\n        }\n        \n    }\n```\nThis controller handles only the HTTP request and abstract the logic of Pusher to a service. Let’s create the service next.\n\n\n## Realtime service\n\nTo enable realtime updates of the votes, we will integrate Pusher. To achieve a realtime two-way functionality, Pusher needs to be installed both on the client side and on the server side. We already included the `script`  for the client side earlier within our `index.ejs` file.  For the server side lets use [Node Package Manager](https://www.npmjs.com/) to install the library. \n\n```\n    $ npm install pusher --save\n```\nOnce the installation is completed, create a new file within `./src/vote` called `vote.service.ts` and update the content with:\n\n``` typescript\n    // ./src/vote/vote.service.ts\n    \n    import { Component } from '@nestjs/common';\n    \n    @Component()\n    export class VoteService {\n        create(vote) {\n            const Pusher = require('pusher');\n            var pusher = new Pusher({\n                appId: 'APP_ID',\n                key: 'YOUR_API_KEY',\n                secret: 'YOUR_SECRET_KEY',\n                cluster: 'CLUSTER',\n                encrypted: true\n              });\n              pusher.trigger('poll', 'vote', {\n                  points: 10,\n                  phone: vote,\n              });\n        }\n    }\n```\n\n\nHere we have initialized Pusher with the required credentials so we’ll be able to trigger an event named `vote` through a  `poll` channel. Don’t forget to replace the `APP_ID` , `YOUR_API_KEY`, `YOUR_SECRET_KEY` and `CLUSTER` with the appropriate details obtained from your dashboard.\n\nFor the payload, we have a JS object. This object contains the points for each vote and the name of the device being voted. \n\n\n## Register the controller and component\n\nAt the moment, our application doesn’t recognise the newly created controller and service. Lets change this by editing our module file `'app.module.ts'` and put the controller into the `'controller'` array and service into `'components'` array of the `'@Module()` decorator respectively.\n\n``` typescript\n    // ./src/app.module.ts\n    \n    import { VoteService } from './vote/vote.service';\n    import { VoteController } from './vote/vote.controller';\n    import { Module } from '@nestjs/common';\n    import { AppController } from './app.controller';\n    \n    @Module({\n      imports: [],\n      controllers: [AppController, VoteController],\n      components: [VoteService],\n    })\n    export class AppModule {}\n```\n\n## Listen for Pusher Channel events and update chart\n\nWe can now listen for Pusher events and update the chart with the payload sent to the channel we are subscribed to:\n\n``` javascript\n     // ./src/public/vote.js\n     ...\n    if (chartContainer) {\n        ...\n        // Here, we will configure pusher, subscribe to event and update chart\n        var pusher = new Pusher('YOUR_API_KEY', {\n            cluster: 'CLUSTER',\n            encrypted: true\n        });\n        \n        var channel = pusher.subscribe('poll');\n        channel.bind('vote', (data) =\u003e {\n            dataPoints = dataPoints.map(x =\u003e {\n                if (x.label == data.phone.id) {\n                    x.y += data.points;\n                    return x;\n                } else {\n                    return x;\n                }\n            });\n            chart.render()\n        });\n    }\n```\n\n\n- We configure Pusher with our credentials by passing the app key and config object as arguments to the Pusher constructor function.\n\n\n- The name of our trigger is `poll`, so we subscribe to it and listen to its `vote` event. Hence, when the event is triggered, we update the `dataPoints` variable and re-render the chart with `render()`\n\n\n![nestjs-graphs-fave-phone-demo](//images.ctfassets.net/1es3ne0caaid/4UfmF15JAI6cq8miI2MC8q/707b23bba8daea153dc9b7fc590b97df/nestjs-graphs-fave-phone-demo.gif)\n\n\n## Conclusion\n\nWe just built a very simple realtime poll app powered by Pusher. I hope you found this tutorial helpful and will easily applied the knowledge gained here to improve existing project and new ones.\n\nThe source code for this demo can be found [here](https://github.com/christiannwamba/nest-typescript-starter) on Github.","metaTitle":"Create a realtime graph using Nest.js","metaDescription":"This tutorial will teach you to build a web app that receives and displays user votes in realtime, using Nest.js to build the app and Canvas.js to visualize the data."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1t5xDkQoFKSEcG6K0ea8Me","type":"Entry","createdAt":"2018-05-03T10:23:02.317Z","updatedAt":"2019-01-02T15:31:47.504Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app with sentiment analysis using Next.js","url":"chat-sentiment-analysis-nextjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/realtime-chat-with-sentiment","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-05-02","description":"Use Next.js to build a chat app featuring sentiment analysis to track users' moods. ","prerequisite":"To follow this tutorial you will need Node and either npm or Yarn installed on your machine.","content":"Realtime applications have been around for quite a long time as we can see in contexts such as multi-player games, realtime collaboration services, instant messaging services, realtime data analytics tools, to mention a few. As a result, several technologies have been developed over the years to tackle and simplify some of the most challenging aspects of building apps that are sensitive to changes in realtime.\n\nIn this tutorial, we’ll build a very simple realtime chat application with sentiments. With sentiment analysis, we will be able to detect the mood of a person based on the words they use in their chat messages.\n\n\n## Prerequisites\n\nBefore you begin, ensure that you have Node and npm or Yarn installed on your machine. Here is a run-down of the core technologies we will be using.\n\n\n1. [**Next.js**](https://learnnextjs.com/) - A framework for building server-side rendered(SSR) React applications with ease. It handles most of the challenges that come with building SSR React apps.\n\n\n2. [**Pusher**](https://pusher.com/) - Pusher is a technology for building apps with varying realtime needs like push notifications and pub/sub messaging. It is the engine behind the realtime ability of our comments widget.\n\n\n3. [**Sentiment**](https://github.com/thisandagain/sentiment) - Sentiment is a module that uses the [AFINN-165](http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010) wordlist and [Emoji Sentiment Ranking](http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0144296) to perform [sentiment analysis](http://en.wikipedia.org/wiki/Sentiment_analysis) on arbitrary blocks of input text.\n\n\n4. [**React**](https://reactjs.org/) - A very popular JavaScript DOM rendering framework for building scalable web applications using a component-based architecture.\n\nA few other libraries will be used as we will see in a moment. Also ensure that you have [Node](https://nodejs.org/) installed on your machine.\n\n\n### Installing dependencies\n\nCreate a new directory for the application and run the following command to install the required dependencies for the app.\n\n```\n    # Create a new directory\n    mkdir realtime-chat-app\n    \n    # cd into the new directory\n    cd realtime-chat-app\n    \n    # Initiate a new package and install app dependencies\n    npm init -y\n    \n    npm install react react-dom next pusher pusher-js sentiment\n    npm install express body-parser cors dotenv axios\n```\n\n### Setting environment variables\n\nCreate a new application on your [Pusher Dashboard](https://dashboard.pusher.com/) to get your application credentials. Create a `.env` file in the root directory of your application and add your application credentials as follows.\n\n```\n    PUSHER_APP_ID=YOUR_APP_ID\n    PUSHER_APP_KEY=YOUR_APP_KEY\n    PUSHER_APP_SECRET=YOUR_APP_SECRET\n    PUSHER_APP_CLUSTER=YOUR_APP_CLUSTER\n```\n\nEnsure that you use the same variable names as specified in the above snippet. We will make reference to them at several points in our code.\n\nNext create a Next.js configuration file named `next.config.js` in the root directory of your application with the following content:\n\n``` javascript\n    /* next.config.js */\n    \n    const webpack = require('webpack');\n    require('dotenv').config();\n    \n    module.exports = {\n      webpack: config =\u003e {\n        const env = Object.keys(process.env).reduce((acc, curr) =\u003e {\n          acc[`process.env.${curr}`] = JSON.stringify(process.env[curr]);\n          return acc;\n        }, {});\n        \n        config.plugins.push(new webpack.DefinePlugin(env));\n        \n        return config;\n      }\n    };\n```\n\nSince Next.js uses [Webpack](https://webpack.js.org/) in the background for module loading and bundling, we are simply configuring Webpack to be able to provide the environment variables we have defined and make them available to our React components by accessing the `process.env` object.\n\n\n## Getting started\n\n### Setting up the server\n\nWe will go ahead to set up a simple server using Next.js to wrap an [Express](https://expressjs.com/) application server. We will also load the necessary middlewares for the Express server and then we will configure Pusher using the credentials we added to our environment variables.\n\nCreate a `server.js` file in the root directory of your application and add the following code snippet to it to set up the server:\n\n``` javascript\n    /* server.js */\n    \n    const cors = require('cors');\n    const next = require('next');\n    const Pusher = require('pusher');\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const dotenv = require('dotenv').config();\n    const Sentiment = require('sentiment');\n    \n    const dev = process.env.NODE_ENV !== 'production';\n    const port = process.env.PORT || 3000;\n    \n    const app = next({ dev });\n    const handler = app.getRequestHandler();\n    const sentiment = new Sentiment();\n    \n    // Ensure that your pusher credentials are properly set in the .env file\n    // Using the specified variables\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true\n    });\n    \n    app.prepare()\n      .then(() =\u003e {\n      \n        const server = express();\n        \n        server.use(cors());\n        server.use(bodyParser.json());\n        server.use(bodyParser.urlencoded({ extended: true }));\n        \n        server.get('*', (req, res) =\u003e {\n          return handler(req, res);\n        });\n        \n        server.listen(port, err =\u003e {\n          if (err) throw err;\n          console.log(`\u003e Ready on http://localhost:${port}`);\n        });\n        \n      })\n      .catch(ex =\u003e {\n        console.error(ex.stack);\n        process.exit(1);\n      });\n```\n\n### Modify npm scripts\n\nFinally, we will modify the `\"scripts\"` section of the `package.json` file to look like the following snippet:\n\n``` json\n    /* package.json */\n    \n    \"scripts\": {\n      \"dev\": \"node server.js\",\n      \"build\": \"next build\",\n      \"start\": \"NODE_ENV=production node server.js\"\n    }\n```\n\nWe have gotten all we need to start building our app components. If you run the command `npm run dev` on your terminal now, it will start up the application server on port `3000` if it is available. However, nothing happens on the browser yet, because we have not built any index page component. Let’s start building the app components.\n\n\n## Building the index page\n\nNext.js requires that you create the page components of your app in a `pages` directory. We will go ahead and create a `pages` directory in our app root directory and create a new `index.js` file inside it for the index page of our application.\n\nBefore we add content to the index page, we will build a `Layout` component that can be used in our app pages as a kind of template. Go ahead and create a `components` directory in your app root. Create a new `Layout.js` file inside the just created `components`  directory with the following content:\n\n``` javascript\n    /* components/Layout.js */\n    \n    import React, { Fragment } from 'react';\n    import Head from 'next/head';\n    \n    const Layout = props =\u003e (\n      \u003cFragment\u003e\n        \u003cHead\u003e\n          \u003cmeta charSet=\"utf-8\" /\u003e\n          \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" /\u003e\n          \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossOrigin=\"anonymous\" /\u003e\n          \u003ctitle\u003e{props.pageTitle || 'Realtime Chat'}\u003c/title\u003e\n        \u003c/Head\u003e\n        {props.children}\n      \u003c/Fragment\u003e\n    );\n    \n    export default Layout;\n```\n\nHere, we try not to do so much. We are simply using the `next/head` component to add meta information to the `\u003chead\u003e` of our pages. We have also added a link to the Bootstrap CDN file to add some default styling to our app. We are also setting the page title dynamically from props and rendering the page contents using `{props.children}`.\n\nNow let's go ahead and add content to the `index.js` file we created earlier:\n\n``` javascript\n    /* pages/index.js */\n    \n    import React, { Component } from 'react';\n    import Layout from '../components/Layout';\n    \n    class IndexPage extends Component {\n    \n      state = { user: null }\n      \n      handleKeyUp = evt =\u003e {\n        if (evt.keyCode === 13) {\n          const user =  evt.target.value;\n          this.setState({ user });\n        }\n      }\n      \n      render() {\n        const { user } = this.state;\n        \n        const nameInputStyles = {\n          background: 'transparent',\n          color: '#999',\n          border: 0,\n          borderBottom: '1px solid #666',\n          borderRadius: 0,\n          fontSize: '3rem',\n          fontWeight: 500,\n          boxShadow: 'none !important'\n        };\n        \n        return (\n          \u003cLayout pageTitle=\"Realtime Chat\"\u003e\n          \n            \u003cmain className=\"container-fluid position-absolute h-100 bg-dark\"\u003e\n            \n              \u003cdiv className=\"row position-absolute w-100 h-100\"\u003e\n              \n                \u003csection className=\"col-md-8 d-flex flex-row flex-wrap align-items-center align-content-center px-5\"\u003e\n                  \u003cdiv className=\"px-5 mx-5\"\u003e\n                  \n                    \u003cspan className=\"d-block w-100 h1 text-light\" style={{marginTop: -50}}\u003e\n                      {\n                        user\n                          ? (\u003cspan\u003e\n                              \u003cspan style={{color: '#999'}}\u003eHello!\u003c/span\u003e {user}\n                            \u003c/span\u003e)\n                          : `What is your name?`\n                      }\n                    \u003c/span\u003e\n                    \n                    { !user \u0026\u0026 \u003cinput type=\"text\" className=\"form-control mt-3 px-3 py-2\" onKeyUp={this.handleKeyUp} autoComplete=\"off\" style={nameInputStyles} /\u003e }\n                    \n                  \u003c/div\u003e\n                \u003c/section\u003e\n                \n                \u003csection className=\"col-md-4 position-relative d-flex flex-wrap h-100 align-items-start align-content-between bg-white px-0\"\u003e\u003c/section\u003e\n                \n              \u003c/div\u003e\n              \n            \u003c/main\u003e\n            \n          \u003c/Layout\u003e\n        );\n      }\n      \n    }\n    \n    export default () =\u003e (\n      \u003cIndexPage /\u003e\n    );\n```\n\nWe created a component `IndexPage` for the index page of our app. We initialized the state of the component with an empty `name` property. The `name` property is meant to contain the name of the currently active user.\n\nWe also added an input field to receive the name of the user, if no user is currently active. Once the input field is filled and the `enter` or `return` key is pressed, the name supplied is stored in state.\n\nIf we test the app on our browser now, we should see a screen that looks like the following screenshot.\n\n![chat-app-next-sentiments-demo-1](//images.ctfassets.net/1es3ne0caaid/2SRn4engGQ8OIEGyeYiSY6/a7d2a8c46437edb1b0950479689d61df/chat-app-next-sentiments-demo-1.png)\n\n## Building the Chat component\n\nWe will go ahead and build the chat component. Create a new `Chat.js` file inside the `components` directory and add the following content:\n\n``` javascript\n    /* components/Chat.js */\n    \n    import React, { Component, Fragment } from 'react';\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    \n    class Chat extends Component {\n    \n      state = { chats: [] }\n      \n      componentDidMount() {\n      \n        this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n          cluster: process.env.PUSHER_APP_CLUSTER,\n          encrypted: true\n        });\n        \n        this.channel = this.pusher.subscribe('chat-room');\n        \n        this.channel.bind('new-message', ({ chat = null }) =\u003e {\n          const { chats } = this.state;\n          chat \u0026\u0026 chats.push(chat);\n          this.setState({ chats });\n        });\n        \n        this.pusher.connection.bind('connected', () =\u003e {\n          axios.post('/messages')\n            .then(response =\u003e {\n              const chats = response.data.messages;\n              this.setState({ chats });\n            });\n        });\n        \n      }\n      \n      componentWillUnmount() {\n        this.pusher.disconnect();\n      }\n      \n    }\n    \n    export default Chat;\n```\n\nHere is a simple break down of what we've done:\n\n\n1. We first initialized the state to contain an empty `chats` array property. This `chats` property will be populated with chat messages as they keep coming. When the component mounts, we set up a Pusher connection and `channel` subscription inside the `componentDidMount()` lifecycle method.\n\n2. You can see that we are subscribing to a Pusher channel called `chat-room` for our chat application. We are then binding to the `new-message` event on the channel, which is triggered when a new chat message comes in. Next, we simply populate the state `chats` property by appending the new chat.\n\n3. Also, on the `componentDidMount()` method, we are binding to the `connected` event on the Pusher client, when it is freshly connected, to fetch all the chat messages from history by making a `POST /messages` HTTP request using the `axios` library. Afterwards, we populate the state `chats` property with the chat messages received in the response.\n\nThe `Chat` component is not completed yet. We still need to add a `render()` method. Let’s do that quickly. Add the following snippet to the `Chat` component class.\n\n``` javascript\n    /* components/Chat.js */\n      \n    handleKeyUp = evt =\u003e {\n      const value = evt.target.value;\n      \n      if (evt.keyCode === 13 \u0026\u0026 !evt.shiftKey) {\n        const { activeUser: user } = this.props;\n        const chat = { user, message: value, timestamp: +new Date };\n        \n        evt.target.value = '';\n        axios.post('/message', chat);\n      }\n    }\n    \n    render() {\n      return (this.props.activeUser \u0026\u0026 \u003cFragment\u003e\n      \n        \u003cdiv className=\"border-bottom border-gray w-100 d-flex align-items-center bg-white\" style={{ height: 90 }}\u003e\n          \u003ch2 className=\"text-dark mb-0 mx-4 px-2\"\u003e{this.props.activeUser}\u003c/h2\u003e\n        \u003c/div\u003e\n        \n        \u003cdiv className=\"border-top border-gray w-100 px-4 d-flex align-items-center bg-light\" style={{ minHeight: 90 }}\u003e\n          \u003ctextarea className=\"form-control px-3 py-2\" onKeyUp={this.handleKeyUp} placeholder=\"Enter a chat message\" style={{ resize: 'none' }}\u003e\u003c/textarea\u003e\n        \u003c/div\u003e\n        \n      \u003c/Fragment\u003e )\n    }\n```\n\nAs seen in the `render()` method, we require an `activeUser` prop to identify the currently active user. We also rendered a `\u003ctextarea\u003e` element for entering a chat message. We added an `onKeyUp` event handler to the `\u003ctextarea\u003e` to send the chat message when you press the `enter` or `return` button.\n\nOn the `handleKeyUp()` event handler, we construct a `chat` object containing the `user` sending the message (currently active user), the `message` itself, and then the `timestamp` for when the message was sent. We clean up the `\u003ctextarea\u003e` and then make a `POST /message` HTTP request, passing the `chat` object we created as payload.\n\nLet's add the `Chat` component to our index page. First, add the following line to the `import` statements in the `pages/index.js` file.\n\n``` javascript\n    /* pages/index.js */\n    \n    // other import statements here ...\n    import Chat from '../components/Chat';\n```\n\nNext, locate the `render()` method of the `IndexPage` component. Render the `Chat` component in the empty `\u003csection\u003e` element. It should look like the following snippet:\n\n``` javascript\n    /* pages/index.js */\n    \n    \u003csection className=\"col-md-4 position-relative d-flex flex-wrap h-100 align-items-start align-content-between bg-white px-0\"\u003e\n      { user \u0026\u0026 \u003cChat activeUser={user} /\u003e }\n    \u003c/section\u003e\n```\n\nYou can reload the app now in your browser to see the changes.\n\n\n## Defining the messaging routes\n\nFor now, nothing really happens when you try to send a chat message. You don't see any message or any chat history. This is because we have not implemented the two routes we are making requests to.\n\nWe will go ahead and create the `/message` and `/messages` routes. Modify the `server.js` file and add the following just before the call to `server.listen()` inside the `then()` callback function.\n\n``` javascript\n    /* server.js */\n    \n    // server.get('*') is here ...\n    \n    const chatHistory = { messages: [] };\n    \n    server.post('/message', (req, res, next) =\u003e {\n      const { user = null, message = '', timestamp = +new Date } = req.body;\n      const sentimentScore = sentiment.analyze(message).score;\n      \n      const chat = { user, message, timestamp, sentiment: sentimentScore };\n      \n      chatHistory.messages.push(chat);\n      pusher.trigger('chat-room', 'new-message', { chat });\n    });\n    \n    server.post('/messages', (req, res, next) =\u003e {\n      res.json({ ...chatHistory, status: 'success' });\n    });\n    \n    // server.listen() is here ...\n```\n\nFirst, we created a kind of in-memory store for our chat history, to store chat messages in an array. This is useful for new clients that join the chat room to see previous messages. Whenever the Pusher client makes a `POST` request to the `/messages` endpoint on connection, it gets all the messages in the chat history in the returned response.\n\nOn the `POST /message` route, we are fetching the chat payload from `req.body` through the help of the `body-parser` middleware we added earlier. We then use the `sentiment` module to calculate the overall sentiment score of the chat message. Next, we reconstruct the `chat` object, adding the `sentiment` property containing the sentiment score.\n\nFinally, we add the chat to the chat history `messages`, and then trigger a `new-message` event on the `chat-room` Pusher channel, passing the `chat` object in the event data. **This does the real time magic**.\n\nWe are just a few steps away from completing our chat application. If you load the app on your browser now and try sending a chat message, you don't see any feedback yet. That's not because our app is not working. **It is working perfectly**. It's simply because we are not yet rendering the chat messages on the view. Let's head on to that and finish this up.\n\n\n## Displaying the chat messages\n\nCreate a new `ChatMessage.js` file inside the `components` directory and add the following content to it.\n\n``` javascript\n    /* components/ChatMessage.js */\n    \n    import React, { Component } from 'react';\n    \n    class ChatMessage extends Component {\n    \n      render() {\n        const { position = 'left', message } = this.props;\n        const isRight = position.toLowerCase() === 'right';\n        \n        const align = isRight ? 'text-right' : 'text-left';\n        const justify = isRight ? 'justify-content-end' : 'justify-content-start';\n        \n        const messageBoxStyles = {\n          maxWidth: '70%',\n          flexGrow: 0\n        };\n        \n        const messageStyles = {\n          fontWeight: 500,\n          lineHeight: 1.4,\n          whiteSpace: 'pre-wrap'\n        };\n        \n        return \u003cdiv className={`w-100 my-1 d-flex ${justify}`}\u003e\n          \u003cdiv className=\"bg-light rounded border border-gray p-2\" style={messageBoxStyles}\u003e\n            \u003cspan className={`d-block text-secondary ${align}`} style={messageStyles}\u003e\n              {message}\n            \u003c/span\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      }\n      \n    }\n    \n    export default ChatMessage;\n```\n\nThe `ChatMessage` component is a very simple component requiring two props: `message` for the chat message and `position` for the positioning of the message - either `right` or `left`. This is useful for positioning the messages of the active user on one side and then the messages of other users on the other side as we would do in a moment.\n\nFinally, we will modify the `components/Chat.js` file to render the chat messages from the state. Make the following changes to the `Chat` component.\n\nFirst add the following constants before the class definition of the `Chat` component. Each constant is an array of the code points required for a particular sentiment emoji. **Also ensure to import the** `ChatMessage` **component**.\n\n``` javascript\n    /* components/Chat.js */\n    \n    // Module imports here ...\n    import ChatMessage from './ChatMessage';\n    \n    const SAD_EMOJI = [55357, 56864];\n    const HAPPY_EMOJI = [55357, 56832];\n    const NEUTRAL_EMOJI = [55357, 56848];\n    \n    // Chat component class here ...\n```\n\nThen, add the following snippet between the chat header `\u003cdiv\u003e` and the chat message box `\u003cdiv\u003e` we created earlier in the `Chat` component.\n\n``` javascript\n    /* components/Chat.js */\n    \n    {/** CHAT HEADER HERE **/}\n    \n    \u003cdiv className=\"px-4 pb-4 w-100 d-flex flex-row flex-wrap align-items-start align-content-start position-relative\" style={{ height: 'calc(100% - 180px)', overflowY: 'scroll' }}\u003e\n    \n      {this.state.chats.map((chat, index) =\u003e {\n      \n        const previous = Math.max(0, index - 1);\n        const previousChat = this.state.chats[previous];\n        const position = chat.user === this.props.activeUser ? \"right\" : \"left\";\n        \n        const isFirst = previous === index;\n        const inSequence = chat.user === previousChat.user;\n        const hasDelay = Math.ceil((chat.timestamp - previousChat.timestamp) / (1000 * 60)) \u003e 1;\n        \n        const mood = chat.sentiment \u003e 0 ? HAPPY_EMOJI : (chat.sentiment === 0 ? NEUTRAL_EMOJI : SAD_EMOJI);\n        \n        return (\n          \u003cFragment key={index}\u003e\n          \n            { (isFirst || !inSequence || hasDelay) \u0026\u0026 (\n              \u003cdiv className={`d-block w-100 font-weight-bold text-dark mt-4 pb-1 px-1 text-${position}`} style={{ fontSize: '0.9rem' }}\u003e\n                \u003cspan className=\"d-block\" style={{ fontSize: '1.6rem' }}\u003e\n                  {String.fromCodePoint(...mood)}\n                \u003c/span\u003e\n                \u003cspan\u003e{chat.user || 'Anonymous'}\u003c/span\u003e\n              \u003c/div\u003e\n            ) }\n            \n            \u003cChatMessage message={chat.message} position={position} /\u003e\n            \n          \u003c/Fragment\u003e\n        );\n        \n      })}\n      \n    \u003c/div\u003e\n    \n    {/** CHAT MESSAGE BOX HERE **/}\n```\n\nLet's try to understand what this code snippet is doing. First, we are going through each `chat` object in the state `chats` array property. We check if the sender of the message is the same as the currently active user and use that to determine the position of the displayed chat message. As you can see, the active user's messages will appear on the right.\n\nWe also use the `sentiment` score in the chat object to set the mood of the user while typing the message to either `happy`, `sad` or `neutral` using the earlier defined constants.\n\nWe conditionally render the `name` of the user before the chat message based on one of the following conditions being met.\n\n\n1.  `isFirst` - the current chat message is the first in the list\n\n\n2.  `!inSequence` - the current chat message directly follows a message from another user\n\n\n3.  `hasDelay` - the current chat message has a delay of over `1 minute` from the previous message of the same user\n\nAlso notice how we are using the `[String.fromCodePoint()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)` method added in ES6 to get the emoji from the code points we defined in our constants earlier.\n\nWe are finally done with our chat app. You can go ahead to test what you have built on your browser. Here are some screenshots showing a chat between **9lad**, **Steve** and **Bob**.\n\n**9lad**\n\n![chat-app-next-sentiments-demo-2](//images.ctfassets.net/1es3ne0caaid/7evikt0WTCGmASaugyOA8G/cb5a71576ccb35609b7c4afdff2acc15/chat-app-next-sentiments-demo-2.png)\n\n**Steve**\n\n![chat-app-next-sentiments-demo-3](//images.ctfassets.net/1es3ne0caaid/54OWU9Ji2QUYSiACukiyKQ/2f74370afbfee6f9860467627657d5e0/chat-app-next-sentiments-demo-3.png)\n\n**Bob**\n\n![chat-app-next-sentiments-demo-4](//images.ctfassets.net/1es3ne0caaid/4t5dgOUOuIQ8GWc6SQWs8u/0e1464d99713409f0083210dc108b8e5/chat-app-next-sentiments-demo-4.png)\n\n\n## Conclusion\n\nIn this tutorial, we have been able to build a very simple chat application with chat sentiment using [Next.js](https://learnnextjs.com/)([React](https://reactjs.org/)), [Pusher](https://pusher.com/) and [Sentiment Node](https://github.com/thisandagain/sentiment) module. While this tutorial focuses on just the basics, there are a lot of advanced stuffs you can do to make a better chat app. You can check the source code of this tutorial on [GitHub](https://github.com/christiannwamba/realtime-chat-with-sentiment).\n\nDo check the documentation for each technology we used in this project to learn more about other ways of using them. I hope that this tutorial is of help to you.","metaTitle":"Build a chat app with sentiment analysis using Next.js","metaDescription":"This brief tutorial shows you how to build a chat app with Next.js, featuring sentiment analysis that gauges and signals users' moods."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2H6cJ034piSuSEQIOCiOyY","type":"Entry","createdAt":"2018-05-03T10:21:31.497Z","updatedAt":"2018-05-03T10:21:31.497Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime table with Next.js","url":"realtime-tables-nextjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/movie-listing-next","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-05-02","description":"Use Next.js, React Table and Pusher to create a movie review site, updated in realtime as users post reviews.","prerequisite":"You need Node and npm installed on your machine. A basic knowledge of JavaScript will be helpful.","content":"Realtime applications are generally applications that produce time sensitive data or updates that requires immediate attention or consumption. From flight management software to following up with the score line and commentary when your favorite football team is playing.\n\nWe’ll be building a realtime application that will show live updates on reviews about the next movie users want to watch at the cinema. All that juicy reviews from fans, viewers and critics around the world, and I’ll want them in real time. Let’s call it **Rotten pepper**.\n\n![realtime-tables-next-demo](//images.ctfassets.net/1es3ne0caaid/4JcC8viOac2cma80iwCCGG/cfd47bab350bb80c6932e4e618c90158/realtime-tables-next-demo.gif)\n\nThe application will contain a form that allows users to fill in their review easily and will also display a table showing reviews left by users world wide in realtime. This part of the application will be built with Next.js\n\nThe other important part of this application is the API, where reviews posted by the user will go to. We’ll build this using Express and Node. Pusher would be the glue that sticks both ends together.\n\n\n## Prerequisites\n\nWe’ll be using the following tools to help build this quickly.\n\n1. [Next.js](https://github.com/zeit/next.js): this is a framework for producing server rendered applications. Just as you would with PHP, but this time with React.\n2. [Pusher](https://pusher.com/): this is a framework that allows you to build realtime applications with its easy to use pub/sub messaging API.\n3. [React Table](https://react-table.js.org/): this is a lightweight table built for React for showing extensive data.\n\n\n\u003e Please ensure you have Node and npm installed before starting the tutorial.\n\u003e No knowledge of React is required, but a basic understanding of JavaScript may be helpful.\n\n\nLet’s get building.\n\n\n## App structure\n\nIf you have no idea about Next.js, I recommend you take a look [here](https://learnnextjs.com/). It’s pretty easy and in less than an hour, you’ll be able to build real applications using it.\n\nLet’s create the directory where our app will sit:\n\n```\n    # make directory and cd into it\n    mkdir movie-listing-next \u0026\u0026 cd movie-listing-next\n    \n    # make pages, components and css directory\n    mkdir pages\n    mkdir components\n    mkdir css\n```\n\nNow we can go ahead to install dependencies needed by our application. I’ll be using Yarn for my dependency management, but feel free to use npm also.\n\nInstall dependencies using Yarn:\n\n```\n    # initilize project with yarn\n    yarn init -y\n    \n    # add dependencies with yarn\n    yarn add @zeit/next-css axios next pusher-js react react-dom react-table\n```\n\nLet’s add the following to the `script` field in our `package.json`  and save. This makes running commands for our app more easier.\n\n``` json\n    // package.json\n    {\n      \"scripts\": {\n        \"dev\": \"next\",\n        \"server\": \"node server.js\"\n       }\n    }\n```\n\nFor users to submit their reviews, they’ll need a form where they can input their name, review and rating. This is a snippet from `[components/form.js](https://github.com/Robophil/movie-listing-next/blob/master/components/form.js)` , which is a simple React form that takes the `name`, `review` and `rating`. You’ll need to create yours in the `components` directory.\n\nSnippets from `[components/form.js](https://github.com/Robophil/movie-listing-next/blob/master/components/form.js)`:\n\n``` javascript\n    export default class Form extends React.Component {\n    ....\n      render () {\n        return (\n          \u003cform onSubmit={this.handleSubmit}\u003e\n            \u003cdiv\u003e\n              \u003clabel\u003e\n              Name:\n              \u003cbr /\u003e\n                \u003cinput type='text' value={this.state.name} onChange={this.handleChange.bind(this, 'name')} /\u003e\n              \u003c/label\u003e\n            \u003c/div\u003e\n    \n            \u003cdiv\u003e\n              \u003clabel\u003e\n              Review:\n              \u003cbr /\u003e\n                \u003ctextarea rows='4' cols='50' type='text' value={this.state.review} onChange={this.handleChange.bind(this, 'review')} /\u003e\n              \u003c/label\u003e\n            \u003c/div\u003e\n    \n            \u003cdiv\u003e\n              \u003clabel\u003e\n              Rating:\n              \u003cbr /\u003e\n                \u003cinput type='text' value={this.state.rating} onChange={this.handleChange.bind(this, 'rating')} /\u003e\n              \u003c/label\u003e\n            \u003c/div\u003e\n            \u003cinput type='submit' value='Submit' /\u003e\n          \u003c/form\u003e\n        )\n      }\n    }\n``` \n\nIf you’re a React developer, you should feel right at home here. On form submission, the data is being passed down to `this.props.handleFormSubmit(this.state)`. This `props` is passed down from a different component as we’ll soon see.\n\nNow we have our form, but we still need a page to list all the reviews submitted by users. The size of our reviews could grow rapidly and we still want this in realtime, so it’s best to consider pagination from the outset. That’s why we’ll be using `react-table`, as highlighted above this is lightweight and will give us pagination out of the box.\n\nThe snippet below is from our index page, which you’ll need to create here `[pages/index.js](https://github.com/Robophil/movie-listing-next/blob/master/pages/index.js)` .\n\n``` javascript\n    // pages/index.js\n    import React from 'react'\n    import axios from 'axios'\n    import ReactTable from 'react-table'\n    import 'react-table/react-table.css'\n    import '../css/table.css'\n    import Form from '../components/form'\n    import Pusher from 'pusher-js'\n```\n\nHere we import our dependencies which include `axios` for making http calls, our styles from `table.css` and the form component we created earlier on.\n\n``` javascript\n    // pages/index.js\n    const columns = [\n      {\n        Header: 'Name',\n        accessor: 'name'\n      },\n      {\n        Header: 'Review',\n        accessor: 'review'\n      },\n      {\n        Header: 'Rating',\n        accessor: 'rating'\n      }\n    ]\n    const data = [\n      {\n        name: 'Stan Lee',\n        review: 'This movie was awesome',\n        rating: '9.5'\n      }\n    ]\n```\n\nReact-table, which is pretty easy to set up needs a `data` and `columns` props to work. There’s a pretty easy example [here](https://react-table.js.org/#/story/readme) if you want to learn more. We’re adding a sample review to `data` to have at least one review when we start our app.\n\n``` javascript\n    // pages/index.js\n    const pusher = new Pusher('app-key', {\n      cluster: 'cluster-location',\n      encrypted: true\n    })\n    \n    const channel = pusher.subscribe('rotten-pepper')\n    \n    export default class Index extends React.Component {\n      constructor (props) {\n        super(props)\n        this.state = {\n          data: data\n        }\n      }\n    \n      render () {\n        return (\n          \u003cdiv\u003e\n            \u003ch1\u003eRotten \u003cstrike\u003etomatoes\u003c/strike\u003e pepper\u003c/h1\u003e\n            \u003cstrong\u003eMovie: Infinity wars \u003c/strong\u003e\n            \u003cForm handleFormSubmit={this.handleFormSubmit.bind(this)} /\u003e\n            \u003cReactTable\n              data={this.state.data}\n              columns={columns}\n              defaultPageSize={10}\n        /\u003e\n          \u003c/div\u003e\n        )\n      }\n    }\n```\n\nHere, we created our React component and initialize Pusher and subscribe to the `rotten-pepper` channel. Kindly get your `app-id`  from your Pusher dashboard and if you don’t have an account, kindly create one [here](https://dashboard.pusher.com/accounts/sign_in). The state value `this.data` is initialized with the sample data created above and our `render` method renders both or form and our table.\n\nAt this point, we’re still missing a few vital parts. Pusher has been initialized, but it’s currently not pulling any new reviews and updating our table.\n\nTo fix that, add the following to your react component in `pages/index.js`\n``` javascript\n    // pages/index.js\n    componentDidMount () {\n        this.receiveUpdateFromPusher()\n      }\n    \n      receiveUpdateFromPusher () {\n        channel.bind('new-movie-review', data =\u003e {\n          this.setState({\n            data: [...this.state.data, data]\n          })\n        })\n      }\n    \n      handleFormSubmit (data) {\n        axios.post('http://localhost:8080/add-review', data)\n        .then(res =\u003e {\n          console.log('received by server')\n        })\n        .catch(error =\u003e {\n          throw error\n        })\n      }\n```\n\nIn `componentDidMount`, we’re calling the method `receiveUpdateFromPusher` which would receive new reviews submitted by users and update our table. We’re calling `receiveUpdateFromPusher` in `componentDidMount` so this only get called once.\nThe `handleFormSubmit` method is responsible for sending the review submitted by users down to your endpoint. This is passed as a props to the the form component as mentioned before.\n\n``` javascript\n    // next.config.js\n    const withCSS = require('@zeit/next-css')\n    module.exports = withCSS()\n```\n\nThis should be placed in a file called `next.config.js` in your root directory `movie-listing-next`. It’s responsible for loading all `.css` files which contains our styles on app startup.\n\nNow that our app can load `.css` properly, create the file `css/form.css` which is needed by `components/form.js` to style our app’s form:\n``` css\n    form {\n      margin: 30px 0;\n    }\n    \n    form div {\n      margin: 10px 0;\n    }\n```\n\nTo keep the content of our review table center aligned, create the file `css/table.css` and add the following style snippet.\n``` css\n    .rt-td {\n      text-align: center;\n    }\n```\n\nTo set the root structure of our app, we create `pages/_document.js`. This is where the rest of our app will sit.\n\n``` javascript\n    // pages/_document.js\n    import Document, { Head, Main, NextScript } from 'next/document'\n    \n    export default class MyDocument extends Document {\n      render () {\n        return (\n          \u003chtml\u003e\n            \u003cHead\u003e\n              \u003ctitle\u003eMovie listing\u003c/title\u003e\n              \u003clink rel='stylesheet' href='/_next/static/style.css' /\u003e\n            \u003c/Head\u003e\n            \u003cbody\u003e\n              \u003cMain /\u003e\n              \u003cNextScript /\u003e\n            \u003c/body\u003e\n          \u003c/html\u003e\n        )\n      }\n    }\n```\n\nNow, let’s setup the endpoint where all reviews submitted will be received.\n\n## Rotten pepper endpoint\n\nThis is where all the magic happens. When a review gets submitted, we’ll want other users to be aware of the new data and this is where Pusher shines. Create a file `server.js` at the root of your application and add the following snippet as it’s content. Remember to visit your Pusher dashboard to get your `appId`, `appKey`, `appSecret`.\n\n``` javascript\n    // server.js\n    const pusher = new Pusher({\n      appId: 'appId',\n      key: 'appKey',\n      secret: 'appSecret',\n      cluster: 'cluster',\n      encrypted: true\n    })\n    \n    app.post('/add-review', function (req, res) {\n      pusher.trigger('rotten-pepper', 'new-movie-review', req.body)\n      res.sendStatus(200)\n    })\n```\n\nFrom above, once the user hits `/add-review` we trigger an event `new-movie-review` with pusher which clients are currently listening on. We pass it the new review that was submitted and the connected clients update themselves.\n\nThe values for `appId`, `appSecret` and `appKey` should be replaced with actual credentials. This can be gotten from your app dashboard on Pusher, and if you don’t have an account simply head down to [https://pusher.com/](https://pusher.com/) and create an account.\n\n![realtime-table-nest-keys](//images.ctfassets.net/1es3ne0caaid/3wqfVQva8Ei0eS0AgoKqMq/4b0bb636412c1d4174674c596525dade/realtime-table-nest-keys.png)\n\n\nLet’s add dependencies need by our app:\n```\n    # add dependencies needed by server.js\n    yarn add body-parser cors express pusher\n```\n\nAt this point, the `dependencies` field in our `package.json` should contain the following below:\n``` json\n    \"dependencies\": {\n        \"@zeit/next-css\": \"^0.1.5\",\n        \"axios\": \"^0.18.0\",\n        \"body-parser\": \"^1.18.2\",\n        \"cors\": \"^2.8.4\",\n        \"express\": \"^4.16.3\",\n        \"next\": \"^5.1.0\",\n        \"pusher\": \"^1.5.1\",\n        \"pusher-js\": \"^4.2.2\",\n        \"react\": \"^16.3.2\",\n        \"react-dom\": \"^16.3.2\",\n        \"react-table\": \"^6.8.2\"\n      }\n```\n\nif not, simply replace the contents of the `dependencies` field in your `package.json` and run\n\n```\n    # install dependencies from package.json\n    yarn\n```\n\nThe entire content of `server.js` is right below. The line `const port = process.env.PORT || 8080` simply picks up the preferred `port` to run our app and `app.listen(port, function () {}` starts our app on that `port`.\n\n``` javascript\n    // server.js\n    const express = require('express')\n    const app = express()\n    const bodyParser = require('body-parser')\n    const cors = require('cors')\n    const Pusher = require('pusher')\n    \n    app.use(cors())\n    app.use(bodyParser.urlencoded({ extended: true }))\n    app.use(bodyParser.json())\n    \n    const port = process.env.PORT || 8080\n    \n    const pusher = new Pusher({\n      appId: 'appId',\n      key: 'appKey',\n      secret: 'appSecret',\n      cluster: 'cluster',\n      encrypted: true\n    })\n    app.post('/add-review', function (req, res) {\n      pusher.trigger('rotten-pepper', 'new-movie-review', req.body)\n      res.sendStatus(200)\n    })\n    \n    app.listen(port, function () {\n      console.log('Node app is running at localhost:' + port)\n    })\n```\n\nNow let’s see if what we’ve done so far works.\n\nIn one bash window:\n```\n    # start next app\n    yarn run dev\n```\nand for our endpoint simply run in a new bash window:\n```\n    # start api server\n    yarn run server\n```\nYou can open `[http://localhost:3000](http://localhost:3000)` in as many tabs as possible and see if a review posted in one tab gets to the others.\n\n\n## Conclusion\n\nBuilding a realtime application can be super easy with the right tools. Pusher takes all that socket and connection work out of the way and allow us focus on the app we’re building.\nNow I can sit back and watch reviews come :-)\n\nThe repo where this was done can be found [here](https://github.com/christiannwamba/movie-listing-next). Feel free to fork and improve.\nObviously this needs some more styling. How do you think we could improve this more?\n\nHappy hacking!!","metaTitle":"Build a realtime table with Next.js","metaDescription":"This tutorial shows how to make a movie review website using Next.js, React Table and Pusher. New reviews appear in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"16NFaeWa3WmkAYQ24muIoi","type":"Entry","createdAt":"2018-05-03T10:16:51.643Z","updatedAt":"2018-05-03T10:16:51.643Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime table with DataTables and Nest.js","url":"realtime-table-datatables-nestjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/pusher-nest-datatable","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SgQuYVb0kSMIgEmwqImOA","type":"Entry","createdAt":"2018-02-12T14:49:17.136Z","updatedAt":"2018-04-19T08:52:46.508Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Nest.js","url":"nest-js","type":"framework"}}],"reviewDate":"2018-05-02","description":"Use Nest.js and DataTables to create a searchable employee list interface.","prerequisite":"A basic understanding of TypeScript and Node will help you with this tutorial. You need to already have Node and npm installed on your machine.","content":"If you have been around the web for sometime now, you will agree with me that extensive data from the database can mostly be perfectly rendered to users by using tables. This is where tools like [DataTables](https://datatables.net/) really shines, when initialized, it will immediately add more features like searching, ordering and paging to tables.\n\nIt drives further than just a preview of data by users. It also brings about an excellent user experience when you add a realtime functionality in order to make changes available to consumers in realtime.\n\nThis tutorial will guide you through the process of implementing a realtime feature in tables. The knowledge gained here, will amongst other things help you implement realtime functionality in any web application. Pusher provides awesome tools to make implementing realtime functionality easy on any platform.\n\nThe backend of the application will be powered by Nest.js. A progressive Node.js framework for building efficient and scalable server-side applications, Nest.js leverages TypeScript to create reliable and well structured server-side applications.\n\nA quick look at what we'll be building:\n\n![realtime-table-nest-demo](//images.ctfassets.net/1es3ne0caaid/5aFIqSwEDmcowmwou2sAIW/4312592be74631d2d41fbc6784746c27/realtime-table-nest-demo.gif)\n\n## Prerequisites\n\nA basic understanding of TypeScript and Node.js will help you get the best out of this tutorial. It is assumed that you already have Node and npm installed. Kindly check [N](https://nodejs.org/en/)[ode.js](https://nodejs.org/en/) and [npm](https://www.npmjs.com/) for further instructions and installation steps.\n\n\n## Setting up the application\n\nAs at the time of writing, there was no CLI to setup a Nest.js application. The simplest and most efficient way is to clone the starter repository made available  on their [website](https://nestjs.com/).\n\nNow let’s run a command that will create a new project folder named `realtime-table-nest-pusher` on your machine. Open your terminal or command prompt and run this command :\n\n```\n    $ git clone https://github.com/nestjs/typescript-starter.git realtime-table-nest-pusher\n```\n\nGo ahead and change directory into the newly created folder and install all the dependencies for the project.\n\n```\n    // change directory\n    cd realtime-table-nest-pusher\n    \n    // install dependencies\n    npm install\n```\n\n## See it working\n\nRun the application with :\n\n```\n    npm start\n```\n\nThe command above will start the application on the default port used by Nest.js. Open your browser and navigate to [http://localhost:3000]. You should see a welcome message like what we have below\n\n![realtime-table-nest-hello-world](//images.ctfassets.net/1es3ne0caaid/2lCfpLiSpmSGY8mkKcEW68/403d325e3c68045fbaedce39c76ad5bb/realtime-table-nest-hello-world.png)\n\n## Server dependencies\n\nRun the command below to install the server dependencies required for this project.\n\n```\n    npm install ejs body-parser pusher\n```\n\n- **ejs**: this is a simple templating language for generating HTML markup with plain JavaScript.\n\n\n- **Body-parser**: a middleware used for extracting the entire body portion of an incoming request stream and expose it on `req.body` .\n\n\n- **Pusher**: a Node.js client to interact with the Pusher REST API\n\n\n## Pusher account setup\n\nHead over to Pusher and [s](https://dashboard.pusher.com/accounts/sign_up)[ign up for a free account](https://dashboard.pusher.com/accounts/sign_up). This is important as it is required before you can have access to an API key and easily access all the awesome features offered by Pusher.\n\n![realtime-table-nest-create-account](//images.ctfassets.net/1es3ne0caaid/2Ik3cczYCAy2KWY4yEQ4wW/224b22231e47355d9d1c5c901c01d2a9/realtime-table-nest-create-account.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![realtime-table-nest-dashboard](//images.ctfassets.net/1es3ne0caaid/6JbIR7XIys88skoSaauqa6/23be53f5c6f99fcc3cd158923aa776fb/realtime-table-nest-dashboard.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n\n![realtime-table-nest-create-app](//images.ctfassets.net/1es3ne0caaid/6awZQoWkUM8iMk2G6kUKAE/56c198c40e54a76b431cb76bc3abc79c/realtime-table-nest-create-app.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![realtime-table-nest-keys](//images.ctfassets.net/1es3ne0caaid/3wqfVQva8Ei0eS0AgoKqMq/4b0bb636412c1d4174674c596525dade/realtime-table-nest-keys.png)\n\n\n## Bootstrap application\n\nUnder the hood, Nest uses the Express library and therefore, favors the popular MVC pattern.\n\nTo set this up, open up `main.ts` file and update it with the content below:\n\n``` typescript\n    // ./src/main.ts\n    \n    import { NestFactory } from '@nestjs/core';\n    import { AppModule } from './app.module';\n    \n    import * as bodyParser from 'body-parser';\n    import * as express from 'express';\n    import * as path from 'path';\n    \n    async function bootstrap() {\n      const app = await NestFactory.create(AppModule);\n      app.use(express.static(path.join(__dirname, 'public')));\n       app.set('views', __dirname + '/views');\n       // set ejs as the view engine\n       app.set('view engine', 'ejs');\n      await app.listen(3000);\n    }\n    bootstrap();\n```\n\nThis is the entry point of the application and necessary for bootstrapping Nest.js apps. I have included the Express module, path and set up ejs as the view engine for the application.\n\n\n## Datatables setup\n\nGenerally, getting DataTable running on any website or app require little or less configuration as it is easy to set up and quite straight forward. All that is required is to include the necessary links on our HTML page.\n\nFor this we will create a folder called `views` within the `src` folder. Now go ahead and create a new file named `index.ejs` within it. In the newly created file, paste in the following code: \n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdn.datatables.net/1.10.15/css/jquery.dataTables.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"/style.css\"\u003e\n        \u003ctitle\u003e Datatable Realtime \u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"row\"\u003e\n                \u003ch2 class=\"text-center\"\u003e\n                    Realtime Data Table\n                \u003c/h2\u003e\n                \u003cdiv class=\"col-md-7\"\u003e\n                    \u003ctable id=\"realtime\" class=\"display\" width=\"100%\"\u003e\u003c/table\u003e\n                \u003c/div\u003e\n                \n                \u003cdiv class=\"col-md-4 col-md-offset-1\"\u003e\n                    \u003ch3 class=\"text-center\"\u003eCreate New Employee\u003c/h3\u003e\n                    \n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"name\"\u003eName\u003c/label\u003e\n                        \u003cinput type=\"text\" name=\"name\" id=\"name\" placeholder=\"Name\" class=\"form-control\"\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"position\"\u003ePosition\u003c/label\u003e\n                        \u003cselect name=\"position\" id=\"position\" class=\"form-control\"\u003e\n                            \u003coption value=\"\"\u003e--Select Position--\u003c/option\u003e\n                            \u003coption value=\"Frontend Developer\"\u003eFrontend Developer\u003c/option\u003e\n                            \u003coption value=\"UI/UX Engineer\"\u003eUI/UX Engineer\u003c/option\u003e\n                            \u003coption value=\"iOS Engineer\"\u003eiOS Engineer\u003c/option\u003e\n                            \u003coption value=\"Android Developer\"\u003eAndroid Developer\u003c/option\u003e\n                        \u003c/select\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"office\"\u003eOffice\u003c/label\u003e\n                        \u003cselect name=\"office\" id=\"office\" class=\"form-control\"\u003e\n                            \u003coption value=\"\"\u003e--Select Office--\u003c/option\u003e\n                            \u003coption value=\"Lagos\"\u003eLagos\u003c/option\u003e\n                            \u003coption value=\"London\"\u003eLondon\u003c/option\u003e\n                            \u003coption value=\"New York\"\u003eNew York\u003c/option\u003e\n                            \u003coption value=\"Berlin\"\u003eBerlin\u003c/option\u003e\n                        \u003c/select\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"extn\"\u003eExtn\u003c/label\u003e\n                        \u003cinput type=\"number\" name=\"extn\" id=\"extn\" placeholder=\"Extn\" class=\"form-control\"\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"startDate\"\u003eStart Date\u003c/label\u003e\n                        \u003cinput type=\"date\" name=\"startDate\" id=\"startDate\" placeholder=\"Start Date\" class=\"form-control\"\u003e\n                    \u003c/div\u003e\n                    \n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003cbutton class=\"btn btn-info\" id=\"add-employee\"\u003eAdd Employee\u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \n        \u003cscript src=\"https://code.jquery.com/jquery-1.12.4.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.2/axios.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.datatables.net/1.10.15/js/jquery.dataTables.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.datatables.net/plug-ins/1.10.15/api/row().show().js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"/data.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"/main.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThis will serve as the homepage for this application. In order to make this page look presentable, we included a CDN CSS file each for Bootstrap and DataTable. Further, we’ve included a custom CSS file named `style.css`. You can download it [here](https://github.com/christiannwamba/pusher-nest-datatable/blob/master/src/public/style.css) from the repository. Once you are done, create a new folder named `public` within the `src` folder and save the stylesheet file in it.\n\nIn addition, we included a table element identified by an id of `#realtime`, this element will hold the DataTable. We have also defined relevant input fields that will be used to add values to a dataset that we’ll revisit later in the tutorial. \n\nAlso included is a CDN file each for `jQuery`, `Axios`, `Pusher`, and `DataTable`. And finally, just before the closing tag of the `\u003cbody\u003e` element on the page, we’ve included two script file named `data.js` and `main.js`. `data.js` will contain sample dataset that will be used to initialize our DataTable, while `main.js` will hold the custom script for the application. Now, go ahead and create this two files and save them in the `public` folder as we’ll need them later in the tutorial.\n\n\n## Initialize DataTable\n\nEarlier, we inserted a table element with an id `#realtime` on our page. In order to initialize the DataTable and create a blueprint for our table, we’ll use jQuery to append the DataTable method to the element and passed an object as argument. The object has a `data` property which takes a `dataset` . You can download the `dataset` [here](https://github.com/christiannwamba/pusher-nest-datatable/blob/master/src/public/data.js) and save the content in the `data.js`  that was created earlier. We also include another property called `columns` and set its value to an array of objects with each object’s value serving as a column header for our table.\n\n``` javascript\n    //   ./src/public/main.js\n      \n    \n    const app = {\n        ...\n        start() {\n          const dataTable = $('#realtime').DataTable({\n            data: dataSet,\n            columns: [\n              { title: 'Name' },\n              { title: 'Position' },\n              { title: 'Office' },\n              { title: 'Extn.' },\n              { title: 'Start date' }\n            ]\n          });\n          ...\n        }\n      };\n      \n      $(document).ready(() =\u003e app.start());\n```\n\n## Handling routes\n\nThe controller layer in Nest.js is responsible for receiving an incoming request and returning the appropriate response to the client. Nest uses a controller metadata `@Controller` to map routes to a specific controller. The starter project already contains a controller by default. We will make use of this in order to render the home for this app. Open `./src/app.controller.ts` and edit as shown below:\n\n``` typescript\n    // ./src/app.controller.ts\n    \n    import { Get, Controller, Res } from '@nestjs/common';\n    \n    @Controller()\n    export class AppController {\n      @Get()\n      root(@Res() res) {\n        res.render('index');\n      }\n    }\n```\n\nThis controller will ensure that Nest maps every `/` route to `index.ejs` file.\n\n## Adding new records to the table\n\nWe’ve already included the relevant input fields required to add more records to the dataset in the DataTable. To make this work, we’ll use a custom function called `buildForm()` to retrieve all the values of the input fields. Open `./src/public/main.js` and add the function\n\n\n``` javascript    \n    const app = {\n        buildForm() {\n          return [\n            $('#name').val(),\n            $('#position').val(),\n            $('#office').val(),\n            $('#extn').val(),\n            $('#startDate').val().replace(new RegExp('-', 'g'), '/')\n          ];\n        },\n        \n        start() {\n        ...\n        }\n      };\n      \n      $(document).ready(() =\u003e app.start());\n```\n\n\n\nIn addition we created two more methods `processForm()` and `addRow()` . While the former is responsible for processing and passing the `formData` returned by `buildForm()` to the server, the latter takes in two arguments and handles the addition of realtime data to DataTable.\n\n``` javascript\n    // ./src/public/main.js\n    \n    const app = {\n        buildForm() {\n          ...\n        },\n        \n        processForm() {\n          const formData = this.buildForm();\n          const baseURL = 'http://localhost:3000';\n          axios.post(`${baseURL}/record`, formData)\n            .then(response =\u003e console.log(response));\n        },\n        \n        start() {\n          ...\n        }\n      };\n      \n      $(document).ready(() =\u003e app.start());\n```\n\n\nPassed the formData to the server, we will set this up in a bit:\n\n``` javascript\n    // ./src/public/main.js\n    \n    \n    const app = {\n        buildForm() {\n         ...\n        },\n        \n        processForm() {\n          ...\n        },\n    \n        addRow(dataTable, data) {\n          const addedRow = dataTable.row.add(data).draw();\n          addedRow.show().draw(false);\n      \n          const addedRowNode = addedRow.node();\n          $(addedRowNode).addClass('highlight');\n        },\n    \n        start() {\n        ...      \n        }\n      };\n      \n      $(document).ready(() =\u003e app.start());\n```\n\n\nAs stated earlier, this method takes in dataTable instance and the newly added `data` as arguments. \n\nThe methods `row.add()` and `.draw()` are inbuilt DataTables API methods, other DataTables methods implemented in `addRow()` are `.show()`, `.draw(false)` and `.node()`:\n\n\n- `row.add()` adds a new row to the table using the given data.\n- `.draw()` redraws and updates the table in the current context.\n- `.show()` displays a field in our table. This is useful for cases when you want to have extra form fields available, but only show them under certain conditions.\n- `.draw(false)` adds a new row without resetting or distorting the current page.\n- `.node()` serves as an event listener, it returns the DOM element for the requested field thus enabling DOM manipulation of the field.\n\nWe then take our `processForm()` method which we built and bind it to a button using jQuery’s `.click()` method. When the button is clicked, `addRow()` automatically executes its functions on our table.\n\n\n``` javascript    \n    const app = {\n        buildForm() {\n          ...\n        },\n        \n        processForm() {\n          ...\n        },\n    \n        addRow(dataTable, data) {\n         ...\n        },\n    \n        start() {\n          ...\n          });\n          \n          // bind the processForm() method to a button\n          $('#add-employee').on('click', this.processForm.bind(this));\n        }\n      };\n      \n      $(document).ready(() =\u003e app.start());\n```\n\n\nFind the complete custom script [here](https://github.com/christiannwamba/pusher-nest-datatable/blob/master/src/public/main.js).\n\n\n## Create a controller\n\nEarlier, we already configure the `app.controller.ts` to render the homepage and display the form for consumers. The next thing we need to do is build the controller that will handle the data posted to the server. Create a new folder named `table` in the `src` folder and create a new file called `table.controller.ts` within it.\n\n``` typescript\n    import { Controller, Post, Res, Body, HttpStatus } from '@nestjs/common';\n    import { TableService } from './table.service';\n    \n    \n    @Controller('record')\n    export class TableController {\n        constructor(private tableService:TableService){}\n    \n        @Post()\n        addNewRecord(@Res() res, @Body() data: String) {\n            this.tableService.add(data);\n            res.status(HttpStatus.OK).send('Pushed');\n        }\n    \n    }\n```\n\nOne of the most important modules imported here is the `TableService` . It was injected into the controller through the constructor. As recommended by Nest a controller should handle only HTTP requests and abstract any complex logic to a service. \n\n\n## Realtime service with Pusher\n\nAs required within the `TableController` above, lets create a component as a service. This will basically receive the `formData` and publish it to a designated channel for the client side to listen and subscribe to. So create a new file within `table` folder named `table.service.ts` \n\n``` typescript\n    // ./src/table/table.service.ts\n    \n    import { Component } from '@nestjs/common';\n    \n    @Component()\n    export class TableService {\n        add(newEmployee) {\n            const Pusher = require('pusher');\n    \n            var pusher = new Pusher({\n                appId: 'YOUR_APP_ID',\n                key: 'YOUR_API_KEY',\n                secret: 'YOUR_SECRET_KEY',\n                cluster: 'YOUR_CLUSTER',\n                encrypted: true\n              });\n    \n              pusher.trigger('employees', 'new-employee', newEmployee);\n        }\n    }\n```\n\nHere we have initialized Pusher with the required credentials in order to be able to trigger an event named `new-employee` through a channel named `employees.`\n\n\n## Connecting the dots\n\nTo make this work, both the `TableController` and `TableService` needs to be registered within the `app.module.ts` file.\n\n``` typescript\n    // ./src/app.module.ts\n    \n    import { TableService } from './table/table.service';\n    import { TableController } from './table/table.controller';\n    import { Module } from '@nestjs/common';\n    import { AppController } from './app.controller';\n    \n    @Module({\n      imports: [],\n      controllers: [AppController, TableController], // add controller\n      components: [TableService], // add service\n    })\n    export class AppModule {}\n```\n\n## Updating the UI\n\nTo update the table once a form is submitted, in our `main.js` file (client) we used the `subscribe()` method from Pusher to subscribe to the created `employees` channel.\n\n\n``` javascript\n    const app = {\n        buildForm() {\n          ...\n        },\n        \n        processForm() {\n         ...\n        },\n    \n        addRow(dataTable, data) {\n          ...\n        },\n    \n        start() {\n          ...\n          // subscribe to a channel\n          var pusher = new Pusher('YOUR_API_KEY', {\n            cluster: 'CLUSTER',\n            encrypted: true\n          });\n      \n          var channel = pusher.subscribe('employees');\n          channel.bind('new-employee', (data) =\u003e {\n            this.addRow(dataTable, data);\n          });\n        }\n      };\n      \n      $(document).ready(() =\u003e app.start());\n```\n\n\n\n## Bringing it all together\n\nRestart the development server if it is currently running. Check your page on `[http://localhost:3000.](http://localhost:3000.)`\n\n![realtime-table-nest-demo](//images.ctfassets.net/1es3ne0caaid/5aFIqSwEDmcowmwou2sAIW/4312592be74631d2d41fbc6784746c27/realtime-table-nest-demo.gif)\n\n## Conclusion\n\nSo far, we have learnt how to leverage on the realtime functionality provided by Pusher to add more records to existing data. Feel free to explore more by visiting Pusher’s documentation. \nAnd lastly, the complete source code of this demo application can be found here on [github](https://github.com/christiannwamba/pusher-nest-datatable).","metaTitle":"Build a realtime table with DataTables and Nest.js","metaDescription":"This brief tutorial guides you through setting up a searchable employee database with realtime interface, using Nest.js and DataTables."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3ApwcnTsJqigsmeme6KUCQ","type":"Entry","createdAt":"2018-05-01T11:40:57.488Z","updatedAt":"2018-05-01T11:40:57.488Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Making PostgreSQL database realtime with Pusher and Node","url":"postgresql-realtime","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5KlhqILjZSg4wUSqY4Goqg","type":"Entry","createdAt":"2018-02-20T14:39:32.323Z","updatedAt":"2018-10-02T14:31:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Samuel Ogundipe","url":"samuel-ogundipe","email":"ayoogundipe2005@gmail.com","twitter":"https://twitter.com/fucked_down","github":"https://github.com/samuelayo","guestWriter":true}}],"projectRepo":"https://github.com/samuelayo/realtime_postgres","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}}],"reviewDate":"2018-04-30","description":"Learn to monitor a PostgreSQL database for changes in realtime, and display them in a browser audit panel.","prerequisite":"You will need a basic understanding of Node.js, SQL, Postgre and JavaScript. You should have already installed PostgreSQL, Node and npm.","content":"## Introduction\n\nSometimes, we want to watch over specific tables in our database and make new records or entries available to users as soon as they come in. While doing this, we do not want to take away the flexibility and advantages we get from using PostgreSQL databases. In this tutorial, we will learn about making PostgreSQL database realtime using Pusher. Just before then, for those of us who don’t have an idea what PostgreSQL is, let’s look at it.\n\n[PostgreSQL](https://www.postgresql.org) is a powerful, open source object-relational database system that uses and extends the SQL language combined with many features that safely store and scale the most complicated data workloads.\n\nPostgreSQL comes with many features aimed to help developers build applications, administrators to protect data integrity and build fault-tolerant environments, and help you manage your data no matter how big or small the dataset. Besides being free and open source, PostgreSQL is highly extensible. For example, you can define your own data types, build out custom functions, even write code from different programming languages without recompiling your database!\n\nIn this tutorial, we will build a realtime table that shows a list of movies from our database.\n\n![realtime-postgre-demo](//images.ctfassets.net/1es3ne0caaid/6zwbSmQojmsQGAoIiWEoO0/58e944a4f7ad1d82c4983b1d33413315/realtime-postgre-demo.gif)\n\n## Prerequisites\n\nA basic understanding of Node.js, SQL, and client-side JavaScript is required for this tutorial.\nYou also need to have PostgreSQL, Node.js and npm installed.\nSome familiarity with PostgreSQL(as this tutorial isn’t helping with absolute basics like installation and setup).\n\n\n## Setting up a Pusher account and app\n\n[Pusher](https://pusher.com/) is a hosted service that makes it super-easy to add realtime data and functionality to web and mobile applications.\n\nPusher acts as a realtime layer between your servers and clients. Pusher maintains persistent connections to the clients - over Web-socket if possible and falling back to HTTP-based connectivity - so that as soon as your servers have new data they want to push to the clients they can do, via Pusher.\n\nIf you do not already have one, head over to Pusher and create a free account.\nWe will register a new app on the dashboard. The only compulsory options are the app name and cluster. A cluster represents the physical location of the Pusher server that will handle your app’s requests. Also, copy out your App ID, Key, and Secret from the App Keys section, as we will need them later on.\n\n\n## Setting up the project\n\nLet’s create a new node project by running:\n\n```\n    #create directory\n    mkdir realtime_postgres\n    #move into the new directory\n    cd realtime_postgres\n    #initialize a node project\n    npm init -y\n```\n\nNext, let’s move ahead by installing the required libraries:\n\n```\n    npm install express body-parser ejs pusher db-migrate db-migrate-pg dotenv pg --save\n```\n\nIn the command above, we have installed the following:\n\n- Express: fast, unopinionated, minimalistic web framework for Node.js.\n- Body-parser: parse incoming request bodies in a middleware before your handlers, available under the `req.body` property.\n- Ejs: templating engine for Node.js,\n- Pusher: the official Node.js library for Pusher.\n- Db-migrate: Database migration framework for node.js.\n- Db-migrate-pg: A PostgreSQL driver for db-migrate, a database migration framework for node.js.\n- Dotenv: Dotenv is a zero-dependency module that loads environment variables from a `.env` file\n- Pg: Non-blocking PostgreSQL client for node.js. Pure JavaScript and optional native libpq bindings.\n\n\n## Setting up the app\n\n### Setting up environment variables\nFirst, we need to define a file called `.env` to hold our environment variables. \n\nThe `POSTGRES_CONNECTION_URL` is a combination of our PostgreSQL username, password, host, port and database. For example, if our username is `user`, password is `securePassword`, our host if installed on local is `127.0.0.1`, the default port is `5432` and the name of our database is `realtime_postgres`, our `POSTGRES_CONNECTION_URL` would look like:\n\n```\n    postgres://user:securePassword@127.0.0.1:5431/realtime_postgres\n```\n\nFor this tutorial, we will need our `POSTGRES_CONNECTION_URL` and Pusher credentials which we had gotten earlier, so our file looks like:\n\n```\n    POSTGRES_CONNECTION_URL=postgres://user:securePassword@127.0.0.1:5431/realtime_postgres\n    PUSHER_APP_ID=XXX_APP_ID\n    PUSHER_APP_KEY=XXX_APP_KEY\n    PUSHER_APP_SECRET=XXX_APP_SECRET\n    PUSHER_APP_CLUSTER=XXX_APP_CLUSTER\n```\n\n### Setting up db-migrate\nNext, we need to create a file called `database.json` in the root of our app, which comprises a JSON structure, telling `db-migrate` which database connection we will be using. \n\nIn the snippet below, we set the connection URL to be retrieved from the `POSTGRES_CONNECTION_URL` variable which we had declared in our `.env` when our environment is `dev`.\n\n```\n    {\n            \"dev\": {\n                    \"ENV\": \"POSTGRES_CONNECTION_URL\"\n            }\n    }\n```\n\nNow we have our `db-migrate` config set up, we want to generate the `SQL` file to hold migrations for the table we will make realtime. To generate migrations, run :\n\n```\n    node node_modules/db-migrate/bin/db-migrate create realtime_table --sql-file\n```\n\nThe command above will create a folder called `migrations`. In the migrations folder, another folder called `sqls` will be created. In that folder, you would notice two files with the current timestamp as the prefix, followed by the name of the table you want to create, and a suffice of up and down.\n\nIn my case, the file was named `20180423192559-realtime-table-up.sql` and `20180423192559-realtime-table-down.sql`.\n\nOpen the `20180423192559-realtime-table-up.sql` file and replace its content with:\n\n``` sql\n    /* Replace with your SQL commands */\n    CREATE TABLE realtime_table (id serial primary key, title varchar, year varchar, producer varchar);\n    CREATE FUNCTION notify_trigger() RETURNS trigger AS $$\n    DECLARE\n    BEGIN\n      PERFORM pg_notify('watch_realtime_table', row_to_json(NEW)::text);\n      RETURN new;\n    END;\n    $$ LANGUAGE plpgsql;\n    \n    CREATE TRIGGER watch_realtime_table_trigger AFTER INSERT ON realtime_table\n    FOR EACH ROW EXECUTE PROCEDURE notify_trigger();\n```\n\nWhat happens in the code above? We have some `SQL` statements which will be active once we migrate our database. In the first part of the statements, we create a table called `realtime_table` with an ID, title, year and producer columns respectively.\n\nThe next thing we do is to create a function which returns a trigger. Hold on first, what is a trigger? Triggers are stored programs, which are automatically executed or fired when some events occur. Triggers are, in fact, written to be executed in response to any of the following events:\n\n- A `database manipulation` (DML) statement (DELETE, INSERT, or UPDATE)\n- A `database definition` (DDL) statement (CREATE, ALTER, or DROP).\n- A `database operation` (SERVERERROR, LOGON, LOGOFF, STARTUP, or SHUTDOWN).\n\nIn the function which returns a trigger which we defined above, we perform a `pg_notify` function on our table, and we asked it to return the row as JSON, cast to text. Now, what exactly is this `pg_notify` function? \n\nThe `pg_notify` command sends a notification event together with an optional `payload` string to each client application that has previously executed `LISTEN channel` for the specified channel name in the current database. The arguments here are the channel name to send the notification to and the second part is the message. This means on the server side, we can listen to a channel called  `watch_realtime_table` once we attach a trigger to it. Cool stuff.\n\nThe last part of our script is where we create our trigger called `watch_realtime_table_trigger` which we set to trigger after an `INSERT` action on our `realtime_table`. We tell the trigger to use the `notify_trigger` function for each new row added.\n\nLet’s migrate our database by running:\n\n```\n    node node_modules/db-migrate/bin/db-migrate up\n```\n\n### Setting up the entry point\nWe have a channel which would be broadcast to on every new INSERT into our database, but we are yet to watch for the app and also send it to any client we want to send it to in realtime. Here is where Pusher comes in. In the notification of clients in realtime when a new row has been inserted.\n\nCreate a file called `index.js` in the root folder and paste in:\n\n``` javascript\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    const pg = require ('pg');\n    \n    require('dotenv').config();\n    \n    const app = express();\n    \n    // declare variable to hold database connection \n    let pgClient;\n    \n    // set the view engine to ejs\n    app.set('view engine', 'ejs');\n    \n    const pool = new pg.Pool({\n      connectionString: process.env.POSTGRES_CONNECTION_URL,\n    });\n    \n    // Body parser middleware\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    // Session middleware\n    \n    // Create an instance of Pusher\n    const pusher = new Pusher({\n        appId: process.env.PUSHER_APP_ID,\n        key: process.env.PUSHER_APP_KEY,\n        secret: process.env.PUSHER_APP_SECRET,\n        cluster: process.env.PUSHER_APP_CLUSTER,\n        encrypted: true\n    });\n    \n    pool.connect((err, client) =\u003e {\n      if(err) {\n        console.log(err);\n      }\n      pgClient = client;\n    });\n    \n    //listen on the app\n    app.listen(3000, () =\u003e {\n        return console.log('Server is up on 3000')\n    });\n```\n\nHere, what we have is a basic Express setup, we have added the required libraries, used the `body-parser` middle-ware, and started an instance of Pusher, passing in the app id, key, secret, and cluster from our environment variables. We set `ejs`  as our templating engine, which we will use later on in this tutorial. Also, we connect to our PostgreSQL connection, then assign the client to a global variable. \n\n### Listening to the PostgreSQL notification\nLet’s update our PostgreSQL connection function to include our Listener and publishing the new data in realtime. Replace the `pool.connect` function with this:\n\n``` javascript\n    pool.connect((err, client) =\u003e {\n      if(err) {\n        console.log(err);\n      }\n      pgClient = client;\n      client.on('notification', function(msg) {\n        pusher.trigger('watch_realtime_table', 'new_record', JSON.parse(msg.payload));\n      });\n      const query = client.query('LISTEN watch_realtime_table');\n    });\n```\n\nWhat has changed in this case? First, we added a notification handler for `notifications` in our database. In this response, we have two main attributes useful for us namely `channel` and `payload`. Here, since we are listening on only one channel, all notifications would come from our `watch_realtime_table` channel. If you watch for over one channel, be sure to use the `channel` attribute as a condition to be sure you are sending the right data to the right place. Once the data arrives, we make a Pusher trigger to send the record to our Pusher channel and event for realtime notification.\n\nNext, we executed a query to listen for notifications on the channel by doing `LISTEN watch_realtime_table`.\n\n### Receiving data on the frontend\nNow we are set up to receive data in realtime once a record is inserted into our table. Let us set up a new route to show how to receive this data on the front-end.\n\nLet us add a new route to our `index.js` file as seen:\n\n``` javascript\n    app.get('/', async(req, res) =\u003e {\n        const data = await pgClient.query('SELECT * FROM realtime_table');\n        return res.render('index', {table: data.rows});\n    });\n```\n\nHere, we defined the route as the root of our application. First, we grab all current data in our database and pass it on to a view named `index`. \n\n\u003e Note: we are using `ejs` as our templating engine, and  `index` passed to the render function refers to `views/index.ejs`. The views folder defaults to `views` if we do not set it in our application.\n\nNext, create the file `views/index.ejs`  and add:\n\n``` html\n    \u003clink href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.0/css/bootstrap.min.css\" rel=\"stylesheet\" id=\"bootstrap-css\"\u003e\n    \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-12\"\u003e\n                \u003ch4\u003eRealtime Movie Database\u003c/h4\u003e\n                \u003cdiv class=\"table-responsive\"\u003e\n                    \u003ctable id=\"mytable\" class=\"table table-bordred table-striped\"\u003e\n                        \u003cthead\u003e\n                            \u003cth\u003eMovie Title\u003c/th\u003e\n                            \u003cth\u003eYear Released\u003c/th\u003e\n                            \u003cth\u003eProducer\u003c/th\u003e\n                        \u003c/thead\u003e\n                        \u003ctbody id=\"tableBody\"\u003e\n                            \u003c% table.forEach(function(row) { %\u003e\n                                \u003ctr\u003e\n                                    \u003ctd\u003e\n                                        \u003c%= row.title %\u003e\n                                    \u003c/td\u003e\n                                    \u003ctd\u003e\n                                        \u003c%= row.year %\u003e\n                                    \u003c/td\u003e\n                                    \u003ctd\u003e\n                                        \u003c%= row.producer %\u003e\n                                    \u003c/td\u003e\n                                \u003c/tr\u003e\n                                \u003c% }); %\u003e\n                        \u003c/tbody\u003e\n                    \u003c/table\u003e\n                    \u003cdiv class=\"clearfix\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cscript\u003e\n        var pusher = new Pusher('XXX_APP_KEY', {\n            cluster: 'XXX_APP_CLUSTER',\n            encrypted: true\n        });\n    \n        var channel = pusher.subscribe('watch_realtime_table');\n        channel.bind('new_record', function(data) {\n            var table = document.getElementById('mytable');\n            var row = table.insertRow(-1);\n            var title = row.insertCell(0);\n            var year = row.insertCell(1);\n            var producer = row.insertCell(2);\n            title.innerHTML = data.title;\n            year.innerHTML = data.year;\n            producer.innerHTML = data.producer;\n        });\n    \u003c/script\u003e\n```\n\nIn the code above, we require the bootstrap library and the Pusher client library, we then declared a table with an ID of `mytable`, then looped the current table data to be displayed.\n\nNext, we declared our script function, where we instantiated Pusher with our app key and cluster, respectively. We move on to subscribe to the `watch_realtime_table` channel which we push new data to. Immediately after subscribing, we bind to the event called `new_record` which is triggered every time a record is added. \n\nWe grab the current table, append a new row to the end of the table, create three new cells to hold the data, then we set the data to the `innerHTML` attributes of those cells.\n\nAfter setting all of this up, we can use any PostgreSQL client such as [pgAdmin](https://www.pgadmin.org/) or [Adminer](https://www.adminer.org/) to add records to the table while we see the changes spin up on the frontend. \n\nTo view changes on the frontend, run `node index.js` and visit [http://localhost:3000](http://localhost:3000/) in your browser to view the magic.\n\nIn my case, I have `Adminer` already on my system, so I used Adminer. Here is a demo of this functionality:\n\n![realtime-postgre-demo](//images.ctfassets.net/1es3ne0caaid/6zwbSmQojmsQGAoIiWEoO0/58e944a4f7ad1d82c4983b1d33413315/realtime-postgre-demo.gif)\n\n## Conclusion\n\nIn this tutorial, you learned how to make PostgreSQL database realtime using Pusher. We covered creating stored procedures, triggers, watchers, and listeners.\nFrom here you can take things further and explore more complex functionalities by watching over more than one table at once, making triggers respond to update and delete operations, e.t.c!\n\nThe code base to this tutorial is hosted in a [public GitHub repository](https://github.com/samuelayo/realtime_postgres). Experiment with the code.","metaTitle":"Making PostgreSQL database realtime with Pusher and Node","metaDescription":"This tutorial guides you through how to monitor a PostgreSQL database for changes in realtime, and display them in a browser audit panel."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4DgAarQE1ysQCamYmWYi4e","type":"Entry","createdAt":"2018-05-01T11:42:54.355Z","updatedAt":"2018-05-01T11:42:54.355Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Building a realtime analytics dashboard for an Express application","url":"realtime-analytics-dashboard-express","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/express-realtime-analytics-dashboard","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}}],"reviewDate":"2018-04-30","description":"This tutorial shows you how to build a dashboard that monitors connections to an Express application. The dashboard will update in realtime.","prerequisite":"You will need Node.js 8.10 or higher, MongoDB 3.4 or higher, and a Pusher account.","content":"It’s important for website administrators and developers to have useful statistics regarding their web applications, to help them monitor, for instance, their app’s performance. This helps them to be proactive in bringing improvements and fixes to their sites. In this tutorial, we’ll build an Express application that uses a middleware to log all requests made to our application and pushes updated analytics on our requests in realtime to a dashboard. Here’s a preview of our app in action:\n\n![realtime-express-analytics-demo](//images.ctfassets.net/1es3ne0caaid/5l5JLcSswgyu6C2cigA0Im/bc1c5582ef4d5d5ce25c7624ae23e32d/realtime-express-analytics-demo.gif)\n\n## Prerequisites\n1. [Node.js](http://nodejs.org) 8.10.0 or higher\n2. [MongoDB](https://docs.mongodb.com/manual/installation/) 3.4 or higher.\n3. A [Pusher account](http://pusher.com/signup).\n\n## Setting up\n\nWe’ll start by using the [express application generator](https://expressjs.com/en/starter/generator.html):\n\n```\n    # if you don't already have it installed\n    npm install express-generator -g\n    \n    # create a new express app with view engine set to Handlebars (hbs)\n    express --view=hbs express-realtime-analytics-dashboard\n    cd express-realtime-analytics-dashboard \u0026\u0026 npm install\n```\n\n\nThen we’ll add our dependencies:\n\n```\n    npm install --save dotenv mongoose moment pusher\n```\n\nHere’s a breakdown of what each module is for:\n\n- **Dotenv** is a small package for loading sensitive data (namely our Pusher app credentials) from a `.env` file.\n- **Mongoose** helps us map our models to MongoDB documents.\n- **Moment** helps for easy manipulation of dates and times.\n- **Pusher** provides the realtime APIs.\n\n\n## Logging all requests\n\nWe’ll create a middleware that logs every request to our database. Our middleware will be an \"after” middleware, which means it will run after the request has been processed but just before sending the response. We’ll store the following details:\n\n- The relative URL (for instance, `/users`)\n- The HTTP method (for instance, “GET”)\n- The time it took to respond to the request\n- The day of the week\n- The hour of day,\n\nLet’s create our `RequestLog` model. Create the file `models/request_log.js` with the following content:\n\n``` javascript\n    let mongoose = require('mongoose');\n    \n    let RequestLog = mongoose.model('RequestLog', {\n        url: String,\n        method: String,\n        responseTime: Number,\n        day: String,\n        hour: Number\n    });\n    \n    module.exports = RequestLog;\n```\n\nReplace the code in your `app.js` with the following:\n\n``` javascript    \n    const express = require('express');\n    const path = require('path');\n    const moment = require('moment');\n    const RequestLog = require('./models/request_log');\n    \n    const app = express();\n    require('mongoose').connect('mongodb://localhost/express-realtime-analytics');\n    \n    app.use((req, res, next) =\u003e {\n        let requestTime = Date.now();\n        res.on('finish', () =\u003e {\n            if (req.path === '/analytics') {\n                return;\n            }\n    \n            RequestLog.create({\n                url: req.path,\n                method: req.method,\n                responseTime: (Date.now() - requestTime) / 1000, // convert to seconds\n                day: moment(requestTime).format(\"dddd\"),\n                hour: moment(requestTime).hour()\n            });\n        });\n        next();\n    });\n    \n    // view engine setup\n    app.set('views', path.join(__dirname, 'views'));\n    require('hbs').registerHelper('toJson', data =\u003e JSON.stringify(data));\n    app.set('view engine', 'hbs');\n    \n    module.exports = app;\n```\n\nHere, we attach a middleware that attaches a listener to the [finish](https://nodejs.org/api/http.html#http_event_finish) event of the response. This event is triggered when the response has finished sending. This means we can use this to calculate the response time. In our listener, we create a new request log in MongoDB.\n\n\n## Displaying our analytics on a dashboard\n\nFirst, we’ll create an analytics service object that computes the latest stats for us. Put the following code in the file `analytics_service.js` in the root of your project:\n\n``` javascript\n    const RequestLog = require('./models/request_log');\n    \n    module.exports = {\n        getAnalytics() {\n            let getTotalRequests = RequestLog.count();\n            let getStatsPerRoute = RequestLog.aggregate([\n                {\n                    $group: {\n                        _id: {url: '$url', method: '$method'},\n                        responseTime: {$avg: '$response_time'},\n                        numberOfRequests: {$sum: 1},\n                    }\n                }\n            ]);\n    \n            let getRequestsPerDay = RequestLog.aggregate([\n                {\n                    $group: {\n                        _id: '$day',\n                        numberOfRequests: {$sum: 1}\n                    }\n                },\n                { $sort: {numberOfRequests: 1} }\n            ]);\n    \n            let getRequestsPerHour = RequestLog.aggregate([\n                {\n                    $group: {\n                        _id: '$hour',\n                        numberOfRequests: {$sum: 1}\n                    }\n                },\n                {$sort: {numberOfRequests: 1}}\n            ]);\n    \n            let getAverageResponseTime = RequestLog.aggregate([\n                {\n                    $group: {\n                        _id: null,\n                        averageResponseTime: {$avg: '$responseTime'}\n                    }\n                }\n            ]);\n    \n            return Promise.all([\n                getAverageResponseTime,\n                getStatsPerRoute,\n                getRequestsPerDay,\n                getRequestsPerHour,\n                getTotalRequests\n            ]).then(results  =\u003e {\n                return {\n                    averageResponseTime: results[0][0].averageResponseTime,\n                    statsPerRoute: results [1],\n                    requestsPerDay: results[2],\n                    requestsPerHour: results[3],\n                    totalRequests: results[4],\n                };\n            })\n        }\n    };\n```\n\n\nOur service makes use of [MongoDB aggregations](https://docs.mongodb.com/manual/aggregation/) to retrieve the following statistics:\n\n- `averageResponseTime` is the average time taken by our routes to return a response.\n- `statsPerRoute` contains information specific to each route, such as the average response time and number of requests.\n- `requestsPerDays` contains a list of all the days, ordered by the number of requests per day.\n- `requestsPerHour` contains a list of all the hours, ordered by the number of requests per hour.\n- `totalRequests` is the total number of requests we’ve gotten.\n\n\nNext, we define a route for the dashboard Add the following code just before the `module.exports` line in your `app.js`:\n\n\n``` javascript    \n    app.get('/analytics', (req, res, next) =\u003e {\n        require('./analytics_service').getAnalytics()\n            .then(analytics =\u003e res.render('analytics', { analytics }));\n    });\n```\n\nFinally, we create the view. We’ll use Bootstrap for quick styling and Vue.js for easy data binding. Create the file `views/analytics.hbs` with the following content:\n\n``` html\n    \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\n          integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n    \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n    \n    \u003cdiv class=\"container\" id=\"app\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-5\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003ch5 class=\"card-title\"\u003eTotal requests\u003c/h5\u003e\n                        \u003cdiv class=\"card-text\"\u003e\n                            \u003ch3\u003e\\{{ totalRequests }}\u003c/h3\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-md-5\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003ch5 class=\"card-title\"\u003eAverage response time\u003c/h5\u003e\n                        \u003cdiv class=\"card-text\"\u003e\n                            \u003ch3\u003e\\{{ averageResponseTime }} seconds\u003c/h3\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-5\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003ch5 class=\"card-title\"\u003eBusiest days of the week\u003c/h5\u003e\n                        \u003cdiv class=\"card-text\" style=\"width: 18rem;\" v-for=\"day in requestsPerDay\"\u003e\n                            \u003cul class=\"list-group list-group-flush\"\u003e\n                                \u003cli class=\"list-group-item\"\u003e\n                                    \\{{ day._id }} (\\{{ day.numberOfRequests }} requests)\n                                \u003c/li\u003e\n                            \u003c/ul\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-md-5\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003ch5 class=\"card-title\"\u003eBusiest hours of day\u003c/h5\u003e\n                        \u003cdiv class=\"card-text\" style=\"width: 18rem;\" v-for=\"hour in requestsPerHour\"\u003e\n                            \u003cul class=\"list-group list-group-flush\"\u003e\n                                \u003cli class=\"list-group-item\"\u003e\n                                    \\{{ hour._id }} (\\{{ hour.numberOfRequests }} requests)\n                                \u003c/li\u003e\n                            \u003c/ul\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-5\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003ch5 class=\"card-title\"\u003eMost visited routes\u003c/h5\u003e\n                        \u003cdiv class=\"card-text\" style=\"width: 18rem;\" v-for=\"route in statsPerRoute\"\u003e\n                            \u003cul class=\"list-group list-group-flush\"\u003e\n                                \u003cli class=\"list-group-item\"\u003e\n                                    \\{{ route._id.method }} \\{{ route._id.url }} (\\{{ route.numberOfRequests }} requests)\n                                \u003c/li\u003e\n                            \u003c/ul\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-md-5\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003ch5 class=\"card-title\"\u003eSlowest routes\u003c/h5\u003e\n                        \u003cdiv class=\"card-text\" style=\"width: 18rem;\" v-for=\"route in statsPerRoute\"\u003e\n                            \u003cul class=\"list-group list-group-flush\"\u003e\n                                \\{{ route._id.method }} \\{{ route._id.url }} (\\{{ route.responseTime }} s)\n                            \u003c/ul\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cscript\u003e\n        window.analytics = JSON.parse('{{{ toJson analytics }}}');\n    \n        const app = new Vue({\n            el: '#app',\n    \n            data: window.analytics\n        });\n    \u003c/script\u003e\n```\n\n## Making the dashboard realtime\n\nTo make our dashboard realtime, we need to re-calculate the analytics as new requests come in. This means we’ll:\n\n- Notify all clients of the updated analytics when there’s a new request\n- Listen for the new analytics on our frontend and update the view accordingly\n\nPusher will power our app’s realtime functionality. Sign in to [your Pusher dashboard](http://app.pusher.com) and create a new app. Copy your app credentials from the **App Keys** section. Create a `.env` file and add your credentials in it:\n\n```\n    PUSHER_APP_ID=your-app-id\n    PUSHER_APP_KEY=your-app-key\n    PUSHER_APP_SECRET=your-app-secret\n    PUSHER_APP_CLUSTER=your-app-cluster\n```\n\nNow modify the code in your `app.js` so it looks like this:\n\n``` javascript\n    const express = require('express');\n    const path = require('path');\n    const moment = require('moment');\n    const RequestLog = require('./models/request_log');\n    \n    const app = express();\n    require('mongoose').connect('mongodb://localhost/poster');\n    \n    require('dotenv').config();\n    const Pusher = require('pusher');\n    const pusher = new Pusher({\n        appId: process.env.PUSHER_APP_ID,\n        key: process.env.PUSHER_APP_KEY,\n        secret: process.env.PUSHER_APP_SECRET,\n        cluster: process.env.PUSHER_APP_CLUSTER\n    });\n    \n    app.use((req, res, next) =\u003e {\n        let requestTime = Date.now();\n        res.on('finish', () =\u003e {\n            if (req.path === '/analytics') {\n                return;\n            }\n    \n            RequestLog.create({\n                url: req.path,\n                method: req.method,\n                responseTime: (Date.now() - requestTime) / 1000, // convert to seconds\n                day: moment(requestTime).format(\"dddd\"),\n                hour: moment(requestTime).hour()\n            });\n    \n            // trigger a message with the updated analytics\n            require('./analytics_service').getAnalytics()\n                .then(analytics =\u003e pusher.trigger('analytics', 'updated', {analytics}));\n        });\n        next();\n    });\n    \n    // view engine setup\n    app.set('views', path.join(__dirname, 'views'));\n    require('hbs').registerHelper('toJson', data =\u003e JSON.stringify(data));\n    app.set('view engine', 'hbs');\n    \n    app.get('/analytics', (req, res, next) =\u003e {\n        require('./analytics_service').getAnalytics()\n            .then(analytics =\u003e res.render('analytics', { analytics }));\n    });\n    \n    module.exports = app;\n```\n\nOn the frontend, we’ll pull in Pusher and listen for the `update` message on the `analytics` channel. We’l then update the `window.analytics` values, and allow Vue to update the UI for us. Add the following code to the end of your `views/analytics.hbs`:\n\n``` javascript    \n    \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        const pusher = new Pusher('your-app-key', { cluster: 'your-app-cluster'});\n        pusher.subscribe('analytics')\n                .bind('updated', (data) =\u003e {\n                    Object.keys(data.analytics).forEach(stat =\u003e {\n                        window.analytics[stat] = data.analytics[stat];\n                    })\n                })\n    \u003c/script\u003e\n```\n\n\nReplace `your-app-key` and `your-app-id` with your Pusher app credentials.\n\nTime for us to test our app. Let’s create some dummy routes—one, actually. This route will take different amounts of time to load, depending on the URL, so we can see the effect on our statistics. Visiting `/wait/3` will wait for three seconds, `/wait/1` for one second and so on. Add this to your `app.js`, just before the `module.exports` line:\n\n``` javascript\n    app.get('/wait/:seconds', async (req, res, next) =\u003e {\n        await ((seconds) =\u003e {\n            return new Promise(resolve =\u003e {\n                setTimeout(\n                    () =\u003e resolve(res.send(`Waited for ${seconds} seconds`)),\n                    seconds * 1000\n                )\n            });\n        })(req.params.seconds);\n    });\n```\n\nNow to see the app in action. Start your MongoDB server by running `mongod`. (On Linux/macOS, you might need to run it as `sudo`).\n\nThen start your app by running:\n\n```\n    npm start\n```\n\nVisit your analytics dashboard at http://localhost:3000/analytics. Then play around with the app by visiting a few pages (the `wait` URL with different values for the number of seconds) and watch the stats displayed on the dashboard change in realtime.\n\n\n\u003e Note: you might see that the number of requests increases by more than one when you visit a page. That’s because it’s also counting the requests for the CSS files (included with Express).\n\n\n## Conclusion\n\nIn this article, we’ve built a middleware that tracks every request, a service that computes analytics for us based on these tracks, and a dashboard that displays them. Thanks to Pusher, we’ve been able to make the dashboard update in realtime as requests come in. The full source code is available [on GitHub](https://github.com/shalvah/express-realtime-analytics-dashboard).\n\n","metaTitle":"Building a realtime analytics dashboard for an Express app","metaDescription":"Learn to build an application analytics dashboard. Create an Express app, and implement middleware to track user requests."}}],"defaultValue":"Channels \u0026 JavaScript","queryType":"tag","pages":25,"route":"/tutorials","query":{"product":"Channels","tag":"JavaScript","page":"15"}}},"page":"/tutorials","query":{"product":"Channels","tag":"JavaScript","page":"15"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=JavaScript&page=15 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:24 GMT -->
</html>