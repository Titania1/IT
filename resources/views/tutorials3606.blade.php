<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&page=6 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:40:06 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">296</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials.html" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials1bbb.html?product=Beams" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value=""/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:none;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/react-zapier-tweet-stream.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to stream user tweets with Zapier and React</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Learn how to use Zapier, together with Pusher Channels, to create a live tweet stream. You will build a simple web app w...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/service-discovery-microservices.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Service discovery in a microservice architecture with Pusher Channels</h3><p class="css-k12xad e5jrto45">Learn how to use Pusher Channels to support service discovery when creating a microservices architecture. This tutorial ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/ios-user-presence-node-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Online Presence</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating an iOS app with user presence using Node.js and Swift</h3><p class="css-k12xad e5jrto45">This tutorial demonstrates how to add an online presence feature to an iOS app. You will use Node for the backend, and b...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-content-good-ux.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live UX</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Updating content in realtime without confusing your users</h3><p class="css-k12xad e5jrto45">This tutorial looks at some of the potential downsides of updating content in realtime, and presents solutions. You will...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-commenting-adonis-vue.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Adonis.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a live commenting system with Adonis.js and Vue.js</h3><p class="css-k12xad e5jrto45">This short tutorial will show you how to create a live commenting system using Adonis.js and Vue.js. Users will be able ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/push-notifications-adonis.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Adonis.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Send push notifications to your browser from Adonis.js</h3><p class="css-k12xad e5jrto45">In this tutorial, you will learn how to send push notifications from Adonis.js. You will create a simple web app using t...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-feed-angular-7.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live activity feed with Angular 7</h3><p class="css-k12xad e5jrto45">Build a live activity feed, suitable for use with a blogging application or news site. Use Node for the backend, and Ang...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/social-online-presence-ionic.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Cordova<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Building a social app with online presence using Ionic</h3><p class="css-k12xad e5jrto45">This tutorial will show you how to create a simple social feed for Android and iOS using Ionic. The app features a Node ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/pokemon-react-native-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a Pokemon battle game with React Native - Part 3: Animations and sounds</h3><p class="css-k12xad e5jrto45">In this three part series, use React Native and Node.js to create a two-player Pokemon-like game. In part three, extend ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsf08a.html?product=Channels&amp;page=5" class="css-5s6711 edg0byb1">Prev</a><a href="tutorialse35b.html?product=Channels&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialsb5e2.html?product=Channels&amp;page=4" class="css-za1ua3 edg0byb1">4</a><a href="tutorialsf08a.html?product=Channels&amp;page=5" class="css-za1ua3 edg0byb1">5</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials3606.html?product=Channels&amp;page=6" class="css-2wakph edg0byb1">6</a><a href="tutorialsf497.html?product=Channels&amp;page=7" class="css-za1ua3 edg0byb1">7</a><a href="tutorials6649.html?product=Channels&amp;page=8" class="css-za1ua3 edg0byb1">8</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials20e0.html?product=Channels&amp;page=33" class="css-5s6711 edg0byb1">33</a><a href="tutorialsf497.html?product=Channels&amp;page=7" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":296,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3bqfumgc88gaOCYy2weYSs","type":"Entry","createdAt":"2018-12-12T20:28:47.063Z","updatedAt":"2018-12-12T20:28:47.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to stream user tweets with Zapier and React","url":"react-zapier-tweet-stream","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/tweet-stream","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-12-12","description":"Learn how to use Zapier, together with Pusher Channels, to create a live tweet stream. You will build a simple web app with Node and React, and use Zapier to connect to a Twitter feed. Pusher will supply the realtime functionality. ","prerequisite":"You will need Node 6+ installed on your machine. Some experience of React will be helpful.","content":"In this tutorial, we’ll explore how Pusher Channels can be used in conjunction with [Zapier](https://zapier.com/) to display updates to a user’s Twitter feed on a webpage. If you want to play around with the code as you read this tutorial, visit this [GitHub repository](https://github.com/ayoisaiah/tweet-stream) which contains the final version of the code for you to check out and run locally.\n\n## Prerequisites\n\nPrior experience with building [React](https://reactjs.org/) and Node.js applications is required to complete this tutorial, but you don’t need to know how to use Pusher Channels. You also need to have Node.js (version 6 and later) as well as npm (version 5 or later) installed on your machine. You can use the commands `node -v` and `npm -v` to see which versions of [Node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/) you have installed.\n\n## Getting started\n\nCreate a new folder for this project in your filesystem. You can call it `tweet-stream` or any other name that you prefer. Open a new terminal window and `cd` into the new directory you just created, then run `npm init -y` to initialize the project with a `package.json` file.\n\nNext, run the following command to install all the dependencies we’ll be needing to build the server component of the application:\n\n```\n    npm install express body-parser cors dotenv pusher -S\n```\n\nOnce the installation completes, create the following files in the root of your project directory: `server.js` and `variables.env`.\n\n## Sign up for Pusher\n\nBefore we can utilize the features of Pusher Channels in our application, we need to [sign up for a free Pusher account](https://dashboard.pusher.com/accounts/sign_up). Once your account is created, select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app. Retrieve your credentials from the **API Keys** tab, and then add the following to the `variable.env` file you just created.\n\n```\n    // variables.env\n    \n    PORT=5000\n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\n## Set up the server\n\nOpen up `server.js` in your text editor and paste in the following:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    \n    const express = require('express');\n    const cors = require('cors');\n    const Pusher = require('pusher');\n    const bodyParser = require('body-parser');\n    \n    // Create an express app\n    const app = express();\n    \n    app.use(cors());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(bodyParser.json());\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    app.post('/', (req, res) =\u003e {\n      console.log(req.body);\n    });\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nAs you can see, we’ve set up just the one route where new tweets will be posted to. For now we’re just logging the request body to the console, but we’ll revisit this section in the later parts of the tutorial.\n\nYou can start the server by running `node server.js` in the terminal. It should now be running on port 5000.\n\n## Expose your local server to the world with ngrok\n\nTo make your local server is accessible to the outside world, you can use a service like [ngrok](http://ngrok.com). Visit the ngrok website to find out [how to install and set up ngrok](https://ngrok.com/download) on your computer. Once you have it installed, start an HTTP tunnel on port 5000 by running the following command in a new terminal window:\n\n```\n    ./ngrok http 5000\n```\n\nIf your webhook server is listening on another port, make sure to provide the correct port when starting the HTTP tunnel. You will be given a couple of URLs but you only need the last one which is on the secure (HTTPS) protocol.\n\n![react-zapier-ngrok](//images.ctfassets.net/1es3ne0caaid/49KdyK8n9eO0AcuYMsMaI6/f4ee46edc5788d93aea1cab3d960d15d/react-zapier-ngrok.png)\n\n## Sign up for Zapier\n\nZapier is a service that allows you to integrate between several applications. To use Zapier, you need to [sign up for an account](https://zapier.com/sign-up/). Once your account is created, [go here](https://zapier.com/app/home)  and click the **Make a Zap!** button to create your first Zap.\n\nUnder **Choose a Trigger App,** select Twitter and choose **User Tweet** under **Twitter Trigger.**\n\n![react-zapier-1](//images.ctfassets.net/1es3ne0caaid/1bjW2hrALkWoC0ccY8wgMW/0b724a46b5bcc07ce83059ce0182b85b/react-zapier-1.png)\n\nHit the **Continue** button to move on to the next step. Connect a Twitter account that will be used for this Zap. You can use your existing Twitter account, or create a new one if you prefer. Once you have connected account, select it and hit **Save + Continue**. \n\n![react-zapier-2](//images.ctfassets.net/1es3ne0caaid/2GYUBhSq40UI0aaoUYKAm0/e2291fff2c2d7e5d620dc3772deac81b/react-zapier-2.png)\n\nOn the screen that says **Pick A Sample To Set Up Your Zap**, before you click **Pull in Samples**, make sure there is a recent enough tweet on the account you set up. Otherwise, send a tweet out before clicking the button.\n\n![react-zapier-3](//images.ctfassets.net/1es3ne0caaid/6bbckG38xqW2QsmKC2QW6k/80367b85eb62097dd8b566d85b155a26/react-zapier-3.png)\n\nYou should see the following screen once a sample tweet has been pulled from your Twitter account. Just hit the **Continue** button.\n\n![react-zapier-4](//images.ctfassets.net/1es3ne0caaid/1EwLTc8gIQSAekmGUkqE4G/98c08a0d7260017e2e65d19e1f5b6cf5/react-zapier-4.png)\n\nYou need to setup an action step. Click the link highlighted in the screenshot below to add an action app.\n\n![react-zapier-5](//images.ctfassets.net/1es3ne0caaid/2kmmNZZBy4UmqOe6o4us6W/6c71656cd3afbafb5c5e4be706537f91/react-zapier-5.png)\n\nUnder **Choose an Action app** select **Webhooks by Zapier Action,** then select **POST** under the  **CREATE** heading and click the **Continue** button.\n\n![react-zapier-6](//images.ctfassets.net/1es3ne0caaid/2YiZA7jymAEOKm0Qq08Kqy/861b4d8fd9d70cf9a449f77e678a1635/react-zapier-6.png)\n\nYou will be asked to provided a URL under **Set up Webhooks by Zapier POST**. Copy the URL received from ngrok into the input field. Under **advanced options**, set the **Payload** type to **Json** then hit the **Continue** button.\n\n![react-zapier-7](//images.ctfassets.net/1es3ne0caaid/5Opul6Opnq4iKAqGIyCsUw/fa63abf0b4f8a9260057137ae93ec286/react-zapier-7.png)\n\nOn the next page, hit **Send Test to Webhook by Zapier**. This will send a post request to your local server along with the payload of the sample tweet pulled in earlier in the request body. Check the terminal window where the server is running. You should see some JSON output in the terminal.\n\nFinally, hit **Skip test** on the left hand side and **Finish** on the right. You will be redirected to a page confirming the successful setup of your first Zap.\n\n![react-zapier-8](//images.ctfassets.net/1es3ne0caaid/3d0TWF2YI0EsKawGsASqYW/6d33288333892c5cd535ba887c53cf6b/react-zapier-8.png)\n\nThe 15 minute interval is a limitation of Zapier’s free and entry level plans. With a paid plan, you can take it to as low as 5 minutes.\n\n## Create the application frontend\n\nLet’s work on the app frontend a bit. We need to install the `create-react-app` package globally so that we can use it to bootstrap a new React app. Use the following command below to install `create-react-app`:\n\n```\n    npm install create-react-app -g\n```\n\nNext, `cd` in to your project directory and run `create-react-app client` to create a new React app in a new directory called `client`. Once the installation process completes, `cd` into the newly created `client` directory and run `yarn start` to start the development server. The application will be available for you to view it at http://localhost:3000.\n\nLaunch another terminal window, and `cd` into the `client` directory. Then run the following command to install the other dependencies we’ll be using to build the React app.\n\n```\n    npm install react-timeago pusher-js -S\n```\n\nNext, open up `client/src/App.js` in your favorite text editor and change its contents to look like this:\n\n``` javascript\n    // client/src/App.js\n    \n    import React, { Component } from 'react';\n    import Pusher from 'pusher-js';\n    import TimeAgo from 'react-timeago';\n    import './App.css';\n    \n    class App extends Component {\n      state = {\n        tweets: [],\n      };\n    \n      componentDidMount() {\n        const pusher = new Pusher('\u003cyour app key\u003e', {\n          cluster: '\u003cyour app cluster\u003e',\n          encrypted: true,\n        });\n    \n        const channel = pusher.subscribe('tweets');\n        channel.bind('new-tweet', data =\u003e {\n          const { tweets } = this.state;\n          tweets.push(data.payload);\n    \n          this.setState({\n            tweets,\n          });\n        });\n      }\n    \n      render() {\n        const { tweets: tweetArr } = this.state;\n    \n        const Tweet = (tweet, index) =\u003e (\n          \u003cdiv className=\"tweet\" key={index}\u003e\n            \u003cp className=\"user\"\u003e\n              \u003cspan className=\"screen-name\"\u003e{tweet.user__name}\u003c/span\u003e\n              \u003cspan className=\"username\"\u003e{tweet.user__screen_name}\u003c/span\u003e\n            \u003c/p\u003e\n            \u003cp className=\"tweet-text\"\u003e{tweet.text}\u003c/p\u003e\n            \u003cdiv className=\"meta\"\u003e\n              \u003cdiv\u003e\n                \u003cspan className=\"retweets\"\u003eRetweets: {tweet.retweet_count}\u003c/span\u003e\n                \u003cspan className=\"likes\"\u003eLikes: {tweet.favorite_count}\u003c/span\u003e\n              \u003c/div\u003e\n              \u003ca href={tweet.url}\u003e\n                \u003cTimeAgo date={tweet.created_at} /\u003e\n              \u003c/a\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n    \n        const tweets = tweetArr.map((tweet, index) =\u003e Tweet(tweet, index));\n    \n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cheader className=\"App-header\"\u003e\n              \u003ch1\u003eTweets\u003c/h1\u003e\n            \u003c/header\u003e\n    \n            \u003cmain className=\"tweets\"\u003e{tweets}\u003c/main\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nThe `componentDidMount()` lifecycle method houses the logic for displaying new tweets on the page. We’re opening a connection to Channels using the `subscribe()` method which allows us to subscribe to a new channel called `tweets`. Then, we listen for the `new-tweet` event on the `tweets` channel using the `bind` method and update the application state once we receive a tweet update.\n\nDon’t forget to retrieve your Channels credentials from the **API Keys** tab in the dashboard, and then replace the `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e` placeholders in `App.js` with the appropriate values.\n\n## Add the styles for the app\n\nLet's add the styles for the app’s frontend. Open up `client/src/App.css` in your editor and replace its contents with the following styles:\n\n``` css\n    // client/src/App.css\n    \n    body {\n      font-family: Helvetica, \"Helvetica Nueue\", sans-serif;\n    }\n    \n    .App {\n      text-align: center;\n    }\n    \n    .tweets {\n      width: 100%;\n      max-width: 700px;\n      margin: 30px auto;\n    }\n    \n    .tweet {\n      margin-bottom: 20px;\n      border: 1px solid #ccc;\n      padding: 15px;\n      text-align: left;\n    }\n    \n    .screen-name {\n      font-weight: bold;\n      display: inline-block;\n      margin-right: 10px;\n    }\n    \n    .username::before {\n      content: '@';\n    }\n    \n    .retweets {\n      display: inline-block;\n      margin-right: 10px;\n    }\n    \n    .meta {\n      display: flex;\n      justify-content: space-between;\n    }\n```\n\n## Trigger updates from the server\n\nInside the `server.js` file, change the root route to look like this:\n\n``` javascript\n    // server.js\n    \n    app.post('/', (req, res) =\u003e {\n      pusher.trigger('tweets', 'new-tweet', {\n        payload: req.body,\n      });\n    });\n```\n\nZapier will hit this route for each new tweet that is posted to the Twitter account you connected, and include the tweet payload in the request body. We can then trigger a new update on the `tweets` channel with the tweet payload included.\n\nKill the server using `Ctrl-C` and run `node server.js` again from the root of your project directory. Then send a few tweets using your Twitter account. After about 15 minutes, you should see the new tweets on the page.\n\n![react-zapier-9](//images.ctfassets.net/1es3ne0caaid/2ZfACamgH662i4q8WMqAay/de17c789a6deda16a20d97795bd0e974/react-zapier-9.png)\n\nYou can also trigger the update manually by going to the [Zapier dashboard](https://zapier.com/app/dashboard), find the Zap you created and hit the **Run** button as shown the screenshot above.\n\n![react-zapier-demo](//images.ctfassets.net/1es3ne0caaid/30BrbmI74QiYyyMyM4cW4y/72f3b87a7047930485bdcd0df07b58b9/react-zapier-demo.gif)\n\n## Wrap up\n\nI have explained how to set up Zapier to get fetch user tweets every 15 minutes and how to display new updates on a webpage with Pusher Channels. If you want to dig into other things you can do with Channels, make sure to check out its [exhaustive documentation](https://pusher.com/docs). To grab the complete code used in this tutorial, please visit this [GitHub repository](https://github.com/ayoisaiah/tweet-stream).","metaTitle":"How to stream user tweets with Zapier and React","metaDescription":"Learn how to use Zapier, together with Pusher Channels, to create a live tweet stream. You will build a simple web app with Node and React, and use Zapier to connect to a Twitter feed. Pusher will supply the realtime functionality. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1ojP4dOvryiCAYqaC0isEq","type":"Entry","createdAt":"2018-12-11T23:26:44.674Z","updatedAt":"2018-12-11T23:26:44.674Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Service discovery in a microservice architecture with Pusher Channels","url":"service-discovery-microservices","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Khmrnzj5moO4S6WOYOGAo","type":"Entry","createdAt":"2018-11-14T14:35:55.702Z","updatedAt":"2019-03-03T15:15:59.601Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lanre Adelowo","url":"lanre-adelowo","email":"adelowomailbox@gmail.com","twitter":"https://twitter.com/alanreadelowo","github":"https://github.com/adelowo","guestWriter":true}}],"projectRepo":"https://github.com/adelowo/pusher-channel-discovery","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-12-11","description":"Learn how to use Pusher Channels to support service discovery when creating a microservices architecture. This tutorial works through a practical example using two Docker services, one using Node and one in Golang. ","prerequisite":"You will need Node, Golang 1.10+ and Docker set up on your machine.","content":"In this tutorial, we will be implementing a service discovery using Pusher Channels. To demonstrate this, we will be building two services - both of them a unique ID generator. They will be implemented in both NodeJS and Golang. This is done so as to depict a real-life microservices scenario where services are built in multiple languages. In our use-case here, the NodeJS application will be version 1 while the second iteration will be in Golang. As said earlier, both of them are unique ID generators and basically all they do is generate a `UUID`. The Node service generates a UUID V5 while the Golang service will generate a UUID v4.\n\nMicroservices are an interesting pattern but they usually present a new class of problems. An interesting problem this pattern presents is communication between the bulk of services that make up the entire mesh. These services are run in multiple replicas - depending on scalability needs - and dynamic environments. Take Kubernetes as an example, deploying a container might run in server A, stopping and running it again might deploy it to server. For both of them, you’d obviously get an IP address but then again, you cannot guarantee it won’t change. At this rate, it is clear maintaining a hardcoded list of all service targets wouldn’t make any sense.\n\nEven if we assume Kubernetes is not used and the application is being deployed pre Docker style - a single host, multiple instances. It is still hard to keep an updated list of all running instances. Just try to think of having to keep track of all ports you have assigned to an instance and the pain of having to update them manually.\n\nTo solve the communication problem within microservices, a pattern called service discovery emerged. With service discovery, each service when started would inform a central registry of its reachable IP address (`8.8.8.8`) and port (`53`). Also whenever it is being shut down, maybe as a result of `CTRL+C`, it deregisters itself from the registry. Popular implementations of service discovery include [Consul](https://consul.io) and [etcd](https://coreos.com/etcd/).\n\nWe will also build another service - the API gateway - which will listen to connections from our unique ID generator services. This API gateway will be the public facing program as it will proxy request to an available instance of services registered with Pusher Channels.\n\n\n## Prerequisites\n- Node\n- Golang `\u003e= 1.10`. \n- Docker. We will be using this to run multiple copies of the services.\n- A Pusher Channels application. [Create one here.](https://pusher.com/channels)\n\n\n## Pusher Channels registry\n\nStandards rule literally everything and we need to define the data structure our registry requires. Below is an example of what needs to be sent to the channel in order to successfully process its inclusion as a service backend.\n\n```\n    {\n      \"prefix\": \"/v1\", // App prefix to use for routing to this service\n      \"port\": 3000, // The port this service is running on\n      \"address\": \"172.17.0.4\", // The IP address where this service is reachable at.\n    }\n```\n\n## Directory structure\n\nHere is the directory structure you will need to create to follow this tutorial:\n\n── `$GOPATH/src/github.com/pusher-tutorial/pusher-channel-discovery`\n  ├── golang\n  ├── nodejs\n  ├── nodejs-api-gateway\n\n\n\n## Building the NodeJS service\n\nThis backend will make use of the Channels server SDK for Node. We will use it to send a `register` event to the central registry, in our case a channel.\n\nTo get started, create a folder called `nodejs`. This should match the directory structure above.  In that project directory, you need to create another file called `package.json`. The `package.json` file should have the following contents:\n\n``` json\n    // pusher-channel-discovery/nodejs/package.json\n    {\n      \"name\": \"nodejs-channel-discovery\",\n      \"version\": \"1.0.0\",\n      \"description\": \"Using pusher channel as a service registry\",\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.18.3\",\n        \"express\": \"^4.16.4\",\n        \"internal-ip\": \"^3.0.1\",\n        \"pusher\": \"^2.1.3\",\n        \"uuid\": \"^3.3.2\"\n      },\n      \"devDependencies\": {\n        \"nodemon\": \"^1.18.6\"\n      }\n    }\n```\n\nSwitch to your terminal app and navigate to the directory you created above - `cd path/to/nodejs-channel-discovery`. You then need to run the following command to install the dependencies needed to build this service.\n\n```\n    $ npm install\n```\n\nNext, create an `index.js` file in the root of the folder you created earlier and paste the contents below into it.\n\n``` javascript\n    // pusher-channel-discovery/nodejs/index.js\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const os = require('os');\n    const uuidv5 = require('uuid/v5');\n    const uuidv4 = require('uuid/v4');\n    const Pusher = require('pusher');\n    const internalIp = require('internal-ip');\n    \n    const app = express();\n    const hostName = os.hostname();\n    const port = process.env.PORT || 3000;\n    \n    let pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      encrypted: process.env.PUSHER_APP_SECURE,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n    });\n    \n    let svc = {};\n    \n    internalIp\n      .v4()\n      .then(ip =\u003e {\n        svc = {\n          prefix: '/v1',\n          port: port,\n          address: ip,\n        };\n    \n        console.log('Registering service');\n    \n        pusher.trigger('mapped-discovery', 'register', svc);\n      })\n      .catch(err =\u003e {\n        console.log(err);\n        process.exit();\n      });\n    \n    process.stdin.resume();\n    \n    process.on('SIGINT', () =\u003e {\n    \n      console.log('Deregistering service... ');\n    \n      // Send an exit signal on shutdown\n      pusher.trigger('mapped-discovery', 'exit', svc);\n    \n      // Timeout to make sure the signal sent to\n      // Pusher was successful before shutting down\n      setTimeout(() =\u003e {\n        process.exit();\n      }, 1000);\n    });\n    \n    app.use(bodyParser.json());\n    \n    app.use(function(req, res, next) {\n      // Uniquely identify the server that processed the request\n      res.header('X-Server', hostName);\n      next();\n    });\n    \n    app.get('/', function(req, res) {\n      res.status(200).send({ service: 'ID generator' });  \n    });\n    \n    app.get('/health', function(req, res) {\n      res.status(200).send({ status: 'ok' });\n    });\n    \n    app.post('/generate', function(req, res) {\n    \n      const identifier = req.body.id;\n      if (identifier === undefined) {\n        res.status(400).send({\n          message: 'Please provide an ID to use to generate your UUID V5',\n        });\n        return;\n      }\n    \n      if (identifier.length === 0) {\n        res.status(400).send({\n          message: 'Please provide an ID to use to generate your UUID V5',\n        });\n        return;\n      }\n    \n      res.status(200).send({\n        id: uuidv5(identifier, uuidv5.URL),\n        timestamp: new Date().getTime(),\n        message: 'UUID was successfully generated',\n      });\n    });\n    \n    app.listen(port, function() {\n      console.log(`Service is running at ${port} at ${hostName}`);\n    });\n```\n\nIn the above code, three endpoints were created:\n\n- `/` - This is the root handler of the application. This endpoint returns basic information of the service.\n- `/health` - This endpoint allows the application to notify others about its internal state.\n- `/generate` - This endpoint is meant for the generation of a UUID. It generates a version 5 UUID. This endpoint expects an `ID` from the caller which it then uses to compute the UUID.\n\nSince we will be needing to run multiple copies of this service, let's set it up to run as a container. To do that, we create a `Dockerfile`. Create the file and paste the content below into the file.\n\n```\n    # pusher-channel-discovery/nodejs/Dockerfile\n    FROM node:10\n    COPY . ./\n    RUN npm install\n    CMD [\"node\", \".\"]\n```\n\nYou need to save the file and build the image for this service. To do that, you should run the following command. Please note that this has to be done in the root of the `nodejs` directory.\n\n```\n    $ docker build -t pusher-channel-node .\n```\n\nYou can then run the service. But to do that, you need to use the credentials from the Pusher Channels application you created at the start of the tutorial.\n\n```\n    $ docker run -p 127.0.0.1:3000:3000 -e PUSHER_APP_ID=\"XXXX\" -e PUSHER_APP_KEY=\"XXXXXXX\" -e PUSHER_APP_SECRET=\"XXXXXX\" -e PUSHER_APP_CLUSTER=\"eu\" -e PUSHER_APP_SECURE=\"1\" pusher-channel-node\n```\n\nThe above specifies that we want the service to be available on our machine at localhost:3000. You can test the service works as expected by trying to access `http://localhost:3000/generate` with a POST request that has the following as it's body {\"id\": \"some random string\"}. An example with curl is shown below:\n\n```\n    $ curl -d '{\"id\" : \"3jhbj333\"}' -H \"Content-Type: application/json\" -X POST http://localhost:3000/generate\n```\n\n## Building the Golang service\n\nWe have decided to build another iteration of our Unique ID generator since the first version written in Node used UUID version 5 and we would prefer to use something much more random. UUID 5 is basically a way of hashing some value into 128 bits. So if you try generating multiple UUIDs with the same `id` value in your request, you keep on getting the same UUID. While that behavior is easy to change, let's assume we have tons of users and production code relying on that service already, we don’t want to change behavior but wouldn’t mind doing it right again. Hence the version two rewrite that uses UUID 4, which ensures complete randomness.\n\nTo start with, you need to create a directory that houses this service. You can go ahead to create one called `golang`. This directory needs to be created in a directory in accordance to the structure laid out at the beginning of the article .\n\nYou will also need to run `go mod init` in the newly created directory. This will make the project a [Golang module](https://github.com/golang/go/wiki/Modules#modules).\n\nThe first set of actions we need to perform is connecting to Pusher Channels API, so we need a Go SDK. That can be done by the following command:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\nWe need to create a file called `registry.go`. Since we also have to properly structure the code into packages, it should be in a directory called `registry`. After which you should paste the following code into the `registry.go` file.\n\n\n``` go\n    // pusher-channel-discovery/golang/registry/registry.go\n    \n    package registry\n    \n    import (\n            \"errors\"\n            \"net\"\n    \n            pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    type Event string\n    \n    const (\n            Register Event = \"register\"\n            Exit           = \"exit\"\n    )\n    \n    func (e Event) String() string {\n            switch e {\n            case Register:\n                    return string(Register)\n            case Exit:\n                    return string(Exit)\n            default:\n                    return \"\"\n            }\n    }\n    \n    const (\n            Channel = \"mapped-discovery\"\n    )\n    \n    type Registrar struct {\n            pusher *pusher.Client\n    }\n    \n    type Service struct {\n            // The path that is links to this service\n            Prefix string `json:\"prefix\"`\n    \n            // Public IP of the host running this service\n            Address net.IP `json:\"address\"`\n    \n            Port uint `json:\"port\"`\n    }\n    \n    func (s Service) Validate() error {\n            if s.Address == nil {\n                    return errors.New(\"addr is nil\")\n            }\n    \n            if s.Port \u003c= 0 {\n                    return errors.New(\"invalid HTTP port\")\n            }\n    \n            return nil\n    }\n    \n    func New(client *pusher.Client) *Registrar {\n            return \u0026Registrar{client}\n    }\n    \n    func (r *Registrar) do(svc Service, event Event) error {\n            if err := svc.Validate(); err != nil {\n                    return err\n            }\n    \n            _, err := r.pusher.Trigger(Channel, event.String(), svc)\n            return err\n    \n    }\n    \n    func (r *Registrar) Register(svc Service) error {\n            return r.do(svc, Register)\n    }\n    \n    func (r *Registrar) DeRegister(svc Service) error {\n            return r.do(svc, Exit)\n    }\n    \n    func (r *Registrar) IP() (net.IP, error) {\n            addrs, err := net.InterfaceAddrs()\n            if err != nil {\n                    return nil, err\n            }\n    \n            for _, addr := range addrs {\n                    if ipnet, ok := addr.(*net.IPNet); ok \u0026\u0026 ipnet.IP.IsGlobalUnicast() {\n                            if ipnet.IP.To4() != nil || ipnet.IP.To16() != nil {\n                                    return ipnet.IP, nil\n                            }\n                    }\n            }\n    \n            return nil, nil\n    }\n```\n\nThat seems to be a lot, so here is a breakdown of what we have done above:\n\n- Defined multiple data types to conform to the channel registry structure defined above.\n- Implemented a `Registrar` type that triggers event to a channel. You can find those in the `Register` and `DeRegister` methods.\n\nOur main goal is to generate unique IDs, we need to build an `HTTP` API that will allow for that. \n\nWe would be needing an `HTTP` router to help build our endpoints. For this, we would need a library called `chi`. To install it, run `go get github.com/go-chi/chi`. Since we would also be needing to generate unique IDs, it is safe to also install a UUID library. You will need to run `go get github.com/google/uuid`.\n\nCreate a folder called `transport/web`, and create an `http.go` file inside the newly created folder. Paste the code below in the `http.go` file:\n\n``` go\n    // pusher-channel-discovery/golang/transport/web/http.go\n    package web\n    \n    import (\n            \"encoding/json\"\n            \"fmt\"\n            \"net/http\"\n    \n            \"github.com/go-chi/chi\"\n            \"github.com/google/uuid\"\n    )\n    \n    type Server struct {\n            HostName string\n            Port     uint\n    }\n    \n    func Start(srv *Server) error {\n    \n            mux := chi.NewMux()\n    \n            mux.Use(func(next http.Handler) http.Handler {\n                    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n                            w.Header().Set(\"Content-Type\", \"application/json\")\n                            w.Header().Set(\"X-Server\", srv.HostName)\n    \n                            next.ServeHTTP(w, r)\n                    })\n            })\n    \n            mux.Get(\"/health\", func(w http.ResponseWriter, r *http.Request) {\n                    defer r.Body.Close()\n    \n                    w.WriteHeader(http.StatusOK)\n                    w.Write([]byte(`{ 'status' : 'OK' }`))\n            })\n    \n            mux.Post(\"/generate\", func(w http.ResponseWriter, r *http.Request) {\n    \n                    defer r.Body.Close()\n    \n                    var response struct {\n                            Status int64     `json:\"status\"`\n                            ID     uuid.UUID `json:\"id\"`\n                    }\n    \n                    response.Status = 1\n                    response.ID = uuid.New()\n    \n                    w.WriteHeader(http.StatusOK)\n                    json.NewEncoder(w).Encode(\u0026response)\n            })\n    \n            return http.ListenAndServe(fmt.Sprintf(\":%d\", srv.Port), mux)\n    }\n```\n\nIn the code above, we have created two endpoints:\n\n\n- `/health` - This endpoint allows the application to notify others about its internal state.\n- `/generate` - This endpoint is responsible for creating the UUID. Unlike the first iteration written in NodeJS, it doesn't require any ID of any sort as it generates purely random UUIDs.\n\nTo tie up the registry and the `HTTP` API, we need to make our application able to run as a command line app. To do that, create a file called `main.go` in the `cmd` folder of the root application. You need to paste the following code in the `main.go` file:\n\n``` go\n    // pusher-channel-discovery/golang/cmd/main.go\n    package main\n    \n    import (\n            \"errors\"\n            \"flag\"\n            \"fmt\"\n            \"log\"\n            \"os\"\n            \"os/signal\"\n            \"syscall\"\n    \n            \"github.com/adelowo/pusher-channel-discovery-go/registry\"\n            \"github.com/adelowo/pusher-channel-discovery-go/transport/web\"\n            pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    func main() {\n    \n            shutDownChan := make(chan os.Signal)\n            signal.Notify(shutDownChan, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT)\n    \n            port := flag.Uint(\"http.port\", 3000, \"Port to run HTTP server at\")\n    \n            flag.Parse()\n    \n            appID := os.Getenv(\"PUSHER_APP_ID\")\n            appKey := os.Getenv(\"PUSHER_APP_KEY\")\n            appSecret := os.Getenv(\"PUSHER_APP_SECRET\")\n            appCluster := os.Getenv(\"PUSHER_APP_CLUSTER\")\n            appIsSecure := os.Getenv(\"PUSHER_APP_SECURE\")\n    \n            var isSecure bool\n            if appIsSecure == \"1\" {\n                    isSecure = true\n            }\n    \n            client := \u0026pusher.Client{\n                    AppId:   appID,\n                    Key:     appKey,\n                    Secret:  appSecret,\n                    Cluster: appCluster,\n                    Secure:  isSecure,\n            }\n    \n            reg := registry.New(client)\n    \n            ip, err := reg.IP()\n            if err != nil {\n                    log.Fatalf(\"could not fetch public IP address... %v\", err)\n            }\n    \n            hostName, err := os.Hostname()\n            if err != nil {\n                    log.Fatalf(\"could not fetch host name... %v\", err)\n            }\n    \n            svc := registry.Service{\n                    Prefix:  \"/v2\",\n                    Address: ip,\n                    Port:    *port,\n            }\n    \n            if err := reg.Register(svc); err != nil {\n                    log.Fatalf(\"Could not register service... %v\", err)\n            }\n    \n            var errs = make(chan error, 3)\n            \n            go func() {\n                    srv := \u0026web.Server{\n                            HostName: hostName,\n                            Port:     *port,\n                    }\n    \n                    errs \u003c- web.Start(srv)\n            }()\n    \n            go func() {\n                    \u003c-shutDownChan\n                    errs \u003c- errors.New(\"Application is shutting down\")\n            }()\n            \n            fmt.Println(\u003c-errs)\n            reg.DeRegister(svc)\n    }\n```\n\nSince we need to run multiple copies of this service too, it would make total sense to run it in a container. To build a container image for this service, create a `Dockerfile` in the root of the project and paste the following code in it:\n\n```\n    ## pusher-channel-discovery/golang/Dockerfile\n    FROM golang:1.11 as build-env\n    \n    WORKDIR /go/src/github.com/pusher-tutorial/pusher-channel-discovery-go\n    ADD . /go/src/github.com/pusher-tutorial/pusher-channel-discovery-go\n    \n    ENV GO111MODULE=on\n    \n    RUN go mod download\n    RUN go mod verify\n    RUN go install ./cmd\n    \n    ## A better scratch image\n    ## See https://github.com/GoogleContainerTools/distroless\n    FROM gcr.io/distroless/base\n    COPY --from=build-env /go/bin/cmd /\n    CMD [\"/cmd\"]\n```\n\nWe need to build this image, so you need to run the following command in your terminal:\n\n```\n    $ export GO111MODULE=on\n    $ go mod tidy\n    $ docker build -t pusher-channel-go .\n```\n\nThis will build the image and make it available to be run later on when we choose. Let's run it now:\n\n```\n    $ docker run -p 127.0.0.1:2000:3000 -e PUSHER_APP_ID=\"XXXX\" -e PUSHER_APP_KEY=\"XXXXX\" -e PUSHER_APP_SECRET=\"XXXX\" -e PUSHER_APP_CLUSTER=\"eu\" -e PUSHER_APP_SECURE=\"1\" pusher-channel-go\n```\n\nYou can verify the service is up and running by making a `POST` request to `http://localhost:2000/generate`. An example with `curl` is given below:\n\n```\n    $ curl -X POST localhost:2000/generate\n```\n\n## API gateway\n\nAn API gateway is an application that provides a single entry point for a selected group of microservices. This plays hand in hand with service registration as it needs to be able to pull up information about those microservices so as to proxy requests to them. This part is called service discovery. You can read more about this pattern [here](https://microservices.io/patterns/apigateway.html).\n\nWe will implement this in NodeJS as we assume it already existed when we had only the first ID generator service. What we are building here is basically a reverse proxy. We subscribe to events published by the services we have built above and include the service in the routing table. Whenever we receive a request, we interpret the URL to determine what service is being requested. We use the `prefix` property defined above - in Pusher Channels registry - to achieve this.\n\nStill in accordance with the directory structure laid out at the beginning of this tutorial, we need to create a new folder called `nodejs-api-gateway`. Inside that folder, we need a `package.json` file to define our dependencies. The following contents should be pasted inside the `package.json` file:\n\n``` json\n    // pusher-channels-discovery/nodejs-api-gateway/package.json\n    {\n      \"name\": \"pusher-channels-api-gateway\",\n      \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"pusher-js\": \"^4.3.1\",\n        \"redbird\": \"^0.8.0\"\n      }\n    }\n```\n\nTo install the dependencies declared above, you need to run:\n\n```\n    $ npm install\n```\n\nWe then proceed to implement the proxy. We will use a node package called Redbird which is an awesome reverse proxy. You need to create an `index.js` file and it should have the following code as its contents:\n\n``` javascript\n    // pusher-channels-discovery/nodejs-api-gateway/index.js\n    \n    const port = process.env.PORT || 1500;\n    const domain = process.env.DOMAIN || `localhost:${port}`;\n    \n    const proxy = require('redbird')({ port: port });\n    const Pusher = require('pusher-js');\n    \n    const pusherSocket = new Pusher(process.env.PUSHER_APP_KEY, {\n      forceTLS: process.env.PUSHER_APP_SECURE === '1' ? true : false,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n    });\n    \n    const channel = pusherSocket.subscribe('mapped-discovery');\n    \n    channel.bind('register', data =\u003e {\n      proxy.register(\n        `${domain}${data.prefix}`,\n        `http://${data.address}:${data.port}`\n      );\n    });\n    \n    channel.bind('exit', data =\u003e {\n      proxy.unregister(\n        `${domain}${data.prefix}`,\n        `http://${data.address}:${data.port}`\n      );\n    });\n```\n\nHere is a breakdown of what we have implemented above:\n\n\n- We define a domain constant. This defaults to `localhost: PORT` if the `DOMAIN` environmental value is not available.\n- We create a connection to Pusher channels and subscribe to the `mapped-discovery` channel.\n- We then bind a callback the `register` event. The callback picks out some critical data from the data it has received and uses that to update its routing table.\n- We also do the above for the `exit` channel. But in the instance, we remove the service from the routing table.\n\n\n\u003e The reverse proxy supports load-balancing to multiple instances of our services as we will see shortly\n\nAs with other services we have built, this will also have Docker support. Create a `Dockerfile` and paste the following contents inside it:\n\n```\n    // pusher-channels-discovery/nodejs-api-gateway/Dockerfile\n    FROM node:10\n    COPY . ./\n    RUN npm install\n    CMD [\"node\", \".\"]\n```\n\nYou also need to build the container image by running the following command in a terminal:\n\n```\n    $ docker build -t pusher-channel-api-gateway .\n```\n\n## Putting it all together\n\nYou need to run the API gateway first before starting up every other service. State is not persisted and it will only listen to connections from microservices that are started after its last run.  To start the API gateway container, run:\n\n```\n    $ docker run -p 127.0.0.1:1500:1500 -e PUSHER_APP_KEY=\"XXXXX\" -e PUSHER_APP_SECURE=\"1\" -e PUSHER_APP_CLUSTER=\"eu\" pusher-channel-api-gateway\n```\n\nYou then need to run the container for the service written in NodeJS by running the following command in your terminal:\n\n```\n    $ docker run -e PUSHER_APP_ID=\"XXXX\" -e PUSHER_APP_KEY=\"XXXXXXX\" -e PUSHER_APP_SECRET=\"XXXXXX\" -e PUSHER_APP_CLUSTER=\"eu\" -e PUSHER_APP_SECURE=\"1\" pusher-channel-node\n```\n\nKeep an eye on the terminal window where you are running the API gateway, once the NodeJS service comes up, there should be information in the terminal. It should be in the following form:\n\n```\n    {\"name\":\"redbird\",\"hostname\":\"88c1cea2c10c\",\"pid\":1,\"level\":30,\"from\":{\"protocol\":\"http:\",\"slashes\":true,\"auth\":null,\"host\":\"localhost:1500\",\"port\":\"1500\",\"hostname\":\"localhost\",\"hash\":null,\"search\":null,\"query\":null,\"pathname\":\"/v1\",\"path\":\"/v1\",\"href\":\"http://localhost:1500/v1\"},\"to\":{\"protocol\":\"http:\",\"slashes\":true,\"auth\":null,\"host\":\"172.17.0.3:3000\",\"port\":\"3000\",\"hostname\":\"172.17.0.3\",\"hash\":null,\"search\":null,\"query\":null,\"pathname\":\"/\",\"path\":\"/\",\"href\":\"http://172.17.0.3:3000/\",\"useTargetHostHeader\":false},\"msg\":\"Registered a new route\",\"time\":\"2018-11-11T20:08:02.632Z\",\"v\":0}\n```\n\n\u003e Shutting down the NodeJS service should produce something similar but with an **Unregistered a route** message.\n\nYou can access the Node service by sending a request to the API gateway, `http://localhost:1500/v1/generate` as previously shown. Why the `v1`? If you look at the part of the code that sends information to Pusher Channels, you will notice it has `/v1` in its prefix property. If you take a look at the Golang implementation, you will find its prefix property with `/v2`, not `/v1`. What this means is all requests sent to the API gateway that starts from `v1` would be proxied to the NodeJS service while those with `v2` would be proxied to the Golang service.\nTo run the Golang service, we need to run the following command:\n\n```\n    $ docker run -p 2000:3000 -e PUSHER_APP_ID=\"XXXX\" -e PUSHER_APP_KEY=\"XXXXX\" -e PUSHER_APP_SECRET=\"XXXX\" -e PUSHER_APP_CLUSTER=\"eu\" -e PUSHER_APP_SECURE=\"1\" pusher-channel-go\n```\n\nAll that is left for us to do now is to test that our requests are being proxied to the right services. I will be showing examples with `curl`.\n\n```\n    $ # for v1 \n    $ curl -i -d '{\"id\" : \"3jhbj333\"}' -H \"Content-Type: application/json\" -X POST http://localhost:1500/v1/generate\n    $ # for v2\n    $ curl -i -X POST localhost:1500/v2/generate\n```\n\nI have included the `-i` option as it will be useful for us to inspect the `X-Server` headers to also validate the request is being served by the right service. It will also be useful when we need to validate that requests are being proxied among multiple instances of a service. You need to run multiple instances of the NodeJS service, just open two or three terminal windows where you run the above docker command in each of them.\n\nOnce done, you should make requests to the API gateway and watch the value of `X-Server` change as requests are proxied in a round robin manner to all available instances.\n\n```\n    $ curl -i -d '{\"id\" : \"3jhbj333\"}' -H \"Content-Type: application/json\" -X POST http://localhost:1500/v1/generate\n```\n\nYou can also try shutting down one or more instances of the available services and see what happens. Spoiler, requests are no longer proxied to them.\n\n\n## Conclusion\n\nIn this tutorial, we have leveraged Pusher Channels to implement service discovery and registration when dealing with microservices.\n\nYou can find the source code to this tutorial on [GitHub](https://github.com/adelowo/pusher-channel-discovery).","metaTitle":"Service discovery in a microservice architecture","metaDescription":"Learn how to use Pusher Channels to support service discovery when creating a microservices architecture. This tutorial works through a practical example using two Docker services, one using Node and one in Golang. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4umqdaDyzCCKAIAYIO0gEC","type":"Entry","createdAt":"2018-12-10T19:39:58.351Z","updatedAt":"2020-06-19T14:26:28.893Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating an iOS app with user presence using Node.js and Swift","url":"ios-user-presence-node-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/ios-presence-channel-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-12-10","description":"This tutorial demonstrates how to add an online presence feature to an iOS app. You will use Node for the backend, and build a basic example app using Swift.","prerequisite":"You will need Xcode, Cocoapods and Node installed on your machine. Basic knowledge of iOS development will be helpful.","content":"In this tutorial, we are going to see how you can add user presence to an iOS application using Pusher Channels, Node.js, and Swift. We will create a sample chat application to demonstrate this feature. However, because we are focusing on just user presence, we will not implement the actual chat feature.\n\nIf you are building an application that has a user base, you might need to show your users when their friends are currently online. This comes in handy especially in messenger applications where the current user would like to know which of their friends are available for instant messaging.\n\nHere is a screen recording on how we want the application to work:\n\n![swift-presence-demo-1](//images.ctfassets.net/1es3ne0caaid/1ckGs7NjtccOWCoScc6qKg/c17f54d7165a66443b7e021ecd055e56/swift-presence-demo-1.gif)\n\n## Prerequisites\n\nTo follow along you need the following requirements:\n\n\n1. Xcode installed on your machine. Download [here](https://developer.apple.com/xcode).\n2. Knowledge of the Swift programming language.\n3. Knowledge of the Xcode IDE.\n4. A Pusher Channels app. Create one [here](https://pusher.com).\n5. Cocoapods installed on your machine. [Installation guide](https://guides.cocoapods.org/using/getting-started.html).\n6. Node.js and npm installed on your machine. [Installation guide](https://nodejs.org/en/download/).\n7. Basic knowledge of JavaScript and Node.js.\n\nLet’s get started.\n\n\n## Creating the backend of the application\n\nBefore creating the iOS application, let’s create the backend application in Node.js. This application will have the necessary endpoints the application will need to function properly. To get started, create a new directory for the project. \n\n### Installing the dependencies\n\nIn the root of the project, create a new `package.json` file and paste the following contents into it:\n\n``` json\n    {\n      \"name\": \"presensesample\",\n      \"version\": \"1.0.0\",\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.18.3\",\n        \"express\": \"^4.16.4\",\n        \"pusher\": \"^2.1.3\"\n      }\n    }\n```\n\nAbove, we have defined some npm dependencies that the backend application will need to function. Amongst the dependencies, we can see the `pusher` library. This is the Pusher JavaScript server SDK.\n\nNext, open your terminal application and `cd` to the root of the project you just created and run the following command:\n\n```\n    $ npm install\n```\n\nThis command will install all the dependencies we defined above in the `package.json` file.\n\n### Creating the main application\n\nNext, create a new file called `index.js` and paste the following code into the file:\n\n``` javascript\n    // File: ./index.js\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    const app = express();\n    \n    let users = {};\n    let currentUser = {};\n    \n    let pusher = new Pusher({\n      appId: 'PUSHER_APP_ID',\n      key: 'PUSHER_APP_KEY',\n      secret: 'PUSHER_APP_SECRET',\n      cluster: 'PUSHER_APP_CLUSTER'\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // TODO: Add routes here\n    \n    app.listen(process.env.PORT || 5000);\n```\n\n\u003e Replace the `PUSHER_APP_*` placeholders with your Pusher application credentials.\n\nIn the code above, we imported the libraries we need for the backend application. We then instantiated two new variables: `users` and `currentUser`. We will be using these variables as a temporary in-memory store for the data since we are not using a database. \n\nNext, we instantiated the Pusher library using the credentials for our application. We will be using this instance to communicate with the Pusher API. Next, we add the `listen` method which instructs the Express application to start the application on port 5000.\n\nNext, let’s add some routes to the application. In the code above, we added a comment to signify where we will be adding the route definitions. Replace the comment with the following code:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/users', (req, res) =\u003e {\n      const name = req.body.name;\n      const matchedUsers = Object.keys(users).filter(id =\u003e users[id].name === name);\n      \n      if (matchedUsers.length === 0) {\n        const id = generate_random_id();\n        users[id] = currentUser = { id, name };\n      } else {\n        currentUser = users[matchedUsers[0]];\n      }\n      \n      res.json({ currentUser, users });\n    });\n    \n    // [...]\n```\n\nAbove, we have the first route. The route is a `POST` route that creates a new user. It first checks the `users` object to see if a user already exists with the specified name. If a user does not exist, it generates a new user ID using the `generate_random_id`  method (we will create this later) and adds it to the `users`  object. If a user exists, it skips all of that logic. \n\nRegardless of the outcome of the user check, it sets the `currentUser` as the user that was created or matched and then returns the `currentUser` and `users` object as a response.\n\nNext, let’s define the second route. Because we are using presence channels, and presence channels are private channels, we need an endpoint that will authenticate the current user. Below the route above, add the following code:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/pusher/auth/presence', (req, res) =\u003e {\n      let socketId = req.body.socket_id;\n      let channel = req.body.channel_name;\n      \n      let presenceData = {\n        user_id: currentUser.id,\n        user_info: { name: currentUser.name }\n      };\n    \n      let auth = pusher.authenticate(socketId, channel, presenceData);\n      \n      res.send(auth);\n    });\n    \n    // [...]\n```\n\nAbove, we have the Pusher authentication route.  This route gets the expected `socket_id` and `channel_name` and uses that to generate an authentication token. We also supply a `presenceData` object that contains all the information about the user we are authenticating. We then return the token as a response to the client.\n\nFinally, in the first route, we referenced a function `generate_random_id`. Below the route we just defined, paste the following code:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    function generate_random_id() {\n      let s4 = () =\u003e (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n      return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n    }\n    \n    // [...] \n```\n\nThe function above just generates a random ID that we can then use as the user ID when creating new users.\n\nLet’s add a final default route. This will catch visits to the backend home. In the same file, add the following:\n\n``` javascript\n    // [...]\n    \n    app.get('/', (req, res) =\u003e res.send('It works!'));\n    \n    // [...]\n```\n\nWith this, we are done with the Node.js backend. You can run your application using the command below:\n\n```\n    $ node index.js\n```\n\nYour app will be available here: http://localhost:5000. \n\n\n## Building the iOS application\n\nLaunch Xcode and create a new sample **Single View App** project. We will call ours `presensesample`. \n\n![swift-presence-xcode-create-project](//images.ctfassets.net/1es3ne0caaid/5laF5rUEzmc4gMCcaUcqqE/41ddeca478eb5805b04fc8d8ce6a5109/swift-presence-xcode-create-project.png)\n\nWhen you are done creating the application, close Xcode. Open your terminal application and `cd` to the root directory of the iOS application and run the following command:\n\n```\n    $ pod init\n```\n\nThis will create a new `Podfile` file in the root directory of your application. Open the file and replace the contents with the following:\n\n```\n    # File: ./Podfile\n    target 'presensesample' do\n      platform :ios, '12.0'\n        \n      use_frameworks!\n      \n      pod 'Alamofire', '~\u003e 4.7.3'\n      pod 'PusherSwift', '~\u003e 5.0'\n      pod 'NotificationBannerSwift', '~\u003e 1.7.3'\n    end\n```\n\nAbove, we have defined the application’s dependencies. To install the dependencies, run the following command:\n\n```\n    $ pod install\n```\n\nThe command above will install all the dependencies in the `Podfile` and also create a new `.xcworkspace` file in the root of the project. Open this file in Xcode to launch the project and not the `.xcodeproj` file.\n\n### Creating the scenes\n\nThe first thing we will do is create the storyboard scenes we need for the application to work. We want the storyboard to look like this:\n\n![swift-presence-storyboard](//images.ctfassets.net/1es3ne0caaid/8giPZenseAOU8OYqsmIUk/f73107482e257a499275a825ac0a724d/swift-presence-storyboard.png)\n\nOpen the main storyboard file and delete all the scenes in the file so it is empty. Next, add a view controller to the scene. \n\n\n\u003e **TIP:** You can use the **command + shift + L** shortcut to bring the objects library.\n\nWith the view controller selected, click on **Editor \u003e Embed In \u003e Navigation Controller**. This will embed the current view controller in a navigation controller. Next, with the navigation view controller selected, open the attributes inspector and select the **Is Initial View Controller** option to set the navigation view controller as the entry point for the storyboard.\n\n![swift-presence-nav-controller](//images.ctfassets.net/1es3ne0caaid/2icSp2cXUky8wyqGKGaGQI/b81ac58e733e6c0b1c6e2b2fed333739/swift-presence-nav-controller.png)\n\nNext, design the view controller as seen in the screenshot below. Later on in the article, we will be connecting the text field and button to the code using an `@IBOutlet` and an `@IBAction`.\n\n![swift-presence-start-chatting-button](//images.ctfassets.net/1es3ne0caaid/6dLkdEmXh6cqgy0sSe0kuo/c9310c02fd5451b4ebcd899991db49c6/swift-presence-start-chatting-button.png)\n\nNext, add the tab bar controller and connect it to the view controller using a manual segue. Since tab bar controllers come with two regular view controllers, delete them and add two table view controllers instead as seen below:\n\n![swift-presence-storyboard-table-view](//images.ctfassets.net/1es3ne0caaid/1C7rwWdvssIA28u66oCk4y/eb31cc12822c9c2246f2c69e18cb801c/swift-presence-storyboard-table-view.png)\n\nWhen you are done creating the scenes, let’s start adding the necessary code. \n\n### Adding code to the created scenes\n\nCreate a new controller class called `LoginViewController` and set it as the custom class for the first view controller attached to the navigation controller. Paste the following code into the file:\n\n``` swift\n    // File: ./presensesample/LoginViewController.swift\n    import UIKit\n    import Alamofire\n    import PusherSwift\n    import NotificationBannerSwift\n    \n    class LoginViewController: UIViewController {\n        var user: User? = nil\n        var users: [User] = []\n    \n        @IBOutlet weak var nameTextField: UITextField!\n        \n        override func viewWillAppear(_ animated: Bool) {\n            super.viewWillAppear(animated)\n            \n            user = nil\n            users = []\n            \n            navigationController?.isNavigationBarHidden = true\n        }\n        \n        @IBAction func startChattingButtonPressed(_ sender: Any) {\n            if nameTextField.text?.isEmpty == false, let name = nameTextField.text {\n                registerUser([\"name\": name.lowercased()]) { successful in\n                    guard successful else {\n                        return StatusBarNotificationBanner(title: \"Failed to login.\", style: .danger).show()\n                    }\n    \n                    self.performSegue(withIdentifier: \"showmain\", sender: self)\n                }\n            }\n        }\n        \n        func registerUser(_ params: [String : String], handler: @escaping(Bool) -\u003e Void) {\n            let url = \"http://127.0.0.1:5000/users\"\n            \n            Alamofire.request(url, method: .post, parameters: params)\n                .validate()\n                .responseJSON { resp in\n                    if resp.result.isSuccess,\n                        let data = resp.result.value as? [String: Any],\n                        let user = data[\"currentUser\"] as? [String: String],\n                        let users = data[\"users\"] as? [String: [String: String]],\n                        let id = user[\"id\"], let name = user[\"name\"]\n                    {\n                        for (uid, user) in users {\n                            if let name = user[\"name\"], id != uid {\n                                self.users.append(User(id: uid, name: name))\n                            }\n                        }\n                        \n                        self.user = User(id: id, name: name)\n                        self.nameTextField.text = nil\n                        \n                        return handler(true)\n                    }\n                    \n                    handler(false)\n            }\n        }\n    \n        override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n            if let vc = segue.destination as? MainViewController {\n                vc.viewControllers?.forEach {\n                    if let onlineVc = $0 as? OnlineTableViewController {\n                        onlineVc.users = self.users\n                        onlineVc.user = self.user\n                    }\n                }\n            }\n        }\n    }\n```\n\nIn the controller above, we have defined the `users` and `user` properties which will hold the available users and the current user when the user is logged in. We also have the `nameTextField` which is an `@IBOutlet` to the text field in the storyboard view controller, so make sure you connect the outlet if you hadn’t previously done so.\n\nIn the same controller, we have the `startChattingButtonPressed` method which is an `@IBAction` so make sure you connect it to the submit button in the storyboard view controller if you have not already done so. In this method, we call the `registerUser` method to register the user using the API. If the registration is successful, we direct the user to the `showmain` segue.\n\n\u003e The segue between the login view controller and the tab bar controller should be set with an identifier of `showmain`. \n\nIn the `registerUser` method, we send the name to the API and receive a JSON response. We parse it to see if the registration was successful or not.\n\nThe final method in the class is the `prepare` method. This method is automatically called by iOS when a new segue is being loaded. We use this to preset some data to the view controller we are about to load.\n\nNext, create a new file called `MainViewController` and set this as the custom class for the tab bar view controller. In the file, paste the following code:\n\n``` swift\n    // File: ./presensesample/MainViewController.swift\n    import UIKit\n    \n    class MainViewController: UITabBarController {\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            navigationItem.title = \"Who's Online\"\n            navigationItem.hidesBackButton = true\n            navigationController?.isNavigationBarHidden = false\n            \n            // Logout button\n            navigationItem.rightBarButtonItem = UIBarButtonItem(\n                title: \"Logout\",\n                style: .plain,\n                target: self,\n                action: #selector(logoutButtonPressed)\n            )\n        }\n        \n        override func tabBar(_ tabBar: UITabBar, didSelect item: UITabBarItem) {\n            navigationItem.title = item.title\n        }\n        \n        @objc fileprivate func logoutButtonPressed() {\n            viewControllers?.forEach {\n                if let vc = $0 as? OnlineTableViewController {\n                    vc.users = []\n                    vc.pusher.disconnect()\n                }\n            }\n            \n            navigationController?.popViewController(animated: true)\n        }\n    }\n```\n\nIn the controller above, we have a few methods defined. The `viewDidLoad` method sets the title of the controller and other navigation controller specific things. We also define a **Logout** button in this method. The button will trigger the `logoutButtonPressed`  method.\n\nIn the `logoutButtonPressed` method, we try to log the user out by resetting the `users` property in the view controller and also we disconnect the user from the Pusher connection.\n\nNext, create a new controller class named `ChatTableViewController`. Set this class as the custom class for one of the tab bar controllers child controllers. Paste the following code into the file:\n\n``` swift\n    // File: ./presensesample/ChatTableViewController.swift\n    import UIKit\n    \n    class ChatTableViewController: UITableViewController {\n        override func viewDidLoad() {\n            super.viewDidLoad()\n        }\n    \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 0\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return 0\n        }\n    }\n```\n\nThe controller above is just a base controller and we do not intend to add any chat logic to this controller.\n\nCreate a new controller class called `OnlineTableViewController`. Set this controller as the custom class for the second tab bar controller child controller. Paste the following code to the controller class:\n\n``` swift\n    // File: ./presensesample/OnlineTableViewController.swift\n    import UIKit\n    import PusherSwift\n    \n    struct User {\n        let id: String\n        var name: String\n        var online: Bool = false\n        \n        init(id: String, name: String, online: Bool? = false) {\n            self.id = id\n            self.name = name\n            self.online = online!\n        }\n    }\n    \n    class OnlineTableViewController: UITableViewController {\n    \n        var pusher: Pusher!\n        var user: User? = nil\n        var users: [User] = []\n    \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return users.count\n        }\n    \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"onlineuser\", for: indexPath)\n            let user = users[indexPath.row]\n    \n            cell.textLabel?.text = \"\\(user.name) \\(user.online ? \"[Online]\" : \"\")\"\n    \n            return cell\n        }\n    }\n```\n\nIn the code above, we first defined a `User` struct. We will use this to represent the user resource. We have already referenced this struct in previous controllers we created earlier.\n\nNext, we defined the `OnlineTableViewController` class which is extends the `UITableViewController` class. In this class, we override the usual table view controller methods to provide the table with data. \n\n\u003e You have to set the cell reuse identifier of this table to `onlineuser` in the storyboard. \n\nAbove we also defined some properties:\n\n- `pusher` - this will hold the Pusher SDK instance that we will use to subscribe to Pusher Channels.\n- `users` - this will hold an array of `User` structs.\n- `user` - this is the user struct of the current user.\n\nNext, in the same class, add the following method:\n\n``` swift\n    // File: ./presensesample/OnlineTableViewController.swift\n    \n    // [...]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        tableView.allowsSelection = false\n        \n        // Create the Pusher instance...\n        pusher = Pusher(\n            key: \"PUSHER_APP_KEY\",\n            options: PusherClientOptions(\n                authMethod: .endpoint(authEndpoint: \"http://127.0.0.1:5000/pusher/auth/presence\"),\n                host: .cluster(\"PUSHER_APP_CLUSTER\")\n            )\n        )\n        \n        // Subscribe to a presence channel...\n        let channel = pusher.subscribeToPresenceChannel(\n            channelName: \"presence-chat\",\n            onMemberAdded: { member in\n                if let info = member.userInfo as? [String: String], let name = info[\"name\"] {\n                    if let index = self.users.firstIndex(where: { $0.id == member.userId }) {\n                        let userModel = self.users[index]\n                        self.users[index] = User(id: userModel.id, name: userModel.name, online: true)\n                    } else {\n                        self.users.append(User(id: member.userId, name: name, online: true))\n                    }\n                    \n                    self.tableView.reloadData()\n                }\n            },\n            onMemberRemoved: { member in\n                if let index = self.users.firstIndex(where: { $0.id == member.userId }) {\n                    let userModel = self.users[index]\n                    self.users[index] = User(id: userModel.id, name: userModel.name, online: false)\n                    self.tableView.reloadData()\n                }\n            }\n        )\n        \n        // Bind to the subscription succeeded event...\n        channel.bind(eventName: \"pusher:subscription_succeeded\") { data in\n            guard let deets = data as? [String: AnyObject],\n                let presence = deets[\"presence\"] as? [String: AnyObject],\n                let ids = presence[\"ids\"] as? NSArray else { return }\n            \n            for userid in ids {\n                guard let uid = userid as? String else { return }\n                \n                if let index = self.users.firstIndex(where: { $0.id == uid }) {\n                    let userModel = self.users[index]\n                    self.users[index] = User(id: uid, name: userModel.name, online: true)\n                }\n            }\n            \n            self.tableView.reloadData()\n        }\n        \n        // Connect to Pusher\n        pusher.connect()\n    }\n    \n    // [...]\n```\n\nIn the `viewDidLoad` method above, we are doing several things. First, we instantiate the Pusher instance. In the options, we specify the authorize endpoint. We use the same URL as the backend we created earlier.\n\nThe next thing we do is subscribe to a presence channel called `presence-chat`. When working with presence channels, the channel name must be prefixed with `presence-`. The `subscribeToPresenceChannel` method has two callbacks that we can add logic to:\n\n- `onMemberAdded` - this [event](https://pusher.com/docs/client_api_guide/client_presence_channels#pusher-member-added) is called when a new user joins the `presence-chat` channel. In this callback, we check for the user that was added and mark them as online in the `users` array.\n- `onMemberRemoved` - this [event](https://pusher.com/docs/client_api_guide/client_presence_channels#pusher-member-removed) is called when a user leaves the `presence-chat` channel. In this callback, we check for the user that left the channel and mark them as offline.\n\nNext, we bind to the `pusher:subscription_succeeded` [event](https://pusher.com/docs/client_api_guide/client_presence_channels#pusher-subscription-succeeded). This event is called when a user successfully subscribes to updates on a channel. The callback on this event returns all the currently subscribed users. In the callback, we use this list of subscribed users to mark them online in the application.\n\nFinally, we use the `connect` method on the `pusher` instance to connect to Pusher. \n\n### Allowing local connections on the iOS app\n\nOne last thing we need to do before we are done with the iOS application is allowing the application load data from arbitrary URLs. By default, iOS does not allow this, and it should not. However, since we are going to be testing locally, we need this turned on temporarily. Open the `info.plist` file and update it as seen below:\n\n![swift-presence-allow-local](//images.ctfassets.net/1es3ne0caaid/383KxDAOo0cyucauWI8osQ/854e200980ad355df6948115bcdf6893/swift-presence-allow-local.png)\n\nNow, our app is ready. You can run the application and you should see the online presence status of other users when they log in.\n\n## Conclusion\n\nIn this tutorial, we learned how to use presence channels in your iOS application using Pusher Channels. \n\nThe source code for the application created in this tutorial is available on [GitHub](https://github.com/neoighodaro/ios-presence-channel-pusher). ","metaTitle":"Creating an iOS app with user presence","metaDescription":"This tutorial demonstrates how to add an online presence feature to an iOS app. You will use Node for the backend, and build a basic example app using Swift."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2dSt19gGyAOC8wEKyAkAgy","type":"Entry","createdAt":"2018-12-07T18:47:38.965Z","updatedAt":"2018-12-07T18:47:38.965Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Updating content in realtime without confusing your users","url":"realtime-content-good-ux","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro-articles/updating-contents-realtime","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Od9rZziIoMG4yaQ4EAeok","type":"Entry","createdAt":"2018-02-13T11:31:10.435Z","updatedAt":"2018-02-26T12:31:10.730Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":16,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live UX","url":"live-ux","type":"use case"}}],"reviewDate":"2018-12-07","description":"This tutorial looks at some of the potential downsides of updating content in realtime, and presents solutions. You will build a simple Android app, and experiment with ways to improve the user experience of realtime functionality.","prerequisite":"You will need Android Studio installed on your machine, and basic knowledge of Android development.","content":"## Introduction\n\nIn this tutorial, we will look at the possible ways of confusing your users when providing realtime content and also the proper ways you can achieve it using two use cases.\n\nRealtime functionality involves making content available to users without them having to manually refresh or request an update.  This functionality characterizes most modern apps.\n\nHowever, there is a pit you can easily fall into in the process of implementing these realtime functionalities and that is confusing your users in the process. \n\n## Prerequisites\n\nTo follow along with this tutorial, you should have the following:\n\n- Android Studio installed on your machine. Download the latest stable version [here](https://developer.android.com/studio/index.html).\n- A Pusher application. Create one [here](https://pusher.com).\n- Basic knowledge of Android development and an ability to navigate through the Android Studio IDE.\n- Basic knowledge of the Kotlin programming language. Visit the [official docs](https://kotlinlang.org/docs/reference/).\n\n\n## A common mistake\n\nMaking your application work and update content in realtime is invaluable. However, lets see a simple mistake that you need to watch out for when building realtime applications.\n\nBelow, we have a screen recording of a sample application:\n\n![realtime-content-demo-1](//images.ctfassets.net/1es3ne0caaid/gLJc7IvtKw2KaG4AIiQEE/36f1e43662bb8312fccc5eb76f9d2646/realtime-content-demo-1.gif)\n\nIn the GIF above, when a new content comes in, irrespective of where the user was, they are taken back to the top of the page to view the contents right away. \n\nThis is a bad experience and it can be annoying to the user especially if there are hundreds of content and the user has gone all the way down. \n\nAnother mistake you can make, especially in a timeline based application, is not specifying where the new data added to the application starts. If you can, temporarily give the new content a slightly different background color that would hint the user of the application that the new content has not been consumed. \n\nUsers don’t like being interrupted, so silent updates to the content is welcome as long as there is a visual cue. If you have to alert users of new content, use a non-invasive pop-up without surprising the user as seen below:\n\n![realtime-content-twitter](//images.ctfassets.net/1es3ne0caaid/1XVv9ZiICgA4a2840gCyEm/088ec543088987bf0cca70609c7702df/realtime-content-twitter.jpeg)\n\nHaving noted the bad practices here, let us now build the right way.\n\n## Doing it the right way\n\nThere are many ways you can potentially introduce new content to your application without annoying your users. I will talk about two in this article.\n\nThe first one is by giving the user the option to show the new contents and not making the contents refresh without their knowledge. This model is used by Twitter to add new content to the timeline. The user gets a notification on the screen telling them that new content is available. \n\nThe second one is keeping new content at the bottom and is mostly used by chat clients like WhatsApp to display new content.\n\nLet’s set up sample applications to demonstrate these methods.\n\n\n## Setting up Pusher Channels\n\nTo get started, we need a Pusher Channels app to use in our sample Android application. Log in to your [Pusher dashboard](https://dashboard.pusher.com). If you don’t have an account, you can easily create one. Your dashboard should look like this:\n\n![realtime-content-pusher](//images.ctfassets.net/1es3ne0caaid/2UHAylgTG0Mq0euykqUA40/057c4db1c57325b88f844c167978018b/realtime-content-pusher.png)\n\nCreate a new channel app. You can easily do this by clicking the big **Create new Channels app** card at the bottom right. After you create a new app, you will be provided with the keys. Keep them around as you will need them later on.\n\n\n## Model one - the Twitter model\n\nOpen the Android studio and create a new application. Enter the name of your application, say **TwitterModel** and the package name. Make sure the **Enable Kotlin Support** check box is checked. Choose the minimum SDK, click **Next**, choose an **Empty Activity** template, stick with the `MainActivity` naming and click **finish**. After this, you wait for some seconds for Android Studio to prepare your project for you.\n\nNext, we will add the necessary dependencies in the app-module `build.gradle` file. Add them like so:\n\n``` gradle\n    // File: ./app/build.gradle\n    dependencies {\n        // [...]\n        \n        implementation 'com.pusher:pusher-java-client:1.8.0'\n        implementation 'com.android.support:recyclerview-v7:28.0.0'\n    }\n```\n\nAbove, we added the Pusher client dependency and the `recyclerview` support dependency. Sync your Gradle files so that it can be downloaded and made available for use within the application.\n\nNext, let’s update our layout. Remember that a layout was generated for us, named `activity_main.xml` . This is the layout for the `MainActivity` class. Paste this snippet to the layout file:\n\n``` xml\n    \u003c!-- File: ./app/src/main/res/layout/activity_main.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout \n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\"\u003e\n    \n        \u003cTextView\n            app:layout_constraintTop_toTopOf=\"parent\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"New contents available\"\n            android:textSize=\"16sp\"\n            android:visibility=\"gone\"\n            android:padding=\"10dp\"\n            android:background=\"@android:color/darker_gray\"\n            android:textColor=\"@android:color/white\"\n            android:gravity=\"center\"\n            android:id=\"@+id/textViewNewContents\"\n            /\u003e\n    \n        \u003candroid.support.v7.widget.RecyclerView\n            android:layout_marginTop=\"10dp\"\n            android:id=\"@+id/recyclerViewContents\"\n            app:layout_constraintTop_toBottomOf=\"@id/textViewNewContents\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"/\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nThe layout above contains a `recyclerview` to show the contents in a list and a `textview` to notify the user when there is new content. By default, the `textview` is hidden and only pops up when there is a new content from Pusher.\n\nNext, we will create an adapter for our `recyclerview`. Create a class called `RecyclerListAdapter` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/RecyclerListAdapter.kt\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.TextView\n    \n    class RecyclerListAdapter: RecyclerView.Adapter\u003cRecyclerListAdapter.ViewHolder\u003e() {\n    \n      private val contentList: ArrayList\u003cString\u003e = ArrayList()\n    \n      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        return ViewHolder(\n          LayoutInflater.from(parent.context)\n            .inflate(android.R.layout.simple_list_item_1, parent, false)\n        )\n      }\n    \n      override fun onBindViewHolder(holder: ViewHolder, position: Int) = holder.bind(\n        contentList.get(position)\n      )\n    \n      override fun getItemCount(): Int = contentList.size\n    \n      fun addItem(item:String){\n        contentList.add(0,item)\n        notifyDataSetChanged()\n      }\n    \n     inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        private val userName: TextView = itemView.findViewById(android.R.id.text1)\n        \n        fun bind(item: String) = with(itemView) {\n          userName.text = item\n        }\n      }\n    }\n```\n\nThis class controls the `recyclerview`. It manages how each list item looks using the `onCreateViewHolder` method, it manages the size using the `getItemCount` method, it adds item to each list using the `onBindViewHolder` method and we have a custom `addItem` method that makes sure the new items are added to the top of the list.\n\nNext, we will complete the rest of the logic in the `MainActivity.kt` file. Paste this into the file:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/MainActivity.kt\n    import android.support.v7.app.AppCompatActivity\n    import android.os.Bundle\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import android.view.View\n    import com.pusher.client.channel.SubscriptionEventListener\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import kotlinx.android.synthetic.main.activity_main.*\n    import org.json.JSONObject\n    \n    class MainActivity : AppCompatActivity() {\n      private val newList = ArrayList\u003cString\u003e()\n      private val recyclerListAdapter = RecyclerListAdapter()\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        setContentView(R.layout.activity_main)\n        setupRecyclerView()\n        setupPusher()\n        setupClickListeners()\n      }\n    }\n```\n\nIn this class, we have a list variable and the `recyclerview` adapter initialized. We then call our three main methods in the `onCreate` method. Let us see how these methods look like.\n\nFirst, we have the `setupRecyclerView` method where we initialize our `recyclerview` and assign the adapter to it. Copy and paste the following into the class:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/MainActivity.kt\n    private fun setupRecyclerView() {\n    \n      with(recyclerViewContents){\n        layoutManager = LinearLayoutManager(this@MainActivity)\n        adapter = recyclerListAdapter\n      }\n      \n      recyclerListAdapter.addItem(\"Hello World\")\n      recyclerListAdapter.addItem(\"New article alert!\")\n    }\n```\n\nAs seen above, we added some dummy data to the list. \n\nNext, we have the `setupPusher` method. Add the method to your class:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/MainActivity.kt\n    private fun setupPusher() {\n      val options = PusherOptions()\n      options.setCluster(\"PUSHER_CLUSTER\")\n      val pusher = Pusher(\"PUSHER_KEY\", options)\n    \n      val channel = pusher.subscribe(\"my-channel\")\n    \n      channel.bind(\"my-event\") { channelName, eventName, data -\u003e\n        Log.d(\"TAG\",data)\n        runOnUiThread {\n          textViewNewContents.visibility = View.VISIBLE\n          newList.add(JSONObject(data).getString(\"message\"))\n        }\n      } \n      pusher.connect()\n    }\n```\n\nThis is the method where we connect to our Pusher Channels instance. In this method, when a new content shows up, instead of adding it to the adapter’s list, we add it to a new list and notify the user of the presence of new content.\n\n\n\u003e Replace the PUSHER placeholders with actual keys from your dashboard.\n\nThe last method is the `setupClickListeners` method. Add the method to your class like so:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/MainActivity.kt\n    private fun setupClickListeners() {\n      textViewNewContents.setOnClickListener {\n        for (item in newList){\n          recyclerListAdapter.addItem(item)\n        }\n        \n        textViewNewContents.visibility = View.GONE\n      }\n    }\n```\n\nThis method adds a click listener to the `textview`. When it is clicked, we add each new item to the top of the list using the custom adapter method we created - `addItem`.\n\nSince this app requires the use of internet connection, we need to request for the internet permission. Open your `AndroidManifest.xml` file and add this permission:\n\n``` xml\n    \u003c!-- File: ./app/src/main/AndroidManifest.xml --\u003e\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\nWith this, we are done building our app. You can now run your app! To send a sample message, open the debug console of your Pusher Channels app and send an event like so:\n\n![realtime-content-pusher-event](//images.ctfassets.net/1es3ne0caaid/2oJBI3MxdWAKiwciqIQMKm/fa9da7f9aa651426fcd6b3cc13a04bd7/realtime-content-pusher-event.png)\n\nHere is the raw data to send to the channel `my-channel` and the event `my-event`:\n\n``` \n    {\n      \"message\": \"Hi there\"\n    }\n```\n\nYour app should now work like this:\n\n![realtime-content-demo-2](//images.ctfassets.net/1es3ne0caaid/5dzDrdoa6W8ACGYAge8AY8/491bced3596332db970ac77d75ef0895/realtime-content-demo-2.gif)\n\n\n## Model two - the WhatsApp model\n\nIn the second model, the new items will be shown at the bottom of the screen as seen on most major chat platforms. One of the popular platforms to use this model is WhatsApp. \n\nSometimes, you might want to read previous messages in your chat and when new messages come in, bringing you back to the new messages when there is one is just a bad way to build an application. Instead, you can simply notify the user that there are new messages and if they please, they can go to them immediately. Let’s build a sample application to show this in action.\n\nCreate a new Android project like we did earlier but this time call it **WhatsAppModel**. We will still use the same dependencies as we did in the first sample. \n\nAdd these to your app-module `build.gradle` file:\n\n``` gradle\n    // File: ./app/build.gradle\n    dependencies {\n        // [...]\n    \n        implementation 'com.pusher:pusher-java-client:1.8.0'\n        implementation 'com.android.support:recyclerview-v7:28.0.0'\n    }\n```\n\nOpen the `activity_main.xml` generated for you replace the contents with the following:\n\n``` xml\n    \u003c!-- File: ./app/src/main/res/layout/activity_main.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cFrameLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\"\u003e\n    \n        \u003candroid.support.v7.widget.RecyclerView\n            android:id=\"@+id/recyclerViewContents\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"/\u003e\n    \n        \u003cTextView\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:padding=\"10dp\"\n            android:textSize=\"16sp\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            android:layout_margin=\"16dp\"\n            android:background=\"@drawable/rounded_corner\"\n            android:textColor=\"@android:color/black\"\n            android:visibility=\"gone\"\n            android:layout_gravity=\"right|bottom\"\n            android:id=\"@+id/textViewNewContents\" /\u003e\n    \n    \u003c/FrameLayout\u003e\n```\n\nHere, we have a `recyclerview` to show the contents and a `textview` to notify the user of the number of new messages available. The`textview` uses a special drawable as background to distinguish it easily. \n\nCreate a new drawable named `rounded_corner` and paste this:\n\n``` xml\n    \u003c!-- File: ./app/src/main/res/drawable/rounded_corner.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cshape xmlns:android=\"http://schemas.android.com/apk/res/android\" \u003e\n        \u003cstroke\n            android:width=\"1dp\" /\u003e\n    \n        \u003csolid android:color=\"#ffffff\" /\u003e\n    \n        \u003cpadding\n            android:left=\"1dp\"\n            android:right=\"1dp\"\n            android:bottom=\"1dp\"\n            android:top=\"1dp\" /\u003e\n    \n        \u003ccorners android:radius=\"5dp\" /\u003e\n    \u003c/shape\u003e\n```\n\nNext, let us create an adapter for the `recyclerview`. Create a new class called `RecyclerListAdapter` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/RecyclerListAdapter.kt\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.TextView\n    \n    class RecyclerListAdapter(private val listener:OnLastPositionReached): RecyclerView.Adapter\u003cRecyclerListAdapter.ViewHolder\u003e() {\n    \n      private val contentList: ArrayList\u003cString\u003e = ArrayList()\n    \n      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        return ViewHolder(\n           LayoutInflater\n             .from(parent.context)\n             .inflate(android.R.layout.simple_list_item_1, parent, false)\n        )\n      }\n    \n      override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        holder.bind(contentList[position])\n        \n        if (position == contentList.size-1){\n          listener.lastPositionReached()\n        } else {\n          listener.otherPosition()\n        }\n      }\n    \n      override fun getItemCount(): Int = contentList.size\n    \n      fun addItem(item:String) {\n        contentList.add(item)\n        notifyDataSetChanged()\n      }\n    \n      inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        private val userName: TextView = itemView.findViewById(android.R.id.text1)\n    \n        fun bind(item: String) = with(itemView) {\n          userName.text = item\n        }\n      }\n    \n      interface OnLastPositionReached {\n        fun lastPositionReached()\n        fun otherPosition()\n      }\n    }\n```\n\nThis is very similar to the adapter we created earlier. The difference here is that the new items are added to the bottom and we have an interface to tell us when the `recyclerview` is on the last item and when it is not.\n\nFinally, open the `MainActivity` and set it up like so:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/MainActivity.kt\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.view.View\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import kotlinx.android.synthetic.main.activity_main.*\n    import org.json.JSONObject\n    \n    class MainActivity : AppCompatActivity(), RecyclerListAdapter.OnLastPositionReached {\n    \n      private var count = 0\n      private val recyclerListAdapter = RecyclerListAdapter(this)\n    \n      private var lastPosition = false\n      override fun otherPosition() {\n        lastPosition = false\n      }\n    \n      override fun lastPositionReached() {\n        lastPosition = true\n        textViewNewContents.visibility = View.GONE\n        count = 0\n      }\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        setupClickListeners()\n        setupRecyclerView()\n        setupPusher()\n      }\n    }\n```\n\nThe `MainActivity` class implements the interface from the adapter to tell us when the `recyclerview` is at the last position or not. We use this to update the `lastPosition` boolean variable in our class. Let us add the other methods called into the class.\n\nThe `setupClickListeners` method is setup like so:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/MainActivity.kt\n    private fun setupClickListeners() {\n      textViewNewContents.setOnClickListener {\n        recyclerViewContents.scrollToPosition(recyclerListAdapter.itemCount-1)\n        textViewNewContents.visibility = View.GONE\n        count = 0\n      }\n    }\n```\n\nWhen the `textview` that shows the count of the new messages is clicked, it scrolls down immediately to recent messages, set the count to 0 and hides the `textview`.\n\nThe next method is the `setupRecyclerView` method. Set it up like this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/MainActivity.kt\n    private fun setupRecyclerView() {\n      with(recyclerViewContents){\n        layoutManager = LinearLayoutManager(this@MainActivity)\n        adapter = recyclerListAdapter\n      }\n     \n      recyclerListAdapter.addItem(\"Hello World\")\n      recyclerListAdapter.addItem(\"New article alert!\")\n      recyclerListAdapter.addItem(\"Pusher is actually awesome\")\n      recyclerListAdapter.addItem(\"Realtime functionality freely provided \")\n      recyclerListAdapter.addItem(\"Checkout pusher.com/tutorials\")\n      recyclerListAdapter.addItem(\"You can also checkout blog.pusher.com\")\n      recyclerListAdapter.addItem(\"Learn how to update contents properly \")\n      recyclerListAdapter.addItem(\"Hello World\")\n      recyclerListAdapter.addItem(\"New article alert!\")\n      recyclerListAdapter.addItem(\"Pusher is actually awesome\")\n      recyclerListAdapter.addItem(\"Realtime functionality freely provided \")\n      recyclerListAdapter.addItem(\"Checkout pusher.com/tutorials\")\n      recyclerListAdapter.addItem(\"You can also checkout blog.pusher.com\")\n      recyclerListAdapter.addItem(\"Learn how to update contents properly \")\n    }\n```\n\nThis method setups the recyclerview with a layout manager and an adapter. We also added items to the list. \n\nThe next method is the `setupPusher` method. Set it up like so:\n\n``` kotlin\n    private fun setupPusher() {\n      val options = PusherOptions()\n      options.setCluster(\"PUSHER_CLUSTER\")\n    \n      val pusher = Pusher(\"PUSHER_KEY\", options)\n      val channel = pusher.subscribe(\"my-channel\")\n    \n      channel.bind(\"my-event\") { channelName, eventName, data -\u003e\n        runOnUiThread {  \n          if (!lastPosition){\n            count ++\n            textViewNewContents.text = count.toString()\n            textViewNewContents.visibility = View.VISIBLE\n            recyclerListAdapter.addItem(JSONObject(data).getString(\"message\"))    \n          } else {\n            recyclerListAdapter.addItem(JSONObject(data).getString(\"message\"))\n            recyclerViewContents.scrollToPosition(recyclerListAdapter.itemCount-1)\n          } \n        }\n      }\n      \n      pusher.connect()\n    }\n```\nThis is the method where we connect to our Pusher Channels instance. When a new message is gotten, we use the `lastPosition` variable to know if the user is already at the end of the `recyclerview`, then we just append the new messages and refresh the list. If the user is not at the last position, we add a `textview` notification to show that there is new content.\n\n\n\u003e Replace the PUSHER placeholders with actual keys from your dashboard.\n\nAdd the internet permission in the `AndroidManifest.xml` file like so:\n\n``` xml\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\nRun the application and then go ahead to your Pusher app debug console and send new messages.\n\nHere is the raw data to send to the channel `my-channel` and the event `my-event`:\n\n```\n    {\n      \"message\": \"Hi there\"\n    }\n```\n\nYour app should now work like this:\n\n![realtime-content-demo-3](//images.ctfassets.net/1es3ne0caaid/1jFK7p9Z3Qks4qYGusKI4Q/67a00cab8cf0f10a57cf7b0720063bec/realtime-content-demo-3.gif)\n\n\n## Conclusion\n\nIn this tutorial, we have learned about updating contents the right way. We looked at a possible bad UX use case where a user can get confused. We also looked at two good UX models you can easily adapt.\n\nFeel free to play around the GitHub repo [here](https://github.com/neoighodaro-articles/updating-contents-realtime).","metaTitle":"Updating content in realtime without confusing your users","metaDescription":"This tutorial looks at some of the potential downsides of updating content in realtime, and presents solutions. You will build a simple Android app, and experiment with ways to improve the user experience of realtime functionality."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"61Q4pQ6EV26yOM4AY000i4","type":"Entry","createdAt":"2018-12-07T22:47:55.142Z","updatedAt":"2018-12-07T22:47:55.142Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a live commenting system with Adonis.js and Vue.js","url":"live-commenting-adonis-vue","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/comments-adonis-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2AjUjeRuA4oUAcYYI6ck6i","type":"Entry","createdAt":"2018-09-28T17:24:15.392Z","updatedAt":"2018-09-28T17:24:15.392Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Adonis.js","url":"adonis-js","type":"library","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-12-07","description":"This short tutorial will show you how to create a live commenting system using Adonis.js and Vue.js. Users will be able to respond to blog posts, with their comments displaying in realtime.","prerequisite":"You will need Node and MySQL set up on your machine.","content":"## Introduction\n\nIn this tutorial, we’ll see how to build a live commenting system using Adonis.js on the backend, Vue.js to dynamise our views and Pusher to add the realtime commenting feature in our app. As users submit comments, they will be added and viewed instantly.\n\nPages that force you to reload them to view new comments can be annoying for users, especially since they don't even know if their even is reply to your comment yet.  This poor user experience can cause users to abandon your site.\n\n## Demo\n\nHere is the final result of our app:\n\n![adonis-vue-commenting-demo-1](//images.ctfassets.net/1es3ne0caaid/5KpsGw6xwWAIOmAOCeYsgs/f52ccacc21092883578bbb356f24772d/adonis-vue-commenting-demo-1.gif)\n\n## Prerequisites\n\nIn order to follow this tutorial, knowledge of Javascript and Node.js is required. You should also have the following installed on your machine: \n\n\n- [Node.js](https://nodejs.org)\n- NPM(bundled with Node.js installer) or [Yarn](https://yarnpkg.com/)\n- MySQL database \n- [Vue.js](https://vuejs.org)\n- [Vuex](https://vuex.vuejs.org)\n\n\n## Set up our Adonis.js project\n\nBefore any step we should install **Adonis.js** on our local machine if this is not done yet. Open your terminal and run this command in order to do so: \n\n```\n    # if you don't have Adonis CLI installed on your machine. \n      npm install -g @adonisjs/cli\n      \n    # Create a new adonis app and move into the app directory\n    $ adonis new adonis-comments-pusher \u0026\u0026 cd adonis-comments-pusher\n```\n\nNow start the server and test if everything is working fine: \n\n```\n    adonis serve --dev\n    \n    2018-09-23T12:25:30.326Z - info: serving app on http://127.0.0.1:3333\n```\n\nIf the steps above were successful, open your browser and make a request to : http://127.0.0.1:3333. \n\nYou should see the following:\n\n![adonis-push-notifications-default](//images.ctfassets.net/1es3ne0caaid/37HYn8vXdmAwKuMYgeYioQ/83699f02e9831c5ead873eacf7f5174a/adonis-push-notifications-default.png)\n\n\n## Set up Pusher and install other dependencies\n\nHead over to [Pusher](https://www.pusher.com) and create an account or sign in if you already have a account.\n\nNext, create a new Pusher app instance. This registration provides credentials which can be used to communicate with the created Pusher instance. Copy the App ID, Key, Secret, and Cluster from the App Keys section and put them in the `.env`  file located at you project root:\n\n```\n    //.env\n        PUSHER_APP_KEY=\u003cAPP_KEY\u003e\n        PUSHER_APP_SECRET=\u003cAPP_SECRET\u003e\n        PUSHER_APP_ID=\u003cAPP_ID\u003e\n        PUSHER_APP_CLUSTER=\u003cAPP_CLUSTER\u003e\n```\n\nWe’ll use these keys further in this tutorial to link Pusher with our Adonis project.\n\nNext, we need to install the Pusher SDK as well as other dependencies we’ll need to build our app.\nWe won’t use the Pusher SDK directly but instead use [a Pusher provider for Adonis](https://github.com/Perafan18/adonis-pusher). This provider enables us to use easily the Pusher SDK with the Adonis.js ecosystem.\nBut we should first install the Pusher SDK by running this command:  \n\n```\n    #if you want to use npm\n    npm install pusher\n    \n    #or if you prefer Yarn\n    yarn add pusher\n```\n\nNow, you can install the Pusher provider for Adonis with this command:\n\n```\n    #if you want to use npm\n    npm install adonis-pusher\n    \n    #or if you prefer Yarn\n    yarn add adonis-pusher\n```\n\nYou will need to add the provider to AdonisJS at `start/app.js`:\n\n``` javascript\n    const providers = [\n        ...\n        'adonis-pusher/providers/Pusher'\n    ]\n```\n\nLast, let’s install other dependencies that we’ll use to build our app. \n\nRun this command in your terminal:\n\n```\n    #if you want to use npm\n    npm install vue vuex axios laravel-mix pusher-js  mysql cross-env\n    \n    #or if you prefer Yarn\n    yarn add vue vuex axios laravel-mix pusher-js mysql cross-env\n```\n\nDependencies we will use:\n\n- `vue` and `vuex` respectively to build the frontend of our app and manage our data store,\n- `axios` to make HTTP requests to our API endpoints\n- [laravel-mix](https://github.com/JeffreyWay/laravel-mix) to provide a clean, fluent API for defining basic [webpack](http://github.com/webpack/webpack) build steps \n- `pusher-js` to listen to events emitted from our server\n- `mysql`, Node.js driver for MySQL to set up our database as this app will use MySQL for storage\n- `cross-env` to run scripts that set and use environment variables across platforms\n\n\n## Set up our build workflow\n\nWe’ll use laravel-mix to build and compile our application assets in a fluent way. But first we must tell our app to use it for that purpose. Open your `package.json` file and paste the following in the scripts section: \n\n\n```\n    \"asset-dev\": \"cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"asset-watch\": \"cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --watch --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"asset-watch-poll\": \"npm run watch -- --watch-poll\",\n    \"asset-hot\": \"cross-env NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"asset-prod\": \"cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\"\n```    \n\nAfter that create a `webpack.mix.js` file at the root of your project and paste this code:\n\n\n``` javascript    \n    const mix = require('laravel-mix');\n    \n    mix.setPublicPath('public');\n    /*\n     |--------------------------------------------------------------------------\n     | Mix Asset Management\n     |--------------------------------------------------------------------------\n     |\n     | Mix provides a clean, fluent API for defining some Webpack build steps\n     | for your Laravel application. By default, we are compiling the Sass\n     | file for your application, as well as bundling up your JS files.\n     |\n     */\n     \n    mix.js('resources/assets/js/app.js', 'public/js')\n```    \n\nThe code above builds, compiles and bundles all our javascript code into a single js file created automatically in `public/js` directory.\n\nNow create this file `assets/js/bootstrap.js` and paste this code inside: \n\n\n``` javascript    \n    window._ = require('lodash');\n    \n    window.axios = require('axios');\n    \n    window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n    window.axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n    window.axios.defaults.headers.common.crossDomain = true;\n    window.axios.defaults.baseURL = '/api';\n    \n    let token = document.head.querySelector('meta[name=\"csrf-token\"]');\n    \n    if (token) {\n      window.axios.defaults.headers.common['X-CSRF-TOKEN'] = token.content;\n    } else {\n      console.error('CSRF token not found: https://adonisjs.com/docs/4.1/csrf');\n    }\n    \n    window.Pusher = require('pusher-js');\n```    \n\nYou will notice we require dependencies to build our app. We also globally registered some headers to the axios library in order to handle some security issues and to tackle in a proper way our API endpoints. These headers enable respectively ajax request, define `Content-Type` for our post requests, CORS and register the CSRF token.\n\nNext, create this file:  `assets/js/app.js` and paste the following inside:\n\n\n``` javascript    \n    require('./bootstrap')\n```    \n\nWhen we import our `bootstrap.js` file , laravel-mix will compile our `app.js` file.\n\nOur app is now ready to use laravel-mix for building and compiling our assets. By running this command:  `npm run asset-dev` you should see a `public/js/app.js` file after the build process. Great!\n\n\n## Build our comment model and migration\n\nFirst we need to set up our database, we’ll use a MySQL database for storage in this tutorial. Open your `.env` file and update the database section with your own identifiers: \n\n```\n    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_USER=your_database_user\n    DB_PASSWORD=your_dtabase_password\n    DB_DATABASE=your_database_name\n```\n\nNext, open your terminal and run the command below to generate our `Comment` model as well as its corresponding controller and migration file which will be used to build the schema for our comments table: \n\n```\n    adonis make:model Comment -mc\n```\n\nInside your product migration file, copy and paste this code:\n\n``` javascript\n    //../database/migrations/*_comment_schema.js\n    'use strict'\n    \n    const Schema = use('Schema')\n    \n    class CommentSchema extends Schema {\n      up() {\n        this.create('comments', (table) =\u003e {\n          table.increments()\n          table.string('content')\n          table.integer('author')\n          table.timestamps()\n        })\n      }\n    \n      down() {\n        this.drop('comments')\n      }\n    }\n    \n    module.exports = CommentSchema\n```    \n\nOur comment schema is pretty straightforward. \nYou can see we defined our comments table fields as: \n\n- content: to hold the comment text\n- author: to contain the author’s name\n\nThe `increments()` will create an `id` field with `Auto Increment` and set it as `Primary key`. The `timestamps()` will create the `created_at` and `updated_at` fields respectively.\n\nNow if your run this command:  `adonis migration:run` in your terminal it will create a comments table in your database.\n\n\n## Define routes and create the controller\n\nIn this part of the tutorial, we’ll create our routes and define controller functions responsible for handling our HTTP requests.\n\nWe’ll create three basic routes for our application, one for rendering our app view, one for fetching comments from the database and the last one for storing comments into the database.\n\nGo to the `start/routes.js` file and replace the content with:\n\n``` javascript\n    const Route = use('Route')\n    \n    Route.get('/', 'CommentController.index')\n    \n    Route.group(() =\u003e {\n      Route.get('/comments', 'CommentController.fetchComments')\n      Route.post('/comments', 'CommentController.store')\n    }).prefix('api')\n```    \n\nThis block pulls in `Route` service provider.\nRoutes defining in Adonis is similar to the Laravel methodology and you should not have any problems if you have worked with Laravel. We prefixed two of our routes with `api` to help remind us that they are api endpoints.\n\nNext let’s create our controller functions. Open your  `CommentController.js`  file and paste the following:\n\n``` javascript\n    'use strict'\n    \n    const Comment = use('App/Models/Comment')\n    const Event = use('Event')\n    \n    class CommentController {\n    \n      async index({view}) {\n        return view.render('comment')\n      }\n    \n      async fetchComments({request, response}) {\n        let comments = await Comment.all()\n        return response.json(comments)\n      }\n    \n      async store({request, response}) {\n        try {\n          let comment = await Comment.create(request.all())\n    \n          Event.fire('new::comment', comment.toJSON())\n          return response.json(\"ok\")\n        } catch (e) {\n          console.log(e)\n        }\n    \n      }\n    \n    }\n    \n    module.exports = CommentController\n```\n\nThe first lines import `Event` service provider and the  `Comment` model.\n\nYou can notice three functions in the code above:\n\n- `index` renders the `comment.edge` file(that we’ll create later in this tutorial) in the `resources/views` directory (which is where views are stored in Adonis).\n- `fetchComments`  fetches comments from our database and returns them in a JSON format\n- `store`  creates a new `Comment` instance with the request queries. We also fire an event named  `new::comment`  with the new instance  in a JSON format. We can listen to this event and manipulate the data it carries.\n\n\n## Emit event with Pusher channels\n\nCreate a filename `event.js` in the `start` directory. In this file we’ll create an event which will be fired every time we need to send a message via Pusher channels, and as it happens a posted comment via Pusher channels.\n\n``` javascript\n    //events.js\n    \n    const Pusher = use('Pusher')\n    const Event = use('Event');\n    const Env = use('Env');\n    \n    // set up Pusher\n    let pusher = new Pusher({\n      appId: Env.get('PUSHER_APP_ID'),\n      key: Env.get('PUSHER_APP_KEY'),\n      secret: Env.get('PUSHER_APP_SECRET'),\n      cluster: Env.get('PUSHER_APP_CLUSTER'),\n      encrypted: false\n    });\n    \n    //fire new event\n    Event.when('new::comment', async (comment) =\u003e {\n      pusher.trigger('comment-channel', 'new-comment', {\n        comment\n      })\n    });\n```\n    \n\nWe need to pull in the `Event`, `Pusher` (using the adonis-pusher package we installed earlier) and `Env` service providers.\n\nNext, we registered a listener for the `new::comment`  event, after which we initialize and configure Pusher. This event was registered in the `CommentController.store`  function we created above to handle comment creation.\n\nWhen we are done with the pusher configuration, we trigger a `new-comment` event on the `comment-channel` with the `trigger` method.\n\n\n\n## Set up Vuex store\n\nWe’ll be using the [Vuex](https://vuex.vuejs.org) library to centralize our data and control the way it is mutated throughout our application.\n\n### Create our state\n\nVuex state is a single object that contains all our application data. So let’s create  `../resources/js/store/state.js`  and paste this code inside:\n\n\n``` javascript    \n    let state = {\n        comments: []\n    }\n    export default  state\n```\n\nThe `comments` key is an array responsible to store our database comments.\n\n### Create our getters\n\nWith help of getters we can compute derived based on our data store state. Create  `../resources/js/store/getters.js`  and paste this code inside\n\n``` javascript\n    let getters = {\n        comments: state =\u003e {\n            return state.comments\n        }\n    }\n    \n    export default getters\n```\n\n### Create our mutations\n\nMutations allow us to perform some changes on our data. Create `../resources/js/store/mutations.js` and paste this piece of code inside:\n\n``` javascript\n    let mutations = {\n      GET_COMMENTS(state, comments) {\n        state.comments = comments\n      },\n      ADD_COMMENT(state, comment) {\n        state.comments = [...state.comments, comment]\n      }\n    }\n    \n    export default mutations\n```\n\nOur `mutations` object has 2 functions:\n\n- `GET_COMMENTS` is responsible for getting our comments data from a database or webserver.\n- `ADD_COMMENT` is responsible for adding a new comment to our comments array using the [ES6 spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax).\n\n\n### Create our actions\n\nVuex actions allow us to perform asynchronous operations over our data. Create the file `../resources/js/store/actions.js`  and  paste the following code:\n\n``` javascript\n    let actions = {\n      ADD_COMMENT({commit}, comment) {\n    \n        return new Promise((resolve, reject) =\u003e {\n          axios.post(`/comments`, comment)\n            .then(response =\u003e {\n              resolve(response)\n            }).catch(err =\u003e {\n            reject(err)\n          })\n        })\n    \n      },\n    \n      GET_COMMENTS({commit}) {\n        axios.get('/comments')\n          .then(res =\u003e {\n            {\n              commit('GET_COMMENTS', res.data)\n            }\n          })\n          .catch(err =\u003e {\n            console.log(err)\n          })\n      }\n    }\n    \n    export default actions\n```\n\nWe have defined two actions and each of them is responsible for a single operation, either comments post or comments fetch. They both perform asynchronous calls to our API routes. \n\n\n- `ADD_COMMENT`  sends a post request to our `/api/comments` with the new comment to create and returns a new promise (later in this tutorial we’ll handle the returned promise). This action is dispatched whenever a user submits a comment.\n\n\n- `GET_COMMENTS` makes a get request to our `api/comments` endpoint to get our database comments and commits the request result with `GET_COMMENTS` mutation.\n\n\n### Set up our store with Vue\n\nCreate the file `../resources/assets/js/store/index.js` and paste this code inside:\n\n\n``` javascript\n    import Vue from 'vue'\n    import Vuex from 'vuex'\n    import actions from './actions'\n    import mutations from './mutations'\n    import getters from './getters'\n    import state from \"./state\";\n    \n    Vue.use(Vuex);\n    \n    export default new Vuex.Store({\n        state,\n        mutations,\n        getters,\n        actions\n    })\n```\n\nNext, we will export our store and add it to the Vue instance. \nAdd this code to your `../resouces/js/app.js`  file.\n\n``` javascript\n    require('./bootstrap')\n    \n    window.Vue = require('vue');\n    \n    import store from './store/index'\n    \n    Vue.component('comment', require('./components/Comment'));\n    Vue.component('comments', require('./components/Comments'))\n    Vue.component('new-comment', require('./components/NewComment'))\n    \n    const app = new Vue({\n      el: '#app',\n      store\n    });\n```\n\nThe code above globally registers three Vue components, `Comment.vue` ,`Comments.vue` and  `NewComment.vue` that we’ll build in the next part of this tutorial.\n\n\n## Building Vue components\n\nWe’ll build three Vue components for our app, the `Comment.vue` component, the  `Comments.vue` and the  `NewComment.vue` component, each of them responsible for a single functionality.\n\n### Create the Comment.vue component\n\nThe  `Comment.vue` component is responsible for encapsulating details about a single comment instance from the database and rendering it in a proper and styled way.\nPaste the following inside your `Comment.vue` component.\n\n``` html\n    //../resources/assets/js/components/Comment.vue\n    \n    \u003ctemplate\u003e\n      \u003cli class=\"comment-wrapper animate slideInLeft \"\u003e\n        \u003cdiv class=\"profile\"\u003e\n          \u003cimg :src=\"avatar\" alt=\"\"\u003e\u003c/div\u003e\n        \u003cdiv class=\"msg has-shadow\"\u003e\n          \u003cdiv class=\"msg-body\"\u003e\u003cp class=\"name\"\u003e{{comment.author}} \u003cspan class=\"date\"\u003e{{posted_at}}\u003c/span\u003e\u003c/p\u003e\n            \u003cp class=\"content\"\u003e{{comment.content}}\u003c/p\u003e\u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/li\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n      export default {\n        name: \"Comment\",\n        props: ['comment'],\n        computed: {\n          posted_at() {\n            return moment(this.comment.created_at).format('MMMM Do YYYY')\n          },\n          avatar() {\n            return `https://api.adorable.io/avatars/48/${this.comment.author}@adorable.io.png`\n          }\n        }\n      }\n    \u003c/script\u003e\n    \n    \u003cstyle lang=\"scss\" scoped\u003e\n      .comment-wrapper {\n        list-style: none;\n        text-align: left;\n        overflow: hidden;\n        margin-bottom: 2em;\n        padding: .4em;\n    \n        .profile {\n          width: 80px;\n          float: left;\n        }\n    \n        .msg-body {\n          padding: .8em;\n          color: #666;\n          line-height: 1.5;\n        }\n    \n        .msg {\n          width: 86%;\n          float: left;\n          background-color: #fff;\n          border-radius: 0 5px 5px 5px;\n          position: relative;\n          \u0026::after {\n            content: \" \";\n            position: absolute;\n            left: -13px;\n            top: 0;\n            border: 14px solid transparent;\n            border-top-color: #fff;\n          }\n        }\n    \n        .date {\n          float: right;\n        }\n        .name {\n          margin: 0;\n          color: #999;\n          font-weight: 700;\n          font-size: .8em;\n        }\n    \n        p:last-child {\n          margin-top: .6em;\n          margin-bottom: 0;\n        }\n    . \n      }\n    \n    \n    \u003c/style\u003e\n```\n\nOur  `Comment.vue` component takes a `comment` property whose details we simply render in the component body.  We also defined two `computed` properties, `posted_at`  to parse the Moment.js library with the `comment` posted date, and `avatar` to generate an avatar for the comment author using [this API](http://avatars.adorable.io).\n\nIn the `style` block we’ve defined some styles to our comment component in order to make things look more beautiful.\n\n### Create the Comments.vue component\n\nThis component will render comment items from the database.\nCreate your  `Comments.vue` component and paste this code inside:\n\n``` html\n    ../resources/assets/js/components/Comments.vue\n    \n    \u003ctemplate\u003e\n      \u003cdiv class=\"container\"\u003e\n        \u003cul class=\"comment-list\"\u003e\n          \u003cComment :key=\"comment.id\" v-for=\"comment in comments\" :comment=\"comment\"\u003e\u003c/Comment\u003e\n        \u003c/ul\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n      import {mapGetters} from 'vuex'\n      import Comment from './Comment'\n    \n      export default {\n        name: \"Comments\",\n        components: {Comment},\n        mounted() {\n          this.$store.dispatch('GET_COMMENTS')\n    \n         //use your own credentials you get from Pusher\n          let pusher = new Pusher(YOUR_PUSHER_APP_ID, {\n            cluster: YOUR_PUSHER_CLUSTER,\n            encrypted: false\n          });\n    \n          //Subscribe to the channel we specified in our Adonis Application\n          let channel = pusher.subscribe('comment-channel')\n    \n          channel.bind('new-comment', (data) =\u003e {\n            this.$store.commit('ADD_COMMENT', data.comment)\n          })\n        },\n        computed: {\n          ...mapGetters([\n            'comments'\n          ])\n        }\n      }\n    \u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n      .comment-list {\n        padding: 1em 0;\n        margin-bottom: 15px;\n      }\n    \n    \u003c/style\u003e\n```\n\n \nIn the `template` section of this code, we loop through our comments array and render for each loop iteration a `Comment.vue` component imported with the current comment iterated as a property.\n\nIn the  `mounted` hook function we dispatched the  `GET_COMMENTS` action. The action defined above sends a get request to our database to fetch posted comments. Then, we initialized a Pusher instance using the credentials obtained earlier when creating our Pusher app. Next, we subscribed to the `comment-channel` and listened to the `new-comment` event in order to commit the `ADD_COMMENT` mutation with the new comment pulled in by the event.\n\nWe also used the Vuex helper function  `…mapGetters()` to access our comments state as `computed` property. In this component we also defined some styles to beautify our interface in the `style` block.\n\n\n### Create the New-Comment.vue component\n\nOur third component is responsible for displaying a form to our users for comment posting. It should also send a request to our database when a user submits his comment. Let’s create the `New-Comment.vue` component, copy and paste this code inside:\n\n\n``` html    \n    \u003ctemplate\u003e\n      \u003cdiv id=\"commentForm\" class=\"box has-shadow has-background-white\"\u003e\n    \n        \u003cform @keyup.enter=\"postComment\"\u003e\n          \u003cdiv class=\"field has-margin-top\"\u003e\n    \n            \u003cdiv class=\"field has-margin-top\"\u003e\n              \u003clabel class=\"label\"\u003eYour name\u003c/label\u003e\n              \u003cdiv class=\"control\"\u003e\n                \u003cinput type=\"text\" placeholder=\"Your name\" class=\"input is-medium\" v-model=\"comment.author\"\u003e\n              \u003c/div\u003e\n    \n            \u003c/div\u003e\n            \u003cdiv class=\"field has-margin-top\"\u003e\n              \u003clabel class=\"label\"\u003eYour comment\u003c/label\u003e\n              \u003cdiv class=\"control\"\u003e\n                            \u003ctextarea\n                              style=\"height:100px;\"\n                              name=\"comment\"\n                              class=\"input is-medium\" autocomplete=\"true\" v-model=\"comment.content\"\n                              placeholder=\"lorem ipsum\"\u003e\u003c/textarea\u003e\n              \u003c/div\u003e\n    \n            \u003c/div\u003e\n            \u003cdiv class=\"control has-margin-top\"\u003e\n              \u003cbutton style=\"background-color: #47b784\" :class=\"{'is-loading': submit}\"\n                      class=\"button has-shadow is-medium has-text-white\"\n                      :disabled=\"!isValid\"\n                      @click.prevent=\"postComment\"\n                      type=\"submit\"\u003e Submit\n              \u003c/button\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/form\u003e\n        \u003cbr\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n      export default {\n        name: \"NewComment\",\n        data() {\n          return {\n            submit: false,\n            comment: {\n              content: '',\n              author: '',\n            }\n          }\n        },\n        methods: {\n          postComment() {\n            this.submit = true;\n            this.$store.dispatch('ADD_COMMENT', this.comment)\n              .then(response =\u003e {\n                this.submit = false;\n                if (response.data === 'ok')\n                  console.log('success')\n              }).catch(err =\u003e {\n              this.submit = false\n            })\n    \n          },\n        },\n        computed: {\n          isValid() {\n            return this.comment.content !== '' \u0026\u0026 this.comment.author !== ''\n          }\n        }\n      }\n    \u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n      .has-margin-top {\n        margin-top: 15px;\n      }\n    \n    \u003c/style\u003e\n```\n\nWe bind our `comment` data to our comment content and author name fields using the Vue.js `v-model` directive. We handled the form submission with the `postComment` function inside which we dispatch the `ADD_COMMENT` mutation with the comment data entered by the user. We also defined `isValid`  as a computed property that we use to disable the **submit** button if the two required fields are empty.\n\n\n\n## Finalize the app\n\nNow, let’s create our `comment.edge` file which contains our three Vue.js components. Run this command: `adonis make:view comment`  to create the file. Then paste this code inside: \n\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"/\u003e\n      \u003ctitle\u003eRealtime search with Adonis and Pusher\u003c/title\u003e\n      \u003cmeta name=\"csrf-token\" content=\"{{csrfToken}}\"\u003e\n    \n      \u003cmeta name=\"viewport\"\n            content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"\u003e\n    \n      \u003c!-- Bootstrap core CSS --\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css\"/\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.5.2/animate.min.css\"/\u003e\n    \n      \u003cstyle\u003e\n        html {\n          background: radial-gradient(ellipse at center, #fff 0, #ededfd 100%);\n        }\n    \n        #app {\n          width: 60%;\n          margin: 4rem auto;\n        }\n    \n        .container {\n          margin: 0 auto;\n          position: relative;\n          width: unset;\n        }\n    \n        .question-wrapper {\n          text-align: center;\n        }\n    \n        .has-shadow {\n          box-shadow: 0 4px 8px -2px rgba(0, 0, 0, 0.05) !important;\n        }\n    \n      \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \n    \n    \u003cdiv id=\"app\"\u003e\n    \n      \u003cdiv class=\"container\"\u003e\n    \n        \u003cdiv class=\"question-wrapper\"\u003e\n          \u003cimg width=\"200\" src=\"{{ assetsUrl('images/adonuxt.png') }}\" alt=\"\"\u003e\n          \u003ch5 class=\"is-size-2\" style=\"color: #220052;\"\u003e\n            What do you think about \u003cspan style=\"color: #47b784;\"\u003eAdonuxt\u003c/span\u003e?\u003c/h5\u003e\n          \u003cbr\u003e\n          \u003ca href=\"#commentForm\" class=\"button is-medium has-shadow has-text-white\" style=\"background-color: #47b784\"\u003eComment\u003c/a\u003e\n        \u003c/div\u003e\n    \n        \u003cbr\u003e\u003cbr\u003e\n        \u003ccomments\u003e\u003c/comments\u003e\n        \u003cnew-comment\u003e\u003c/new-comment\u003e\n      \u003c/div\u003e\n    \n    \u003c/div\u003e\n    {{ script('js/app.js') }}\n    \n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe are almost done! Now open your terminal and run `npm run asset-dev` to build your app. This can take a few seconds. After this step, run `adonis serve --dev` and open your browser to `localhost:3333`  to see your app working. Try posting a new comment! You should see your comment added in realtime 😎.\n\n![adonis-vue-commenting-demo-1](//images.ctfassets.net/1es3ne0caaid/5KpsGw6xwWAIOmAOCeYsgs/f52ccacc21092883578bbb356f24772d/adonis-vue-commenting-demo-1.gif)\n\n\n## Conclusion\n\nIn this tutorial, we have covered how to create a live commenting system using Adonis.js, Vue.js and Pusher. You can get the full source code [here](https://github.com/Ethiel97/comments-adonis-pusher). ","metaTitle":"Create a live commenting system with Adonis.js and Vue.js","metaDescription":"This short tutorial will show you how to create a live commenting system using Adonis.js and Vue.js. Users will be able to respond to blog posts, with their comments displaying in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3IvHAWX3848M8OU0kcQyWI","type":"Entry","createdAt":"2018-12-06T22:13:11.296Z","updatedAt":"2018-12-06T22:13:11.296Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Send push notifications to your browser from Adonis.js","url":"push-notifications-adonis","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/adonis-push-notifications","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2AjUjeRuA4oUAcYYI6ck6i","type":"Entry","createdAt":"2018-09-28T17:24:15.392Z","updatedAt":"2018-09-28T17:24:15.392Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Adonis.js","url":"adonis-js","type":"library","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2018-12-06","description":"In this tutorial, you will learn how to send push notifications from Adonis.js. You will create a simple web app using the Adonis framework, then integrate Pusher to support push notifications.","prerequisite":"You will need Node installed on your machine.","content":"## Introduction\n\nIn this tutorial, I will show how to send [push notifications](https://developer.mozilla.org/en-US/docs/Web/API/notification) to your browser from your backend. We’ll use Adonis.js as our Node.js framework, and we’ll push notifications from our Adonis app to our browser through Pusher channels.\n\nWeb push notifications are an instant means of direct communication between a website and its customers. They appear as clickable messages on web browsers in desktop and Android devices. This is the easiest way to gather more subscribers without collecting email IDs and contact details.\n\n\n## Demo\n\nHere is the final result of our app:\n\n![adonis-push-notifications-demo-1](//images.ctfassets.net/1es3ne0caaid/li1roXNUWGO6CWSuaAgA0/e262fda499c023564acf0717c52ee266/adonis-push-notifications-demo-1.gif)\n\n## Prerequisites\n\nIn order to follow this tutorial, knowledge of JavaScript and Node.js, more precisely Adonis.js is required. You should also have the following installed on your machine: \n\n- [Node.js](https://nodejs.org)\n- NPM(bundled with Node.js installer) or [Yarn](https://yarnpkg.com/)\n\n\n## Set up your Adonis project\n\nOpen your terminal and type this command to install Adonis CLI:\n\n```\n        # if you don't have Adonis CLI installed on your machine. \n        $ npm install -g @adonisjs/cli\n    \n        # Create a new adonis app and move into the app directory\n        $ adonis new adonis-push-notifications \u0026\u0026 cd adonis-push-notifications\n```\n\nStart the server and test if it's working:\n\n```\n        $ adonis serve --dev\n        2018-10-18T09:09:16.649Z - info: serving app on http://127.0.0.1:3333\n```\n\n![adonis-push-notifications-default](//images.ctfassets.net/1es3ne0caaid/37HYn8vXdmAwKuMYgeYioQ/83699f02e9831c5ead873eacf7f5174a/adonis-push-notifications-default.png)\n\n## Edit the welcome view\n\nGo to the `resources/views` directory and replace the content of `welcome.edge` file with:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"/\u003e\n      \u003ctitle\u003eHello Adonis\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"\u003e\n      \u003clink rel=\"stylesheet\"\n            href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta/css/bootstrap.min.css\"\u003e\n      {{ style('style') }}\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \n    \u003cdiv id=\"app\" class=\"container\" style=\"margin-top: 160px\"\u003e\n      \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-2\"\u003e\u003c/div\u003e\n        \u003cdiv class=\"col-md-8\"\u003e\n          \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-header\"\u003eBroadcast a Notification message\u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n              \u003cdiv class=\"container\"\u003e\n                \u003cdiv class=\"row justify-content-md-center\"\u003e\n                  \u003cdiv class=\"col col-md-10\"\u003e\n                    @if(old('status'))\n                    \u003cdiv class=\"alert alert-success\" role=\"alert\"\u003e\n                      \u003cbutton type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"\u003e\n                        \u003cspan aria-hidden=\"true\"\u003e×\u003c/span\u003e\n                      \u003c/button\u003e\n                      {{ old('status') }}\n                    \u003c/div\u003e\n                    @endif\n                    \u003cform method=\"POST\" action=\"{{ route('sendNotification') }}\"\u003e\n                      {{ csrfField() }}\n                      \u003cdiv class=\"form-group row\"\u003e\n                        \u003clabel class=\"col-md-3 col-form-label\"\u003e\n                        \n                          Notification Message\n                        \u003c/label\u003e\n                        \u003cdiv class=\"col-md-9\"\u003e\n                          \u003cinput type=\"text\" name=\"message\" placeholder=\"Send Notification\"\n                                 autocomplete=\"off\"\n                                 class=\"form-control\" required\u003e\n                        \u003c/div\u003e\n                      \u003c/div\u003e\n                      \u003cdiv class=\"form-group row\"\u003e\n                        \u003cdiv class=\"col-md-3\"\u003e\u003c/div\u003e\n                        \u003cdiv class=\"col-md-6\"\u003e\n                          \u003cbutton type=\"submit\" class=\"btn btn-primary btn-block\"\u003e\n                            \u003ci class=\"fa fa-btn fa-paper-plane\"\u003e\u003c/i\u003e Send Notification\n                          \u003c/button\u003e\n                        \u003c/div\u003e\n                      \u003c/div\u003e\n                    \u003c/form\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    \n    {{ script('https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.min.js') }}\n    {{ script('https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta/js/bootstrap.min.js') }}\n    \n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nAs you can see, we are importing the CSS files using the `css` method. We do a similar thing with JavaScript, we use `script` method to import `.js`. Flash messages are used to display incoming messages from the server. Flash messages are stored temporarily in sessions by the server to display as browser notifications.\n\nRefresh your browser:\n\n![adonis-push-notifications-demo-2](//images.ctfassets.net/1es3ne0caaid/5Zf8YDacjSMsOOUCooGkA4/e9f496aa8441eb669e079249fc5342ba/adonis-push-notifications-demo-2.png)\n\n## Install the Pusher SDK\n\nGo to [Pusher](https://www.pusher.com) and create an account or sign in if you already have an account.\n\nNext, create a new Pusher app instance. This registration provides credentials which can be used to communicate with the created Pusher instance. Copy the App ID, Key, Secret, and Cluster from the App Keys section and put them in the `.env` file located at you project root:\n\n```\n    //.env\n        PUSHER_APP_KEY=\u003cAPP_KEY\u003e\n        PUSHER_APP_SECRET=\u003cAPP_SECRET\u003e\n        PUSHER_APP_ID=\u003cAPP_ID\u003e\n        PUSHER_APP_CLUSTER=\u003cAPP_CLUSTER\u003e\n```\n\nWe’ll use these keys further in this tutorial to link Pusher with our Adonis project.\n\nNext, we need to install the Pusher SDK as well as other dependencies we need to build our app.\nWe won’t use the Pusher SDK directly but instead use [a Pusher provider for Adonis](https://github.com/Perafan18/adonis-pusher). This provider enables us to use the Pusher SDK easily with the Adonis.js ecosystem. We should first install the Pusher SDK by running this command:  \n\n```\n    #if you want to use npm\n    npm install pusher\n    \n    #or if you prefer Yarn\n    yarn add pusher\n```\n\nNow, you can install the Pusher provider for Adonis with this command:\n\n```\n    #if you want to use npm\n    npm install adonis-pusher\n    \n    #or if you prefer Yarn\n    yarn add adonis-pusher\n```\n\nYou will need to add the provider to AdonisJS at `start/app.js`:\n\n``` javascript\n    const providers = [\n        ...\n        'adonis-pusher/providers/Pusher'\n    ]\n```\n\n## Define routes and your controller\n\nIn order to make requests to our backend, we need to define our routes and a controller responsible for the logic our app should have.\n\nType this command in your terminal to create your controller: `adonis:make Notification` .\nOpen the `routes.js` file located at  `../start/routes.js` and replace the existing code with the following:\n\n``` javascript\n    const Route = use('Route')\n    const Event = use('Event')\n    \n    Route.on('/').render('welcome')\n    \n    Route.post('/sendNotification','NotificationController.sendNotification').as('sendNotification')\n```\n\nThe first two lines pull in the `Route` and `Event` providers for us. Next we tell our app to render the `welcome.edge` view to the `/` get request. And the last route accepts a message from the client and defines the `sendNotification` function (which we’ll create very soon) for handling the logic. \n\nNow, let’s create our `sendNotification` function we talked about earlier.  Paste this piece of code inside your `NotificationController` file:\n\n``` javascript\n    //../app/Controllers/Http/NotificationController.js\n    'use strict'\n    \n    const Event = use('Event');\n    \n    class NotificationController {\n    \n      async sendNotification({request, session, response}) {\n    \n        let message = request.input('message');\n    \n        Event.emit('send::notification', message)\n    \n        session.flash({status: 'Notification sent'})\n        return response.redirect('back')\n    \n      }\n    }\n    \n    module.exports = NotificationController\n```\n\nWe first pull in the `Event` service provider, then we accept a message from the client post request.\n\nLast we emit an event named `send::notification`  and redirect the user back with a flash message.\n\n\n## Connecting Adonis and Pusher\n\nCreate a filename `event.js` in the `start` directory. In this file we’ll create an event which will be fired every time we need to send a message via Pusher Channels, and as it happens a notification via Pusher Channels.\n\n``` javascript\n    //../start/events.js\n    const Event = use('Event')\n    const Env = use('Env')\n    const Pusher = use('Pusher')\n    \n    let pusher = new Pusher({\n      appId: Env.get('PUSHER_APP_ID'),\n      key: Env.get('PUSHER_APP_KEY'),\n      secret: Env.get('PUSHER_APP_SECRET'),\n      cluster: Env.get('PUSHER_APP_CLUSTER'),\n      encrypted: false\n    })\n    \n    //fire new event\n    Event.when('send::notification', async (message) =\u003e {\n      pusher.trigger('notification-channel', 'new-notification', {\n        message\n      })\n    })\n```\n\nWe need to pull in the `Event`, `Pusher` (using the adonis-pusher package we installed earlier) and `Env` service providers. \nNext, we registered a listener for the `send::notification` event, after which we initialized and configure Pusher. This event was registered in the `sendNotification` function we created above to handle notification post.\nWhen we are done with the pusher configuration, we trigger a `new-notification` event on the `notification-channel` with the `trigger` method.\n\n\n\n## Subscribing to Pusher Events and send notifications\n\nThe client needs to start listening to these events being emitted by Pusher. Go to the `resources/views` directory and update your `welcome.edge` by adding the following code:\n\n``` javascript\n    \u003c!-- Include the Pusher Client library --\u003e\n    {{ script('https://js.pusher.com/4.3/pusher.min.js') }}\n    \u003cscript\u003e\n    \n      //Open a connection to Pusher\n      let notify = ({message}) =\u003e {\n    \n        if (!(\"Notification\" in window)) {\n          alert(\"This browser does not support desktop notification\");\n        }\n    \n        Notification.requestPermission().then(function (result) {\n          if (result === 'granted') {\n            let notification = new Notification(message)\n          }\n        });\n      };\n    \n    \n      let pusher = new Pusher(YOUR_PUSHER_APP_ID, {\n        cluster: YOUR_PUSHER_CLUSTER,\n        encrypted: false\n      });\n    \n      //Subscribe to the channel we specified in our Adonis Application\n      let channel = pusher.subscribe('notification-channel');\n    \n      //Listen for events on the channel\n      channel.bind('new-notification', (data) =\u003e {\n        notify(data)\n      })\n    \n    \n    \u003c/script\u003e\n```\n\nFirst, we include the Pusher client library in order to use Pusher instance from our browser.\nAs you can see we also create a `notify` function. This function takes the message we intend to send as a push notification in parameter, checks if browser push notifications are supported by the browser and display a new notification to us.\n\nNext, we initialize the Pusher service by passing in our App Key (replace with your actual keys), and some other options (cluster, encrypted). The initialized instance is used to subscribe to the `notification-channel` channel.\nFinally, we listened to the `new-notification` event and send notifications with the `notify` function we created earlier.\n\n\n## Conclusion\n\nIn summary, we learned how we can use Pusher channels to send notifications from an Adonis.js backend. Events sent by Pusher channels are listened on the client side and displayed as a push notifications using [browser notifications web API](https://developer.mozilla.org/en-US/docs/Web/API/notification). You can find the full source code on GitHub [here](https://github.com/Ethiel97/adonis-push-notifications).","metaTitle":"Send push notifications to your browser from Adonis.js","metaDescription":"In this tutorial, you will learn how to send push notifications from Adonis.js. You will create a simple web app using the Adonis framework, then integrate Pusher to support push notifications."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6gqUU1EOdOK0cs02I4wiaK","type":"Entry","createdAt":"2018-12-06T21:59:51.712Z","updatedAt":"2018-12-06T21:59:51.712Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live activity feed with Angular 7","url":"live-feed-angular-7","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Khmrnzj5moO4S6WOYOGAo","type":"Entry","createdAt":"2018-11-14T14:35:55.702Z","updatedAt":"2019-03-03T15:15:59.601Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lanre Adelowo","url":"lanre-adelowo","email":"adelowomailbox@gmail.com","twitter":"https://twitter.com/alanreadelowo","github":"https://github.com/adelowo","guestWriter":true}}],"projectRepo":"https://github.com/adelowo/pusher-angular-realtime-feed","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-12-06","description":"Build a live activity feed, suitable for use with a blogging application or news site. Use Node for the backend, and Angular 7 to build the frontend. Users can add posts, and see the feed update in realtime.","prerequisite":"You will need Node 6+ and the Angular 7 CLI installed on your machine.","content":"In this article, we are going to show how you can add a realtime activity post feed to your website to keep users engaged without the need to resort to going somewhere else or forcing a browser refresh event often. It is an important feature of social media these days is a realtime feed as it offers increased engagement among its users. \n\nWe are going to build a system where a user will be presented with a form to add a new conversation. You can find the entire source code of the application [in this GitHub repository](https://github.com/adelowo/pusher-angular-realtime-feed).\n\nHere is a visual representation of what we will be building:\n\n![angular-7-feed-demo](//images.ctfassets.net/1es3ne0caaid/6TtmxBXHsQ08ygOuAAgiyy/efe476a613b9ef7ffba121c6a6a1bcf0/angular-7-feed-demo.gif)\n\n## Prerequisites\n\n- [Node.js](https://nodejs.org/en/) (v6 and above)\n- Angular ( v7 )\n- A Pusher Channels application. [Create one here.](https://pusher.com/channels)\n\n## Set up the server\n\nLet’s set up a simple Node server that will process the posts published by users of the website. While the server will perform validation to check for valid data and make sure not to allow duplications, its major job is to publish the post to Pusher Channels to enable realtime functionalities. \n\nThe first step is to create a directory to house the application. You should create a directory called `pusher-angular-realtime-feed`. In the newly created directory, you are to create another folder called `server` - this distinction will prove its worth when we are building the client in AngularJS.\n\nWe can go ahead to install the dependencies needed to build our application. Create a `package.json` file and paste in the following:\n\n``` json\n    // pusher-angular-realtime-feed/server/package.json\n    {\n      \"name\": \"pusher-activity-feed-api\",\n      \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\"\n      },\n      \"author\": \"\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.18.3\",\n        \"cors\": \"^2.8.5\",\n        \"dotenv\": \"^6.1.0\",\n        \"express\": \"^4.16.4\",\n        \"pusher\": \"^2.1.3\"\n      }\n    }\n```\n\nThe dependencies defined above need to be installed. To do that, run:\n\n\n```    \n    npm install\n```\n\nNow that we have our server dependencies installed, it is time to build the actual server itself.  But before that is done, we need to make our Pusher Channels credentials accessible to the application. To do that, we will create a `variable.env` file and input the credentials we got from the Pusher Channels dashboard in it:\n\n```\n    // pusher-angular-realtime-feed/server/variable.env\n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n    PUSHER_APP_SECURE=1\n```\n\nCreate an `index.js` file and paste the following code:\n\n``` javascript\n    // pusher-angular-realtime-feed/server/index.js\n    \n    const express = require('express');\n    const Pusher = require('pusher');\n    const cors = require('cors');\n    \n    require('dotenv').config({ path: 'variable.env' });\n    \n    const app = express();\n    const port = process.env.PORT || 3000;\n    \n    let pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      encrypted: process.env.PUSHER_APP_SECURE,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n    });\n    \n    app.use(cors());\n    app.use(express.json());\n    \n    app.get('/', function(req, res) {\n      res.status(200).send({ service: 'Pusher activity feed API' });\n    });\n    \n    // An in memory structure to prevent posts with duplicate titles\n    const titles = [];\n    \n    app.post('/submit', (req, res) =\u003e {\n      const title = req.body.title;\n      const body = req.body.body;\n    \n      if (title === undefined) {\n        res\n          .status(400)\n          .send({ message: 'Please provide your post title', status: false });\n        return;\n      }\n    \n      if (body === undefined) {\n        res\n          .status(400)\n          .send({ message: 'Please provide your post body', status: false });\n        return;\n      }\n    \n      if (title.length \u003c= 5) {\n        res.status(400).send({\n          message: 'Post title should be more than 5 characters',\n          status: false,\n        });\n        return;\n      }\n    \n      if (body.length \u003c= 6) {\n        res.status(400).send({\n          message: 'Post body should be more than 6 characters',\n          status: false,\n        });\n        return;\n      }\n    \n      const index = titles.findIndex(element =\u003e {\n        return element === title;\n      });\n    \n      if (index \u003e= 0) {\n        res\n          .status(400)\n          .send({ message: 'Post title already exists', status: false });\n        return;\n      }\n    \n      titles.push(title.trim());\n      pusher.trigger('realtime-feeds', 'posts', {\n        title: title.trim(),\n        body: body.trim(),\n        time: new Date(),\n      });\n    \n      res\n        .status(200)\n        .send({ message: 'Post was successfully created', status: true });\n    });\n    \n    app.listen(port, function() {\n      console.log(`API is running at ${port}`);\n    });\n```\n\nWhile the above code seems like a lot, here is a breakdown of what it does:\n\n\n- It loads your Pusher Channels credentials from the `variable.env` file we created earlier.\n- Creates two `HTTP` endpoints. One for the index page and the other  - `/submit` for validating and processing users’ posts.\n\n\n\u003e Please note that we are making use of an in-memory storage system hence posts that are created will not be persisted in a database. This tutorial is focused on the realtime functionalities. \n\nYou will need to run this server with the following command:\n\n```\n    node server/index.js\n```\n\n## Set up the Angular app\n\nWe will be making use of Angular 7 to create the website that interacts with the backend server we have created earlier. Angular apps are usually created with a command-line tool called `ng`. If you don’t have that installed, you will need to run the following command in your terminal to fetch it:\n\n```\n    npm install -g @angular/cli\n```\n\nOnce the installation of the `ng` tool is finished, you can then go ahead to set up our Angular application.  To do that, you will need to run the command below in the root directory of the project - in this case, `pusher-angular-realtime-feed`:\n\n```\n     ng new client\n```\n\n\u003e You will need to select **yes** when asked to use routing. You will also need to select `CSS` when asked for a stylesheet format\n\n\nThis command will create a new folder called `client` in the root of your project directory, and install all the dependencies needed to build and run the Angular application.\n\nNext, we will `cd`  into the newly created directory and install the client SDK for Pusher Channels, which we’ll be needing to implement realtime features for our application’s frontend:\n\n```\n    npm install pusher-js\n```\n\nNow that we have all dependencies installed, it is time to actually build it. The application will consist of three pages:\n\n\n- The dashboard page located at `/dashboard`\n- A page to create/add a new post. This would be located at `/new`\n- A page to display the created posts in realtime. This would be located at `/feed`\n\nEach one of the pages are components, so we will need to create them. The `ng` tool we installed earlier includes a generate command that would help us with the entire job. To generate them, you need to run the following commands in a terminal window:\n\n\n```\n    ng generate component FeedForm\n    ng generate component dashboard\n    ng generate component page-not-found\n    ng generate component Feed\n```\n\nWe will need to build the dashboard page first of all as it will be the landing page. We  will update it to include some relevant links to other pages of the application plus a Pusher Channels logo somewhere:\n\n``` html\n    // pusher-angular-realtime-feed-api/client/src/app/dashboard/dashboard.component.html\n    \n    \u003cdiv style=\"text-align:center\"\u003e\n      \u003ch1\u003eWelcome to {{ title }}!\u003c/h1\u003e\n      \u003cimg\n        width=\"300\"\n        alt=\"Pusher Logo\"\n        src=\"https://djmmlc8gcwtqv.cloudfront.net/imgs/channels/channels-fold.png\"\n      /\u003e\n    \u003c/div\u003e\n    \u003cdiv style=\"text-align:center\"\u003e\n      \u003ch2\u003eHere are some links to help you start:\u003c/h2\u003e\n    \n      \u003cnav\u003e\n        \u003ca routerLink=\"/new\" routerLinkActive=\"active\"\u003eCreate new Post\u003c/a\u003e \u003cbr /\u003e\n        \u003cbr /\u003e\n        \u003ca routerLink=\"/feed\" routerLinkActive=\"active\"\u003eView realtime feed\u003c/a\u003e\n      \u003c/nav\u003e\n    \u003c/div\u003e\n```\n\nSince dashboards are supposed to look good enough to make the user want to explore more, we will make use of [Bulma](https://bulma.io). We need to include it in the `index.html` page Angular loads every time our site is visited:\n\n``` html\n    // pusher-angular-realtime-feed-api/client/src/index.html\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003ePusher realtime feed\u003c/title\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /\u003e\n        \u003clink rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\" /\u003e\n        \u003cbase href=\"/\" /\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.2/css/bulma.min.css\"\u003e\n      \u003cbody\u003e\n          \u003csection class=\"section\"\u003e\n              \u003cdiv class=\"container\"\u003e\n                \u003capp-root\u003e\u003c/app-root\u003e\n              \u003c/div\u003e\n           \u003c/section\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNow that we have our dashboard page, we will go ahead to create the page where users will be able to create a new post:\n\n``` html\n    // pusher-angular-realtime-feed-api/client/src/app/feed-form/feed-form.component.html\n    \u003cdiv class=\"columns\"\u003e\n      \u003cdiv class=\"column is-5\"\u003e\n        \u003ch3 class=\"notification\"\u003eCreate a new post\u003c/h3\u003e\n        \u003cdiv *ngIf=\"infoMsg\" class=\"notification is-success\"\u003e{{ infoMsg }}\u003c/div\u003e\n        \u003cdiv *ngIf=\"errorMsg\" class=\"is-danger notification\"\u003e{{ errorMsg }}\u003c/div\u003e\n        \u003cform\u003e\n          \u003cdiv class=\"field\"\u003e\n            \u003clabel class=\"label\"\u003eTitle : \u003c/label\u003e\n            \u003cdiv class=\"control\"\u003e\n              \u003cinput\n                class=\"input\"\n                type=\"text\"\n                placeholder=\"Post title\"\n                name=\"title\"\n                [(ngModel)]=\"title\"\n              /\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n    \n          \u003cdiv\u003e\u003clabel\u003eMessage: \u003c/label\u003e\u003c/div\u003e\n          \u003cdiv\u003e\n            \u003ctextarea\n              [(ngModel)]=\"content\"\n              rows=\"10\"\n              cols=\"70\"\n              [disabled]=\"isSending\"\n              name=\"content\"\n            \u003e\u003c/textarea\u003e\n          \u003c/div\u003e\n        \u003c/form\u003e\n      \u003c/div\u003e\n    \n      \u003cdiv class=\"is-7\"\u003e\u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cbutton (click)=\"submit()\" class=\"button is-info\" [disabled]=\"isSending\"\u003e\n      Send\n    \u003c/button\u003e\n```\n\nThe form we have created above obviously needs to be processed and sent to the backend server we have created earlier. To do that, we need to update the `feed-form.component.ts` file with the following content:\n\n``` javascript\n    // pusher-angular-realtime-feed-api/client/src/app/feed-form/feed-form.component.ts\n    import { Component, OnInit, Injectable } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n    \n    @Component({\n      selector: 'app-feed-form',\n      templateUrl: './feed-form.component.html',\n      styleUrls: ['./feed-form.component.css'],\n    })\n    export class FeedFormComponent implements OnInit {\n      private isSending: boolean;\n      private httpClient: HttpClient;\n    \n      public content: string;\n      public errorMsg: string;\n      public infoMsg: string;\n      public title: string;\n    \n      constructor(private http: HttpClient) {\n        this.httpClient = http;\n      }\n    \n      submit() {\n        this.errorMsg = '';\n        this.isSending = true;\n        this.infoMsg = 'Processing your request.. Wait a minute';\n    \n        this.http\n          .post('http://localhost:3000/submit', {\n            title: this.title,\n            body: this.content,\n          })\n          .toPromise()\n          .then((data: { message: string; status: boolean }) =\u003e {\n            this.infoMsg = data.message;\n            setTimeout(() =\u003e {\n              this.infoMsg = '';\n            }, 1000);\n    \n            this.isSending = false;\n            this.content = '';\n            this.title = '';\n          })\n          .catch(error =\u003e {\n            this.infoMsg = '';\n            this.errorMsg = error.error.message;\n    \n            this.isSending = false;\n          });\n      }\n    \n      ngOnInit() {}\n    }\n```\n\nThe `submit` method is the most interesting in the above snippet as it is responsible for sending the request to the backend and sending instructions to update the UI as needed - `infoMsg` and `errorMsg`. \n\nWhile we now have the dashboard and the post creation page, we still have no way to view the posts in realtime. We need to create the `feed` page to complete this task.\n\n``` html\n    // pusher-angular-realtime-feed-api/client/src/app/feed/feed.component.html\n    \u003ch1 class=\"notification is-info\"\u003eYour feed\u003c/h1\u003e\n    \u003cdiv class=\"columns\"\u003e\n      \u003cdiv class=\"column is-7\"\u003e\n        \u003cdiv *ngFor=\"let feed of feeds\"\u003e\n          \u003cdiv class=\"box\"\u003e\n            \u003carticle class=\"media\"\u003e\n              \u003cdiv class=\"media-left\"\u003e\n                \u003cfigure class=\"image is-64x64\"\u003e\n                  \u003cimg\n                    src=\"https://bulma.io/images/placeholders/128x128.png\"\n                    alt=\"Image\"\n                  /\u003e\n                \u003c/figure\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"media-content\"\u003e\n                \u003cdiv class=\"content\"\u003e\n                  \u003cp\u003e\n                    \u003cstrong\u003e{{ feed.title }}\u003c/strong\u003e\n                    \u003csmall\u003e{{ feed.createdAt }}\u003c/small\u003e \u003cbr /\u003e\n                    {{ feed.content }}\n                  \u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/article\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nIf you take a proper look at the template above, you will notice that we have a section with the following content, `\u003cdiv *ngFor=\"let feed of feeds\"\u003e` . This implies a for-loop of all feeds and displaying them in the UI. The next step is to generate those feeds. We will be making use of a concept called *services* in Angular. \n\nWe need to create a `Feed` service that will be responsible for fetching realtime posts from Pusher Channels and feeding them to our template. You can create the service by running the command below:\n\n```\n    ng generate service Feed\n    ng generate class Feed\n```\n\nYou will need to edit both files with the following contents:\n\n``` javascript\n    // pusher-angular-realtime-feed/client/src/app/feed.ts\n    export class Feed {\n      constructor(\n        public title: string,\n        public content: string,\n        public createdAt: Date\n      ) {\n        this.title = title;\n        this.content = content;\n        this.createdAt = createdAt;\n      }\n    }\n```\n\n\n``` javascript    \n    // pusher-angular-realtime-feed/client/src/app/feed.service.ts\n    \n    import { Injectable } from '@angular/core';\n    import { Subject, Observable } from 'rxjs';\n    import { Feed } from './feed';\n    import Pusher from 'pusher-js';\n    \n    @Injectable({\n      providedIn: 'root',\n    })\n    export class FeedService {\n      private subject: Subject\u003cFeed\u003e = new Subject\u003cFeed\u003e();\n    \n      private pusherClient: Pusher;\n    \n      constructor() {\n        this.pusherClient = new Pusher('YOUR KEY HERE', { cluster: 'CLUSTER' });\n    \n        const channel = this.pusherClient.subscribe('realtime-feeds');\n    \n        channel.bind(\n          'posts',\n          (data: { title: string; body: string; time: string }) =\u003e {\n            this.subject.next(new Feed(data.title, data.body, new Date(data.time)));\n          }\n        );\n      }\n      \n      getFeedItems(): Observable\u003cFeed\u003e {\n        return this.subject.asObservable();\n      }\n    }\n```\n\n\u003e Kindly remember to add your credentials else this would not work as expected.\n\nIn `feed.service.ts`, we have created an observable we can keep on monitoring somewhere else in the application. We also subscribe to the `realtime-feeds` channel and `posts` event after which we provide a callback that adds a new entry to our observable.\n\nThe next step is to wire up the `FeedService` to the `feed.component.html` we saw above and provide it the `feeds` variable. To do that, we will need to update the `feed.component.ts` file with the following:\n\n``` javascript\n    // pusher-angular-realtime-feed-api/client/src/app/feed/feed.component.ts\n    import { Component, OnInit, OnDestroy } from '@angular/core';\n    import { FeedService } from '../feed.service';\n    import { Feed } from '../feed';\n    import { Subscription } from 'rxjs';\n    \n    @Component({\n      selector: 'app-feed',\n      templateUrl: './feed.component.html',\n      styleUrls: ['./feed.component.css'],\n      providers: [FeedService],\n    })\n    export class FeedComponent implements OnInit, OnDestroy {\n      public feeds: Feed[] = [];\n    \n      private feedSubscription: Subscription;\n    \n      constructor(private feedService: FeedService) {\n        this.feedSubscription = feedService\n          .getFeedItems()\n          .subscribe((feed: Feed) =\u003e {\n            this.feeds.push(feed);\n          });\n      }\n    \n      ngOnInit() {}\n    \n      ngOnDestroy() {\n        this.feedSubscription.unsubscribe();\n      }\n    }\n```\n\nIn the above, we take a dependency on `FeedService` and subscribe to an observable it provides us with it’s `getFeedItems` method. Every single time a new `Feed` item is *resolved* from the subscription, we add it to the list of feeds we already have. \n\nAnd finally, we implemented an Angular lifecycle method, `ngOnDestroy` where we unsubscribe from the observable. This is needed so as to prevent against a potential memory leak and `ngOnDestroy` just seems to be the perfect place to perform some clean up operations as can be [seen in the documentation](https://angular.io/guide/lifecycle-hooks#ondestroy).\n\nWhile we are almost done, we will need to create those endpoints we talked about earlier and also configure the routing for the application. We need to update the `app.module.ts` file to contain the following code:\n\n``` javascript\n    // pusher-angular-realtime-feed/client/src/app/app.module.ts\n    \n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule } from '@angular/core';\n    import { FormsModule } from '@angular/forms';\n    import { RouterModule, Routes } from '@angular/router';\n    import { HttpClientModule } from '@angular/common/http';\n    \n    import { AppRoutingModule } from './app-routing.module';\n    import { AppComponent } from './app.component';\n    import { FeedFormComponent } from './feed-form/feed-form.component';\n    import { PageNotFoundComponent } from './page-not-found/page-not-found.component';\n    import { DashboardComponent } from './dashboard/dashboard.component';\n    import { FeedComponent } from './feed/feed.component';\n    \n    const appRoutes: Routes = [\n      { path: 'new', component: FeedFormComponent },\n      {\n        path: 'feed',\n        component: FeedComponent,\n      },\n      {\n        path: '',\n        redirectTo: '/dashboard',\n        pathMatch: 'full',\n      },\n      { path: 'dashboard', component: DashboardComponent },\n      { path: '**', component: PageNotFoundComponent },\n    ];\n    \n    @NgModule({\n      declarations: [\n        AppComponent,\n        FeedFormComponent,\n        PageNotFoundComponent,\n        DashboardComponent,\n        FeedComponent,\n      ],\n      imports: [\n        RouterModule.forRoot(\n          appRoutes,\n          { enableTracing: true } \n        ),\n        BrowserModule,\n        HttpClientModule,\n        AppRoutingModule,\n        FormsModule,\n      ],\n      exports: [RouterModule],\n    \n      bootstrap: [AppComponent],\n    })\n    export class AppModule {}\n    \n```\nAs a final step, make sure to edit `app.component.html` to inlcude only the following line:\n\n```\n    // pusher-angular-realtime-feed/client/src/app/app.component.html\n    \u003crouter-outlet\u003e\u003c/router-outlet\u003e\n```\n\n\u003e You should delete whatever else is in the file\n\nWith that done, it is time to see our app in action. That can done by issuing the following commands:\n\n\n```\n    cd client\n    ng serve\n```\n\nThe application will be visible at https://localhost:4200.  \n\n## Conclusion\n\nIn this tutorial, you have learned how to build an activity feed with Angular 7 and how to set up Pusher Channels for adding realtime functionality to the feed. \n\nThanks for reading! Remember that you can find the source code of this app [in this GitHub repository.](https://github.com/adelowo/pusher-angular-realtime-feed)","metaTitle":"Build a live activity feed with Angular 7","metaDescription":"Build a live activity feed, suitable for use with a blogging application or news site. Use Node for the backend, and Angular 7 to build the frontend. Users can add posts, and see the feed update in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39sm03YEbuOmqucCw6Qk42","type":"Entry","createdAt":"2018-12-04T20:59:40.666Z","updatedAt":"2020-06-19T13:26:52.630Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Building a social app with online presence using Ionic","url":"social-online-presence-ionic","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qeLNtkOw0ImAS2QcUcKcG","type":"Entry","createdAt":"2018-06-15T10:54:43.491Z","updatedAt":"2019-05-17T10:50:18.109Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Oreoluwa Ogundipe","url":"oreoluwa-ogundipe","email":"oreogundipe@gmail.com","twitter":"https://twitter.com/ogundipeore","github":"https://github.com/orehga","guestWriter":true}}],"projectRepo":"https://github.com/oreHGA/ionic-twitter-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-12-04","description":"This tutorial will show you how to create a simple social feed for Android and iOS using Ionic. The app features a Node backend, and online presence indicators powered by Pusher.","prerequisite":"You will need Node and Ionic installed on your machine. A basic knowledge of modern JavaScript development will be helpful.","content":"In this tutorial, we are going to explore how to build a simple social application using Ionic and Pusher. [Ionic](https://ionicframework.com) will be used to create the mobile demo and [Pusher](http://www.pusher.com) Channels to add online functionality. At the end of this tutorial, you will have built an application that looks like this:\n\n![ionic-presence-demo-1](//images.ctfassets.net/1es3ne0caaid/4OKTHp8v4IAu6Ywo8uAigy/a899870614f492408bff0e0bf4d60d55/ionic-presence-demo-1.png)\n\nA while back on Twitter, the official Twitter handle teased their followers with a sample of an interesting idea they were exploring. They were exploring the possibility of letting you know who on your Twitter feed is online. This is something very different and it got a lot of mixed reactions because we know Twitter for for likes and retweets but not “online five minutes ago”. In other messaging applications we use, it is important to know if who you’re interacting with is online. As a developer, you are likely curious about how this all works.\n\n## Requirements\n\nTo be follow through this article properly, you’ll need the following:\n\n- Basic knowledge of JavaScript\n- [Ionic](https://ionicframework.com) installed on your machine, you can read up on how to do that [here](https://ionicframework.com/docs/intro/installation/)\n- [Node.js](https://nodejs.org) installed on your machine\n- [NPM](https://npmjs.org) installed on your machine\n\n\n## Getting started\n\nTo get started, create a new ionic application using the command:\n\n```\n    ionic start twi-clone blank\n```\n\nThis creates a starter ionic project in a folder titled `twi-clone`. To see the demo application at work, go to your terminal and run the command:\n\n```\n    cd twi-clone\n    ionic serve\n```\n\nThis serves the Ionic application. Navigate your browser to  `http://locahost:8100` and you should get a view that looks like this:\n\n![ionic-default](//images.ctfassets.net/1es3ne0caaid/qQv7V1UOEou4OOS6y8GIg/8e28ae0fc41a2af1a00a650fa41cec16/ionic-default.png)\n\n\n## Building the backend server\n\nThe backend server of our application will be responsible for doing the following:\n\n- Sharing users’ posts\n- Authenticating new users on the presence channel\n\nCreate a `/server` folder in your project:\n\n```\n    mkdir server\n    cd server\n```\n\nInstall the Node modules that we will need to power the backend server:\n\n```\n    npm install express body-parser pusher\n```\n\n- `express` will power the web server\n- `body-parser` to handle incoming requests\n- `pusher` to add realtime functionality and online presence\n\nAfterwards, create a `server.js` file in the `server/` directory:\n\n```\n    touch server.js\n```\n\nEdit the `server.js` file to look as follows:\n\n``` javascript\n    // server/server.js\n    \n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const Pusher = require('pusher');\n    \n    // create a express application\n    const app = express();\n    \n    // initialize pusher\n    let pusher = new Pusher({\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    // to Allow CORS\n    app.use((req, res, next) =\u003e {\n        res.header('Access-Control-Allow-Origin', '*');\n        res.header(\n            'Access-Control-Allow-Headers',\n            'Origin, X-Requested-With, Content-Type, Accept'\n        );\n        next();\n    });\n    \n    [...]\n```\n\nWe include the necessary JavaScript libraries and then create a new Pusher object using your Pusher application credentials.\n\n\n\u003e To obtain your Pusher credentials, create a new account [here](https://dashboard.pusher.com/accounts/sign_up). Afterwards, you’ll be redirected to your [Pusher dashboard](https://dashboard.pusher.com). Go ahead and create a new project, obtain your `PUSHER_APP_ID`, `PUSHER_APP_KEY`, `PUSHER_APP_SECRET`, `PUSHER_APP_CLUSTER` and add them to your `server.js` file.\n\nAfterwards, we specify some application middleware to handle incoming requests. The backend server will have two routes:\n\n- `/pusher/auth` - will be used to authenticate users joining the presence channel\n- `/create-post` - will be used when a new post is created.\n\nWith Pusher, when a new client tries to join a presence channel, a `POST` request is first made to authenticate the new client. In this case, a random string is created to identify the client and this makes up the `presenceData` object. The `presenceData` , `channel` and `socketId` are then passed to Pusher to authenticate the client.\n\nThe `/create-post` route accepts the incoming data and then triggers a `new-post` event to the `presence-channel`.\n\n\n\u003e In later parts of the article, we will see how the channel is created in our Ionic application\n\nAdd the code below to your `server/server.js` file:\n\n``` javascript\n    // server/server.js\n    [...]\n    \n    app.post('/pusher/auth', (req, res) =\u003e {\n        let socketId = req.body.socket_id;\n        let channel = req.body.channel_name;\n        random_string = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n        let presenceData = {\n            user_id: random_string,\n            user_info: {\n                username: '@' + random_string,\n            }\n        };\n        let auth = pusher.authenticate(socketId, channel, presenceData);\n        res.send(auth);\n    });\n    \n    app.post('/create-post', (req, res) =\u003e {\n        // trigger a new post event via pusher\n        pusher.trigger('presence-channel', 'new-post', {\n            'username': req.body.username,\n            'content': req.body.content\n        })\n        res.json({ 'status': 200 });\n    });\n    \n    let port = 3128;\n    app.listen(port);\n    console.log('listening');\n```\n\nNow that the backend server is created, you can run it by entering the command:\n\n```\n    node server.js\n```\n\nNow, let’s look at how to build the rest of the application.\n\n\n## Creating the interface\n\n![ionic-presence-interface](//images.ctfassets.net/1es3ne0caaid/4EICjygAsgii0kAm00Gwuy/9a97402d9d40017edb4e56f9979cb9df/ionic-presence-interface.png)\n\nThe starter application created a default homepage which we will then update to fit our particular use case. Update your `home.html` file to look like this: \n\n``` html\n    \u003c!-- src/pages/home/home.html --\u003e\n    \n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title style=\"text-align: center\"\u003e\n          Let's Go Social\n        \u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \n    \u003cion-content padding\u003e\n      \u003cform (ngSubmit)=\"submitPost()\"\u003e\n        \u003cdiv class=\"compose-post-area\"\u003e\n          \u003cion-textarea class=\"post-compose\" placeholder=\"Post something....\" [(ngModel)]=\"post.content\" name=\"content\"\u003e\u003c/ion-textarea\u003e\n          \u003cbutton ion-button round class=\"tweet-post\" type=\"submit\"\u003ePOST\u003c/button\u003e\n        \u003c/div\u003e\n      \u003c/form\u003e\n      \u003cdiv\u003e\n        \u003cion-card\u003e\n          \u003cion-item\u003e\n            \u003ch3\u003eHi \u003ci\u003e@{{ current_user }}\u003c/i\u003e \u003c/h3\u003e\n            \u003ch3\u003eFriends Online: {{ get_users_online() }}\u003c/h3\u003e\n          \u003c/ion-item\u003e\n        \u003c/ion-card\u003e\n    \n        \u003cdiv *ngFor=\"let post of post_list\"\u003e\n          \u003cion-card\u003e\n            \u003cion-item\u003e\n              \u003cion-avatar item-start\u003e\n                \u003cimg src=\"https://api.adorable.io/avatars/100/avatar.png\" alt=\"\"\u003e\n              \u003c/ion-avatar\u003e\n              \u003cp\u003e@{{ post.username }} \u003ci\u003e{{ isOnline(post.username) }} \u003c/i\u003e\u003c/p\u003e\n            \u003c/ion-item\u003e\n    \n            \u003cion-card-content\u003e\n              \u003cp\u003e{{ post.content }}\u003c/p\u003e\n            \u003c/ion-card-content\u003e\n    \n            \u003cion-row\u003e\n              \u003cion-col\u003e\n                \u003cbutton ion-button ion-start clear small\u003e\n                  \u003cion-icon name=\"repeat\"\u003e\u003c/ion-icon\u003e\n                  \u003cdiv\u003e\u0026nbsp;932 reposts\u003c/div\u003e\n                \u003c/button\u003e\n              \u003c/ion-col\u003e\n              \u003cion-col\u003e\n                \u003cbutton ion-button ion-start clear small color=\"danger\"\u003e\n                  \u003cion-icon name=\"heart\"\u003e\u003c/ion-icon\u003e\n                  \u003cdiv\u003e\u0026nbsp;12k likes\u003c/div\u003e\n                \u003c/button\u003e\n              \u003c/ion-col\u003e\n            \u003c/ion-row\u003e\n          \u003c/ion-card\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/ion-content\u003e\n```\n\nThe page also has the following styling:\n\n``` scss\n    # src/page/home/home.scss\n    \n    .compose-post-area{\n        display: flex;\n        align-items: center;\n    }\n    \n    ion-content{\n        background-color: #FAFAFA;\n    }\n```\n\nWe have seen the interface of the application. To add any functionality to our application, we need to edit the `home.ts` file to look like this:\n\n``` javascript\n    // src/app/pages/home/home.ts\n    \n    import { Component } from '@angular/core';\n    import { NavController, AlertController } from 'ionic-angular';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html'\n    })\n    export class HomePage {\n      // this will represent a new post by a user\n      post: any = {};\n      // this will represent your default pusher presence channel\n      presence_channel: any;\n      // this will represent the username of the current user\n      current_user;\n      // this will online a list of users online\n      users_online = {};\n      // list of default posts\n      post_list = [\n        {\n          'username': 'og',\n          'content': 'Making money was the plan oooo'\n        },\n        {\n          'username': 'daddywon',\n          'content': 'You can catch me on the express'\n        }\n      ];\n      \n      constructor(public navCtrl: NavController) {\n        [...]\n      }\n     \n    [...]\n    \n    }\n```\n\nWe can see that the home page component contains the variables that were referenced in the homepage template.\n\n### Creating the Pusher service\n\nTo know the number of friends online and when someone who shares a post is online, let’s make use of Presence Channels by Pusher. To use Pusher in our Ionic application, we need to install the library using the command:\n\n```\n    npm install pusher-js\n```\n\nNow, let’s create a simple Pusher provider. To do this, head over to your terminal and run the command:\n\n```\n    ionic generate provider pusher-service\n```\n\nNow, a `pusher-service` provider has been created. In the `pusher-service.ts` create a new Pusher object in the constructor by specifying the `PUSHER_APP_KEY`, `PUSHER_APP_CLUSTER` and the `authEndpoint` created on our backend server earlier in the article. \n\nAfterwards, subscribe to the `presence-channel` . The `init()` function is then responsible for returning the created presence channel which is to be used in our `home.ts` file. Update your `pusher-service.ts` to look like this:\n\n``` javascript\n    // src/providers/pusher-service/pusher-service.ts\n    \n    import { HttpClient } from '@angular/common/http';\n    import { Injectable } from '@angular/core';\n    import Pusher from 'pusher-js';\n    \n    @Injectable()\n    export class PusherServiceProvider {\n      presenceChannel;\n    \n      constructor(public http: HttpClient) {\n        let pusher = new Pusher('PUSHER_APP_KEY', {\n          authEndpoint: 'http://localhost:3128/pusher/auth',\n          cluster: 'PUSHER_APP_CLUSTER'\n        });\n    \n        this.presenceChannel = pusher.subscribe('presence-channel');\n      }\n    \n      public init() {\n        return this.presenceChannel;\n      }\n    }\n```\n\nUpdate your `app.module.ts` to ensure that the Pusher provider and the HttpClientModule are loaded:\n\n``` javascript\n    // src/app/app.module.ts\n    \n    import { BrowserModule } from '@angular/platform-browser';\n    import { ErrorHandler, NgModule } from '@angular/core';\n    import { IonicApp, IonicErrorHandler, IonicModule } from 'ionic-angular';\n    import { SplashScreen } from '@ionic-native/splash-screen';\n    import { StatusBar } from '@ionic-native/status-bar';\n    \n    import { MyApp } from './app.component';\n    import { HomePage } from '../pages/home/home';\n    import { PusherServiceProvider } from '../providers/pusher-service/pusher-service';\n    import { HttpClientModule } from '@angular/common/http';\n    \n    @NgModule({\n      declarations: [\n        MyApp,\n        HomePage\n      ],\n      imports: [\n        BrowserModule,\n        HttpClientModule,\n        IonicModule.forRoot(MyApp)\n      ],\n      bootstrap: [IonicApp],\n      entryComponents: [\n        MyApp,\n        HomePage\n      ],\n      providers: [\n        StatusBar,\n        SplashScreen,\n        { provide: ErrorHandler, useClass: IonicErrorHandler },\n        PusherServiceProvider\n      ]\n    })\n    export class AppModule { }\n```\n\nNow, let’s go back to the home page component. \n\n## Adding realtime functionality and online presence with Pusher\n\nWe are going to update the `home.ts` file to allow users know when other users are online. We first get the Pusher Channel using the Pusher provider we created earlier and then listen for the `pusher:subscription_succeeded` event. Once the client has successfully subscribed to the `presence-channel`, a `members` object is returned that contains information about the people subscribed to the `presence-channel`.\n\nWe also listen for a `new-post` event on the `presence-channel`. When a `new-post` event is triggered, the `post_list` is then updated to contain the new post. At this point, your `home.ts` should look like this:\n\n``` javascript\n    // src/pages/home/home.ts\n    import { Component } from '@angular/core';\n    import { NavController, AlertController } from 'ionic-angular';\n    import { PusherServiceProvider } from '../../providers/pusher-service/pusher-service';\n    import { HttpClient } from '@angular/common/http';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html'\n    })\n    export class HomePage {\n      // this will represent a new post by a user\n      post: any = {};\n      // this will represent your default pusher presence channel\n      presence_channel: any;\n      // this will represent the username of the current user\n      current_user;\n      // this will online a list of users online\n      users_online = {\n      };\n      // list of default posts\n      post_list = [\n        {\n          'username': 'og',\n          'content': 'Making money was the plan oooo'\n        },\n        {\n          'username': 'daddywon',\n          'content': 'You can catch me on the express'\n        }\n      ];\n    \n      constructor(public navCtrl: NavController, private pusher: PusherServiceProvider, private http: HttpClient, public alertCtrl: AlertController) {\n        let self = this\n        this.presence_channel = this.pusher.init();\n        // update the list of users online\n        this.presence_channel.bind('pusher:subscription_succeeded', function (members) {\n          console.log(members);\n          self.users_online = members.members;\n          self.current_user = members.myID;\n        })\n    \n        this.presence_channel.bind('new-post', function (body) {\n          self.post_list.unshift(body);\n        })\n      }\n    \n      [...]\n    }\n```\n\nFinally, we have three other methods in the component:\n\n- `get_users_online()` which returns the number of users that are currently online\n- `isOnline()` that checks if a particular user is currently online\n- `submitPost()` that submits a post by a user\n\nAdd the methods to your `home.ts` file:\n\n``` javascript\n    // src/pages/home/home.ts\n    \n      [...]\n      \n      get_users_online() {\n        return Object.keys(this.users_online).length - 1;\n      }\n      \n      isOnline(username: string) {\n        if (username in this.users_online) {\n          return 'online'\n        } else {\n          return 'offline'\n        }\n      }\n    \n      submitPost() {\n        let self = this;\n        // make a post request to the server\n        let body = {\n          'username': this.current_user,\n          'content': this.post.content\n        }\n    \n        const alert = this.alertCtrl.create({\n          title: 'Post Shared!',\n          subTitle: `Users online to see your post: ${self.get_users_online()}`,\n          buttons: ['OK']\n        });\n    \n        // submit post to the backend server to trigger pusher event\n        this.http.post('http://localhost:3128/create-post', body).subscribe(() =\u003e {\n          alert.present();\n        });\n      }\n    }\n```\n\nRecall in the `home.html` interface, we had the following form:\n\n``` html\n    \u003cform (ngSubmit)=\"submitPost()\"\u003e\n      \u003cdiv class=\"compose-post-area\"\u003e\n        \u003cion-textarea class=\"post-compose\" placeholder=\"Post something....\" [(ngModel)]=\"post.content\" name=\"content\"\u003e\u003c/ion-textarea\u003e\n        \u003cbutton ion-button round class=\"tweet-post\" type=\"submit\"\u003ePOST\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/form\u003e\n```\n\nWhen the `POST` button is clicked, the `submitPost()` function is called and the post content and username of the current user are sent to the `/create-post` of the backend server which then triggers the `new-post` event on the `presence-channel` and the `post_list` is updated accordingly.\n\nTo see it all at work, serve your Ionic application using the command:\n\n```\n    npm start  # or ionic serve\n```\n\n\u003e Ensure your backend server is on.\n\nNavigate on your browser to `http://localhost:8100` and you should get an experience that looks like this:\n\n![ionic-presence-demo-2](//images.ctfassets.net/1es3ne0caaid/1x0M3f2oWAw6qo0KI28q28/178a215890d22676babe4fad7b610651/ionic-presence-demo-2.gif)\n\n## Testing your Ionic application on a mobile device\n\nIf you’re building with Ionic, you generally don’t intend to have your application on your browser. Rather, you’d want to have it running on mobile devices. Before you do that, you should serve the backend of your application on a tunnel using [ngrok](https://ngrok.io).  Head over [here](https://ngrok.com/download) and follow the download instructions for your platform.\n\nAfter you’ve had it installed, tunnel your backend server using the command:\n\n```\n    ngrok http 3128\n```\n\nYou should get a view that looks like this:\n\n```\n    ngrok by @inconshreveable                                                                                                                                                                                                    (Ctrl+C to quit)\n    \n    Session Status                online\n    Session Expires               7 hours, 59 minutes\n    Version                       2.2.8\n    Region                        United States (us)\n    Web Interface                 http://127.0.0.1:4040\n    Forwarding                    http://b3b88c11.ngrok.io -\u003e localhost:3128\n    Forwarding                    https://b3b88c11.ngrok.io -\u003e localhost:3128\n    \n    Connections                   ttl     opn     rt1     rt5     p50     p90\n                                  0       0       0.00    0.00    0.00    0.00\n                                \n```\n\nThis means that you can now access your backend server using the public URL → `https://b3b88c11.ngrok.io`\n\nUpdate the `authEndpoint` of your `pusher-service.ts` to use the new public URL:\n\n``` javascript\n    // src/providers/pusher-service/pusher-service.ts\n    [...]\n       let pusher = new Pusher('9effdb6e1245bda33b17', {\n          authEndpoint: 'https://b3b88c11.ngrok.io/pusher/auth',\n          cluster: 'mt1'\n        });\n    [...]\n```\n\nAlso update the POST request in the `submitPost` of your `home.ts` file:\n\n``` javascript\n    // src/pages/home/home.ts\n    [...]\n        // submit post to the backend server to trigger pusher event\n        this.http.post('http://localhost:3128/create-post', body).subscribe(() =\u003e {\n          alert.present();\n        });\n    [...]\n```\n\nTo test the application on your mobile device, download the [IonicDevApp](https://ionicframework.com/docs/pro/devapp/) on your mobile device. Ensure that your device and computer are on the same network and you should see this demo application listed there:\n\n![ionic-presence-test-app](//images.ctfassets.net/1es3ne0caaid/1DdiNS8Nm4Ui0oysWcumQO/e2203b9d31dfeaa0e98f8f42269348bf/ionic-presence-test-app.png)\n\nNow, testing with the device, we get the following:\n\n![ionic-presence-demo-3](//images.ctfassets.net/1es3ne0caaid/AptCnwyeRwMQgKuSW2uag/dcccc9c4dafe09e22ee8a467b84e8e32/ionic-presence-demo-3.gif)\n\n## Conclusion\n\nIn this tutorial, we saw how to use Pusher Channels and Ionic to build a social media application that lets you know who’s online and how many online friends your post reach when they’re shared. There are many more use cases for Pusher Channels, so feel free to use concepts shared here in your own application. Here’s a link to the [GitHub](https://github.com/oreHGA/ionic-twitter-clone) repository.","metaTitle":"Building a social app with online presence using Ionic","metaDescription":"This tutorial will show you how to create a simple social feed for Android and iOS using Ionic. The app features a Node backend, and online presence indicators powered by Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3rb74nfHiMusgqcGmQyAoA","type":"Entry","createdAt":"2018-11-30T23:45:07.937Z","updatedAt":"2018-11-30T23:45:07.937Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a Pokemon battle game with React Native - Part 3: Animations and sounds","url":"pokemon-react-native-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNPokebattle","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4IiTE4WzzyQkoeAoaOqgcu","type":"Entry","createdAt":"2018-02-12T15:10:28.101Z","updatedAt":"2018-02-26T12:31:12.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Multiplayer Game","url":"multiplayer-game","type":"use case"}}],"reviewDate":"2018-11-30","description":"In this three part series, use React Native and Node.js to create a two-player Pokemon-like game. In part three, extend the app with improved animations.","prerequisite":"You will need Node 8+, Expo and Yarn installed on your machine.","content":"In this tutorial, we’ll add battle animations and sounds to make the game more fun to play with.\n\nThis is the final tutorial of a three-part series on creating a Pokemon battle game with React Native. \nThese are the topics covered in this series:\n\n- [Part one: Practice mode](https://pusher.com/tutorials/pokemon-react-native-part-1)\n- [Part two: Two-player mode](https://pusher.com/tutorials/pokemon-react-native-part-2)\n- Part three: Animations and sounds\n\n## Prerequisites\n\nThis tutorial has the same prerequisites as part two of the series.\n\n## Overview of features to add\n\nSince we’ve already implemented most of the features of the app, we can now focus on aesthetics. In this part, we’ll add animations and sounds to make it more interesting and pleasing to play with.\n\nHere are the sounds that we’re going to add:\n\n- Screen\n- Pokemon cry \n\nHere are the animations that we’re going to implement:\n\n- Health bar\n- Pokemon moves\n\nWe’re going to add the sounds first before the animations, as they’re easier to implement.\n\nWe’ll be using the [Audio API](https://docs.expo.io/versions/latest/sdk/audio) provided by Expo to play sounds, and React Native’s animation library to implement the animations.\n\n\n## Screen sounds\n\nWe’ll add background music to each of the screens. We’ll be using the sounds from [khinsider.com](https://downloads.khinsider.com/game-soundtracks/album/pokemon-original-game-soundtrack). Specifically, we’ll use the following soundtracks:\n\n- Login screen - [opening](https://downloads.khinsider.com/game-soundtracks/album/pokemon-original-game-soundtrack/101%2520-%2520opening.mp3). Rename the file to `opening.mp3`.\n- Team selection screen - [the final road](https://downloads.khinsider.com/game-soundtracks/album/pokemon-original-game-soundtrack/142%2520-%2520the%2520final%2520road.mp3). Rename the file to `final-road.mp3`.\n- Battle screen - [last battle (vs rival)](https://downloads.khinsider.com/game-soundtracks/album/pokemon-original-game-soundtrack/143%2520-%2520last%2520battle%2520%2528vs%2520rival%2529.mp3). Rename the file to `rival.mp3`.\n\nOpen the links above and download the `.mp3` file. Create a `sounds/background` folder inside `src/assets` and copy the files you downloaded in there. \n\nYou can also copy the files [from the repo](https://github.com/anchetaWern/RNPokeBattle/tree/animations-and-sounds/src/assets/sounds/background).\n\n### Login screen background sound\n\nOpen the login screen file, and import the `Audio` package from Expo:\n\n``` javascript\n    // src/screens/LoginScreen.js\n    import CustomText from \"../components/CustomText\";\n    \n    import { Audio } from \"expo\"; // add this\n```\n\nNext, add an initial value for the reference to the background sound. We need it as a class variable so we could stop the sound later once the user logs in:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      this.backgroundSound = null; // add this\n    }\n```\n\nNext, add a `componentDidMount` method with the following code:\n\n``` javascript\n    async componentDidMount() {\n      try {\n        this.backgroundSound = new Audio.Sound();\n        await this.backgroundSound.loadAsync(\n          require(\"../assets/sounds/background/opening.mp3\")\n        ); // load the mp3 file\n        await this.backgroundSound.setIsLoopingAsync(true); // make the sound loop after it's done playing\n        await this.backgroundSound.playAsync(); // start playing the sound\n      } catch (error) {\n        console.log(\"error loading background sound: \", error);\n      }\n    }\n    \n    render () {\n      // existing code here...\n    }\n```\n\nIn the code above, we’re using the [async/await pattern](https://medium.com/@bluepnume/learn-about-promises-before-you-start-using-async-await-eb148164a9c8) to load and play the background sound. To use the async/await pattern, we add the `async` keyword before the parent function name or the before the function’s open and close parenthesis, if it’s an anonymous function. Inside the function, we can use the `await` keyword to wait for the promise to resolve before executing the next line of code. This essentially makes the asynchronous function behave as if it were a synchronous one.\n\nThe `loadAsync` method accepts a reference to a file through the `require`  method. This is the same method we’re using to load images in React Native. Most methods in the Expo Audio API are async. This means you either have to use a promise or callback function to get its response. That’s the reason why we need to put the `await` keyword at the beginning of each method call, so each method will wait for the results of the previous method call before proceeding.\n\nNext, update the `login` method so it stops the sound once the user logs in. We need to stop the sound because it doesn’t automatically stop once a new sound starts playing. As mentioned earlier, each screen will have its own background sound. That’s why we need to stop it before the sound in the next screen starts playing:\n\n``` javascript\n    login = () =\u003e {\n      let username = this.state.username;\n    \n      if (username) {\n        this.props.navigation.navigate(\"TeamSelect\", {\n          username\n        });\n    \n        this.backgroundSound.stopAsync(); // add this\n      }\n    };\n```\n\n### Team selection screen background sound\n\nDo the same for the team selection screen. Be sure to load the correct `.mp3` file:\n\n``` javascript\n    // src/screens/TeamSelectionScreen.js\n    import Pusher from \"pusher-js/react-native\";\n    \n    import { Audio } from \"expo\"; // add this\n\n\n    constructor(props) {\n      // previous code here..\n      \n      this.backgroundSound = null; // add this\n    }\n\n\n    async componentDidMount() {\n      try {\n        this.backgroundSound = new Audio.Sound();\n        await this.backgroundSound.loadAsync(\n          require(\"../assets/sounds/background/final-road.mp3\")\n        );\n        await this.backgroundSound.setIsLoopingAsync(true);\n        await this.backgroundSound.playAsync();\n      } catch (error) {\n        console.log(\"error loading background sound: \", error);\n      }\n    }\n```\n\n### Battle screen background sound\n\nLastly, do the same for the battle screen:\n\n``` javascript\n    // src/screens/BattleScreen.js\n    import { Ionicons } from \"@expo/vector-icons\";\n    \n    import { Audio } from \"expo\"; // add this\n\n\n    constructor(props) {\n      // previous code here..\n      \n      this.backgroundSound = null; // add this\n    }\n\n\n    async componentDidMount() {\n      // previous code here..\n      \n      // add this\n      try {\n        this.backgroundSound = new Audio.Sound();\n        await this.backgroundSound.loadAsync(\n          require(\"../assets/sounds/background/rival.mp3\")\n        );\n        await this.backgroundSound.setIsLoopingAsync(true);\n        await this.backgroundSound.playAsync();\n      } catch (error) {\n        console.log(\"error loading background sound: \", error);\n      }\n    }\n```\n\n## Pokemon cry sounds\n\nWhen a user switches to a specific Pokemon on their team or their Pokemon faints, we want to play their [cry](https://bulbapedia.bulbagarden.net/wiki/Cry). \n\nDownload their cry (`.mp3` file) from the [asset folder of the Pokemon Showdown website](https://play.pokemonshowdown.com/audio/cries/). Once downloaded, create a `cries` folder inside `src/assets/sounds` and copy the files you downloaded over to that folder.\n\nNext, update the `src/data/pokemon_data.js` file so it includes a `cry` property for each Pokemon. We need to do this because we can’t really pass a variable to the `require` function. You can simply [copy the contents of the file in the repo](https://github.com/anchetaWern/RNPokeBattle/blob/e644d8fa6be30ef51d3b29c52fcb0c04828090ff/src/data/pokemon_data.js) if you want. Just be sure the filenames are the same.\n\n### Update the PokemonOption component\n\nAt this point, we’re now ready to add the cry sounds. Let’s first add the code for playing the cry when the user switches to another Pokemon. Start by importing the `Audio` package:\n\n``` javascript\n    // src/components/PokemonOption/PokemonOption.js\n    import { connect } from \"react-redux\";\n    \n    import { Audio } from \"expo\"; // add this\n```\n\nNext, we need to convert the component into a class-based one:\n\n``` javascript\n    class PokemonOption extends Component {\n      render() {\n        const { pokemon_data, is_selected, action_type } = this.props; // add this\n        \n        // add the same return code here..\n      }\n    }\n```\n\nNote that we’re extracting fewer props in the code above. This is because we’ll be separating the event handler for the `onPress` event of the `TouchableOpacity` component.\n\nAs mentioned earlier, playing Audio requires the direct parent function to have the `async` keyword. While you can actually do it like the one below, it’s better if we just refactor the code to declare the function for handling the `onPress` event separately:\n\n``` javascript\n    \u003cTouchableOpacity onPress={async () =\u003e {\n      // same code here..\n    }}\u003e\n```\n\nTo refactor the code, copy the existing code inside `onPress`. \n\nNext, create a `selectPokemon` function and paste the existing code inside it. Above the existing code, add the props that were previously being extracted:\n\n``` javascript\n    render() {\n      // same code here..\n    }\n    \n    // add this\n    selectPokemon = async () =\u003e {\n      // add these:\n      const {\n        pokemon_data,\n        is_selected,\n        action_type,\n        togglePokemon,\n        setPokemon,\n        setMessage,\n        setMove,\n        backToMove,\n        opponents_channel\n      } = this.props;\n    \n      const { id, cry } = pokemon_data; // add this\n      \n      // paste existing code here...\n      \n    };\n```\n\nNext, update the code you just pasted to play the cry sound when the `action_type` is `switch-pokemon`:\n\n``` javascript\n    if (action_type == \"select-pokemon\") {\n      // previous code here..\n    } else if (action_type == \"switch-pokemon\") {\n      // previous code here..\n    \n      // add these:    \n      try {\n        let crySound = new Audio.Sound();\n        await crySound.loadAsync(cry);\n        await crySound.playAsync();\n      } catch (error) {\n        console.log(\"error loading cry: \", error);\n      }\n      \n      // same code:\n      setTimeout(() =\u003e {\n        setMessage(\"Please wait for your turn...\");\n        setMove(\"wait-for-turn\");\n      }, 2000);\n    }\n```\n\n### Update the MovesList component\n\nNext, we need to update the MovesList component so it plays the cry sound when the opponent Pokemon faints:\n\n``` javascript\n    // src/components/MovesList/MovesList.js\n    \n    import { connect } from \"react-redux\";\n    \n    import { Audio } from \"expo\"; // add this\n```\n\nJust like what we did with the PokemonOption component earlier, we also need to refactor this component into a class-based one:\n\n``` javascript\n    class MovesList extends Component {\n      render() {\n        const { moves } = this.props;\n        \n        // add existing return code here..\n      }\n    }\n```\n\nNext, copy the code inside the `onPress` handler, then update it to use a named function. Pass in the `item` from the FlatLists’ `renderItem` method as an argument so we could make use of it inside the `selectMove` function:\n\n``` javascript\n    \u003cTouchableOpacity\n      style={styles.container}\n      onPress={this.selectMove.bind(this, item)}\n    \u003e\n      \u003cCustomText styles={styles.label}\u003e{item.title}\u003c/CustomText\u003e\n    \u003c/TouchableOpacity\u003e\n```\n\nAdd the `selectMove` function and paste the code from `onPress`:\n\n``` javascript\n    selectMove = async item =\u003e {\n      // add these:\n      const {\n        moves,\n        opponent_pokemon,\n        setOpponentPokemonHealth,\n    \n        backToMove,\n        pokemon,\n        setMessage,\n        setMove,\n        removePokemonFromOpponentTeam,\n        setOpponentPokemon,\n        opponents_channel\n      } = this.props;\n      \n      // paste existing onPress code here..\n      \n    }\n```\n\nLastly, when the opponent’s Pokemon faints, play the cry sound:\n\n``` javascript\n    if (health \u003c 1) {\n      // existing code here..\n      \n      // add these:\n      try {\n        let crySound = new Audio.Sound();\n        await crySound.loadAsync(opponent_pokemon.cry);\n        await crySound.playAsync();\n      } catch (error) {\n        console.log(\"error loading cry: \", error);\n      }\n    }\n```\n\n### Update the battle screen\n\nThe last thing we need to update is the battle screen. We also need to play the cry sound when the user receives an update that their opponent switched their Pokemon, or when their own Pokemon faints after receiving an attack.\n\nIn the code for handling the `client-switched-pokemon` event, we update the anonymous function so it uses the `async` keyword. Because we previously had a reference to the `pokemon`, we can just use it to get the `cry`:\n\n``` javascript\n    // src/screens/BattleScreen.js\n    \n    my_channel.bind(\"client-switched-pokemon\", async ({ team_member_id }) =\u003e {\n      // existing code here..\n      \n      // add these:\n      try {\n        let crySound = new Audio.Sound();\n        await crySound.loadAsync(pokemon.cry);\n        await crySound.playAsync();\n      } catch (error) {\n        console.log(\"error loading cry: \", error);\n      }\n      \n      // this is existing code:\n      setTimeout(() =\u003e {\n        setMove(\"select-move\");\n      }, 1500);\n    });\n```\n\nNext, inside the handler for the `client-pokemon-attacked` event, when the Pokemon faints, play the cry sound:\n\n``` javascript\n    if (data.health \u003c 1) { // Pokemon faints\n      // existing code here..\n      \n      setTimeout(async () =\u003e { // note the async\n        // existing code here..\n      \n        // add these:\n        try {\n          let crySound = new Audio.Sound();\n          await crySound.loadAsync(fainted_pokemon.cry);\n          await crySound.playAsync();\n        } catch (error) {\n          console.log(\"error loading cry: \", error);\n        }\n      }, 1000);\n    \n      // existing code here..\n    }\n```\n\nNote that this time, we’ve placed the `async` keyword in the function for `setTimeout` instead of the event handler itself. This is because we only need it on the direct parent function.\n\n\n## Health bar animation\n\nNow it’s time to implement the animations. If you’re new to animations in React Native, I recommend that you check out my article on [React Native animations](https://blog.pusher.com/animation-react-native-part-1/).\n\nLet’s first animate the health bar. Currently, when a Pokemon loses health, their current HP just abruptly changes when they receive the damage. We want to change it gradually so it gives the illusion that the Pokemon is slowly losing its health as it receives the attack:\n\n![rn-pokemon-3-1](//images.ctfassets.net/1es3ne0caaid/2Mnfxl11gISc20s6WwcECW/a47f745bf9cb03cab22b9faf37ed7a2f/rn-pokemon-3-1.gif)\n\nTo accommodate the animations, we first need to convert the HealthBar component to a class-based one. This is because we now need to work with the state:\n\n``` javascript\n    // src/components/HealthBar/HealthBar.js\n    \n    class HealthBar extends Component {\n      render() {\n        const { label, currentHealth, totalHealth } = this.props;\n        \n        // paste existing return code here..\n      }\n    }\n```\n\nNext, extract the `Animated` library from React Native. This allows us to perform animations:\n\n``` javascript\n    import { View, Animated } from \"react-native\"; \n```\n\nNext, declare the maximum width that the health bar can consume. We’ll be using this later to calculate the width to apply for the current health:\n\n``` javascript\n    import CustomText from \"../CustomText\";\n    \n    const available_width = 100; // add this\n```\n\nNext, initialize the state value which will represent the Pokemon’s current health. In the constructor, we also initialize the animated value. This is the value that we’ll interpolate so the health bar will be animated. Here, we’re using the `currentHealth` passed via props so the health bar animations and health percentage text will always use the current Pokemon’s health:\n\n``` javascript\n    class HealthBar extends Component {\n      // add these:\n      state = {\n        currentHealth: this.props.currentHealth // represents the Pokemon's current health\n      };\n      \n      constructor(props) {\n        super(props);\n        this.currentHealth = new Animated.Value(this.props.currentHealth); // add this\n      }\n      \n      // existing code here..\n      \n    }\n```\n\nYou might be wondering why we need to add a separate state value for storing the Pokemon’s health when we’re already passing it as a prop. The answer is that we also want to animate the number which represents the health percentage while the health bar animation is in progress. The `currentHealth` values passed via props only represents the current health, so we can’t really update it.\n\nNext, add the `getCurrentHealthStyles` function. This is where we define how the health bar will be updated while the animation is in progress. As you’ve seen in the demo earlier, the health bar should decrease its width and change its color from colors between green (healthy) to red (almost fainting). That’s exactly what we’re defining here:\n\n``` javascript\n    getCurrentHealthStyles = () =\u003e {\n      var animated_width = this.currentHealth.interpolate({\n        inputRange: [0, 250, 500],\n        outputRange: [0, available_width / 2, available_width]\n      });\n    \n      const color_animation = this.currentHealth.interpolate({\n        inputRange: [0, 250, 500],\n        outputRange: [\n          \"rgb(199, 45, 50)\",\n          \"rgb(224, 150, 39)\",\n          \"rgb(101, 203, 25)\"\n        ]\n      });\n    \n      return {\n        width: animated_width,\n        height: 8, //height of the health bar\n        backgroundColor: color_animation\n      };\n    };\n```\n\nIn the code above, we’re using the `interpolate` method to specify the input and output ranges of the animation. The `inputRange` represents the value of the animated value at a given point in time, while the `outputRange` is the value you want to use when the animated value is interpolated to the corresponding `inputRange`. Here’s how the values for the `animated_width` maps out. The number on the left is the `inputRange` while the one in the right is the `outputRange`:\n\n\n- 0 → 0\n- 250 → 50\n- 500 → 100\n\nThe numbers in between the numbers we specified are automatically calculated as the animation in on progress.\n\nThe same idea applies to the values for `color_animation`, only this time, it uses RGB color values as the `outputRange`. \n\nNext, update the `render` method so it uses the `Animated.View` component for the current health and call the `getCurrentHealthStyles` function to apply the styles. The health percent text should also be updated to make use of the value in the state. It needs to be divided by 5 because the animated value is 5 times the value of the health bar’s `available_width`:\n\n``` javascript\n    render() {\n      const { label } = this.props;\n    \n      return (\n        \u003cView\u003e\n          \u003cCustomText styles={styles.label}\u003e{label}\u003c/CustomText\u003e\n          \u003cView style={styles.container}\u003e\n            \u003cView style={styles.rail}\u003e\n              \u003cAnimated.View style={[this.getCurrentHealthStyles()]} /\u003e\n            \u003c/View\u003e\n            \u003cView style={styles.percent}\u003e\n              \u003cCustomText styles={styles.percentText}\u003e\n                {parseInt(this.state.currentHealth / 5)}%\n              \u003c/CustomText\u003e\n            \u003c/View\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nLastly, add the `componentDidUpdate` method. This gets invoked immediately after an update to the component occurs. The props don’t necessarily have to have been updated when this occurs, so we need to check whether the relevant prop was actually updated before we perform the animation. If it’s updated, we interpolate the `this.currentHealth` animated value over a period of 1.5 seconds. The final value will be the new `currentHealth` passed via props. After that, we add a listener to the animated value. This listener gets executed every time the animated value is updated. When that happens, we update the state value, which represents the Pokemon’s health. This allows us to update the UI with the current health percentage while the animation is in progress:\n\n``` javascript\n    componentDidUpdate(prevProps, prevState) {\n      if (prevProps.currentHealth !== this.props.currentHealth) { // check if health is updated\n        Animated.timing(this.currentHealth, {\n          duration: 1500, // 1.5 seconds\n          toValue: this.props.currentHealth // final health when the animation finishes\n        }).start(); // start the animation\n      \n        this.currentHealth.addListener(progress =\u003e {\n          this.setState({\n            currentHealth: progress.value\n          });\n        });\n      }\n    }\n```\n\n## Pokemon fainting animation\n\nWhen a Pokemon loses all of its health, we move the PokemonFullSprite component downwards out of the view. This gives the impression that the Pokemon collapsed. Here’s what it looks like (minus the boxing gloves, we’ll add that later):\n\n![rn-pokemon-3-2](//images.ctfassets.net/1es3ne0caaid/4buIkrcCRy6GOiIcMkkia4/175a5f59b39875ecff14041fdf3f1707/rn-pokemon-3-2.gif)\n\nJust like what we did with all the previous components, we also need to convert this one to a class-based one.\n\nOnce you’ve converted the component to a class-based one, import the `Animated` library:\n\n``` javascript\n    // src/components/PokemonFullSprite/PokemonFullSprite.js\n    \n    import { Image, Animated } from \"react-native\";\n```\n\nNext, add the animated value that we’re going to interpolate:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      this.sprite_translateY = new Animated.Value(0);\n    }\n```\n\nNext, update the `render` method to specify how the vertical position of the component will change. In this case, an `inputRange` of `0` means that it’s in its original position. Once it becomes `1000`, it’s no longer visible because its initial vertical position has moved 1000 pixels downwards. To apply the styles, specify it as an object under `transform`. This allows us to perform translation animations similar to the ones used in CSS3:\n\n``` javascript\n    render() {\n      const { spriteFront, spriteBack, orientation } = this.props;\n      let sprite = orientation == \"front\" ? spriteFront : spriteBack;\n      \n      // add these:\n      const pokemon_moveY = this.sprite_translateY.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, 1000]\n      });\n      \n      // use Animated.Image instead of Image, and add transform styles\n      return (\n        \u003cAnimated.Image\n          source={sprite}\n          resizeMode={\"contain\"}\n          style={[\n            styles.image,\n            {\n              transform: [\n                {\n                  translateY: pokemon_moveY\n                }\n              ]\n            }\n          ]}\n        /\u003e\n      );\n    }\n```\n\nWhen the component is updated, we only start the animation if the Pokemon has fainted. If it’s not then we set the initial value. This way, the component doesn’t stay hidden if the user switched to a different Pokemon:\n\n``` javascript\n    componentDidUpdate(prevProps, prevState) {\n      if (prevProps.isAlive !== this.props.isAlive \u0026\u0026 !this.props.isAlive) { // if Pokemon has fainted\n        Animated.timing(this.sprite_translateY, {\n          duration: 900,\n          toValue: 1\n        }).start();\n      } else if (prevProps.isAlive !== this.props.isAlive \u0026\u0026 this.props.isAlive) { // if Pokemon is alive\n        this.sprite_translateY.setValue(0); // unhides the component\n      }\n    }\n```\n\nThe last step is to add the `isAlive` prop when using the PokemonFullSprite component in the battle screen:\n\n``` javascript\n    // src/screens/BattleScreen.js\n    \u003cPokemonFullSprite\n      ...\n      isAlive={opponent_pokemon.current_hp \u003e 0}\n    /\u003e\n\n\n    \u003cPokemonFullSprite\n      ...\n      isAlive={pokemon.current_hp \u003e 0}\n    /\u003e\n```\n\n## Pokemon switch animation\n\nWhen the user switches Pokemon, we’re going to make a Pokeball bounce and scale the Pokemon gif up. This gives the impression that the user has thrown it and the Pokemon came out of it:\n\n![rn-pokemon-3-3](//images.ctfassets.net/1es3ne0caaid/78fxTmj54ssysgwQ4SCSMI/a4d8bb3f1003c2de75df49893720d4dc/rn-pokemon-3-3.gif)\n\nTo implement this animation, we also need to update the PokemonFullSprite component. Start by importing the additional components and libraries we need from React Native. This includes the `View` component and the `Easing` library to implement easing animations:\n\n``` javascript\n    // src/components/PokemonFullSprite/PokemonFullSprite.js\n    import { View, Image, Animated, Easing } from \"react-native\";\n```\n\nNext, update the constructor to include three new animated values. As mentioned earlier, we’re going to render a Pokeball which we will bounce so we need to translate its Y position. Aside from that, we also need to hide it so we have `pokeball_opacity`. Once the Pokeball is hidden, we want to scale up the Pokemon gif:\n\n``` javascript\n    constructor(props) {\n      // previously added code..\n      \n      // add these\n      this.pokeball_y_translate = new Animated.Value(0); // for updating the Y position of the Pokeball\n      this.pokeball_opacity = new Animated.Value(0); // for animating the Pokeball opacity\n      this.sprite_scale = new Animated.Value(0); // for scaling the Pokemon gif\n    }\n```\n\nNext, update the `render` method so it specifies how we’re going to interpolate the animated values we declared in the constructor:\n\n``` javascript\n    const pokemon_moveY = ... // same code\n    \n    // add these:\n    const pokemon_scale = this.sprite_scale.interpolate({\n      inputRange: [0, 0.5, 1],\n      outputRange: [0, 0.5, 1] // invisible (because zero size), half its original size, same as original size\n    });\n    \n    const pokeball_moveY = this.pokeball_y_translate.interpolate({\n      inputRange: [0, 1, 2],\n      outputRange: [0, 50, 25] // top to bottom Y position translate\n    });\n    \n    const pokeball_opacity = this.pokeball_opacity.interpolate({\n      inputRange: [0, 0.5, 1],\n      outputRange: [1, 0.5, 0] // full opacity, half opacity, invisible\n    });\n```\n\nNext, add an animated image on top of the Pokemon gif, then add the interpolated values to both the Pokeball image and the Pokemon gif. Since React Native doesn’t allow us to return siblings, we wrap everything in a `View` component:\n\n``` javascript\n    return (\n        \u003cView\u003e\n          \u003cAnimated.Image\n            source={require(\"../../assets/images/things/pokeball.png\")}\n            style={{\n              transform: [\n                {\n                  translateY: pokeball_moveY\n                }\n              ],\n              opacity: pokeball_opacity\n            }}\n          /\u003e\n    \n          \u003cAnimated.Image\n            source={sprite}\n            resizeMode={\"contain\"}\n            style={[\n              styles.image,\n              {\n                transform: [\n                  {\n                    translateY: pokemon_moveY\n                  },\n                  {\n                    scale: pokemon_scale\n                  }\n                ]\n              }\n            ]}\n          /\u003e\n    \n        \u003c/View\u003e\n      );\n    }\n```\n\nYou can get the [Pokeball image from this website](https://www.flaticon.com/free-icon/pokeball_361998). Select the 32px `.png` file. That’s also the source of the image included in the repo. Create a `things`  folder inside the `src/assets/images` directory, move the file in there, and rename it to `pokeball.png`.\n\nBecause we need to animate in two instances: `componentDidMount` and `componentDidUpdate`, we create a new function that will start the animations for us:\n\n``` javascript\n    animateSwitchPokemon = () =\u003e {\n      // initialize the animated values\n      this.sprite_translateY.setValue(0);\n      this.pokeball_opacity.setValue(0);\n      this.pokeball_y_translate.setValue(0);\n      this.sprite_scale.setValue(0);\n      \n      // perform the animations in order\n      Animated.sequence([\n        // bounce the Pokeball\n        Animated.timing(this.pokeball_y_translate, {\n          toValue: 1,\n          easing: Easing.bounce,\n          duration: 1000\n        }),\n        \n        // hide the Pokeball\n        Animated.timing(this.pokeball_opacity, {\n          toValue: 1,\n          duration: 200,\n          easing: Easing.linear\n        }),\n        \n        // scale the Pokemon gif up so it becomes visible\n        Animated.timing(this.sprite_scale, {\n          toValue: 1,\n          duration: 500\n        })\n      ]).start();\n    };\n```\n\nIn the code above, we first re-initialize the animated values. This is because this component doesn’t really get unmounted when a Pokemon faints and re-mounted again once the user switches to another Pokemon. If we don’t do this, the subsequent Pokemon’s that we switch to after the first one has fainted will no longer be visible. That is because the component will already have been in its final state of animation.\n\nOnce we’ve re-initialized the animated values, we performed the animations in order:\n\n\n1. Bounce the Pokeball.\n2. Hide the Pokeball.\n3. Scale the Pokemon gif up.\n\nWhen the component is mounted for the first time, we execute the function for animating it:\n\n``` javascript\n    componentDidMount() {\n      this.animateSwitchPokemon();\n    }\n```\n\nAlso, do the same when the component is updated. The only time we want to perform the animations for switching a Pokemon is when the user switches to a new one. Since we’re already passing the Pokemon name as a props, we simply check if the current one is not the same as the previous:\n\n``` javascript\n    componentDidUpdate(prevProps, prevState) {\n      if (prevProps.isAlive !== this.props.isAlive \u0026\u0026 !this.props.isAlive) {\n        // previous code here..\n      } else if (prevProps.pokemon !== this.props.pokemon \u0026\u0026 this.props.isAlive) {\n        this.animateSwitchPokemon();\n      }\n    }\n```\n\n## Pokemon move animation\n\nNext, we’re going to implement the Pokemon move animations. We’ll only implement a single generic move animation because it would take us forever if we’re going to implement everything via code. Here’s what the animation looks like:\n\n![rn-pokemon-3-4](//images.ctfassets.net/1es3ne0caaid/7HKTNLNoGIcSuIiSqsUIsW/24d567c3d49031c4cb044ec547deaee4/rn-pokemon-3-4.gif)\n\nJust like all the previous Pokemon-related animations, we’ll also be using the PokemonFullSprite component for this. Start by adding the new animated values that were going to interpolate. This includes the following: \n\n\n- `pokemon_opacity` - to seemingly make the Pokemon disappear for a split second to indicate that it received damage.\n- `punch_opacity` - for making the boxing gloves image appear while an attack is made, and disappear once it reaches its final destination (right above the Pokemon’s head).\n- `punch_translateY` - for moving the boxing gloves vertically across the target Pokemon when it’s attacked. \n\nHere’s the code. Add these after the last animated value in the constructor:\n\n``` javascript\n    // src/components/PokemonFullSprite/PokemonFullSprite.js\n    this.pokemon_opacity = new Animated.Value(0);\n    this.punch_opacity = new Animated.Value(0);\n    this.punch_translateY = new Animated.Value(0);\n```\n\nNext, we specify how the new animated values will be interpolated. This is inside the `render` method:\n\n``` javascript\n    const pokeball_opacity = ... // same code\n    \n    // add these:\n    const punch_opacity = this.punch_opacity.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 1]\n    });\n    \n    const punch_moveY = this.punch_translateY.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, -130] // negative value because we're moving upwards\n    });\n    \n    const pokemon_opacity = this.pokemon_opacity.interpolate({\n      inputRange: [0, 0.5, 1],\n      outputRange: [1, 0.2, 1] // appear, disappear, appear\n    });\n```\n\nNext, update the target components. The first one is the Pokemon gif. Add the `opacity` style:\n\n``` javascript\n    \u003cAnimated.Image\n      source={sprite}\n      resizeMode={\"contain\"}\n      style={[\n        styles.image,\n        {\n          transform: [\n            {\n              translateY: pokemon_moveY\n            },\n            {\n              scale: pokemon_scale\n            }\n          ],\n          opacity: pokemon_opacity // add this\n        }\n      ]}\n    /\u003e\n```\n\nThe second one hasn’t been added yet. Add it right below the Pokemon gif. This includes both transform and opacity animations:\n\n``` javascript\n    \u003cAnimated.Image\n      source={require(\"../../assets/images/things/fist.png\")}\n      style={[\n        styles.punch,\n        {\n          transform: [\n            {\n              translateY: punch_moveY // for moving it vertically across the Pokemon gif\n            }\n          ],\n          opacity: punch_opacity // for making it appear and disappear\n        }\n      ]}\n    /\u003e\n```\n\nYou’ll need to [download the image asset](https://www.flaticon.com/free-icon/fist_189013) we’re using above. Select the 32px `.png` file. That’s also the source of the image in the GitHub repo. Move the file inside the `src/assets/images/things` folder and rename it to `fist.png`.\n\nNext, add the styles. The component should be absolutely positioned so that it can overlap with the Pokemon gif:\n\n``` javascript\n    const styles = {\n      // previously added code here..  \n      \n      // add these:\n       punch: {\n        position: \"absolute\", // very important\n        bottom: -40,\n        left: 50\n      }\n    };\n```\n\nNext, add the function for starting the move animations:\n\n``` javascript\n    animateDamagePokemon = () =\u003e {\n      // reset the animated values\n      this.punch_opacity.setValue(0);\n      this.punch_translateY.setValue(0);\n      this.pokemon_opacity.setValue(0);\n    \n      Animated.sequence([\n        // make the boxing gloves visible\n        Animated.timing(this.punch_opacity, {\n          toValue: 1,\n          duration: 10,\n          easing: Easing.in\n        }),\n        \n        // move the boxing gloves upwards across the Pokemon\n        Animated.timing(this.punch_translateY, {\n          toValue: 1,\n          duration: 300,\n          easing: Easing.in\n        }),\n        \n        // hide the boxing gloves\n        Animated.timing(this.punch_opacity, {\n          toValue: 0,\n          duration: 200,\n          easing: Easing.in\n        }),\n        \n        // momentarily hide the Pokemon (to indicate damage)\n        Animated.timing(this.pokemon_opacity, {\n          toValue: 1,\n          duration: 850,\n          easing: Easing.in\n        })\n      ]).start();\n    };\n```\n\nNext, we call the `animateDamagePokemon` function when the current health changes. This may also happen when the user switches Pokemon so we need to make sure that the animation doesn’t execute if the previous Pokemon isn’t the same as the one the user switched to:\n\n``` javascript\n    componentDidUpdate(prevProps, prevState) {\n      // add these:\n      if (\n        prevProps.pokemon === this.props.pokemon \u0026\u0026\n        prevProps.currentHealth !== this.props.currentHealth\n      ) {\n        this.animateDamagePokemon();\n      }\n      \n      // existing code here..\n    }\n```\n\nNext, when we use the PokemonFullSprite component inside the battle screen, we need to add the new `currentHealth` prop. When its value changes, that’s the queue for the component to render the move animation:\n\n``` javascript\n    // src/screens/BattleScreen.js\n    \u003cPokemonFullSprite\n      ...\n      currentHealth={opponent_pokemon.current_hp}\n    /\u003e\n    \n    \u003cPokemonFullSprite\n      ...\n      currentHealth={pokemon.current_hp}\n    /\u003e\n```\n\nLastly, we need to move the code for dispatching the action for updating the Pokemon’s health to the very first line when the callback function is called. This is because setting the Pokemon’s health triggers the move animation as well, and we want to perform it while the health is being animated:\n\n``` javascript\n    // src/screens/BattleScreen.js\n    my_channel.bind(\"client-pokemon-attacked\", data =\u003e {\n      setPokemonHealth(data.team_member_id, data.health); // move this (previously above: setMove(\"select-move\"))\n      \n      // previously added code here..\n    });\n```\n\n## Conclusion\n\nWe’ve reached the end of this tutorial. Even though it took us three tutorials to implement it, there are still lots of things that need to be covered: \n\n\n- Only a handful of Pokemon can be selected, and their moves are limited. \n- There are two-turn moves like Fly, Dig, and Solar Beam in the `moves_data.js` file, but they’re not really implemented as such. \n- Moves that are supposed to modify base stats aren’t also implemented. There are also no status conditions such as frozen, burned, or paralyzed.\n- Players can’t use or equip items such as the max potion, berries to their Pokemon.\n\nYou might also have noticed that there’s a bug in the app. I call it “Zombie mode”. When your Pokemon faints, you can actually go to the Pokemon move selection screen and attack with your fainted Pokemon. \n\nLastly, there’s no functionality yet to inform both players that someone has won. Even though it’s obvious, it’s always good to acknowledge it. So if you’re interested, I encourage you to develop the app further.\n\nIn this tutorial, you learned how to play background sounds within an app using Expo’s Audio API. You also learned how to implement animations in React Native.\n\nThat also wraps up the series. In this series, you learned how to re-create the battles in the classic Pokemon game using React Native and Pusher. Along the way, you learned how to use Redux, Pusher Channels, audio, and animations in React Native.\n\nYou can find the code for this app on its [GitHub repo](https://github.com/anchetaWern/RNPokebattle). The code added to this specific part of the series is on the `animations-and-sounds` branch.","metaTitle":"Create a Pokemon battle game with React Native - Part 3","metaDescription":"In this three part series, use React Native and Node.js to create a two-player Pokemon-like game. In part three, extend the app with improved animations."}}],"defaultValue":"Channels","queryType":"product","pages":33,"route":"/tutorials","query":{"product":"Channels","page":"6"}}},"page":"/tutorials","query":{"product":"Channels","page":"6"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&page=6 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:40:07 GMT -->
</html>